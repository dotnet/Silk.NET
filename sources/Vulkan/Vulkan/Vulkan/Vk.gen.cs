// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Ported from the Vulkan headers and corresponding dependencies.
// Original source is Copyright 2015-2023 The Khronos Group Inc. Licensed under the MIT license.
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Silk.NET.Vulkan;

[SupportedApiProfile("vulkan")]
public unsafe partial class Vk : IVk, IVk.Static
{
    private InstanceHandle? _currentInstance;
    private DeviceHandle? _currentDevice;
    public InstanceHandle? CurrentInstance
    {
        get => _currentInstance;
        set
        {
            if (_currentInstance != null && _currentInstance != value)
                throw new InvalidOperationException(
                    "CurrentInstance has already been set. Please create a new API instance so that the loaded function pointers can be kept separate."
                );
            _currentInstance = value;
        }
    }
    public DeviceHandle? CurrentDevice
    {
        get => _currentDevice;
        set
        {
            if (_currentDevice != null && _currentDevice != value)
                throw new InvalidOperationException(
                    "CurrentDevice has already been set. Please create a new API instance so that the loaded function pointers can be kept separate."
                );
            _currentDevice = value;
        }
    }

    public partial class ThisThread
    {
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_acquire_drm_display"],
            ImpliesSets = ["VK_EXT_direct_mode_display"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkAcquireDrmDisplayEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AcquireDrmDisplayEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("int32_t")] int drmFd,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display
        ) => Underlying.Value!.AcquireDrmDisplayEXT(physicalDevice, drmFd, display);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AcquireNextImage2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAcquireNextImageInfoKHR *")]
                AcquireNextImageInfoKHR* pAcquireInfo,
            [NativeTypeName("uint32_t *")] uint* pImageIndex
        ) => Underlying.Value!.AcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AcquireNextImage2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAcquireNextImageInfoKHR *")]
                Ref<AcquireNextImageInfoKHR> pAcquireInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pImageIndex
        )
        {
            fixed (uint* __dsl_pImageIndex = pImageIndex)
            fixed (AcquireNextImageInfoKHR* __dsl_pAcquireInfo = pAcquireInfo)
            {
                return (Result)AcquireNextImage2KHR(device, __dsl_pAcquireInfo, __dsl_pImageIndex);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImageKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AcquireNextImageKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("uint64_t")] ulong timeout,
            [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
            [NativeTypeName("VkFence")] FenceHandle fence,
            [NativeTypeName("uint32_t *")] uint* pImageIndex
        ) =>
            Underlying.Value!.AcquireNextImageKHR(
                device,
                swapchain,
                timeout,
                semaphore,
                fence,
                pImageIndex
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImageKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AcquireNextImageKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("uint64_t")] ulong timeout,
            [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
            [NativeTypeName("VkFence")] FenceHandle fence,
            [NativeTypeName("uint32_t *")] Ref<uint> pImageIndex
        )
        {
            fixed (uint* __dsl_pImageIndex = pImageIndex)
            {
                return (Result)AcquireNextImageKHR(
                    device,
                    swapchain,
                    timeout,
                    semaphore,
                    fence,
                    __dsl_pImageIndex
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [NativeFunction("vulkan", EntryPoint = "vkAcquirePerformanceConfigurationINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AcquirePerformanceConfigurationIntel(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPerformanceConfigurationAcquireInfoINTEL *")]
                PerformanceConfigurationAcquireInfoIntel* pAcquireInfo,
            [NativeTypeName("VkPerformanceConfigurationINTEL *")]
                PerformanceConfigurationIntelHandle* pConfiguration
        ) =>
            Underlying.Value!.AcquirePerformanceConfigurationIntel(
                device,
                pAcquireInfo,
                pConfiguration
            );

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAcquirePerformanceConfigurationINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AcquirePerformanceConfigurationIntel(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPerformanceConfigurationAcquireInfoINTEL *")]
                Ref<PerformanceConfigurationAcquireInfoIntel> pAcquireInfo,
            [NativeTypeName("VkPerformanceConfigurationINTEL *")]
                Ref<PerformanceConfigurationIntelHandle> pConfiguration
        )
        {
            fixed (PerformanceConfigurationIntelHandle* __dsl_pConfiguration = pConfiguration)
            fixed (PerformanceConfigurationAcquireInfoIntel* __dsl_pAcquireInfo = pAcquireInfo)
            {
                return (Result)AcquirePerformanceConfigurationIntel(
                    device,
                    __dsl_pAcquireInfo,
                    __dsl_pConfiguration
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkAcquireProfilingLockKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AcquireProfilingLockKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAcquireProfilingLockInfoKHR *")]
                AcquireProfilingLockInfoKHR* pInfo
        ) => Underlying.Value!.AcquireProfilingLockKHR(device, pInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAcquireProfilingLockKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AcquireProfilingLockKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAcquireProfilingLockInfoKHR *")]
                Ref<AcquireProfilingLockInfoKHR> pInfo
        )
        {
            fixed (AcquireProfilingLockInfoKHR* __dsl_pInfo = pInfo)
            {
                return (Result)AcquireProfilingLockKHR(device, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkAllocateCommandBuffers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AllocateCommandBuffers(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCommandBufferAllocateInfo *")]
                CommandBufferAllocateInfo* pAllocateInfo,
            [NativeTypeName("VkCommandBuffer *")] CommandBufferHandle* pCommandBuffers
        ) => Underlying.Value!.AllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAllocateCommandBuffers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AllocateCommandBuffers(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCommandBufferAllocateInfo *")]
                Ref<CommandBufferAllocateInfo> pAllocateInfo,
            [NativeTypeName("VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
        )
        {
            fixed (CommandBufferHandle* __dsl_pCommandBuffers = pCommandBuffers)
            fixed (CommandBufferAllocateInfo* __dsl_pAllocateInfo = pAllocateInfo)
            {
                return (Result)AllocateCommandBuffers(
                    device,
                    __dsl_pAllocateInfo,
                    __dsl_pCommandBuffers
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkAllocateDescriptorSets")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AllocateDescriptorSets(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorSetAllocateInfo *")]
                DescriptorSetAllocateInfo* pAllocateInfo,
            [NativeTypeName("VkDescriptorSet *")] DescriptorSetHandle* pDescriptorSets
        ) => Underlying.Value!.AllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAllocateDescriptorSets")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AllocateDescriptorSets(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorSetAllocateInfo *")]
                Ref<DescriptorSetAllocateInfo> pAllocateInfo,
            [NativeTypeName("VkDescriptorSet *")] Ref<DescriptorSetHandle> pDescriptorSets
        )
        {
            fixed (DescriptorSetHandle* __dsl_pDescriptorSets = pDescriptorSets)
            fixed (DescriptorSetAllocateInfo* __dsl_pAllocateInfo = pAllocateInfo)
            {
                return (Result)AllocateDescriptorSets(
                    device,
                    __dsl_pAllocateInfo,
                    __dsl_pDescriptorSets
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkAllocateMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AllocateMemory(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMemoryAllocateInfo *")] MemoryAllocateInfo* pAllocateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDeviceMemory *")] DeviceMemoryHandle* pMemory
        ) => Underlying.Value!.AllocateMemory(device, pAllocateInfo, pAllocator, pMemory);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAllocateMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AllocateMemory(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMemoryAllocateInfo *")] Ref<MemoryAllocateInfo> pAllocateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDeviceMemory *")] Ref<DeviceMemoryHandle> pMemory
        )
        {
            fixed (DeviceMemoryHandle* __dsl_pMemory = pMemory)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (MemoryAllocateInfo* __dsl_pAllocateInfo = pAllocateInfo)
            {
                return (Result)AllocateMemory(
                    device,
                    __dsl_pAllocateInfo,
                    __dsl_pAllocator,
                    __dsl_pMemory
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_AMD_anti_lag"])]
        [NativeFunction("vulkan", EntryPoint = "vkAntiLagUpdateAMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void AntiLagUpdateAMD(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAntiLagDataAMD *")] AntiLagDataAMD* pData
        ) => Underlying.Value!.AntiLagUpdateAMD(device, pData);

        [SupportedApiProfile("vulkan", ["VK_AMD_anti_lag"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAntiLagUpdateAMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void AntiLagUpdateAMD(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAntiLagDataAMD *")] Ref<AntiLagDataAMD> pData
        )
        {
            fixed (AntiLagDataAMD* __dsl_pData = pData)
            {
                AntiLagUpdateAMD(device, __dsl_pData);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkBeginCommandBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BeginCommandBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCommandBufferBeginInfo *")] CommandBufferBeginInfo* pBeginInfo
        ) => Underlying.Value!.BeginCommandBuffer(commandBuffer, pBeginInfo);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBeginCommandBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BeginCommandBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCommandBufferBeginInfo *")]
                Ref<CommandBufferBeginInfo> pBeginInfo
        )
        {
            fixed (CommandBufferBeginInfo* __dsl_pBeginInfo = pBeginInfo)
            {
                return (Result)BeginCommandBuffer(commandBuffer, __dsl_pBeginInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkBindAccelerationStructureMemoryNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindAccelerationStructureMemoryNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindAccelerationStructureMemoryInfoNV *")]
                BindAccelerationStructureMemoryInfoNV* pBindInfos
        ) => Underlying.Value!.BindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindAccelerationStructureMemoryNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindAccelerationStructureMemoryNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindAccelerationStructureMemoryInfoNV *")]
                Ref<BindAccelerationStructureMemoryInfoNV> pBindInfos
        )
        {
            fixed (BindAccelerationStructureMemoryInfoNV* __dsl_pBindInfos = pBindInfos)
            {
                return (Result)BindAccelerationStructureMemoryNV(
                    device,
                    bindInfoCount,
                    __dsl_pBindInfos
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindBufferMemory(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
            [NativeTypeName("VkDeviceSize")] ulong memoryOffset
        ) => Underlying.Value!.BindBufferMemory(device, buffer, memory, memoryOffset);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindBufferMemory2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindBufferMemoryInfo *")] BindBufferMemoryInfo* pBindInfos
        ) => Underlying.Value!.BindBufferMemory2(device, bindInfoCount, pBindInfos);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindBufferMemory2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindBufferMemoryInfo *")] Ref<BindBufferMemoryInfo> pBindInfos
        )
        {
            fixed (BindBufferMemoryInfo* __dsl_pBindInfos = pBindInfos)
            {
                return (Result)BindBufferMemory2(device, bindInfoCount, __dsl_pBindInfos);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
        [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindBufferMemory2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindBufferMemoryInfo *")] BindBufferMemoryInfo* pBindInfos
        ) => Underlying.Value!.BindBufferMemory2KHR(device, bindInfoCount, pBindInfos);

        [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindBufferMemory2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindBufferMemoryInfo *")] Ref<BindBufferMemoryInfo> pBindInfos
        )
        {
            fixed (BindBufferMemoryInfo* __dsl_pBindInfos = pBindInfos)
            {
                return (Result)BindBufferMemory2KHR(device, bindInfoCount, __dsl_pBindInfos);
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkBindDataGraphPipelineSessionMemoryARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindDataGraphPipelineSessionMemoryARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindDataGraphPipelineSessionMemoryInfoARM *")]
                BindDataGraphPipelineSessionMemoryInfoARM* pBindInfos
        ) =>
            Underlying.Value!.BindDataGraphPipelineSessionMemoryARM(
                device,
                bindInfoCount,
                pBindInfos
            );

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindDataGraphPipelineSessionMemoryARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindDataGraphPipelineSessionMemoryARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindDataGraphPipelineSessionMemoryInfoARM *")]
                Ref<BindDataGraphPipelineSessionMemoryInfoARM> pBindInfos
        )
        {
            fixed (BindDataGraphPipelineSessionMemoryInfoARM* __dsl_pBindInfos = pBindInfos)
            {
                return (Result)BindDataGraphPipelineSessionMemoryARM(
                    device,
                    bindInfoCount,
                    __dsl_pBindInfos
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindImageMemory(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
            [NativeTypeName("VkDeviceSize")] ulong memoryOffset
        ) => Underlying.Value!.BindImageMemory(device, image, memory, memoryOffset);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindImageMemory2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindImageMemoryInfo *")] BindImageMemoryInfo* pBindInfos
        ) => Underlying.Value!.BindImageMemory2(device, bindInfoCount, pBindInfos);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindImageMemory2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindImageMemoryInfo *")] Ref<BindImageMemoryInfo> pBindInfos
        )
        {
            fixed (BindImageMemoryInfo* __dsl_pBindInfos = pBindInfos)
            {
                return (Result)BindImageMemory2(device, bindInfoCount, __dsl_pBindInfos);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
        [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindImageMemory2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindImageMemoryInfo *")] BindImageMemoryInfo* pBindInfos
        ) => Underlying.Value!.BindImageMemory2KHR(device, bindInfoCount, pBindInfos);

        [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindImageMemory2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindImageMemoryInfo *")] Ref<BindImageMemoryInfo> pBindInfos
        )
        {
            fixed (BindImageMemoryInfo* __dsl_pBindInfos = pBindInfos)
            {
                return (Result)BindImageMemory2KHR(device, bindInfoCount, __dsl_pBindInfos);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkBindOpticalFlowSessionImageNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindOpticalFlowSessionImageNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
            OpticalFlowSessionBindingPointNV bindingPoint,
            [NativeTypeName("VkImageView")] ImageViewHandle view,
            ImageLayout layout
        ) =>
            Underlying.Value!.BindOpticalFlowSessionImageNV(
                device,
                session,
                bindingPoint,
                view,
                layout
            );

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkBindTensorMemoryARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindTensorMemoryARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindTensorMemoryInfoARM *")]
                BindTensorMemoryInfoARM* pBindInfos
        ) => Underlying.Value!.BindTensorMemoryARM(device, bindInfoCount, pBindInfos);

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindTensorMemoryARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindTensorMemoryARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindTensorMemoryInfoARM *")]
                Ref<BindTensorMemoryInfoARM> pBindInfos
        )
        {
            fixed (BindTensorMemoryInfoARM* __dsl_pBindInfos = pBindInfos)
            {
                return (Result)BindTensorMemoryARM(device, bindInfoCount, __dsl_pBindInfos);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkBindVideoSessionMemoryKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindVideoSessionMemoryKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
            [NativeTypeName("uint32_t")] uint bindSessionMemoryInfoCount,
            [NativeTypeName("const VkBindVideoSessionMemoryInfoKHR *")]
                BindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos
        ) =>
            Underlying.Value!.BindVideoSessionMemoryKHR(
                device,
                videoSession,
                bindSessionMemoryInfoCount,
                pBindSessionMemoryInfos
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindVideoSessionMemoryKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindVideoSessionMemoryKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
            [NativeTypeName("uint32_t")] uint bindSessionMemoryInfoCount,
            [NativeTypeName("const VkBindVideoSessionMemoryInfoKHR *")]
                Ref<BindVideoSessionMemoryInfoKHR> pBindSessionMemoryInfos
        )
        {
            fixed (
                BindVideoSessionMemoryInfoKHR* __dsl_pBindSessionMemoryInfos =
                    pBindSessionMemoryInfos
            )
            {
                return (Result)BindVideoSessionMemoryKHR(
                    device,
                    videoSession,
                    bindSessionMemoryInfoCount,
                    __dsl_pBindSessionMemoryInfos
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkBuildAccelerationStructuresKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BuildAccelerationStructuresKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                AccelerationStructureBuildGeometryInfoKHR* pInfos,
            [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
                AccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos
        ) =>
            Underlying.Value!.BuildAccelerationStructuresKHR(
                device,
                deferredOperation,
                infoCount,
                pInfos,
                ppBuildRangeInfos
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBuildAccelerationStructuresKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BuildAccelerationStructuresKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
            [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
                Ref2D<AccelerationStructureBuildRangeInfoKHR> ppBuildRangeInfos
        )
        {
            fixed (
                AccelerationStructureBuildRangeInfoKHR** __dsl_ppBuildRangeInfos = ppBuildRangeInfos
            )
            fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pInfos = pInfos)
            {
                return (Result)BuildAccelerationStructuresKHR(
                    device,
                    deferredOperation,
                    infoCount,
                    __dsl_pInfos,
                    __dsl_ppBuildRangeInfos
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkBuildMicromapsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BuildMicromapsEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pInfos
        ) => Underlying.Value!.BuildMicromapsEXT(device, deferredOperation, infoCount, pInfos);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBuildMicromapsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BuildMicromapsEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pInfos
        )
        {
            fixed (MicromapBuildInfoEXT* __dsl_pInfos = pInfos)
            {
                return (Result)BuildMicromapsEXT(
                    device,
                    deferredOperation,
                    infoCount,
                    __dsl_pInfos
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_conditional_rendering"],
            ImpliesSets = [
                "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
                "VK_EXT_conditional_rendering+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginConditionalRenderingEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginConditionalRenderingEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkConditionalRenderingBeginInfoEXT *")]
                ConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin
        ) =>
            Underlying.Value!.CmdBeginConditionalRenderingEXT(
                commandBuffer,
                pConditionalRenderingBegin
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_conditional_rendering"],
            ImpliesSets = [
                "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
                "VK_EXT_conditional_rendering+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginConditionalRenderingEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginConditionalRenderingEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkConditionalRenderingBeginInfoEXT *")]
                Ref<ConditionalRenderingBeginInfoEXT> pConditionalRenderingBegin
        )
        {
            fixed (
                ConditionalRenderingBeginInfoEXT* __dsl_pConditionalRenderingBegin =
                    pConditionalRenderingBegin
            )
            {
                CmdBeginConditionalRenderingEXT(commandBuffer, __dsl_pConditionalRenderingBegin);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginDebugUtilsLabelEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
        ) => Underlying.Value!.CmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginDebugUtilsLabelEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
        )
        {
            fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
            {
                CmdBeginDebugUtilsLabelEXT(commandBuffer, __dsl_pLabelInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_shading"],
            ImpliesSets = [
                "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginPerTileExecutionQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginPerTileExecutionQCOM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPerTileBeginInfoQCOM *")]
                PerTileBeginInfoQCOM* pPerTileBeginInfo
        ) => Underlying.Value!.CmdBeginPerTileExecutionQCOM(commandBuffer, pPerTileBeginInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_shading"],
            ImpliesSets = [
                "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginPerTileExecutionQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginPerTileExecutionQCOM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPerTileBeginInfoQCOM *")]
                Ref<PerTileBeginInfoQCOM> pPerTileBeginInfo
        )
        {
            fixed (PerTileBeginInfoQCOM* __dsl_pPerTileBeginInfo = pPerTileBeginInfo)
            {
                CmdBeginPerTileExecutionQCOM(commandBuffer, __dsl_pPerTileBeginInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginQuery")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginQuery(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint query,
            [NativeTypeName("VkQueryControlFlags")] QueryControlFlags flags
        ) => Underlying.Value!.CmdBeginQuery(commandBuffer, queryPool, query, flags);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginQueryIndexedEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginQueryIndexedEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint query,
            [NativeTypeName("VkQueryControlFlags")] QueryControlFlags flags,
            [NativeTypeName("uint32_t")] uint index
        ) =>
            Underlying.Value!.CmdBeginQueryIndexedEXT(
                commandBuffer,
                queryPool,
                query,
                flags,
                index
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRendering")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRendering(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo
        ) => Underlying.Value!.CmdBeginRendering(commandBuffer, pRenderingInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRendering")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRendering(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo
        )
        {
            fixed (RenderingInfo* __dsl_pRenderingInfo = pRenderingInfo)
            {
                CmdBeginRendering(commandBuffer, __dsl_pRenderingInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering"],
            ImpliesSets = [
                "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
                "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderingKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRenderingKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo
        ) => Underlying.Value!.CmdBeginRenderingKHR(commandBuffer, pRenderingInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering"],
            ImpliesSets = [
                "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
                "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderingKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRenderingKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo
        )
        {
            fixed (RenderingInfo* __dsl_pRenderingInfo = pRenderingInfo)
            {
                CmdBeginRenderingKHR(commandBuffer, __dsl_pRenderingInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRenderPass(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
            SubpassContents contents
        ) => Underlying.Value!.CmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRenderPass(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderPassBeginInfo *")]
                Ref<RenderPassBeginInfo> pRenderPassBegin,
            SubpassContents contents
        )
        {
            fixed (RenderPassBeginInfo* __dsl_pRenderPassBegin = pRenderPassBegin)
            {
                CmdBeginRenderPass(commandBuffer, __dsl_pRenderPassBegin, contents);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRenderPass2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
            [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo
        ) =>
            Underlying.Value!.CmdBeginRenderPass2(
                commandBuffer,
                pRenderPassBegin,
                pSubpassBeginInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRenderPass2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderPassBeginInfo *")]
                Ref<RenderPassBeginInfo> pRenderPassBegin,
            [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo
        )
        {
            fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
            fixed (RenderPassBeginInfo* __dsl_pRenderPassBegin = pRenderPassBegin)
            {
                CmdBeginRenderPass2(commandBuffer, __dsl_pRenderPassBegin, __dsl_pSubpassBeginInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRenderPass2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
            [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo
        ) =>
            Underlying.Value!.CmdBeginRenderPass2KHR(
                commandBuffer,
                pRenderPassBegin,
                pSubpassBeginInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRenderPass2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderPassBeginInfo *")]
                Ref<RenderPassBeginInfo> pRenderPassBegin,
            [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo
        )
        {
            fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
            fixed (RenderPassBeginInfo* __dsl_pRenderPassBegin = pRenderPassBegin)
            {
                CmdBeginRenderPass2KHR(
                    commandBuffer,
                    __dsl_pRenderPassBegin,
                    __dsl_pSubpassBeginInfo
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginTransformFeedbackEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginTransformFeedbackEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstCounterBuffer,
            [NativeTypeName("uint32_t")] uint counterBufferCount,
            [NativeTypeName("const VkBuffer *")] BufferHandle* pCounterBuffers,
            [NativeTypeName("const VkDeviceSize *")] ulong* pCounterBufferOffsets
        ) =>
            Underlying.Value!.CmdBeginTransformFeedbackEXT(
                commandBuffer,
                firstCounterBuffer,
                counterBufferCount,
                pCounterBuffers,
                pCounterBufferOffsets
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginTransformFeedbackEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginTransformFeedbackEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstCounterBuffer,
            [NativeTypeName("uint32_t")] uint counterBufferCount,
            [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pCounterBuffers,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pCounterBufferOffsets
        )
        {
            fixed (ulong* __dsl_pCounterBufferOffsets = pCounterBufferOffsets)
            fixed (BufferHandle* __dsl_pCounterBuffers = pCounterBuffers)
            {
                CmdBeginTransformFeedbackEXT(
                    commandBuffer,
                    firstCounterBuffer,
                    counterBufferCount,
                    __dsl_pCounterBuffers,
                    __dsl_pCounterBufferOffsets
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginVideoCodingKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginVideoCodingKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkVideoBeginCodingInfoKHR *")]
                VideoBeginCodingInfoKHR* pBeginInfo
        ) => Underlying.Value!.CmdBeginVideoCodingKHR(commandBuffer, pBeginInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginVideoCodingKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginVideoCodingKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkVideoBeginCodingInfoKHR *")]
                Ref<VideoBeginCodingInfoKHR> pBeginInfo
        )
        {
            fixed (VideoBeginCodingInfoKHR* __dsl_pBeginInfo = pBeginInfo)
            {
                CmdBeginVideoCodingKHR(commandBuffer, __dsl_pBeginInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorBufferEmbeddedSamplers2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *")]
                BindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo
        ) =>
            Underlying.Value!.CmdBindDescriptorBufferEmbeddedSamplers2EXT(
                commandBuffer,
                pBindDescriptorBufferEmbeddedSamplersInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorBufferEmbeddedSamplers2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *")]
                Ref<BindDescriptorBufferEmbeddedSamplersInfoEXT> pBindDescriptorBufferEmbeddedSamplersInfo
        )
        {
            fixed (
                BindDescriptorBufferEmbeddedSamplersInfoEXT* __dsl_pBindDescriptorBufferEmbeddedSamplersInfo =
                    pBindDescriptorBufferEmbeddedSamplersInfo
            )
            {
                CmdBindDescriptorBufferEmbeddedSamplers2EXT(
                    commandBuffer,
                    __dsl_pBindDescriptorBufferEmbeddedSamplersInfo
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorBufferEmbeddedSamplersEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint set
        ) =>
            Underlying.Value!.CmdBindDescriptorBufferEmbeddedSamplersEXT(
                commandBuffer,
                pipelineBindPoint,
                layout,
                set
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorBuffersEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint bufferCount,
            [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
                DescriptorBufferBindingInfoEXT* pBindingInfos
        ) =>
            Underlying.Value!.CmdBindDescriptorBuffersEXT(
                commandBuffer,
                bufferCount,
                pBindingInfos
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorBuffersEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint bufferCount,
            [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
                Ref<DescriptorBufferBindingInfoEXT> pBindingInfos
        )
        {
            fixed (DescriptorBufferBindingInfoEXT* __dsl_pBindingInfos = pBindingInfos)
            {
                CmdBindDescriptorBuffersEXT(commandBuffer, bufferCount, __dsl_pBindingInfos);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorBuffersEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
                DescriptorBufferBindingInfoEXT pBindingInfos
        ) => Underlying.Value!.CmdBindDescriptorBuffersEXT(commandBuffer, pBindingInfos);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorSets(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint firstSet,
            [NativeTypeName("uint32_t")] uint descriptorSetCount,
            [NativeTypeName("const VkDescriptorSet *")] DescriptorSetHandle* pDescriptorSets,
            [NativeTypeName("uint32_t")] uint dynamicOffsetCount,
            [NativeTypeName("const uint32_t *")] uint* pDynamicOffsets
        ) =>
            Underlying.Value!.CmdBindDescriptorSets(
                commandBuffer,
                pipelineBindPoint,
                layout,
                firstSet,
                descriptorSetCount,
                pDescriptorSets,
                dynamicOffsetCount,
                pDynamicOffsets
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorSets(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint firstSet,
            [NativeTypeName("uint32_t")] uint descriptorSetCount,
            [NativeTypeName("const VkDescriptorSet *")] Ref<DescriptorSetHandle> pDescriptorSets,
            [NativeTypeName("uint32_t")] uint dynamicOffsetCount,
            [NativeTypeName("const uint32_t *")] Ref<uint> pDynamicOffsets
        )
        {
            fixed (uint* __dsl_pDynamicOffsets = pDynamicOffsets)
            fixed (DescriptorSetHandle* __dsl_pDescriptorSets = pDescriptorSets)
            {
                CmdBindDescriptorSets(
                    commandBuffer,
                    pipelineBindPoint,
                    layout,
                    firstSet,
                    descriptorSetCount,
                    __dsl_pDescriptorSets,
                    dynamicOffsetCount,
                    __dsl_pDynamicOffsets
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorSets2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkBindDescriptorSetsInfo *")]
                BindDescriptorSetsInfo* pBindDescriptorSetsInfo
        ) => Underlying.Value!.CmdBindDescriptorSets2(commandBuffer, pBindDescriptorSetsInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorSets2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkBindDescriptorSetsInfo *")]
                Ref<BindDescriptorSetsInfo> pBindDescriptorSetsInfo
        )
        {
            fixed (BindDescriptorSetsInfo* __dsl_pBindDescriptorSetsInfo = pBindDescriptorSetsInfo)
            {
                CmdBindDescriptorSets2(commandBuffer, __dsl_pBindDescriptorSetsInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorSets2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkBindDescriptorSetsInfo *")]
                BindDescriptorSetsInfo* pBindDescriptorSetsInfo
        ) => Underlying.Value!.CmdBindDescriptorSets2KHR(commandBuffer, pBindDescriptorSetsInfo);

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorSets2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkBindDescriptorSetsInfo *")]
                Ref<BindDescriptorSetsInfo> pBindDescriptorSetsInfo
        )
        {
            fixed (BindDescriptorSetsInfo* __dsl_pBindDescriptorSetsInfo = pBindDescriptorSetsInfo)
            {
                CmdBindDescriptorSets2KHR(commandBuffer, __dsl_pBindDescriptorSetsInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindIndexBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            IndexType indexType
        ) => Underlying.Value!.CmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindIndexBuffer2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkDeviceSize")] ulong size,
            IndexType indexType
        ) => Underlying.Value!.CmdBindIndexBuffer2(commandBuffer, buffer, offset, size, indexType);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindIndexBuffer2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkDeviceSize")] ulong size,
            IndexType indexType
        ) =>
            Underlying.Value!.CmdBindIndexBuffer2KHR(
                commandBuffer,
                buffer,
                offset,
                size,
                indexType
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_invocation_mask"],
            ImpliesSets = [
                "VK_KHR_ray_tracing_pipeline+VK_KHR_synchronization2",
                "VK_KHR_ray_tracing_pipeline+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindInvocationMaskHUAWEI")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindInvocationMaskHuawei(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImageView")] ImageViewHandle imageView,
            ImageLayout imageLayout
        ) => Underlying.Value!.CmdBindInvocationMaskHuawei(commandBuffer, imageView, imageLayout);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindPipeline")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindPipeline(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline
        ) => Underlying.Value!.CmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindPipelineShaderGroupNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindPipelineShaderGroupNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
            [NativeTypeName("uint32_t")] uint groupIndex
        ) =>
            Underlying.Value!.CmdBindPipelineShaderGroupNV(
                commandBuffer,
                pipelineBindPoint,
                pipeline,
                groupIndex
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindShadersEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint stageCount,
            [NativeTypeName("const VkShaderStageFlagBits *")] ShaderStageFlags* pStages,
            [NativeTypeName("const VkShaderEXT *")] ShaderEXTHandle* pShaders
        ) => Underlying.Value!.CmdBindShadersEXT(commandBuffer, stageCount, pStages, pShaders);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindShadersEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint stageCount,
            [NativeTypeName("const VkShaderStageFlagBits *")] Ref<ShaderStageFlags> pStages,
            [NativeTypeName("const VkShaderEXT *")] Ref<ShaderEXTHandle> pShaders
        )
        {
            fixed (ShaderEXTHandle* __dsl_pShaders = pShaders)
            fixed (ShaderStageFlags* __dsl_pStages = pStages)
            {
                CmdBindShadersEXT(commandBuffer, stageCount, __dsl_pStages, __dsl_pShaders);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadingRateImageNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindShadingRateImageNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImageView")] ImageViewHandle imageView,
            ImageLayout imageLayout
        ) => Underlying.Value!.CmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_memory_heap"],
            ImpliesSets = [
                "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindTileMemoryQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindTileMemoryQCOM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkTileMemoryBindInfoQCOM *")]
                TileMemoryBindInfoQCOM* pTileMemoryBindInfo
        ) => Underlying.Value!.CmdBindTileMemoryQCOM(commandBuffer, pTileMemoryBindInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_memory_heap"],
            ImpliesSets = [
                "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindTileMemoryQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindTileMemoryQCOM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkTileMemoryBindInfoQCOM *")]
                Ref<TileMemoryBindInfoQCOM> pTileMemoryBindInfo
        )
        {
            fixed (TileMemoryBindInfoQCOM* __dsl_pTileMemoryBindInfo = pTileMemoryBindInfo)
            {
                CmdBindTileMemoryQCOM(commandBuffer, __dsl_pTileMemoryBindInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindTransformFeedbackBuffersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindTransformFeedbackBuffersEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] BufferHandle* pBuffers,
            [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
            [NativeTypeName("const VkDeviceSize *")] ulong* pSizes
        ) =>
            Underlying.Value!.CmdBindTransformFeedbackBuffersEXT(
                commandBuffer,
                firstBinding,
                bindingCount,
                pBuffers,
                pOffsets,
                pSizes
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindTransformFeedbackBuffersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindTransformFeedbackBuffersEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pBuffers,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes
        )
        {
            fixed (ulong* __dsl_pSizes = pSizes)
            fixed (ulong* __dsl_pOffsets = pOffsets)
            fixed (BufferHandle* __dsl_pBuffers = pBuffers)
            {
                CmdBindTransformFeedbackBuffersEXT(
                    commandBuffer,
                    firstBinding,
                    bindingCount,
                    __dsl_pBuffers,
                    __dsl_pOffsets,
                    __dsl_pSizes
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindVertexBuffers(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] BufferHandle* pBuffers,
            [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets
        ) =>
            Underlying.Value!.CmdBindVertexBuffers(
                commandBuffer,
                firstBinding,
                bindingCount,
                pBuffers,
                pOffsets
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindVertexBuffers(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pBuffers,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets
        )
        {
            fixed (ulong* __dsl_pOffsets = pOffsets)
            fixed (BufferHandle* __dsl_pBuffers = pBuffers)
            {
                CmdBindVertexBuffers(
                    commandBuffer,
                    firstBinding,
                    bindingCount,
                    __dsl_pBuffers,
                    __dsl_pOffsets
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindVertexBuffers2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] BufferHandle* pBuffers,
            [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
            [NativeTypeName("const VkDeviceSize *")] ulong* pSizes,
            [NativeTypeName("const VkDeviceSize *")] ulong* pStrides
        ) =>
            Underlying.Value!.CmdBindVertexBuffers2(
                commandBuffer,
                firstBinding,
                bindingCount,
                pBuffers,
                pOffsets,
                pSizes,
                pStrides
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindVertexBuffers2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pBuffers,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pStrides
        )
        {
            fixed (ulong* __dsl_pStrides = pStrides)
            fixed (ulong* __dsl_pSizes = pSizes)
            fixed (ulong* __dsl_pOffsets = pOffsets)
            fixed (BufferHandle* __dsl_pBuffers = pBuffers)
            {
                CmdBindVertexBuffers2(
                    commandBuffer,
                    firstBinding,
                    bindingCount,
                    __dsl_pBuffers,
                    __dsl_pOffsets,
                    __dsl_pSizes,
                    __dsl_pStrides
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindVertexBuffers2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] BufferHandle* pBuffers,
            [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
            [NativeTypeName("const VkDeviceSize *")] ulong* pSizes,
            [NativeTypeName("const VkDeviceSize *")] ulong* pStrides
        ) =>
            Underlying.Value!.CmdBindVertexBuffers2EXT(
                commandBuffer,
                firstBinding,
                bindingCount,
                pBuffers,
                pOffsets,
                pSizes,
                pStrides
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindVertexBuffers2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pBuffers,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pStrides
        )
        {
            fixed (ulong* __dsl_pStrides = pStrides)
            fixed (ulong* __dsl_pSizes = pSizes)
            fixed (ulong* __dsl_pOffsets = pOffsets)
            fixed (BufferHandle* __dsl_pBuffers = pBuffers)
            {
                CmdBindVertexBuffers2EXT(
                    commandBuffer,
                    firstBinding,
                    bindingCount,
                    __dsl_pBuffers,
                    __dsl_pOffsets,
                    __dsl_pSizes,
                    __dsl_pStrides
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBlitImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkImageBlit *")] ImageBlit* pRegions,
            Filter filter
        ) =>
            Underlying.Value!.CmdBlitImage(
                commandBuffer,
                srcImage,
                srcImageLayout,
                dstImage,
                dstImageLayout,
                regionCount,
                pRegions,
                filter
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBlitImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkImageBlit *")] Ref<ImageBlit> pRegions,
            Filter filter
        )
        {
            fixed (ImageBlit* __dsl_pRegions = pRegions)
            {
                CmdBlitImage(
                    commandBuffer,
                    srcImage,
                    srcImageLayout,
                    dstImage,
                    dstImageLayout,
                    regionCount,
                    __dsl_pRegions,
                    filter
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBlitImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("const VkImageBlit *")] ImageBlit pRegions,
            Filter filter
        ) =>
            Underlying.Value!.CmdBlitImage(
                commandBuffer,
                srcImage,
                srcImageLayout,
                dstImage,
                dstImageLayout,
                pRegions,
                filter
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBlitImage2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkBlitImageInfo2 *")] BlitImageInfo2* pBlitImageInfo
        ) => Underlying.Value!.CmdBlitImage2(commandBuffer, pBlitImageInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBlitImage2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkBlitImageInfo2 *")] Ref<BlitImageInfo2> pBlitImageInfo
        )
        {
            fixed (BlitImageInfo2* __dsl_pBlitImageInfo = pBlitImageInfo)
            {
                CmdBlitImage2(commandBuffer, __dsl_pBlitImageInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBlitImage2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkBlitImageInfo2 *")] BlitImageInfo2* pBlitImageInfo
        ) => Underlying.Value!.CmdBlitImage2KHR(commandBuffer, pBlitImageInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBlitImage2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkBlitImageInfo2 *")] Ref<BlitImageInfo2> pBlitImageInfo
        )
        {
            fixed (BlitImageInfo2* __dsl_pBlitImageInfo = pBlitImageInfo)
            {
                CmdBlitImage2KHR(commandBuffer, __dsl_pBlitImageInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructureNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildAccelerationStructureNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkAccelerationStructureInfoNV *")]
                AccelerationStructureInfoNV* pInfo,
            [NativeTypeName("VkBuffer")] BufferHandle instanceData,
            [NativeTypeName("VkDeviceSize")] ulong instanceOffset,
            [NativeTypeName("VkBool32")] MaybeBool<uint> update,
            [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle dst,
            [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle src,
            [NativeTypeName("VkBuffer")] BufferHandle scratch,
            [NativeTypeName("VkDeviceSize")] ulong scratchOffset
        ) =>
            Underlying.Value!.CmdBuildAccelerationStructureNV(
                commandBuffer,
                pInfo,
                instanceData,
                instanceOffset,
                update,
                dst,
                src,
                scratch,
                scratchOffset
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructureNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildAccelerationStructureNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkAccelerationStructureInfoNV *")]
                Ref<AccelerationStructureInfoNV> pInfo,
            [NativeTypeName("VkBuffer")] BufferHandle instanceData,
            [NativeTypeName("VkDeviceSize")] ulong instanceOffset,
            [NativeTypeName("VkBool32")] MaybeBool<uint> update,
            [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle dst,
            [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle src,
            [NativeTypeName("VkBuffer")] BufferHandle scratch,
            [NativeTypeName("VkDeviceSize")] ulong scratchOffset
        )
        {
            fixed (AccelerationStructureInfoNV* __dsl_pInfo = pInfo)
            {
                CmdBuildAccelerationStructureNV(
                    commandBuffer,
                    __dsl_pInfo,
                    instanceData,
                    instanceOffset,
                    update,
                    dst,
                    src,
                    scratch,
                    scratchOffset
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresIndirectKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildAccelerationStructuresIndirectKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                AccelerationStructureBuildGeometryInfoKHR* pInfos,
            [NativeTypeName("const VkDeviceAddress *")] ulong* pIndirectDeviceAddresses,
            [NativeTypeName("const uint32_t *")] uint* pIndirectStrides,
            [NativeTypeName("const uint32_t *const *")] uint** ppMaxPrimitiveCounts
        ) =>
            Underlying.Value!.CmdBuildAccelerationStructuresIndirectKHR(
                commandBuffer,
                infoCount,
                pInfos,
                pIndirectDeviceAddresses,
                pIndirectStrides,
                ppMaxPrimitiveCounts
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresIndirectKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildAccelerationStructuresIndirectKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
            [NativeTypeName("const VkDeviceAddress *")] Ref<ulong> pIndirectDeviceAddresses,
            [NativeTypeName("const uint32_t *")] Ref<uint> pIndirectStrides,
            [NativeTypeName("const uint32_t *const *")] Ref2D<uint> ppMaxPrimitiveCounts
        )
        {
            fixed (uint** __dsl_ppMaxPrimitiveCounts = ppMaxPrimitiveCounts)
            fixed (uint* __dsl_pIndirectStrides = pIndirectStrides)
            fixed (ulong* __dsl_pIndirectDeviceAddresses = pIndirectDeviceAddresses)
            fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pInfos = pInfos)
            {
                CmdBuildAccelerationStructuresIndirectKHR(
                    commandBuffer,
                    infoCount,
                    __dsl_pInfos,
                    __dsl_pIndirectDeviceAddresses,
                    __dsl_pIndirectStrides,
                    __dsl_ppMaxPrimitiveCounts
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildAccelerationStructuresKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                AccelerationStructureBuildGeometryInfoKHR* pInfos,
            [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
                AccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos
        ) =>
            Underlying.Value!.CmdBuildAccelerationStructuresKHR(
                commandBuffer,
                infoCount,
                pInfos,
                ppBuildRangeInfos
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildAccelerationStructuresKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
            [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
                Ref2D<AccelerationStructureBuildRangeInfoKHR> ppBuildRangeInfos
        )
        {
            fixed (
                AccelerationStructureBuildRangeInfoKHR** __dsl_ppBuildRangeInfos = ppBuildRangeInfos
            )
            fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pInfos = pInfos)
            {
                CmdBuildAccelerationStructuresKHR(
                    commandBuffer,
                    infoCount,
                    __dsl_pInfos,
                    __dsl_ppBuildRangeInfos
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cluster_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildClusterAccelerationStructureIndirectNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildClusterAccelerationStructureIndirectNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkClusterAccelerationStructureCommandsInfoNV *")]
                ClusterAccelerationStructureCommandsInfoNV* pCommandInfos
        ) =>
            Underlying.Value!.CmdBuildClusterAccelerationStructureIndirectNV(
                commandBuffer,
                pCommandInfos
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cluster_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildClusterAccelerationStructureIndirectNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildClusterAccelerationStructureIndirectNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkClusterAccelerationStructureCommandsInfoNV *")]
                Ref<ClusterAccelerationStructureCommandsInfoNV> pCommandInfos
        )
        {
            fixed (ClusterAccelerationStructureCommandsInfoNV* __dsl_pCommandInfos = pCommandInfos)
            {
                CmdBuildClusterAccelerationStructureIndirectNV(commandBuffer, __dsl_pCommandInfos);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildMicromapsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildMicromapsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pInfos
        ) => Underlying.Value!.CmdBuildMicromapsEXT(commandBuffer, infoCount, pInfos);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildMicromapsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildMicromapsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pInfos
        )
        {
            fixed (MicromapBuildInfoEXT* __dsl_pInfos = pInfos)
            {
                CmdBuildMicromapsEXT(commandBuffer, infoCount, __dsl_pInfos);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildMicromapsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildMicromapsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT pInfos
        ) => Underlying.Value!.CmdBuildMicromapsEXT(commandBuffer, pInfos);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_partitioned_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildPartitionedAccelerationStructuresNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildPartitionedAccelerationStructuresNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkBuildPartitionedAccelerationStructureInfoNV *")]
                BuildPartitionedAccelerationStructureInfoNV* pBuildInfo
        ) =>
            Underlying.Value!.CmdBuildPartitionedAccelerationStructuresNV(
                commandBuffer,
                pBuildInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_partitioned_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildPartitionedAccelerationStructuresNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildPartitionedAccelerationStructuresNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkBuildPartitionedAccelerationStructureInfoNV *")]
                Ref<BuildPartitionedAccelerationStructureInfoNV> pBuildInfo
        )
        {
            fixed (BuildPartitionedAccelerationStructureInfoNV* __dsl_pBuildInfo = pBuildInfo)
            {
                CmdBuildPartitionedAccelerationStructuresNV(commandBuffer, __dsl_pBuildInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdClearAttachments")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdClearAttachments(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkClearAttachment *")] ClearAttachment* pAttachments,
            [NativeTypeName("uint32_t")] uint rectCount,
            [NativeTypeName("const VkClearRect *")] ClearRect* pRects
        ) =>
            Underlying.Value!.CmdClearAttachments(
                commandBuffer,
                attachmentCount,
                pAttachments,
                rectCount,
                pRects
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdClearAttachments")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdClearAttachments(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkClearAttachment *")] Ref<ClearAttachment> pAttachments,
            [NativeTypeName("uint32_t")] uint rectCount,
            [NativeTypeName("const VkClearRect *")] Ref<ClearRect> pRects
        )
        {
            fixed (ClearRect* __dsl_pRects = pRects)
            fixed (ClearAttachment* __dsl_pAttachments = pAttachments)
            {
                CmdClearAttachments(
                    commandBuffer,
                    attachmentCount,
                    __dsl_pAttachments,
                    rectCount,
                    __dsl_pRects
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdClearColorImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdClearColorImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle image,
            ImageLayout imageLayout,
            [NativeTypeName("const VkClearColorValue *")] ClearColorValue* pColor,
            [NativeTypeName("uint32_t")] uint rangeCount,
            [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange* pRanges
        ) =>
            Underlying.Value!.CmdClearColorImage(
                commandBuffer,
                image,
                imageLayout,
                pColor,
                rangeCount,
                pRanges
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdClearColorImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdClearColorImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle image,
            ImageLayout imageLayout,
            [NativeTypeName("const VkClearColorValue *")] Ref<ClearColorValue> pColor,
            [NativeTypeName("uint32_t")] uint rangeCount,
            [NativeTypeName("const VkImageSubresourceRange *")] Ref<ImageSubresourceRange> pRanges
        )
        {
            fixed (ImageSubresourceRange* __dsl_pRanges = pRanges)
            fixed (ClearColorValue* __dsl_pColor = pColor)
            {
                CmdClearColorImage(
                    commandBuffer,
                    image,
                    imageLayout,
                    __dsl_pColor,
                    rangeCount,
                    __dsl_pRanges
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdClearColorImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdClearColorImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle image,
            ImageLayout imageLayout,
            [NativeTypeName("const VkClearColorValue *")] Ref<ClearColorValue> pColor,
            [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange pRanges
        )
        {
            fixed (ClearColorValue* __dsl_pColor = pColor)
            {
                CmdClearColorImage(
                    commandBuffer,
                    image,
                    imageLayout,
                    __dsl_pColor,
                    1,
                    (ImageSubresourceRange*)&pRanges
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdClearDepthStencilImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdClearDepthStencilImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle image,
            ImageLayout imageLayout,
            [NativeTypeName("const VkClearDepthStencilValue *")]
                ClearDepthStencilValue* pDepthStencil,
            [NativeTypeName("uint32_t")] uint rangeCount,
            [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange* pRanges
        ) =>
            Underlying.Value!.CmdClearDepthStencilImage(
                commandBuffer,
                image,
                imageLayout,
                pDepthStencil,
                rangeCount,
                pRanges
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdClearDepthStencilImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdClearDepthStencilImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle image,
            ImageLayout imageLayout,
            [NativeTypeName("const VkClearDepthStencilValue *")]
                Ref<ClearDepthStencilValue> pDepthStencil,
            [NativeTypeName("uint32_t")] uint rangeCount,
            [NativeTypeName("const VkImageSubresourceRange *")] Ref<ImageSubresourceRange> pRanges
        )
        {
            fixed (ImageSubresourceRange* __dsl_pRanges = pRanges)
            fixed (ClearDepthStencilValue* __dsl_pDepthStencil = pDepthStencil)
            {
                CmdClearDepthStencilImage(
                    commandBuffer,
                    image,
                    imageLayout,
                    __dsl_pDepthStencil,
                    rangeCount,
                    __dsl_pRanges
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdClearDepthStencilImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdClearDepthStencilImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle image,
            ImageLayout imageLayout,
            [NativeTypeName("const VkClearDepthStencilValue *")]
                Ref<ClearDepthStencilValue> pDepthStencil,
            [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange pRanges
        )
        {
            fixed (ClearDepthStencilValue* __dsl_pDepthStencil = pDepthStencil)
            {
                CmdClearDepthStencilImage(
                    commandBuffer,
                    image,
                    imageLayout,
                    __dsl_pDepthStencil,
                    1,
                    (ImageSubresourceRange*)&pRanges
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdControlVideoCodingKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdControlVideoCodingKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkVideoCodingControlInfoKHR *")]
                VideoCodingControlInfoKHR* pCodingControlInfo
        ) => Underlying.Value!.CmdControlVideoCodingKHR(commandBuffer, pCodingControlInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdControlVideoCodingKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdControlVideoCodingKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkVideoCodingControlInfoKHR *")]
                Ref<VideoCodingControlInfoKHR> pCodingControlInfo
        )
        {
            fixed (VideoCodingControlInfoKHR* __dsl_pCodingControlInfo = pCodingControlInfo)
            {
                CmdControlVideoCodingKHR(commandBuffer, __dsl_pCodingControlInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdConvertCooperativeVectorMatrixNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
                ConvertCooperativeVectorMatrixInfoNV* pInfos
        ) =>
            Underlying.Value!.CmdConvertCooperativeVectorMatrixNV(commandBuffer, infoCount, pInfos);

        [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdConvertCooperativeVectorMatrixNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
                Ref<ConvertCooperativeVectorMatrixInfoNV> pInfos
        )
        {
            fixed (ConvertCooperativeVectorMatrixInfoNV* __dsl_pInfos = pInfos)
            {
                CmdConvertCooperativeVectorMatrixNV(commandBuffer, infoCount, __dsl_pInfos);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdConvertCooperativeVectorMatrixNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
                ConvertCooperativeVectorMatrixInfoNV pInfos
        ) => Underlying.Value!.CmdConvertCooperativeVectorMatrixNV(commandBuffer, pInfos);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyAccelerationStructureKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
                CopyAccelerationStructureInfoKHR* pInfo
        ) => Underlying.Value!.CmdCopyAccelerationStructureKHR(commandBuffer, pInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyAccelerationStructureKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
                Ref<CopyAccelerationStructureInfoKHR> pInfo
        )
        {
            fixed (CopyAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
            {
                CmdCopyAccelerationStructureKHR(commandBuffer, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyAccelerationStructureNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle dst,
            [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle src,
            CopyAccelerationStructureModeKHR mode
        ) => Underlying.Value!.CmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureToMemoryKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyAccelerationStructureToMemoryKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
                CopyAccelerationStructureToMemoryInfoKHR* pInfo
        ) => Underlying.Value!.CmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureToMemoryKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyAccelerationStructureToMemoryKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
                Ref<CopyAccelerationStructureToMemoryInfoKHR> pInfo
        )
        {
            fixed (CopyAccelerationStructureToMemoryInfoKHR* __dsl_pInfo = pInfo)
            {
                CmdCopyAccelerationStructureToMemoryKHR(commandBuffer, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkBufferCopy *")] BufferCopy* pRegions
        ) =>
            Underlying.Value!.CmdCopyBuffer(
                commandBuffer,
                srcBuffer,
                dstBuffer,
                regionCount,
                pRegions
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkBufferCopy *")] Ref<BufferCopy> pRegions
        )
        {
            fixed (BufferCopy* __dsl_pRegions = pRegions)
            {
                CmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, __dsl_pRegions);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
            [NativeTypeName("const VkBufferCopy *")] BufferCopy pRegions
        ) => Underlying.Value!.CmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, pRegions);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBuffer2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyBufferInfo2 *")] CopyBufferInfo2* pCopyBufferInfo
        ) => Underlying.Value!.CmdCopyBuffer2(commandBuffer, pCopyBufferInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBuffer2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyBufferInfo2 *")] Ref<CopyBufferInfo2> pCopyBufferInfo
        )
        {
            fixed (CopyBufferInfo2* __dsl_pCopyBufferInfo = pCopyBufferInfo)
            {
                CmdCopyBuffer2(commandBuffer, __dsl_pCopyBufferInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBuffer2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyBufferInfo2 *")] CopyBufferInfo2* pCopyBufferInfo
        ) => Underlying.Value!.CmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBuffer2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyBufferInfo2 *")] Ref<CopyBufferInfo2> pCopyBufferInfo
        )
        {
            fixed (CopyBufferInfo2* __dsl_pCopyBufferInfo = pCopyBufferInfo)
            {
                CmdCopyBuffer2KHR(commandBuffer, __dsl_pCopyBufferInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBufferToImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy* pRegions
        ) =>
            Underlying.Value!.CmdCopyBufferToImage(
                commandBuffer,
                srcBuffer,
                dstImage,
                dstImageLayout,
                regionCount,
                pRegions
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBufferToImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkBufferImageCopy *")] Ref<BufferImageCopy> pRegions
        )
        {
            fixed (BufferImageCopy* __dsl_pRegions = pRegions)
            {
                CmdCopyBufferToImage(
                    commandBuffer,
                    srcBuffer,
                    dstImage,
                    dstImageLayout,
                    regionCount,
                    __dsl_pRegions
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBufferToImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy pRegions
        ) =>
            Underlying.Value!.CmdCopyBufferToImage(
                commandBuffer,
                srcBuffer,
                dstImage,
                dstImageLayout,
                pRegions
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBufferToImage2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
                CopyBufferToImageInfo2* pCopyBufferToImageInfo
        ) => Underlying.Value!.CmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBufferToImage2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
                Ref<CopyBufferToImageInfo2> pCopyBufferToImageInfo
        )
        {
            fixed (CopyBufferToImageInfo2* __dsl_pCopyBufferToImageInfo = pCopyBufferToImageInfo)
            {
                CmdCopyBufferToImage2(commandBuffer, __dsl_pCopyBufferToImageInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBufferToImage2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
                CopyBufferToImageInfo2* pCopyBufferToImageInfo
        ) => Underlying.Value!.CmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBufferToImage2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
                Ref<CopyBufferToImageInfo2> pCopyBufferToImageInfo
        )
        {
            fixed (CopyBufferToImageInfo2* __dsl_pCopyBufferToImageInfo = pCopyBufferToImageInfo)
            {
                CmdCopyBufferToImage2KHR(commandBuffer, __dsl_pCopyBufferToImageInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkImageCopy *")] ImageCopy* pRegions
        ) =>
            Underlying.Value!.CmdCopyImage(
                commandBuffer,
                srcImage,
                srcImageLayout,
                dstImage,
                dstImageLayout,
                regionCount,
                pRegions
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkImageCopy *")] Ref<ImageCopy> pRegions
        )
        {
            fixed (ImageCopy* __dsl_pRegions = pRegions)
            {
                CmdCopyImage(
                    commandBuffer,
                    srcImage,
                    srcImageLayout,
                    dstImage,
                    dstImageLayout,
                    regionCount,
                    __dsl_pRegions
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("const VkImageCopy *")] ImageCopy pRegions
        ) =>
            Underlying.Value!.CmdCopyImage(
                commandBuffer,
                srcImage,
                srcImageLayout,
                dstImage,
                dstImageLayout,
                pRegions
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImage2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyImageInfo2 *")] CopyImageInfo2* pCopyImageInfo
        ) => Underlying.Value!.CmdCopyImage2(commandBuffer, pCopyImageInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImage2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyImageInfo2 *")] Ref<CopyImageInfo2> pCopyImageInfo
        )
        {
            fixed (CopyImageInfo2* __dsl_pCopyImageInfo = pCopyImageInfo)
            {
                CmdCopyImage2(commandBuffer, __dsl_pCopyImageInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImage2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyImageInfo2 *")] CopyImageInfo2* pCopyImageInfo
        ) => Underlying.Value!.CmdCopyImage2KHR(commandBuffer, pCopyImageInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImage2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyImageInfo2 *")] Ref<CopyImageInfo2> pCopyImageInfo
        )
        {
            fixed (CopyImageInfo2* __dsl_pCopyImageInfo = pCopyImageInfo)
            {
                CmdCopyImage2KHR(commandBuffer, __dsl_pCopyImageInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImageToBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy* pRegions
        ) =>
            Underlying.Value!.CmdCopyImageToBuffer(
                commandBuffer,
                srcImage,
                srcImageLayout,
                dstBuffer,
                regionCount,
                pRegions
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImageToBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkBufferImageCopy *")] Ref<BufferImageCopy> pRegions
        )
        {
            fixed (BufferImageCopy* __dsl_pRegions = pRegions)
            {
                CmdCopyImageToBuffer(
                    commandBuffer,
                    srcImage,
                    srcImageLayout,
                    dstBuffer,
                    regionCount,
                    __dsl_pRegions
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImageToBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
            [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy pRegions
        ) =>
            Underlying.Value!.CmdCopyImageToBuffer(
                commandBuffer,
                srcImage,
                srcImageLayout,
                dstBuffer,
                pRegions
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImageToBuffer2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
                CopyImageToBufferInfo2* pCopyImageToBufferInfo
        ) => Underlying.Value!.CmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImageToBuffer2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
                Ref<CopyImageToBufferInfo2> pCopyImageToBufferInfo
        )
        {
            fixed (CopyImageToBufferInfo2* __dsl_pCopyImageToBufferInfo = pCopyImageToBufferInfo)
            {
                CmdCopyImageToBuffer2(commandBuffer, __dsl_pCopyImageToBufferInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImageToBuffer2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
                CopyImageToBufferInfo2* pCopyImageToBufferInfo
        ) => Underlying.Value!.CmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImageToBuffer2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
                Ref<CopyImageToBufferInfo2> pCopyImageToBufferInfo
        )
        {
            fixed (CopyImageToBufferInfo2* __dsl_pCopyImageToBufferInfo = pCopyImageToBufferInfo)
            {
                CmdCopyImageToBuffer2KHR(commandBuffer, __dsl_pCopyImageToBufferInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_copy_memory_indirect"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryIndirectNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMemoryIndirectNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
            [NativeTypeName("uint32_t")] uint copyCount,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdCopyMemoryIndirectNV(
                commandBuffer,
                copyBufferAddress,
                copyCount,
                stride
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMemoryToAccelerationStructureKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
                CopyMemoryToAccelerationStructureInfoKHR* pInfo
        ) => Underlying.Value!.CmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMemoryToAccelerationStructureKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
                Ref<CopyMemoryToAccelerationStructureInfoKHR> pInfo
        )
        {
            fixed (CopyMemoryToAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
            {
                CmdCopyMemoryToAccelerationStructureKHR(commandBuffer, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_copy_memory_indirect"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMemoryToImageIndirectNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
            [NativeTypeName("uint32_t")] uint copyCount,
            [NativeTypeName("uint32_t")] uint stride,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("const VkImageSubresourceLayers *")]
                ImageSubresourceLayers* pImageSubresources
        ) =>
            Underlying.Value!.CmdCopyMemoryToImageIndirectNV(
                commandBuffer,
                copyBufferAddress,
                copyCount,
                stride,
                dstImage,
                dstImageLayout,
                pImageSubresources
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_copy_memory_indirect"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMemoryToImageIndirectNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
            [NativeTypeName("uint32_t")] uint copyCount,
            [NativeTypeName("uint32_t")] uint stride,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("const VkImageSubresourceLayers *")]
                Ref<ImageSubresourceLayers> pImageSubresources
        )
        {
            fixed (ImageSubresourceLayers* __dsl_pImageSubresources = pImageSubresources)
            {
                CmdCopyMemoryToImageIndirectNV(
                    commandBuffer,
                    copyBufferAddress,
                    copyCount,
                    stride,
                    dstImage,
                    dstImageLayout,
                    __dsl_pImageSubresources
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_copy_memory_indirect"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMemoryToImageIndirectNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
            [NativeTypeName("uint32_t")] uint stride,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("const VkImageSubresourceLayers *")]
                ImageSubresourceLayers pImageSubresources
        ) =>
            Underlying.Value!.CmdCopyMemoryToImageIndirectNV(
                commandBuffer,
                copyBufferAddress,
                stride,
                dstImage,
                dstImageLayout,
                pImageSubresources
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMemoryToMicromapEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
                CopyMemoryToMicromapInfoEXT* pInfo
        ) => Underlying.Value!.CmdCopyMemoryToMicromapEXT(commandBuffer, pInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMemoryToMicromapEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
                Ref<CopyMemoryToMicromapInfoEXT> pInfo
        )
        {
            fixed (CopyMemoryToMicromapInfoEXT* __dsl_pInfo = pInfo)
            {
                CmdCopyMemoryToMicromapEXT(commandBuffer, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMicromapEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyMicromapInfoEXT *")] CopyMicromapInfoEXT* pInfo
        ) => Underlying.Value!.CmdCopyMicromapEXT(commandBuffer, pInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMicromapEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyMicromapInfoEXT *")] Ref<CopyMicromapInfoEXT> pInfo
        )
        {
            fixed (CopyMicromapInfoEXT* __dsl_pInfo = pInfo)
            {
                CmdCopyMicromapEXT(commandBuffer, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapToMemoryEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMicromapToMemoryEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
                CopyMicromapToMemoryInfoEXT* pInfo
        ) => Underlying.Value!.CmdCopyMicromapToMemoryEXT(commandBuffer, pInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapToMemoryEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMicromapToMemoryEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
                Ref<CopyMicromapToMemoryInfoEXT> pInfo
        )
        {
            fixed (CopyMicromapToMemoryInfoEXT* __dsl_pInfo = pInfo)
            {
                CmdCopyMicromapToMemoryEXT(commandBuffer, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyQueryPoolResults")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyQueryPoolResults(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount,
            [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("VkDeviceSize")] ulong stride,
            [NativeTypeName("VkQueryResultFlags")] QueryResultFlags flags
        ) =>
            Underlying.Value!.CmdCopyQueryPoolResults(
                commandBuffer,
                queryPool,
                firstQuery,
                queryCount,
                dstBuffer,
                dstOffset,
                stride,
                flags
            );

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyTensorARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyTensorARM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyTensorInfoARM *")] CopyTensorInfoARM* pCopyTensorInfo
        ) => Underlying.Value!.CmdCopyTensorARM(commandBuffer, pCopyTensorInfo);

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyTensorARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyTensorARM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCopyTensorInfoARM *")] Ref<CopyTensorInfoARM> pCopyTensorInfo
        )
        {
            fixed (CopyTensorInfoARM* __dsl_pCopyTensorInfo = pCopyTensorInfo)
            {
                CmdCopyTensorARM(commandBuffer, __dsl_pCopyTensorInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCuLaunchKernelNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCuLaunchKernelNVX(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCuLaunchInfoNVX *")] CuLaunchInfoNVX* pLaunchInfo
        ) => Underlying.Value!.CmdCuLaunchKernelNVX(commandBuffer, pLaunchInfo);

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCuLaunchKernelNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCuLaunchKernelNVX(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCuLaunchInfoNVX *")] Ref<CuLaunchInfoNVX> pLaunchInfo
        )
        {
            fixed (CuLaunchInfoNVX* __dsl_pLaunchInfo = pLaunchInfo)
            {
                CmdCuLaunchKernelNVX(commandBuffer, __dsl_pLaunchInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerBeginEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDebugMarkerBeginEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
                DebugMarkerMarkerInfoEXT* pMarkerInfo
        ) => Underlying.Value!.CmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerBeginEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDebugMarkerBeginEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
                Ref<DebugMarkerMarkerInfoEXT> pMarkerInfo
        )
        {
            fixed (DebugMarkerMarkerInfoEXT* __dsl_pMarkerInfo = pMarkerInfo)
            {
                CmdDebugMarkerBeginEXT(commandBuffer, __dsl_pMarkerInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerEndEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDebugMarkerEndEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
        ) => Underlying.Value!.CmdDebugMarkerEndEXT(commandBuffer);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerInsertEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDebugMarkerInsertEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
                DebugMarkerMarkerInfoEXT* pMarkerInfo
        ) => Underlying.Value!.CmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerInsertEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDebugMarkerInsertEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
                Ref<DebugMarkerMarkerInfoEXT> pMarkerInfo
        )
        {
            fixed (DebugMarkerMarkerInfoEXT* __dsl_pMarkerInfo = pMarkerInfo)
            {
                CmdDebugMarkerInsertEXT(commandBuffer, __dsl_pMarkerInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_decode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDecodeVideoKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDecodeVideoKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkVideoDecodeInfoKHR *")] VideoDecodeInfoKHR* pDecodeInfo
        ) => Underlying.Value!.CmdDecodeVideoKHR(commandBuffer, pDecodeInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_decode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDecodeVideoKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDecodeVideoKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkVideoDecodeInfoKHR *")] Ref<VideoDecodeInfoKHR> pDecodeInfo
        )
        {
            fixed (VideoDecodeInfoKHR* __dsl_pDecodeInfo = pDecodeInfo)
            {
                CmdDecodeVideoKHR(commandBuffer, __dsl_pDecodeInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_memory_decompression"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryIndirectCountNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDecompressMemoryIndirectCountNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsAddress,
            [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsCountAddress,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdDecompressMemoryIndirectCountNV(
                commandBuffer,
                indirectCommandsAddress,
                indirectCommandsCountAddress,
                stride
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_memory_decompression"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDecompressMemoryNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint decompressRegionCount,
            [NativeTypeName("const VkDecompressMemoryRegionNV *")]
                DecompressMemoryRegionNV* pDecompressMemoryRegions
        ) =>
            Underlying.Value!.CmdDecompressMemoryNV(
                commandBuffer,
                decompressRegionCount,
                pDecompressMemoryRegions
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_memory_decompression"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDecompressMemoryNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint decompressRegionCount,
            [NativeTypeName("const VkDecompressMemoryRegionNV *")]
                Ref<DecompressMemoryRegionNV> pDecompressMemoryRegions
        )
        {
            fixed (
                DecompressMemoryRegionNV* __dsl_pDecompressMemoryRegions = pDecompressMemoryRegions
            )
            {
                CmdDecompressMemoryNV(
                    commandBuffer,
                    decompressRegionCount,
                    __dsl_pDecompressMemoryRegions
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_memory_decompression"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDecompressMemoryNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDecompressMemoryRegionNV *")]
                DecompressMemoryRegionNV pDecompressMemoryRegions
        ) => Underlying.Value!.CmdDecompressMemoryNV(commandBuffer, pDecompressMemoryRegions);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDispatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDispatch(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        ) => Underlying.Value!.CmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchBase")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDispatchBase(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint baseGroupX,
            [NativeTypeName("uint32_t")] uint baseGroupY,
            [NativeTypeName("uint32_t")] uint baseGroupZ,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        ) =>
            Underlying.Value!.CmdDispatchBase(
                commandBuffer,
                baseGroupX,
                baseGroupY,
                baseGroupZ,
                groupCountX,
                groupCountY,
                groupCountZ
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_device_group"],
            ImpliesSets = ["VK_KHR_device_group_creation"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchBaseKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDispatchBaseKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint baseGroupX,
            [NativeTypeName("uint32_t")] uint baseGroupY,
            [NativeTypeName("uint32_t")] uint baseGroupZ,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        ) =>
            Underlying.Value!.CmdDispatchBaseKHR(
                commandBuffer,
                baseGroupX,
                baseGroupY,
                baseGroupZ,
                groupCountX,
                groupCountY,
                groupCountZ
            );

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchDataGraphARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDispatchDataGraphARM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkDataGraphPipelineSessionARM")]
                DataGraphPipelineSessionARMHandle session,
            [NativeTypeName("const VkDataGraphPipelineDispatchInfoARM *")]
                DataGraphPipelineDispatchInfoARM* pInfo
        ) => Underlying.Value!.CmdDispatchDataGraphARM(commandBuffer, session, pInfo);

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchDataGraphARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDispatchDataGraphARM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkDataGraphPipelineSessionARM")]
                DataGraphPipelineSessionARMHandle session,
            [NativeTypeName("const VkDataGraphPipelineDispatchInfoARM *")]
                Ref<DataGraphPipelineDispatchInfoARM> pInfo
        )
        {
            fixed (DataGraphPipelineDispatchInfoARM* __dsl_pInfo = pInfo)
            {
                CmdDispatchDataGraphARM(commandBuffer, session, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchIndirect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDispatchIndirect(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset
        ) => Underlying.Value!.CmdDispatchIndirect(commandBuffer, buffer, offset);

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_shading"],
            ImpliesSets = [
                "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchTileQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDispatchTileQCOM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDispatchTileInfoQCOM *")]
                DispatchTileInfoQCOM* pDispatchTileInfo
        ) => Underlying.Value!.CmdDispatchTileQCOM(commandBuffer, pDispatchTileInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_shading"],
            ImpliesSets = [
                "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchTileQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDispatchTileQCOM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDispatchTileInfoQCOM *")]
                Ref<DispatchTileInfoQCOM> pDispatchTileInfo
        )
        {
            fixed (DispatchTileInfoQCOM* __dsl_pDispatchTileInfo = pDispatchTileInfo)
            {
                CmdDispatchTileQCOM(commandBuffer, __dsl_pDispatchTileInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDraw")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDraw(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint vertexCount,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstVertex,
            [NativeTypeName("uint32_t")] uint firstInstance
        ) =>
            Underlying.Value!.CmdDraw(
                commandBuffer,
                vertexCount,
                instanceCount,
                firstVertex,
                firstInstance
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_cluster_culling_shader"],
            ImpliesSets = [
                "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
                "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawClusterHUAWEI")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawClusterHuawei(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        ) =>
            Underlying.Value!.CmdDrawClusterHuawei(
                commandBuffer,
                groupCountX,
                groupCountY,
                groupCountZ
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_cluster_culling_shader"],
            ImpliesSets = [
                "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
                "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawClusterIndirectHUAWEI")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawClusterIndirectHuawei(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset
        ) => Underlying.Value!.CmdDrawClusterIndirectHuawei(commandBuffer, buffer, offset);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexed")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndexed(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint indexCount,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstIndex,
            [NativeTypeName("int32_t")] int vertexOffset,
            [NativeTypeName("uint32_t")] uint firstInstance
        ) =>
            Underlying.Value!.CmdDrawIndexed(
                commandBuffer,
                indexCount,
                instanceCount,
                firstIndex,
                vertexOffset,
                firstInstance
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndexedIndirect(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdDrawIndexedIndirect(
                commandBuffer,
                buffer,
                offset,
                drawCount,
                stride
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndexedIndirectCount(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdDrawIndexedIndirectCount(
                commandBuffer,
                buffer,
                offset,
                countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );

        [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCountAMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndexedIndirectCountAMD(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdDrawIndexedIndirectCountAMD(
                commandBuffer,
                buffer,
                offset,
                countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCountKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndexedIndirectCountKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdDrawIndexedIndirectCountKHR(
                commandBuffer,
                buffer,
                offset,
                countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndirect(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("uint32_t")] uint stride
        ) => Underlying.Value!.CmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectByteCountEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndirectByteCountEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("VkBuffer")] BufferHandle counterBuffer,
            [NativeTypeName("VkDeviceSize")] ulong counterBufferOffset,
            [NativeTypeName("uint32_t")] uint counterOffset,
            [NativeTypeName("uint32_t")] uint vertexStride
        ) =>
            Underlying.Value!.CmdDrawIndirectByteCountEXT(
                commandBuffer,
                instanceCount,
                firstInstance,
                counterBuffer,
                counterBufferOffset,
                counterOffset,
                vertexStride
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndirectCount(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdDrawIndirectCount(
                commandBuffer,
                buffer,
                offset,
                countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );

        [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCountAMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndirectCountAMD(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdDrawIndirectCountAMD(
                commandBuffer,
                buffer,
                offset,
                countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCountKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndirectCountKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdDrawIndirectCountKHR(
                commandBuffer,
                buffer,
                offset,
                countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_mesh_shader"],
            ImpliesSets = [
                "VK_EXT_mesh_shader+VK_KHR_spirv_1_4",
                "VK_EXT_mesh_shader+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMeshTasksEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        ) =>
            Underlying.Value!.CmdDrawMeshTasksEXT(
                commandBuffer,
                groupCountX,
                groupCountY,
                groupCountZ
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_mesh_shader+VK_KHR_draw_indirect_count", "VK_EXT_mesh_shader+VK_VERSION_1_2"],
            ImpliesSets = [
                "VK_EXT_mesh_shader+VK_KHR_spirv_1_4",
                "VK_EXT_mesh_shader+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectCountEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMeshTasksIndirectCountEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdDrawMeshTasksIndirectCountEXT(
                commandBuffer,
                buffer,
                offset,
                countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_mesh_shader+VK_KHR_draw_indirect_count", "VK_NV_mesh_shader+VK_VERSION_1_2"],
            ImpliesSets = [
                "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
                "VK_NV_mesh_shader+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectCountNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMeshTasksIndirectCountNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdDrawMeshTasksIndirectCountNV(
                commandBuffer,
                buffer,
                offset,
                countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_mesh_shader"],
            ImpliesSets = [
                "VK_EXT_mesh_shader+VK_KHR_spirv_1_4",
                "VK_EXT_mesh_shader+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMeshTasksIndirectEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdDrawMeshTasksIndirectEXT(
                commandBuffer,
                buffer,
                offset,
                drawCount,
                stride
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_mesh_shader"],
            ImpliesSets = [
                "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
                "VK_NV_mesh_shader+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMeshTasksIndirectNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdDrawMeshTasksIndirectNV(
                commandBuffer,
                buffer,
                offset,
                drawCount,
                stride
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_mesh_shader"],
            ImpliesSets = [
                "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
                "VK_NV_mesh_shader+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMeshTasksNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint taskCount,
            [NativeTypeName("uint32_t")] uint firstTask
        ) => Underlying.Value!.CmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_multi_draw"],
            ImpliesSets = [
                "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
                "VK_EXT_multi_draw+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMultiEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("const VkMultiDrawInfoEXT *")] MultiDrawInfoEXT* pVertexInfo,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdDrawMultiEXT(
                commandBuffer,
                drawCount,
                pVertexInfo,
                instanceCount,
                firstInstance,
                stride
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_multi_draw"],
            ImpliesSets = [
                "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
                "VK_EXT_multi_draw+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMultiEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("const VkMultiDrawInfoEXT *")] Ref<MultiDrawInfoEXT> pVertexInfo,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (MultiDrawInfoEXT* __dsl_pVertexInfo = pVertexInfo)
            {
                CmdDrawMultiEXT(
                    commandBuffer,
                    drawCount,
                    __dsl_pVertexInfo,
                    instanceCount,
                    firstInstance,
                    stride
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_multi_draw"],
            ImpliesSets = [
                "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
                "VK_EXT_multi_draw+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMultiEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkMultiDrawInfoEXT *")] MultiDrawInfoEXT pVertexInfo,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("uint32_t")] uint stride
        ) =>
            Underlying.Value!.CmdDrawMultiEXT(
                commandBuffer,
                pVertexInfo,
                instanceCount,
                firstInstance,
                stride
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_multi_draw"],
            ImpliesSets = [
                "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
                "VK_EXT_multi_draw+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiIndexedEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMultiIndexedEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")]
                MultiDrawIndexedInfoEXT* pIndexInfo,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("uint32_t")] uint stride,
            [NativeTypeName("const int32_t *")] int* pVertexOffset
        ) =>
            Underlying.Value!.CmdDrawMultiIndexedEXT(
                commandBuffer,
                drawCount,
                pIndexInfo,
                instanceCount,
                firstInstance,
                stride,
                pVertexOffset
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_multi_draw"],
            ImpliesSets = [
                "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
                "VK_EXT_multi_draw+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiIndexedEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMultiIndexedEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")]
                Ref<MultiDrawIndexedInfoEXT> pIndexInfo,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("uint32_t")] uint stride,
            [NativeTypeName("const int32_t *")] Ref<int> pVertexOffset
        )
        {
            fixed (int* __dsl_pVertexOffset = pVertexOffset)
            fixed (MultiDrawIndexedInfoEXT* __dsl_pIndexInfo = pIndexInfo)
            {
                CmdDrawMultiIndexedEXT(
                    commandBuffer,
                    drawCount,
                    __dsl_pIndexInfo,
                    instanceCount,
                    firstInstance,
                    stride,
                    __dsl_pVertexOffset
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_multi_draw"],
            ImpliesSets = [
                "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
                "VK_EXT_multi_draw+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiIndexedEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMultiIndexedEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")]
                MultiDrawIndexedInfoEXT pIndexInfo,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("uint32_t")] uint stride,
            [NativeTypeName("const int32_t *")] Ref<int> pVertexOffset
        )
        {
            fixed (int* __dsl_pVertexOffset = pVertexOffset)
            {
                CmdDrawMultiIndexedEXT(
                    commandBuffer,
                    1,
                    (MultiDrawIndexedInfoEXT*)&pIndexInfo,
                    instanceCount,
                    firstInstance,
                    stride,
                    __dsl_pVertexOffset
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_encode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEncodeVideoKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEncodeVideoKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkVideoEncodeInfoKHR *")] VideoEncodeInfoKHR* pEncodeInfo
        ) => Underlying.Value!.CmdEncodeVideoKHR(commandBuffer, pEncodeInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_encode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEncodeVideoKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEncodeVideoKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkVideoEncodeInfoKHR *")] Ref<VideoEncodeInfoKHR> pEncodeInfo
        )
        {
            fixed (VideoEncodeInfoKHR* __dsl_pEncodeInfo = pEncodeInfo)
            {
                CmdEncodeVideoKHR(commandBuffer, __dsl_pEncodeInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_conditional_rendering"],
            ImpliesSets = [
                "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
                "VK_EXT_conditional_rendering+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndConditionalRenderingEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndConditionalRenderingEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
        ) => Underlying.Value!.CmdEndConditionalRenderingEXT(commandBuffer);

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndDebugUtilsLabelEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
        ) => Underlying.Value!.CmdEndDebugUtilsLabelEXT(commandBuffer);

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_shading"],
            ImpliesSets = [
                "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndPerTileExecutionQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndPerTileExecutionQCOM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPerTileEndInfoQCOM *")] PerTileEndInfoQCOM* pPerTileEndInfo
        ) => Underlying.Value!.CmdEndPerTileExecutionQCOM(commandBuffer, pPerTileEndInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_shading"],
            ImpliesSets = [
                "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndPerTileExecutionQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndPerTileExecutionQCOM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPerTileEndInfoQCOM *")] Ref<PerTileEndInfoQCOM> pPerTileEndInfo
        )
        {
            fixed (PerTileEndInfoQCOM* __dsl_pPerTileEndInfo = pPerTileEndInfo)
            {
                CmdEndPerTileExecutionQCOM(commandBuffer, __dsl_pPerTileEndInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndQuery")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndQuery(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint query
        ) => Underlying.Value!.CmdEndQuery(commandBuffer, queryPool, query);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndQueryIndexedEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndQueryIndexedEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint query,
            [NativeTypeName("uint32_t")] uint index
        ) => Underlying.Value!.CmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRendering(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
        ) => Underlying.Value!.CmdEndRendering(commandBuffer);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_fragment_density_map_offset"],
            ImpliesSets = [
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_VERSION_1_3",
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_VERSION_1_3",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_VERSION_1_3",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRendering2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderingEndInfoEXT *")] RenderingEndInfoEXT* pRenderingEndInfo
        ) => Underlying.Value!.CmdEndRendering2EXT(commandBuffer, pRenderingEndInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_fragment_density_map_offset"],
            ImpliesSets = [
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_VERSION_1_3",
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_VERSION_1_3",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_VERSION_1_3",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRendering2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderingEndInfoEXT *")]
                Ref<RenderingEndInfoEXT> pRenderingEndInfo
        )
        {
            fixed (RenderingEndInfoEXT* __dsl_pRenderingEndInfo = pRenderingEndInfo)
            {
                CmdEndRendering2EXT(commandBuffer, __dsl_pRenderingEndInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering"],
            ImpliesSets = [
                "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
                "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderingKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRenderingKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
        ) => Underlying.Value!.CmdEndRenderingKHR(commandBuffer);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRenderPass(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
        ) => Underlying.Value!.CmdEndRenderPass(commandBuffer);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRenderPass2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
        ) => Underlying.Value!.CmdEndRenderPass2(commandBuffer, pSubpassEndInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRenderPass2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
        )
        {
            fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
            {
                CmdEndRenderPass2(commandBuffer, __dsl_pSubpassEndInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRenderPass2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
        ) => Underlying.Value!.CmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRenderPass2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
        )
        {
            fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
            {
                CmdEndRenderPass2KHR(commandBuffer, __dsl_pSubpassEndInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndTransformFeedbackEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndTransformFeedbackEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstCounterBuffer,
            [NativeTypeName("uint32_t")] uint counterBufferCount,
            [NativeTypeName("const VkBuffer *")] BufferHandle* pCounterBuffers,
            [NativeTypeName("const VkDeviceSize *")] ulong* pCounterBufferOffsets
        ) =>
            Underlying.Value!.CmdEndTransformFeedbackEXT(
                commandBuffer,
                firstCounterBuffer,
                counterBufferCount,
                pCounterBuffers,
                pCounterBufferOffsets
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndTransformFeedbackEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndTransformFeedbackEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstCounterBuffer,
            [NativeTypeName("uint32_t")] uint counterBufferCount,
            [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pCounterBuffers,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pCounterBufferOffsets
        )
        {
            fixed (ulong* __dsl_pCounterBufferOffsets = pCounterBufferOffsets)
            fixed (BufferHandle* __dsl_pCounterBuffers = pCounterBuffers)
            {
                CmdEndTransformFeedbackEXT(
                    commandBuffer,
                    firstCounterBuffer,
                    counterBufferCount,
                    __dsl_pCounterBuffers,
                    __dsl_pCounterBufferOffsets
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndVideoCodingKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndVideoCodingKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkVideoEndCodingInfoKHR *")]
                VideoEndCodingInfoKHR* pEndCodingInfo
        ) => Underlying.Value!.CmdEndVideoCodingKHR(commandBuffer, pEndCodingInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndVideoCodingKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndVideoCodingKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkVideoEndCodingInfoKHR *")]
                Ref<VideoEndCodingInfoKHR> pEndCodingInfo
        )
        {
            fixed (VideoEndCodingInfoKHR* __dsl_pEndCodingInfo = pEndCodingInfo)
            {
                CmdEndVideoCodingKHR(commandBuffer, __dsl_pEndCodingInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteCommands")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdExecuteCommand(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle pCommandBuffers
        ) => Underlying.Value!.CmdExecuteCommand(commandBuffer, pCommandBuffers);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteCommands")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdExecuteCommands(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint commandBufferCount,
            [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle* pCommandBuffers
        ) =>
            Underlying.Value!.CmdExecuteCommands(
                commandBuffer,
                commandBufferCount,
                pCommandBuffers
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteCommands")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdExecuteCommands(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint commandBufferCount,
            [NativeTypeName("const VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
        )
        {
            fixed (CommandBufferHandle* __dsl_pCommandBuffers = pCommandBuffers)
            {
                CmdExecuteCommands(commandBuffer, commandBufferCount, __dsl_pCommandBuffers);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdExecuteGeneratedCommandsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> isPreprocessed,
            [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
                GeneratedCommandsInfoEXT* pGeneratedCommandsInfo
        ) =>
            Underlying.Value!.CmdExecuteGeneratedCommandsEXT(
                commandBuffer,
                isPreprocessed,
                pGeneratedCommandsInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdExecuteGeneratedCommandsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> isPreprocessed,
            [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
                Ref<GeneratedCommandsInfoEXT> pGeneratedCommandsInfo
        )
        {
            fixed (GeneratedCommandsInfoEXT* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
            {
                CmdExecuteGeneratedCommandsEXT(
                    commandBuffer,
                    isPreprocessed,
                    __dsl_pGeneratedCommandsInfo
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdExecuteGeneratedCommandsNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> isPreprocessed,
            [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
                GeneratedCommandsInfoNV* pGeneratedCommandsInfo
        ) =>
            Underlying.Value!.CmdExecuteGeneratedCommandsNV(
                commandBuffer,
                isPreprocessed,
                pGeneratedCommandsInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdExecuteGeneratedCommandsNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> isPreprocessed,
            [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
                Ref<GeneratedCommandsInfoNV> pGeneratedCommandsInfo
        )
        {
            fixed (GeneratedCommandsInfoNV* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
            {
                CmdExecuteGeneratedCommandsNV(
                    commandBuffer,
                    isPreprocessed,
                    __dsl_pGeneratedCommandsInfo
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdFillBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdFillBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("VkDeviceSize")] ulong size,
            [NativeTypeName("uint32_t")] uint data
        ) => Underlying.Value!.CmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdInsertDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdInsertDebugUtilsLabelEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
        ) => Underlying.Value!.CmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdInsertDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdInsertDebugUtilsLabelEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
        )
        {
            fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
            {
                CmdInsertDebugUtilsLabelEXT(commandBuffer, __dsl_pLabelInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdNextSubpass(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            SubpassContents contents
        ) => Underlying.Value!.CmdNextSubpass(commandBuffer, contents);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdNextSubpass2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo,
            [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
        ) => Underlying.Value!.CmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdNextSubpass2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo,
            [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
        )
        {
            fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
            fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
            {
                CmdNextSubpass2(commandBuffer, __dsl_pSubpassBeginInfo, __dsl_pSubpassEndInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdNextSubpass2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo,
            [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
        ) =>
            Underlying.Value!.CmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdNextSubpass2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo,
            [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
        )
        {
            fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
            fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
            {
                CmdNextSubpass2KHR(commandBuffer, __dsl_pSubpassBeginInfo, __dsl_pSubpassEndInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdOpticalFlowExecuteNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdOpticalFlowExecuteNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
            [NativeTypeName("const VkOpticalFlowExecuteInfoNV *")]
                OpticalFlowExecuteInfoNV* pExecuteInfo
        ) => Underlying.Value!.CmdOpticalFlowExecuteNV(commandBuffer, session, pExecuteInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdOpticalFlowExecuteNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdOpticalFlowExecuteNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
            [NativeTypeName("const VkOpticalFlowExecuteInfoNV *")]
                Ref<OpticalFlowExecuteInfoNV> pExecuteInfo
        )
        {
            fixed (OpticalFlowExecuteInfoNV* __dsl_pExecuteInfo = pExecuteInfo)
            {
                CmdOpticalFlowExecuteNV(commandBuffer, session, __dsl_pExecuteInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPipelineBarrier(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags srcStageMask,
            [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags dstStageMask,
            [NativeTypeName("VkDependencyFlags")] DependencyFlags dependencyFlags,
            [NativeTypeName("uint32_t")] uint memoryBarrierCount,
            [NativeTypeName("const VkMemoryBarrier *")] MemoryBarrier* pMemoryBarriers,
            [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
            [NativeTypeName("const VkBufferMemoryBarrier *")]
                BufferMemoryBarrier* pBufferMemoryBarriers,
            [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
            [NativeTypeName("const VkImageMemoryBarrier *")]
                ImageMemoryBarrier* pImageMemoryBarriers
        ) =>
            Underlying.Value!.CmdPipelineBarrier(
                commandBuffer,
                srcStageMask,
                dstStageMask,
                dependencyFlags,
                memoryBarrierCount,
                pMemoryBarriers,
                bufferMemoryBarrierCount,
                pBufferMemoryBarriers,
                imageMemoryBarrierCount,
                pImageMemoryBarriers
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPipelineBarrier(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags srcStageMask,
            [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags dstStageMask,
            [NativeTypeName("VkDependencyFlags")] DependencyFlags dependencyFlags,
            [NativeTypeName("uint32_t")] uint memoryBarrierCount,
            [NativeTypeName("const VkMemoryBarrier *")] Ref<MemoryBarrier> pMemoryBarriers,
            [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
            [NativeTypeName("const VkBufferMemoryBarrier *")]
                Ref<BufferMemoryBarrier> pBufferMemoryBarriers,
            [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
            [NativeTypeName("const VkImageMemoryBarrier *")]
                Ref<ImageMemoryBarrier> pImageMemoryBarriers
        )
        {
            fixed (ImageMemoryBarrier* __dsl_pImageMemoryBarriers = pImageMemoryBarriers)
            fixed (BufferMemoryBarrier* __dsl_pBufferMemoryBarriers = pBufferMemoryBarriers)
            fixed (MemoryBarrier* __dsl_pMemoryBarriers = pMemoryBarriers)
            {
                CmdPipelineBarrier(
                    commandBuffer,
                    srcStageMask,
                    dstStageMask,
                    dependencyFlags,
                    memoryBarrierCount,
                    __dsl_pMemoryBarriers,
                    bufferMemoryBarrierCount,
                    __dsl_pBufferMemoryBarriers,
                    imageMemoryBarrierCount,
                    __dsl_pImageMemoryBarriers
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPipelineBarrier2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
        ) => Underlying.Value!.CmdPipelineBarrier2(commandBuffer, pDependencyInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPipelineBarrier2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
        )
        {
            fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
            {
                CmdPipelineBarrier2(commandBuffer, __dsl_pDependencyInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPipelineBarrier2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
        ) => Underlying.Value!.CmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPipelineBarrier2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
        )
        {
            fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
            {
                CmdPipelineBarrier2KHR(commandBuffer, __dsl_pDependencyInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPreprocessGeneratedCommandsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
                GeneratedCommandsInfoEXT* pGeneratedCommandsInfo,
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle stateCommandBuffer
        ) =>
            Underlying.Value!.CmdPreprocessGeneratedCommandsEXT(
                commandBuffer,
                pGeneratedCommandsInfo,
                stateCommandBuffer
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPreprocessGeneratedCommandsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
                Ref<GeneratedCommandsInfoEXT> pGeneratedCommandsInfo,
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle stateCommandBuffer
        )
        {
            fixed (GeneratedCommandsInfoEXT* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
            {
                CmdPreprocessGeneratedCommandsEXT(
                    commandBuffer,
                    __dsl_pGeneratedCommandsInfo,
                    stateCommandBuffer
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPreprocessGeneratedCommandsNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
                GeneratedCommandsInfoNV* pGeneratedCommandsInfo
        ) =>
            Underlying.Value!.CmdPreprocessGeneratedCommandsNV(
                commandBuffer,
                pGeneratedCommandsInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPreprocessGeneratedCommandsNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
                Ref<GeneratedCommandsInfoNV> pGeneratedCommandsInfo
        )
        {
            fixed (GeneratedCommandsInfoNV* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
            {
                CmdPreprocessGeneratedCommandsNV(commandBuffer, __dsl_pGeneratedCommandsInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushConstants(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("VkShaderStageFlags")] ShaderStageFlags stageFlags,
            [NativeTypeName("uint32_t")] uint offset,
            [NativeTypeName("uint32_t")] uint size,
            [NativeTypeName("const void *")] void* pValues
        ) =>
            Underlying.Value!.CmdPushConstants(
                commandBuffer,
                layout,
                stageFlags,
                offset,
                size,
                pValues
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushConstants(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("VkShaderStageFlags")] ShaderStageFlags stageFlags,
            [NativeTypeName("uint32_t")] uint offset,
            [NativeTypeName("uint32_t")] uint size,
            [NativeTypeName("const void *")] Ref pValues
        )
        {
            fixed (void* __dsl_pValues = pValues)
            {
                CmdPushConstants(commandBuffer, layout, stageFlags, offset, size, __dsl_pValues);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushConstants2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPushConstantsInfo *")] PushConstantsInfo* pPushConstantsInfo
        ) => Underlying.Value!.CmdPushConstants2(commandBuffer, pPushConstantsInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushConstants2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPushConstantsInfo *")]
                Ref<PushConstantsInfo> pPushConstantsInfo
        )
        {
            fixed (PushConstantsInfo* __dsl_pPushConstantsInfo = pPushConstantsInfo)
            {
                CmdPushConstants2(commandBuffer, __dsl_pPushConstantsInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushConstants2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPushConstantsInfo *")] PushConstantsInfo* pPushConstantsInfo
        ) => Underlying.Value!.CmdPushConstants2KHR(commandBuffer, pPushConstantsInfo);

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushConstants2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPushConstantsInfo *")]
                Ref<PushConstantsInfo> pPushConstantsInfo
        )
        {
            fixed (PushConstantsInfo* __dsl_pPushConstantsInfo = pPushConstantsInfo)
            {
                CmdPushConstants2KHR(commandBuffer, __dsl_pPushConstantsInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSet(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("uint32_t")] uint descriptorWriteCount,
            [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites
        ) =>
            Underlying.Value!.CmdPushDescriptorSet(
                commandBuffer,
                pipelineBindPoint,
                layout,
                set,
                descriptorWriteCount,
                pDescriptorWrites
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSet(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("uint32_t")] uint descriptorWriteCount,
            [NativeTypeName("const VkWriteDescriptorSet *")]
                Ref<WriteDescriptorSet> pDescriptorWrites
        )
        {
            fixed (WriteDescriptorSet* __dsl_pDescriptorWrites = pDescriptorWrites)
            {
                CmdPushDescriptorSet(
                    commandBuffer,
                    pipelineBindPoint,
                    layout,
                    set,
                    descriptorWriteCount,
                    __dsl_pDescriptorWrites
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSet(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet pDescriptorWrites
        ) =>
            Underlying.Value!.CmdPushDescriptorSet(
                commandBuffer,
                pipelineBindPoint,
                layout,
                set,
                pDescriptorWrites
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSet2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetInfo *")]
                PushDescriptorSetInfo* pPushDescriptorSetInfo
        ) => Underlying.Value!.CmdPushDescriptorSet2(commandBuffer, pPushDescriptorSetInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSet2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetInfo *")]
                Ref<PushDescriptorSetInfo> pPushDescriptorSetInfo
        )
        {
            fixed (PushDescriptorSetInfo* __dsl_pPushDescriptorSetInfo = pPushDescriptorSetInfo)
            {
                CmdPushDescriptorSet2(commandBuffer, __dsl_pPushDescriptorSetInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSet2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetInfo *")]
                PushDescriptorSetInfo* pPushDescriptorSetInfo
        ) => Underlying.Value!.CmdPushDescriptorSet2KHR(commandBuffer, pPushDescriptorSetInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSet2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetInfo *")]
                Ref<PushDescriptorSetInfo> pPushDescriptorSetInfo
        )
        {
            fixed (PushDescriptorSetInfo* __dsl_pPushDescriptorSetInfo = pPushDescriptorSetInfo)
            {
                CmdPushDescriptorSet2KHR(commandBuffer, __dsl_pPushDescriptorSetInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_push_descriptor"],
            ImpliesSets = [
                "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
                "VK_KHR_push_descriptor+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("uint32_t")] uint descriptorWriteCount,
            [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites
        ) =>
            Underlying.Value!.CmdPushDescriptorSetKHR(
                commandBuffer,
                pipelineBindPoint,
                layout,
                set,
                descriptorWriteCount,
                pDescriptorWrites
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_push_descriptor"],
            ImpliesSets = [
                "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
                "VK_KHR_push_descriptor+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("uint32_t")] uint descriptorWriteCount,
            [NativeTypeName("const VkWriteDescriptorSet *")]
                Ref<WriteDescriptorSet> pDescriptorWrites
        )
        {
            fixed (WriteDescriptorSet* __dsl_pDescriptorWrites = pDescriptorWrites)
            {
                CmdPushDescriptorSetKHR(
                    commandBuffer,
                    pipelineBindPoint,
                    layout,
                    set,
                    descriptorWriteCount,
                    __dsl_pDescriptorWrites
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_push_descriptor"],
            ImpliesSets = [
                "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
                "VK_KHR_push_descriptor+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet pDescriptorWrites
        ) =>
            Underlying.Value!.CmdPushDescriptorSetKHR(
                commandBuffer,
                pipelineBindPoint,
                layout,
                set,
                pDescriptorWrites
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetWithTemplate(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("const void *")] void* pData
        ) =>
            Underlying.Value!.CmdPushDescriptorSetWithTemplate(
                commandBuffer,
                descriptorUpdateTemplate,
                layout,
                set,
                pData
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetWithTemplate(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("const void *")] Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            {
                CmdPushDescriptorSetWithTemplate(
                    commandBuffer,
                    descriptorUpdateTemplate,
                    layout,
                    set,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetWithTemplate2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
                PushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo
        ) =>
            Underlying.Value!.CmdPushDescriptorSetWithTemplate2(
                commandBuffer,
                pPushDescriptorSetWithTemplateInfo
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetWithTemplate2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
                Ref<PushDescriptorSetWithTemplateInfo> pPushDescriptorSetWithTemplateInfo
        )
        {
            fixed (
                PushDescriptorSetWithTemplateInfo* __dsl_pPushDescriptorSetWithTemplateInfo =
                    pPushDescriptorSetWithTemplateInfo
            )
            {
                CmdPushDescriptorSetWithTemplate2(
                    commandBuffer,
                    __dsl_pPushDescriptorSetWithTemplateInfo
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetWithTemplate2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
                PushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo
        ) =>
            Underlying.Value!.CmdPushDescriptorSetWithTemplate2KHR(
                commandBuffer,
                pPushDescriptorSetWithTemplateInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetWithTemplate2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
                Ref<PushDescriptorSetWithTemplateInfo> pPushDescriptorSetWithTemplateInfo
        )
        {
            fixed (
                PushDescriptorSetWithTemplateInfo* __dsl_pPushDescriptorSetWithTemplateInfo =
                    pPushDescriptorSetWithTemplateInfo
            )
            {
                CmdPushDescriptorSetWithTemplate2KHR(
                    commandBuffer,
                    __dsl_pPushDescriptorSetWithTemplateInfo
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_KHR_push_descriptor+VK_KHR_descriptor_update_template",
                "VK_KHR_push_descriptor+VK_VERSION_1_1",
            ],
            ImpliesSets = [
                "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
                "VK_KHR_push_descriptor+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetWithTemplateKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("const void *")] void* pData
        ) =>
            Underlying.Value!.CmdPushDescriptorSetWithTemplateKHR(
                commandBuffer,
                descriptorUpdateTemplate,
                layout,
                set,
                pData
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_KHR_push_descriptor+VK_KHR_descriptor_update_template",
                "VK_KHR_push_descriptor+VK_VERSION_1_1",
            ],
            ImpliesSets = [
                "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
                "VK_KHR_push_descriptor+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetWithTemplateKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("const void *")] Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            {
                CmdPushDescriptorSetWithTemplateKHR(
                    commandBuffer,
                    descriptorUpdateTemplate,
                    layout,
                    set,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResetEvent(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkEvent")] EventHandle @event,
            [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags stageMask
        ) => Underlying.Value!.CmdResetEvent(commandBuffer, @event, stageMask);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResetEvent2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkEvent")] EventHandle @event,
            [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stageMask
        ) => Underlying.Value!.CmdResetEvent2(commandBuffer, @event, stageMask);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResetEvent2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkEvent")] EventHandle @event,
            [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stageMask
        ) => Underlying.Value!.CmdResetEvent2KHR(commandBuffer, @event, stageMask);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResetQueryPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResetQueryPool(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount
        ) => Underlying.Value!.CmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResolveImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkImageResolve *")] ImageResolve* pRegions
        ) =>
            Underlying.Value!.CmdResolveImage(
                commandBuffer,
                srcImage,
                srcImageLayout,
                dstImage,
                dstImageLayout,
                regionCount,
                pRegions
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResolveImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkImageResolve *")] Ref<ImageResolve> pRegions
        )
        {
            fixed (ImageResolve* __dsl_pRegions = pRegions)
            {
                CmdResolveImage(
                    commandBuffer,
                    srcImage,
                    srcImageLayout,
                    dstImage,
                    dstImageLayout,
                    regionCount,
                    __dsl_pRegions
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResolveImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] ImageHandle dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("const VkImageResolve *")] ImageResolve pRegions
        ) =>
            Underlying.Value!.CmdResolveImage(
                commandBuffer,
                srcImage,
                srcImageLayout,
                dstImage,
                dstImageLayout,
                pRegions
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResolveImage2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkResolveImageInfo2 *")] ResolveImageInfo2* pResolveImageInfo
        ) => Underlying.Value!.CmdResolveImage2(commandBuffer, pResolveImageInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResolveImage2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkResolveImageInfo2 *")] Ref<ResolveImageInfo2> pResolveImageInfo
        )
        {
            fixed (ResolveImageInfo2* __dsl_pResolveImageInfo = pResolveImageInfo)
            {
                CmdResolveImage2(commandBuffer, __dsl_pResolveImageInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResolveImage2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkResolveImageInfo2 *")] ResolveImageInfo2* pResolveImageInfo
        ) => Underlying.Value!.CmdResolveImage2KHR(commandBuffer, pResolveImageInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResolveImage2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkResolveImageInfo2 *")] Ref<ResolveImageInfo2> pResolveImageInfo
        )
        {
            fixed (ResolveImageInfo2* __dsl_pResolveImageInfo = pResolveImageInfo)
            {
                CmdResolveImage2KHR(commandBuffer, __dsl_pResolveImageInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetAlphaToCoverageEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetAlphaToCoverageEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> alphaToCoverageEnable
        ) => Underlying.Value!.CmdSetAlphaToCoverageEnableEXT(commandBuffer, alphaToCoverageEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetAlphaToOneEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetAlphaToOneEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> alphaToOneEnable
        ) => Underlying.Value!.CmdSetAlphaToOneEnableEXT(commandBuffer, alphaToOneEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_attachment_feedback_loop_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
                "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetAttachmentFeedbackLoopEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetAttachmentFeedbackLoopEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkImageAspectFlags")] ImageAspectFlags aspectMask
        ) => Underlying.Value!.CmdSetAttachmentFeedbackLoopEnableEXT(commandBuffer, aspectMask);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetBlendConstants")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetBlendConstants(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const float[4]")] float* blendConstants
        ) => Underlying.Value!.CmdSetBlendConstants(commandBuffer, blendConstants);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetBlendConstants")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetBlendConstants(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const float[4]")] Ref<float> blendConstants
        )
        {
            fixed (float* __dsl_blendConstants = blendConstants)
            {
                CmdSetBlendConstants(commandBuffer, __dsl_blendConstants);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_diagnostic_checkpoints"],
            ImpliesSets = [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCheckpointNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCheckpointNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const void *")] void* pCheckpointMarker
        ) => Underlying.Value!.CmdSetCheckpointNV(commandBuffer, pCheckpointMarker);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_diagnostic_checkpoints"],
            ImpliesSets = [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCheckpointNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCheckpointNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const void *")] Ref pCheckpointMarker
        )
        {
            fixed (void* __dsl_pCheckpointMarker = pCheckpointMarker)
            {
                CmdSetCheckpointNV(commandBuffer, __dsl_pCheckpointMarker);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoarseSampleOrderNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            CoarseSampleOrderTypeNV sampleOrderType,
            [NativeTypeName("uint32_t")] uint customSampleOrderCount,
            [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
                CoarseSampleOrderCustomNV* pCustomSampleOrders
        ) =>
            Underlying.Value!.CmdSetCoarseSampleOrderNV(
                commandBuffer,
                sampleOrderType,
                customSampleOrderCount,
                pCustomSampleOrders
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoarseSampleOrderNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            CoarseSampleOrderTypeNV sampleOrderType,
            [NativeTypeName("uint32_t")] uint customSampleOrderCount,
            [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
                Ref<CoarseSampleOrderCustomNV> pCustomSampleOrders
        )
        {
            fixed (CoarseSampleOrderCustomNV* __dsl_pCustomSampleOrders = pCustomSampleOrders)
            {
                CmdSetCoarseSampleOrderNV(
                    commandBuffer,
                    sampleOrderType,
                    customSampleOrderCount,
                    __dsl_pCustomSampleOrders
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoarseSampleOrderNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            CoarseSampleOrderTypeNV sampleOrderType,
            [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
                CoarseSampleOrderCustomNV pCustomSampleOrders
        ) =>
            Underlying.Value!.CmdSetCoarseSampleOrderNV(
                commandBuffer,
                sampleOrderType,
                pCustomSampleOrders
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendAdvancedEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkColorBlendAdvancedEXT *")]
                ColorBlendAdvancedEXT* pColorBlendAdvanced
        ) =>
            Underlying.Value!.CmdSetColorBlendAdvancedEXT(
                commandBuffer,
                firstAttachment,
                attachmentCount,
                pColorBlendAdvanced
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendAdvancedEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkColorBlendAdvancedEXT *")]
                Ref<ColorBlendAdvancedEXT> pColorBlendAdvanced
        )
        {
            fixed (ColorBlendAdvancedEXT* __dsl_pColorBlendAdvanced = pColorBlendAdvanced)
            {
                CmdSetColorBlendAdvancedEXT(
                    commandBuffer,
                    firstAttachment,
                    attachmentCount,
                    __dsl_pColorBlendAdvanced
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendAdvancedEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("const VkColorBlendAdvancedEXT *")]
                ColorBlendAdvancedEXT pColorBlendAdvanced
        ) =>
            Underlying.Value!.CmdSetColorBlendAdvancedEXT(
                commandBuffer,
                firstAttachment,
                pColorBlendAdvanced
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkBool32 *")] MaybeBool<uint>* pColorBlendEnables
        ) =>
            Underlying.Value!.CmdSetColorBlendEnableEXT(
                commandBuffer,
                firstAttachment,
                attachmentCount,
                pColorBlendEnables
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkBool32 *")] Ref<MaybeBool<uint>> pColorBlendEnables
        )
        {
            fixed (MaybeBool<uint>* __dsl_pColorBlendEnables = pColorBlendEnables)
            {
                CmdSetColorBlendEnableEXT(
                    commandBuffer,
                    firstAttachment,
                    attachmentCount,
                    __dsl_pColorBlendEnables
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("const VkBool32 *")] MaybeBool<uint> pColorBlendEnables
        ) =>
            Underlying.Value!.CmdSetColorBlendEnableEXT(
                commandBuffer,
                firstAttachment,
                pColorBlendEnables
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEquationEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendEquationEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkColorBlendEquationEXT *")]
                ColorBlendEquationEXT* pColorBlendEquations
        ) =>
            Underlying.Value!.CmdSetColorBlendEquationEXT(
                commandBuffer,
                firstAttachment,
                attachmentCount,
                pColorBlendEquations
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEquationEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendEquationEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkColorBlendEquationEXT *")]
                Ref<ColorBlendEquationEXT> pColorBlendEquations
        )
        {
            fixed (ColorBlendEquationEXT* __dsl_pColorBlendEquations = pColorBlendEquations)
            {
                CmdSetColorBlendEquationEXT(
                    commandBuffer,
                    firstAttachment,
                    attachmentCount,
                    __dsl_pColorBlendEquations
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEquationEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendEquationEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("const VkColorBlendEquationEXT *")]
                ColorBlendEquationEXT pColorBlendEquations
        ) =>
            Underlying.Value!.CmdSetColorBlendEquationEXT(
                commandBuffer,
                firstAttachment,
                pColorBlendEquations
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_color_write_enable"],
            ImpliesSets = [
                "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
                "VK_EXT_color_write_enable+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorWriteEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkBool32 *")] MaybeBool<uint>* pColorWriteEnables
        ) =>
            Underlying.Value!.CmdSetColorWriteEnableEXT(
                commandBuffer,
                attachmentCount,
                pColorWriteEnables
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_color_write_enable"],
            ImpliesSets = [
                "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
                "VK_EXT_color_write_enable+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorWriteEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkBool32 *")] Ref<MaybeBool<uint>> pColorWriteEnables
        )
        {
            fixed (MaybeBool<uint>* __dsl_pColorWriteEnables = pColorWriteEnables)
            {
                CmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, __dsl_pColorWriteEnables);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_color_write_enable"],
            ImpliesSets = [
                "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
                "VK_EXT_color_write_enable+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorWriteEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkBool32 *")] MaybeBool<uint> pColorWriteEnables
        ) => Underlying.Value!.CmdSetColorWriteEnableEXT(commandBuffer, pColorWriteEnables);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteMaskEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorWriteMaskEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkColorComponentFlags *")] ColorComponentFlags* pColorWriteMasks
        ) =>
            Underlying.Value!.CmdSetColorWriteMaskEXT(
                commandBuffer,
                firstAttachment,
                attachmentCount,
                pColorWriteMasks
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteMaskEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorWriteMaskEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkColorComponentFlags *")]
                Ref<ColorComponentFlags> pColorWriteMasks
        )
        {
            fixed (ColorComponentFlags* __dsl_pColorWriteMasks = pColorWriteMasks)
            {
                CmdSetColorWriteMaskEXT(
                    commandBuffer,
                    firstAttachment,
                    attachmentCount,
                    __dsl_pColorWriteMasks
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteMaskEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorWriteMaskEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("const VkColorComponentFlags *")] ColorComponentFlags pColorWriteMasks
        ) =>
            Underlying.Value!.CmdSetColorWriteMaskEXT(
                commandBuffer,
                firstAttachment,
                pColorWriteMasks
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_conservative_rasterization", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetConservativeRasterizationModeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetConservativeRasterizationModeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            ConservativeRasterizationModeEXT conservativeRasterizationMode
        ) =>
            Underlying.Value!.CmdSetConservativeRasterizationModeEXT(
                commandBuffer,
                conservativeRasterizationMode
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationModeNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageModulationModeNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            CoverageModulationModeNV coverageModulationMode
        ) =>
            Underlying.Value!.CmdSetCoverageModulationModeNV(commandBuffer, coverageModulationMode);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageModulationTableEnableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> coverageModulationTableEnable
        ) =>
            Underlying.Value!.CmdSetCoverageModulationTableEnableNV(
                commandBuffer,
                coverageModulationTableEnable
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageModulationTableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint coverageModulationTableCount,
            [NativeTypeName("const float *")] float* pCoverageModulationTable
        ) =>
            Underlying.Value!.CmdSetCoverageModulationTableNV(
                commandBuffer,
                coverageModulationTableCount,
                pCoverageModulationTable
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageModulationTableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint coverageModulationTableCount,
            [NativeTypeName("const float *")] Ref<float> pCoverageModulationTable
        )
        {
            fixed (float* __dsl_pCoverageModulationTable = pCoverageModulationTable)
            {
                CmdSetCoverageModulationTableNV(
                    commandBuffer,
                    coverageModulationTableCount,
                    __dsl_pCoverageModulationTable
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageModulationTableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const float *")] float pCoverageModulationTable
        ) =>
            Underlying.Value!.CmdSetCoverageModulationTableNV(
                commandBuffer,
                pCoverageModulationTable
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_coverage_reduction_mode"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageReductionModeNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageReductionModeNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            CoverageReductionModeNV coverageReductionMode
        ) => Underlying.Value!.CmdSetCoverageReductionModeNV(commandBuffer, coverageReductionMode);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_fragment_coverage_to_color"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageToColorEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageToColorEnableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> coverageToColorEnable
        ) => Underlying.Value!.CmdSetCoverageToColorEnableNV(commandBuffer, coverageToColorEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_fragment_coverage_to_color"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageToColorLocationNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageToColorLocationNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint coverageToColorLocation
        ) =>
            Underlying.Value!.CmdSetCoverageToColorLocationNV(
                commandBuffer,
                coverageToColorLocation
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCullMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCullMode(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkCullModeFlags")] CullModeFlags cullMode
        ) => Underlying.Value!.CmdSetCullMode(commandBuffer, cullMode);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCullModeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCullModeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkCullModeFlags")] CullModeFlags cullMode
        ) => Underlying.Value!.CmdSetCullModeEXT(commandBuffer, cullMode);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBias(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            float depthBiasConstantFactor,
            float depthBiasClamp,
            float depthBiasSlopeFactor
        ) =>
            Underlying.Value!.CmdSetDepthBias(
                commandBuffer,
                depthBiasConstantFactor,
                depthBiasClamp,
                depthBiasSlopeFactor
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_depth_bias_control"],
            ImpliesSets = [
                "VK_EXT_depth_bias_control+VK_KHR_get_physical_device_properties2",
                "VK_EXT_depth_bias_control+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBias2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDepthBiasInfoEXT *")] DepthBiasInfoEXT* pDepthBiasInfo
        ) => Underlying.Value!.CmdSetDepthBias2EXT(commandBuffer, pDepthBiasInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_depth_bias_control"],
            ImpliesSets = [
                "VK_EXT_depth_bias_control+VK_KHR_get_physical_device_properties2",
                "VK_EXT_depth_bias_control+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBias2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkDepthBiasInfoEXT *")] Ref<DepthBiasInfoEXT> pDepthBiasInfo
        )
        {
            fixed (DepthBiasInfoEXT* __dsl_pDepthBiasInfo = pDepthBiasInfo)
            {
                CmdSetDepthBias2EXT(commandBuffer, __dsl_pDepthBiasInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBiasEnable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBiasEnable(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> depthBiasEnable
        ) => Underlying.Value!.CmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBiasEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBiasEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> depthBiasEnable
        ) => Underlying.Value!.CmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBounds(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            float minDepthBounds,
            float maxDepthBounds
        ) => Underlying.Value!.CmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBoundsTestEnable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBoundsTestEnable(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> depthBoundsTestEnable
        ) => Underlying.Value!.CmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBoundsTestEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBoundsTestEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> depthBoundsTestEnable
        ) => Underlying.Value!.CmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthClampEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> depthClampEnable
        ) => Underlying.Value!.CmdSetDepthClampEnableEXT(commandBuffer, depthClampEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_depth_clamp_control", "VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampRangeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthClampRangeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            DepthClampModeEXT depthClampMode,
            [NativeTypeName("const VkDepthClampRangeEXT *")] DepthClampRangeEXT* pDepthClampRange
        ) =>
            Underlying.Value!.CmdSetDepthClampRangeEXT(
                commandBuffer,
                depthClampMode,
                pDepthClampRange
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_depth_clamp_control", "VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampRangeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthClampRangeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            DepthClampModeEXT depthClampMode,
            [NativeTypeName("const VkDepthClampRangeEXT *")]
                Ref<DepthClampRangeEXT> pDepthClampRange
        )
        {
            fixed (DepthClampRangeEXT* __dsl_pDepthClampRange = pDepthClampRange)
            {
                CmdSetDepthClampRangeEXT(commandBuffer, depthClampMode, __dsl_pDepthClampRange);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_depth_clip_enable", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClipEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthClipEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> depthClipEnable
        ) => Underlying.Value!.CmdSetDepthClipEnableEXT(commandBuffer, depthClipEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_depth_clip_control", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClipNegativeOneToOneEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthClipNegativeOneToOneEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> negativeOneToOne
        ) => Underlying.Value!.CmdSetDepthClipNegativeOneToOneEXT(commandBuffer, negativeOneToOne);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthCompareOp")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthCompareOp(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            CompareOp depthCompareOp
        ) => Underlying.Value!.CmdSetDepthCompareOp(commandBuffer, depthCompareOp);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthCompareOpEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthCompareOpEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            CompareOp depthCompareOp
        ) => Underlying.Value!.CmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthTestEnable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthTestEnable(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> depthTestEnable
        ) => Underlying.Value!.CmdSetDepthTestEnable(commandBuffer, depthTestEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthTestEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthTestEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> depthTestEnable
        ) => Underlying.Value!.CmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthWriteEnable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthWriteEnable(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> depthWriteEnable
        ) => Underlying.Value!.CmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthWriteEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthWriteEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> depthWriteEnable
        ) => Underlying.Value!.CmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsets2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDescriptorBufferOffsets2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkSetDescriptorBufferOffsetsInfoEXT *")]
                SetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo
        ) =>
            Underlying.Value!.CmdSetDescriptorBufferOffsets2EXT(
                commandBuffer,
                pSetDescriptorBufferOffsetsInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsets2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDescriptorBufferOffsets2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkSetDescriptorBufferOffsetsInfoEXT *")]
                Ref<SetDescriptorBufferOffsetsInfoEXT> pSetDescriptorBufferOffsetsInfo
        )
        {
            fixed (
                SetDescriptorBufferOffsetsInfoEXT* __dsl_pSetDescriptorBufferOffsetsInfo =
                    pSetDescriptorBufferOffsetsInfo
            )
            {
                CmdSetDescriptorBufferOffsets2EXT(
                    commandBuffer,
                    __dsl_pSetDescriptorBufferOffsetsInfo
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsetsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDescriptorBufferOffsetsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint firstSet,
            [NativeTypeName("uint32_t")] uint setCount,
            [NativeTypeName("const uint32_t *")] uint* pBufferIndices,
            [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets
        ) =>
            Underlying.Value!.CmdSetDescriptorBufferOffsetsEXT(
                commandBuffer,
                pipelineBindPoint,
                layout,
                firstSet,
                setCount,
                pBufferIndices,
                pOffsets
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsetsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDescriptorBufferOffsetsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint firstSet,
            [NativeTypeName("uint32_t")] uint setCount,
            [NativeTypeName("const uint32_t *")] Ref<uint> pBufferIndices,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets
        )
        {
            fixed (ulong* __dsl_pOffsets = pOffsets)
            fixed (uint* __dsl_pBufferIndices = pBufferIndices)
            {
                CmdSetDescriptorBufferOffsetsEXT(
                    commandBuffer,
                    pipelineBindPoint,
                    layout,
                    firstSet,
                    setCount,
                    __dsl_pBufferIndices,
                    __dsl_pOffsets
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDeviceMask")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDeviceMask(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint deviceMask
        ) => Underlying.Value!.CmdSetDeviceMask(commandBuffer, deviceMask);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_device_group"],
            ImpliesSets = ["VK_KHR_device_group_creation"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDeviceMaskKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDeviceMaskKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint deviceMask
        ) => Underlying.Value!.CmdSetDeviceMaskKHR(commandBuffer, deviceMask);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_discard_rectangles"],
            ImpliesSets = [
                "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
                "VK_EXT_discard_rectangles+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDiscardRectangleEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> discardRectangleEnable
        ) =>
            Underlying.Value!.CmdSetDiscardRectangleEnableEXT(
                commandBuffer,
                discardRectangleEnable
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_discard_rectangles"],
            ImpliesSets = [
                "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
                "VK_EXT_discard_rectangles+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDiscardRectangleEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
            [NativeTypeName("uint32_t")] uint discardRectangleCount,
            [NativeTypeName("const VkRect2D *")] Rect2D* pDiscardRectangles
        ) =>
            Underlying.Value!.CmdSetDiscardRectangleEXT(
                commandBuffer,
                firstDiscardRectangle,
                discardRectangleCount,
                pDiscardRectangles
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_discard_rectangles"],
            ImpliesSets = [
                "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
                "VK_EXT_discard_rectangles+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDiscardRectangleEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
            [NativeTypeName("uint32_t")] uint discardRectangleCount,
            [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pDiscardRectangles
        )
        {
            fixed (Rect2D* __dsl_pDiscardRectangles = pDiscardRectangles)
            {
                CmdSetDiscardRectangleEXT(
                    commandBuffer,
                    firstDiscardRectangle,
                    discardRectangleCount,
                    __dsl_pDiscardRectangles
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_discard_rectangles"],
            ImpliesSets = [
                "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
                "VK_EXT_discard_rectangles+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDiscardRectangleEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
            [NativeTypeName("const VkRect2D *")] Rect2D pDiscardRectangles
        ) =>
            Underlying.Value!.CmdSetDiscardRectangleEXT(
                commandBuffer,
                firstDiscardRectangle,
                pDiscardRectangles
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_discard_rectangles"],
            ImpliesSets = [
                "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
                "VK_EXT_discard_rectangles+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleModeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDiscardRectangleModeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            DiscardRectangleModeEXT discardRectangleMode
        ) => Underlying.Value!.CmdSetDiscardRectangleModeEXT(commandBuffer, discardRectangleMode);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetEvent(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkEvent")] EventHandle @event,
            [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags stageMask
        ) => Underlying.Value!.CmdSetEvent(commandBuffer, @event, stageMask);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetEvent2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkEvent")] EventHandle @event,
            [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
        ) => Underlying.Value!.CmdSetEvent2(commandBuffer, @event, pDependencyInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetEvent2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkEvent")] EventHandle @event,
            [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
        )
        {
            fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
            {
                CmdSetEvent2(commandBuffer, @event, __dsl_pDependencyInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetEvent2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkEvent")] EventHandle @event,
            [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
        ) => Underlying.Value!.CmdSetEvent2KHR(commandBuffer, @event, pDependencyInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetEvent2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkEvent")] EventHandle @event,
            [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
        )
        {
            fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
            {
                CmdSetEvent2KHR(commandBuffer, @event, __dsl_pDependencyInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_scissor_exclusive"],
            ImpliesSets = [
                "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
                "VK_NV_scissor_exclusive+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetExclusiveScissorEnableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
            [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
            [NativeTypeName("const VkBool32 *")] MaybeBool<uint>* pExclusiveScissorEnables
        ) =>
            Underlying.Value!.CmdSetExclusiveScissorEnableNV(
                commandBuffer,
                firstExclusiveScissor,
                exclusiveScissorCount,
                pExclusiveScissorEnables
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_scissor_exclusive"],
            ImpliesSets = [
                "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
                "VK_NV_scissor_exclusive+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetExclusiveScissorEnableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
            [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
            [NativeTypeName("const VkBool32 *")] Ref<MaybeBool<uint>> pExclusiveScissorEnables
        )
        {
            fixed (MaybeBool<uint>* __dsl_pExclusiveScissorEnables = pExclusiveScissorEnables)
            {
                CmdSetExclusiveScissorEnableNV(
                    commandBuffer,
                    firstExclusiveScissor,
                    exclusiveScissorCount,
                    __dsl_pExclusiveScissorEnables
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_scissor_exclusive"],
            ImpliesSets = [
                "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
                "VK_NV_scissor_exclusive+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetExclusiveScissorEnableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
            [NativeTypeName("const VkBool32 *")] MaybeBool<uint> pExclusiveScissorEnables
        ) =>
            Underlying.Value!.CmdSetExclusiveScissorEnableNV(
                commandBuffer,
                firstExclusiveScissor,
                pExclusiveScissorEnables
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_scissor_exclusive"],
            ImpliesSets = [
                "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
                "VK_NV_scissor_exclusive+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetExclusiveScissorNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
            [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
            [NativeTypeName("const VkRect2D *")] Rect2D* pExclusiveScissors
        ) =>
            Underlying.Value!.CmdSetExclusiveScissorNV(
                commandBuffer,
                firstExclusiveScissor,
                exclusiveScissorCount,
                pExclusiveScissors
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_scissor_exclusive"],
            ImpliesSets = [
                "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
                "VK_NV_scissor_exclusive+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetExclusiveScissorNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
            [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
            [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pExclusiveScissors
        )
        {
            fixed (Rect2D* __dsl_pExclusiveScissors = pExclusiveScissors)
            {
                CmdSetExclusiveScissorNV(
                    commandBuffer,
                    firstExclusiveScissor,
                    exclusiveScissorCount,
                    __dsl_pExclusiveScissors
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_scissor_exclusive"],
            ImpliesSets = [
                "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
                "VK_NV_scissor_exclusive+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetExclusiveScissorNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
            [NativeTypeName("const VkRect2D *")] Rect2D pExclusiveScissors
        ) =>
            Underlying.Value!.CmdSetExclusiveScissorNV(
                commandBuffer,
                firstExclusiveScissor,
                pExclusiveScissors
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_conservative_rasterization", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetExtraPrimitiveOverestimationSizeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetExtraPrimitiveOverestimationSizeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            float extraPrimitiveOverestimationSize
        ) =>
            Underlying.Value!.CmdSetExtraPrimitiveOverestimationSizeEXT(
                commandBuffer,
                extraPrimitiveOverestimationSize
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_fragment_shading_rate_enums"],
            ImpliesSets = ["VK_KHR_fragment_shading_rate"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateEnumNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetFragmentShadingRateEnumNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            FragmentShadingRateNV shadingRate,
            [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
                FragmentShadingRateCombinerOpKHR* combinerOps
        ) =>
            Underlying.Value!.CmdSetFragmentShadingRateEnumNV(
                commandBuffer,
                shadingRate,
                combinerOps
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_fragment_shading_rate_enums"],
            ImpliesSets = ["VK_KHR_fragment_shading_rate"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateEnumNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetFragmentShadingRateEnumNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            FragmentShadingRateNV shadingRate,
            [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
                Ref<FragmentShadingRateCombinerOpKHR> combinerOps
        )
        {
            fixed (FragmentShadingRateCombinerOpKHR* __dsl_combinerOps = combinerOps)
            {
                CmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, __dsl_combinerOps);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_fragment_shading_rate"],
            ImpliesSets = [
                "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_create_renderpass2+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetFragmentShadingRateKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkExtent2D *")] Extent2D* pFragmentSize,
            [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
                FragmentShadingRateCombinerOpKHR* combinerOps
        ) =>
            Underlying.Value!.CmdSetFragmentShadingRateKHR(
                commandBuffer,
                pFragmentSize,
                combinerOps
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_fragment_shading_rate"],
            ImpliesSets = [
                "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_create_renderpass2+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetFragmentShadingRateKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkExtent2D *")] Ref<Extent2D> pFragmentSize,
            [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
                Ref<FragmentShadingRateCombinerOpKHR> combinerOps
        )
        {
            fixed (FragmentShadingRateCombinerOpKHR* __dsl_combinerOps = combinerOps)
            fixed (Extent2D* __dsl_pFragmentSize = pFragmentSize)
            {
                CmdSetFragmentShadingRateKHR(commandBuffer, __dsl_pFragmentSize, __dsl_combinerOps);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetFrontFace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetFrontFace(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            FrontFace frontFace
        ) => Underlying.Value!.CmdSetFrontFace(commandBuffer, frontFace);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetFrontFaceEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetFrontFaceEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            FrontFace frontFace
        ) => Underlying.Value!.CmdSetFrontFaceEXT(commandBuffer, frontFace);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_line_rasterization"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineRasterizationModeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLineRasterizationModeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkLineRasterizationModeEXT")]
                LineRasterizationMode lineRasterizationMode
        ) => Underlying.Value!.CmdSetLineRasterizationModeEXT(commandBuffer, lineRasterizationMode);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStipple")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLineStipple(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint lineStippleFactor,
            [NativeTypeName("uint16_t")] ushort lineStipplePattern
        ) =>
            Underlying.Value!.CmdSetLineStipple(
                commandBuffer,
                lineStippleFactor,
                lineStipplePattern
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_line_rasterization"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLineStippleEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> stippledLineEnable
        ) => Underlying.Value!.CmdSetLineStippleEnableEXT(commandBuffer, stippledLineEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_line_rasterization"],
            ImpliesSets = [
                "VK_EXT_line_rasterization+VK_KHR_get_physical_device_properties2",
                "VK_EXT_line_rasterization+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLineStippleEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint lineStippleFactor,
            [NativeTypeName("uint16_t")] ushort lineStipplePattern
        ) =>
            Underlying.Value!.CmdSetLineStippleEXT(
                commandBuffer,
                lineStippleFactor,
                lineStipplePattern
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_line_rasterization"],
            ImpliesSets = [
                "VK_KHR_line_rasterization+VK_KHR_get_physical_device_properties2",
                "VK_KHR_line_rasterization+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLineStippleKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint lineStippleFactor,
            [NativeTypeName("uint16_t")] ushort lineStipplePattern
        ) =>
            Underlying.Value!.CmdSetLineStippleKHR(
                commandBuffer,
                lineStippleFactor,
                lineStipplePattern
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineWidth")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLineWidth(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            float lineWidth
        ) => Underlying.Value!.CmdSetLineWidth(commandBuffer, lineWidth);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLogicOpEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLogicOpEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> logicOpEnable
        ) => Underlying.Value!.CmdSetLogicOpEnableEXT(commandBuffer, logicOpEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLogicOpEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLogicOpEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            LogicOp logicOp
        ) => Underlying.Value!.CmdSetLogicOpEXT(commandBuffer, logicOp);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPatchControlPointsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetPatchControlPointsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint patchControlPoints
        ) => Underlying.Value!.CmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceMarkerINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CmdSetPerformanceMarkerIntel(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPerformanceMarkerInfoINTEL *")]
                PerformanceMarkerInfoIntel* pMarkerInfo
        ) => Underlying.Value!.CmdSetPerformanceMarkerIntel(commandBuffer, pMarkerInfo);

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceMarkerINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CmdSetPerformanceMarkerIntel(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPerformanceMarkerInfoINTEL *")]
                Ref<PerformanceMarkerInfoIntel> pMarkerInfo
        )
        {
            fixed (PerformanceMarkerInfoIntel* __dsl_pMarkerInfo = pMarkerInfo)
            {
                return (Result)CmdSetPerformanceMarkerIntel(commandBuffer, __dsl_pMarkerInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceOverrideINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CmdSetPerformanceOverrideIntel(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPerformanceOverrideInfoINTEL *")]
                PerformanceOverrideInfoIntel* pOverrideInfo
        ) => Underlying.Value!.CmdSetPerformanceOverrideIntel(commandBuffer, pOverrideInfo);

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceOverrideINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CmdSetPerformanceOverrideIntel(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPerformanceOverrideInfoINTEL *")]
                Ref<PerformanceOverrideInfoIntel> pOverrideInfo
        )
        {
            fixed (PerformanceOverrideInfoIntel* __dsl_pOverrideInfo = pOverrideInfo)
            {
                return (Result)CmdSetPerformanceOverrideIntel(commandBuffer, __dsl_pOverrideInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceStreamMarkerINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CmdSetPerformanceStreamMarkerIntel(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPerformanceStreamMarkerInfoINTEL *")]
                PerformanceStreamMarkerInfoIntel* pMarkerInfo
        ) => Underlying.Value!.CmdSetPerformanceStreamMarkerIntel(commandBuffer, pMarkerInfo);

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceStreamMarkerINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CmdSetPerformanceStreamMarkerIntel(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkPerformanceStreamMarkerInfoINTEL *")]
                Ref<PerformanceStreamMarkerInfoIntel> pMarkerInfo
        )
        {
            fixed (PerformanceStreamMarkerInfoIntel* __dsl_pMarkerInfo = pMarkerInfo)
            {
                return (Result)CmdSetPerformanceStreamMarkerIntel(commandBuffer, __dsl_pMarkerInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPolygonModeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetPolygonModeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PolygonMode polygonMode
        ) => Underlying.Value!.CmdSetPolygonModeEXT(commandBuffer, polygonMode);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveRestartEnable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetPrimitiveRestartEnable(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> primitiveRestartEnable
        ) => Underlying.Value!.CmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveRestartEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetPrimitiveRestartEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> primitiveRestartEnable
        ) =>
            Underlying.Value!.CmdSetPrimitiveRestartEnableEXT(
                commandBuffer,
                primitiveRestartEnable
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveTopology")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetPrimitiveTopology(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PrimitiveTopology primitiveTopology
        ) => Underlying.Value!.CmdSetPrimitiveTopology(commandBuffer, primitiveTopology);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveTopologyEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetPrimitiveTopologyEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PrimitiveTopology primitiveTopology
        ) => Underlying.Value!.CmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_provoking_vertex"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetProvokingVertexModeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetProvokingVertexModeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            ProvokingVertexModeEXT provokingVertexMode
        ) => Underlying.Value!.CmdSetProvokingVertexModeEXT(commandBuffer, provokingVertexMode);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizationSamplesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRasterizationSamplesEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            SampleCountFlags rasterizationSamples
        ) => Underlying.Value!.CmdSetRasterizationSamplesEXT(commandBuffer, rasterizationSamples);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizationStreamEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRasterizationStreamEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint rasterizationStream
        ) => Underlying.Value!.CmdSetRasterizationStreamEXT(commandBuffer, rasterizationStream);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizerDiscardEnable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRasterizerDiscardEnable(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> rasterizerDiscardEnable
        ) =>
            Underlying.Value!.CmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizerDiscardEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRasterizerDiscardEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> rasterizerDiscardEnable
        ) =>
            Underlying.Value!.CmdSetRasterizerDiscardEnableEXT(
                commandBuffer,
                rasterizerDiscardEnable
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRayTracingPipelineStackSizeKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRayTracingPipelineStackSizeKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint pipelineStackSize
        ) =>
            Underlying.Value!.CmdSetRayTracingPipelineStackSizeKHR(
                commandBuffer,
                pipelineStackSize
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocations")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRenderingAttachmentLocations(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
                RenderingAttachmentLocationInfo* pLocationInfo
        ) => Underlying.Value!.CmdSetRenderingAttachmentLocations(commandBuffer, pLocationInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocations")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRenderingAttachmentLocations(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
                Ref<RenderingAttachmentLocationInfo> pLocationInfo
        )
        {
            fixed (RenderingAttachmentLocationInfo* __dsl_pLocationInfo = pLocationInfo)
            {
                CmdSetRenderingAttachmentLocations(commandBuffer, __dsl_pLocationInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering_local_read"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
                "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocationsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRenderingAttachmentLocationsKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
                RenderingAttachmentLocationInfo* pLocationInfo
        ) => Underlying.Value!.CmdSetRenderingAttachmentLocationsKHR(commandBuffer, pLocationInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering_local_read"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
                "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocationsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRenderingAttachmentLocationsKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
                Ref<RenderingAttachmentLocationInfo> pLocationInfo
        )
        {
            fixed (RenderingAttachmentLocationInfo* __dsl_pLocationInfo = pLocationInfo)
            {
                CmdSetRenderingAttachmentLocationsKHR(commandBuffer, __dsl_pLocationInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRenderingInputAttachmentIndices(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
                RenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo
        ) =>
            Underlying.Value!.CmdSetRenderingInputAttachmentIndices(
                commandBuffer,
                pInputAttachmentIndexInfo
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRenderingInputAttachmentIndices(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
                Ref<RenderingInputAttachmentIndexInfo> pInputAttachmentIndexInfo
        )
        {
            fixed (
                RenderingInputAttachmentIndexInfo* __dsl_pInputAttachmentIndexInfo =
                    pInputAttachmentIndexInfo
            )
            {
                CmdSetRenderingInputAttachmentIndices(
                    commandBuffer,
                    __dsl_pInputAttachmentIndexInfo
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering_local_read"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
                "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndicesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRenderingInputAttachmentIndicesKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
                RenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo
        ) =>
            Underlying.Value!.CmdSetRenderingInputAttachmentIndicesKHR(
                commandBuffer,
                pInputAttachmentIndexInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering_local_read"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
                "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndicesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRenderingInputAttachmentIndicesKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
                Ref<RenderingInputAttachmentIndexInfo> pInputAttachmentIndexInfo
        )
        {
            fixed (
                RenderingInputAttachmentIndexInfo* __dsl_pInputAttachmentIndexInfo =
                    pInputAttachmentIndexInfo
            )
            {
                CmdSetRenderingInputAttachmentIndicesKHR(
                    commandBuffer,
                    __dsl_pInputAttachmentIndexInfo
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_representative_fragment_test"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRepresentativeFragmentTestEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRepresentativeFragmentTestEnableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> representativeFragmentTestEnable
        ) =>
            Underlying.Value!.CmdSetRepresentativeFragmentTestEnableNV(
                commandBuffer,
                representativeFragmentTestEnable
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_sample_locations"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetSampleLocationsEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> sampleLocationsEnable
        ) => Underlying.Value!.CmdSetSampleLocationsEnableEXT(commandBuffer, sampleLocationsEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_sample_locations"],
            ImpliesSets = [
                "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
                "VK_EXT_sample_locations+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetSampleLocationsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkSampleLocationsInfoEXT *")]
                SampleLocationsInfoEXT* pSampleLocationsInfo
        ) => Underlying.Value!.CmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_sample_locations"],
            ImpliesSets = [
                "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
                "VK_EXT_sample_locations+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetSampleLocationsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkSampleLocationsInfoEXT *")]
                Ref<SampleLocationsInfoEXT> pSampleLocationsInfo
        )
        {
            fixed (SampleLocationsInfoEXT* __dsl_pSampleLocationsInfo = pSampleLocationsInfo)
            {
                CmdSetSampleLocationsEXT(commandBuffer, __dsl_pSampleLocationsInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleMaskEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetSampleMaskEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            SampleCountFlags samples,
            [NativeTypeName("const VkSampleMask *")] uint* pSampleMask
        ) => Underlying.Value!.CmdSetSampleMaskEXT(commandBuffer, samples, pSampleMask);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleMaskEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetSampleMaskEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            SampleCountFlags samples,
            [NativeTypeName("const VkSampleMask *")] Ref<uint> pSampleMask
        )
        {
            fixed (uint* __dsl_pSampleMask = pSampleMask)
            {
                CmdSetSampleMaskEXT(commandBuffer, samples, __dsl_pSampleMask);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissor(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstScissor,
            [NativeTypeName("uint32_t")] uint scissorCount,
            [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
        ) => Underlying.Value!.CmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissor(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstScissor,
            [NativeTypeName("uint32_t")] uint scissorCount,
            [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
        )
        {
            fixed (Rect2D* __dsl_pScissors = pScissors)
            {
                CmdSetScissor(commandBuffer, firstScissor, scissorCount, __dsl_pScissors);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissor(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstScissor,
            [NativeTypeName("const VkRect2D *")] Rect2D pScissors
        ) => Underlying.Value!.CmdSetScissor(commandBuffer, firstScissor, pScissors);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissorWithCount(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint scissorCount,
            [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
        ) => Underlying.Value!.CmdSetScissorWithCount(commandBuffer, scissorCount, pScissors);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissorWithCount(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint scissorCount,
            [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
        )
        {
            fixed (Rect2D* __dsl_pScissors = pScissors)
            {
                CmdSetScissorWithCount(commandBuffer, scissorCount, __dsl_pScissors);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissorWithCount(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRect2D *")] Rect2D pScissors
        ) => Underlying.Value!.CmdSetScissorWithCount(commandBuffer, pScissors);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCountEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissorWithCountEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint scissorCount,
            [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
        ) => Underlying.Value!.CmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCountEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissorWithCountEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint scissorCount,
            [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
        )
        {
            fixed (Rect2D* __dsl_pScissors = pScissors)
            {
                CmdSetScissorWithCountEXT(commandBuffer, scissorCount, __dsl_pScissors);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCountEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissorWithCountEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkRect2D *")] Rect2D pScissors
        ) => Underlying.Value!.CmdSetScissorWithCountEXT(commandBuffer, pScissors);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetShadingRateImageEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetShadingRateImageEnableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> shadingRateImageEnable
        ) =>
            Underlying.Value!.CmdSetShadingRateImageEnableNV(commandBuffer, shadingRateImageEnable);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilCompareMask")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetStencilCompareMask(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
            [NativeTypeName("uint32_t")] uint compareMask
        ) => Underlying.Value!.CmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilOp")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetStencilOp(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
            StencilOp failOp,
            StencilOp passOp,
            StencilOp depthFailOp,
            CompareOp compareOp
        ) =>
            Underlying.Value!.CmdSetStencilOp(
                commandBuffer,
                faceMask,
                failOp,
                passOp,
                depthFailOp,
                compareOp
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilOpEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetStencilOpEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
            StencilOp failOp,
            StencilOp passOp,
            StencilOp depthFailOp,
            CompareOp compareOp
        ) =>
            Underlying.Value!.CmdSetStencilOpEXT(
                commandBuffer,
                faceMask,
                failOp,
                passOp,
                depthFailOp,
                compareOp
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilReference")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetStencilReference(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
            [NativeTypeName("uint32_t")] uint reference
        ) => Underlying.Value!.CmdSetStencilReference(commandBuffer, faceMask, reference);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilTestEnable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetStencilTestEnable(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> stencilTestEnable
        ) => Underlying.Value!.CmdSetStencilTestEnable(commandBuffer, stencilTestEnable);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilTestEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetStencilTestEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> stencilTestEnable
        ) => Underlying.Value!.CmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilWriteMask")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetStencilWriteMask(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
            [NativeTypeName("uint32_t")] uint writeMask
        ) => Underlying.Value!.CmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_EXT_extended_dynamic_state3+VK_KHR_maintenance2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetTessellationDomainOriginEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetTessellationDomainOriginEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            TessellationDomainOrigin domainOrigin
        ) => Underlying.Value!.CmdSetTessellationDomainOriginEXT(commandBuffer, domainOrigin);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_vertex_input_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_vertex_input_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_vertex_input_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetVertexInputEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetVertexInputEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint vertexBindingDescriptionCount,
            [NativeTypeName("const VkVertexInputBindingDescription2EXT *")]
                VertexInputBindingDescription2EXT* pVertexBindingDescriptions,
            [NativeTypeName("uint32_t")] uint vertexAttributeDescriptionCount,
            [NativeTypeName("const VkVertexInputAttributeDescription2EXT *")]
                VertexInputAttributeDescription2EXT* pVertexAttributeDescriptions
        ) =>
            Underlying.Value!.CmdSetVertexInputEXT(
                commandBuffer,
                vertexBindingDescriptionCount,
                pVertexBindingDescriptions,
                vertexAttributeDescriptionCount,
                pVertexAttributeDescriptions
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_vertex_input_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_vertex_input_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_vertex_input_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetVertexInputEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetVertexInputEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint vertexBindingDescriptionCount,
            [NativeTypeName("const VkVertexInputBindingDescription2EXT *")]
                Ref<VertexInputBindingDescription2EXT> pVertexBindingDescriptions,
            [NativeTypeName("uint32_t")] uint vertexAttributeDescriptionCount,
            [NativeTypeName("const VkVertexInputAttributeDescription2EXT *")]
                Ref<VertexInputAttributeDescription2EXT> pVertexAttributeDescriptions
        )
        {
            fixed (
                VertexInputAttributeDescription2EXT* __dsl_pVertexAttributeDescriptions =
                    pVertexAttributeDescriptions
            )
            fixed (
                VertexInputBindingDescription2EXT* __dsl_pVertexBindingDescriptions =
                    pVertexBindingDescriptions
            )
            {
                CmdSetVertexInputEXT(
                    commandBuffer,
                    vertexBindingDescriptionCount,
                    __dsl_pVertexBindingDescriptions,
                    vertexAttributeDescriptionCount,
                    __dsl_pVertexAttributeDescriptions
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewport(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewport *")] Viewport* pViewports
        ) =>
            Underlying.Value!.CmdSetViewport(
                commandBuffer,
                firstViewport,
                viewportCount,
                pViewports
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewport(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
        )
        {
            fixed (Viewport* __dsl_pViewports = pViewports)
            {
                CmdSetViewport(commandBuffer, firstViewport, viewportCount, __dsl_pViewports);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewport(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("const VkViewport *")] Viewport pViewports
        ) => Underlying.Value!.CmdSetViewport(commandBuffer, firstViewport, pViewports);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportShadingRatePaletteNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkShadingRatePaletteNV *")]
                ShadingRatePaletteNV* pShadingRatePalettes
        ) =>
            Underlying.Value!.CmdSetViewportShadingRatePaletteNV(
                commandBuffer,
                firstViewport,
                viewportCount,
                pShadingRatePalettes
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportShadingRatePaletteNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkShadingRatePaletteNV *")]
                Ref<ShadingRatePaletteNV> pShadingRatePalettes
        )
        {
            fixed (ShadingRatePaletteNV* __dsl_pShadingRatePalettes = pShadingRatePalettes)
            {
                CmdSetViewportShadingRatePaletteNV(
                    commandBuffer,
                    firstViewport,
                    viewportCount,
                    __dsl_pShadingRatePalettes
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportShadingRatePaletteNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("const VkShadingRatePaletteNV *")]
                ShadingRatePaletteNV pShadingRatePalettes
        ) =>
            Underlying.Value!.CmdSetViewportShadingRatePaletteNV(
                commandBuffer,
                firstViewport,
                pShadingRatePalettes
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportSwizzleNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportSwizzleNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewportSwizzleNV *")] ViewportSwizzleNV* pViewportSwizzles
        ) =>
            Underlying.Value!.CmdSetViewportSwizzleNV(
                commandBuffer,
                firstViewport,
                viewportCount,
                pViewportSwizzles
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportSwizzleNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportSwizzleNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewportSwizzleNV *")] Ref<ViewportSwizzleNV> pViewportSwizzles
        )
        {
            fixed (ViewportSwizzleNV* __dsl_pViewportSwizzles = pViewportSwizzles)
            {
                CmdSetViewportSwizzleNV(
                    commandBuffer,
                    firstViewport,
                    viewportCount,
                    __dsl_pViewportSwizzles
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportSwizzleNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportSwizzleNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("const VkViewportSwizzleNV *")] ViewportSwizzleNV pViewportSwizzles
        ) =>
            Underlying.Value!.CmdSetViewportSwizzleNV(
                commandBuffer,
                firstViewport,
                pViewportSwizzles
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWithCount(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewport *")] Viewport* pViewports
        ) => Underlying.Value!.CmdSetViewportWithCount(commandBuffer, viewportCount, pViewports);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWithCount(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
        )
        {
            fixed (Viewport* __dsl_pViewports = pViewports)
            {
                CmdSetViewportWithCount(commandBuffer, viewportCount, __dsl_pViewports);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWithCount(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkViewport *")] Viewport pViewports
        ) => Underlying.Value!.CmdSetViewportWithCount(commandBuffer, pViewports);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCountEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWithCountEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewport *")] Viewport* pViewports
        ) => Underlying.Value!.CmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCountEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWithCountEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
        )
        {
            fixed (Viewport* __dsl_pViewports = pViewports)
            {
                CmdSetViewportWithCountEXT(commandBuffer, viewportCount, __dsl_pViewports);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCountEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWithCountEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkViewport *")] Viewport pViewports
        ) => Underlying.Value!.CmdSetViewportWithCountEXT(commandBuffer, pViewports);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_clip_space_w_scaling"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWScalingEnableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBool32")] MaybeBool<uint> viewportWScalingEnable
        ) =>
            Underlying.Value!.CmdSetViewportWScalingEnableNV(commandBuffer, viewportWScalingEnable);

        [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWScalingNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewportWScalingNV *")] ViewportWScalingNV* pViewportWScalings
        ) =>
            Underlying.Value!.CmdSetViewportWScalingNV(
                commandBuffer,
                firstViewport,
                viewportCount,
                pViewportWScalings
            );

        [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWScalingNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewportWScalingNV *")]
                Ref<ViewportWScalingNV> pViewportWScalings
        )
        {
            fixed (ViewportWScalingNV* __dsl_pViewportWScalings = pViewportWScalings)
            {
                CmdSetViewportWScalingNV(
                    commandBuffer,
                    firstViewport,
                    viewportCount,
                    __dsl_pViewportWScalings
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWScalingNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("const VkViewportWScalingNV *")] ViewportWScalingNV pViewportWScalings
        ) =>
            Underlying.Value!.CmdSetViewportWScalingNV(
                commandBuffer,
                firstViewport,
                pViewportWScalings
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_subpass_shading"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSubpassShadingHUAWEI")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSubpassShadingHuawei(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
        ) => Underlying.Value!.CmdSubpassShadingHuawei(commandBuffer);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_maintenance1", "VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = ["VK_KHR_acceleration_structure"],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirect2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdTraceRaysIndirect2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
        ) => Underlying.Value!.CmdTraceRaysIndirect2KHR(commandBuffer, indirectDeviceAddress);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirectKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdTraceRaysIndirectKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pMissShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pHitShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
            [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
        ) =>
            Underlying.Value!.CmdTraceRaysIndirectKHR(
                commandBuffer,
                pRaygenShaderBindingTable,
                pMissShaderBindingTable,
                pHitShaderBindingTable,
                pCallableShaderBindingTable,
                indirectDeviceAddress
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirectKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdTraceRaysIndirectKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pRaygenShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pMissShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pHitShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pCallableShaderBindingTable,
            [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
        )
        {
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pCallableShaderBindingTable =
                    pCallableShaderBindingTable
            )
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pHitShaderBindingTable = pHitShaderBindingTable
            )
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pMissShaderBindingTable =
                    pMissShaderBindingTable
            )
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pRaygenShaderBindingTable =
                    pRaygenShaderBindingTable
            )
            {
                CmdTraceRaysIndirectKHR(
                    commandBuffer,
                    __dsl_pRaygenShaderBindingTable,
                    __dsl_pMissShaderBindingTable,
                    __dsl_pHitShaderBindingTable,
                    __dsl_pCallableShaderBindingTable,
                    indirectDeviceAddress
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdTraceRaysKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pMissShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pHitShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
            [NativeTypeName("uint32_t")] uint width,
            [NativeTypeName("uint32_t")] uint height,
            [NativeTypeName("uint32_t")] uint depth
        ) =>
            Underlying.Value!.CmdTraceRaysKHR(
                commandBuffer,
                pRaygenShaderBindingTable,
                pMissShaderBindingTable,
                pHitShaderBindingTable,
                pCallableShaderBindingTable,
                width,
                height,
                depth
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdTraceRaysKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pRaygenShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pMissShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pHitShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pCallableShaderBindingTable,
            [NativeTypeName("uint32_t")] uint width,
            [NativeTypeName("uint32_t")] uint height,
            [NativeTypeName("uint32_t")] uint depth
        )
        {
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pCallableShaderBindingTable =
                    pCallableShaderBindingTable
            )
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pHitShaderBindingTable = pHitShaderBindingTable
            )
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pMissShaderBindingTable =
                    pMissShaderBindingTable
            )
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pRaygenShaderBindingTable =
                    pRaygenShaderBindingTable
            )
            {
                CmdTraceRaysKHR(
                    commandBuffer,
                    __dsl_pRaygenShaderBindingTable,
                    __dsl_pMissShaderBindingTable,
                    __dsl_pHitShaderBindingTable,
                    __dsl_pCallableShaderBindingTable,
                    width,
                    height,
                    depth
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdTraceRaysNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle raygenShaderBindingTableBuffer,
            [NativeTypeName("VkDeviceSize")] ulong raygenShaderBindingOffset,
            [NativeTypeName("VkBuffer")] BufferHandle missShaderBindingTableBuffer,
            [NativeTypeName("VkDeviceSize")] ulong missShaderBindingOffset,
            [NativeTypeName("VkDeviceSize")] ulong missShaderBindingStride,
            [NativeTypeName("VkBuffer")] BufferHandle hitShaderBindingTableBuffer,
            [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingOffset,
            [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingStride,
            [NativeTypeName("VkBuffer")] BufferHandle callableShaderBindingTableBuffer,
            [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingOffset,
            [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingStride,
            [NativeTypeName("uint32_t")] uint width,
            [NativeTypeName("uint32_t")] uint height,
            [NativeTypeName("uint32_t")] uint depth
        ) =>
            Underlying.Value!.CmdTraceRaysNV(
                commandBuffer,
                raygenShaderBindingTableBuffer,
                raygenShaderBindingOffset,
                missShaderBindingTableBuffer,
                missShaderBindingOffset,
                missShaderBindingStride,
                hitShaderBindingTableBuffer,
                hitShaderBindingOffset,
                hitShaderBindingStride,
                callableShaderBindingTableBuffer,
                callableShaderBindingOffset,
                callableShaderBindingStride,
                width,
                height,
                depth
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdUpdateBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdUpdateBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("VkDeviceSize")] ulong dataSize,
            [NativeTypeName("const void *")] void* pData
        ) =>
            Underlying.Value!.CmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdUpdateBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdUpdateBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("VkDeviceSize")] ulong dataSize,
            [NativeTypeName("const void *")] Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            {
                CmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, __dsl_pData);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands_compute"],
            ImpliesSets = ["VK_NV_device_generated_commands"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdUpdatePipelineIndirectBufferNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdUpdatePipelineIndirectBufferNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline
        ) =>
            Underlying.Value!.CmdUpdatePipelineIndirectBufferNV(
                commandBuffer,
                pipelineBindPoint,
                pipeline
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWaitEvents(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint eventCount,
            [NativeTypeName("const VkEvent *")] EventHandle* pEvents,
            [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags srcStageMask,
            [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags dstStageMask,
            [NativeTypeName("uint32_t")] uint memoryBarrierCount,
            [NativeTypeName("const VkMemoryBarrier *")] MemoryBarrier* pMemoryBarriers,
            [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
            [NativeTypeName("const VkBufferMemoryBarrier *")]
                BufferMemoryBarrier* pBufferMemoryBarriers,
            [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
            [NativeTypeName("const VkImageMemoryBarrier *")]
                ImageMemoryBarrier* pImageMemoryBarriers
        ) =>
            Underlying.Value!.CmdWaitEvents(
                commandBuffer,
                eventCount,
                pEvents,
                srcStageMask,
                dstStageMask,
                memoryBarrierCount,
                pMemoryBarriers,
                bufferMemoryBarrierCount,
                pBufferMemoryBarriers,
                imageMemoryBarrierCount,
                pImageMemoryBarriers
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWaitEvents(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint eventCount,
            [NativeTypeName("const VkEvent *")] Ref<EventHandle> pEvents,
            [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags srcStageMask,
            [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags dstStageMask,
            [NativeTypeName("uint32_t")] uint memoryBarrierCount,
            [NativeTypeName("const VkMemoryBarrier *")] Ref<MemoryBarrier> pMemoryBarriers,
            [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
            [NativeTypeName("const VkBufferMemoryBarrier *")]
                Ref<BufferMemoryBarrier> pBufferMemoryBarriers,
            [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
            [NativeTypeName("const VkImageMemoryBarrier *")]
                Ref<ImageMemoryBarrier> pImageMemoryBarriers
        )
        {
            fixed (ImageMemoryBarrier* __dsl_pImageMemoryBarriers = pImageMemoryBarriers)
            fixed (BufferMemoryBarrier* __dsl_pBufferMemoryBarriers = pBufferMemoryBarriers)
            fixed (MemoryBarrier* __dsl_pMemoryBarriers = pMemoryBarriers)
            fixed (EventHandle* __dsl_pEvents = pEvents)
            {
                CmdWaitEvents(
                    commandBuffer,
                    eventCount,
                    __dsl_pEvents,
                    srcStageMask,
                    dstStageMask,
                    memoryBarrierCount,
                    __dsl_pMemoryBarriers,
                    bufferMemoryBarrierCount,
                    __dsl_pBufferMemoryBarriers,
                    imageMemoryBarrierCount,
                    __dsl_pImageMemoryBarriers
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWaitEvents2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint eventCount,
            [NativeTypeName("const VkEvent *")] EventHandle* pEvents,
            [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfos
        ) => Underlying.Value!.CmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWaitEvents2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint eventCount,
            [NativeTypeName("const VkEvent *")] Ref<EventHandle> pEvents,
            [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfos
        )
        {
            fixed (DependencyInfo* __dsl_pDependencyInfos = pDependencyInfos)
            fixed (EventHandle* __dsl_pEvents = pEvents)
            {
                CmdWaitEvents2(commandBuffer, eventCount, __dsl_pEvents, __dsl_pDependencyInfos);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWaitEvents2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint eventCount,
            [NativeTypeName("const VkEvent *")] EventHandle* pEvents,
            [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfos
        ) =>
            Underlying.Value!.CmdWaitEvents2KHR(
                commandBuffer,
                eventCount,
                pEvents,
                pDependencyInfos
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWaitEvents2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint eventCount,
            [NativeTypeName("const VkEvent *")] Ref<EventHandle> pEvents,
            [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfos
        )
        {
            fixed (DependencyInfo* __dsl_pDependencyInfos = pDependencyInfos)
            fixed (EventHandle* __dsl_pEvents = pEvents)
            {
                CmdWaitEvents2KHR(commandBuffer, eventCount, __dsl_pEvents, __dsl_pDependencyInfos);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteAccelerationStructuresPropertiesKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint accelerationStructureCount,
            [NativeTypeName("const VkAccelerationStructureKHR *")]
                AccelerationStructureKHRHandle* pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        ) =>
            Underlying.Value!.CmdWriteAccelerationStructuresPropertiesKHR(
                commandBuffer,
                accelerationStructureCount,
                pAccelerationStructures,
                queryType,
                queryPool,
                firstQuery
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteAccelerationStructuresPropertiesKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint accelerationStructureCount,
            [NativeTypeName("const VkAccelerationStructureKHR *")]
                Ref<AccelerationStructureKHRHandle> pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        )
        {
            fixed (
                AccelerationStructureKHRHandle* __dsl_pAccelerationStructures =
                    pAccelerationStructures
            )
            {
                CmdWriteAccelerationStructuresPropertiesKHR(
                    commandBuffer,
                    accelerationStructureCount,
                    __dsl_pAccelerationStructures,
                    queryType,
                    queryPool,
                    firstQuery
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteAccelerationStructuresPropertiesKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkAccelerationStructureKHR *")]
                AccelerationStructureKHRHandle pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        ) =>
            Underlying.Value!.CmdWriteAccelerationStructuresPropertiesKHR(
                commandBuffer,
                pAccelerationStructures,
                queryType,
                queryPool,
                firstQuery
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteAccelerationStructuresPropertiesNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint accelerationStructureCount,
            [NativeTypeName("const VkAccelerationStructureNV *")]
                AccelerationStructureNVHandle* pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        ) =>
            Underlying.Value!.CmdWriteAccelerationStructuresPropertiesNV(
                commandBuffer,
                accelerationStructureCount,
                pAccelerationStructures,
                queryType,
                queryPool,
                firstQuery
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteAccelerationStructuresPropertiesNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint accelerationStructureCount,
            [NativeTypeName("const VkAccelerationStructureNV *")]
                Ref<AccelerationStructureNVHandle> pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        )
        {
            fixed (
                AccelerationStructureNVHandle* __dsl_pAccelerationStructures =
                    pAccelerationStructures
            )
            {
                CmdWriteAccelerationStructuresPropertiesNV(
                    commandBuffer,
                    accelerationStructureCount,
                    __dsl_pAccelerationStructures,
                    queryType,
                    queryPool,
                    firstQuery
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteAccelerationStructuresPropertiesNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkAccelerationStructureNV *")]
                AccelerationStructureNVHandle pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        ) =>
            Underlying.Value!.CmdWriteAccelerationStructuresPropertiesNV(
                commandBuffer,
                pAccelerationStructures,
                queryType,
                queryPool,
                firstQuery
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_AMD_buffer_marker+VK_KHR_synchronization2", "VK_AMD_buffer_marker+VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteBufferMarker2AMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteBufferMarker2AMD(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stage,
            [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("uint32_t")] uint marker
        ) =>
            Underlying.Value!.CmdWriteBufferMarker2AMD(
                commandBuffer,
                stage,
                dstBuffer,
                dstOffset,
                marker
            );

        [SupportedApiProfile("vulkan", ["VK_AMD_buffer_marker"])]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteBufferMarkerAMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteBufferMarkerAMD(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineStageFlags pipelineStage,
            [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("uint32_t")] uint marker
        ) =>
            Underlying.Value!.CmdWriteBufferMarkerAMD(
                commandBuffer,
                pipelineStage,
                dstBuffer,
                dstOffset,
                marker
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteMicromapsPropertiesEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint micromapCount,
            [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle* pMicromaps,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        ) =>
            Underlying.Value!.CmdWriteMicromapsPropertiesEXT(
                commandBuffer,
                micromapCount,
                pMicromaps,
                queryType,
                queryPool,
                firstQuery
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteMicromapsPropertiesEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("uint32_t")] uint micromapCount,
            [NativeTypeName("const VkMicromapEXT *")] Ref<MicromapEXTHandle> pMicromaps,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        )
        {
            fixed (MicromapEXTHandle* __dsl_pMicromaps = pMicromaps)
            {
                CmdWriteMicromapsPropertiesEXT(
                    commandBuffer,
                    micromapCount,
                    __dsl_pMicromaps,
                    queryType,
                    queryPool,
                    firstQuery
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteMicromapsPropertiesEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle pMicromaps,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        ) =>
            Underlying.Value!.CmdWriteMicromapsPropertiesEXT(
                commandBuffer,
                pMicromaps,
                queryType,
                queryPool,
                firstQuery
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteTimestamp(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            PipelineStageFlags pipelineStage,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint query
        ) => Underlying.Value!.CmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteTimestamp2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stage,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint query
        ) => Underlying.Value!.CmdWriteTimestamp2(commandBuffer, stage, queryPool, query);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteTimestamp2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stage,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint query
        ) => Underlying.Value!.CmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCompileDeferredNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CompileDeferredNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
            [NativeTypeName("uint32_t")] uint shader
        ) => Underlying.Value!.CompileDeferredNV(device, pipeline, shader);

        [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
        [NativeFunction("vulkan", EntryPoint = "vkConvertCooperativeVectorMatrixNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ConvertCooperativeVectorMatrixNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
                ConvertCooperativeVectorMatrixInfoNV* pInfo
        ) => Underlying.Value!.ConvertCooperativeVectorMatrixNV(device, pInfo);

        [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkConvertCooperativeVectorMatrixNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ConvertCooperativeVectorMatrixNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
                Ref<ConvertCooperativeVectorMatrixInfoNV> pInfo
        )
        {
            fixed (ConvertCooperativeVectorMatrixInfoNV* __dsl_pInfo = pInfo)
            {
                return (Result)ConvertCooperativeVectorMatrixNV(device, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
                CopyAccelerationStructureInfoKHR* pInfo
        ) => Underlying.Value!.CopyAccelerationStructureKHR(device, deferredOperation, pInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
                Ref<CopyAccelerationStructureInfoKHR> pInfo
        )
        {
            fixed (CopyAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
            {
                return (Result)CopyAccelerationStructureKHR(device, deferredOperation, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureToMemoryKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyAccelerationStructureToMemoryKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
                CopyAccelerationStructureToMemoryInfoKHR* pInfo
        ) =>
            Underlying.Value!.CopyAccelerationStructureToMemoryKHR(
                device,
                deferredOperation,
                pInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureToMemoryKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyAccelerationStructureToMemoryKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
                Ref<CopyAccelerationStructureToMemoryInfoKHR> pInfo
        )
        {
            fixed (CopyAccelerationStructureToMemoryInfoKHR* __dsl_pInfo = pInfo)
            {
                return (Result)CopyAccelerationStructureToMemoryKHR(
                    device,
                    deferredOperation,
                    __dsl_pInfo
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyImageToImage(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCopyImageToImageInfo *")]
                CopyImageToImageInfo* pCopyImageToImageInfo
        ) => Underlying.Value!.CopyImageToImage(device, pCopyImageToImageInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyImageToImage(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCopyImageToImageInfo *")]
                Ref<CopyImageToImageInfo> pCopyImageToImageInfo
        )
        {
            fixed (CopyImageToImageInfo* __dsl_pCopyImageToImageInfo = pCopyImageToImageInfo)
            {
                return (Result)CopyImageToImage(device, __dsl_pCopyImageToImageInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImageEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyImageToImageEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCopyImageToImageInfo *")]
                CopyImageToImageInfo* pCopyImageToImageInfo
        ) => Underlying.Value!.CopyImageToImageEXT(device, pCopyImageToImageInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImageEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyImageToImageEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCopyImageToImageInfo *")]
                Ref<CopyImageToImageInfo> pCopyImageToImageInfo
        )
        {
            fixed (CopyImageToImageInfo* __dsl_pCopyImageToImageInfo = pCopyImageToImageInfo)
            {
                return (Result)CopyImageToImageEXT(device, __dsl_pCopyImageToImageInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyImageToMemory(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCopyImageToMemoryInfo *")]
                CopyImageToMemoryInfo* pCopyImageToMemoryInfo
        ) => Underlying.Value!.CopyImageToMemory(device, pCopyImageToMemoryInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyImageToMemory(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCopyImageToMemoryInfo *")]
                Ref<CopyImageToMemoryInfo> pCopyImageToMemoryInfo
        )
        {
            fixed (CopyImageToMemoryInfo* __dsl_pCopyImageToMemoryInfo = pCopyImageToMemoryInfo)
            {
                return (Result)CopyImageToMemory(device, __dsl_pCopyImageToMemoryInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemoryEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyImageToMemoryEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCopyImageToMemoryInfo *")]
                CopyImageToMemoryInfo* pCopyImageToMemoryInfo
        ) => Underlying.Value!.CopyImageToMemoryEXT(device, pCopyImageToMemoryInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemoryEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyImageToMemoryEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCopyImageToMemoryInfo *")]
                Ref<CopyImageToMemoryInfo> pCopyImageToMemoryInfo
        )
        {
            fixed (CopyImageToMemoryInfo* __dsl_pCopyImageToMemoryInfo = pCopyImageToMemoryInfo)
            {
                return (Result)CopyImageToMemoryEXT(device, __dsl_pCopyImageToMemoryInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMemoryToAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
                CopyMemoryToAccelerationStructureInfoKHR* pInfo
        ) =>
            Underlying.Value!.CopyMemoryToAccelerationStructureKHR(
                device,
                deferredOperation,
                pInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMemoryToAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
                Ref<CopyMemoryToAccelerationStructureInfoKHR> pInfo
        )
        {
            fixed (CopyMemoryToAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
            {
                return (Result)CopyMemoryToAccelerationStructureKHR(
                    device,
                    deferredOperation,
                    __dsl_pInfo
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMemoryToImage(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCopyMemoryToImageInfo *")]
                CopyMemoryToImageInfo* pCopyMemoryToImageInfo
        ) => Underlying.Value!.CopyMemoryToImage(device, pCopyMemoryToImageInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMemoryToImage(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCopyMemoryToImageInfo *")]
                Ref<CopyMemoryToImageInfo> pCopyMemoryToImageInfo
        )
        {
            fixed (CopyMemoryToImageInfo* __dsl_pCopyMemoryToImageInfo = pCopyMemoryToImageInfo)
            {
                return (Result)CopyMemoryToImage(device, __dsl_pCopyMemoryToImageInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImageEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMemoryToImageEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCopyMemoryToImageInfo *")]
                CopyMemoryToImageInfo* pCopyMemoryToImageInfo
        ) => Underlying.Value!.CopyMemoryToImageEXT(device, pCopyMemoryToImageInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImageEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMemoryToImageEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCopyMemoryToImageInfo *")]
                Ref<CopyMemoryToImageInfo> pCopyMemoryToImageInfo
        )
        {
            fixed (CopyMemoryToImageInfo* __dsl_pCopyMemoryToImageInfo = pCopyMemoryToImageInfo)
            {
                return (Result)CopyMemoryToImageEXT(device, __dsl_pCopyMemoryToImageInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMemoryToMicromapEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
                CopyMemoryToMicromapInfoEXT* pInfo
        ) => Underlying.Value!.CopyMemoryToMicromapEXT(device, deferredOperation, pInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMemoryToMicromapEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
                Ref<CopyMemoryToMicromapInfoEXT> pInfo
        )
        {
            fixed (CopyMemoryToMicromapInfoEXT* __dsl_pInfo = pInfo)
            {
                return (Result)CopyMemoryToMicromapEXT(device, deferredOperation, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMicromapEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("const VkCopyMicromapInfoEXT *")] CopyMicromapInfoEXT* pInfo
        ) => Underlying.Value!.CopyMicromapEXT(device, deferredOperation, pInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMicromapEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("const VkCopyMicromapInfoEXT *")] Ref<CopyMicromapInfoEXT> pInfo
        )
        {
            fixed (CopyMicromapInfoEXT* __dsl_pInfo = pInfo)
            {
                return (Result)CopyMicromapEXT(device, deferredOperation, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapToMemoryEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMicromapToMemoryEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
                CopyMicromapToMemoryInfoEXT* pInfo
        ) => Underlying.Value!.CopyMicromapToMemoryEXT(device, deferredOperation, pInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapToMemoryEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMicromapToMemoryEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
                Ref<CopyMicromapToMemoryInfoEXT> pInfo
        )
        {
            fixed (CopyMicromapToMemoryInfoEXT* __dsl_pInfo = pInfo)
            {
                return (Result)CopyMicromapToMemoryEXT(device, deferredOperation, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAccelerationStructureCreateInfoKHR *")]
                AccelerationStructureCreateInfoKHR* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkAccelerationStructureKHR *")]
                AccelerationStructureKHRHandle* pAccelerationStructure
        ) =>
            Underlying.Value!.CreateAccelerationStructureKHR(
                device,
                pCreateInfo,
                pAllocator,
                pAccelerationStructure
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAccelerationStructureCreateInfoKHR *")]
                Ref<AccelerationStructureCreateInfoKHR> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkAccelerationStructureKHR *")]
                Ref<AccelerationStructureKHRHandle> pAccelerationStructure
        )
        {
            fixed (
                AccelerationStructureKHRHandle* __dsl_pAccelerationStructure =
                    pAccelerationStructure
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (AccelerationStructureCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateAccelerationStructureKHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pAccelerationStructure
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateAccelerationStructureNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAccelerationStructureCreateInfoNV *")]
                AccelerationStructureCreateInfoNV* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkAccelerationStructureNV *")]
                AccelerationStructureNVHandle* pAccelerationStructure
        ) =>
            Underlying.Value!.CreateAccelerationStructureNV(
                device,
                pCreateInfo,
                pAllocator,
                pAccelerationStructure
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateAccelerationStructureNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAccelerationStructureCreateInfoNV *")]
                Ref<AccelerationStructureCreateInfoNV> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkAccelerationStructureNV *")]
                Ref<AccelerationStructureNVHandle> pAccelerationStructure
        )
        {
            fixed (
                AccelerationStructureNVHandle* __dsl_pAccelerationStructure = pAccelerationStructure
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (AccelerationStructureCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateAccelerationStructureNV(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pAccelerationStructure
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateBuffer(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferCreateInfo *")] BufferCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkBuffer *")] BufferHandle* pBuffer
        ) => Underlying.Value!.CreateBuffer(device, pCreateInfo, pAllocator, pBuffer);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateBuffer(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferCreateInfo *")] Ref<BufferCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkBuffer *")] Ref<BufferHandle> pBuffer
        )
        {
            fixed (BufferHandle* __dsl_pBuffer = pBuffer)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (BufferCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateBuffer(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pBuffer
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateBufferView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateBufferView(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferViewCreateInfo *")] BufferViewCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkBufferView *")] BufferViewHandle* pView
        ) => Underlying.Value!.CreateBufferView(device, pCreateInfo, pAllocator, pView);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateBufferView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateBufferView(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferViewCreateInfo *")]
                Ref<BufferViewCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkBufferView *")] Ref<BufferViewHandle> pView
        )
        {
            fixed (BufferViewHandle* __dsl_pView = pView)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (BufferViewCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateBufferView(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pView
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateCommandPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateCommandPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCommandPoolCreateInfo *")] CommandPoolCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkCommandPool *")] CommandPoolHandle* pCommandPool
        ) => Underlying.Value!.CreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateCommandPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateCommandPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCommandPoolCreateInfo *")]
                Ref<CommandPoolCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkCommandPool *")] Ref<CommandPoolHandle> pCommandPool
        )
        {
            fixed (CommandPoolHandle* __dsl_pCommandPool = pCommandPool)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (CommandPoolCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateCommandPool(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pCommandPool
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateComputePipelines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateComputePipelines(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkComputePipelineCreateInfo *")]
                ComputePipelineCreateInfo* pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
        ) =>
            Underlying.Value!.CreateComputePipelines(
                device,
                pipelineCache,
                createInfoCount,
                pCreateInfos,
                pAllocator,
                pPipelines
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateComputePipelines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateComputePipelines(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkComputePipelineCreateInfo *")]
                Ref<ComputePipelineCreateInfo> pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
        )
        {
            fixed (PipelineHandle* __dsl_pPipelines = pPipelines)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ComputePipelineCreateInfo* __dsl_pCreateInfos = pCreateInfos)
            {
                return (Result)CreateComputePipelines(
                    device,
                    pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [NativeFunction("vulkan", EntryPoint = "vkCreateCuFunctionNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateCuFunctionNVX(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCuFunctionCreateInfoNVX *")]
                CuFunctionCreateInfoNVX* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkCuFunctionNVX *")] CuFunctionNVXHandle* pFunction
        ) => Underlying.Value!.CreateCuFunctionNVX(device, pCreateInfo, pAllocator, pFunction);

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateCuFunctionNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateCuFunctionNVX(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCuFunctionCreateInfoNVX *")]
                Ref<CuFunctionCreateInfoNVX> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkCuFunctionNVX *")] Ref<CuFunctionNVXHandle> pFunction
        )
        {
            fixed (CuFunctionNVXHandle* __dsl_pFunction = pFunction)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (CuFunctionCreateInfoNVX* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateCuFunctionNVX(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pFunction
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [NativeFunction("vulkan", EntryPoint = "vkCreateCuModuleNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateCuModuleNVX(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCuModuleCreateInfoNVX *")] CuModuleCreateInfoNVX* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkCuModuleNVX *")] CuModuleNVXHandle* pModule
        ) => Underlying.Value!.CreateCuModuleNVX(device, pCreateInfo, pAllocator, pModule);

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateCuModuleNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateCuModuleNVX(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkCuModuleCreateInfoNVX *")]
                Ref<CuModuleCreateInfoNVX> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkCuModuleNVX *")] Ref<CuModuleNVXHandle> pModule
        )
        {
            fixed (CuModuleNVXHandle* __dsl_pModule = pModule)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (CuModuleCreateInfoNVX* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateCuModuleNVX(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pModule
                );
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDataGraphPipelinesARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDataGraphPipelinesARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkDataGraphPipelineCreateInfoARM *")]
                DataGraphPipelineCreateInfoARM* pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
        ) =>
            Underlying.Value!.CreateDataGraphPipelinesARM(
                device,
                deferredOperation,
                pipelineCache,
                createInfoCount,
                pCreateInfos,
                pAllocator,
                pPipelines
            );

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDataGraphPipelinesARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDataGraphPipelinesARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkDataGraphPipelineCreateInfoARM *")]
                Ref<DataGraphPipelineCreateInfoARM> pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
        )
        {
            fixed (PipelineHandle* __dsl_pPipelines = pPipelines)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DataGraphPipelineCreateInfoARM* __dsl_pCreateInfos = pCreateInfos)
            {
                return (Result)CreateDataGraphPipelinesARM(
                    device,
                    deferredOperation,
                    pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDataGraphPipelineSessionARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDataGraphPipelineSessionARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDataGraphPipelineSessionCreateInfoARM *")]
                DataGraphPipelineSessionCreateInfoARM* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDataGraphPipelineSessionARM *")]
                DataGraphPipelineSessionARMHandle* pSession
        ) =>
            Underlying.Value!.CreateDataGraphPipelineSessionARM(
                device,
                pCreateInfo,
                pAllocator,
                pSession
            );

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDataGraphPipelineSessionARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDataGraphPipelineSessionARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDataGraphPipelineSessionCreateInfoARM *")]
                Ref<DataGraphPipelineSessionCreateInfoARM> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDataGraphPipelineSessionARM *")]
                Ref<DataGraphPipelineSessionARMHandle> pSession
        )
        {
            fixed (DataGraphPipelineSessionARMHandle* __dsl_pSession = pSession)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DataGraphPipelineSessionCreateInfoARM* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateDataGraphPipelineSessionARM(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSession
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDebugReportCallbackEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDebugReportCallbackEXT(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("const VkDebugReportCallbackCreateInfoEXT *")]
                DebugReportCallbackCreateInfoEXT* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDebugReportCallbackEXT *")] DebugReportCallbackEXTHandle* pCallback
        ) =>
            Underlying.Value!.CreateDebugReportCallbackEXT(
                instance,
                pCreateInfo,
                pAllocator,
                pCallback
            );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDebugReportCallbackEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDebugReportCallbackEXT(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("const VkDebugReportCallbackCreateInfoEXT *")]
                Ref<DebugReportCallbackCreateInfoEXT> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDebugReportCallbackEXT *")]
                Ref<DebugReportCallbackEXTHandle> pCallback
        )
        {
            fixed (DebugReportCallbackEXTHandle* __dsl_pCallback = pCallback)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DebugReportCallbackCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateDebugReportCallbackEXT(
                    instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pCallback
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDebugUtilsMessengerEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDebugUtilsMessengerEXT(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("const VkDebugUtilsMessengerCreateInfoEXT *")]
                DebugUtilsMessengerCreateInfoEXT* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDebugUtilsMessengerEXT *")] DebugUtilsMessengerEXTHandle* pMessenger
        ) =>
            Underlying.Value!.CreateDebugUtilsMessengerEXT(
                instance,
                pCreateInfo,
                pAllocator,
                pMessenger
            );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDebugUtilsMessengerEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDebugUtilsMessengerEXT(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("const VkDebugUtilsMessengerCreateInfoEXT *")]
                Ref<DebugUtilsMessengerCreateInfoEXT> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDebugUtilsMessengerEXT *")]
                Ref<DebugUtilsMessengerEXTHandle> pMessenger
        )
        {
            fixed (DebugUtilsMessengerEXTHandle* __dsl_pMessenger = pMessenger)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DebugUtilsMessengerCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateDebugUtilsMessengerEXT(
                    instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pMessenger
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDeferredOperationKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDeferredOperationKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDeferredOperationKHR *")]
                DeferredOperationKHRHandle* pDeferredOperation
        ) => Underlying.Value!.CreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);

        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDeferredOperationKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDeferredOperationKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDeferredOperationKHR *")]
                Ref<DeferredOperationKHRHandle> pDeferredOperation
        )
        {
            fixed (DeferredOperationKHRHandle* __dsl_pDeferredOperation = pDeferredOperation)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                return (Result)CreateDeferredOperationKHR(
                    device,
                    __dsl_pAllocator,
                    __dsl_pDeferredOperation
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDescriptorPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorPoolCreateInfo *")]
                DescriptorPoolCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDescriptorPool *")] DescriptorPoolHandle* pDescriptorPool
        ) =>
            Underlying.Value!.CreateDescriptorPool(
                device,
                pCreateInfo,
                pAllocator,
                pDescriptorPool
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDescriptorPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorPoolCreateInfo *")]
                Ref<DescriptorPoolCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDescriptorPool *")] Ref<DescriptorPoolHandle> pDescriptorPool
        )
        {
            fixed (DescriptorPoolHandle* __dsl_pDescriptorPool = pDescriptorPool)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DescriptorPoolCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateDescriptorPool(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDescriptorPool
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorSetLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDescriptorSetLayout(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
                DescriptorSetLayoutCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDescriptorSetLayout *")] DescriptorSetLayoutHandle* pSetLayout
        ) =>
            Underlying.Value!.CreateDescriptorSetLayout(
                device,
                pCreateInfo,
                pAllocator,
                pSetLayout
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorSetLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDescriptorSetLayout(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
                Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDescriptorSetLayout *")] Ref<DescriptorSetLayoutHandle> pSetLayout
        )
        {
            fixed (DescriptorSetLayoutHandle* __dsl_pSetLayout = pSetLayout)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DescriptorSetLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateDescriptorSetLayout(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSetLayout
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDescriptorUpdateTemplate(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
                DescriptorUpdateTemplateCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDescriptorUpdateTemplate *")]
                DescriptorUpdateTemplateHandle* pDescriptorUpdateTemplate
        ) =>
            Underlying.Value!.CreateDescriptorUpdateTemplate(
                device,
                pCreateInfo,
                pAllocator,
                pDescriptorUpdateTemplate
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDescriptorUpdateTemplate(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
                Ref<DescriptorUpdateTemplateCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDescriptorUpdateTemplate *")]
                Ref<DescriptorUpdateTemplateHandle> pDescriptorUpdateTemplate
        )
        {
            fixed (
                DescriptorUpdateTemplateHandle* __dsl_pDescriptorUpdateTemplate =
                    pDescriptorUpdateTemplate
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DescriptorUpdateTemplateCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateDescriptorUpdateTemplate(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDescriptorUpdateTemplate
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDescriptorUpdateTemplateKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
                DescriptorUpdateTemplateCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDescriptorUpdateTemplate *")]
                DescriptorUpdateTemplateHandle* pDescriptorUpdateTemplate
        ) =>
            Underlying.Value!.CreateDescriptorUpdateTemplateKHR(
                device,
                pCreateInfo,
                pAllocator,
                pDescriptorUpdateTemplate
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDescriptorUpdateTemplateKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
                Ref<DescriptorUpdateTemplateCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDescriptorUpdateTemplate *")]
                Ref<DescriptorUpdateTemplateHandle> pDescriptorUpdateTemplate
        )
        {
            fixed (
                DescriptorUpdateTemplateHandle* __dsl_pDescriptorUpdateTemplate =
                    pDescriptorUpdateTemplate
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DescriptorUpdateTemplateCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateDescriptorUpdateTemplateKHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDescriptorUpdateTemplate
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDevice(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkDeviceCreateInfo *")] DeviceCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDevice *")] DeviceHandle* pDevice
        ) => Underlying.Value!.CreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDevice(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkDeviceCreateInfo *")] Ref<DeviceCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDevice *")] Ref<DeviceHandle> pDevice
        )
        {
            fixed (DeviceHandle* __dsl_pDevice = pDevice)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DeviceCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateDevice(
                    physicalDevice,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDevice
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayModeKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDisplayModeKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
            [NativeTypeName("const VkDisplayModeCreateInfoKHR *")]
                DisplayModeCreateInfoKHR* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDisplayModeKHR *")] DisplayModeKHRHandle* pMode
        ) =>
            Underlying.Value!.CreateDisplayModeKHR(
                physicalDevice,
                display,
                pCreateInfo,
                pAllocator,
                pMode
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayModeKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDisplayModeKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
            [NativeTypeName("const VkDisplayModeCreateInfoKHR *")]
                Ref<DisplayModeCreateInfoKHR> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDisplayModeKHR *")] Ref<DisplayModeKHRHandle> pMode
        )
        {
            fixed (DisplayModeKHRHandle* __dsl_pMode = pMode)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DisplayModeCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateDisplayModeKHR(
                    physicalDevice,
                    display,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pMode
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayPlaneSurfaceKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDisplayPlaneSurfaceKHR(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("const VkDisplaySurfaceCreateInfoKHR *")]
                DisplaySurfaceCreateInfoKHR* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSurfaceKHR *")] SurfaceKHRHandle* pSurface
        ) =>
            Underlying.Value!.CreateDisplayPlaneSurfaceKHR(
                instance,
                pCreateInfo,
                pAllocator,
                pSurface
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayPlaneSurfaceKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDisplayPlaneSurfaceKHR(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("const VkDisplaySurfaceCreateInfoKHR *")]
                Ref<DisplaySurfaceCreateInfoKHR> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSurfaceKHR *")] Ref<SurfaceKHRHandle> pSurface
        )
        {
            fixed (SurfaceKHRHandle* __dsl_pSurface = pSurface)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DisplaySurfaceCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateDisplayPlaneSurfaceKHR(
                    instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSurface
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateEvent(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkEventCreateInfo *")] EventCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkEvent *")] EventHandle* pEvent
        ) => Underlying.Value!.CreateEvent(device, pCreateInfo, pAllocator, pEvent);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateEvent(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkEventCreateInfo *")] Ref<EventCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkEvent *")] Ref<EventHandle> pEvent
        )
        {
            fixed (EventHandle* __dsl_pEvent = pEvent)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (EventCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateEvent(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pEvent
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
        [NativeFunction("vulkan", EntryPoint = "vkCreateExternalComputeQueueNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateExternalComputeQueueNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkExternalComputeQueueCreateInfoNV *")]
                ExternalComputeQueueCreateInfoNV* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkExternalComputeQueueNV *")]
                ExternalComputeQueueNVHandle* pExternalQueue
        ) =>
            Underlying.Value!.CreateExternalComputeQueueNV(
                device,
                pCreateInfo,
                pAllocator,
                pExternalQueue
            );

        [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateExternalComputeQueueNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateExternalComputeQueueNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkExternalComputeQueueCreateInfoNV *")]
                Ref<ExternalComputeQueueCreateInfoNV> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkExternalComputeQueueNV *")]
                Ref<ExternalComputeQueueNVHandle> pExternalQueue
        )
        {
            fixed (ExternalComputeQueueNVHandle* __dsl_pExternalQueue = pExternalQueue)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ExternalComputeQueueCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateExternalComputeQueueNV(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pExternalQueue
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateFence")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateFence(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkFenceCreateInfo *")] FenceCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkFence *")] FenceHandle* pFence
        ) => Underlying.Value!.CreateFence(device, pCreateInfo, pAllocator, pFence);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateFence")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateFence(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkFenceCreateInfo *")] Ref<FenceCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkFence *")] Ref<FenceHandle> pFence
        )
        {
            fixed (FenceHandle* __dsl_pFence = pFence)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (FenceCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateFence(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pFence
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateFramebuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateFramebuffer(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkFramebufferCreateInfo *")] FramebufferCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkFramebuffer *")] FramebufferHandle* pFramebuffer
        ) => Underlying.Value!.CreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateFramebuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateFramebuffer(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkFramebufferCreateInfo *")]
                Ref<FramebufferCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkFramebuffer *")] Ref<FramebufferHandle> pFramebuffer
        )
        {
            fixed (FramebufferHandle* __dsl_pFramebuffer = pFramebuffer)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (FramebufferCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateFramebuffer(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pFramebuffer
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateGraphicsPipelines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateGraphicsPipelines(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkGraphicsPipelineCreateInfo *")]
                GraphicsPipelineCreateInfo* pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
        ) =>
            Underlying.Value!.CreateGraphicsPipelines(
                device,
                pipelineCache,
                createInfoCount,
                pCreateInfos,
                pAllocator,
                pPipelines
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateGraphicsPipelines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateGraphicsPipelines(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkGraphicsPipelineCreateInfo *")]
                Ref<GraphicsPipelineCreateInfo> pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
        )
        {
            fixed (PipelineHandle* __dsl_pPipelines = pPipelines)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (GraphicsPipelineCreateInfo* __dsl_pCreateInfos = pCreateInfos)
            {
                return (Result)CreateGraphicsPipelines(
                    device,
                    pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_headless_surface"],
            ImpliesSets = ["VK_KHR_surface"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateHeadlessSurfaceEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateHeadlessSurfaceEXT(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("const VkHeadlessSurfaceCreateInfoEXT *")]
                HeadlessSurfaceCreateInfoEXT* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSurfaceKHR *")] SurfaceKHRHandle* pSurface
        ) =>
            Underlying.Value!.CreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_headless_surface"],
            ImpliesSets = ["VK_KHR_surface"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateHeadlessSurfaceEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateHeadlessSurfaceEXT(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("const VkHeadlessSurfaceCreateInfoEXT *")]
                Ref<HeadlessSurfaceCreateInfoEXT> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSurfaceKHR *")] Ref<SurfaceKHRHandle> pSurface
        )
        {
            fixed (SurfaceKHRHandle* __dsl_pSurface = pSurface)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (HeadlessSurfaceCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateHeadlessSurfaceEXT(
                    instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSurface
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateImage(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageCreateInfo *")] ImageCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkImage *")] ImageHandle* pImage
        ) => Underlying.Value!.CreateImage(device, pCreateInfo, pAllocator, pImage);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateImage(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageCreateInfo *")] Ref<ImageCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkImage *")] Ref<ImageHandle> pImage
        )
        {
            fixed (ImageHandle* __dsl_pImage = pImage)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ImageCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateImage(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pImage
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateImageView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateImageView(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageViewCreateInfo *")] ImageViewCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkImageView *")] ImageViewHandle* pView
        ) => Underlying.Value!.CreateImageView(device, pCreateInfo, pAllocator, pView);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateImageView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateImageView(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageViewCreateInfo *")] Ref<ImageViewCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkImageView *")] Ref<ImageViewHandle> pView
        )
        {
            fixed (ImageViewHandle* __dsl_pView = pView)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ImageViewCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateImageView(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pView
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateIndirectCommandsLayoutEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoEXT *")]
                IndirectCommandsLayoutCreateInfoEXT* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkIndirectCommandsLayoutEXT *")]
                IndirectCommandsLayoutEXTHandle* pIndirectCommandsLayout
        ) =>
            Underlying.Value!.CreateIndirectCommandsLayoutEXT(
                device,
                pCreateInfo,
                pAllocator,
                pIndirectCommandsLayout
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateIndirectCommandsLayoutEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoEXT *")]
                Ref<IndirectCommandsLayoutCreateInfoEXT> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkIndirectCommandsLayoutEXT *")]
                Ref<IndirectCommandsLayoutEXTHandle> pIndirectCommandsLayout
        )
        {
            fixed (
                IndirectCommandsLayoutEXTHandle* __dsl_pIndirectCommandsLayout =
                    pIndirectCommandsLayout
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (IndirectCommandsLayoutCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateIndirectCommandsLayoutEXT(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pIndirectCommandsLayout
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateIndirectCommandsLayoutNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoNV *")]
                IndirectCommandsLayoutCreateInfoNV* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkIndirectCommandsLayoutNV *")]
                IndirectCommandsLayoutNVHandle* pIndirectCommandsLayout
        ) =>
            Underlying.Value!.CreateIndirectCommandsLayoutNV(
                device,
                pCreateInfo,
                pAllocator,
                pIndirectCommandsLayout
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateIndirectCommandsLayoutNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoNV *")]
                Ref<IndirectCommandsLayoutCreateInfoNV> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkIndirectCommandsLayoutNV *")]
                Ref<IndirectCommandsLayoutNVHandle> pIndirectCommandsLayout
        )
        {
            fixed (
                IndirectCommandsLayoutNVHandle* __dsl_pIndirectCommandsLayout =
                    pIndirectCommandsLayout
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (IndirectCommandsLayoutCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateIndirectCommandsLayoutNV(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pIndirectCommandsLayout
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectExecutionSetEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateIndirectExecutionSetEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkIndirectExecutionSetCreateInfoEXT *")]
                IndirectExecutionSetCreateInfoEXT* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkIndirectExecutionSetEXT *")]
                IndirectExecutionSetEXTHandle* pIndirectExecutionSet
        ) =>
            Underlying.Value!.CreateIndirectExecutionSetEXT(
                device,
                pCreateInfo,
                pAllocator,
                pIndirectExecutionSet
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectExecutionSetEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateIndirectExecutionSetEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkIndirectExecutionSetCreateInfoEXT *")]
                Ref<IndirectExecutionSetCreateInfoEXT> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkIndirectExecutionSetEXT *")]
                Ref<IndirectExecutionSetEXTHandle> pIndirectExecutionSet
        )
        {
            fixed (
                IndirectExecutionSetEXTHandle* __dsl_pIndirectExecutionSet = pIndirectExecutionSet
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (IndirectExecutionSetCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateIndirectExecutionSetEXT(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pIndirectExecutionSet
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateInstance")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateInstance(
            [NativeTypeName("const VkInstanceCreateInfo *")] InstanceCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkInstance *")] InstanceHandle* pInstance
        ) => Underlying.Value!.CreateInstance(pCreateInfo, pAllocator, pInstance);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateInstance")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateInstance(
            [NativeTypeName("const VkInstanceCreateInfo *")] Ref<InstanceCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkInstance *")] Ref<InstanceHandle> pInstance
        )
        {
            fixed (InstanceHandle* __dsl_pInstance = pInstance)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (InstanceCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateInstance(__dsl_pCreateInfo, __dsl_pAllocator, __dsl_pInstance);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateMicromapEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMicromapCreateInfoEXT *")] MicromapCreateInfoEXT* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkMicromapEXT *")] MicromapEXTHandle* pMicromap
        ) => Underlying.Value!.CreateMicromapEXT(device, pCreateInfo, pAllocator, pMicromap);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateMicromapEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMicromapCreateInfoEXT *")]
                Ref<MicromapCreateInfoEXT> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkMicromapEXT *")] Ref<MicromapEXTHandle> pMicromap
        )
        {
            fixed (MicromapEXTHandle* __dsl_pMicromap = pMicromap)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (MicromapCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateMicromapEXT(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pMicromap
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateOpticalFlowSessionNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateOpticalFlowSessionNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkOpticalFlowSessionCreateInfoNV *")]
                OpticalFlowSessionCreateInfoNV* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkOpticalFlowSessionNV *")] OpticalFlowSessionNVHandle* pSession
        ) =>
            Underlying.Value!.CreateOpticalFlowSessionNV(device, pCreateInfo, pAllocator, pSession);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateOpticalFlowSessionNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateOpticalFlowSessionNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkOpticalFlowSessionCreateInfoNV *")]
                Ref<OpticalFlowSessionCreateInfoNV> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkOpticalFlowSessionNV *")] Ref<OpticalFlowSessionNVHandle> pSession
        )
        {
            fixed (OpticalFlowSessionNVHandle* __dsl_pSession = pSession)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (OpticalFlowSessionCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateOpticalFlowSessionNV(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSession
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineBinariesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePipelineBinariesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineBinaryCreateInfoKHR *")]
                PipelineBinaryCreateInfoKHR* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            PipelineBinaryHandlesInfoKHR* pBinaries
        ) =>
            Underlying.Value!.CreatePipelineBinariesKHR(device, pCreateInfo, pAllocator, pBinaries);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineBinariesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePipelineBinariesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineBinaryCreateInfoKHR *")]
                Ref<PipelineBinaryCreateInfoKHR> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            Ref<PipelineBinaryHandlesInfoKHR> pBinaries
        )
        {
            fixed (PipelineBinaryHandlesInfoKHR* __dsl_pBinaries = pBinaries)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PipelineBinaryCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreatePipelineBinariesKHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pBinaries
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineCache")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePipelineCache(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineCacheCreateInfo *")]
                PipelineCacheCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPipelineCache *")] PipelineCacheHandle* pPipelineCache
        ) => Underlying.Value!.CreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineCache")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePipelineCache(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineCacheCreateInfo *")]
                Ref<PipelineCacheCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPipelineCache *")] Ref<PipelineCacheHandle> pPipelineCache
        )
        {
            fixed (PipelineCacheHandle* __dsl_pPipelineCache = pPipelineCache)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PipelineCacheCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreatePipelineCache(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPipelineCache
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePipelineLayout(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineLayoutCreateInfo *")]
                PipelineLayoutCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPipelineLayout *")] PipelineLayoutHandle* pPipelineLayout
        ) =>
            Underlying.Value!.CreatePipelineLayout(
                device,
                pCreateInfo,
                pAllocator,
                pPipelineLayout
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePipelineLayout(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineLayoutCreateInfo *")]
                Ref<PipelineLayoutCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPipelineLayout *")] Ref<PipelineLayoutHandle> pPipelineLayout
        )
        {
            fixed (PipelineLayoutHandle* __dsl_pPipelineLayout = pPipelineLayout)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PipelineLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreatePipelineLayout(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPipelineLayout
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlot")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePrivateDataSlot(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
                PrivateDataSlotCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPrivateDataSlot *")] PrivateDataSlotHandle* pPrivateDataSlot
        ) =>
            Underlying.Value!.CreatePrivateDataSlot(
                device,
                pCreateInfo,
                pAllocator,
                pPrivateDataSlot
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlot")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePrivateDataSlot(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
                Ref<PrivateDataSlotCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPrivateDataSlot *")] Ref<PrivateDataSlotHandle> pPrivateDataSlot
        )
        {
            fixed (PrivateDataSlotHandle* __dsl_pPrivateDataSlot = pPrivateDataSlot)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PrivateDataSlotCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreatePrivateDataSlot(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPrivateDataSlot
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlotEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePrivateDataSlotEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
                PrivateDataSlotCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPrivateDataSlot *")] PrivateDataSlotHandle* pPrivateDataSlot
        ) =>
            Underlying.Value!.CreatePrivateDataSlotEXT(
                device,
                pCreateInfo,
                pAllocator,
                pPrivateDataSlot
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlotEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePrivateDataSlotEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
                Ref<PrivateDataSlotCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPrivateDataSlot *")] Ref<PrivateDataSlotHandle> pPrivateDataSlot
        )
        {
            fixed (PrivateDataSlotHandle* __dsl_pPrivateDataSlot = pPrivateDataSlot)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PrivateDataSlotCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreatePrivateDataSlotEXT(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPrivateDataSlot
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateQueryPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateQueryPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkQueryPoolCreateInfo *")] QueryPoolCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkQueryPool *")] QueryPoolHandle* pQueryPool
        ) => Underlying.Value!.CreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateQueryPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateQueryPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkQueryPoolCreateInfo *")] Ref<QueryPoolCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkQueryPool *")] Ref<QueryPoolHandle> pQueryPool
        )
        {
            fixed (QueryPoolHandle* __dsl_pQueryPool = pQueryPool)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (QueryPoolCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateQueryPool(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pQueryPool
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRayTracingPipelinesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkRayTracingPipelineCreateInfoKHR *")]
                RayTracingPipelineCreateInfoKHR* pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
        ) =>
            Underlying.Value!.CreateRayTracingPipelinesKHR(
                device,
                deferredOperation,
                pipelineCache,
                createInfoCount,
                pCreateInfos,
                pAllocator,
                pPipelines
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRayTracingPipelinesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkRayTracingPipelineCreateInfoKHR *")]
                Ref<RayTracingPipelineCreateInfoKHR> pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
        )
        {
            fixed (PipelineHandle* __dsl_pPipelines = pPipelines)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (RayTracingPipelineCreateInfoKHR* __dsl_pCreateInfos = pCreateInfos)
            {
                return (Result)CreateRayTracingPipelinesKHR(
                    device,
                    deferredOperation,
                    pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRayTracingPipelinesNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkRayTracingPipelineCreateInfoNV *")]
                RayTracingPipelineCreateInfoNV* pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
        ) =>
            Underlying.Value!.CreateRayTracingPipelinesNV(
                device,
                pipelineCache,
                createInfoCount,
                pCreateInfos,
                pAllocator,
                pPipelines
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRayTracingPipelinesNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkRayTracingPipelineCreateInfoNV *")]
                Ref<RayTracingPipelineCreateInfoNV> pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
        )
        {
            fixed (PipelineHandle* __dsl_pPipelines = pPipelines)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (RayTracingPipelineCreateInfoNV* __dsl_pCreateInfos = pCreateInfos)
            {
                return (Result)CreateRayTracingPipelinesNV(
                    device,
                    pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRenderPass(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkRenderPassCreateInfo *")] RenderPassCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkRenderPass *")] RenderPassHandle* pRenderPass
        ) => Underlying.Value!.CreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRenderPass(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkRenderPassCreateInfo *")]
                Ref<RenderPassCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkRenderPass *")] Ref<RenderPassHandle> pRenderPass
        )
        {
            fixed (RenderPassHandle* __dsl_pRenderPass = pRenderPass)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (RenderPassCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateRenderPass(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pRenderPass
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRenderPass2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkRenderPassCreateInfo2 *")] RenderPassCreateInfo2* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkRenderPass *")] RenderPassHandle* pRenderPass
        ) => Underlying.Value!.CreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRenderPass2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkRenderPassCreateInfo2 *")]
                Ref<RenderPassCreateInfo2> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkRenderPass *")] Ref<RenderPassHandle> pRenderPass
        )
        {
            fixed (RenderPassHandle* __dsl_pRenderPass = pRenderPass)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (RenderPassCreateInfo2* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateRenderPass2(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pRenderPass
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRenderPass2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkRenderPassCreateInfo2 *")] RenderPassCreateInfo2* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkRenderPass *")] RenderPassHandle* pRenderPass
        ) => Underlying.Value!.CreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRenderPass2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkRenderPassCreateInfo2 *")]
                Ref<RenderPassCreateInfo2> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkRenderPass *")] Ref<RenderPassHandle> pRenderPass
        )
        {
            fixed (RenderPassHandle* __dsl_pRenderPass = pRenderPass)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (RenderPassCreateInfo2* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateRenderPass2KHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pRenderPass
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSampler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSampler(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSamplerCreateInfo *")] SamplerCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSampler *")] SamplerHandle* pSampler
        ) => Underlying.Value!.CreateSampler(device, pCreateInfo, pAllocator, pSampler);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSampler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSampler(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSamplerCreateInfo *")] Ref<SamplerCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSampler *")] Ref<SamplerHandle> pSampler
        )
        {
            fixed (SamplerHandle* __dsl_pSampler = pSampler)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SamplerCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateSampler(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSampler
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSamplerYcbcrConversion(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
                SamplerYcbcrConversionCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSamplerYcbcrConversion *")]
                SamplerYcbcrConversionHandle* pYcbcrConversion
        ) =>
            Underlying.Value!.CreateSamplerYcbcrConversion(
                device,
                pCreateInfo,
                pAllocator,
                pYcbcrConversion
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSamplerYcbcrConversion(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
                Ref<SamplerYcbcrConversionCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSamplerYcbcrConversion *")]
                Ref<SamplerYcbcrConversionHandle> pYcbcrConversion
        )
        {
            fixed (SamplerYcbcrConversionHandle* __dsl_pYcbcrConversion = pYcbcrConversion)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SamplerYcbcrConversionCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateSamplerYcbcrConversion(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pYcbcrConversion
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_sampler_ycbcr_conversion"],
            ImpliesSets = [
                "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversionKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSamplerYcbcrConversionKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
                SamplerYcbcrConversionCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSamplerYcbcrConversion *")]
                SamplerYcbcrConversionHandle* pYcbcrConversion
        ) =>
            Underlying.Value!.CreateSamplerYcbcrConversionKHR(
                device,
                pCreateInfo,
                pAllocator,
                pYcbcrConversion
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_sampler_ycbcr_conversion"],
            ImpliesSets = [
                "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversionKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSamplerYcbcrConversionKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
                Ref<SamplerYcbcrConversionCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSamplerYcbcrConversion *")]
                Ref<SamplerYcbcrConversionHandle> pYcbcrConversion
        )
        {
            fixed (SamplerYcbcrConversionHandle* __dsl_pYcbcrConversion = pYcbcrConversion)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SamplerYcbcrConversionCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateSamplerYcbcrConversionKHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pYcbcrConversion
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSemaphore(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSemaphoreCreateInfo *")] SemaphoreCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSemaphore *")] SemaphoreHandle* pSemaphore
        ) => Underlying.Value!.CreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSemaphore(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSemaphoreCreateInfo *")] Ref<SemaphoreCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSemaphore *")] Ref<SemaphoreHandle> pSemaphore
        )
        {
            fixed (SemaphoreHandle* __dsl_pSemaphore = pSemaphore)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SemaphoreCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateSemaphore(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSemaphore
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateShaderModule")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateShaderModule(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkShaderModuleCreateInfo *")]
                ShaderModuleCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkShaderModule *")] ShaderModuleHandle* pShaderModule
        ) => Underlying.Value!.CreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateShaderModule")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateShaderModule(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkShaderModuleCreateInfo *")]
                Ref<ShaderModuleCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkShaderModule *")] Ref<ShaderModuleHandle> pShaderModule
        )
        {
            fixed (ShaderModuleHandle* __dsl_pShaderModule = pShaderModule)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ShaderModuleCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateShaderModule(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pShaderModule
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateShadersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateShadersEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkShaderCreateInfoEXT *")] ShaderCreateInfoEXT* pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkShaderEXT *")] ShaderEXTHandle* pShaders
        ) =>
            Underlying.Value!.CreateShadersEXT(
                device,
                createInfoCount,
                pCreateInfos,
                pAllocator,
                pShaders
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateShadersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateShadersEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkShaderCreateInfoEXT *")] Ref<ShaderCreateInfoEXT> pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkShaderEXT *")] Ref<ShaderEXTHandle> pShaders
        )
        {
            fixed (ShaderEXTHandle* __dsl_pShaders = pShaders)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ShaderCreateInfoEXT* __dsl_pCreateInfos = pCreateInfos)
            {
                return (Result)CreateShadersEXT(
                    device,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pShaders
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_display_swapchain"],
            ImpliesSets = ["VK_KHR_display", "VK_KHR_swapchain"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSharedSwapchainsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSharedSwapchainsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint swapchainCount,
            [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
                SwapchainCreateInfoKHR* pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSwapchainKHR *")] SwapchainKHRHandle* pSwapchains
        ) =>
            Underlying.Value!.CreateSharedSwapchainsKHR(
                device,
                swapchainCount,
                pCreateInfos,
                pAllocator,
                pSwapchains
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_display_swapchain"],
            ImpliesSets = ["VK_KHR_display", "VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSharedSwapchainsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSharedSwapchainsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint swapchainCount,
            [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
                Ref<SwapchainCreateInfoKHR> pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSwapchainKHR *")] Ref<SwapchainKHRHandle> pSwapchains
        )
        {
            fixed (SwapchainKHRHandle* __dsl_pSwapchains = pSwapchains)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SwapchainCreateInfoKHR* __dsl_pCreateInfos = pCreateInfos)
            {
                return (Result)CreateSharedSwapchainsKHR(
                    device,
                    swapchainCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pSwapchains
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSwapchainKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSwapchainKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
                SwapchainCreateInfoKHR* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSwapchainKHR *")] SwapchainKHRHandle* pSwapchain
        ) => Underlying.Value!.CreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSwapchainKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSwapchainKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
                Ref<SwapchainCreateInfoKHR> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSwapchainKHR *")] Ref<SwapchainKHRHandle> pSwapchain
        )
        {
            fixed (SwapchainKHRHandle* __dsl_pSwapchain = pSwapchain)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SwapchainCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateSwapchainKHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSwapchain
                );
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkCreateTensorARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateTensorARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkTensorCreateInfoARM *")] TensorCreateInfoARM* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkTensorARM *")] TensorARMHandle* pTensor
        ) => Underlying.Value!.CreateTensorARM(device, pCreateInfo, pAllocator, pTensor);

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateTensorARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateTensorARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkTensorCreateInfoARM *")] Ref<TensorCreateInfoARM> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkTensorARM *")] Ref<TensorARMHandle> pTensor
        )
        {
            fixed (TensorARMHandle* __dsl_pTensor = pTensor)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (TensorCreateInfoARM* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateTensorARM(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pTensor
                );
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkCreateTensorViewARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateTensorViewARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkTensorViewCreateInfoARM *")]
                TensorViewCreateInfoARM* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkTensorViewARM *")] TensorViewARMHandle* pView
        ) => Underlying.Value!.CreateTensorViewARM(device, pCreateInfo, pAllocator, pView);

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateTensorViewARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateTensorViewARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkTensorViewCreateInfoARM *")]
                Ref<TensorViewCreateInfoARM> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkTensorViewARM *")] Ref<TensorViewARMHandle> pView
        )
        {
            fixed (TensorViewARMHandle* __dsl_pView = pView)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (TensorViewCreateInfoARM* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateTensorViewARM(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pView
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        [NativeFunction("vulkan", EntryPoint = "vkCreateValidationCacheEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateValidationCacheEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkValidationCacheCreateInfoEXT *")]
                ValidationCacheCreateInfoEXT* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkValidationCacheEXT *")] ValidationCacheEXTHandle* pValidationCache
        ) =>
            Underlying.Value!.CreateValidationCacheEXT(
                device,
                pCreateInfo,
                pAllocator,
                pValidationCache
            );

        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateValidationCacheEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateValidationCacheEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkValidationCacheCreateInfoEXT *")]
                Ref<ValidationCacheCreateInfoEXT> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkValidationCacheEXT *")]
                Ref<ValidationCacheEXTHandle> pValidationCache
        )
        {
            fixed (ValidationCacheEXTHandle* __dsl_pValidationCache = pValidationCache)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ValidationCacheCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateValidationCacheEXT(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pValidationCache
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateVideoSessionKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkVideoSessionCreateInfoKHR *")]
                VideoSessionCreateInfoKHR* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkVideoSessionKHR *")] VideoSessionKHRHandle* pVideoSession
        ) =>
            Underlying.Value!.CreateVideoSessionKHR(device, pCreateInfo, pAllocator, pVideoSession);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateVideoSessionKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkVideoSessionCreateInfoKHR *")]
                Ref<VideoSessionCreateInfoKHR> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkVideoSessionKHR *")] Ref<VideoSessionKHRHandle> pVideoSession
        )
        {
            fixed (VideoSessionKHRHandle* __dsl_pVideoSession = pVideoSession)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (VideoSessionCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateVideoSessionKHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pVideoSession
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionParametersKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkVideoSessionParametersCreateInfoKHR *")]
                VideoSessionParametersCreateInfoKHR* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkVideoSessionParametersKHR *")]
                VideoSessionParametersKHRHandle* pVideoSessionParameters
        ) =>
            Underlying.Value!.CreateVideoSessionParametersKHR(
                device,
                pCreateInfo,
                pAllocator,
                pVideoSessionParameters
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionParametersKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkVideoSessionParametersCreateInfoKHR *")]
                Ref<VideoSessionParametersCreateInfoKHR> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkVideoSessionParametersKHR *")]
                Ref<VideoSessionParametersKHRHandle> pVideoSessionParameters
        )
        {
            fixed (
                VideoSessionParametersKHRHandle* __dsl_pVideoSessionParameters =
                    pVideoSessionParameters
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (VideoSessionParametersCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateVideoSessionParametersKHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pVideoSessionParameters
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectNameEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result DebugMarkerSetObjectNameEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDebugMarkerObjectNameInfoEXT *")]
                DebugMarkerObjectNameInfoEXT* pNameInfo
        ) => Underlying.Value!.DebugMarkerSetObjectNameEXT(device, pNameInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectNameEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result DebugMarkerSetObjectNameEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDebugMarkerObjectNameInfoEXT *")]
                Ref<DebugMarkerObjectNameInfoEXT> pNameInfo
        )
        {
            fixed (DebugMarkerObjectNameInfoEXT* __dsl_pNameInfo = pNameInfo)
            {
                return (Result)DebugMarkerSetObjectNameEXT(device, __dsl_pNameInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectTagEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result DebugMarkerSetObjectTagEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDebugMarkerObjectTagInfoEXT *")]
                DebugMarkerObjectTagInfoEXT* pTagInfo
        ) => Underlying.Value!.DebugMarkerSetObjectTagEXT(device, pTagInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectTagEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result DebugMarkerSetObjectTagEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDebugMarkerObjectTagInfoEXT *")]
                Ref<DebugMarkerObjectTagInfoEXT> pTagInfo
        )
        {
            fixed (DebugMarkerObjectTagInfoEXT* __dsl_pTagInfo = pTagInfo)
            {
                return (Result)DebugMarkerSetObjectTagEXT(device, __dsl_pTagInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
        [NativeFunction("vulkan", EntryPoint = "vkDebugReportMessageEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DebugReportMessageEXT(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("VkDebugReportFlagsEXT")] DebugReportFlagsEXT flags,
            DebugReportObjectTypeEXT objectType,
            [NativeTypeName("uint64_t")] ulong @object,
            [NativeTypeName("size_t")] nuint location,
            [NativeTypeName("int32_t")] int messageCode,
            [NativeTypeName("const char *")] sbyte* pLayerPrefix,
            [NativeTypeName("const char *")] sbyte* pMessage
        ) =>
            Underlying.Value!.DebugReportMessageEXT(
                instance,
                flags,
                objectType,
                @object,
                location,
                messageCode,
                pLayerPrefix,
                pMessage
            );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDebugReportMessageEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DebugReportMessageEXT(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("VkDebugReportFlagsEXT")] DebugReportFlagsEXT flags,
            DebugReportObjectTypeEXT objectType,
            [NativeTypeName("uint64_t")] ulong @object,
            [NativeTypeName("size_t")] nuint location,
            [NativeTypeName("int32_t")] int messageCode,
            [NativeTypeName("const char *")] Ref<sbyte> pLayerPrefix,
            [NativeTypeName("const char *")] Ref<sbyte> pMessage
        )
        {
            fixed (sbyte* __dsl_pMessage = pMessage)
            fixed (sbyte* __dsl_pLayerPrefix = pLayerPrefix)
            {
                DebugReportMessageEXT(
                    instance,
                    flags,
                    objectType,
                    @object,
                    location,
                    messageCode,
                    __dsl_pLayerPrefix,
                    __dsl_pMessage
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        [NativeFunction("vulkan", EntryPoint = "vkDeferredOperationJoinKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result DeferredOperationJoinKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation
        ) => Underlying.Value!.DeferredOperationJoinKHR(device, operation);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkAccelerationStructureKHR")]
                AccelerationStructureKHRHandle accelerationStructure,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) =>
            Underlying.Value!.DestroyAccelerationStructureKHR(
                device,
                accelerationStructure,
                pAllocator
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkAccelerationStructureKHR")]
                AccelerationStructureKHRHandle accelerationStructure,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyAccelerationStructureKHR(device, accelerationStructure, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyAccelerationStructureNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkAccelerationStructureNV")]
                AccelerationStructureNVHandle accelerationStructure,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) =>
            Underlying.Value!.DestroyAccelerationStructureNV(
                device,
                accelerationStructure,
                pAllocator
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyAccelerationStructureNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkAccelerationStructureNV")]
                AccelerationStructureNVHandle accelerationStructure,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyAccelerationStructureNV(device, accelerationStructure, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyBuffer(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyBuffer(device, buffer, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyBuffer(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyBuffer(device, buffer, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyBufferView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyBufferView(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkBufferView")] BufferViewHandle bufferView,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyBufferView(device, bufferView, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyBufferView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyBufferView(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkBufferView")] BufferViewHandle bufferView,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyBufferView(device, bufferView, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyCommandPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCommandPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyCommandPool(device, commandPool, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyCommandPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCommandPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyCommandPool(device, commandPool, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyCuFunctionNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCuFunctionNVX(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkCuFunctionNVX")] CuFunctionNVXHandle function,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyCuFunctionNVX(device, function, pAllocator);

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyCuFunctionNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCuFunctionNVX(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkCuFunctionNVX")] CuFunctionNVXHandle function,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyCuFunctionNVX(device, function, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyCuModuleNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCuModuleNVX(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkCuModuleNVX")] CuModuleNVXHandle module,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyCuModuleNVX(device, module, pAllocator);

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyCuModuleNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCuModuleNVX(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkCuModuleNVX")] CuModuleNVXHandle module,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyCuModuleNVX(device, module, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDataGraphPipelineSessionARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDataGraphPipelineSessionARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDataGraphPipelineSessionARM")]
                DataGraphPipelineSessionARMHandle session,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyDataGraphPipelineSessionARM(device, session, pAllocator);

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDataGraphPipelineSessionARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDataGraphPipelineSessionARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDataGraphPipelineSessionARM")]
                DataGraphPipelineSessionARMHandle session,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyDataGraphPipelineSessionARM(device, session, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugReportCallbackEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDebugReportCallbackEXT(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("VkDebugReportCallbackEXT")] DebugReportCallbackEXTHandle callback,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyDebugReportCallbackEXT(instance, callback, pAllocator);

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugReportCallbackEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDebugReportCallbackEXT(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("VkDebugReportCallbackEXT")] DebugReportCallbackEXTHandle callback,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyDebugReportCallbackEXT(instance, callback, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugUtilsMessengerEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDebugUtilsMessengerEXT(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("VkDebugUtilsMessengerEXT")] DebugUtilsMessengerEXTHandle messenger,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugUtilsMessengerEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDebugUtilsMessengerEXT(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("VkDebugUtilsMessengerEXT")] DebugUtilsMessengerEXTHandle messenger,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyDebugUtilsMessengerEXT(instance, messenger, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDeferredOperationKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDeferredOperationKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyDeferredOperationKHR(device, operation, pAllocator);

        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDeferredOperationKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDeferredOperationKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyDeferredOperationKHR(device, operation, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDescriptorPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyDescriptorPool(device, descriptorPool, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDescriptorPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyDescriptorPool(device, descriptorPool, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorSetLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDescriptorSetLayout(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle descriptorSetLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorSetLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDescriptorSetLayout(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle descriptorSetLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyDescriptorSetLayout(device, descriptorSetLayout, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDescriptorUpdateTemplate(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) =>
            Underlying.Value!.DestroyDescriptorUpdateTemplate(
                device,
                descriptorUpdateTemplate,
                pAllocator
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDescriptorUpdateTemplate(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDescriptorUpdateTemplateKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) =>
            Underlying.Value!.DestroyDescriptorUpdateTemplateKHR(
                device,
                descriptorUpdateTemplate,
                pAllocator
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDescriptorUpdateTemplateKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyDescriptorUpdateTemplateKHR(
                    device,
                    descriptorUpdateTemplate,
                    __dsl_pAllocator
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDevice(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyDevice(device, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDevice(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyDevice(device, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyEvent(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkEvent")] EventHandle @event,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyEvent(device, @event, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyEvent(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkEvent")] EventHandle @event,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyEvent(device, @event, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyExternalComputeQueueNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyExternalComputeQueueNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle externalQueue,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyExternalComputeQueueNV(device, externalQueue, pAllocator);

        [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyExternalComputeQueueNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyExternalComputeQueueNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle externalQueue,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyExternalComputeQueueNV(device, externalQueue, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyFence")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyFence(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkFence")] FenceHandle fence,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyFence(device, fence, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyFence")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyFence(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkFence")] FenceHandle fence,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyFence(device, fence, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyFramebuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyFramebuffer(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkFramebuffer")] FramebufferHandle framebuffer,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyFramebuffer(device, framebuffer, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyFramebuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyFramebuffer(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkFramebuffer")] FramebufferHandle framebuffer,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyFramebuffer(device, framebuffer, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyImage(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyImage(device, image, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyImage(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyImage(device, image, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyImageView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyImageView(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImageView")] ImageViewHandle imageView,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyImageView(device, imageView, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyImageView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyImageView(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImageView")] ImageViewHandle imageView,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyImageView(device, imageView, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyIndirectCommandsLayoutEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkIndirectCommandsLayoutEXT")]
                IndirectCommandsLayoutEXTHandle indirectCommandsLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) =>
            Underlying.Value!.DestroyIndirectCommandsLayoutEXT(
                device,
                indirectCommandsLayout,
                pAllocator
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyIndirectCommandsLayoutEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkIndirectCommandsLayoutEXT")]
                IndirectCommandsLayoutEXTHandle indirectCommandsLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyIndirectCommandsLayoutEXT(device, indirectCommandsLayout, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyIndirectCommandsLayoutNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkIndirectCommandsLayoutNV")]
                IndirectCommandsLayoutNVHandle indirectCommandsLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) =>
            Underlying.Value!.DestroyIndirectCommandsLayoutNV(
                device,
                indirectCommandsLayout,
                pAllocator
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyIndirectCommandsLayoutNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkIndirectCommandsLayoutNV")]
                IndirectCommandsLayoutNVHandle indirectCommandsLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectExecutionSetEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyIndirectExecutionSetEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                IndirectExecutionSetEXTHandle indirectExecutionSet,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) =>
            Underlying.Value!.DestroyIndirectExecutionSetEXT(
                device,
                indirectExecutionSet,
                pAllocator
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectExecutionSetEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyIndirectExecutionSetEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                IndirectExecutionSetEXTHandle indirectExecutionSet,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyIndirectExecutionSetEXT(device, indirectExecutionSet, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyInstance")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyInstance(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyInstance(instance, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyInstance")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyInstance(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyInstance(instance, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyMicromapEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkMicromapEXT")] MicromapEXTHandle micromap,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyMicromapEXT(device, micromap, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyMicromapEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkMicromapEXT")] MicromapEXTHandle micromap,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyMicromapEXT(device, micromap, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyOpticalFlowSessionNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyOpticalFlowSessionNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyOpticalFlowSessionNV(device, session, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyOpticalFlowSessionNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyOpticalFlowSessionNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyOpticalFlowSessionNV(device, session, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPipeline")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPipeline(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyPipeline(device, pipeline, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPipeline")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPipeline(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyPipeline(device, pipeline, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineBinaryKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPipelineBinaryKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineBinaryKHR")] PipelineBinaryKHRHandle pipelineBinary,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyPipelineBinaryKHR(device, pipelineBinary, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineBinaryKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPipelineBinaryKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineBinaryKHR")] PipelineBinaryKHRHandle pipelineBinary,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyPipelineBinaryKHR(device, pipelineBinary, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineCache")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPipelineCache(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyPipelineCache(device, pipelineCache, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineCache")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPipelineCache(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyPipelineCache(device, pipelineCache, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPipelineLayout(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle pipelineLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyPipelineLayout(device, pipelineLayout, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPipelineLayout(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle pipelineLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyPipelineLayout(device, pipelineLayout, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlot")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPrivateDataSlot(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyPrivateDataSlot(device, privateDataSlot, pAllocator);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlot")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPrivateDataSlot(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyPrivateDataSlot(device, privateDataSlot, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlotEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPrivateDataSlotEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlotEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPrivateDataSlotEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyPrivateDataSlotEXT(device, privateDataSlot, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyQueryPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyQueryPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyQueryPool(device, queryPool, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyQueryPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyQueryPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyQueryPool(device, queryPool, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyRenderPass")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyRenderPass(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkRenderPass")] RenderPassHandle renderPass,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyRenderPass(device, renderPass, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyRenderPass")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyRenderPass(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkRenderPass")] RenderPassHandle renderPass,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyRenderPass(device, renderPass, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySampler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySampler(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSampler")] SamplerHandle sampler,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroySampler(device, sampler, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySampler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySampler(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSampler")] SamplerHandle sampler,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroySampler(device, sampler, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySamplerYcbcrConversion(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSamplerYcbcrConversion")]
                SamplerYcbcrConversionHandle ycbcrConversion,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySamplerYcbcrConversion(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSamplerYcbcrConversion")]
                SamplerYcbcrConversionHandle ycbcrConversion,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroySamplerYcbcrConversion(device, ycbcrConversion, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_sampler_ycbcr_conversion"],
            ImpliesSets = [
                "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversionKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySamplerYcbcrConversionKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSamplerYcbcrConversion")]
                SamplerYcbcrConversionHandle ycbcrConversion,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) =>
            Underlying.Value!.DestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_sampler_ycbcr_conversion"],
            ImpliesSets = [
                "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversionKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySamplerYcbcrConversionKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSamplerYcbcrConversion")]
                SamplerYcbcrConversionHandle ycbcrConversion,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroySamplerYcbcrConversionKHR(device, ycbcrConversion, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySemaphore(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroySemaphore(device, semaphore, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySemaphore(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroySemaphore(device, semaphore, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyShaderEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkShaderEXT")] ShaderEXTHandle shader,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyShaderEXT(device, shader, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyShaderEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkShaderEXT")] ShaderEXTHandle shader,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyShaderEXT(device, shader, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderModule")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyShaderModule(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkShaderModule")] ShaderModuleHandle shaderModule,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyShaderModule(device, shaderModule, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderModule")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyShaderModule(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkShaderModule")] ShaderModuleHandle shaderModule,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyShaderModule(device, shaderModule, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySurfaceKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySurfaceKHR(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroySurfaceKHR(instance, surface, pAllocator);

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySurfaceKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySurfaceKHR(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroySurfaceKHR(instance, surface, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySwapchainKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySwapchainKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroySwapchainKHR(device, swapchain, pAllocator);

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySwapchainKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySwapchainKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroySwapchainKHR(device, swapchain, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyTensorARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyTensorARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkTensorARM")] TensorARMHandle tensor,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyTensorARM(device, tensor, pAllocator);

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyTensorARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyTensorARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkTensorARM")] TensorARMHandle tensor,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyTensorARM(device, tensor, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyTensorViewARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyTensorViewARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkTensorViewARM")] TensorViewARMHandle tensorView,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyTensorViewARM(device, tensorView, pAllocator);

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyTensorViewARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyTensorViewARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkTensorViewARM")] TensorViewARMHandle tensorView,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyTensorViewARM(device, tensorView, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyValidationCacheEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyValidationCacheEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle validationCache,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyValidationCacheEXT(device, validationCache, pAllocator);

        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyValidationCacheEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyValidationCacheEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle validationCache,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyValidationCacheEXT(device, validationCache, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyVideoSessionKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.DestroyVideoSessionKHR(device, videoSession, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyVideoSessionKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyVideoSessionKHR(device, videoSession, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionParametersKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkVideoSessionParametersKHR")]
                VideoSessionParametersKHRHandle videoSessionParameters,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) =>
            Underlying.Value!.DestroyVideoSessionParametersKHR(
                device,
                videoSessionParameters,
                pAllocator
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionParametersKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkVideoSessionParametersKHR")]
                VideoSessionParametersKHRHandle videoSessionParameters,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                DestroyVideoSessionParametersKHR(device, videoSessionParameters, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDeviceWaitIdle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result DeviceWaitIdle([NativeTypeName("VkDevice")] DeviceHandle device) =>
            Underlying.Value!.DeviceWaitIdle(device);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkDisplayPowerControlEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result DisplayPowerControlEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
            [NativeTypeName("const VkDisplayPowerInfoEXT *")] DisplayPowerInfoEXT* pDisplayPowerInfo
        ) => Underlying.Value!.DisplayPowerControlEXT(device, display, pDisplayPowerInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDisplayPowerControlEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result DisplayPowerControlEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
            [NativeTypeName("const VkDisplayPowerInfoEXT *")]
                Ref<DisplayPowerInfoEXT> pDisplayPowerInfo
        )
        {
            fixed (DisplayPowerInfoEXT* __dsl_pDisplayPowerInfo = pDisplayPowerInfo)
            {
                return (Result)DisplayPowerControlEXT(device, display, __dsl_pDisplayPowerInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkEndCommandBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EndCommandBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
        ) => Underlying.Value!.EndCommandBuffer(commandBuffer);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceExtensionProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateDeviceExtensionProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const char *")] sbyte* pLayerName,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            ExtensionProperties* pProperties
        ) =>
            Underlying.Value!.EnumerateDeviceExtensionProperties(
                physicalDevice,
                pLayerName,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceExtensionProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateDeviceExtensionProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const char *")] Ref<sbyte> pLayerName,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<ExtensionProperties> pProperties
        )
        {
            fixed (ExtensionProperties* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (sbyte* __dsl_pLayerName = pLayerName)
            {
                return (Result)EnumerateDeviceExtensionProperties(
                    physicalDevice,
                    __dsl_pLayerName,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceLayerProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateDeviceLayerProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            LayerProperties* pProperties
        ) =>
            Underlying.Value!.EnumerateDeviceLayerProperties(
                physicalDevice,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceLayerProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateDeviceLayerProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<LayerProperties> pProperties
        )
        {
            fixed (LayerProperties* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            {
                return (Result)EnumerateDeviceLayerProperties(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceExtensionProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateInstanceExtensionProperties(
            [NativeTypeName("const char *")] sbyte* pLayerName,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            ExtensionProperties* pProperties
        ) =>
            Underlying.Value!.EnumerateInstanceExtensionProperties(
                pLayerName,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceExtensionProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateInstanceExtensionProperties(
            [NativeTypeName("const char *")] Ref<sbyte> pLayerName,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<ExtensionProperties> pProperties
        )
        {
            fixed (ExtensionProperties* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (sbyte* __dsl_pLayerName = pLayerName)
            {
                return (Result)EnumerateInstanceExtensionProperties(
                    __dsl_pLayerName,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceLayerProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateInstanceLayerProperties(
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            LayerProperties* pProperties
        ) => Underlying.Value!.EnumerateInstanceLayerProperties(pPropertyCount, pProperties);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceLayerProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateInstanceLayerProperties(
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<LayerProperties> pProperties
        )
        {
            fixed (LayerProperties* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            {
                return (Result)EnumerateInstanceLayerProperties(
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateInstanceVersion(
            [NativeTypeName("uint32_t *")] uint* pApiVersion
        ) => Underlying.Value!.EnumerateInstanceVersion(pApiVersion);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateInstanceVersion(
            [NativeTypeName("uint32_t *")] Ref<uint> pApiVersion
        )
        {
            fixed (uint* __dsl_pApiVersion = pApiVersion)
            {
                return (Result)EnumerateInstanceVersion(__dsl_pApiVersion);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroups")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumeratePhysicalDeviceGroups(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceGroupCount,
            PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
        ) =>
            Underlying.Value!.EnumeratePhysicalDeviceGroups(
                instance,
                pPhysicalDeviceGroupCount,
                pPhysicalDeviceGroupProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroups")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumeratePhysicalDeviceGroups(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceGroupCount,
            Ref<PhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties
        )
        {
            fixed (
                PhysicalDeviceGroupProperties* __dsl_pPhysicalDeviceGroupProperties =
                    pPhysicalDeviceGroupProperties
            )
            fixed (uint* __dsl_pPhysicalDeviceGroupCount = pPhysicalDeviceGroupCount)
            {
                return (Result)EnumeratePhysicalDeviceGroups(
                    instance,
                    __dsl_pPhysicalDeviceGroupCount,
                    __dsl_pPhysicalDeviceGroupProperties
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
        [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroupsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumeratePhysicalDeviceGroupsKHR(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceGroupCount,
            PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
        ) =>
            Underlying.Value!.EnumeratePhysicalDeviceGroupsKHR(
                instance,
                pPhysicalDeviceGroupCount,
                pPhysicalDeviceGroupProperties
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroupsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumeratePhysicalDeviceGroupsKHR(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceGroupCount,
            Ref<PhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties
        )
        {
            fixed (
                PhysicalDeviceGroupProperties* __dsl_pPhysicalDeviceGroupProperties =
                    pPhysicalDeviceGroupProperties
            )
            fixed (uint* __dsl_pPhysicalDeviceGroupCount = pPhysicalDeviceGroupCount)
            {
                return (Result)EnumeratePhysicalDeviceGroupsKHR(
                    instance,
                    __dsl_pPhysicalDeviceGroupCount,
                    __dsl_pPhysicalDeviceGroupProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t")] uint queueFamilyIndex,
            [NativeTypeName("uint32_t *")] uint* pCounterCount,
            PerformanceCounterKHR* pCounters,
            PerformanceCounterDescriptionKHR* pCounterDescriptions
        ) =>
            Underlying.Value!.EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
                physicalDevice,
                queueFamilyIndex,
                pCounterCount,
                pCounters,
                pCounterDescriptions
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t")] uint queueFamilyIndex,
            [NativeTypeName("uint32_t *")] Ref<uint> pCounterCount,
            Ref<PerformanceCounterKHR> pCounters,
            Ref<PerformanceCounterDescriptionKHR> pCounterDescriptions
        )
        {
            fixed (
                PerformanceCounterDescriptionKHR* __dsl_pCounterDescriptions = pCounterDescriptions
            )
            fixed (PerformanceCounterKHR* __dsl_pCounters = pCounters)
            fixed (uint* __dsl_pCounterCount = pCounterCount)
            {
                return (Result)EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
                    physicalDevice,
                    queueFamilyIndex,
                    __dsl_pCounterCount,
                    __dsl_pCounters,
                    __dsl_pCounterDescriptions
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumeratePhysicalDevices(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceCount,
            [NativeTypeName("VkPhysicalDevice *")] PhysicalDeviceHandle* pPhysicalDevices
        ) =>
            Underlying.Value!.EnumeratePhysicalDevices(
                instance,
                pPhysicalDeviceCount,
                pPhysicalDevices
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumeratePhysicalDevices(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceCount,
            [NativeTypeName("VkPhysicalDevice *")] Ref<PhysicalDeviceHandle> pPhysicalDevices
        )
        {
            fixed (PhysicalDeviceHandle* __dsl_pPhysicalDevices = pPhysicalDevices)
            fixed (uint* __dsl_pPhysicalDeviceCount = pPhysicalDeviceCount)
            {
                return (Result)EnumeratePhysicalDevices(
                    instance,
                    __dsl_pPhysicalDeviceCount,
                    __dsl_pPhysicalDevices
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkFlushMappedMemoryRanges")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result FlushMappedMemoryRanges(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint memoryRangeCount,
            [NativeTypeName("const VkMappedMemoryRange *")] MappedMemoryRange* pMemoryRanges
        ) => Underlying.Value!.FlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkFlushMappedMemoryRanges")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result FlushMappedMemoryRanges(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint memoryRangeCount,
            [NativeTypeName("const VkMappedMemoryRange *")] Ref<MappedMemoryRange> pMemoryRanges
        )
        {
            fixed (MappedMemoryRange* __dsl_pMemoryRanges = pMemoryRanges)
            {
                return (Result)FlushMappedMemoryRanges(
                    device,
                    memoryRangeCount,
                    __dsl_pMemoryRanges
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkFreeCommandBuffers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FreeCommandBuffer(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
            [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle pCommandBuffers
        ) => Underlying.Value!.FreeCommandBuffer(device, commandPool, pCommandBuffers);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkFreeCommandBuffers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FreeCommandBuffers(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
            [NativeTypeName("uint32_t")] uint commandBufferCount,
            [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle* pCommandBuffers
        ) =>
            Underlying.Value!.FreeCommandBuffers(
                device,
                commandPool,
                commandBufferCount,
                pCommandBuffers
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkFreeCommandBuffers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FreeCommandBuffers(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
            [NativeTypeName("uint32_t")] uint commandBufferCount,
            [NativeTypeName("const VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
        )
        {
            fixed (CommandBufferHandle* __dsl_pCommandBuffers = pCommandBuffers)
            {
                FreeCommandBuffers(device, commandPool, commandBufferCount, __dsl_pCommandBuffers);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkFreeDescriptorSets")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result FreeDescriptorSets(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
            [NativeTypeName("uint32_t")] uint descriptorSetCount,
            [NativeTypeName("const VkDescriptorSet *")] DescriptorSetHandle* pDescriptorSets
        ) =>
            Underlying.Value!.FreeDescriptorSets(
                device,
                descriptorPool,
                descriptorSetCount,
                pDescriptorSets
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkFreeDescriptorSets")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result FreeDescriptorSets(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
            [NativeTypeName("uint32_t")] uint descriptorSetCount,
            [NativeTypeName("const VkDescriptorSet *")] Ref<DescriptorSetHandle> pDescriptorSets
        )
        {
            fixed (DescriptorSetHandle* __dsl_pDescriptorSets = pDescriptorSets)
            {
                return (Result)FreeDescriptorSets(
                    device,
                    descriptorPool,
                    descriptorSetCount,
                    __dsl_pDescriptorSets
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkFreeMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FreeMemory(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.FreeMemory(device, memory, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkFreeMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FreeMemory(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            {
                FreeMemory(device, memory, __dsl_pAllocator);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureBuildSizesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetAccelerationStructureBuildSizesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            AccelerationStructureBuildTypeKHR buildType,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                AccelerationStructureBuildGeometryInfoKHR* pBuildInfo,
            [NativeTypeName("const uint32_t *")] uint* pMaxPrimitiveCounts,
            AccelerationStructureBuildSizesInfoKHR* pSizeInfo
        ) =>
            Underlying.Value!.GetAccelerationStructureBuildSizesKHR(
                device,
                buildType,
                pBuildInfo,
                pMaxPrimitiveCounts,
                pSizeInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureBuildSizesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetAccelerationStructureBuildSizesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            AccelerationStructureBuildTypeKHR buildType,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                Ref<AccelerationStructureBuildGeometryInfoKHR> pBuildInfo,
            [NativeTypeName("const uint32_t *")] Ref<uint> pMaxPrimitiveCounts,
            Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
        )
        {
            fixed (AccelerationStructureBuildSizesInfoKHR* __dsl_pSizeInfo = pSizeInfo)
            fixed (uint* __dsl_pMaxPrimitiveCounts = pMaxPrimitiveCounts)
            fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pBuildInfo = pBuildInfo)
            {
                GetAccelerationStructureBuildSizesKHR(
                    device,
                    buildType,
                    __dsl_pBuildInfo,
                    __dsl_pMaxPrimitiveCounts,
                    __dsl_pSizeInfo
                );
            }
        }

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureDeviceAddressKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetAccelerationStructureDeviceAddressKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAccelerationStructureDeviceAddressInfoKHR *")]
                AccelerationStructureDeviceAddressInfoKHR* pInfo
        ) => Underlying.Value!.GetAccelerationStructureDeviceAddressKHR(device, pInfo);

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureDeviceAddressKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetAccelerationStructureDeviceAddressKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAccelerationStructureDeviceAddressInfoKHR *")]
                Ref<AccelerationStructureDeviceAddressInfoKHR> pInfo
        )
        {
            fixed (AccelerationStructureDeviceAddressInfoKHR* __dsl_pInfo = pInfo)
            {
                return (ulong)GetAccelerationStructureDeviceAddressKHR(device, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureHandleNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetAccelerationStructureHandleNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkAccelerationStructureNV")]
                AccelerationStructureNVHandle accelerationStructure,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pData
        ) =>
            Underlying.Value!.GetAccelerationStructureHandleNV(
                device,
                accelerationStructure,
                dataSize,
                pData
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureHandleNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetAccelerationStructureHandleNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkAccelerationStructureNV")]
                AccelerationStructureNVHandle accelerationStructure,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            {
                return (Result)GetAccelerationStructureHandleNV(
                    device,
                    accelerationStructure,
                    dataSize,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureMemoryRequirementsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetAccelerationStructureMemoryRequirementsNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAccelerationStructureMemoryRequirementsInfoNV *")]
                AccelerationStructureMemoryRequirementsInfoNV* pInfo,
            [NativeTypeName("VkMemoryRequirements2KHR *")] MemoryRequirements2* pMemoryRequirements
        ) =>
            Underlying.Value!.GetAccelerationStructureMemoryRequirementsNV(
                device,
                pInfo,
                pMemoryRequirements
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureMemoryRequirementsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetAccelerationStructureMemoryRequirementsNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAccelerationStructureMemoryRequirementsInfoNV *")]
                Ref<AccelerationStructureMemoryRequirementsInfoNV> pInfo,
            [NativeTypeName("VkMemoryRequirements2KHR *")]
                Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (AccelerationStructureMemoryRequirementsInfoNV* __dsl_pInfo = pInfo)
            {
                GetAccelerationStructureMemoryRequirementsNV(
                    device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_EXT_descriptor_buffer+VK_KHR_acceleration_structure",
                "VK_EXT_descriptor_buffer+VK_NV_ray_tracing",
            ],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAccelerationStructureCaptureDescriptorDataInfoEXT *")]
                AccelerationStructureCaptureDescriptorDataInfoEXT* pInfo,
            void* pData
        ) =>
            Underlying.Value!.GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
                device,
                pInfo,
                pData
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_EXT_descriptor_buffer+VK_KHR_acceleration_structure",
                "VK_EXT_descriptor_buffer+VK_NV_ray_tracing",
            ],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAccelerationStructureCaptureDescriptorDataInfoEXT *")]
                Ref<AccelerationStructureCaptureDescriptorDataInfoEXT> pInfo,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (AccelerationStructureCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
            {
                return (Result)GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
                    device,
                    __dsl_pInfo,
                    __dsl_pData
                );
            }
        }

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferDeviceAddress(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
        ) => Underlying.Value!.GetBufferDeviceAddress(device, pInfo);

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferDeviceAddress(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
        )
        {
            fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
            {
                return (ulong)GetBufferDeviceAddress(device, __dsl_pInfo);
            }
        }

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_buffer_device_address"],
            ImpliesSets = [
                "VK_EXT_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_EXT_buffer_device_address+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferDeviceAddressEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
        ) => Underlying.Value!.GetBufferDeviceAddressEXT(device, pInfo);

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_buffer_device_address"],
            ImpliesSets = [
                "VK_EXT_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_EXT_buffer_device_address+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferDeviceAddressEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
        )
        {
            fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
            {
                return (ulong)GetBufferDeviceAddressEXT(device, __dsl_pInfo);
            }
        }

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_buffer_device_address"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferDeviceAddressKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
        ) => Underlying.Value!.GetBufferDeviceAddressKHR(device, pInfo);

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_buffer_device_address"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferDeviceAddressKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
        )
        {
            fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
            {
                return (ulong)GetBufferDeviceAddressKHR(device, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetBufferMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            MemoryRequirements* pMemoryRequirements
        ) => Underlying.Value!.GetBufferMemoryRequirements(device, buffer, pMemoryRequirements);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetBufferMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkBuffer")] BufferHandle buffer,
            Ref<MemoryRequirements> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements* __dsl_pMemoryRequirements = pMemoryRequirements)
            {
                GetBufferMemoryRequirements(device, buffer, __dsl_pMemoryRequirements);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetBufferMemoryRequirements2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
                BufferMemoryRequirementsInfo2* pInfo,
            MemoryRequirements2* pMemoryRequirements
        ) => Underlying.Value!.GetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetBufferMemoryRequirements2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
                Ref<BufferMemoryRequirementsInfo2> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (BufferMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
            {
                GetBufferMemoryRequirements2(device, __dsl_pInfo, __dsl_pMemoryRequirements);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetBufferMemoryRequirements2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
                BufferMemoryRequirementsInfo2* pInfo,
            MemoryRequirements2* pMemoryRequirements
        ) => Underlying.Value!.GetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);

        [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetBufferMemoryRequirements2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
                Ref<BufferMemoryRequirementsInfo2> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (BufferMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
            {
                GetBufferMemoryRequirements2KHR(device, __dsl_pInfo, __dsl_pMemoryRequirements);
            }
        }

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferOpaqueCaptureAddress(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
        ) => Underlying.Value!.GetBufferOpaqueCaptureAddress(device, pInfo);

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferOpaqueCaptureAddress(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
        )
        {
            fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
            {
                return (ulong)GetBufferOpaqueCaptureAddress(device, __dsl_pInfo);
            }
        }

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_buffer_device_address"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddressKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferOpaqueCaptureAddressKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
        ) => Underlying.Value!.GetBufferOpaqueCaptureAddressKHR(device, pInfo);

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_buffer_device_address"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddressKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferOpaqueCaptureAddressKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
        )
        {
            fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
            {
                return (ulong)GetBufferOpaqueCaptureAddressKHR(device, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureDescriptorDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetBufferOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferCaptureDescriptorDataInfoEXT *")]
                BufferCaptureDescriptorDataInfoEXT* pInfo,
            void* pData
        ) => Underlying.Value!.GetBufferOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureDescriptorDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetBufferOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkBufferCaptureDescriptorDataInfoEXT *")]
                Ref<BufferCaptureDescriptorDataInfoEXT> pInfo,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (BufferCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
            {
                return (Result)GetBufferOpaqueCaptureDescriptorDataEXT(
                    device,
                    __dsl_pInfo,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_calibrated_timestamps"],
            ImpliesSets = [
                "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetCalibratedTimestampsEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint timestampCount,
            [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
                CalibratedTimestampInfoKHR* pTimestampInfos,
            [NativeTypeName("uint64_t *")] ulong* pTimestamps,
            [NativeTypeName("uint64_t *")] ulong* pMaxDeviation
        ) =>
            Underlying.Value!.GetCalibratedTimestampsEXT(
                device,
                timestampCount,
                pTimestampInfos,
                pTimestamps,
                pMaxDeviation
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_calibrated_timestamps"],
            ImpliesSets = [
                "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetCalibratedTimestampsEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint timestampCount,
            [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
                Ref<CalibratedTimestampInfoKHR> pTimestampInfos,
            [NativeTypeName("uint64_t *")] Ref<ulong> pTimestamps,
            [NativeTypeName("uint64_t *")] Ref<ulong> pMaxDeviation
        )
        {
            fixed (ulong* __dsl_pMaxDeviation = pMaxDeviation)
            fixed (ulong* __dsl_pTimestamps = pTimestamps)
            fixed (CalibratedTimestampInfoKHR* __dsl_pTimestampInfos = pTimestampInfos)
            {
                return (Result)GetCalibratedTimestampsEXT(
                    device,
                    timestampCount,
                    __dsl_pTimestampInfos,
                    __dsl_pTimestamps,
                    __dsl_pMaxDeviation
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_calibrated_timestamps"],
            ImpliesSets = [
                "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetCalibratedTimestampsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint timestampCount,
            [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
                CalibratedTimestampInfoKHR* pTimestampInfos,
            [NativeTypeName("uint64_t *")] ulong* pTimestamps,
            [NativeTypeName("uint64_t *")] ulong* pMaxDeviation
        ) =>
            Underlying.Value!.GetCalibratedTimestampsKHR(
                device,
                timestampCount,
                pTimestampInfos,
                pTimestamps,
                pMaxDeviation
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_calibrated_timestamps"],
            ImpliesSets = [
                "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetCalibratedTimestampsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint timestampCount,
            [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
                Ref<CalibratedTimestampInfoKHR> pTimestampInfos,
            [NativeTypeName("uint64_t *")] Ref<ulong> pTimestamps,
            [NativeTypeName("uint64_t *")] Ref<ulong> pMaxDeviation
        )
        {
            fixed (ulong* __dsl_pMaxDeviation = pMaxDeviation)
            fixed (ulong* __dsl_pTimestamps = pTimestamps)
            fixed (CalibratedTimestampInfoKHR* __dsl_pTimestampInfos = pTimestampInfos)
            {
                return (Result)GetCalibratedTimestampsKHR(
                    device,
                    timestampCount,
                    __dsl_pTimestampInfos,
                    __dsl_pTimestamps,
                    __dsl_pMaxDeviation
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cluster_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetClusterAccelerationStructureBuildSizesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetClusterAccelerationStructureBuildSizesNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkClusterAccelerationStructureInputInfoNV *")]
                ClusterAccelerationStructureInputInfoNV* pInfo,
            AccelerationStructureBuildSizesInfoKHR* pSizeInfo
        ) =>
            Underlying.Value!.GetClusterAccelerationStructureBuildSizesNV(device, pInfo, pSizeInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cluster_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetClusterAccelerationStructureBuildSizesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetClusterAccelerationStructureBuildSizesNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkClusterAccelerationStructureInputInfoNV *")]
                Ref<ClusterAccelerationStructureInputInfoNV> pInfo,
            Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
        )
        {
            fixed (AccelerationStructureBuildSizesInfoKHR* __dsl_pSizeInfo = pSizeInfo)
            fixed (ClusterAccelerationStructureInputInfoNV* __dsl_pInfo = pInfo)
            {
                GetClusterAccelerationStructureBuildSizesNV(device, __dsl_pInfo, __dsl_pSizeInfo);
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelineAvailablePropertiesARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDataGraphPipelineAvailablePropertiesARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDataGraphPipelineInfoARM *")]
                DataGraphPipelineInfoARM* pPipelineInfo,
            [NativeTypeName("uint32_t *")] uint* pPropertiesCount,
            DataGraphPipelinePropertyARM* pProperties
        ) =>
            Underlying.Value!.GetDataGraphPipelineAvailablePropertiesARM(
                device,
                pPipelineInfo,
                pPropertiesCount,
                pProperties
            );

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelineAvailablePropertiesARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDataGraphPipelineAvailablePropertiesARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDataGraphPipelineInfoARM *")]
                Ref<DataGraphPipelineInfoARM> pPipelineInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertiesCount,
            Ref<DataGraphPipelinePropertyARM> pProperties
        )
        {
            fixed (DataGraphPipelinePropertyARM* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertiesCount = pPropertiesCount)
            fixed (DataGraphPipelineInfoARM* __dsl_pPipelineInfo = pPipelineInfo)
            {
                return (Result)GetDataGraphPipelineAvailablePropertiesARM(
                    device,
                    __dsl_pPipelineInfo,
                    __dsl_pPropertiesCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelinePropertiesARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDataGraphPipelinePropertiesARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDataGraphPipelineInfoARM *")]
                DataGraphPipelineInfoARM* pPipelineInfo,
            [NativeTypeName("uint32_t")] uint propertiesCount,
            DataGraphPipelinePropertyQueryResultARM* pProperties
        ) =>
            Underlying.Value!.GetDataGraphPipelinePropertiesARM(
                device,
                pPipelineInfo,
                propertiesCount,
                pProperties
            );

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelinePropertiesARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDataGraphPipelinePropertiesARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDataGraphPipelineInfoARM *")]
                Ref<DataGraphPipelineInfoARM> pPipelineInfo,
            [NativeTypeName("uint32_t")] uint propertiesCount,
            Ref<DataGraphPipelinePropertyQueryResultARM> pProperties
        )
        {
            fixed (DataGraphPipelinePropertyQueryResultARM* __dsl_pProperties = pProperties)
            fixed (DataGraphPipelineInfoARM* __dsl_pPipelineInfo = pPipelineInfo)
            {
                return (Result)GetDataGraphPipelinePropertiesARM(
                    device,
                    __dsl_pPipelineInfo,
                    propertiesCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetDataGraphPipelineSessionBindPointRequirementsARM"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDataGraphPipelineSessionBindPointRequirementsARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDataGraphPipelineSessionBindPointRequirementsInfoARM *")]
                DataGraphPipelineSessionBindPointRequirementsInfoARM* pInfo,
            [NativeTypeName("uint32_t *")] uint* pBindPointRequirementCount,
            DataGraphPipelineSessionBindPointRequirementARM* pBindPointRequirements
        ) =>
            Underlying.Value!.GetDataGraphPipelineSessionBindPointRequirementsARM(
                device,
                pInfo,
                pBindPointRequirementCount,
                pBindPointRequirements
            );

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetDataGraphPipelineSessionBindPointRequirementsARM"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDataGraphPipelineSessionBindPointRequirementsARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDataGraphPipelineSessionBindPointRequirementsInfoARM *")]
                Ref<DataGraphPipelineSessionBindPointRequirementsInfoARM> pInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pBindPointRequirementCount,
            Ref<DataGraphPipelineSessionBindPointRequirementARM> pBindPointRequirements
        )
        {
            fixed (
                DataGraphPipelineSessionBindPointRequirementARM* __dsl_pBindPointRequirements =
                    pBindPointRequirements
            )
            fixed (uint* __dsl_pBindPointRequirementCount = pBindPointRequirementCount)
            fixed (DataGraphPipelineSessionBindPointRequirementsInfoARM* __dsl_pInfo = pInfo)
            {
                return (Result)GetDataGraphPipelineSessionBindPointRequirementsARM(
                    device,
                    __dsl_pInfo,
                    __dsl_pBindPointRequirementCount,
                    __dsl_pBindPointRequirements
                );
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetDataGraphPipelineSessionMemoryRequirementsARM"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDataGraphPipelineSessionMemoryRequirementsARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDataGraphPipelineSessionMemoryRequirementsInfoARM *")]
                DataGraphPipelineSessionMemoryRequirementsInfoARM* pInfo,
            MemoryRequirements2* pMemoryRequirements
        ) =>
            Underlying.Value!.GetDataGraphPipelineSessionMemoryRequirementsARM(
                device,
                pInfo,
                pMemoryRequirements
            );

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetDataGraphPipelineSessionMemoryRequirementsARM"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDataGraphPipelineSessionMemoryRequirementsARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDataGraphPipelineSessionMemoryRequirementsInfoARM *")]
                Ref<DataGraphPipelineSessionMemoryRequirementsInfoARM> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (DataGraphPipelineSessionMemoryRequirementsInfoARM* __dsl_pInfo = pInfo)
            {
                GetDataGraphPipelineSessionMemoryRequirementsARM(
                    device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [return: NativeTypeName("uint32_t")]
        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeferredOperationMaxConcurrencyKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDeferredOperationMaxConcurrencyKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation
        ) => Underlying.Value!.GetDeferredOperationMaxConcurrencyKHR(device, operation);

        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeferredOperationResultKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDeferredOperationResultKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation
        ) => Underlying.Value!.GetDeferredOperationResultKHR(device, operation);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorGetInfoEXT *")]
                DescriptorGetInfoEXT* pDescriptorInfo,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pDescriptor
        ) => Underlying.Value!.GetDescriptorEXT(device, pDescriptorInfo, dataSize, pDescriptor);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorGetInfoEXT *")]
                Ref<DescriptorGetInfoEXT> pDescriptorInfo,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pDescriptor
        )
        {
            fixed (void* __dsl_pDescriptor = pDescriptor)
            fixed (DescriptorGetInfoEXT* __dsl_pDescriptorInfo = pDescriptorInfo)
            {
                GetDescriptorEXT(device, __dsl_pDescriptorInfo, dataSize, __dsl_pDescriptor);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VALVE_descriptor_set_host_mapping"],
            ImpliesSets = [
                "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
                "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetHostMappingVALVE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetHostMappingValve(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
            void** ppData
        ) => Underlying.Value!.GetDescriptorSetHostMappingValve(device, descriptorSet, ppData);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VALVE_descriptor_set_host_mapping"],
            ImpliesSets = [
                "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
                "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetHostMappingVALVE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetHostMappingValve(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
            Ref2D ppData
        )
        {
            fixed (void** __dsl_ppData = ppData)
            {
                GetDescriptorSetHostMappingValve(device, descriptorSet, __dsl_ppData);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutBindingOffsetEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutBindingOffsetEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint binding,
            [NativeTypeName("VkDeviceSize *")] ulong* pOffset
        ) =>
            Underlying.Value!.GetDescriptorSetLayoutBindingOffsetEXT(
                device,
                layout,
                binding,
                pOffset
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutBindingOffsetEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutBindingOffsetEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle layout,
            [NativeTypeName("uint32_t")] uint binding,
            [NativeTypeName("VkDeviceSize *")] Ref<ulong> pOffset
        )
        {
            fixed (ulong* __dsl_pOffset = pOffset)
            {
                GetDescriptorSetLayoutBindingOffsetEXT(device, layout, binding, __dsl_pOffset);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VALVE_descriptor_set_host_mapping"],
            ImpliesSets = [
                "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
                "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutHostMappingInfoVALVE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutHostMappingInfoValve(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorSetBindingReferenceVALVE *")]
                DescriptorSetBindingReferenceValve* pBindingReference,
            DescriptorSetLayoutHostMappingInfoValve* pHostMapping
        ) =>
            Underlying.Value!.GetDescriptorSetLayoutHostMappingInfoValve(
                device,
                pBindingReference,
                pHostMapping
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VALVE_descriptor_set_host_mapping"],
            ImpliesSets = [
                "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
                "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutHostMappingInfoVALVE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutHostMappingInfoValve(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorSetBindingReferenceVALVE *")]
                Ref<DescriptorSetBindingReferenceValve> pBindingReference,
            Ref<DescriptorSetLayoutHostMappingInfoValve> pHostMapping
        )
        {
            fixed (DescriptorSetLayoutHostMappingInfoValve* __dsl_pHostMapping = pHostMapping)
            fixed (DescriptorSetBindingReferenceValve* __dsl_pBindingReference = pBindingReference)
            {
                GetDescriptorSetLayoutHostMappingInfoValve(
                    device,
                    __dsl_pBindingReference,
                    __dsl_pHostMapping
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSizeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutSizeEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle layout,
            [NativeTypeName("VkDeviceSize *")] ulong* pLayoutSizeInBytes
        ) => Underlying.Value!.GetDescriptorSetLayoutSizeEXT(device, layout, pLayoutSizeInBytes);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSizeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutSizeEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle layout,
            [NativeTypeName("VkDeviceSize *")] Ref<ulong> pLayoutSizeInBytes
        )
        {
            fixed (ulong* __dsl_pLayoutSizeInBytes = pLayoutSizeInBytes)
            {
                GetDescriptorSetLayoutSizeEXT(device, layout, __dsl_pLayoutSizeInBytes);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutSupport(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
                DescriptorSetLayoutCreateInfo* pCreateInfo,
            DescriptorSetLayoutSupport* pSupport
        ) => Underlying.Value!.GetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutSupport(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
                Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
            Ref<DescriptorSetLayoutSupport> pSupport
        )
        {
            fixed (DescriptorSetLayoutSupport* __dsl_pSupport = pSupport)
            fixed (DescriptorSetLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                GetDescriptorSetLayoutSupport(device, __dsl_pCreateInfo, __dsl_pSupport);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance3"],
            ImpliesSets = [
                "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
                "VK_KHR_maintenance3+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupportKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutSupportKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
                DescriptorSetLayoutCreateInfo* pCreateInfo,
            DescriptorSetLayoutSupport* pSupport
        ) => Underlying.Value!.GetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance3"],
            ImpliesSets = [
                "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
                "VK_KHR_maintenance3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupportKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutSupportKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
                Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
            Ref<DescriptorSetLayoutSupport> pSupport
        )
        {
            fixed (DescriptorSetLayoutSupport* __dsl_pSupport = pSupport)
            fixed (DescriptorSetLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                GetDescriptorSetLayoutSupportKHR(device, __dsl_pCreateInfo, __dsl_pSupport);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceAccelerationStructureCompatibilityKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceAccelerationStructureCompatibilityKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAccelerationStructureVersionInfoKHR *")]
                AccelerationStructureVersionInfoKHR* pVersionInfo,
            AccelerationStructureCompatibilityKHR* pCompatibility
        ) =>
            Underlying.Value!.GetDeviceAccelerationStructureCompatibilityKHR(
                device,
                pVersionInfo,
                pCompatibility
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceAccelerationStructureCompatibilityKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceAccelerationStructureCompatibilityKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkAccelerationStructureVersionInfoKHR *")]
                Ref<AccelerationStructureVersionInfoKHR> pVersionInfo,
            Ref<AccelerationStructureCompatibilityKHR> pCompatibility
        )
        {
            fixed (AccelerationStructureCompatibilityKHR* __dsl_pCompatibility = pCompatibility)
            fixed (AccelerationStructureVersionInfoKHR* __dsl_pVersionInfo = pVersionInfo)
            {
                GetDeviceAccelerationStructureCompatibilityKHR(
                    device,
                    __dsl_pVersionInfo,
                    __dsl_pCompatibility
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceBufferMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
                DeviceBufferMemoryRequirements* pInfo,
            MemoryRequirements2* pMemoryRequirements
        ) =>
            Underlying.Value!.GetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceBufferMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
                Ref<DeviceBufferMemoryRequirements> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (DeviceBufferMemoryRequirements* __dsl_pInfo = pInfo)
            {
                GetDeviceBufferMemoryRequirements(device, __dsl_pInfo, __dsl_pMemoryRequirements);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirementsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceBufferMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
                DeviceBufferMemoryRequirements* pInfo,
            MemoryRequirements2* pMemoryRequirements
        ) =>
            Underlying.Value!.GetDeviceBufferMemoryRequirementsKHR(
                device,
                pInfo,
                pMemoryRequirements
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirementsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceBufferMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
                Ref<DeviceBufferMemoryRequirements> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (DeviceBufferMemoryRequirements* __dsl_pInfo = pInfo)
            {
                GetDeviceBufferMemoryRequirementsKHR(
                    device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_fault"],
            ImpliesSets = [
                "VK_EXT_device_fault+VK_KHR_get_physical_device_properties2",
                "VK_EXT_device_fault+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceFaultInfoEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDeviceFaultInfoEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            DeviceFaultCountsEXT* pFaultCounts,
            DeviceFaultInfoEXT* pFaultInfo
        ) => Underlying.Value!.GetDeviceFaultInfoEXT(device, pFaultCounts, pFaultInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_fault"],
            ImpliesSets = [
                "VK_EXT_device_fault+VK_KHR_get_physical_device_properties2",
                "VK_EXT_device_fault+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceFaultInfoEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDeviceFaultInfoEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            Ref<DeviceFaultCountsEXT> pFaultCounts,
            Ref<DeviceFaultInfoEXT> pFaultInfo
        )
        {
            fixed (DeviceFaultInfoEXT* __dsl_pFaultInfo = pFaultInfo)
            fixed (DeviceFaultCountsEXT* __dsl_pFaultCounts = pFaultCounts)
            {
                return (Result)GetDeviceFaultInfoEXT(device, __dsl_pFaultCounts, __dsl_pFaultInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeatures")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceGroupPeerMemoryFeatures(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint heapIndex,
            [NativeTypeName("uint32_t")] uint localDeviceIndex,
            [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
            [NativeTypeName("VkPeerMemoryFeatureFlags *")]
                PeerMemoryFeatureFlags* pPeerMemoryFeatures
        ) =>
            Underlying.Value!.GetDeviceGroupPeerMemoryFeatures(
                device,
                heapIndex,
                localDeviceIndex,
                remoteDeviceIndex,
                pPeerMemoryFeatures
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeatures")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceGroupPeerMemoryFeatures(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint heapIndex,
            [NativeTypeName("uint32_t")] uint localDeviceIndex,
            [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
            [NativeTypeName("VkPeerMemoryFeatureFlags *")]
                Ref<PeerMemoryFeatureFlags> pPeerMemoryFeatures
        )
        {
            fixed (PeerMemoryFeatureFlags* __dsl_pPeerMemoryFeatures = pPeerMemoryFeatures)
            {
                GetDeviceGroupPeerMemoryFeatures(
                    device,
                    heapIndex,
                    localDeviceIndex,
                    remoteDeviceIndex,
                    __dsl_pPeerMemoryFeatures
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_device_group"],
            ImpliesSets = ["VK_KHR_device_group_creation"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeaturesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceGroupPeerMemoryFeaturesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint heapIndex,
            [NativeTypeName("uint32_t")] uint localDeviceIndex,
            [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
            [NativeTypeName("VkPeerMemoryFeatureFlags *")]
                PeerMemoryFeatureFlags* pPeerMemoryFeatures
        ) =>
            Underlying.Value!.GetDeviceGroupPeerMemoryFeaturesKHR(
                device,
                heapIndex,
                localDeviceIndex,
                remoteDeviceIndex,
                pPeerMemoryFeatures
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_device_group"],
            ImpliesSets = ["VK_KHR_device_group_creation"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeaturesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceGroupPeerMemoryFeaturesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint heapIndex,
            [NativeTypeName("uint32_t")] uint localDeviceIndex,
            [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
            [NativeTypeName("VkPeerMemoryFeatureFlags *")]
                Ref<PeerMemoryFeatureFlags> pPeerMemoryFeatures
        )
        {
            fixed (PeerMemoryFeatureFlags* __dsl_pPeerMemoryFeatures = pPeerMemoryFeatures)
            {
                GetDeviceGroupPeerMemoryFeaturesKHR(
                    device,
                    heapIndex,
                    localDeviceIndex,
                    remoteDeviceIndex,
                    __dsl_pPeerMemoryFeatures
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPresentCapabilitiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDeviceGroupPresentCapabilitiesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            DeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities
        ) =>
            Underlying.Value!.GetDeviceGroupPresentCapabilitiesKHR(
                device,
                pDeviceGroupPresentCapabilities
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPresentCapabilitiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDeviceGroupPresentCapabilitiesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            Ref<DeviceGroupPresentCapabilitiesKHR> pDeviceGroupPresentCapabilities
        )
        {
            fixed (
                DeviceGroupPresentCapabilitiesKHR* __dsl_pDeviceGroupPresentCapabilities =
                    pDeviceGroupPresentCapabilities
            )
            {
                return (Result)GetDeviceGroupPresentCapabilitiesKHR(
                    device,
                    __dsl_pDeviceGroupPresentCapabilities
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupSurfacePresentModesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDeviceGroupSurfacePresentModesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            [NativeTypeName("VkDeviceGroupPresentModeFlagsKHR *")]
                DeviceGroupPresentModeFlagsKHR* pModes
        ) => Underlying.Value!.GetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupSurfacePresentModesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDeviceGroupSurfacePresentModesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            [NativeTypeName("VkDeviceGroupPresentModeFlagsKHR *")]
                Ref<DeviceGroupPresentModeFlagsKHR> pModes
        )
        {
            fixed (DeviceGroupPresentModeFlagsKHR* __dsl_pModes = pModes)
            {
                return (Result)GetDeviceGroupSurfacePresentModesKHR(device, surface, __dsl_pModes);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                DeviceImageMemoryRequirements* pInfo,
            MemoryRequirements2* pMemoryRequirements
        ) => Underlying.Value!.GetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                Ref<DeviceImageMemoryRequirements> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
            {
                GetDeviceImageMemoryRequirements(device, __dsl_pInfo, __dsl_pMemoryRequirements);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirementsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                DeviceImageMemoryRequirements* pInfo,
            MemoryRequirements2* pMemoryRequirements
        ) =>
            Underlying.Value!.GetDeviceImageMemoryRequirementsKHR(
                device,
                pInfo,
                pMemoryRequirements
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirementsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                Ref<DeviceImageMemoryRequirements> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
            {
                GetDeviceImageMemoryRequirementsKHR(device, __dsl_pInfo, __dsl_pMemoryRequirements);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageSparseMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                DeviceImageMemoryRequirements* pInfo,
            [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
            SparseImageMemoryRequirements2* pSparseMemoryRequirements
        ) =>
            Underlying.Value!.GetDeviceImageSparseMemoryRequirements(
                device,
                pInfo,
                pSparseMemoryRequirementCount,
                pSparseMemoryRequirements
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageSparseMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                Ref<DeviceImageMemoryRequirements> pInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
            Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
        )
        {
            fixed (
                SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                    pSparseMemoryRequirements
            )
            fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
            fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
            {
                GetDeviceImageSparseMemoryRequirements(
                    device,
                    __dsl_pInfo,
                    __dsl_pSparseMemoryRequirementCount,
                    __dsl_pSparseMemoryRequirements
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirementsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageSparseMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                DeviceImageMemoryRequirements* pInfo,
            [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
            SparseImageMemoryRequirements2* pSparseMemoryRequirements
        ) =>
            Underlying.Value!.GetDeviceImageSparseMemoryRequirementsKHR(
                device,
                pInfo,
                pSparseMemoryRequirementCount,
                pSparseMemoryRequirements
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirementsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageSparseMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                Ref<DeviceImageMemoryRequirements> pInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
            Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
        )
        {
            fixed (
                SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                    pSparseMemoryRequirements
            )
            fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
            fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
            {
                GetDeviceImageSparseMemoryRequirementsKHR(
                    device,
                    __dsl_pInfo,
                    __dsl_pSparseMemoryRequirementCount,
                    __dsl_pSparseMemoryRequirements
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageSubresourceLayout(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
                DeviceImageSubresourceInfo* pInfo,
            SubresourceLayout2* pLayout
        ) => Underlying.Value!.GetDeviceImageSubresourceLayout(device, pInfo, pLayout);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageSubresourceLayout(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
                Ref<DeviceImageSubresourceInfo> pInfo,
            Ref<SubresourceLayout2> pLayout
        )
        {
            fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
            fixed (DeviceImageSubresourceInfo* __dsl_pInfo = pInfo)
            {
                GetDeviceImageSubresourceLayout(device, __dsl_pInfo, __dsl_pLayout);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayoutKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageSubresourceLayoutKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
                DeviceImageSubresourceInfo* pInfo,
            SubresourceLayout2* pLayout
        ) => Underlying.Value!.GetDeviceImageSubresourceLayoutKHR(device, pInfo, pLayout);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayoutKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageSubresourceLayoutKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
                Ref<DeviceImageSubresourceInfo> pInfo,
            Ref<SubresourceLayout2> pLayout
        )
        {
            fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
            fixed (DeviceImageSubresourceInfo* __dsl_pInfo = pInfo)
            {
                GetDeviceImageSubresourceLayoutKHR(device, __dsl_pInfo, __dsl_pLayout);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryCommitment")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceMemoryCommitment(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
            [NativeTypeName("VkDeviceSize *")] ulong* pCommittedMemoryInBytes
        ) => Underlying.Value!.GetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryCommitment")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceMemoryCommitment(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
            [NativeTypeName("VkDeviceSize *")] Ref<ulong> pCommittedMemoryInBytes
        )
        {
            fixed (ulong* __dsl_pCommittedMemoryInBytes = pCommittedMemoryInBytes)
            {
                GetDeviceMemoryCommitment(device, memory, __dsl_pCommittedMemoryInBytes);
            }
        }

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetDeviceMemoryOpaqueCaptureAddress(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
                DeviceMemoryOpaqueCaptureAddressInfo* pInfo
        ) => Underlying.Value!.GetDeviceMemoryOpaqueCaptureAddress(device, pInfo);

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetDeviceMemoryOpaqueCaptureAddress(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
                Ref<DeviceMemoryOpaqueCaptureAddressInfo> pInfo
        )
        {
            fixed (DeviceMemoryOpaqueCaptureAddressInfo* __dsl_pInfo = pInfo)
            {
                return (ulong)GetDeviceMemoryOpaqueCaptureAddress(device, __dsl_pInfo);
            }
        }

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_buffer_device_address"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddressKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetDeviceMemoryOpaqueCaptureAddressKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
                DeviceMemoryOpaqueCaptureAddressInfo* pInfo
        ) => Underlying.Value!.GetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_buffer_device_address"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddressKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetDeviceMemoryOpaqueCaptureAddressKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
                Ref<DeviceMemoryOpaqueCaptureAddressInfo> pInfo
        )
        {
            fixed (DeviceMemoryOpaqueCaptureAddressInfo* __dsl_pInfo = pInfo)
            {
                return (ulong)GetDeviceMemoryOpaqueCaptureAddressKHR(device, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMicromapCompatibilityEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceMicromapCompatibilityEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMicromapVersionInfoEXT *")]
                MicromapVersionInfoEXT* pVersionInfo,
            AccelerationStructureCompatibilityKHR* pCompatibility
        ) =>
            Underlying.Value!.GetDeviceMicromapCompatibilityEXT(
                device,
                pVersionInfo,
                pCompatibility
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMicromapCompatibilityEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceMicromapCompatibilityEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMicromapVersionInfoEXT *")]
                Ref<MicromapVersionInfoEXT> pVersionInfo,
            Ref<AccelerationStructureCompatibilityKHR> pCompatibility
        )
        {
            fixed (AccelerationStructureCompatibilityKHR* __dsl_pCompatibility = pCompatibility)
            fixed (MicromapVersionInfoEXT* __dsl_pVersionInfo = pVersionInfo)
            {
                GetDeviceMicromapCompatibilityEXT(device, __dsl_pVersionInfo, __dsl_pCompatibility);
            }
        }

        [return: NativeTypeName("PFN_vkVoidFunction")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceProcAddr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PFNVkVoidFunction GetDeviceProcAddr(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const char *")] sbyte* pName
        ) => Underlying.Value!.GetDeviceProcAddr(device, pName);

        [return: NativeTypeName("PFN_vkVoidFunction")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceProcAddr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PFNVkVoidFunction GetDeviceProcAddr(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const char *")] Ref<sbyte> pName
        )
        {
            fixed (sbyte* __dsl_pName = pName)
            {
                return (PFNVkVoidFunction)GetDeviceProcAddr(device, __dsl_pName);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceQueue(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint queueFamilyIndex,
            [NativeTypeName("uint32_t")] uint queueIndex,
            [NativeTypeName("VkQueue *")] QueueHandle* pQueue
        ) => Underlying.Value!.GetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceQueue(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint queueFamilyIndex,
            [NativeTypeName("uint32_t")] uint queueIndex,
            [NativeTypeName("VkQueue *")] Ref<QueueHandle> pQueue
        )
        {
            fixed (QueueHandle* __dsl_pQueue = pQueue)
            {
                GetDeviceQueue(device, queueFamilyIndex, queueIndex, __dsl_pQueue);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceQueue2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceQueueInfo2 *")] DeviceQueueInfo2* pQueueInfo,
            [NativeTypeName("VkQueue *")] QueueHandle* pQueue
        ) => Underlying.Value!.GetDeviceQueue2(device, pQueueInfo, pQueue);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceQueue2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceQueueInfo2 *")] Ref<DeviceQueueInfo2> pQueueInfo,
            [NativeTypeName("VkQueue *")] Ref<QueueHandle> pQueue
        )
        {
            fixed (QueueHandle* __dsl_pQueue = pQueue)
            fixed (DeviceQueueInfo2* __dsl_pQueueInfo = pQueueInfo)
            {
                GetDeviceQueue2(device, __dsl_pQueueInfo, __dsl_pQueue);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_subpass_shading"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkRenderPass")] RenderPassHandle renderpass,
            Extent2D* pMaxWorkgroupSize
        ) =>
            Underlying.Value!.GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
                device,
                renderpass,
                pMaxWorkgroupSize
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_subpass_shading"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkRenderPass")] RenderPassHandle renderpass,
            Ref<Extent2D> pMaxWorkgroupSize
        )
        {
            fixed (Extent2D* __dsl_pMaxWorkgroupSize = pMaxWorkgroupSize)
            {
                return (Result)GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
                    device,
                    renderpass,
                    __dsl_pMaxWorkgroupSize
                );
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceTensorMemoryRequirementsARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceTensorMemoryRequirementsARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceTensorMemoryRequirementsARM *")]
                DeviceTensorMemoryRequirementsARM* pInfo,
            MemoryRequirements2* pMemoryRequirements
        ) =>
            Underlying.Value!.GetDeviceTensorMemoryRequirementsARM(
                device,
                pInfo,
                pMemoryRequirements
            );

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceTensorMemoryRequirementsARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceTensorMemoryRequirementsARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceTensorMemoryRequirementsARM *")]
                Ref<DeviceTensorMemoryRequirementsARM> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (DeviceTensorMemoryRequirementsARM* __dsl_pInfo = pInfo)
            {
                GetDeviceTensorMemoryRequirementsARM(
                    device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModeProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayModeProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            DisplayModeProperties2KHR* pProperties
        ) =>
            Underlying.Value!.GetDisplayModeProperties2KHR(
                physicalDevice,
                display,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModeProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayModeProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<DisplayModeProperties2KHR> pProperties
        )
        {
            fixed (DisplayModeProperties2KHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            {
                return (Result)GetDisplayModeProperties2KHR(
                    physicalDevice,
                    display,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayModePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            DisplayModePropertiesKHR* pProperties
        ) =>
            Underlying.Value!.GetDisplayModePropertiesKHR(
                physicalDevice,
                display,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayModePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<DisplayModePropertiesKHR> pProperties
        )
        {
            fixed (DisplayModePropertiesKHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            {
                return (Result)GetDisplayModePropertiesKHR(
                    physicalDevice,
                    display,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilities2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayPlaneCapabilities2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkDisplayPlaneInfo2KHR *")]
                DisplayPlaneInfo2KHR* pDisplayPlaneInfo,
            DisplayPlaneCapabilities2KHR* pCapabilities
        ) =>
            Underlying.Value!.GetDisplayPlaneCapabilities2KHR(
                physicalDevice,
                pDisplayPlaneInfo,
                pCapabilities
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilities2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayPlaneCapabilities2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkDisplayPlaneInfo2KHR *")]
                Ref<DisplayPlaneInfo2KHR> pDisplayPlaneInfo,
            Ref<DisplayPlaneCapabilities2KHR> pCapabilities
        )
        {
            fixed (DisplayPlaneCapabilities2KHR* __dsl_pCapabilities = pCapabilities)
            fixed (DisplayPlaneInfo2KHR* __dsl_pDisplayPlaneInfo = pDisplayPlaneInfo)
            {
                return (Result)GetDisplayPlaneCapabilities2KHR(
                    physicalDevice,
                    __dsl_pDisplayPlaneInfo,
                    __dsl_pCapabilities
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilitiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayPlaneCapabilitiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkDisplayModeKHR")] DisplayModeKHRHandle mode,
            [NativeTypeName("uint32_t")] uint planeIndex,
            DisplayPlaneCapabilitiesKHR* pCapabilities
        ) =>
            Underlying.Value!.GetDisplayPlaneCapabilitiesKHR(
                physicalDevice,
                mode,
                planeIndex,
                pCapabilities
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilitiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayPlaneCapabilitiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkDisplayModeKHR")] DisplayModeKHRHandle mode,
            [NativeTypeName("uint32_t")] uint planeIndex,
            Ref<DisplayPlaneCapabilitiesKHR> pCapabilities
        )
        {
            fixed (DisplayPlaneCapabilitiesKHR* __dsl_pCapabilities = pCapabilities)
            {
                return (Result)GetDisplayPlaneCapabilitiesKHR(
                    physicalDevice,
                    mode,
                    planeIndex,
                    __dsl_pCapabilities
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneSupportedDisplaysKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayPlaneSupportedDisplaysKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t")] uint planeIndex,
            [NativeTypeName("uint32_t *")] uint* pDisplayCount,
            [NativeTypeName("VkDisplayKHR *")] DisplayKHRHandle* pDisplays
        ) =>
            Underlying.Value!.GetDisplayPlaneSupportedDisplaysKHR(
                physicalDevice,
                planeIndex,
                pDisplayCount,
                pDisplays
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneSupportedDisplaysKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayPlaneSupportedDisplaysKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t")] uint planeIndex,
            [NativeTypeName("uint32_t *")] Ref<uint> pDisplayCount,
            [NativeTypeName("VkDisplayKHR *")] Ref<DisplayKHRHandle> pDisplays
        )
        {
            fixed (DisplayKHRHandle* __dsl_pDisplays = pDisplays)
            fixed (uint* __dsl_pDisplayCount = pDisplayCount)
            {
                return (Result)GetDisplayPlaneSupportedDisplaysKHR(
                    physicalDevice,
                    planeIndex,
                    __dsl_pDisplayCount,
                    __dsl_pDisplays
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_acquire_drm_display"],
            ImpliesSets = ["VK_EXT_direct_mode_display"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDrmDisplayEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDrmDisplayEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("int32_t")] int drmFd,
            [NativeTypeName("uint32_t")] uint connectorId,
            [NativeTypeName("VkDisplayKHR *")] DisplayKHRHandle* display
        ) => Underlying.Value!.GetDrmDisplayEXT(physicalDevice, drmFd, connectorId, display);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_acquire_drm_display"],
            ImpliesSets = ["VK_EXT_direct_mode_display"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDrmDisplayEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDrmDisplayEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("int32_t")] int drmFd,
            [NativeTypeName("uint32_t")] uint connectorId,
            [NativeTypeName("VkDisplayKHR *")] Ref<DisplayKHRHandle> display
        )
        {
            fixed (DisplayKHRHandle* __dsl_display = display)
            {
                return (Result)GetDrmDisplayEXT(physicalDevice, drmFd, connectorId, __dsl_display);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_properties"],
            ImpliesSets = [
                "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_properties+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetDynamicRenderingTilePropertiesQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDynamicRenderingTilePropertiesQCOM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo,
            TilePropertiesQCOM* pProperties
        ) =>
            Underlying.Value!.GetDynamicRenderingTilePropertiesQCOM(
                device,
                pRenderingInfo,
                pProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_properties"],
            ImpliesSets = [
                "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_properties+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDynamicRenderingTilePropertiesQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDynamicRenderingTilePropertiesQCOM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo,
            Ref<TilePropertiesQCOM> pProperties
        )
        {
            fixed (TilePropertiesQCOM* __dsl_pProperties = pProperties)
            fixed (RenderingInfo* __dsl_pRenderingInfo = pRenderingInfo)
            {
                return (Result)GetDynamicRenderingTilePropertiesQCOM(
                    device,
                    __dsl_pRenderingInfo,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_encode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetEncodedVideoSessionParametersKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetEncodedVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkVideoEncodeSessionParametersGetInfoKHR *")]
                VideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo,
            VideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo,
            [NativeTypeName("size_t *")] nuint* pDataSize,
            void* pData
        ) =>
            Underlying.Value!.GetEncodedVideoSessionParametersKHR(
                device,
                pVideoSessionParametersInfo,
                pFeedbackInfo,
                pDataSize,
                pData
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_encode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetEncodedVideoSessionParametersKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetEncodedVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkVideoEncodeSessionParametersGetInfoKHR *")]
                Ref<VideoEncodeSessionParametersGetInfoKHR> pVideoSessionParametersInfo,
            Ref<VideoEncodeSessionParametersFeedbackInfoKHR> pFeedbackInfo,
            [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (nuint* __dsl_pDataSize = pDataSize)
            fixed (VideoEncodeSessionParametersFeedbackInfoKHR* __dsl_pFeedbackInfo = pFeedbackInfo)
            fixed (
                VideoEncodeSessionParametersGetInfoKHR* __dsl_pVideoSessionParametersInfo =
                    pVideoSessionParametersInfo
            )
            {
                return (Result)GetEncodedVideoSessionParametersKHR(
                    device,
                    __dsl_pVideoSessionParametersInfo,
                    __dsl_pFeedbackInfo,
                    __dsl_pDataSize,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetEventStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetEventStatus(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkEvent")] EventHandle @event
        ) => Underlying.Value!.GetEventStatus(device, @event);

        [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetExternalComputeQueueDataNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetExternalComputeQueueDataNV(
            [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle externalQueue,
            ExternalComputeQueueDataParamsNV* @params,
            void* pData
        ) => Underlying.Value!.GetExternalComputeQueueDataNV(externalQueue, @params, pData);

        [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetExternalComputeQueueDataNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetExternalComputeQueueDataNV(
            [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle externalQueue,
            Ref<ExternalComputeQueueDataParamsNV> @params,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (ExternalComputeQueueDataParamsNV* __dsl_params = @params)
            {
                GetExternalComputeQueueDataNV(externalQueue, __dsl_params, __dsl_pData);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_fence_fd"],
            ImpliesSets = [
                "VK_KHR_external_fence_fd+VK_KHR_external_fence",
                "VK_KHR_external_fence_fd+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetFenceFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetFenceFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkFenceGetFdInfoKHR *")] FenceGetFdInfoKHR* pGetFdInfo,
            int* pFd
        ) => Underlying.Value!.GetFenceFdKHR(device, pGetFdInfo, pFd);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_fence_fd"],
            ImpliesSets = [
                "VK_KHR_external_fence_fd+VK_KHR_external_fence",
                "VK_KHR_external_fence_fd+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetFenceFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetFenceFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkFenceGetFdInfoKHR *")] Ref<FenceGetFdInfoKHR> pGetFdInfo,
            Ref<int> pFd
        )
        {
            fixed (int* __dsl_pFd = pFd)
            fixed (FenceGetFdInfoKHR* __dsl_pGetFdInfo = pGetFdInfo)
            {
                return (Result)GetFenceFdKHR(device, __dsl_pGetFdInfo, __dsl_pFd);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetFenceStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetFenceStatus(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkFence")] FenceHandle fence
        ) => Underlying.Value!.GetFenceStatus(device, fence);

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_properties"],
            ImpliesSets = [
                "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_properties+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetFramebufferTilePropertiesQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetFramebufferTilePropertiesQCOM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkFramebuffer")] FramebufferHandle framebuffer,
            [NativeTypeName("uint32_t *")] uint* pPropertiesCount,
            TilePropertiesQCOM* pProperties
        ) =>
            Underlying.Value!.GetFramebufferTilePropertiesQCOM(
                device,
                framebuffer,
                pPropertiesCount,
                pProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_properties"],
            ImpliesSets = [
                "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_properties+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetFramebufferTilePropertiesQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetFramebufferTilePropertiesQCOM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkFramebuffer")] FramebufferHandle framebuffer,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertiesCount,
            Ref<TilePropertiesQCOM> pProperties
        )
        {
            fixed (TilePropertiesQCOM* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertiesCount = pPropertiesCount)
            {
                return (Result)GetFramebufferTilePropertiesQCOM(
                    device,
                    framebuffer,
                    __dsl_pPropertiesCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetGeneratedCommandsMemoryRequirementsEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoEXT *")]
                GeneratedCommandsMemoryRequirementsInfoEXT* pInfo,
            MemoryRequirements2* pMemoryRequirements
        ) =>
            Underlying.Value!.GetGeneratedCommandsMemoryRequirementsEXT(
                device,
                pInfo,
                pMemoryRequirements
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetGeneratedCommandsMemoryRequirementsEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoEXT *")]
                Ref<GeneratedCommandsMemoryRequirementsInfoEXT> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (GeneratedCommandsMemoryRequirementsInfoEXT* __dsl_pInfo = pInfo)
            {
                GetGeneratedCommandsMemoryRequirementsEXT(
                    device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetGeneratedCommandsMemoryRequirementsNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoNV *")]
                GeneratedCommandsMemoryRequirementsInfoNV* pInfo,
            MemoryRequirements2* pMemoryRequirements
        ) =>
            Underlying.Value!.GetGeneratedCommandsMemoryRequirementsNV(
                device,
                pInfo,
                pMemoryRequirements
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetGeneratedCommandsMemoryRequirementsNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoNV *")]
                Ref<GeneratedCommandsMemoryRequirementsInfoNV> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (GeneratedCommandsMemoryRequirementsInfoNV* __dsl_pInfo = pInfo)
            {
                GetGeneratedCommandsMemoryRequirementsNV(
                    device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_image_drm_format_modifier"],
            ImpliesSets = [
                "VK_KHR_image_format_list+VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion",
                "VK_KHR_image_format_list+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageDrmFormatModifierPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetImageDrmFormatModifierPropertiesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            ImageDrmFormatModifierPropertiesEXT* pProperties
        ) => Underlying.Value!.GetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_image_drm_format_modifier"],
            ImpliesSets = [
                "VK_KHR_image_format_list+VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion",
                "VK_KHR_image_format_list+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageDrmFormatModifierPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetImageDrmFormatModifierPropertiesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            Ref<ImageDrmFormatModifierPropertiesEXT> pProperties
        )
        {
            fixed (ImageDrmFormatModifierPropertiesEXT* __dsl_pProperties = pProperties)
            {
                return (Result)GetImageDrmFormatModifierPropertiesEXT(
                    device,
                    image,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            MemoryRequirements* pMemoryRequirements
        ) => Underlying.Value!.GetImageMemoryRequirements(device, image, pMemoryRequirements);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            Ref<MemoryRequirements> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements* __dsl_pMemoryRequirements = pMemoryRequirements)
            {
                GetImageMemoryRequirements(device, image, __dsl_pMemoryRequirements);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageMemoryRequirements2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
                ImageMemoryRequirementsInfo2* pInfo,
            MemoryRequirements2* pMemoryRequirements
        ) => Underlying.Value!.GetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageMemoryRequirements2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
                Ref<ImageMemoryRequirementsInfo2> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (ImageMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
            {
                GetImageMemoryRequirements2(device, __dsl_pInfo, __dsl_pMemoryRequirements);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageMemoryRequirements2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
                ImageMemoryRequirementsInfo2* pInfo,
            MemoryRequirements2* pMemoryRequirements
        ) => Underlying.Value!.GetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);

        [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageMemoryRequirements2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
                Ref<ImageMemoryRequirementsInfo2> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (ImageMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
            {
                GetImageMemoryRequirements2KHR(device, __dsl_pInfo, __dsl_pMemoryRequirements);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageOpaqueCaptureDescriptorDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetImageOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageCaptureDescriptorDataInfoEXT *")]
                ImageCaptureDescriptorDataInfoEXT* pInfo,
            void* pData
        ) => Underlying.Value!.GetImageOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageOpaqueCaptureDescriptorDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetImageOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageCaptureDescriptorDataInfoEXT *")]
                Ref<ImageCaptureDescriptorDataInfoEXT> pInfo,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (ImageCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
            {
                return (Result)GetImageOpaqueCaptureDescriptorDataEXT(
                    device,
                    __dsl_pInfo,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSparseMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
            SparseImageMemoryRequirements* pSparseMemoryRequirements
        ) =>
            Underlying.Value!.GetImageSparseMemoryRequirements(
                device,
                image,
                pSparseMemoryRequirementCount,
                pSparseMemoryRequirements
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSparseMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
            Ref<SparseImageMemoryRequirements> pSparseMemoryRequirements
        )
        {
            fixed (
                SparseImageMemoryRequirements* __dsl_pSparseMemoryRequirements =
                    pSparseMemoryRequirements
            )
            fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
            {
                GetImageSparseMemoryRequirements(
                    device,
                    image,
                    __dsl_pSparseMemoryRequirementCount,
                    __dsl_pSparseMemoryRequirements
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSparseMemoryRequirements2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
                ImageSparseMemoryRequirementsInfo2* pInfo,
            [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
            SparseImageMemoryRequirements2* pSparseMemoryRequirements
        ) =>
            Underlying.Value!.GetImageSparseMemoryRequirements2(
                device,
                pInfo,
                pSparseMemoryRequirementCount,
                pSparseMemoryRequirements
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSparseMemoryRequirements2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
                Ref<ImageSparseMemoryRequirementsInfo2> pInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
            Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
        )
        {
            fixed (
                SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                    pSparseMemoryRequirements
            )
            fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
            fixed (ImageSparseMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
            {
                GetImageSparseMemoryRequirements2(
                    device,
                    __dsl_pInfo,
                    __dsl_pSparseMemoryRequirementCount,
                    __dsl_pSparseMemoryRequirements
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSparseMemoryRequirements2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
                ImageSparseMemoryRequirementsInfo2* pInfo,
            [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
            SparseImageMemoryRequirements2* pSparseMemoryRequirements
        ) =>
            Underlying.Value!.GetImageSparseMemoryRequirements2KHR(
                device,
                pInfo,
                pSparseMemoryRequirementCount,
                pSparseMemoryRequirements
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSparseMemoryRequirements2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
                Ref<ImageSparseMemoryRequirementsInfo2> pInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
            Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
        )
        {
            fixed (
                SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                    pSparseMemoryRequirements
            )
            fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
            fixed (ImageSparseMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
            {
                GetImageSparseMemoryRequirements2KHR(
                    device,
                    __dsl_pInfo,
                    __dsl_pSparseMemoryRequirementCount,
                    __dsl_pSparseMemoryRequirements
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSubresourceLayout(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            [NativeTypeName("const VkImageSubresource *")] ImageSubresource* pSubresource,
            SubresourceLayout* pLayout
        ) => Underlying.Value!.GetImageSubresourceLayout(device, image, pSubresource, pLayout);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSubresourceLayout(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            [NativeTypeName("const VkImageSubresource *")] Ref<ImageSubresource> pSubresource,
            Ref<SubresourceLayout> pLayout
        )
        {
            fixed (SubresourceLayout* __dsl_pLayout = pLayout)
            fixed (ImageSubresource* __dsl_pSubresource = pSubresource)
            {
                GetImageSubresourceLayout(device, image, __dsl_pSubresource, __dsl_pLayout);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSubresourceLayout2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
            SubresourceLayout2* pLayout
        ) => Underlying.Value!.GetImageSubresourceLayout2(device, image, pSubresource, pLayout);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSubresourceLayout2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
            Ref<SubresourceLayout2> pLayout
        )
        {
            fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
            fixed (ImageSubresource2* __dsl_pSubresource = pSubresource)
            {
                GetImageSubresourceLayout2(device, image, __dsl_pSubresource, __dsl_pLayout);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSubresourceLayout2EXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
            SubresourceLayout2* pLayout
        ) => Underlying.Value!.GetImageSubresourceLayout2EXT(device, image, pSubresource, pLayout);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSubresourceLayout2EXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
            Ref<SubresourceLayout2> pLayout
        )
        {
            fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
            fixed (ImageSubresource2* __dsl_pSubresource = pSubresource)
            {
                GetImageSubresourceLayout2EXT(device, image, __dsl_pSubresource, __dsl_pLayout);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSubresourceLayout2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
            SubresourceLayout2* pLayout
        ) => Underlying.Value!.GetImageSubresourceLayout2KHR(device, image, pSubresource, pLayout);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSubresourceLayout2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImage")] ImageHandle image,
            [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
            Ref<SubresourceLayout2> pLayout
        )
        {
            fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
            fixed (ImageSubresource2* __dsl_pSubresource = pSubresource)
            {
                GetImageSubresourceLayout2KHR(device, image, __dsl_pSubresource, __dsl_pLayout);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageViewAddressNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetImageViewAddressNVX(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImageView")] ImageViewHandle imageView,
            ImageViewAddressPropertiesNVX* pProperties
        ) => Underlying.Value!.GetImageViewAddressNVX(device, imageView, pProperties);

        [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageViewAddressNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetImageViewAddressNVX(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkImageView")] ImageViewHandle imageView,
            Ref<ImageViewAddressPropertiesNVX> pProperties
        )
        {
            fixed (ImageViewAddressPropertiesNVX* __dsl_pProperties = pProperties)
            {
                return (Result)GetImageViewAddressNVX(device, imageView, __dsl_pProperties);
            }
        }

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandle64NVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetImageViewHandle64NVX(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageViewHandleInfoNVX *")] ImageViewHandleInfoNVX* pInfo
        ) => Underlying.Value!.GetImageViewHandle64NVX(device, pInfo);

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandle64NVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetImageViewHandle64NVX(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageViewHandleInfoNVX *")] Ref<ImageViewHandleInfoNVX> pInfo
        )
        {
            fixed (ImageViewHandleInfoNVX* __dsl_pInfo = pInfo)
            {
                return (ulong)GetImageViewHandle64NVX(device, __dsl_pInfo);
            }
        }

        [return: NativeTypeName("uint32_t")]
        [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandleNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetImageViewHandleNVX(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageViewHandleInfoNVX *")] ImageViewHandleInfoNVX* pInfo
        ) => Underlying.Value!.GetImageViewHandleNVX(device, pInfo);

        [return: NativeTypeName("uint32_t")]
        [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandleNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetImageViewHandleNVX(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageViewHandleInfoNVX *")] Ref<ImageViewHandleInfoNVX> pInfo
        )
        {
            fixed (ImageViewHandleInfoNVX* __dsl_pInfo = pInfo)
            {
                return (uint)GetImageViewHandleNVX(device, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageViewOpaqueCaptureDescriptorDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetImageViewOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageViewCaptureDescriptorDataInfoEXT *")]
                ImageViewCaptureDescriptorDataInfoEXT* pInfo,
            void* pData
        ) => Underlying.Value!.GetImageViewOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageViewOpaqueCaptureDescriptorDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetImageViewOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImageViewCaptureDescriptorDataInfoEXT *")]
                Ref<ImageViewCaptureDescriptorDataInfoEXT> pInfo,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (ImageViewCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
            {
                return (Result)GetImageViewOpaqueCaptureDescriptorDataEXT(
                    device,
                    __dsl_pInfo,
                    __dsl_pData
                );
            }
        }

        [return: NativeTypeName("PFN_vkVoidFunction")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetInstanceProcAddr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PFNVkVoidFunction GetInstanceProcAddr(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("const char *")] sbyte* pName
        ) => Underlying.Value!.GetInstanceProcAddr(instance, pName);

        [return: NativeTypeName("PFN_vkVoidFunction")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetInstanceProcAddr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PFNVkVoidFunction GetInstanceProcAddr(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            [NativeTypeName("const char *")] Ref<sbyte> pName
        )
        {
            fixed (sbyte* __dsl_pName = pName)
            {
                return (PFNVkVoidFunction)GetInstanceProcAddr(instance, __dsl_pName);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetLatencyTimingsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetLatencyTimingsNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            GetLatencyMarkerInfoNV* pLatencyMarkerInfo
        ) => Underlying.Value!.GetLatencyTimingsNV(device, swapchain, pLatencyMarkerInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetLatencyTimingsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetLatencyTimingsNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            Ref<GetLatencyMarkerInfoNV> pLatencyMarkerInfo
        )
        {
            fixed (GetLatencyMarkerInfoNV* __dsl_pLatencyMarkerInfo = pLatencyMarkerInfo)
            {
                GetLatencyTimingsNV(device, swapchain, __dsl_pLatencyMarkerInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_memory_fd"],
            ImpliesSets = [
                "VK_KHR_external_memory_fd+VK_KHR_external_memory",
                "VK_KHR_external_memory_fd+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetMemoryFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMemoryGetFdInfoKHR *")] MemoryGetFdInfoKHR* pGetFdInfo,
            int* pFd
        ) => Underlying.Value!.GetMemoryFdKHR(device, pGetFdInfo, pFd);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_memory_fd"],
            ImpliesSets = [
                "VK_KHR_external_memory_fd+VK_KHR_external_memory",
                "VK_KHR_external_memory_fd+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetMemoryFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMemoryGetFdInfoKHR *")] Ref<MemoryGetFdInfoKHR> pGetFdInfo,
            Ref<int> pFd
        )
        {
            fixed (int* __dsl_pFd = pFd)
            fixed (MemoryGetFdInfoKHR* __dsl_pGetFdInfo = pGetFdInfo)
            {
                return (Result)GetMemoryFdKHR(device, __dsl_pGetFdInfo, __dsl_pFd);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_memory_fd"],
            ImpliesSets = [
                "VK_KHR_external_memory_fd+VK_KHR_external_memory",
                "VK_KHR_external_memory_fd+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetMemoryFdPropertiesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            ExternalMemoryHandleTypeFlags handleType,
            int fd,
            MemoryFdPropertiesKHR* pMemoryFdProperties
        ) =>
            Underlying.Value!.GetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_memory_fd"],
            ImpliesSets = [
                "VK_KHR_external_memory_fd+VK_KHR_external_memory",
                "VK_KHR_external_memory_fd+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetMemoryFdPropertiesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            ExternalMemoryHandleTypeFlags handleType,
            int fd,
            Ref<MemoryFdPropertiesKHR> pMemoryFdProperties
        )
        {
            fixed (MemoryFdPropertiesKHR* __dsl_pMemoryFdProperties = pMemoryFdProperties)
            {
                return (Result)GetMemoryFdPropertiesKHR(
                    device,
                    handleType,
                    fd,
                    __dsl_pMemoryFdProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_external_memory_host"],
            ImpliesSets = [
                "VK_EXT_external_memory_host+VK_KHR_external_memory",
                "VK_EXT_external_memory_host+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetMemoryHostPointerPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetMemoryHostPointerPropertiesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            ExternalMemoryHandleTypeFlags handleType,
            [NativeTypeName("const void *")] void* pHostPointer,
            MemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties
        ) =>
            Underlying.Value!.GetMemoryHostPointerPropertiesEXT(
                device,
                handleType,
                pHostPointer,
                pMemoryHostPointerProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_external_memory_host"],
            ImpliesSets = [
                "VK_EXT_external_memory_host+VK_KHR_external_memory",
                "VK_EXT_external_memory_host+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetMemoryHostPointerPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetMemoryHostPointerPropertiesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            ExternalMemoryHandleTypeFlags handleType,
            [NativeTypeName("const void *")] Ref pHostPointer,
            Ref<MemoryHostPointerPropertiesEXT> pMemoryHostPointerProperties
        )
        {
            fixed (
                MemoryHostPointerPropertiesEXT* __dsl_pMemoryHostPointerProperties =
                    pMemoryHostPointerProperties
            )
            fixed (void* __dsl_pHostPointer = pHostPointer)
            {
                return (Result)GetMemoryHostPointerPropertiesEXT(
                    device,
                    handleType,
                    __dsl_pHostPointer,
                    __dsl_pMemoryHostPointerProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_external_memory_rdma"],
            ImpliesSets = [
                "VK_NV_external_memory_rdma+VK_KHR_external_memory",
                "VK_NV_external_memory_rdma+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetMemoryRemoteAddressNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetMemoryRemoteAddressNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMemoryGetRemoteAddressInfoNV *")]
                MemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo,
            [NativeTypeName("VkRemoteAddressNV *")] void** pAddress
        ) =>
            Underlying.Value!.GetMemoryRemoteAddressNV(
                device,
                pMemoryGetRemoteAddressInfo,
                pAddress
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_external_memory_rdma"],
            ImpliesSets = [
                "VK_NV_external_memory_rdma+VK_KHR_external_memory",
                "VK_NV_external_memory_rdma+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetMemoryRemoteAddressNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetMemoryRemoteAddressNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMemoryGetRemoteAddressInfoNV *")]
                Ref<MemoryGetRemoteAddressInfoNV> pMemoryGetRemoteAddressInfo,
            [NativeTypeName("VkRemoteAddressNV *")] Ref2D pAddress
        )
        {
            fixed (void** __dsl_pAddress = pAddress)
            fixed (
                MemoryGetRemoteAddressInfoNV* __dsl_pMemoryGetRemoteAddressInfo =
                    pMemoryGetRemoteAddressInfo
            )
            {
                return (Result)GetMemoryRemoteAddressNV(
                    device,
                    __dsl_pMemoryGetRemoteAddressInfo,
                    __dsl_pAddress
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetMicromapBuildSizesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetMicromapBuildSizesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            AccelerationStructureBuildTypeKHR buildType,
            [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pBuildInfo,
            MicromapBuildSizesInfoEXT* pSizeInfo
        ) => Underlying.Value!.GetMicromapBuildSizesEXT(device, buildType, pBuildInfo, pSizeInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetMicromapBuildSizesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetMicromapBuildSizesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            AccelerationStructureBuildTypeKHR buildType,
            [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pBuildInfo,
            Ref<MicromapBuildSizesInfoEXT> pSizeInfo
        )
        {
            fixed (MicromapBuildSizesInfoEXT* __dsl_pSizeInfo = pSizeInfo)
            fixed (MicromapBuildInfoEXT* __dsl_pBuildInfo = pBuildInfo)
            {
                GetMicromapBuildSizesEXT(device, buildType, __dsl_pBuildInfo, __dsl_pSizeInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_partitioned_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPartitionedAccelerationStructuresBuildSizesNV"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPartitionedAccelerationStructuresBuildSizesNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPartitionedAccelerationStructureInstancesInputNV *")]
                PartitionedAccelerationStructureInstancesInputNV* pInfo,
            AccelerationStructureBuildSizesInfoKHR* pSizeInfo
        ) =>
            Underlying.Value!.GetPartitionedAccelerationStructuresBuildSizesNV(
                device,
                pInfo,
                pSizeInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_partitioned_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPartitionedAccelerationStructuresBuildSizesNV"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPartitionedAccelerationStructuresBuildSizesNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPartitionedAccelerationStructureInstancesInputNV *")]
                Ref<PartitionedAccelerationStructureInstancesInputNV> pInfo,
            Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
        )
        {
            fixed (AccelerationStructureBuildSizesInfoKHR* __dsl_pSizeInfo = pSizeInfo)
            fixed (PartitionedAccelerationStructureInstancesInputNV* __dsl_pInfo = pInfo)
            {
                GetPartitionedAccelerationStructuresBuildSizesNV(
                    device,
                    __dsl_pInfo,
                    __dsl_pSizeInfo
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_GOOGLE_display_timing"],
            ImpliesSets = ["VK_KHR_swapchain"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPastPresentationTimingGOOGLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPastPresentationTimingGoogle(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("uint32_t *")] uint* pPresentationTimingCount,
            PastPresentationTimingGoogle* pPresentationTimings
        ) =>
            Underlying.Value!.GetPastPresentationTimingGoogle(
                device,
                swapchain,
                pPresentationTimingCount,
                pPresentationTimings
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_GOOGLE_display_timing"],
            ImpliesSets = ["VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPastPresentationTimingGOOGLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPastPresentationTimingGoogle(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("uint32_t *")] Ref<uint> pPresentationTimingCount,
            Ref<PastPresentationTimingGoogle> pPresentationTimings
        )
        {
            fixed (PastPresentationTimingGoogle* __dsl_pPresentationTimings = pPresentationTimings)
            fixed (uint* __dsl_pPresentationTimingCount = pPresentationTimingCount)
            {
                return (Result)GetPastPresentationTimingGoogle(
                    device,
                    swapchain,
                    __dsl_pPresentationTimingCount,
                    __dsl_pPresentationTimings
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPerformanceParameterINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPerformanceParameterIntel(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            PerformanceParameterTypeIntel parameter,
            PerformanceValueIntel* pValue
        ) => Underlying.Value!.GetPerformanceParameterIntel(device, parameter, pValue);

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPerformanceParameterINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPerformanceParameterIntel(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            PerformanceParameterTypeIntel parameter,
            Ref<PerformanceValueIntel> pValue
        )
        {
            fixed (PerformanceValueIntel* __dsl_pValue = pValue)
            {
                return (Result)GetPerformanceParameterIntel(device, parameter, __dsl_pValue);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_calibrated_timestamps"],
            ImpliesSets = [
                "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCalibrateableTimeDomainsEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pTimeDomainCount,
            TimeDomainKHR* pTimeDomains
        ) =>
            Underlying.Value!.GetPhysicalDeviceCalibrateableTimeDomainsEXT(
                physicalDevice,
                pTimeDomainCount,
                pTimeDomains
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_calibrated_timestamps"],
            ImpliesSets = [
                "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCalibrateableTimeDomainsEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pTimeDomainCount,
            Ref<TimeDomainKHR> pTimeDomains
        )
        {
            fixed (TimeDomainKHR* __dsl_pTimeDomains = pTimeDomains)
            fixed (uint* __dsl_pTimeDomainCount = pTimeDomainCount)
            {
                return (Result)GetPhysicalDeviceCalibrateableTimeDomainsEXT(
                    physicalDevice,
                    __dsl_pTimeDomainCount,
                    __dsl_pTimeDomains
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_calibrated_timestamps"],
            ImpliesSets = [
                "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCalibrateableTimeDomainsKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pTimeDomainCount,
            TimeDomainKHR* pTimeDomains
        ) =>
            Underlying.Value!.GetPhysicalDeviceCalibrateableTimeDomainsKHR(
                physicalDevice,
                pTimeDomainCount,
                pTimeDomains
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_calibrated_timestamps"],
            ImpliesSets = [
                "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCalibrateableTimeDomainsKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pTimeDomainCount,
            Ref<TimeDomainKHR> pTimeDomains
        )
        {
            fixed (TimeDomainKHR* __dsl_pTimeDomains = pTimeDomains)
            fixed (uint* __dsl_pTimeDomainCount = pTimeDomainCount)
            {
                return (Result)GetPhysicalDeviceCalibrateableTimeDomainsKHR(
                    physicalDevice,
                    __dsl_pTimeDomainCount,
                    __dsl_pTimeDomains
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cooperative_matrix2"],
            ImpliesSets = ["VK_KHR_cooperative_matrix"]
        )]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            CooperativeMatrixFlexibleDimensionsPropertiesNV* pProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
                physicalDevice,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cooperative_matrix2"],
            ImpliesSets = ["VK_KHR_cooperative_matrix"]
        )]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<CooperativeMatrixFlexibleDimensionsPropertiesNV> pProperties
        )
        {
            fixed (CooperativeMatrixFlexibleDimensionsPropertiesNV* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            {
                return (Result)GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_cooperative_matrix"],
            ImpliesSets = [
                "VK_KHR_cooperative_matrix+VK_KHR_get_physical_device_properties2",
                "VK_KHR_cooperative_matrix+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            CooperativeMatrixPropertiesKHR* pProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
                physicalDevice,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_cooperative_matrix"],
            ImpliesSets = [
                "VK_KHR_cooperative_matrix+VK_KHR_get_physical_device_properties2",
                "VK_KHR_cooperative_matrix+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<CooperativeMatrixPropertiesKHR> pProperties
        )
        {
            fixed (CooperativeMatrixPropertiesKHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            {
                return (Result)GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cooperative_matrix"],
            ImpliesSets = [
                "VK_NV_cooperative_matrix+VK_KHR_get_physical_device_properties2",
                "VK_NV_cooperative_matrix+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCooperativeMatrixPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            CooperativeMatrixPropertiesNV* pProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceCooperativeMatrixPropertiesNV(
                physicalDevice,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cooperative_matrix"],
            ImpliesSets = [
                "VK_NV_cooperative_matrix+VK_KHR_get_physical_device_properties2",
                "VK_NV_cooperative_matrix+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCooperativeMatrixPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<CooperativeMatrixPropertiesNV> pProperties
        )
        {
            fixed (CooperativeMatrixPropertiesNV* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            {
                return (Result)GetPhysicalDeviceCooperativeMatrixPropertiesNV(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeVectorPropertiesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCooperativeVectorPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            CooperativeVectorPropertiesNV* pProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceCooperativeVectorPropertiesNV(
                physicalDevice,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeVectorPropertiesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCooperativeVectorPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<CooperativeVectorPropertiesNV> pProperties
        )
        {
            fixed (CooperativeVectorPropertiesNV* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            {
                return (Result)GetPhysicalDeviceCooperativeVectorPropertiesNV(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlaneProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceDisplayPlaneProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            DisplayPlaneProperties2KHR* pProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceDisplayPlaneProperties2KHR(
                physicalDevice,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlaneProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceDisplayPlaneProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<DisplayPlaneProperties2KHR> pProperties
        )
        {
            fixed (DisplayPlaneProperties2KHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            {
                return (Result)GetPhysicalDeviceDisplayPlaneProperties2KHR(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlanePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceDisplayPlanePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            DisplayPlanePropertiesKHR* pProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceDisplayPlanePropertiesKHR(
                physicalDevice,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlanePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceDisplayPlanePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<DisplayPlanePropertiesKHR> pProperties
        )
        {
            fixed (DisplayPlanePropertiesKHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            {
                return (Result)GetPhysicalDeviceDisplayPlanePropertiesKHR(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceDisplayProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            DisplayProperties2KHR* pProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceDisplayProperties2KHR(
                physicalDevice,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceDisplayProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<DisplayProperties2KHR> pProperties
        )
        {
            fixed (DisplayProperties2KHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            {
                return (Result)GetPhysicalDeviceDisplayProperties2KHR(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceDisplayPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            DisplayPropertiesKHR* pProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceDisplayPropertiesKHR(
                physicalDevice,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceDisplayPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<DisplayPropertiesKHR> pProperties
        )
        {
            fixed (DisplayPropertiesKHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            {
                return (Result)GetPhysicalDeviceDisplayPropertiesKHR(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalBufferProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
                PhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
            ExternalBufferProperties* pExternalBufferProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceExternalBufferProperties(
                physicalDevice,
                pExternalBufferInfo,
                pExternalBufferProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalBufferProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
                Ref<PhysicalDeviceExternalBufferInfo> pExternalBufferInfo,
            Ref<ExternalBufferProperties> pExternalBufferProperties
        )
        {
            fixed (
                ExternalBufferProperties* __dsl_pExternalBufferProperties =
                    pExternalBufferProperties
            )
            fixed (
                PhysicalDeviceExternalBufferInfo* __dsl_pExternalBufferInfo = pExternalBufferInfo
            )
            {
                GetPhysicalDeviceExternalBufferProperties(
                    physicalDevice,
                    __dsl_pExternalBufferInfo,
                    __dsl_pExternalBufferProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_memory_capabilities"],
            ImpliesSets = [
                "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
                "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalBufferPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
                PhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
            ExternalBufferProperties* pExternalBufferProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceExternalBufferPropertiesKHR(
                physicalDevice,
                pExternalBufferInfo,
                pExternalBufferProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_memory_capabilities"],
            ImpliesSets = [
                "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
                "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalBufferPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
                Ref<PhysicalDeviceExternalBufferInfo> pExternalBufferInfo,
            Ref<ExternalBufferProperties> pExternalBufferProperties
        )
        {
            fixed (
                ExternalBufferProperties* __dsl_pExternalBufferProperties =
                    pExternalBufferProperties
            )
            fixed (
                PhysicalDeviceExternalBufferInfo* __dsl_pExternalBufferInfo = pExternalBufferInfo
            )
            {
                GetPhysicalDeviceExternalBufferPropertiesKHR(
                    physicalDevice,
                    __dsl_pExternalBufferInfo,
                    __dsl_pExternalBufferProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFenceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalFenceProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
                PhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
            ExternalFenceProperties* pExternalFenceProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceExternalFenceProperties(
                physicalDevice,
                pExternalFenceInfo,
                pExternalFenceProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFenceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalFenceProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
                Ref<PhysicalDeviceExternalFenceInfo> pExternalFenceInfo,
            Ref<ExternalFenceProperties> pExternalFenceProperties
        )
        {
            fixed (
                ExternalFenceProperties* __dsl_pExternalFenceProperties = pExternalFenceProperties
            )
            fixed (PhysicalDeviceExternalFenceInfo* __dsl_pExternalFenceInfo = pExternalFenceInfo)
            {
                GetPhysicalDeviceExternalFenceProperties(
                    physicalDevice,
                    __dsl_pExternalFenceInfo,
                    __dsl_pExternalFenceProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_fence_capabilities"],
            ImpliesSets = [
                "VK_KHR_external_fence_capabilities+VK_KHR_get_physical_device_properties2",
                "VK_KHR_external_fence_capabilities+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFencePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalFencePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
                PhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
            ExternalFenceProperties* pExternalFenceProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceExternalFencePropertiesKHR(
                physicalDevice,
                pExternalFenceInfo,
                pExternalFenceProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_fence_capabilities"],
            ImpliesSets = [
                "VK_KHR_external_fence_capabilities+VK_KHR_get_physical_device_properties2",
                "VK_KHR_external_fence_capabilities+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFencePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalFencePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
                Ref<PhysicalDeviceExternalFenceInfo> pExternalFenceInfo,
            Ref<ExternalFenceProperties> pExternalFenceProperties
        )
        {
            fixed (
                ExternalFenceProperties* __dsl_pExternalFenceProperties = pExternalFenceProperties
            )
            fixed (PhysicalDeviceExternalFenceInfo* __dsl_pExternalFenceInfo = pExternalFenceInfo)
            {
                GetPhysicalDeviceExternalFencePropertiesKHR(
                    physicalDevice,
                    __dsl_pExternalFenceInfo,
                    __dsl_pExternalFenceProperties
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NV_external_memory_capabilities"])]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceExternalImageFormatPropertiesNV"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceExternalImageFormatPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Format format,
            ImageType type,
            ImageTiling tiling,
            [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
            [NativeTypeName("VkImageCreateFlags")] ImageCreateFlags flags,
            [NativeTypeName("VkExternalMemoryHandleTypeFlagsNV")]
                ExternalMemoryHandleTypeFlagsNV externalHandleType,
            ExternalImageFormatPropertiesNV* pExternalImageFormatProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceExternalImageFormatPropertiesNV(
                physicalDevice,
                format,
                type,
                tiling,
                usage,
                flags,
                externalHandleType,
                pExternalImageFormatProperties
            );

        [SupportedApiProfile("vulkan", ["VK_NV_external_memory_capabilities"])]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceExternalImageFormatPropertiesNV"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceExternalImageFormatPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Format format,
            ImageType type,
            ImageTiling tiling,
            [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
            [NativeTypeName("VkImageCreateFlags")] ImageCreateFlags flags,
            [NativeTypeName("VkExternalMemoryHandleTypeFlagsNV")]
                ExternalMemoryHandleTypeFlagsNV externalHandleType,
            Ref<ExternalImageFormatPropertiesNV> pExternalImageFormatProperties
        )
        {
            fixed (
                ExternalImageFormatPropertiesNV* __dsl_pExternalImageFormatProperties =
                    pExternalImageFormatProperties
            )
            {
                return (Result)GetPhysicalDeviceExternalImageFormatPropertiesNV(
                    physicalDevice,
                    format,
                    type,
                    tiling,
                    usage,
                    flags,
                    externalHandleType,
                    __dsl_pExternalImageFormatProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphoreProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalSemaphoreProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
                PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
            ExternalSemaphoreProperties* pExternalSemaphoreProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceExternalSemaphoreProperties(
                physicalDevice,
                pExternalSemaphoreInfo,
                pExternalSemaphoreProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphoreProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalSemaphoreProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
                Ref<PhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo,
            Ref<ExternalSemaphoreProperties> pExternalSemaphoreProperties
        )
        {
            fixed (
                ExternalSemaphoreProperties* __dsl_pExternalSemaphoreProperties =
                    pExternalSemaphoreProperties
            )
            fixed (
                PhysicalDeviceExternalSemaphoreInfo* __dsl_pExternalSemaphoreInfo =
                    pExternalSemaphoreInfo
            )
            {
                GetPhysicalDeviceExternalSemaphoreProperties(
                    physicalDevice,
                    __dsl_pExternalSemaphoreInfo,
                    __dsl_pExternalSemaphoreProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_semaphore_capabilities"],
            ImpliesSets = [
                "VK_KHR_external_semaphore_capabilities+VK_KHR_get_physical_device_properties2",
                "VK_KHR_external_semaphore_capabilities+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalSemaphorePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
                PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
            ExternalSemaphoreProperties* pExternalSemaphoreProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceExternalSemaphorePropertiesKHR(
                physicalDevice,
                pExternalSemaphoreInfo,
                pExternalSemaphoreProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_semaphore_capabilities"],
            ImpliesSets = [
                "VK_KHR_external_semaphore_capabilities+VK_KHR_get_physical_device_properties2",
                "VK_KHR_external_semaphore_capabilities+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalSemaphorePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
                Ref<PhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo,
            Ref<ExternalSemaphoreProperties> pExternalSemaphoreProperties
        )
        {
            fixed (
                ExternalSemaphoreProperties* __dsl_pExternalSemaphoreProperties =
                    pExternalSemaphoreProperties
            )
            fixed (
                PhysicalDeviceExternalSemaphoreInfo* __dsl_pExternalSemaphoreInfo =
                    pExternalSemaphoreInfo
            )
            {
                GetPhysicalDeviceExternalSemaphorePropertiesKHR(
                    physicalDevice,
                    __dsl_pExternalSemaphoreInfo,
                    __dsl_pExternalSemaphoreProperties
                );
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalTensorPropertiesARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalTensorPropertiesARM(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalTensorInfoARM *")]
                PhysicalDeviceExternalTensorInfoARM* pExternalTensorInfo,
            ExternalTensorPropertiesARM* pExternalTensorProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceExternalTensorPropertiesARM(
                physicalDevice,
                pExternalTensorInfo,
                pExternalTensorProperties
            );

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalTensorPropertiesARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalTensorPropertiesARM(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalTensorInfoARM *")]
                Ref<PhysicalDeviceExternalTensorInfoARM> pExternalTensorInfo,
            Ref<ExternalTensorPropertiesARM> pExternalTensorProperties
        )
        {
            fixed (
                ExternalTensorPropertiesARM* __dsl_pExternalTensorProperties =
                    pExternalTensorProperties
            )
            fixed (
                PhysicalDeviceExternalTensorInfoARM* __dsl_pExternalTensorInfo = pExternalTensorInfo
            )
            {
                GetPhysicalDeviceExternalTensorPropertiesARM(
                    physicalDevice,
                    __dsl_pExternalTensorInfo,
                    __dsl_pExternalTensorProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFeatures(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            PhysicalDeviceFeatures* pFeatures
        ) => Underlying.Value!.GetPhysicalDeviceFeatures(physicalDevice, pFeatures);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFeatures(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Ref<PhysicalDeviceFeatures> pFeatures
        )
        {
            fixed (PhysicalDeviceFeatures* __dsl_pFeatures = pFeatures)
            {
                GetPhysicalDeviceFeatures(physicalDevice, __dsl_pFeatures);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFeatures2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            PhysicalDeviceFeatures2* pFeatures
        ) => Underlying.Value!.GetPhysicalDeviceFeatures2(physicalDevice, pFeatures);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFeatures2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Ref<PhysicalDeviceFeatures2> pFeatures
        )
        {
            fixed (PhysicalDeviceFeatures2* __dsl_pFeatures = pFeatures)
            {
                GetPhysicalDeviceFeatures2(physicalDevice, __dsl_pFeatures);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFeatures2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            PhysicalDeviceFeatures2* pFeatures
        ) => Underlying.Value!.GetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFeatures2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Ref<PhysicalDeviceFeatures2> pFeatures
        )
        {
            fixed (PhysicalDeviceFeatures2* __dsl_pFeatures = pFeatures)
            {
                GetPhysicalDeviceFeatures2KHR(physicalDevice, __dsl_pFeatures);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFormatProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Format format,
            FormatProperties* pFormatProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceFormatProperties(
                physicalDevice,
                format,
                pFormatProperties
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFormatProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Format format,
            Ref<FormatProperties> pFormatProperties
        )
        {
            fixed (FormatProperties* __dsl_pFormatProperties = pFormatProperties)
            {
                GetPhysicalDeviceFormatProperties(physicalDevice, format, __dsl_pFormatProperties);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFormatProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Format format,
            FormatProperties2* pFormatProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceFormatProperties2(
                physicalDevice,
                format,
                pFormatProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFormatProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Format format,
            Ref<FormatProperties2> pFormatProperties
        )
        {
            fixed (FormatProperties2* __dsl_pFormatProperties = pFormatProperties)
            {
                GetPhysicalDeviceFormatProperties2(physicalDevice, format, __dsl_pFormatProperties);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFormatProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Format format,
            FormatProperties2* pFormatProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceFormatProperties2KHR(
                physicalDevice,
                format,
                pFormatProperties
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFormatProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Format format,
            Ref<FormatProperties2> pFormatProperties
        )
        {
            fixed (FormatProperties2* __dsl_pFormatProperties = pFormatProperties)
            {
                GetPhysicalDeviceFormatProperties2KHR(
                    physicalDevice,
                    format,
                    __dsl_pFormatProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_fragment_shading_rate"],
            ImpliesSets = [
                "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_create_renderpass2+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFragmentShadingRatesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceFragmentShadingRatesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pFragmentShadingRateCount,
            PhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates
        ) =>
            Underlying.Value!.GetPhysicalDeviceFragmentShadingRatesKHR(
                physicalDevice,
                pFragmentShadingRateCount,
                pFragmentShadingRates
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_fragment_shading_rate"],
            ImpliesSets = [
                "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_create_renderpass2+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFragmentShadingRatesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceFragmentShadingRatesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pFragmentShadingRateCount,
            Ref<PhysicalDeviceFragmentShadingRateKHR> pFragmentShadingRates
        )
        {
            fixed (
                PhysicalDeviceFragmentShadingRateKHR* __dsl_pFragmentShadingRates =
                    pFragmentShadingRates
            )
            fixed (uint* __dsl_pFragmentShadingRateCount = pFragmentShadingRateCount)
            {
                return (Result)GetPhysicalDeviceFragmentShadingRatesKHR(
                    physicalDevice,
                    __dsl_pFragmentShadingRateCount,
                    __dsl_pFragmentShadingRates
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceImageFormatProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Format format,
            ImageType type,
            ImageTiling tiling,
            [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
            [NativeTypeName("VkImageCreateFlags")] ImageCreateFlags flags,
            ImageFormatProperties* pImageFormatProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceImageFormatProperties(
                physicalDevice,
                format,
                type,
                tiling,
                usage,
                flags,
                pImageFormatProperties
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceImageFormatProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Format format,
            ImageType type,
            ImageTiling tiling,
            [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
            [NativeTypeName("VkImageCreateFlags")] ImageCreateFlags flags,
            Ref<ImageFormatProperties> pImageFormatProperties
        )
        {
            fixed (ImageFormatProperties* __dsl_pImageFormatProperties = pImageFormatProperties)
            {
                return (Result)GetPhysicalDeviceImageFormatProperties(
                    physicalDevice,
                    format,
                    type,
                    tiling,
                    usage,
                    flags,
                    __dsl_pImageFormatProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceImageFormatProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
                PhysicalDeviceImageFormatInfo2* pImageFormatInfo,
            ImageFormatProperties2* pImageFormatProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceImageFormatProperties2(
                physicalDevice,
                pImageFormatInfo,
                pImageFormatProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceImageFormatProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
                Ref<PhysicalDeviceImageFormatInfo2> pImageFormatInfo,
            Ref<ImageFormatProperties2> pImageFormatProperties
        )
        {
            fixed (ImageFormatProperties2* __dsl_pImageFormatProperties = pImageFormatProperties)
            fixed (PhysicalDeviceImageFormatInfo2* __dsl_pImageFormatInfo = pImageFormatInfo)
            {
                return (Result)GetPhysicalDeviceImageFormatProperties2(
                    physicalDevice,
                    __dsl_pImageFormatInfo,
                    __dsl_pImageFormatProperties
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceImageFormatProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
                PhysicalDeviceImageFormatInfo2* pImageFormatInfo,
            ImageFormatProperties2* pImageFormatProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceImageFormatProperties2KHR(
                physicalDevice,
                pImageFormatInfo,
                pImageFormatProperties
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceImageFormatProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
                Ref<PhysicalDeviceImageFormatInfo2> pImageFormatInfo,
            Ref<ImageFormatProperties2> pImageFormatProperties
        )
        {
            fixed (ImageFormatProperties2* __dsl_pImageFormatProperties = pImageFormatProperties)
            fixed (PhysicalDeviceImageFormatInfo2* __dsl_pImageFormatInfo = pImageFormatInfo)
            {
                return (Result)GetPhysicalDeviceImageFormatProperties2KHR(
                    physicalDevice,
                    __dsl_pImageFormatInfo,
                    __dsl_pImageFormatProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceMemoryProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            PhysicalDeviceMemoryProperties* pMemoryProperties
        ) => Underlying.Value!.GetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceMemoryProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Ref<PhysicalDeviceMemoryProperties> pMemoryProperties
        )
        {
            fixed (PhysicalDeviceMemoryProperties* __dsl_pMemoryProperties = pMemoryProperties)
            {
                GetPhysicalDeviceMemoryProperties(physicalDevice, __dsl_pMemoryProperties);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceMemoryProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            PhysicalDeviceMemoryProperties2* pMemoryProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceMemoryProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Ref<PhysicalDeviceMemoryProperties2> pMemoryProperties
        )
        {
            fixed (PhysicalDeviceMemoryProperties2* __dsl_pMemoryProperties = pMemoryProperties)
            {
                GetPhysicalDeviceMemoryProperties2(physicalDevice, __dsl_pMemoryProperties);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceMemoryProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            PhysicalDeviceMemoryProperties2* pMemoryProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceMemoryProperties2KHR(
                physicalDevice,
                pMemoryProperties
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceMemoryProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Ref<PhysicalDeviceMemoryProperties2> pMemoryProperties
        )
        {
            fixed (PhysicalDeviceMemoryProperties2* __dsl_pMemoryProperties = pMemoryProperties)
            {
                GetPhysicalDeviceMemoryProperties2KHR(physicalDevice, __dsl_pMemoryProperties);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_sample_locations"],
            ImpliesSets = [
                "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
                "VK_EXT_sample_locations+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMultisamplePropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceMultisamplePropertiesEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            SampleCountFlags samples,
            MultisamplePropertiesEXT* pMultisampleProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceMultisamplePropertiesEXT(
                physicalDevice,
                samples,
                pMultisampleProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_sample_locations"],
            ImpliesSets = [
                "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
                "VK_EXT_sample_locations+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMultisamplePropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceMultisamplePropertiesEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            SampleCountFlags samples,
            Ref<MultisamplePropertiesEXT> pMultisampleProperties
        )
        {
            fixed (MultisamplePropertiesEXT* __dsl_pMultisampleProperties = pMultisampleProperties)
            {
                GetPhysicalDeviceMultisamplePropertiesEXT(
                    physicalDevice,
                    samples,
                    __dsl_pMultisampleProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceOpticalFlowImageFormatsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceOpticalFlowImageFormatsNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkOpticalFlowImageFormatInfoNV *")]
                OpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo,
            [NativeTypeName("uint32_t *")] uint* pFormatCount,
            OpticalFlowImageFormatPropertiesNV* pImageFormatProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceOpticalFlowImageFormatsNV(
                physicalDevice,
                pOpticalFlowImageFormatInfo,
                pFormatCount,
                pImageFormatProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceOpticalFlowImageFormatsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceOpticalFlowImageFormatsNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkOpticalFlowImageFormatInfoNV *")]
                Ref<OpticalFlowImageFormatInfoNV> pOpticalFlowImageFormatInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pFormatCount,
            Ref<OpticalFlowImageFormatPropertiesNV> pImageFormatProperties
        )
        {
            fixed (
                OpticalFlowImageFormatPropertiesNV* __dsl_pImageFormatProperties =
                    pImageFormatProperties
            )
            fixed (uint* __dsl_pFormatCount = pFormatCount)
            fixed (
                OpticalFlowImageFormatInfoNV* __dsl_pOpticalFlowImageFormatInfo =
                    pOpticalFlowImageFormatInfo
            )
            {
                return (Result)GetPhysicalDeviceOpticalFlowImageFormatsNV(
                    physicalDevice,
                    __dsl_pOpticalFlowImageFormatInfo,
                    __dsl_pFormatCount,
                    __dsl_pImageFormatProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDevicePresentRectanglesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDevicePresentRectanglesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            [NativeTypeName("uint32_t *")] uint* pRectCount,
            Rect2D* pRects
        ) =>
            Underlying.Value!.GetPhysicalDevicePresentRectanglesKHR(
                physicalDevice,
                surface,
                pRectCount,
                pRects
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDevicePresentRectanglesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDevicePresentRectanglesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            [NativeTypeName("uint32_t *")] Ref<uint> pRectCount,
            Ref<Rect2D> pRects
        )
        {
            fixed (Rect2D* __dsl_pRects = pRects)
            fixed (uint* __dsl_pRectCount = pRectCount)
            {
                return (Result)GetPhysicalDevicePresentRectanglesKHR(
                    physicalDevice,
                    surface,
                    __dsl_pRectCount,
                    __dsl_pRects
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            PhysicalDeviceProperties* pProperties
        ) => Underlying.Value!.GetPhysicalDeviceProperties(physicalDevice, pProperties);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Ref<PhysicalDeviceProperties> pProperties
        )
        {
            fixed (PhysicalDeviceProperties* __dsl_pProperties = pProperties)
            {
                GetPhysicalDeviceProperties(physicalDevice, __dsl_pProperties);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            PhysicalDeviceProperties2* pProperties
        ) => Underlying.Value!.GetPhysicalDeviceProperties2(physicalDevice, pProperties);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Ref<PhysicalDeviceProperties2> pProperties
        )
        {
            fixed (PhysicalDeviceProperties2* __dsl_pProperties = pProperties)
            {
                GetPhysicalDeviceProperties2(physicalDevice, __dsl_pProperties);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            PhysicalDeviceProperties2* pProperties
        ) => Underlying.Value!.GetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Ref<PhysicalDeviceProperties2> pProperties
        )
        {
            fixed (PhysicalDeviceProperties2* __dsl_pProperties = pProperties)
            {
                GetPhysicalDeviceProperties2KHR(physicalDevice, __dsl_pProperties);
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM *")]
                PhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM* pQueueFamilyDataGraphProcessingEngineInfo,
            QueueFamilyDataGraphProcessingEnginePropertiesARM* pQueueFamilyDataGraphProcessingEngineProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(
                physicalDevice,
                pQueueFamilyDataGraphProcessingEngineInfo,
                pQueueFamilyDataGraphProcessingEngineProperties
            );

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM *")]
                Ref<PhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM> pQueueFamilyDataGraphProcessingEngineInfo,
            Ref<QueueFamilyDataGraphProcessingEnginePropertiesARM> pQueueFamilyDataGraphProcessingEngineProperties
        )
        {
            fixed (
                QueueFamilyDataGraphProcessingEnginePropertiesARM* __dsl_pQueueFamilyDataGraphProcessingEngineProperties =
                    pQueueFamilyDataGraphProcessingEngineProperties
            )
            fixed (
                PhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM* __dsl_pQueueFamilyDataGraphProcessingEngineInfo =
                    pQueueFamilyDataGraphProcessingEngineInfo
            )
            {
                GetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(
                    physicalDevice,
                    __dsl_pQueueFamilyDataGraphProcessingEngineInfo,
                    __dsl_pQueueFamilyDataGraphProcessingEngineProperties
                );
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t")] uint queueFamilyIndex,
            [NativeTypeName("uint32_t *")] uint* pQueueFamilyDataGraphPropertyCount,
            QueueFamilyDataGraphPropertiesARM* pQueueFamilyDataGraphProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(
                physicalDevice,
                queueFamilyIndex,
                pQueueFamilyDataGraphPropertyCount,
                pQueueFamilyDataGraphProperties
            );

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t")] uint queueFamilyIndex,
            [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyDataGraphPropertyCount,
            Ref<QueueFamilyDataGraphPropertiesARM> pQueueFamilyDataGraphProperties
        )
        {
            fixed (
                QueueFamilyDataGraphPropertiesARM* __dsl_pQueueFamilyDataGraphProperties =
                    pQueueFamilyDataGraphProperties
            )
            fixed (
                uint* __dsl_pQueueFamilyDataGraphPropertyCount = pQueueFamilyDataGraphPropertyCount
            )
            {
                return (Result)GetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(
                    physicalDevice,
                    queueFamilyIndex,
                    __dsl_pQueueFamilyDataGraphPropertyCount,
                    __dsl_pQueueFamilyDataGraphProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkQueryPoolPerformanceCreateInfoKHR *")]
                QueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo,
            [NativeTypeName("uint32_t *")] uint* pNumPasses
        ) =>
            Underlying.Value!.GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
                physicalDevice,
                pPerformanceQueryCreateInfo,
                pNumPasses
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkQueryPoolPerformanceCreateInfoKHR *")]
                Ref<QueryPoolPerformanceCreateInfoKHR> pPerformanceQueryCreateInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pNumPasses
        )
        {
            fixed (uint* __dsl_pNumPasses = pNumPasses)
            fixed (
                QueryPoolPerformanceCreateInfoKHR* __dsl_pPerformanceQueryCreateInfo =
                    pPerformanceQueryCreateInfo
            )
            {
                GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
                    physicalDevice,
                    __dsl_pPerformanceQueryCreateInfo,
                    __dsl_pNumPasses
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceQueueFamilyProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
            QueueFamilyProperties* pQueueFamilyProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceQueueFamilyProperties(
                physicalDevice,
                pQueueFamilyPropertyCount,
                pQueueFamilyProperties
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceQueueFamilyProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
            Ref<QueueFamilyProperties> pQueueFamilyProperties
        )
        {
            fixed (QueueFamilyProperties* __dsl_pQueueFamilyProperties = pQueueFamilyProperties)
            fixed (uint* __dsl_pQueueFamilyPropertyCount = pQueueFamilyPropertyCount)
            {
                GetPhysicalDeviceQueueFamilyProperties(
                    physicalDevice,
                    __dsl_pQueueFamilyPropertyCount,
                    __dsl_pQueueFamilyProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceQueueFamilyProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
            QueueFamilyProperties2* pQueueFamilyProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceQueueFamilyProperties2(
                physicalDevice,
                pQueueFamilyPropertyCount,
                pQueueFamilyProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceQueueFamilyProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
            Ref<QueueFamilyProperties2> pQueueFamilyProperties
        )
        {
            fixed (QueueFamilyProperties2* __dsl_pQueueFamilyProperties = pQueueFamilyProperties)
            fixed (uint* __dsl_pQueueFamilyPropertyCount = pQueueFamilyPropertyCount)
            {
                GetPhysicalDeviceQueueFamilyProperties2(
                    physicalDevice,
                    __dsl_pQueueFamilyPropertyCount,
                    __dsl_pQueueFamilyProperties
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceQueueFamilyProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
            QueueFamilyProperties2* pQueueFamilyProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceQueueFamilyProperties2KHR(
                physicalDevice,
                pQueueFamilyPropertyCount,
                pQueueFamilyProperties
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceQueueFamilyProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
            Ref<QueueFamilyProperties2> pQueueFamilyProperties
        )
        {
            fixed (QueueFamilyProperties2* __dsl_pQueueFamilyProperties = pQueueFamilyProperties)
            fixed (uint* __dsl_pQueueFamilyPropertyCount = pQueueFamilyPropertyCount)
            {
                GetPhysicalDeviceQueueFamilyProperties2KHR(
                    physicalDevice,
                    __dsl_pQueueFamilyPropertyCount,
                    __dsl_pQueueFamilyProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceSparseImageFormatProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Format format,
            ImageType type,
            SampleCountFlags samples,
            [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
            ImageTiling tiling,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            SparseImageFormatProperties* pProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceSparseImageFormatProperties(
                physicalDevice,
                format,
                type,
                samples,
                usage,
                tiling,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceSparseImageFormatProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            Format format,
            ImageType type,
            SampleCountFlags samples,
            [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
            ImageTiling tiling,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<SparseImageFormatProperties> pProperties
        )
        {
            fixed (SparseImageFormatProperties* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            {
                GetPhysicalDeviceSparseImageFormatProperties(
                    physicalDevice,
                    format,
                    type,
                    samples,
                    usage,
                    tiling,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceSparseImageFormatProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
                PhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            SparseImageFormatProperties2* pProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceSparseImageFormatProperties2(
                physicalDevice,
                pFormatInfo,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceSparseImageFormatProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
                Ref<PhysicalDeviceSparseImageFormatInfo2> pFormatInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<SparseImageFormatProperties2> pProperties
        )
        {
            fixed (SparseImageFormatProperties2* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (PhysicalDeviceSparseImageFormatInfo2* __dsl_pFormatInfo = pFormatInfo)
            {
                GetPhysicalDeviceSparseImageFormatProperties2(
                    physicalDevice,
                    __dsl_pFormatInfo,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2KHR"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
                PhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            SparseImageFormatProperties2* pProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceSparseImageFormatProperties2KHR(
                physicalDevice,
                pFormatInfo,
                pPropertyCount,
                pProperties
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2KHR"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
                Ref<PhysicalDeviceSparseImageFormatInfo2> pFormatInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<SparseImageFormatProperties2> pProperties
        )
        {
            fixed (SparseImageFormatProperties2* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (PhysicalDeviceSparseImageFormatInfo2* __dsl_pFormatInfo = pFormatInfo)
            {
                GetPhysicalDeviceSparseImageFormatProperties2KHR(
                    physicalDevice,
                    __dsl_pFormatInfo,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_coverage_reduction_mode"],
            ImpliesSets = [
                "VK_NV_framebuffer_mixed_samples+VK_KHR_get_physical_device_properties2",
                "VK_NV_framebuffer_mixed_samples+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pCombinationCount,
            FramebufferMixedSamplesCombinationNV* pCombinations
        ) =>
            Underlying.Value!.GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
                physicalDevice,
                pCombinationCount,
                pCombinations
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_coverage_reduction_mode"],
            ImpliesSets = [
                "VK_NV_framebuffer_mixed_samples+VK_KHR_get_physical_device_properties2",
                "VK_NV_framebuffer_mixed_samples+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pCombinationCount,
            Ref<FramebufferMixedSamplesCombinationNV> pCombinations
        )
        {
            fixed (FramebufferMixedSamplesCombinationNV* __dsl_pCombinations = pCombinations)
            fixed (uint* __dsl_pCombinationCount = pCombinationCount)
            {
                return (Result)GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
                    physicalDevice,
                    __dsl_pCombinationCount,
                    __dsl_pCombinations
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_surface_counter"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceCapabilities2EXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            SurfaceCapabilities2EXT* pSurfaceCapabilities
        ) =>
            Underlying.Value!.GetPhysicalDeviceSurfaceCapabilities2EXT(
                physicalDevice,
                surface,
                pSurfaceCapabilities
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_surface_counter"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceCapabilities2EXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            Ref<SurfaceCapabilities2EXT> pSurfaceCapabilities
        )
        {
            fixed (SurfaceCapabilities2EXT* __dsl_pSurfaceCapabilities = pSurfaceCapabilities)
            {
                return (Result)GetPhysicalDeviceSurfaceCapabilities2EXT(
                    physicalDevice,
                    surface,
                    __dsl_pSurfaceCapabilities
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_surface_capabilities2"],
            ImpliesSets = ["VK_KHR_surface"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceCapabilities2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
                PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
            SurfaceCapabilities2KHR* pSurfaceCapabilities
        ) =>
            Underlying.Value!.GetPhysicalDeviceSurfaceCapabilities2KHR(
                physicalDevice,
                pSurfaceInfo,
                pSurfaceCapabilities
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_surface_capabilities2"],
            ImpliesSets = ["VK_KHR_surface"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceCapabilities2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
                Ref<PhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo,
            Ref<SurfaceCapabilities2KHR> pSurfaceCapabilities
        )
        {
            fixed (SurfaceCapabilities2KHR* __dsl_pSurfaceCapabilities = pSurfaceCapabilities)
            fixed (PhysicalDeviceSurfaceInfo2KHR* __dsl_pSurfaceInfo = pSurfaceInfo)
            {
                return (Result)GetPhysicalDeviceSurfaceCapabilities2KHR(
                    physicalDevice,
                    __dsl_pSurfaceInfo,
                    __dsl_pSurfaceCapabilities
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilitiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceCapabilitiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            SurfaceCapabilitiesKHR* pSurfaceCapabilities
        ) =>
            Underlying.Value!.GetPhysicalDeviceSurfaceCapabilitiesKHR(
                physicalDevice,
                surface,
                pSurfaceCapabilities
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilitiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceCapabilitiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            Ref<SurfaceCapabilitiesKHR> pSurfaceCapabilities
        )
        {
            fixed (SurfaceCapabilitiesKHR* __dsl_pSurfaceCapabilities = pSurfaceCapabilities)
            {
                return (Result)GetPhysicalDeviceSurfaceCapabilitiesKHR(
                    physicalDevice,
                    surface,
                    __dsl_pSurfaceCapabilities
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_surface_capabilities2"],
            ImpliesSets = ["VK_KHR_surface"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormats2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceFormats2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
                PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
            [NativeTypeName("uint32_t *")] uint* pSurfaceFormatCount,
            SurfaceFormat2KHR* pSurfaceFormats
        ) =>
            Underlying.Value!.GetPhysicalDeviceSurfaceFormats2KHR(
                physicalDevice,
                pSurfaceInfo,
                pSurfaceFormatCount,
                pSurfaceFormats
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_surface_capabilities2"],
            ImpliesSets = ["VK_KHR_surface"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormats2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceFormats2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
                Ref<PhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pSurfaceFormatCount,
            Ref<SurfaceFormat2KHR> pSurfaceFormats
        )
        {
            fixed (SurfaceFormat2KHR* __dsl_pSurfaceFormats = pSurfaceFormats)
            fixed (uint* __dsl_pSurfaceFormatCount = pSurfaceFormatCount)
            fixed (PhysicalDeviceSurfaceInfo2KHR* __dsl_pSurfaceInfo = pSurfaceInfo)
            {
                return (Result)GetPhysicalDeviceSurfaceFormats2KHR(
                    physicalDevice,
                    __dsl_pSurfaceInfo,
                    __dsl_pSurfaceFormatCount,
                    __dsl_pSurfaceFormats
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormatsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceFormatsKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            [NativeTypeName("uint32_t *")] uint* pSurfaceFormatCount,
            SurfaceFormatKHR* pSurfaceFormats
        ) =>
            Underlying.Value!.GetPhysicalDeviceSurfaceFormatsKHR(
                physicalDevice,
                surface,
                pSurfaceFormatCount,
                pSurfaceFormats
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormatsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceFormatsKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            [NativeTypeName("uint32_t *")] Ref<uint> pSurfaceFormatCount,
            Ref<SurfaceFormatKHR> pSurfaceFormats
        )
        {
            fixed (SurfaceFormatKHR* __dsl_pSurfaceFormats = pSurfaceFormats)
            fixed (uint* __dsl_pSurfaceFormatCount = pSurfaceFormatCount)
            {
                return (Result)GetPhysicalDeviceSurfaceFormatsKHR(
                    physicalDevice,
                    surface,
                    __dsl_pSurfaceFormatCount,
                    __dsl_pSurfaceFormats
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfacePresentModesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfacePresentModesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            [NativeTypeName("uint32_t *")] uint* pPresentModeCount,
            PresentModeKHR* pPresentModes
        ) =>
            Underlying.Value!.GetPhysicalDeviceSurfacePresentModesKHR(
                physicalDevice,
                surface,
                pPresentModeCount,
                pPresentModes
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfacePresentModesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfacePresentModesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            [NativeTypeName("uint32_t *")] Ref<uint> pPresentModeCount,
            Ref<PresentModeKHR> pPresentModes
        )
        {
            fixed (PresentModeKHR* __dsl_pPresentModes = pPresentModes)
            fixed (uint* __dsl_pPresentModeCount = pPresentModeCount)
            {
                return (Result)GetPhysicalDeviceSurfacePresentModesKHR(
                    physicalDevice,
                    surface,
                    __dsl_pPresentModeCount,
                    __dsl_pPresentModes
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceSupportKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceSupportKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t")] uint queueFamilyIndex,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            [NativeTypeName("VkBool32 *")] MaybeBool<uint>* pSupported
        ) =>
            Underlying.Value!.GetPhysicalDeviceSurfaceSupportKHR(
                physicalDevice,
                queueFamilyIndex,
                surface,
                pSupported
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceSupportKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceSupportKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t")] uint queueFamilyIndex,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
            [NativeTypeName("VkBool32 *")] Ref<MaybeBool<uint>> pSupported
        )
        {
            fixed (MaybeBool<uint>* __dsl_pSupported = pSupported)
            {
                return (Result)GetPhysicalDeviceSurfaceSupportKHR(
                    physicalDevice,
                    queueFamilyIndex,
                    surface,
                    __dsl_pSupported
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceToolProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pToolCount,
            PhysicalDeviceToolProperties* pToolProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceToolProperties(
                physicalDevice,
                pToolCount,
                pToolProperties
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceToolProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pToolCount,
            Ref<PhysicalDeviceToolProperties> pToolProperties
        )
        {
            fixed (PhysicalDeviceToolProperties* __dsl_pToolProperties = pToolProperties)
            fixed (uint* __dsl_pToolCount = pToolCount)
            {
                return (Result)GetPhysicalDeviceToolProperties(
                    physicalDevice,
                    __dsl_pToolCount,
                    __dsl_pToolProperties
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_tooling_info"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceToolPropertiesEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pToolCount,
            PhysicalDeviceToolProperties* pToolProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceToolPropertiesEXT(
                physicalDevice,
                pToolCount,
                pToolProperties
            );

        [SupportedApiProfile("vulkan", ["VK_EXT_tooling_info"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceToolPropertiesEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pToolCount,
            Ref<PhysicalDeviceToolProperties> pToolProperties
        )
        {
            fixed (PhysicalDeviceToolProperties* __dsl_pToolProperties = pToolProperties)
            fixed (uint* __dsl_pToolCount = pToolCount)
            {
                return (Result)GetPhysicalDeviceToolPropertiesEXT(
                    physicalDevice,
                    __dsl_pToolCount,
                    __dsl_pToolProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoCapabilitiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceVideoCapabilitiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkVideoProfileInfoKHR *")] VideoProfileInfoKHR* pVideoProfile,
            VideoCapabilitiesKHR* pCapabilities
        ) =>
            Underlying.Value!.GetPhysicalDeviceVideoCapabilitiesKHR(
                physicalDevice,
                pVideoProfile,
                pCapabilities
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoCapabilitiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceVideoCapabilitiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkVideoProfileInfoKHR *")]
                Ref<VideoProfileInfoKHR> pVideoProfile,
            Ref<VideoCapabilitiesKHR> pCapabilities
        )
        {
            fixed (VideoCapabilitiesKHR* __dsl_pCapabilities = pCapabilities)
            fixed (VideoProfileInfoKHR* __dsl_pVideoProfile = pVideoProfile)
            {
                return (Result)GetPhysicalDeviceVideoCapabilitiesKHR(
                    physicalDevice,
                    __dsl_pVideoProfile,
                    __dsl_pCapabilities
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_encode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *")]
                PhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo,
            VideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
                physicalDevice,
                pQualityLevelInfo,
                pQualityLevelProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_encode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *")]
                Ref<PhysicalDeviceVideoEncodeQualityLevelInfoKHR> pQualityLevelInfo,
            Ref<VideoEncodeQualityLevelPropertiesKHR> pQualityLevelProperties
        )
        {
            fixed (
                VideoEncodeQualityLevelPropertiesKHR* __dsl_pQualityLevelProperties =
                    pQualityLevelProperties
            )
            fixed (
                PhysicalDeviceVideoEncodeQualityLevelInfoKHR* __dsl_pQualityLevelInfo =
                    pQualityLevelInfo
            )
            {
                return (Result)GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
                    physicalDevice,
                    __dsl_pQualityLevelInfo,
                    __dsl_pQualityLevelProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoFormatPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceVideoFormatPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceVideoFormatInfoKHR *")]
                PhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo,
            [NativeTypeName("uint32_t *")] uint* pVideoFormatPropertyCount,
            VideoFormatPropertiesKHR* pVideoFormatProperties
        ) =>
            Underlying.Value!.GetPhysicalDeviceVideoFormatPropertiesKHR(
                physicalDevice,
                pVideoFormatInfo,
                pVideoFormatPropertyCount,
                pVideoFormatProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoFormatPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceVideoFormatPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceVideoFormatInfoKHR *")]
                Ref<PhysicalDeviceVideoFormatInfoKHR> pVideoFormatInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pVideoFormatPropertyCount,
            Ref<VideoFormatPropertiesKHR> pVideoFormatProperties
        )
        {
            fixed (VideoFormatPropertiesKHR* __dsl_pVideoFormatProperties = pVideoFormatProperties)
            fixed (uint* __dsl_pVideoFormatPropertyCount = pVideoFormatPropertyCount)
            fixed (PhysicalDeviceVideoFormatInfoKHR* __dsl_pVideoFormatInfo = pVideoFormatInfo)
            {
                return (Result)GetPhysicalDeviceVideoFormatPropertiesKHR(
                    physicalDevice,
                    __dsl_pVideoFormatInfo,
                    __dsl_pVideoFormatPropertyCount,
                    __dsl_pVideoFormatProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineBinaryDataKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineBinaryDataKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineBinaryDataInfoKHR *")]
                PipelineBinaryDataInfoKHR* pInfo,
            PipelineBinaryKeyKHR* pPipelineBinaryKey,
            [NativeTypeName("size_t *")] nuint* pPipelineBinaryDataSize,
            void* pPipelineBinaryData
        ) =>
            Underlying.Value!.GetPipelineBinaryDataKHR(
                device,
                pInfo,
                pPipelineBinaryKey,
                pPipelineBinaryDataSize,
                pPipelineBinaryData
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineBinaryDataKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineBinaryDataKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineBinaryDataInfoKHR *")]
                Ref<PipelineBinaryDataInfoKHR> pInfo,
            Ref<PipelineBinaryKeyKHR> pPipelineBinaryKey,
            [NativeTypeName("size_t *")] Ref<nuint> pPipelineBinaryDataSize,
            Ref pPipelineBinaryData
        )
        {
            fixed (void* __dsl_pPipelineBinaryData = pPipelineBinaryData)
            fixed (nuint* __dsl_pPipelineBinaryDataSize = pPipelineBinaryDataSize)
            fixed (PipelineBinaryKeyKHR* __dsl_pPipelineBinaryKey = pPipelineBinaryKey)
            fixed (PipelineBinaryDataInfoKHR* __dsl_pInfo = pInfo)
            {
                return (Result)GetPipelineBinaryDataKHR(
                    device,
                    __dsl_pInfo,
                    __dsl_pPipelineBinaryKey,
                    __dsl_pPipelineBinaryDataSize,
                    __dsl_pPipelineBinaryData
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineCacheData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineCacheData(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
            [NativeTypeName("size_t *")] nuint* pDataSize,
            void* pData
        ) => Underlying.Value!.GetPipelineCacheData(device, pipelineCache, pDataSize, pData);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineCacheData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineCacheData(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
            [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (nuint* __dsl_pDataSize = pDataSize)
            {
                return (Result)GetPipelineCacheData(
                    device,
                    pipelineCache,
                    __dsl_pDataSize,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_executable_properties"],
            ImpliesSets = [
                "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
                "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableInternalRepresentationsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineExecutableInternalRepresentationsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
                PipelineExecutableInfoKHR* pExecutableInfo,
            [NativeTypeName("uint32_t *")] uint* pInternalRepresentationCount,
            PipelineExecutableInternalRepresentationKHR* pInternalRepresentations
        ) =>
            Underlying.Value!.GetPipelineExecutableInternalRepresentationsKHR(
                device,
                pExecutableInfo,
                pInternalRepresentationCount,
                pInternalRepresentations
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_executable_properties"],
            ImpliesSets = [
                "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
                "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableInternalRepresentationsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineExecutableInternalRepresentationsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
                Ref<PipelineExecutableInfoKHR> pExecutableInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pInternalRepresentationCount,
            Ref<PipelineExecutableInternalRepresentationKHR> pInternalRepresentations
        )
        {
            fixed (
                PipelineExecutableInternalRepresentationKHR* __dsl_pInternalRepresentations =
                    pInternalRepresentations
            )
            fixed (uint* __dsl_pInternalRepresentationCount = pInternalRepresentationCount)
            fixed (PipelineExecutableInfoKHR* __dsl_pExecutableInfo = pExecutableInfo)
            {
                return (Result)GetPipelineExecutableInternalRepresentationsKHR(
                    device,
                    __dsl_pExecutableInfo,
                    __dsl_pInternalRepresentationCount,
                    __dsl_pInternalRepresentations
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_executable_properties"],
            ImpliesSets = [
                "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
                "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutablePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineExecutablePropertiesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineInfoKHR *")] PipelineInfoKHR* pPipelineInfo,
            [NativeTypeName("uint32_t *")] uint* pExecutableCount,
            PipelineExecutablePropertiesKHR* pProperties
        ) =>
            Underlying.Value!.GetPipelineExecutablePropertiesKHR(
                device,
                pPipelineInfo,
                pExecutableCount,
                pProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_executable_properties"],
            ImpliesSets = [
                "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
                "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutablePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineExecutablePropertiesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineInfoKHR *")] Ref<PipelineInfoKHR> pPipelineInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pExecutableCount,
            Ref<PipelineExecutablePropertiesKHR> pProperties
        )
        {
            fixed (PipelineExecutablePropertiesKHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pExecutableCount = pExecutableCount)
            fixed (PipelineInfoKHR* __dsl_pPipelineInfo = pPipelineInfo)
            {
                return (Result)GetPipelineExecutablePropertiesKHR(
                    device,
                    __dsl_pPipelineInfo,
                    __dsl_pExecutableCount,
                    __dsl_pProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_executable_properties"],
            ImpliesSets = [
                "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
                "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableStatisticsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineExecutableStatisticsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
                PipelineExecutableInfoKHR* pExecutableInfo,
            [NativeTypeName("uint32_t *")] uint* pStatisticCount,
            PipelineExecutableStatisticKHR* pStatistics
        ) =>
            Underlying.Value!.GetPipelineExecutableStatisticsKHR(
                device,
                pExecutableInfo,
                pStatisticCount,
                pStatistics
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_executable_properties"],
            ImpliesSets = [
                "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
                "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableStatisticsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineExecutableStatisticsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
                Ref<PipelineExecutableInfoKHR> pExecutableInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pStatisticCount,
            Ref<PipelineExecutableStatisticKHR> pStatistics
        )
        {
            fixed (PipelineExecutableStatisticKHR* __dsl_pStatistics = pStatistics)
            fixed (uint* __dsl_pStatisticCount = pStatisticCount)
            fixed (PipelineExecutableInfoKHR* __dsl_pExecutableInfo = pExecutableInfo)
            {
                return (Result)GetPipelineExecutableStatisticsKHR(
                    device,
                    __dsl_pExecutableInfo,
                    __dsl_pStatisticCount,
                    __dsl_pStatistics
                );
            }
        }

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands_compute"],
            ImpliesSets = ["VK_NV_device_generated_commands"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectDeviceAddressNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetPipelineIndirectDeviceAddressNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineIndirectDeviceAddressInfoNV *")]
                PipelineIndirectDeviceAddressInfoNV* pInfo
        ) => Underlying.Value!.GetPipelineIndirectDeviceAddressNV(device, pInfo);

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands_compute"],
            ImpliesSets = ["VK_NV_device_generated_commands"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectDeviceAddressNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetPipelineIndirectDeviceAddressNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineIndirectDeviceAddressInfoNV *")]
                Ref<PipelineIndirectDeviceAddressInfoNV> pInfo
        )
        {
            fixed (PipelineIndirectDeviceAddressInfoNV* __dsl_pInfo = pInfo)
            {
                return (ulong)GetPipelineIndirectDeviceAddressNV(device, __dsl_pInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands_compute"],
            ImpliesSets = ["VK_NV_device_generated_commands"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectMemoryRequirementsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPipelineIndirectMemoryRequirementsNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkComputePipelineCreateInfo *")]
                ComputePipelineCreateInfo* pCreateInfo,
            MemoryRequirements2* pMemoryRequirements
        ) =>
            Underlying.Value!.GetPipelineIndirectMemoryRequirementsNV(
                device,
                pCreateInfo,
                pMemoryRequirements
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands_compute"],
            ImpliesSets = ["VK_NV_device_generated_commands"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectMemoryRequirementsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPipelineIndirectMemoryRequirementsNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkComputePipelineCreateInfo *")]
                Ref<ComputePipelineCreateInfo> pCreateInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (ComputePipelineCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                GetPipelineIndirectMemoryRequirementsNV(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineKeyKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineKeyKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineCreateInfoKHR *")]
                PipelineCreateInfoKHR* pPipelineCreateInfo,
            PipelineBinaryKeyKHR* pPipelineKey
        ) => Underlying.Value!.GetPipelineKeyKHR(device, pPipelineCreateInfo, pPipelineKey);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineKeyKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineKeyKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineCreateInfoKHR *")]
                Ref<PipelineCreateInfoKHR> pPipelineCreateInfo,
            Ref<PipelineBinaryKeyKHR> pPipelineKey
        )
        {
            fixed (PipelineBinaryKeyKHR* __dsl_pPipelineKey = pPipelineKey)
            fixed (PipelineCreateInfoKHR* __dsl_pPipelineCreateInfo = pPipelineCreateInfo)
            {
                return (Result)GetPipelineKeyKHR(
                    device,
                    __dsl_pPipelineCreateInfo,
                    __dsl_pPipelineKey
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_pipeline_properties"],
            ImpliesSets = [
                "VK_EXT_pipeline_properties+VK_KHR_get_physical_device_properties2",
                "VK_EXT_pipeline_properties+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelinePropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelinePropertiesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineInfoEXT *")] PipelineInfoKHR* pPipelineInfo,
            BaseOutStructure* pPipelineProperties
        ) => Underlying.Value!.GetPipelinePropertiesEXT(device, pPipelineInfo, pPipelineProperties);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_pipeline_properties"],
            ImpliesSets = [
                "VK_EXT_pipeline_properties+VK_KHR_get_physical_device_properties2",
                "VK_EXT_pipeline_properties+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelinePropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelinePropertiesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkPipelineInfoEXT *")] Ref<PipelineInfoKHR> pPipelineInfo,
            Ref<BaseOutStructure> pPipelineProperties
        )
        {
            fixed (BaseOutStructure* __dsl_pPipelineProperties = pPipelineProperties)
            fixed (PipelineInfoKHR* __dsl_pPipelineInfo = pPipelineInfo)
            {
                return (Result)GetPipelinePropertiesEXT(
                    device,
                    __dsl_pPipelineInfo,
                    __dsl_pPipelineProperties
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkGetPrivateData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPrivateData(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            ObjectType objectType,
            [NativeTypeName("uint64_t")] ulong objectHandle,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
            [NativeTypeName("uint64_t *")] ulong* pData
        ) =>
            Underlying.Value!.GetPrivateData(
                device,
                objectType,
                objectHandle,
                privateDataSlot,
                pData
            );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPrivateData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPrivateData(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            ObjectType objectType,
            [NativeTypeName("uint64_t")] ulong objectHandle,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
            [NativeTypeName("uint64_t *")] Ref<ulong> pData
        )
        {
            fixed (ulong* __dsl_pData = pData)
            {
                GetPrivateData(device, objectType, objectHandle, privateDataSlot, __dsl_pData);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetPrivateDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPrivateDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            ObjectType objectType,
            [NativeTypeName("uint64_t")] ulong objectHandle,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
            [NativeTypeName("uint64_t *")] ulong* pData
        ) =>
            Underlying.Value!.GetPrivateDataEXT(
                device,
                objectType,
                objectHandle,
                privateDataSlot,
                pData
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPrivateDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPrivateDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            ObjectType objectType,
            [NativeTypeName("uint64_t")] ulong objectHandle,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
            [NativeTypeName("uint64_t *")] Ref<ulong> pData
        )
        {
            fixed (ulong* __dsl_pData = pData)
            {
                GetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, __dsl_pData);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetQueryPoolResults")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetQueryPoolResults(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pData,
            [NativeTypeName("VkDeviceSize")] ulong stride,
            [NativeTypeName("VkQueryResultFlags")] QueryResultFlags flags
        ) =>
            Underlying.Value!.GetQueryPoolResults(
                device,
                queryPool,
                firstQuery,
                queryCount,
                dataSize,
                pData,
                stride,
                flags
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetQueryPoolResults")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetQueryPoolResults(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pData,
            [NativeTypeName("VkDeviceSize")] ulong stride,
            [NativeTypeName("VkQueryResultFlags")] QueryResultFlags flags
        )
        {
            fixed (void* __dsl_pData = pData)
            {
                return (Result)GetQueryPoolResults(
                    device,
                    queryPool,
                    firstQuery,
                    queryCount,
                    dataSize,
                    __dsl_pData,
                    stride,
                    flags
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_synchronization2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_3",
            ],
            ImpliesSets = [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointData2NV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetQueueCheckpointData2NV(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("uint32_t *")] uint* pCheckpointDataCount,
            CheckpointData2NV* pCheckpointData
        ) =>
            Underlying.Value!.GetQueueCheckpointData2NV(
                queue,
                pCheckpointDataCount,
                pCheckpointData
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_synchronization2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_3",
            ],
            ImpliesSets = [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointData2NV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetQueueCheckpointData2NV(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("uint32_t *")] Ref<uint> pCheckpointDataCount,
            Ref<CheckpointData2NV> pCheckpointData
        )
        {
            fixed (CheckpointData2NV* __dsl_pCheckpointData = pCheckpointData)
            fixed (uint* __dsl_pCheckpointDataCount = pCheckpointDataCount)
            {
                GetQueueCheckpointData2NV(queue, __dsl_pCheckpointDataCount, __dsl_pCheckpointData);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_diagnostic_checkpoints"],
            ImpliesSets = [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointDataNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetQueueCheckpointDataNV(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("uint32_t *")] uint* pCheckpointDataCount,
            CheckpointDataNV* pCheckpointData
        ) =>
            Underlying.Value!.GetQueueCheckpointDataNV(
                queue,
                pCheckpointDataCount,
                pCheckpointData
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_diagnostic_checkpoints"],
            ImpliesSets = [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointDataNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetQueueCheckpointDataNV(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("uint32_t *")] Ref<uint> pCheckpointDataCount,
            Ref<CheckpointDataNV> pCheckpointData
        )
        {
            fixed (CheckpointDataNV* __dsl_pCheckpointData = pCheckpointData)
            fixed (uint* __dsl_pCheckpointDataCount = pCheckpointDataCount)
            {
                GetQueueCheckpointDataNV(queue, __dsl_pCheckpointDataCount, __dsl_pCheckpointData);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetRayTracingCaptureReplayShaderGroupHandlesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
            [NativeTypeName("uint32_t")] uint firstGroup,
            [NativeTypeName("uint32_t")] uint groupCount,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pData
        ) =>
            Underlying.Value!.GetRayTracingCaptureReplayShaderGroupHandlesKHR(
                device,
                pipeline,
                firstGroup,
                groupCount,
                dataSize,
                pData
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetRayTracingCaptureReplayShaderGroupHandlesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
            [NativeTypeName("uint32_t")] uint firstGroup,
            [NativeTypeName("uint32_t")] uint groupCount,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            {
                return (Result)GetRayTracingCaptureReplayShaderGroupHandlesKHR(
                    device,
                    pipeline,
                    firstGroup,
                    groupCount,
                    dataSize,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetRayTracingShaderGroupHandlesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
            [NativeTypeName("uint32_t")] uint firstGroup,
            [NativeTypeName("uint32_t")] uint groupCount,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pData
        ) =>
            Underlying.Value!.GetRayTracingShaderGroupHandlesKHR(
                device,
                pipeline,
                firstGroup,
                groupCount,
                dataSize,
                pData
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetRayTracingShaderGroupHandlesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
            [NativeTypeName("uint32_t")] uint firstGroup,
            [NativeTypeName("uint32_t")] uint groupCount,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            {
                return (Result)GetRayTracingShaderGroupHandlesKHR(
                    device,
                    pipeline,
                    firstGroup,
                    groupCount,
                    dataSize,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetRayTracingShaderGroupHandlesNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
            [NativeTypeName("uint32_t")] uint firstGroup,
            [NativeTypeName("uint32_t")] uint groupCount,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pData
        ) =>
            Underlying.Value!.GetRayTracingShaderGroupHandlesNV(
                device,
                pipeline,
                firstGroup,
                groupCount,
                dataSize,
                pData
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetRayTracingShaderGroupHandlesNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
            [NativeTypeName("uint32_t")] uint firstGroup,
            [NativeTypeName("uint32_t")] uint groupCount,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            {
                return (Result)GetRayTracingShaderGroupHandlesNV(
                    device,
                    pipeline,
                    firstGroup,
                    groupCount,
                    dataSize,
                    __dsl_pData
                );
            }
        }

        [return: NativeTypeName("VkDeviceSize")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupStackSizeKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetRayTracingShaderGroupStackSizeKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
            [NativeTypeName("uint32_t")] uint group,
            ShaderGroupShaderKHR groupShader
        ) =>
            Underlying.Value!.GetRayTracingShaderGroupStackSizeKHR(
                device,
                pipeline,
                group,
                groupShader
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_GOOGLE_display_timing"],
            ImpliesSets = ["VK_KHR_swapchain"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetRefreshCycleDurationGOOGLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetRefreshCycleDurationGoogle(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            RefreshCycleDurationGoogle* pDisplayTimingProperties
        ) =>
            Underlying.Value!.GetRefreshCycleDurationGoogle(
                device,
                swapchain,
                pDisplayTimingProperties
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_GOOGLE_display_timing"],
            ImpliesSets = ["VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRefreshCycleDurationGOOGLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetRefreshCycleDurationGoogle(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            Ref<RefreshCycleDurationGoogle> pDisplayTimingProperties
        )
        {
            fixed (
                RefreshCycleDurationGoogle* __dsl_pDisplayTimingProperties =
                    pDisplayTimingProperties
            )
            {
                return (Result)GetRefreshCycleDurationGoogle(
                    device,
                    swapchain,
                    __dsl_pDisplayTimingProperties
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetRenderAreaGranularity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRenderAreaGranularity(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkRenderPass")] RenderPassHandle renderPass,
            Extent2D* pGranularity
        ) => Underlying.Value!.GetRenderAreaGranularity(device, renderPass, pGranularity);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRenderAreaGranularity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRenderAreaGranularity(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkRenderPass")] RenderPassHandle renderPass,
            Ref<Extent2D> pGranularity
        )
        {
            fixed (Extent2D* __dsl_pGranularity = pGranularity)
            {
                GetRenderAreaGranularity(device, renderPass, __dsl_pGranularity);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRenderingAreaGranularity(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkRenderingAreaInfo *")] RenderingAreaInfo* pRenderingAreaInfo,
            Extent2D* pGranularity
        ) =>
            Underlying.Value!.GetRenderingAreaGranularity(device, pRenderingAreaInfo, pGranularity);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRenderingAreaGranularity(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkRenderingAreaInfo *")]
                Ref<RenderingAreaInfo> pRenderingAreaInfo,
            Ref<Extent2D> pGranularity
        )
        {
            fixed (Extent2D* __dsl_pGranularity = pGranularity)
            fixed (RenderingAreaInfo* __dsl_pRenderingAreaInfo = pRenderingAreaInfo)
            {
                GetRenderingAreaGranularity(device, __dsl_pRenderingAreaInfo, __dsl_pGranularity);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularityKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRenderingAreaGranularityKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkRenderingAreaInfo *")] RenderingAreaInfo* pRenderingAreaInfo,
            Extent2D* pGranularity
        ) =>
            Underlying.Value!.GetRenderingAreaGranularityKHR(
                device,
                pRenderingAreaInfo,
                pGranularity
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularityKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRenderingAreaGranularityKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkRenderingAreaInfo *")]
                Ref<RenderingAreaInfo> pRenderingAreaInfo,
            Ref<Extent2D> pGranularity
        )
        {
            fixed (Extent2D* __dsl_pGranularity = pGranularity)
            fixed (RenderingAreaInfo* __dsl_pRenderingAreaInfo = pRenderingAreaInfo)
            {
                GetRenderingAreaGranularityKHR(
                    device,
                    __dsl_pRenderingAreaInfo,
                    __dsl_pGranularity
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetSamplerOpaqueCaptureDescriptorDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSamplerOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSamplerCaptureDescriptorDataInfoEXT *")]
                SamplerCaptureDescriptorDataInfoEXT* pInfo,
            void* pData
        ) => Underlying.Value!.GetSamplerOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetSamplerOpaqueCaptureDescriptorDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSamplerOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSamplerCaptureDescriptorDataInfoEXT *")]
                Ref<SamplerCaptureDescriptorDataInfoEXT> pInfo,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (SamplerCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
            {
                return (Result)GetSamplerOpaqueCaptureDescriptorDataEXT(
                    device,
                    __dsl_pInfo,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValue")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSemaphoreCounterValue(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
            [NativeTypeName("uint64_t *")] ulong* pValue
        ) => Underlying.Value!.GetSemaphoreCounterValue(device, semaphore, pValue);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValue")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSemaphoreCounterValue(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
            [NativeTypeName("uint64_t *")] Ref<ulong> pValue
        )
        {
            fixed (ulong* __dsl_pValue = pValue)
            {
                return (Result)GetSemaphoreCounterValue(device, semaphore, __dsl_pValue);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_timeline_semaphore"],
            ImpliesSets = [
                "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
                "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValueKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSemaphoreCounterValueKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
            [NativeTypeName("uint64_t *")] ulong* pValue
        ) => Underlying.Value!.GetSemaphoreCounterValueKHR(device, semaphore, pValue);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_timeline_semaphore"],
            ImpliesSets = [
                "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
                "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValueKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSemaphoreCounterValueKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
            [NativeTypeName("uint64_t *")] Ref<ulong> pValue
        )
        {
            fixed (ulong* __dsl_pValue = pValue)
            {
                return (Result)GetSemaphoreCounterValueKHR(device, semaphore, __dsl_pValue);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_semaphore_fd"],
            ImpliesSets = [
                "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
                "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSemaphoreFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSemaphoreGetFdInfoKHR *")] SemaphoreGetFdInfoKHR* pGetFdInfo,
            int* pFd
        ) => Underlying.Value!.GetSemaphoreFdKHR(device, pGetFdInfo, pFd);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_semaphore_fd"],
            ImpliesSets = [
                "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
                "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSemaphoreFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSemaphoreGetFdInfoKHR *")]
                Ref<SemaphoreGetFdInfoKHR> pGetFdInfo,
            Ref<int> pFd
        )
        {
            fixed (int* __dsl_pFd = pFd)
            fixed (SemaphoreGetFdInfoKHR* __dsl_pGetFdInfo = pGetFdInfo)
            {
                return (Result)GetSemaphoreFdKHR(device, __dsl_pGetFdInfo, __dsl_pFd);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetShaderBinaryDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetShaderBinaryDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkShaderEXT")] ShaderEXTHandle shader,
            [NativeTypeName("size_t *")] nuint* pDataSize,
            void* pData
        ) => Underlying.Value!.GetShaderBinaryDataEXT(device, shader, pDataSize, pData);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetShaderBinaryDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetShaderBinaryDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkShaderEXT")] ShaderEXTHandle shader,
            [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (nuint* __dsl_pDataSize = pDataSize)
            {
                return (Result)GetShaderBinaryDataEXT(device, shader, __dsl_pDataSize, __dsl_pData);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_AMD_shader_info"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetShaderInfoAMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetShaderInfoAMD(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
            ShaderStageFlags shaderStage,
            ShaderInfoTypeAMD infoType,
            [NativeTypeName("size_t *")] nuint* pInfoSize,
            void* pInfo
        ) =>
            Underlying.Value!.GetShaderInfoAMD(
                device,
                pipeline,
                shaderStage,
                infoType,
                pInfoSize,
                pInfo
            );

        [SupportedApiProfile("vulkan", ["VK_AMD_shader_info"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetShaderInfoAMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetShaderInfoAMD(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
            ShaderStageFlags shaderStage,
            ShaderInfoTypeAMD infoType,
            [NativeTypeName("size_t *")] Ref<nuint> pInfoSize,
            Ref pInfo
        )
        {
            fixed (void* __dsl_pInfo = pInfo)
            fixed (nuint* __dsl_pInfoSize = pInfoSize)
            {
                return (Result)GetShaderInfoAMD(
                    device,
                    pipeline,
                    shaderStage,
                    infoType,
                    __dsl_pInfoSize,
                    __dsl_pInfo
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_module_identifier"],
            ImpliesSets = [
                "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
                "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleCreateInfoIdentifierEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetShaderModuleCreateInfoIdentifierEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkShaderModuleCreateInfo *")]
                ShaderModuleCreateInfo* pCreateInfo,
            ShaderModuleIdentifierEXT* pIdentifier
        ) =>
            Underlying.Value!.GetShaderModuleCreateInfoIdentifierEXT(
                device,
                pCreateInfo,
                pIdentifier
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_module_identifier"],
            ImpliesSets = [
                "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
                "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleCreateInfoIdentifierEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetShaderModuleCreateInfoIdentifierEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkShaderModuleCreateInfo *")]
                Ref<ShaderModuleCreateInfo> pCreateInfo,
            Ref<ShaderModuleIdentifierEXT> pIdentifier
        )
        {
            fixed (ShaderModuleIdentifierEXT* __dsl_pIdentifier = pIdentifier)
            fixed (ShaderModuleCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                GetShaderModuleCreateInfoIdentifierEXT(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pIdentifier
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_module_identifier"],
            ImpliesSets = [
                "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
                "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleIdentifierEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetShaderModuleIdentifierEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkShaderModule")] ShaderModuleHandle shaderModule,
            ShaderModuleIdentifierEXT* pIdentifier
        ) => Underlying.Value!.GetShaderModuleIdentifierEXT(device, shaderModule, pIdentifier);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_module_identifier"],
            ImpliesSets = [
                "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
                "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleIdentifierEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetShaderModuleIdentifierEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkShaderModule")] ShaderModuleHandle shaderModule,
            Ref<ShaderModuleIdentifierEXT> pIdentifier
        )
        {
            fixed (ShaderModuleIdentifierEXT* __dsl_pIdentifier = pIdentifier)
            {
                GetShaderModuleIdentifierEXT(device, shaderModule, __dsl_pIdentifier);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainCounterEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSwapchainCounterEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            SurfaceCounterFlagsEXT counter,
            [NativeTypeName("uint64_t *")] ulong* pCounterValue
        ) => Underlying.Value!.GetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainCounterEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSwapchainCounterEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            SurfaceCounterFlagsEXT counter,
            [NativeTypeName("uint64_t *")] Ref<ulong> pCounterValue
        )
        {
            fixed (ulong* __dsl_pCounterValue = pCounterValue)
            {
                return (Result)GetSwapchainCounterEXT(
                    device,
                    swapchain,
                    counter,
                    __dsl_pCounterValue
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainImagesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSwapchainImagesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("uint32_t *")] uint* pSwapchainImageCount,
            [NativeTypeName("VkImage *")] ImageHandle* pSwapchainImages
        ) =>
            Underlying.Value!.GetSwapchainImagesKHR(
                device,
                swapchain,
                pSwapchainImageCount,
                pSwapchainImages
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainImagesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSwapchainImagesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("uint32_t *")] Ref<uint> pSwapchainImageCount,
            [NativeTypeName("VkImage *")] Ref<ImageHandle> pSwapchainImages
        )
        {
            fixed (ImageHandle* __dsl_pSwapchainImages = pSwapchainImages)
            fixed (uint* __dsl_pSwapchainImageCount = pSwapchainImageCount)
            {
                return (Result)GetSwapchainImagesKHR(
                    device,
                    swapchain,
                    __dsl_pSwapchainImageCount,
                    __dsl_pSwapchainImages
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_shared_presentable_image"],
            ImpliesSets = [
                "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainStatusKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSwapchainStatusKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain
        ) => Underlying.Value!.GetSwapchainStatusKHR(device, swapchain);

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkGetTensorMemoryRequirementsARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetTensorMemoryRequirementsARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkTensorMemoryRequirementsInfoARM *")]
                TensorMemoryRequirementsInfoARM* pInfo,
            MemoryRequirements2* pMemoryRequirements
        ) => Underlying.Value!.GetTensorMemoryRequirementsARM(device, pInfo, pMemoryRequirements);

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetTensorMemoryRequirementsARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetTensorMemoryRequirementsARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkTensorMemoryRequirementsInfoARM *")]
                Ref<TensorMemoryRequirementsInfoARM> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (TensorMemoryRequirementsInfoARM* __dsl_pInfo = pInfo)
            {
                GetTensorMemoryRequirementsARM(device, __dsl_pInfo, __dsl_pMemoryRequirements);
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkGetTensorOpaqueCaptureDescriptorDataARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetTensorOpaqueCaptureDescriptorDataARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkTensorCaptureDescriptorDataInfoARM *")]
                TensorCaptureDescriptorDataInfoARM* pInfo,
            void* pData
        ) => Underlying.Value!.GetTensorOpaqueCaptureDescriptorDataARM(device, pInfo, pData);

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetTensorOpaqueCaptureDescriptorDataARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetTensorOpaqueCaptureDescriptorDataARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkTensorCaptureDescriptorDataInfoARM *")]
                Ref<TensorCaptureDescriptorDataInfoARM> pInfo,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (TensorCaptureDescriptorDataInfoARM* __dsl_pInfo = pInfo)
            {
                return (Result)GetTensorOpaqueCaptureDescriptorDataARM(
                    device,
                    __dsl_pInfo,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkGetTensorViewOpaqueCaptureDescriptorDataARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetTensorViewOpaqueCaptureDescriptorDataARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkTensorViewCaptureDescriptorDataInfoARM *")]
                TensorViewCaptureDescriptorDataInfoARM* pInfo,
            void* pData
        ) => Underlying.Value!.GetTensorViewOpaqueCaptureDescriptorDataARM(device, pInfo, pData);

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetTensorViewOpaqueCaptureDescriptorDataARM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetTensorViewOpaqueCaptureDescriptorDataARM(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkTensorViewCaptureDescriptorDataInfoARM *")]
                Ref<TensorViewCaptureDescriptorDataInfoARM> pInfo,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (TensorViewCaptureDescriptorDataInfoARM* __dsl_pInfo = pInfo)
            {
                return (Result)GetTensorViewOpaqueCaptureDescriptorDataARM(
                    device,
                    __dsl_pInfo,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        [NativeFunction("vulkan", EntryPoint = "vkGetValidationCacheDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetValidationCacheDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle validationCache,
            [NativeTypeName("size_t *")] nuint* pDataSize,
            void* pData
        ) => Underlying.Value!.GetValidationCacheDataEXT(device, validationCache, pDataSize, pData);

        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetValidationCacheDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetValidationCacheDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle validationCache,
            [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (nuint* __dsl_pDataSize = pDataSize)
            {
                return (Result)GetValidationCacheDataEXT(
                    device,
                    validationCache,
                    __dsl_pDataSize,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkGetVideoSessionMemoryRequirementsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetVideoSessionMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
            [NativeTypeName("uint32_t *")] uint* pMemoryRequirementsCount,
            VideoSessionMemoryRequirementsKHR* pMemoryRequirements
        ) =>
            Underlying.Value!.GetVideoSessionMemoryRequirementsKHR(
                device,
                videoSession,
                pMemoryRequirementsCount,
                pMemoryRequirements
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetVideoSessionMemoryRequirementsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetVideoSessionMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
            [NativeTypeName("uint32_t *")] Ref<uint> pMemoryRequirementsCount,
            Ref<VideoSessionMemoryRequirementsKHR> pMemoryRequirements
        )
        {
            fixed (
                VideoSessionMemoryRequirementsKHR* __dsl_pMemoryRequirements = pMemoryRequirements
            )
            fixed (uint* __dsl_pMemoryRequirementsCount = pMemoryRequirementsCount)
            {
                return (Result)GetVideoSessionMemoryRequirementsKHR(
                    device,
                    videoSession,
                    __dsl_pMemoryRequirementsCount,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_fence_fd"],
            ImpliesSets = [
                "VK_KHR_external_fence_fd+VK_KHR_external_fence",
                "VK_KHR_external_fence_fd+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkImportFenceFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ImportFenceFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImportFenceFdInfoKHR *")]
                ImportFenceFdInfoKHR* pImportFenceFdInfo
        ) => Underlying.Value!.ImportFenceFdKHR(device, pImportFenceFdInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_fence_fd"],
            ImpliesSets = [
                "VK_KHR_external_fence_fd+VK_KHR_external_fence",
                "VK_KHR_external_fence_fd+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkImportFenceFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ImportFenceFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImportFenceFdInfoKHR *")]
                Ref<ImportFenceFdInfoKHR> pImportFenceFdInfo
        )
        {
            fixed (ImportFenceFdInfoKHR* __dsl_pImportFenceFdInfo = pImportFenceFdInfo)
            {
                return (Result)ImportFenceFdKHR(device, __dsl_pImportFenceFdInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_semaphore_fd"],
            ImpliesSets = [
                "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
                "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkImportSemaphoreFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ImportSemaphoreFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImportSemaphoreFdInfoKHR *")]
                ImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo
        ) => Underlying.Value!.ImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_semaphore_fd"],
            ImpliesSets = [
                "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
                "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkImportSemaphoreFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ImportSemaphoreFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkImportSemaphoreFdInfoKHR *")]
                Ref<ImportSemaphoreFdInfoKHR> pImportSemaphoreFdInfo
        )
        {
            fixed (ImportSemaphoreFdInfoKHR* __dsl_pImportSemaphoreFdInfo = pImportSemaphoreFdInfo)
            {
                return (Result)ImportSemaphoreFdKHR(device, __dsl_pImportSemaphoreFdInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [NativeFunction("vulkan", EntryPoint = "vkInitializePerformanceApiINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result InitializePerformanceApiIntel(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkInitializePerformanceApiInfoINTEL *")]
                InitializePerformanceApiInfoIntel* pInitializeInfo
        ) => Underlying.Value!.InitializePerformanceApiIntel(device, pInitializeInfo);

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkInitializePerformanceApiINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result InitializePerformanceApiIntel(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkInitializePerformanceApiInfoINTEL *")]
                Ref<InitializePerformanceApiInfoIntel> pInitializeInfo
        )
        {
            fixed (InitializePerformanceApiInfoIntel* __dsl_pInitializeInfo = pInitializeInfo)
            {
                return (Result)InitializePerformanceApiIntel(device, __dsl_pInitializeInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkInvalidateMappedMemoryRanges")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result InvalidateMappedMemoryRanges(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint memoryRangeCount,
            [NativeTypeName("const VkMappedMemoryRange *")] MappedMemoryRange* pMemoryRanges
        ) =>
            Underlying.Value!.InvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkInvalidateMappedMemoryRanges")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result InvalidateMappedMemoryRanges(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint memoryRangeCount,
            [NativeTypeName("const VkMappedMemoryRange *")] Ref<MappedMemoryRange> pMemoryRanges
        )
        {
            fixed (MappedMemoryRange* __dsl_pMemoryRanges = pMemoryRanges)
            {
                return (Result)InvalidateMappedMemoryRanges(
                    device,
                    memoryRangeCount,
                    __dsl_pMemoryRanges
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkLatencySleepNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result LatencySleepNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("const VkLatencySleepInfoNV *")] LatencySleepInfoNV* pSleepInfo
        ) => Underlying.Value!.LatencySleepNV(device, swapchain, pSleepInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkLatencySleepNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result LatencySleepNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("const VkLatencySleepInfoNV *")] Ref<LatencySleepInfoNV> pSleepInfo
        )
        {
            fixed (LatencySleepInfoNV* __dsl_pSleepInfo = pSleepInfo)
            {
                return (Result)LatencySleepNV(device, swapchain, __dsl_pSleepInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkMapMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MapMemory(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkDeviceSize")] ulong size,
            [NativeTypeName("VkMemoryMapFlags")] MemoryMapFlags flags,
            void** ppData
        ) => Underlying.Value!.MapMemory(device, memory, offset, size, flags, ppData);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkMapMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MapMemory(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkDeviceSize")] ulong size,
            [NativeTypeName("VkMemoryMapFlags")] MemoryMapFlags flags,
            Ref2D ppData
        )
        {
            fixed (void** __dsl_ppData = ppData)
            {
                return (Result)MapMemory(device, memory, offset, size, flags, __dsl_ppData);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkMapMemory2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MapMemory2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMemoryMapInfo *")] MemoryMapInfo* pMemoryMapInfo,
            void** ppData
        ) => Underlying.Value!.MapMemory2(device, pMemoryMapInfo, ppData);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkMapMemory2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MapMemory2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMemoryMapInfo *")] Ref<MemoryMapInfo> pMemoryMapInfo,
            Ref2D ppData
        )
        {
            fixed (void** __dsl_ppData = ppData)
            fixed (MemoryMapInfo* __dsl_pMemoryMapInfo = pMemoryMapInfo)
            {
                return (Result)MapMemory2(device, __dsl_pMemoryMapInfo, __dsl_ppData);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
        [NativeFunction("vulkan", EntryPoint = "vkMapMemory2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MapMemory2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMemoryMapInfo *")] MemoryMapInfo* pMemoryMapInfo,
            void** ppData
        ) => Underlying.Value!.MapMemory2KHR(device, pMemoryMapInfo, ppData);

        [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkMapMemory2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MapMemory2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMemoryMapInfo *")] Ref<MemoryMapInfo> pMemoryMapInfo,
            Ref2D ppData
        )
        {
            fixed (void** __dsl_ppData = ppData)
            fixed (MemoryMapInfo* __dsl_pMemoryMapInfo = pMemoryMapInfo)
            {
                return (Result)MapMemory2KHR(device, __dsl_pMemoryMapInfo, __dsl_ppData);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkMergePipelineCaches")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MergePipelineCaches(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle dstCache,
            [NativeTypeName("uint32_t")] uint srcCacheCount,
            [NativeTypeName("const VkPipelineCache *")] PipelineCacheHandle* pSrcCaches
        ) => Underlying.Value!.MergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkMergePipelineCaches")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MergePipelineCaches(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle dstCache,
            [NativeTypeName("uint32_t")] uint srcCacheCount,
            [NativeTypeName("const VkPipelineCache *")] Ref<PipelineCacheHandle> pSrcCaches
        )
        {
            fixed (PipelineCacheHandle* __dsl_pSrcCaches = pSrcCaches)
            {
                return (Result)MergePipelineCaches(
                    device,
                    dstCache,
                    srcCacheCount,
                    __dsl_pSrcCaches
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        [NativeFunction("vulkan", EntryPoint = "vkMergeValidationCachesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MergeValidationCachesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle dstCache,
            [NativeTypeName("uint32_t")] uint srcCacheCount,
            [NativeTypeName("const VkValidationCacheEXT *")] ValidationCacheEXTHandle* pSrcCaches
        ) =>
            Underlying.Value!.MergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);

        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkMergeValidationCachesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MergeValidationCachesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle dstCache,
            [NativeTypeName("uint32_t")] uint srcCacheCount,
            [NativeTypeName("const VkValidationCacheEXT *")]
                Ref<ValidationCacheEXTHandle> pSrcCaches
        )
        {
            fixed (ValidationCacheEXTHandle* __dsl_pSrcCaches = pSrcCaches)
            {
                return (Result)MergeValidationCachesEXT(
                    device,
                    dstCache,
                    srcCacheCount,
                    __dsl_pSrcCaches
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [NativeFunction("vulkan", EntryPoint = "vkQueueBeginDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void QueueBeginDebugUtilsLabelEXT(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
        ) => Underlying.Value!.QueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueBeginDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void QueueBeginDebugUtilsLabelEXT(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
        )
        {
            fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
            {
                QueueBeginDebugUtilsLabelEXT(queue, __dsl_pLabelInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkQueueBindSparse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueBindSparse(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindSparseInfo *")] BindSparseInfo* pBindInfo,
            [NativeTypeName("VkFence")] FenceHandle fence
        ) => Underlying.Value!.QueueBindSparse(queue, bindInfoCount, pBindInfo, fence);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueBindSparse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueBindSparse(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindSparseInfo *")] Ref<BindSparseInfo> pBindInfo,
            [NativeTypeName("VkFence")] FenceHandle fence
        )
        {
            fixed (BindSparseInfo* __dsl_pBindInfo = pBindInfo)
            {
                return (Result)QueueBindSparse(queue, bindInfoCount, __dsl_pBindInfo, fence);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [NativeFunction("vulkan", EntryPoint = "vkQueueEndDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void QueueEndDebugUtilsLabelEXT(
            [NativeTypeName("VkQueue")] QueueHandle queue
        ) => Underlying.Value!.QueueEndDebugUtilsLabelEXT(queue);

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [NativeFunction("vulkan", EntryPoint = "vkQueueInsertDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void QueueInsertDebugUtilsLabelEXT(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
        ) => Underlying.Value!.QueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueInsertDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void QueueInsertDebugUtilsLabelEXT(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
        )
        {
            fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
            {
                QueueInsertDebugUtilsLabelEXT(queue, __dsl_pLabelInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkQueueNotifyOutOfBandNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void QueueNotifyOutOfBandNV(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("const VkOutOfBandQueueTypeInfoNV *")]
                OutOfBandQueueTypeInfoNV* pQueueTypeInfo
        ) => Underlying.Value!.QueueNotifyOutOfBandNV(queue, pQueueTypeInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueNotifyOutOfBandNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void QueueNotifyOutOfBandNV(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("const VkOutOfBandQueueTypeInfoNV *")]
                Ref<OutOfBandQueueTypeInfoNV> pQueueTypeInfo
        )
        {
            fixed (OutOfBandQueueTypeInfoNV* __dsl_pQueueTypeInfo = pQueueTypeInfo)
            {
                QueueNotifyOutOfBandNV(queue, __dsl_pQueueTypeInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [NativeFunction("vulkan", EntryPoint = "vkQueuePresentKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueuePresentKHR(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("const VkPresentInfoKHR *")] PresentInfoKHR* pPresentInfo
        ) => Underlying.Value!.QueuePresentKHR(queue, pPresentInfo);

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueuePresentKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueuePresentKHR(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("const VkPresentInfoKHR *")] Ref<PresentInfoKHR> pPresentInfo
        )
        {
            fixed (PresentInfoKHR* __dsl_pPresentInfo = pPresentInfo)
            {
                return (Result)QueuePresentKHR(queue, __dsl_pPresentInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [NativeFunction("vulkan", EntryPoint = "vkQueueSetPerformanceConfigurationINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueSetPerformanceConfigurationIntel(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("VkPerformanceConfigurationINTEL")]
                PerformanceConfigurationIntelHandle configuration
        ) => Underlying.Value!.QueueSetPerformanceConfigurationIntel(queue, configuration);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueSubmit(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("uint32_t")] uint submitCount,
            [NativeTypeName("const VkSubmitInfo *")] SubmitInfo* pSubmits,
            [NativeTypeName("VkFence")] FenceHandle fence
        ) => Underlying.Value!.QueueSubmit(queue, submitCount, pSubmits, fence);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueSubmit(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("uint32_t")] uint submitCount,
            [NativeTypeName("const VkSubmitInfo *")] Ref<SubmitInfo> pSubmits,
            [NativeTypeName("VkFence")] FenceHandle fence
        )
        {
            fixed (SubmitInfo* __dsl_pSubmits = pSubmits)
            {
                return (Result)QueueSubmit(queue, submitCount, __dsl_pSubmits, fence);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueSubmit2(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("uint32_t")] uint submitCount,
            [NativeTypeName("const VkSubmitInfo2 *")] SubmitInfo2* pSubmits,
            [NativeTypeName("VkFence")] FenceHandle fence
        ) => Underlying.Value!.QueueSubmit2(queue, submitCount, pSubmits, fence);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueSubmit2(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("uint32_t")] uint submitCount,
            [NativeTypeName("const VkSubmitInfo2 *")] Ref<SubmitInfo2> pSubmits,
            [NativeTypeName("VkFence")] FenceHandle fence
        )
        {
            fixed (SubmitInfo2* __dsl_pSubmits = pSubmits)
            {
                return (Result)QueueSubmit2(queue, submitCount, __dsl_pSubmits, fence);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueSubmit2KHR(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("uint32_t")] uint submitCount,
            [NativeTypeName("const VkSubmitInfo2 *")] SubmitInfo2* pSubmits,
            [NativeTypeName("VkFence")] FenceHandle fence
        ) => Underlying.Value!.QueueSubmit2KHR(queue, submitCount, pSubmits, fence);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueSubmit2KHR(
            [NativeTypeName("VkQueue")] QueueHandle queue,
            [NativeTypeName("uint32_t")] uint submitCount,
            [NativeTypeName("const VkSubmitInfo2 *")] Ref<SubmitInfo2> pSubmits,
            [NativeTypeName("VkFence")] FenceHandle fence
        )
        {
            fixed (SubmitInfo2* __dsl_pSubmits = pSubmits)
            {
                return (Result)QueueSubmit2KHR(queue, submitCount, __dsl_pSubmits, fence);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkQueueWaitIdle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueWaitIdle([NativeTypeName("VkQueue")] QueueHandle queue) =>
            Underlying.Value!.QueueWaitIdle(queue);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkRegisterDeviceEventEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result RegisterDeviceEventEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceEventInfoEXT *")] DeviceEventInfoEXT* pDeviceEventInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkFence *")] FenceHandle* pFence
        ) => Underlying.Value!.RegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkRegisterDeviceEventEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result RegisterDeviceEventEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDeviceEventInfoEXT *")]
                Ref<DeviceEventInfoEXT> pDeviceEventInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkFence *")] Ref<FenceHandle> pFence
        )
        {
            fixed (FenceHandle* __dsl_pFence = pFence)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DeviceEventInfoEXT* __dsl_pDeviceEventInfo = pDeviceEventInfo)
            {
                return (Result)RegisterDeviceEventEXT(
                    device,
                    __dsl_pDeviceEventInfo,
                    __dsl_pAllocator,
                    __dsl_pFence
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkRegisterDisplayEventEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result RegisterDisplayEventEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
            [NativeTypeName("const VkDisplayEventInfoEXT *")]
                DisplayEventInfoEXT* pDisplayEventInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkFence *")] FenceHandle* pFence
        ) =>
            Underlying.Value!.RegisterDisplayEventEXT(
                device,
                display,
                pDisplayEventInfo,
                pAllocator,
                pFence
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkRegisterDisplayEventEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result RegisterDisplayEventEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
            [NativeTypeName("const VkDisplayEventInfoEXT *")]
                Ref<DisplayEventInfoEXT> pDisplayEventInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkFence *")] Ref<FenceHandle> pFence
        )
        {
            fixed (FenceHandle* __dsl_pFence = pFence)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DisplayEventInfoEXT* __dsl_pDisplayEventInfo = pDisplayEventInfo)
            {
                return (Result)RegisterDisplayEventEXT(
                    device,
                    display,
                    __dsl_pDisplayEventInfo,
                    __dsl_pAllocator,
                    __dsl_pFence
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkReleaseCapturedPipelineDataKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ReleaseCapturedPipelineDataKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkReleaseCapturedPipelineDataInfoKHR *")]
                ReleaseCapturedPipelineDataInfoKHR* pInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        ) => Underlying.Value!.ReleaseCapturedPipelineDataKHR(device, pInfo, pAllocator);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkReleaseCapturedPipelineDataKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ReleaseCapturedPipelineDataKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkReleaseCapturedPipelineDataInfoKHR *")]
                Ref<ReleaseCapturedPipelineDataInfoKHR> pInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ReleaseCapturedPipelineDataInfoKHR* __dsl_pInfo = pInfo)
            {
                return (Result)ReleaseCapturedPipelineDataKHR(
                    device,
                    __dsl_pInfo,
                    __dsl_pAllocator
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_direct_mode_display"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkReleaseDisplayEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ReleaseDisplayEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display
        ) => Underlying.Value!.ReleaseDisplayEXT(physicalDevice, display);

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [NativeFunction("vulkan", EntryPoint = "vkReleasePerformanceConfigurationINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ReleasePerformanceConfigurationIntel(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkPerformanceConfigurationINTEL")]
                PerformanceConfigurationIntelHandle configuration
        ) => Underlying.Value!.ReleasePerformanceConfigurationIntel(device, configuration);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkReleaseProfilingLockKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ReleaseProfilingLockKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device
        ) => Underlying.Value!.ReleaseProfilingLockKHR(device);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_swapchain_maintenance1"],
            ImpliesSets = [
                "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_KHR_get_physical_device_properties2",
                "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ReleaseSwapchainImagesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkReleaseSwapchainImagesInfoKHR *")]
                ReleaseSwapchainImagesInfoKHR* pReleaseInfo
        ) => Underlying.Value!.ReleaseSwapchainImagesEXT(device, pReleaseInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_swapchain_maintenance1"],
            ImpliesSets = [
                "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_KHR_get_physical_device_properties2",
                "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ReleaseSwapchainImagesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkReleaseSwapchainImagesInfoKHR *")]
                Ref<ReleaseSwapchainImagesInfoKHR> pReleaseInfo
        )
        {
            fixed (ReleaseSwapchainImagesInfoKHR* __dsl_pReleaseInfo = pReleaseInfo)
            {
                return (Result)ReleaseSwapchainImagesEXT(device, __dsl_pReleaseInfo);
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ReleaseSwapchainImagesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkReleaseSwapchainImagesInfoKHR *")]
                ReleaseSwapchainImagesInfoKHR* pReleaseInfo
        ) => Underlying.Value!.ReleaseSwapchainImagesKHR(device, pReleaseInfo);

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ReleaseSwapchainImagesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkReleaseSwapchainImagesInfoKHR *")]
                Ref<ReleaseSwapchainImagesInfoKHR> pReleaseInfo
        )
        {
            fixed (ReleaseSwapchainImagesInfoKHR* __dsl_pReleaseInfo = pReleaseInfo)
            {
                return (Result)ReleaseSwapchainImagesKHR(device, __dsl_pReleaseInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkResetCommandBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ResetCommandBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
            [NativeTypeName("VkCommandBufferResetFlags")] CommandBufferResetFlags flags
        ) => Underlying.Value!.ResetCommandBuffer(commandBuffer, flags);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkResetCommandPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ResetCommandPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
            [NativeTypeName("VkCommandPoolResetFlags")] CommandPoolResetFlags flags
        ) => Underlying.Value!.ResetCommandPool(device, commandPool, flags);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkResetDescriptorPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ResetDescriptorPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
            [NativeTypeName("VkDescriptorPoolResetFlags")] uint flags
        ) => Underlying.Value!.ResetDescriptorPool(device, descriptorPool, flags);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkResetEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ResetEvent(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkEvent")] EventHandle @event
        ) => Underlying.Value!.ResetEvent(device, @event);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkResetFences")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ResetFences(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint fenceCount,
            [NativeTypeName("const VkFence *")] FenceHandle* pFences
        ) => Underlying.Value!.ResetFences(device, fenceCount, pFences);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkResetFences")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ResetFences(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint fenceCount,
            [NativeTypeName("const VkFence *")] Ref<FenceHandle> pFences
        )
        {
            fixed (FenceHandle* __dsl_pFences = pFences)
            {
                return (Result)ResetFences(device, fenceCount, __dsl_pFences);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkResetQueryPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ResetQueryPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount
        ) => Underlying.Value!.ResetQueryPool(device, queryPool, firstQuery, queryCount);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_query_reset"],
            ImpliesSets = [
                "VK_EXT_host_query_reset+VK_KHR_get_physical_device_properties2",
                "VK_EXT_host_query_reset+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkResetQueryPoolEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ResetQueryPoolEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount
        ) => Underlying.Value!.ResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectNameEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetDebugUtilsObjectNameEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDebugUtilsObjectNameInfoEXT *")]
                DebugUtilsObjectNameInfoEXT* pNameInfo
        ) => Underlying.Value!.SetDebugUtilsObjectNameEXT(device, pNameInfo);

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectNameEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetDebugUtilsObjectNameEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDebugUtilsObjectNameInfoEXT *")]
                Ref<DebugUtilsObjectNameInfoEXT> pNameInfo
        )
        {
            fixed (DebugUtilsObjectNameInfoEXT* __dsl_pNameInfo = pNameInfo)
            {
                return (Result)SetDebugUtilsObjectNameEXT(device, __dsl_pNameInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectTagEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetDebugUtilsObjectTagEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDebugUtilsObjectTagInfoEXT *")]
                DebugUtilsObjectTagInfoEXT* pTagInfo
        ) => Underlying.Value!.SetDebugUtilsObjectTagEXT(device, pTagInfo);

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectTagEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetDebugUtilsObjectTagEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkDebugUtilsObjectTagInfoEXT *")]
                Ref<DebugUtilsObjectTagInfoEXT> pTagInfo
        )
        {
            fixed (DebugUtilsObjectTagInfoEXT* __dsl_pTagInfo = pTagInfo)
            {
                return (Result)SetDebugUtilsObjectTagEXT(device, __dsl_pTagInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_pageable_device_local_memory"],
            ImpliesSets = ["VK_EXT_memory_priority"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkSetDeviceMemoryPriorityEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetDeviceMemoryPriorityEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
            float priority
        ) => Underlying.Value!.SetDeviceMemoryPriorityEXT(device, memory, priority);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkSetEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetEvent(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkEvent")] EventHandle @event
        ) => Underlying.Value!.SetEvent(device, @event);

        [SupportedApiProfile("vulkan", ["VK_EXT_hdr_metadata"], ImpliesSets = ["VK_KHR_swapchain"])]
        [NativeFunction("vulkan", EntryPoint = "vkSetHdrMetadataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetHdrMetadataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint swapchainCount,
            [NativeTypeName("const VkSwapchainKHR *")] SwapchainKHRHandle* pSwapchains,
            [NativeTypeName("const VkHdrMetadataEXT *")] HdrMetadataEXT* pMetadata
        ) => Underlying.Value!.SetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);

        [SupportedApiProfile("vulkan", ["VK_EXT_hdr_metadata"], ImpliesSets = ["VK_KHR_swapchain"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetHdrMetadataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetHdrMetadataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint swapchainCount,
            [NativeTypeName("const VkSwapchainKHR *")] Ref<SwapchainKHRHandle> pSwapchains,
            [NativeTypeName("const VkHdrMetadataEXT *")] Ref<HdrMetadataEXT> pMetadata
        )
        {
            fixed (HdrMetadataEXT* __dsl_pMetadata = pMetadata)
            fixed (SwapchainKHRHandle* __dsl_pSwapchains = pSwapchains)
            {
                SetHdrMetadataEXT(device, swapchainCount, __dsl_pSwapchains, __dsl_pMetadata);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkSetLatencyMarkerNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetLatencyMarkerNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("const VkSetLatencyMarkerInfoNV *")]
                SetLatencyMarkerInfoNV* pLatencyMarkerInfo
        ) => Underlying.Value!.SetLatencyMarkerNV(device, swapchain, pLatencyMarkerInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetLatencyMarkerNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetLatencyMarkerNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("const VkSetLatencyMarkerInfoNV *")]
                Ref<SetLatencyMarkerInfoNV> pLatencyMarkerInfo
        )
        {
            fixed (SetLatencyMarkerInfoNV* __dsl_pLatencyMarkerInfo = pLatencyMarkerInfo)
            {
                SetLatencyMarkerNV(device, swapchain, __dsl_pLatencyMarkerInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkSetLatencySleepModeNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetLatencySleepModeNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("const VkLatencySleepModeInfoNV *")]
                LatencySleepModeInfoNV* pSleepModeInfo
        ) => Underlying.Value!.SetLatencySleepModeNV(device, swapchain, pSleepModeInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetLatencySleepModeNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetLatencySleepModeNV(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("const VkLatencySleepModeInfoNV *")]
                Ref<LatencySleepModeInfoNV> pSleepModeInfo
        )
        {
            fixed (LatencySleepModeInfoNV* __dsl_pSleepModeInfo = pSleepModeInfo)
            {
                return (Result)SetLatencySleepModeNV(device, swapchain, __dsl_pSleepModeInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_AMD_display_native_hdr"],
            ImpliesSets = [
                "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
                "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkSetLocalDimmingAMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetLocalDimmingAMD(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapChain,
            [NativeTypeName("VkBool32")] MaybeBool<uint> localDimmingEnable
        ) => Underlying.Value!.SetLocalDimmingAMD(device, swapChain, localDimmingEnable);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [NativeFunction("vulkan", EntryPoint = "vkSetPrivateData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetPrivateData(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            ObjectType objectType,
            [NativeTypeName("uint64_t")] ulong objectHandle,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
            [NativeTypeName("uint64_t")] ulong data
        ) =>
            Underlying.Value!.SetPrivateData(
                device,
                objectType,
                objectHandle,
                privateDataSlot,
                data
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkSetPrivateDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetPrivateDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            ObjectType objectType,
            [NativeTypeName("uint64_t")] ulong objectHandle,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
            [NativeTypeName("uint64_t")] ulong data
        ) =>
            Underlying.Value!.SetPrivateDataEXT(
                device,
                objectType,
                objectHandle,
                privateDataSlot,
                data
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SignalSemaphore(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSemaphoreSignalInfo *")] SemaphoreSignalInfo* pSignalInfo
        ) => Underlying.Value!.SignalSemaphore(device, pSignalInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SignalSemaphore(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSemaphoreSignalInfo *")] Ref<SemaphoreSignalInfo> pSignalInfo
        )
        {
            fixed (SemaphoreSignalInfo* __dsl_pSignalInfo = pSignalInfo)
            {
                return (Result)SignalSemaphore(device, __dsl_pSignalInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_timeline_semaphore"],
            ImpliesSets = [
                "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
                "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphoreKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SignalSemaphoreKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSemaphoreSignalInfo *")] SemaphoreSignalInfo* pSignalInfo
        ) => Underlying.Value!.SignalSemaphoreKHR(device, pSignalInfo);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_timeline_semaphore"],
            ImpliesSets = [
                "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
                "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphoreKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SignalSemaphoreKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSemaphoreSignalInfo *")] Ref<SemaphoreSignalInfo> pSignalInfo
        )
        {
            fixed (SemaphoreSignalInfo* __dsl_pSignalInfo = pSignalInfo)
            {
                return (Result)SignalSemaphoreKHR(device, __dsl_pSignalInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [NativeFunction("vulkan", EntryPoint = "vkSubmitDebugUtilsMessageEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SubmitDebugUtilsMessageEXT(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            DebugUtilsMessageSeverityFlagsEXT messageSeverity,
            [NativeTypeName("VkDebugUtilsMessageTypeFlagsEXT")]
                DebugUtilsMessageTypeFlagsEXT messageTypes,
            [NativeTypeName("const VkDebugUtilsMessengerCallbackDataEXT *")]
                DebugUtilsMessengerCallbackDataEXT* pCallbackData
        ) =>
            Underlying.Value!.SubmitDebugUtilsMessageEXT(
                instance,
                messageSeverity,
                messageTypes,
                pCallbackData
            );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSubmitDebugUtilsMessageEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SubmitDebugUtilsMessageEXT(
            [NativeTypeName("VkInstance")] InstanceHandle instance,
            DebugUtilsMessageSeverityFlagsEXT messageSeverity,
            [NativeTypeName("VkDebugUtilsMessageTypeFlagsEXT")]
                DebugUtilsMessageTypeFlagsEXT messageTypes,
            [NativeTypeName("const VkDebugUtilsMessengerCallbackDataEXT *")]
                Ref<DebugUtilsMessengerCallbackDataEXT> pCallbackData
        )
        {
            fixed (DebugUtilsMessengerCallbackDataEXT* __dsl_pCallbackData = pCallbackData)
            {
                SubmitDebugUtilsMessageEXT(
                    instance,
                    messageSeverity,
                    messageTypes,
                    __dsl_pCallbackData
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result TransitionImageLayout(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint transitionCount,
            [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
                HostImageLayoutTransitionInfo* pTransitions
        ) => Underlying.Value!.TransitionImageLayout(device, transitionCount, pTransitions);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result TransitionImageLayout(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint transitionCount,
            [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
                Ref<HostImageLayoutTransitionInfo> pTransitions
        )
        {
            fixed (HostImageLayoutTransitionInfo* __dsl_pTransitions = pTransitions)
            {
                return (Result)TransitionImageLayout(device, transitionCount, __dsl_pTransitions);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayoutEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result TransitionImageLayoutEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint transitionCount,
            [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
                HostImageLayoutTransitionInfo* pTransitions
        ) => Underlying.Value!.TransitionImageLayoutEXT(device, transitionCount, pTransitions);

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayoutEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result TransitionImageLayoutEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint transitionCount,
            [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
                Ref<HostImageLayoutTransitionInfo> pTransitions
        )
        {
            fixed (HostImageLayoutTransitionInfo* __dsl_pTransitions = pTransitions)
            {
                return (Result)TransitionImageLayoutEXT(
                    device,
                    transitionCount,
                    __dsl_pTransitions
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkTrimCommandPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void TrimCommandPool(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
            [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
        ) => Underlying.Value!.TrimCommandPool(device, commandPool, flags);

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance1"])]
        [NativeFunction("vulkan", EntryPoint = "vkTrimCommandPoolKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void TrimCommandPoolKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
            [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
        ) => Underlying.Value!.TrimCommandPoolKHR(device, commandPool, flags);

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [NativeFunction("vulkan", EntryPoint = "vkUninitializePerformanceApiINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UninitializePerformanceApiIntel(
            [NativeTypeName("VkDevice")] DeviceHandle device
        ) => Underlying.Value!.UninitializePerformanceApiIntel(device);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnmapMemory(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory
        ) => Underlying.Value!.UnmapMemory(device, memory);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result UnmapMemory2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMemoryUnmapInfo *")] MemoryUnmapInfo* pMemoryUnmapInfo
        ) => Underlying.Value!.UnmapMemory2(device, pMemoryUnmapInfo);

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result UnmapMemory2(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMemoryUnmapInfo *")] Ref<MemoryUnmapInfo> pMemoryUnmapInfo
        )
        {
            fixed (MemoryUnmapInfo* __dsl_pMemoryUnmapInfo = pMemoryUnmapInfo)
            {
                return (Result)UnmapMemory2(device, __dsl_pMemoryUnmapInfo);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
        [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result UnmapMemory2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMemoryUnmapInfo *")] MemoryUnmapInfo* pMemoryUnmapInfo
        ) => Underlying.Value!.UnmapMemory2KHR(device, pMemoryUnmapInfo);

        [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result UnmapMemory2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkMemoryUnmapInfo *")] Ref<MemoryUnmapInfo> pMemoryUnmapInfo
        )
        {
            fixed (MemoryUnmapInfo* __dsl_pMemoryUnmapInfo = pMemoryUnmapInfo)
            {
                return (Result)UnmapMemory2KHR(device, __dsl_pMemoryUnmapInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSets")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateDescriptorSets(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint descriptorWriteCount,
            [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites,
            [NativeTypeName("uint32_t")] uint descriptorCopyCount,
            [NativeTypeName("const VkCopyDescriptorSet *")] CopyDescriptorSet* pDescriptorCopies
        ) =>
            Underlying.Value!.UpdateDescriptorSets(
                device,
                descriptorWriteCount,
                pDescriptorWrites,
                descriptorCopyCount,
                pDescriptorCopies
            );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSets")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateDescriptorSets(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint descriptorWriteCount,
            [NativeTypeName("const VkWriteDescriptorSet *")]
                Ref<WriteDescriptorSet> pDescriptorWrites,
            [NativeTypeName("uint32_t")] uint descriptorCopyCount,
            [NativeTypeName("const VkCopyDescriptorSet *")] Ref<CopyDescriptorSet> pDescriptorCopies
        )
        {
            fixed (CopyDescriptorSet* __dsl_pDescriptorCopies = pDescriptorCopies)
            fixed (WriteDescriptorSet* __dsl_pDescriptorWrites = pDescriptorWrites)
            {
                UpdateDescriptorSets(
                    device,
                    descriptorWriteCount,
                    __dsl_pDescriptorWrites,
                    descriptorCopyCount,
                    __dsl_pDescriptorCopies
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateDescriptorSetWithTemplate(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
            [NativeTypeName("const void *")] void* pData
        ) =>
            Underlying.Value!.UpdateDescriptorSetWithTemplate(
                device,
                descriptorSet,
                descriptorUpdateTemplate,
                pData
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateDescriptorSetWithTemplate(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
            [NativeTypeName("const void *")] Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            {
                UpdateDescriptorSetWithTemplate(
                    device,
                    descriptorSet,
                    descriptorUpdateTemplate,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateDescriptorSetWithTemplateKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
            [NativeTypeName("const void *")] void* pData
        ) =>
            Underlying.Value!.UpdateDescriptorSetWithTemplateKHR(
                device,
                descriptorSet,
                descriptorUpdateTemplate,
                pData
            );

        [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateDescriptorSetWithTemplateKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
            [NativeTypeName("const void *")] Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            {
                UpdateDescriptorSetWithTemplateKHR(
                    device,
                    descriptorSet,
                    descriptorUpdateTemplate,
                    __dsl_pData
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateIndirectExecutionSetPipelineEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                IndirectExecutionSetEXTHandle indirectExecutionSet,
            [NativeTypeName("uint32_t")] uint executionSetWriteCount,
            [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
                WriteIndirectExecutionSetPipelineEXT* pExecutionSetWrites
        ) =>
            Underlying.Value!.UpdateIndirectExecutionSetPipelineEXT(
                device,
                indirectExecutionSet,
                executionSetWriteCount,
                pExecutionSetWrites
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateIndirectExecutionSetPipelineEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                IndirectExecutionSetEXTHandle indirectExecutionSet,
            [NativeTypeName("uint32_t")] uint executionSetWriteCount,
            [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
                Ref<WriteIndirectExecutionSetPipelineEXT> pExecutionSetWrites
        )
        {
            fixed (
                WriteIndirectExecutionSetPipelineEXT* __dsl_pExecutionSetWrites =
                    pExecutionSetWrites
            )
            {
                UpdateIndirectExecutionSetPipelineEXT(
                    device,
                    indirectExecutionSet,
                    executionSetWriteCount,
                    __dsl_pExecutionSetWrites
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateIndirectExecutionSetPipelineEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                IndirectExecutionSetEXTHandle indirectExecutionSet,
            [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
                WriteIndirectExecutionSetPipelineEXT pExecutionSetWrites
        ) =>
            Underlying.Value!.UpdateIndirectExecutionSetPipelineEXT(
                device,
                indirectExecutionSet,
                pExecutionSetWrites
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateIndirectExecutionSetShaderEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                IndirectExecutionSetEXTHandle indirectExecutionSet,
            [NativeTypeName("uint32_t")] uint executionSetWriteCount,
            [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
                WriteIndirectExecutionSetShaderEXT* pExecutionSetWrites
        ) =>
            Underlying.Value!.UpdateIndirectExecutionSetShaderEXT(
                device,
                indirectExecutionSet,
                executionSetWriteCount,
                pExecutionSetWrites
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateIndirectExecutionSetShaderEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                IndirectExecutionSetEXTHandle indirectExecutionSet,
            [NativeTypeName("uint32_t")] uint executionSetWriteCount,
            [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
                Ref<WriteIndirectExecutionSetShaderEXT> pExecutionSetWrites
        )
        {
            fixed (
                WriteIndirectExecutionSetShaderEXT* __dsl_pExecutionSetWrites = pExecutionSetWrites
            )
            {
                UpdateIndirectExecutionSetShaderEXT(
                    device,
                    indirectExecutionSet,
                    executionSetWriteCount,
                    __dsl_pExecutionSetWrites
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateIndirectExecutionSetShaderEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                IndirectExecutionSetEXTHandle indirectExecutionSet,
            [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
                WriteIndirectExecutionSetShaderEXT pExecutionSetWrites
        ) =>
            Underlying.Value!.UpdateIndirectExecutionSetShaderEXT(
                device,
                indirectExecutionSet,
                pExecutionSetWrites
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateVideoSessionParametersKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result UpdateVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkVideoSessionParametersKHR")]
                VideoSessionParametersKHRHandle videoSessionParameters,
            [NativeTypeName("const VkVideoSessionParametersUpdateInfoKHR *")]
                VideoSessionParametersUpdateInfoKHR* pUpdateInfo
        ) =>
            Underlying.Value!.UpdateVideoSessionParametersKHR(
                device,
                videoSessionParameters,
                pUpdateInfo
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateVideoSessionParametersKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result UpdateVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkVideoSessionParametersKHR")]
                VideoSessionParametersKHRHandle videoSessionParameters,
            [NativeTypeName("const VkVideoSessionParametersUpdateInfoKHR *")]
                Ref<VideoSessionParametersUpdateInfoKHR> pUpdateInfo
        )
        {
            fixed (VideoSessionParametersUpdateInfoKHR* __dsl_pUpdateInfo = pUpdateInfo)
            {
                return (Result)UpdateVideoSessionParametersKHR(
                    device,
                    videoSessionParameters,
                    __dsl_pUpdateInfo
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkWaitForFences")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WaitForFences(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint fenceCount,
            [NativeTypeName("const VkFence *")] FenceHandle* pFences,
            [NativeTypeName("VkBool32")] MaybeBool<uint> waitAll,
            [NativeTypeName("uint64_t")] ulong timeout
        ) => Underlying.Value!.WaitForFences(device, fenceCount, pFences, waitAll, timeout);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkWaitForFences")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WaitForFences(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint fenceCount,
            [NativeTypeName("const VkFence *")] Ref<FenceHandle> pFences,
            [NativeTypeName("VkBool32")] MaybeBool<uint> waitAll,
            [NativeTypeName("uint64_t")] ulong timeout
        )
        {
            fixed (FenceHandle* __dsl_pFences = pFences)
            {
                return (Result)WaitForFences(device, fenceCount, __dsl_pFences, waitAll, timeout);
            }
        }

        [SupportedApiProfile("vulkan")]
        [NativeFunction("vulkan", EntryPoint = "vkWaitForPresent2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WaitForPresent2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("const VkPresentWait2InfoKHR *")] PresentWait2InfoKHR* pPresentWait2Info
        ) => Underlying.Value!.WaitForPresent2KHR(device, swapchain, pPresentWait2Info);

        [SupportedApiProfile("vulkan")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkWaitForPresent2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WaitForPresent2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("const VkPresentWait2InfoKHR *")]
                Ref<PresentWait2InfoKHR> pPresentWait2Info
        )
        {
            fixed (PresentWait2InfoKHR* __dsl_pPresentWait2Info = pPresentWait2Info)
            {
                return (Result)WaitForPresent2KHR(device, swapchain, __dsl_pPresentWait2Info);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_present_wait"],
            ImpliesSets = ["VK_KHR_present_id", "VK_KHR_swapchain"]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkWaitForPresentKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WaitForPresentKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
            [NativeTypeName("uint64_t")] ulong presentId,
            [NativeTypeName("uint64_t")] ulong timeout
        ) => Underlying.Value!.WaitForPresentKHR(device, swapchain, presentId, timeout);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphores")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WaitSemaphores(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSemaphoreWaitInfo *")] SemaphoreWaitInfo* pWaitInfo,
            [NativeTypeName("uint64_t")] ulong timeout
        ) => Underlying.Value!.WaitSemaphores(device, pWaitInfo, timeout);

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphores")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WaitSemaphores(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSemaphoreWaitInfo *")] Ref<SemaphoreWaitInfo> pWaitInfo,
            [NativeTypeName("uint64_t")] ulong timeout
        )
        {
            fixed (SemaphoreWaitInfo* __dsl_pWaitInfo = pWaitInfo)
            {
                return (Result)WaitSemaphores(device, __dsl_pWaitInfo, timeout);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_timeline_semaphore"],
            ImpliesSets = [
                "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
                "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphoresKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WaitSemaphoresKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSemaphoreWaitInfo *")] SemaphoreWaitInfo* pWaitInfo,
            [NativeTypeName("uint64_t")] ulong timeout
        ) => Underlying.Value!.WaitSemaphoresKHR(device, pWaitInfo, timeout);

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_timeline_semaphore"],
            ImpliesSets = [
                "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
                "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphoresKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WaitSemaphoresKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("const VkSemaphoreWaitInfo *")] Ref<SemaphoreWaitInfo> pWaitInfo,
            [NativeTypeName("uint64_t")] ulong timeout
        )
        {
            fixed (SemaphoreWaitInfo* __dsl_pWaitInfo = pWaitInfo)
            {
                return (Result)WaitSemaphoresKHR(device, __dsl_pWaitInfo, timeout);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkWriteAccelerationStructuresPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WriteAccelerationStructuresPropertiesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint accelerationStructureCount,
            [NativeTypeName("const VkAccelerationStructureKHR *")]
                AccelerationStructureKHRHandle* pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pData,
            [NativeTypeName("size_t")] nuint stride
        ) =>
            Underlying.Value!.WriteAccelerationStructuresPropertiesKHR(
                device,
                accelerationStructureCount,
                pAccelerationStructures,
                queryType,
                dataSize,
                pData,
                stride
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkWriteAccelerationStructuresPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WriteAccelerationStructuresPropertiesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint accelerationStructureCount,
            [NativeTypeName("const VkAccelerationStructureKHR *")]
                Ref<AccelerationStructureKHRHandle> pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pData,
            [NativeTypeName("size_t")] nuint stride
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (
                AccelerationStructureKHRHandle* __dsl_pAccelerationStructures =
                    pAccelerationStructures
            )
            {
                return (Result)WriteAccelerationStructuresPropertiesKHR(
                    device,
                    accelerationStructureCount,
                    __dsl_pAccelerationStructures,
                    queryType,
                    dataSize,
                    __dsl_pData,
                    stride
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [NativeFunction("vulkan", EntryPoint = "vkWriteMicromapsPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WriteMicromapsPropertiesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint micromapCount,
            [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle* pMicromaps,
            QueryType queryType,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pData,
            [NativeTypeName("size_t")] nuint stride
        ) =>
            Underlying.Value!.WriteMicromapsPropertiesEXT(
                device,
                micromapCount,
                pMicromaps,
                queryType,
                dataSize,
                pData,
                stride
            );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkWriteMicromapsPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WriteMicromapsPropertiesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle device,
            [NativeTypeName("uint32_t")] uint micromapCount,
            [NativeTypeName("const VkMicromapEXT *")] Ref<MicromapEXTHandle> pMicromaps,
            QueryType queryType,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pData,
            [NativeTypeName("size_t")] nuint stride
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (MicromapEXTHandle* __dsl_pMicromaps = pMicromaps)
            {
                return (Result)WriteMicromapsPropertiesEXT(
                    device,
                    micromapCount,
                    __dsl_pMicromaps,
                    queryType,
                    dataSize,
                    __dsl_pData,
                    stride
                );
            }
        }
    }

    [NativeTypeName("const VkTensorCreateFlagBitsARM")]
    [SupportedApiProfile("vulkan")]
    public const ulong TensorCreateMutableFormatBitARM = 0x00000001UL;

    [NativeTypeName("const VkTensorCreateFlagBitsARM")]
    [SupportedApiProfile("vulkan")]
    public const ulong TensorCreateProtectedBitARM = 0x00000002UL;

    [NativeTypeName("const VkTensorCreateFlagBitsARM")]
    [SupportedApiProfile("vulkan")]
    public const ulong TensorCreateDescriptorBufferCaptureReplayBitARM = 0x00000004UL;

    [NativeTypeName("const VkTensorViewCreateFlagBitsARM")]
    [SupportedApiProfile("vulkan")]
    public const ulong TensorViewCreateDescriptorBufferCaptureReplayBitARM = 0x00000001UL;

    [NativeTypeName("const VkTensorUsageFlagBitsARM")]
    [SupportedApiProfile("vulkan")]
    public const ulong TensorUsageShaderBitARM = 0x00000002UL;

    [NativeTypeName("const VkTensorUsageFlagBitsARM")]
    [SupportedApiProfile("vulkan")]
    public const ulong TensorUsageTransferSrcBitARM = 0x00000004UL;

    [NativeTypeName("const VkTensorUsageFlagBitsARM")]
    [SupportedApiProfile("vulkan")]
    public const ulong TensorUsageTransferDstBitARM = 0x00000008UL;

    [NativeTypeName("const VkTensorUsageFlagBitsARM")]
    [SupportedApiProfile("vulkan")]
    public const ulong TensorUsageImageAliasingBitARM = 0x00000010UL;

    [NativeTypeName("const VkTensorUsageFlagBitsARM")]
    [SupportedApiProfile("vulkan")]
    public const ulong TensorUsageDataGraphBitARM = 0x00000020UL;

    [NativeTypeName("const VkDataGraphPipelineSessionCreateFlagBitsARM")]
    [SupportedApiProfile("vulkan")]
    public const ulong DataGraphPipelineSessionCreateProtectedBitARM = 0x00000001UL;

    [NativeTypeName("#define VULKAN_VIDEO_CODEC_AV1STD_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecAv1StdH = 1;

    [NativeTypeName("#define vulkan_video_codec_av1std 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecAv1Std = 1;

    [NativeTypeName("#define VULKAN_VIDEO_CODECS_COMMON_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecsCommonH = 1;

    [NativeTypeName("#define vulkan_video_codecs_common 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecsCommon = 1;

    [NativeTypeName("#define STD_VIDEO_AV1_NUM_REF_FRAMES 8")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1NumRefFrames = 8;

    [NativeTypeName("#define STD_VIDEO_AV1_REFS_PER_FRAME 7")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1RefsPerFrame = 7;

    [NativeTypeName("#define STD_VIDEO_AV1_TOTAL_REFS_PER_FRAME 8")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1TotalRefsPerFrame = 8;

    [NativeTypeName("#define STD_VIDEO_AV1_MAX_TILE_COLS 64")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1MaxTileCols = 64;

    [NativeTypeName("#define STD_VIDEO_AV1_MAX_TILE_ROWS 64")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1MaxTileRows = 64;

    [NativeTypeName("#define STD_VIDEO_AV1_MAX_SEGMENTS 8")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1MaxSegments = 8;

    [NativeTypeName("#define STD_VIDEO_AV1_SEG_LVL_MAX 8")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1SegLvlMax = 8;

    [NativeTypeName("#define STD_VIDEO_AV1_PRIMARY_REF_NONE 7")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1PrimaryRefNone = 7;

    [NativeTypeName("#define STD_VIDEO_AV1_SELECT_INTEGER_MV 2")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1SelectIntegerMv = 2;

    [NativeTypeName("#define STD_VIDEO_AV1_SELECT_SCREEN_CONTENT_TOOLS 2")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1SelectScreenContentTools = 2;

    [NativeTypeName("#define STD_VIDEO_AV1_SKIP_MODE_FRAMES 2")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1SkipModeFrames = 2;

    [NativeTypeName("#define STD_VIDEO_AV1_MAX_LOOP_FILTER_STRENGTHS 4")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1MaxLoopFilterStrengths = 4;

    [NativeTypeName("#define STD_VIDEO_AV1_LOOP_FILTER_ADJUSTMENTS 2")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1LoopFilterAdjustments = 2;

    [NativeTypeName("#define STD_VIDEO_AV1_MAX_CDEF_FILTER_STRENGTHS 8")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1MaxCdefFilterStrengths = 8;

    [NativeTypeName("#define STD_VIDEO_AV1_MAX_NUM_PLANES 3")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1MaxNumPlanes = 3;

    [NativeTypeName("#define STD_VIDEO_AV1_GLOBAL_MOTION_PARAMS 6")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1GlobalMotionParams = 6;

    [NativeTypeName("#define STD_VIDEO_AV1_MAX_NUM_Y_POINTS 14")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1MaxNumYPoints = 14;

    [NativeTypeName("#define STD_VIDEO_AV1_MAX_NUM_CB_POINTS 10")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1MaxNumCbPoints = 10;

    [NativeTypeName("#define STD_VIDEO_AV1_MAX_NUM_CR_POINTS 10")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1MaxNumCrPoints = 10;

    [NativeTypeName("#define STD_VIDEO_AV1_MAX_NUM_POS_LUMA 24")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1MaxNumPosLuma = 24;

    [NativeTypeName("#define STD_VIDEO_AV1_MAX_NUM_POS_CHROMA 25")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoAv1MaxNumPosChroma = 25;

    [NativeTypeName("#define VULKAN_VIDEO_CODEC_AV1STD_DECODE_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecAv1StdDecodeH = 1;

    [NativeTypeName("#define vulkan_video_codec_av1std_decode 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecAv1StdDecode = 1;

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_API_VERSION_1_0_0 VK_MAKE_VIDEO_STD_VERSION(1, 0, 0)"
    )]
    [SupportedApiProfile("vulkan")]
    public const uint StdVulkanVideoCodecAv1DecodeApiVersion1X0X0 = (
        (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_SPEC_VERSION VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_API_VERSION_1_0_0"
    )]
    [SupportedApiProfile("vulkan")]
    public const uint StdVulkanVideoCodecAv1DecodeSpecVersion = (
        (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_EXTENSION_NAME \"VK_STD_vulkan_video_codec_av1_decode\""
    )]
    [SupportedApiProfile("vulkan")]
    public static Utf8String StdVulkanVideoCodecAv1DecodeExtensionName =>
        "VK_STD_vulkan_video_codec_av1_decode"u8;

    [NativeTypeName("#define VULKAN_VIDEO_CODEC_AV1STD_ENCODE_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecAv1StdEncodeH = 1;

    [NativeTypeName("#define vulkan_video_codec_av1std_encode 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecAv1StdEncode = 1;

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_AV1_ENCODE_API_VERSION_1_0_0 VK_MAKE_VIDEO_STD_VERSION(1, 0, 0)"
    )]
    [SupportedApiProfile("vulkan")]
    public const uint StdVulkanVideoCodecAv1EncodeApiVersion1X0X0 = (
        (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_AV1_ENCODE_SPEC_VERSION VK_STD_VULKAN_VIDEO_CODEC_AV1_ENCODE_API_VERSION_1_0_0"
    )]
    [SupportedApiProfile("vulkan")]
    public const uint StdVulkanVideoCodecAv1EncodeSpecVersion = (
        (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_AV1_ENCODE_EXTENSION_NAME \"VK_STD_vulkan_video_codec_av1_encode\""
    )]
    [SupportedApiProfile("vulkan")]
    public static Utf8String StdVulkanVideoCodecAv1EncodeExtensionName =>
        "VK_STD_vulkan_video_codec_av1_encode"u8;

    [NativeTypeName("#define VULKAN_VIDEO_CODEC_H264STD_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecH264StdH = 1;

    [NativeTypeName("#define vulkan_video_codec_h264std 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecH264Std = 1;

    [NativeTypeName("#define STD_VIDEO_H264_CPB_CNT_LIST_SIZE 32")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH264CpbCntListSize = 32;

    [NativeTypeName("#define STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS 6")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH264ScalingList4X4NumLists = 6;

    [NativeTypeName("#define STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS 16")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH264ScalingList4X4NumElements = 16;

    [NativeTypeName("#define STD_VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS 6")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH264ScalingList8X8NumLists = 6;

    [NativeTypeName("#define STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS 64")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH264ScalingList8X8NumElements = 64;

    [NativeTypeName("#define STD_VIDEO_H264_MAX_NUM_LIST_REF 32")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH264MaxNumListRef = 32;

    [NativeTypeName("#define STD_VIDEO_H264_MAX_CHROMA_PLANES 2")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH264MaxChromaPlanes = 2;

    [NativeTypeName("#define STD_VIDEO_H264_NO_REFERENCE_PICTURE 0xFF")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH264NoReferencePicture = 0xFF;

    [NativeTypeName("#define VULKAN_VIDEO_CODEC_H264STD_DECODE_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecH264StdDecodeH = 1;

    [NativeTypeName("#define vulkan_video_codec_h264std_decode 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecH264StdDecode = 1;

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_1_0_0 VK_MAKE_VIDEO_STD_VERSION(1, 0, 0)"
    )]
    [SupportedApiProfile("vulkan")]
    public const uint StdVulkanVideoCodecH264DecodeApiVersion1X0X0 = (
        (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_SPEC_VERSION VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_1_0_0"
    )]
    [SupportedApiProfile("vulkan")]
    public const uint StdVulkanVideoCodecH264DecodeSpecVersion = (
        (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_EXTENSION_NAME \"VK_STD_vulkan_video_codec_h264_decode\""
    )]
    [SupportedApiProfile("vulkan")]
    public static Utf8String StdVulkanVideoCodecH264DecodeExtensionName =>
        "VK_STD_vulkan_video_codec_h264_decode"u8;

    [NativeTypeName("#define STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE 2")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoDecodeH264FieldOrderCountListSize = 2;

    [NativeTypeName("#define VULKAN_VIDEO_CODEC_H264STD_ENCODE_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecH264StdEncodeH = 1;

    [NativeTypeName("#define vulkan_video_codec_h264std_encode 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecH264StdEncode = 1;

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_1_0_0 VK_MAKE_VIDEO_STD_VERSION(1, 0, 0)"
    )]
    [SupportedApiProfile("vulkan")]
    public const uint StdVulkanVideoCodecH264EncodeApiVersion1X0X0 = (
        (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_SPEC_VERSION VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_1_0_0"
    )]
    [SupportedApiProfile("vulkan")]
    public const uint StdVulkanVideoCodecH264EncodeSpecVersion = (
        (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_EXTENSION_NAME \"VK_STD_vulkan_video_codec_h264_encode\""
    )]
    [SupportedApiProfile("vulkan")]
    public static Utf8String StdVulkanVideoCodecH264EncodeExtensionName =>
        "VK_STD_vulkan_video_codec_h264_encode"u8;

    [NativeTypeName("#define VULKAN_VIDEO_CODEC_H265STD_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecH265StdH = 1;

    [NativeTypeName("#define vulkan_video_codec_h265std 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecH265Std = 1;

    [NativeTypeName("#define STD_VIDEO_H265_CPB_CNT_LIST_SIZE 32")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265CpbCntListSize = 32;

    [NativeTypeName("#define STD_VIDEO_H265_SUBLAYERS_LIST_SIZE 7")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265SublayersListSize = 7;

    [NativeTypeName("#define STD_VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS 6")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265ScalingList4X4NumLists = 6;

    [NativeTypeName("#define STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS 16")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265ScalingList4X4NumElements = 16;

    [NativeTypeName("#define STD_VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS 6")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265ScalingList8X8NumLists = 6;

    [NativeTypeName("#define STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS 64")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265ScalingList8X8NumElements = 64;

    [NativeTypeName("#define STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS 6")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265ScalingList16X16NumLists = 6;

    [NativeTypeName("#define STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS 64")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265ScalingList16X16NumElements = 64;

    [NativeTypeName("#define STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS 2")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265ScalingList32X32NumLists = 2;

    [NativeTypeName("#define STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS 64")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265ScalingList32X32NumElements = 64;

    [NativeTypeName("#define STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE 6")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265ChromaQpOffsetListSize = 6;

    [NativeTypeName("#define STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE 19")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265ChromaQpOffsetTileColsListSize = 19;

    [NativeTypeName("#define STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE 21")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265ChromaQpOffsetTileRowsListSize = 21;

    [NativeTypeName("#define STD_VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE 3")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265PredictorPaletteComponentsListSize = 3;

    [NativeTypeName("#define STD_VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE 128")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265PredictorPaletteCompEntriesListSize = 128;

    [NativeTypeName("#define STD_VIDEO_H265_MAX_NUM_LIST_REF 15")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265MaxNumListRef = 15;

    [NativeTypeName("#define STD_VIDEO_H265_MAX_CHROMA_PLANES 2")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265MaxChromaPlanes = 2;

    [NativeTypeName("#define STD_VIDEO_H265_MAX_SHORT_TERM_REF_PIC_SETS 64")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265MaxShortTermRefPicSets = 64;

    [NativeTypeName("#define STD_VIDEO_H265_MAX_DPB_SIZE 16")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265MaxDpbSize = 16;

    [NativeTypeName("#define STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS 32")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265MaxLongTermRefPicsSps = 32;

    [NativeTypeName("#define STD_VIDEO_H265_MAX_LONG_TERM_PICS 16")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265MaxLongTermPics = 16;

    [NativeTypeName("#define STD_VIDEO_H265_MAX_DELTA_POC 48")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265MaxDeltaPoc = 48;

    [NativeTypeName("#define STD_VIDEO_H265_NO_REFERENCE_PICTURE 0xFF")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoH265NoReferencePicture = 0xFF;

    [NativeTypeName("#define VULKAN_VIDEO_CODEC_H265STD_DECODE_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecH265StdDecodeH = 1;

    [NativeTypeName("#define vulkan_video_codec_h265std_decode 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecH265StdDecode = 1;

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_1_0_0 VK_MAKE_VIDEO_STD_VERSION(1, 0, 0)"
    )]
    [SupportedApiProfile("vulkan")]
    public const uint StdVulkanVideoCodecH265DecodeApiVersion1X0X0 = (
        (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_SPEC_VERSION VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_1_0_0"
    )]
    [SupportedApiProfile("vulkan")]
    public const uint StdVulkanVideoCodecH265DecodeSpecVersion = (
        (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_EXTENSION_NAME \"VK_STD_vulkan_video_codec_h265_decode\""
    )]
    [SupportedApiProfile("vulkan")]
    public static Utf8String StdVulkanVideoCodecH265DecodeExtensionName =>
        "VK_STD_vulkan_video_codec_h265_decode"u8;

    [NativeTypeName("#define STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE 8")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoDecodeH265RefPicSetListSize = 8;

    [NativeTypeName("#define VULKAN_VIDEO_CODEC_H265STD_ENCODE_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecH265StdEncodeH = 1;

    [NativeTypeName("#define vulkan_video_codec_h265std_encode 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecH265StdEncode = 1;

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_1_0_0 VK_MAKE_VIDEO_STD_VERSION(1, 0, 0)"
    )]
    [SupportedApiProfile("vulkan")]
    public const uint StdVulkanVideoCodecH265EncodeApiVersion1X0X0 = (
        (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_SPEC_VERSION VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_1_0_0"
    )]
    [SupportedApiProfile("vulkan")]
    public const uint StdVulkanVideoCodecH265EncodeSpecVersion = (
        (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_EXTENSION_NAME \"VK_STD_vulkan_video_codec_h265_encode\""
    )]
    [SupportedApiProfile("vulkan")]
    public static Utf8String StdVulkanVideoCodecH265EncodeExtensionName =>
        "VK_STD_vulkan_video_codec_h265_encode"u8;

    [NativeTypeName("#define VULKAN_VIDEO_CODEC_VP9STD_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecVp9StdH = 1;

    [NativeTypeName("#define vulkan_video_codec_vp9std 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecVp9Std = 1;

    [NativeTypeName("#define STD_VIDEO_VP9_NUM_REF_FRAMES 8")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoVp9NumRefFrames = 8;

    [NativeTypeName("#define STD_VIDEO_VP9_REFS_PER_FRAME 3")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoVp9RefsPerFrame = 3;

    [NativeTypeName("#define STD_VIDEO_VP9_MAX_REF_FRAMES 4")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoVp9MaxRefFrames = 4;

    [NativeTypeName("#define STD_VIDEO_VP9_LOOP_FILTER_ADJUSTMENTS 2")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoVp9LoopFilterAdjustments = 2;

    [NativeTypeName("#define STD_VIDEO_VP9_MAX_SEGMENTS 8")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoVp9MaxSegments = 8;

    [NativeTypeName("#define STD_VIDEO_VP9_SEG_LVL_MAX 4")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoVp9SegLvlMax = 4;

    [NativeTypeName("#define STD_VIDEO_VP9_MAX_SEGMENTATION_TREE_PROBS 7")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoVp9MaxSegmentationTreeProbs = 7;

    [NativeTypeName("#define STD_VIDEO_VP9_MAX_SEGMENTATION_PRED_PROB 3")]
    [SupportedApiProfile("vulkan")]
    public const int StdVideoVp9MaxSegmentationPredProb = 3;

    [NativeTypeName("#define VULKAN_VIDEO_CODEC_VP9STD_DECODE_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecVp9StdDecodeH = 1;

    [NativeTypeName("#define vulkan_video_codec_vp9std_decode 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanVideoCodecVp9StdDecode = 1;

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_VP9_DECODE_API_VERSION_1_0_0 VK_MAKE_VIDEO_STD_VERSION(1, 0, 0)"
    )]
    [SupportedApiProfile("vulkan")]
    public const uint StdVulkanVideoCodecVp9DecodeApiVersion1X0X0 = (
        (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_VP9_DECODE_SPEC_VERSION VK_STD_VULKAN_VIDEO_CODEC_VP9_DECODE_API_VERSION_1_0_0"
    )]
    [SupportedApiProfile("vulkan")]
    public const uint StdVulkanVideoCodecVp9DecodeSpecVersion = (
        (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName(
        "#define VK_STD_VULKAN_VIDEO_CODEC_VP9_DECODE_EXTENSION_NAME \"VK_STD_vulkan_video_codec_vp9_decode\""
    )]
    [SupportedApiProfile("vulkan")]
    public static Utf8String StdVulkanVideoCodecVp9DecodeExtensionName =>
        "VK_STD_vulkan_video_codec_vp9_decode"u8;

    [NativeTypeName("#define VULKAN_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanH = 1;

    [NativeTypeName("#define VULKAN_CORE_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanCoreH = 1;

    [NativeTypeName("#define VK_USE_64_BIT_PTR_DEFINES 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const int Use64BitPtrDefines = 1;

    [NativeTypeName("#define VK_API_VERSION_1_0 VK_MAKE_API_VERSION(0, 1, 0, 0)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint ApiVersion1X0 = (
        (((uint)(0)) << 29) | (((uint)(1)) << 22) | (((uint)(0)) << 12) | ((uint)(0))
    );

    [NativeTypeName("#define VK_HEADER_VERSION 322")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const int HeaderVersion = 322;

    [NativeTypeName(
        "#define VK_HEADER_VERSION_COMPLETE VK_MAKE_API_VERSION(0, 1, 4, VK_HEADER_VERSION)"
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint HeaderVersionComplete = (
        (((uint)(0)) << 29) | (((uint)(1)) << 22) | (((uint)(4)) << 12) | ((uint)(322))
    );

    [NativeTypeName("#define VK_ATTACHMENT_UNUSED (~0U)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint AttachmentUnused = (~0U);

    [NativeTypeName("#define VK_FALSE 0U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint False = 0U;

    [NativeTypeName("#define VK_LOD_CLAMP_NONE 1000.0F")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const float LodClampNone = 1000.0F;

    [NativeTypeName("#define VK_QUEUE_FAMILY_IGNORED (~0U)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint QueueFamilyIgnored = (~0U);

    [NativeTypeName("#define VK_REMAINING_ARRAY_LAYERS (~0U)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint RemainingArrayLayers = (~0U);

    [NativeTypeName("#define VK_REMAINING_MIP_LEVELS (~0U)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint RemainingMipLevels = (~0U);

    [NativeTypeName("#define VK_SUBPASS_EXTERNAL (~0U)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint SubpassExternal = (~0U);

    [NativeTypeName("#define VK_TRUE 1U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint True = 1U;

    [NativeTypeName("#define VK_WHOLE_SIZE (~0ULL)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const ulong WholeSize = (~0UL);

    [NativeTypeName("#define VK_MAX_MEMORY_TYPES 32U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint MaxMemoryTypes = 32U;

    [NativeTypeName("#define VK_MAX_PHYSICAL_DEVICE_NAME_SIZE 256U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint MaxPhysicalDeviceNameSize = 256U;

    [NativeTypeName("#define VK_UUID_SIZE 16U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint UuidSize = 16U;

    [NativeTypeName("#define VK_MAX_EXTENSION_NAME_SIZE 256U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint MaxExtensionNameSize = 256U;

    [NativeTypeName("#define VK_MAX_DESCRIPTION_SIZE 256U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint MaxDescriptionSize = 256U;

    [NativeTypeName("#define VK_MAX_MEMORY_HEAPS 16U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint MaxMemoryHeaps = 16U;

    [NativeTypeName("#define VK_API_VERSION_1_1 VK_MAKE_API_VERSION(0, 1, 1, 0)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    public const uint ApiVersion1X1 = (
        (((uint)(0)) << 29) | (((uint)(1)) << 22) | (((uint)(1)) << 12) | ((uint)(0))
    );

    [NativeTypeName("#define VK_MAX_DEVICE_GROUP_SIZE 32U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    public const uint MaxDeviceGroupSize = 32U;

    [NativeTypeName("#define VK_LUID_SIZE 8U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    public const uint LuidSize = 8U;

    [NativeTypeName("#define VK_QUEUE_FAMILY_EXTERNAL (~1U)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    public const uint QueueFamilyExternal = (~1U);

    [NativeTypeName("#define VK_API_VERSION_1_2 VK_MAKE_API_VERSION(0, 1, 2, 0)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    public const uint ApiVersion1X2 = (
        (((uint)(0)) << 29) | (((uint)(1)) << 22) | (((uint)(2)) << 12) | ((uint)(0))
    );

    [NativeTypeName("#define VK_MAX_DRIVER_NAME_SIZE 256U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    public const uint MaxDriverNameSize = 256U;

    [NativeTypeName("#define VK_MAX_DRIVER_INFO_SIZE 256U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    public const uint MaxDriverInfoSize = 256U;

    [NativeTypeName("#define VK_API_VERSION_1_3 VK_MAKE_API_VERSION(0, 1, 3, 0)")]
    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    public const uint ApiVersion1X3 = (
        (((uint)(0)) << 29) | (((uint)(1)) << 22) | (((uint)(3)) << 12) | ((uint)(0))
    );

    [NativeTypeName("#define VK_API_VERSION_1_4 VK_MAKE_API_VERSION(0, 1, 4, 0)")]
    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    public const uint ApiVersion1X4 = (
        (((uint)(0)) << 29) | (((uint)(1)) << 22) | (((uint)(4)) << 12) | ((uint)(0))
    );

    [NativeTypeName("#define VK_MAX_GLOBAL_PRIORITY_SIZE 16U")]
    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    public const uint MaxGlobalPrioritySize = 16U;

    [NativeTypeName("#define VK_KHR_SURFACE_SPEC_VERSION 25")]
    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    public const int KhrSurfaceSpecVersion = 25;

    [NativeTypeName("#define VK_KHR_SURFACE_EXTENSION_NAME \"VK_KHR_surface\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    public static Utf8String KhrSurfaceExtensionName => "VK_KHR_surface"u8;

    [NativeTypeName("#define VK_KHR_SWAPCHAIN_SPEC_VERSION 70")]
    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    public const int KhrSwapchainSpecVersion = 70;

    [NativeTypeName("#define VK_KHR_SWAPCHAIN_EXTENSION_NAME \"VK_KHR_swapchain\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    public static Utf8String KhrSwapchainExtensionName => "VK_KHR_swapchain"u8;

    [NativeTypeName("#define VK_KHR_DISPLAY_SPEC_VERSION 23")]
    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    public const int KhrDisplaySpecVersion = 23;

    [NativeTypeName("#define VK_KHR_DISPLAY_EXTENSION_NAME \"VK_KHR_display\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    public static Utf8String KhrDisplayExtensionName => "VK_KHR_display"u8;

    [NativeTypeName("#define VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION 10")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_display_swapchain"],
        ImpliesSets = ["VK_KHR_display", "VK_KHR_swapchain"]
    )]
    public const int KhrDisplaySwapchainSpecVersion = 10;

    [NativeTypeName("#define VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME \"VK_KHR_display_swapchain\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_display_swapchain"],
        ImpliesSets = ["VK_KHR_display", "VK_KHR_swapchain"]
    )]
    public static Utf8String KhrDisplaySwapchainExtensionName => "VK_KHR_display_swapchain"u8;

    [NativeTypeName("#define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION 3")]
    [SupportedApiProfile("vulkan", ["VK_KHR_sampler_mirror_clamp_to_edge"])]
    public const int KhrSamplerMirrorClampToEdgeSpecVersion = 3;

    [NativeTypeName(
        "#define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME \"VK_KHR_sampler_mirror_clamp_to_edge\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_sampler_mirror_clamp_to_edge"])]
    public static Utf8String KhrSamplerMirrorClampToEdgeExtensionName =>
        "VK_KHR_sampler_mirror_clamp_to_edge"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_QUEUE_SPEC_VERSION 8")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    public const int KhrVideoQueueSpecVersion = 8;

    [NativeTypeName("#define VK_KHR_VIDEO_QUEUE_EXTENSION_NAME \"VK_KHR_video_queue\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    public static Utf8String KhrVideoQueueExtensionName => "VK_KHR_video_queue"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION 8")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public const int KhrVideoDecodeQueueSpecVersion = 8;

    [NativeTypeName(
        "#define VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME \"VK_KHR_video_decode_queue\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String KhrVideoDecodeQueueExtensionName => "VK_KHR_video_decode_queue"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_H264_SPEC_VERSION 14")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_h264"],
        ImpliesSets = ["VK_KHR_video_encode_queue"]
    )]
    public const int KhrVideoEncodeH264SpecVersion = 14;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_H264_EXTENSION_NAME \"VK_KHR_video_encode_h264\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_h264"],
        ImpliesSets = ["VK_KHR_video_encode_queue"]
    )]
    public static Utf8String KhrVideoEncodeH264ExtensionName => "VK_KHR_video_encode_h264"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_H265_SPEC_VERSION 14")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_h265"],
        ImpliesSets = ["VK_KHR_video_encode_queue"]
    )]
    public const int KhrVideoEncodeH265SpecVersion = 14;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_H265_EXTENSION_NAME \"VK_KHR_video_encode_h265\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_h265"],
        ImpliesSets = ["VK_KHR_video_encode_queue"]
    )]
    public static Utf8String KhrVideoEncodeH265ExtensionName => "VK_KHR_video_encode_h265"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION 9")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_h264"],
        ImpliesSets = ["VK_KHR_video_decode_queue"]
    )]
    public const int KhrVideoDecodeH264SpecVersion = 9;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME \"VK_KHR_video_decode_h264\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_h264"],
        ImpliesSets = ["VK_KHR_video_decode_queue"]
    )]
    public static Utf8String KhrVideoDecodeH264ExtensionName => "VK_KHR_video_decode_h264"u8;

    [NativeTypeName("#define VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const int KhrDynamicRenderingSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME \"VK_KHR_dynamic_rendering\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrDynamicRenderingExtensionName => "VK_KHR_dynamic_rendering"u8;

    [NativeTypeName("#define VK_KHR_MULTIVIEW_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_multiview"],
        ImpliesSets = [
            "VK_KHR_multiview+VK_KHR_get_physical_device_properties2",
            "VK_KHR_multiview+VK_VERSION_1_1",
        ]
    )]
    public const int KhrMultiviewSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MULTIVIEW_EXTENSION_NAME \"VK_KHR_multiview\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_multiview"],
        ImpliesSets = [
            "VK_KHR_multiview+VK_KHR_get_physical_device_properties2",
            "VK_KHR_multiview+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrMultiviewExtensionName => "VK_KHR_multiview"u8;

    [NativeTypeName("#define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    public const int KhrGetPhysicalDeviceProperties2SpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME \"VK_KHR_get_physical_device_properties2\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    public static Utf8String KhrGetPhysicalDeviceProperties2ExtensionName =>
        "VK_KHR_get_physical_device_properties2"u8;

    [NativeTypeName("#define VK_KHR_DEVICE_GROUP_SPEC_VERSION 4")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    public const int KhrDeviceGroupSpecVersion = 4;

    [NativeTypeName("#define VK_KHR_DEVICE_GROUP_EXTENSION_NAME \"VK_KHR_device_group\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    public static Utf8String KhrDeviceGroupExtensionName => "VK_KHR_device_group"u8;

    [NativeTypeName("#define VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_draw_parameters"])]
    public const int KhrShaderDrawParametersSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME \"VK_KHR_shader_draw_parameters\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_draw_parameters"])]
    public static Utf8String KhrShaderDrawParametersExtensionName =>
        "VK_KHR_shader_draw_parameters"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_1_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance1"])]
    public const int KhrMaintenance1SpecVersion = 2;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_1_EXTENSION_NAME \"VK_KHR_maintenance1\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance1"])]
    public static Utf8String KhrMaintenance1ExtensionName => "VK_KHR_maintenance1"u8;

    [NativeTypeName("#define VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
    public const int KhrDeviceGroupCreationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME \"VK_KHR_device_group_creation\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
    public static Utf8String KhrDeviceGroupCreationExtensionName =>
        "VK_KHR_device_group_creation"u8;

    [NativeTypeName("#define VK_MAX_DEVICE_GROUP_SIZE_KHR VK_MAX_DEVICE_GROUP_SIZE")]
    [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
    public const uint MaxDeviceGroupSizeKHR = 32U;

    [NativeTypeName("#define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
        ]
    )]
    public const int KhrExternalMemoryCapabilitiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME \"VK_KHR_external_memory_capabilities\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrExternalMemoryCapabilitiesExtensionName =>
        "VK_KHR_external_memory_capabilities"u8;

    [NativeTypeName("#define VK_LUID_SIZE_KHR VK_LUID_SIZE")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
        ]
    )]
    public const uint LuidSizeKHR = 8U;

    [NativeTypeName("#define VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory"],
        ImpliesSets = [
            "VK_KHR_external_memory+VK_KHR_external_memory_capabilities",
            "VK_KHR_external_memory+VK_VERSION_1_1",
        ]
    )]
    public const int KhrExternalMemorySpecVersion = 1;

    [NativeTypeName("#define VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME \"VK_KHR_external_memory\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory"],
        ImpliesSets = [
            "VK_KHR_external_memory+VK_KHR_external_memory_capabilities",
            "VK_KHR_external_memory+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrExternalMemoryExtensionName => "VK_KHR_external_memory"u8;

    [NativeTypeName("#define VK_QUEUE_FAMILY_EXTERNAL_KHR VK_QUEUE_FAMILY_EXTERNAL")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory"],
        ImpliesSets = [
            "VK_KHR_external_memory+VK_KHR_external_memory_capabilities",
            "VK_KHR_external_memory+VK_VERSION_1_1",
        ]
    )]
    public const uint QueueFamilyExternalKHR = (~1U);

    [NativeTypeName("#define VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    public const int KhrExternalMemoryFdSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME \"VK_KHR_external_memory_fd\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrExternalMemoryFdExtensionName => "VK_KHR_external_memory_fd"u8;

    [NativeTypeName("#define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_semaphore_capabilities+VK_VERSION_1_1",
        ]
    )]
    public const int KhrExternalSemaphoreCapabilitiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME \"VK_KHR_external_semaphore_capabilities\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_semaphore_capabilities+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrExternalSemaphoreCapabilitiesExtensionName =>
        "VK_KHR_external_semaphore_capabilities"u8;

    [NativeTypeName("#define VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore"],
        ImpliesSets = ["VK_KHR_external_semaphore_capabilities"]
    )]
    public const int KhrExternalSemaphoreSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME \"VK_KHR_external_semaphore\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore"],
        ImpliesSets = ["VK_KHR_external_semaphore_capabilities"]
    )]
    public static Utf8String KhrExternalSemaphoreExtensionName => "VK_KHR_external_semaphore"u8;

    [NativeTypeName("#define VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    public const int KhrExternalSemaphoreFdSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME \"VK_KHR_external_semaphore_fd\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrExternalSemaphoreFdExtensionName =>
        "VK_KHR_external_semaphore_fd"u8;

    [NativeTypeName("#define VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_push_descriptor"],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    public const int KhrPushDescriptorSpecVersion = 2;

    [NativeTypeName("#define VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME \"VK_KHR_push_descriptor\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_push_descriptor"],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrPushDescriptorExtensionName => "VK_KHR_push_descriptor"u8;

    [NativeTypeName("#define VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_float16_int8"],
        ImpliesSets = [
            "VK_KHR_shader_float16_int8+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_float16_int8+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderFloat16Int8SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME \"VK_KHR_shader_float16_int8\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_float16_int8"],
        ImpliesSets = [
            "VK_KHR_shader_float16_int8+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_float16_int8+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderFloat16Int8ExtensionName => "VK_KHR_shader_float16_int8"u8;

    [NativeTypeName("#define VK_KHR_16BIT_STORAGE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_16bit_storage"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class",
            "VK_VERSION_1_1",
        ]
    )]
    public const int Khr16BitStorageSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_16BIT_STORAGE_EXTENSION_NAME \"VK_KHR_16bit_storage\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_16bit_storage"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String Khr16BitStorageExtensionName => "VK_KHR_16bit_storage"u8;

    [NativeTypeName("#define VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_incremental_present"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    public const int KhrIncrementalPresentSpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME \"VK_KHR_incremental_present\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_incremental_present"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    public static Utf8String KhrIncrementalPresentExtensionName => "VK_KHR_incremental_present"u8;

    [NativeTypeName("#define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    public const int KhrDescriptorUpdateTemplateSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME \"VK_KHR_descriptor_update_template\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    public static Utf8String KhrDescriptorUpdateTemplateExtensionName =>
        "VK_KHR_descriptor_update_template"u8;

    [NativeTypeName("#define VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_imageless_framebuffer"],
        ImpliesSets = [
            "VK_KHR_image_format_list+VK_KHR_get_physical_device_properties2+VK_KHR_maintenance2",
            "VK_KHR_image_format_list+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const int KhrImagelessFramebufferSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME \"VK_KHR_imageless_framebuffer\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_imageless_framebuffer"],
        ImpliesSets = [
            "VK_KHR_image_format_list+VK_KHR_get_physical_device_properties2+VK_KHR_maintenance2",
            "VK_KHR_image_format_list+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrImagelessFramebufferExtensionName =>
        "VK_KHR_imageless_framebuffer"u8;

    [NativeTypeName("#define VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    public const int KhrCreateRenderpass2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME \"VK_KHR_create_renderpass2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    public static Utf8String KhrCreateRenderpass2ExtensionName => "VK_KHR_create_renderpass2"u8;

    [NativeTypeName("#define VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shared_presentable_image"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_VERSION_1_1",
        ]
    )]
    public const int KhrSharedPresentableImageSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME \"VK_KHR_shared_presentable_image\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shared_presentable_image"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrSharedPresentableImageExtensionName =>
        "VK_KHR_shared_presentable_image"u8;

    [NativeTypeName("#define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_fence_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_fence_capabilities+VK_VERSION_1_1",
        ]
    )]
    public const int KhrExternalFenceCapabilitiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME \"VK_KHR_external_fence_capabilities\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_fence_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_fence_capabilities+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrExternalFenceCapabilitiesExtensionName =>
        "VK_KHR_external_fence_capabilities"u8;

    [NativeTypeName("#define VK_KHR_EXTERNAL_FENCE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence"],
        ImpliesSets = ["VK_KHR_external_fence_capabilities"]
    )]
    public const int KhrExternalFenceSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME \"VK_KHR_external_fence\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence"],
        ImpliesSets = ["VK_KHR_external_fence_capabilities"]
    )]
    public static Utf8String KhrExternalFenceExtensionName => "VK_KHR_external_fence"u8;

    [NativeTypeName("#define VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    public const int KhrExternalFenceFdSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME \"VK_KHR_external_fence_fd\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrExternalFenceFdExtensionName => "VK_KHR_external_fence_fd"u8;

    [NativeTypeName("#define VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    public const int KhrPerformanceQuerySpecVersion = 1;

    [NativeTypeName("#define VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME \"VK_KHR_performance_query\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrPerformanceQueryExtensionName => "VK_KHR_performance_query"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_2_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance2"])]
    public const int KhrMaintenance2SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_2_EXTENSION_NAME \"VK_KHR_maintenance2\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance2"])]
    public static Utf8String KhrMaintenance2ExtensionName => "VK_KHR_maintenance2"u8;

    [NativeTypeName("#define VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    public const int KhrGetSurfaceCapabilities2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME \"VK_KHR_get_surface_capabilities2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    public static Utf8String KhrGetSurfaceCapabilities2ExtensionName =>
        "VK_KHR_get_surface_capabilities2"u8;

    [NativeTypeName("#define VK_KHR_VARIABLE_POINTERS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_variable_pointers"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class",
            "VK_VERSION_1_1",
        ]
    )]
    public const int KhrVariablePointersSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME \"VK_KHR_variable_pointers\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_variable_pointers"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrVariablePointersExtensionName => "VK_KHR_variable_pointers"u8;

    [NativeTypeName("#define VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    public const int KhrGetDisplayProperties2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME \"VK_KHR_get_display_properties2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    public static Utf8String KhrGetDisplayProperties2ExtensionName =>
        "VK_KHR_get_display_properties2"u8;

    [NativeTypeName("#define VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dedicated_allocation"],
        ImpliesSets = [
            "VK_KHR_dedicated_allocation+VK_KHR_get_memory_requirements2",
            "VK_KHR_dedicated_allocation+VK_VERSION_1_1",
        ]
    )]
    public const int KhrDedicatedAllocationSpecVersion = 3;

    [NativeTypeName(
        "#define VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME \"VK_KHR_dedicated_allocation\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dedicated_allocation"],
        ImpliesSets = [
            "VK_KHR_dedicated_allocation+VK_KHR_get_memory_requirements2",
            "VK_KHR_dedicated_allocation+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrDedicatedAllocationExtensionName => "VK_KHR_dedicated_allocation"u8;

    [NativeTypeName("#define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_storage_buffer_storage_class"])]
    public const int KhrStorageBufferStorageClassSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME \"VK_KHR_storage_buffer_storage_class\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_storage_buffer_storage_class"])]
    public static Utf8String KhrStorageBufferStorageClassExtensionName =>
        "VK_KHR_storage_buffer_storage_class"u8;

    [NativeTypeName("#define VK_KHR_SHADER_BFLOAT16_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_bfloat16"],
        ImpliesSets = [
            "VK_KHR_shader_bfloat16+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_bfloat16+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderBfloat16SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_SHADER_BFLOAT16_EXTENSION_NAME \"VK_KHR_shader_bfloat16\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_bfloat16"],
        ImpliesSets = [
            "VK_KHR_shader_bfloat16+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_bfloat16+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderBfloat16ExtensionName => "VK_KHR_shader_bfloat16"u8;

    [NativeTypeName("#define VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_relaxed_block_layout"])]
    public const int KhrRelaxedBlockLayoutSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME \"VK_KHR_relaxed_block_layout\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_relaxed_block_layout"])]
    public static Utf8String KhrRelaxedBlockLayoutExtensionName => "VK_KHR_relaxed_block_layout"u8;

    [NativeTypeName("#define VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    public const int KhrGetMemoryRequirements2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME \"VK_KHR_get_memory_requirements2\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    public static Utf8String KhrGetMemoryRequirements2ExtensionName =>
        "VK_KHR_get_memory_requirements2"u8;

    [NativeTypeName("#define VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_image_format_list"])]
    public const int KhrImageFormatListSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME \"VK_KHR_image_format_list\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_image_format_list"])]
    public static Utf8String KhrImageFormatListExtensionName => "VK_KHR_image_format_list"u8;

    [NativeTypeName("#define VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION 14")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public const int KhrSamplerYcbcrConversionSpecVersion = 14;

    [NativeTypeName(
        "#define VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME \"VK_KHR_sampler_ycbcr_conversion\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrSamplerYcbcrConversionExtensionName =>
        "VK_KHR_sampler_ycbcr_conversion"u8;

    [NativeTypeName("#define VK_KHR_BIND_MEMORY_2_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    public const int KhrBindMemory2SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_BIND_MEMORY_2_EXTENSION_NAME \"VK_KHR_bind_memory2\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    public static Utf8String KhrBindMemory2ExtensionName => "VK_KHR_bind_memory2"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_3_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance3"],
        ImpliesSets = [
            "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
            "VK_KHR_maintenance3+VK_VERSION_1_1",
        ]
    )]
    public const int KhrMaintenance3SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_3_EXTENSION_NAME \"VK_KHR_maintenance3\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance3"],
        ImpliesSets = [
            "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
            "VK_KHR_maintenance3+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrMaintenance3ExtensionName => "VK_KHR_maintenance3"u8;

    [NativeTypeName("#define VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
    public const int KhrDrawIndirectCountSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME \"VK_KHR_draw_indirect_count\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
    public static Utf8String KhrDrawIndirectCountExtensionName => "VK_KHR_draw_indirect_count"u8;

    [NativeTypeName("#define VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_subgroup_extended_types"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public const int KhrShaderSubgroupExtendedTypesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME \"VK_KHR_shader_subgroup_extended_types\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_subgroup_extended_types"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public static Utf8String KhrShaderSubgroupExtendedTypesExtensionName =>
        "VK_KHR_shader_subgroup_extended_types"u8;

    [NativeTypeName("#define VK_KHR_8BIT_STORAGE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_8bit_storage"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class",
            "VK_VERSION_1_1",
        ]
    )]
    public const int Khr8BitStorageSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_8BIT_STORAGE_EXTENSION_NAME \"VK_KHR_8bit_storage\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_8bit_storage"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String Khr8BitStorageExtensionName => "VK_KHR_8bit_storage"u8;

    [NativeTypeName("#define VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_atomic_int64"],
        ImpliesSets = [
            "VK_KHR_shader_atomic_int64+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_atomic_int64+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderAtomicInt64SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME \"VK_KHR_shader_atomic_int64\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_atomic_int64"],
        ImpliesSets = [
            "VK_KHR_shader_atomic_int64+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_atomic_int64+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderAtomicInt64ExtensionName => "VK_KHR_shader_atomic_int64"u8;

    [NativeTypeName("#define VK_KHR_SHADER_CLOCK_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_clock"],
        ImpliesSets = [
            "VK_KHR_shader_clock+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_clock+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderClockSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_SHADER_CLOCK_EXTENSION_NAME \"VK_KHR_shader_clock\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_clock"],
        ImpliesSets = [
            "VK_KHR_shader_clock+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_clock+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderClockExtensionName => "VK_KHR_shader_clock"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION 8")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_h265"],
        ImpliesSets = ["VK_KHR_video_decode_queue"]
    )]
    public const int KhrVideoDecodeH265SpecVersion = 8;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME \"VK_KHR_video_decode_h265\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_h265"],
        ImpliesSets = ["VK_KHR_video_decode_queue"]
    )]
    public static Utf8String KhrVideoDecodeH265ExtensionName => "VK_KHR_video_decode_h265"u8;

    [NativeTypeName("#define VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_global_priority"],
        ImpliesSets = [
            "VK_KHR_global_priority+VK_KHR_get_physical_device_properties2",
            "VK_KHR_global_priority+VK_VERSION_1_1",
        ]
    )]
    public const int KhrGlobalPrioritySpecVersion = 1;

    [NativeTypeName("#define VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME \"VK_KHR_global_priority\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_global_priority"],
        ImpliesSets = [
            "VK_KHR_global_priority+VK_KHR_get_physical_device_properties2",
            "VK_KHR_global_priority+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrGlobalPriorityExtensionName => "VK_KHR_global_priority"u8;

    [NativeTypeName("#define VK_MAX_GLOBAL_PRIORITY_SIZE_KHR VK_MAX_GLOBAL_PRIORITY_SIZE")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_global_priority"],
        ImpliesSets = [
            "VK_KHR_global_priority+VK_KHR_get_physical_device_properties2",
            "VK_KHR_global_priority+VK_VERSION_1_1",
        ]
    )]
    public const uint MaxGlobalPrioritySizeKHR = 16U;

    [NativeTypeName("#define VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_driver_properties"],
        ImpliesSets = [
            "VK_KHR_driver_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_driver_properties+VK_VERSION_1_1",
        ]
    )]
    public const int KhrDriverPropertiesSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME \"VK_KHR_driver_properties\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_driver_properties"],
        ImpliesSets = [
            "VK_KHR_driver_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_driver_properties+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrDriverPropertiesExtensionName => "VK_KHR_driver_properties"u8;

    [NativeTypeName("#define VK_MAX_DRIVER_NAME_SIZE_KHR VK_MAX_DRIVER_NAME_SIZE")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_driver_properties"],
        ImpliesSets = [
            "VK_KHR_driver_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_driver_properties+VK_VERSION_1_1",
        ]
    )]
    public const uint MaxDriverNameSizeKHR = 256U;

    [NativeTypeName("#define VK_MAX_DRIVER_INFO_SIZE_KHR VK_MAX_DRIVER_INFO_SIZE")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_driver_properties"],
        ImpliesSets = [
            "VK_KHR_driver_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_driver_properties+VK_VERSION_1_1",
        ]
    )]
    public const uint MaxDriverInfoSizeKHR = 256U;

    [NativeTypeName("#define VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION 4")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_float_controls"],
        ImpliesSets = [
            "VK_KHR_shader_float_controls+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_float_controls+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderFloatControlsSpecVersion = 4;

    [NativeTypeName(
        "#define VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME \"VK_KHR_shader_float_controls\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_float_controls"],
        ImpliesSets = [
            "VK_KHR_shader_float_controls+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_float_controls+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderFloatControlsExtensionName =>
        "VK_KHR_shader_float_controls"u8;

    [NativeTypeName("#define VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_depth_stencil_resolve"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_create_renderpass2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_2",
        ]
    )]
    public const int KhrDepthStencilResolveSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME \"VK_KHR_depth_stencil_resolve\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_depth_stencil_resolve"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_create_renderpass2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrDepthStencilResolveExtensionName =>
        "VK_KHR_depth_stencil_resolve"u8;

    [NativeTypeName("#define VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain_mutable_format"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_maintenance2+VK_KHR_image_format_list",
            "VK_KHR_swapchain+VK_KHR_maintenance2+VK_VERSION_1_2",
            "VK_KHR_swapchain+VK_VERSION_1_1+VK_KHR_image_format_list",
            "VK_KHR_swapchain+VK_VERSION_1_1+VK_VERSION_1_2",
        ]
    )]
    public const int KhrSwapchainMutableFormatSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME \"VK_KHR_swapchain_mutable_format\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain_mutable_format"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_maintenance2+VK_KHR_image_format_list",
            "VK_KHR_swapchain+VK_KHR_maintenance2+VK_VERSION_1_2",
            "VK_KHR_swapchain+VK_VERSION_1_1+VK_KHR_image_format_list",
            "VK_KHR_swapchain+VK_VERSION_1_1+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrSwapchainMutableFormatExtensionName =>
        "VK_KHR_swapchain_mutable_format"u8;

    [NativeTypeName("#define VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    public const int KhrTimelineSemaphoreSpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME \"VK_KHR_timeline_semaphore\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrTimelineSemaphoreExtensionName => "VK_KHR_timeline_semaphore"u8;

    [NativeTypeName("#define VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_vulkan_memory_model"],
        ImpliesSets = [
            "VK_KHR_vulkan_memory_model+VK_KHR_get_physical_device_properties2",
            "VK_KHR_vulkan_memory_model+VK_VERSION_1_1",
        ]
    )]
    public const int KhrVulkanMemoryModelSpecVersion = 3;

    [NativeTypeName(
        "#define VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME \"VK_KHR_vulkan_memory_model\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_vulkan_memory_model"],
        ImpliesSets = [
            "VK_KHR_vulkan_memory_model+VK_KHR_get_physical_device_properties2",
            "VK_KHR_vulkan_memory_model+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrVulkanMemoryModelExtensionName => "VK_KHR_vulkan_memory_model"u8;

    [NativeTypeName("#define VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_terminate_invocation"],
        ImpliesSets = [
            "VK_KHR_shader_terminate_invocation+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_terminate_invocation+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderTerminateInvocationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME \"VK_KHR_shader_terminate_invocation\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_terminate_invocation"],
        ImpliesSets = [
            "VK_KHR_shader_terminate_invocation+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_terminate_invocation+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderTerminateInvocationExtensionName =>
        "VK_KHR_shader_terminate_invocation"u8;

    [NativeTypeName("#define VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const int KhrFragmentShadingRateSpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME \"VK_KHR_fragment_shading_rate\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrFragmentShadingRateExtensionName =>
        "VK_KHR_fragment_shading_rate"u8;

    [NativeTypeName("#define VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    public const int KhrDynamicRenderingLocalReadSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_EXTENSION_NAME \"VK_KHR_dynamic_rendering_local_read\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String KhrDynamicRenderingLocalReadExtensionName =>
        "VK_KHR_dynamic_rendering_local_read"u8;

    [NativeTypeName("#define VK_KHR_SHADER_QUAD_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_quad_control"],
        ImpliesSets = [
            "VK_KHR_shader_maximal_reconvergence+VK_VERSION_1_1+VK_KHR_vulkan_memory_model",
            "VK_KHR_shader_maximal_reconvergence+VK_VERSION_1_2",
        ]
    )]
    public const int KhrShaderQuadControlSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_QUAD_CONTROL_EXTENSION_NAME \"VK_KHR_shader_quad_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_quad_control"],
        ImpliesSets = [
            "VK_KHR_shader_maximal_reconvergence+VK_VERSION_1_1+VK_KHR_vulkan_memory_model",
            "VK_KHR_shader_maximal_reconvergence+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrShaderQuadControlExtensionName => "VK_KHR_shader_quad_control"u8;

    [NativeTypeName("#define VK_KHR_SPIRV_1_4_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_spirv_1_4"],
        ImpliesSets = ["VK_KHR_shader_float_controls", "VK_VERSION_1_1"]
    )]
    public const int KhrSpirv1X4SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_SPIRV_1_4_EXTENSION_NAME \"VK_KHR_spirv_1_4\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_spirv_1_4"],
        ImpliesSets = ["VK_KHR_shader_float_controls", "VK_VERSION_1_1"]
    )]
    public static Utf8String KhrSpirv1X4ExtensionName => "VK_KHR_spirv_1_4"u8;

    [NativeTypeName("#define VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_surface_protected_capabilities"],
        ImpliesSets = ["VK_KHR_get_surface_capabilities2", "VK_VERSION_1_1"]
    )]
    public const int KhrSurfaceProtectedCapabilitiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME \"VK_KHR_surface_protected_capabilities\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_surface_protected_capabilities"],
        ImpliesSets = ["VK_KHR_get_surface_capabilities2", "VK_VERSION_1_1"]
    )]
    public static Utf8String KhrSurfaceProtectedCapabilitiesExtensionName =>
        "VK_KHR_surface_protected_capabilities"u8;

    [NativeTypeName("#define VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_separate_depth_stencil_layouts"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const int KhrSeparateDepthStencilLayoutsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME \"VK_KHR_separate_depth_stencil_layouts\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_separate_depth_stencil_layouts"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrSeparateDepthStencilLayoutsExtensionName =>
        "VK_KHR_separate_depth_stencil_layouts"u8;

    [NativeTypeName("#define VK_KHR_PRESENT_WAIT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_present_wait"],
        ImpliesSets = ["VK_KHR_present_id", "VK_KHR_swapchain"]
    )]
    public const int KhrPresentWaitSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_PRESENT_WAIT_EXTENSION_NAME \"VK_KHR_present_wait\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_present_wait"],
        ImpliesSets = ["VK_KHR_present_id", "VK_KHR_swapchain"]
    )]
    public static Utf8String KhrPresentWaitExtensionName => "VK_KHR_present_wait"u8;

    [NativeTypeName("#define VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_uniform_buffer_standard_layout"],
        ImpliesSets = [
            "VK_KHR_uniform_buffer_standard_layout+VK_KHR_get_physical_device_properties2",
            "VK_KHR_uniform_buffer_standard_layout+VK_VERSION_1_1",
        ]
    )]
    public const int KhrUniformBufferStandardLayoutSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME \"VK_KHR_uniform_buffer_standard_layout\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_uniform_buffer_standard_layout"],
        ImpliesSets = [
            "VK_KHR_uniform_buffer_standard_layout+VK_KHR_get_physical_device_properties2",
            "VK_KHR_uniform_buffer_standard_layout+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrUniformBufferStandardLayoutExtensionName =>
        "VK_KHR_uniform_buffer_standard_layout"u8;

    [NativeTypeName("#define VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    public const int KhrBufferDeviceAddressSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME \"VK_KHR_buffer_device_address\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrBufferDeviceAddressExtensionName =>
        "VK_KHR_buffer_device_address"u8;

    [NativeTypeName("#define VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION 4")]
    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    public const int KhrDeferredHostOperationsSpecVersion = 4;

    [NativeTypeName(
        "#define VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME \"VK_KHR_deferred_host_operations\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    public static Utf8String KhrDeferredHostOperationsExtensionName =>
        "VK_KHR_deferred_host_operations"u8;

    [NativeTypeName("#define VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    public const int KhrPipelineExecutablePropertiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME \"VK_KHR_pipeline_executable_properties\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrPipelineExecutablePropertiesExtensionName =>
        "VK_KHR_pipeline_executable_properties"u8;

    [NativeTypeName("#define VK_KHR_MAP_MEMORY_2_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    public const int KhrMapMemory2SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAP_MEMORY_2_EXTENSION_NAME \"VK_KHR_map_memory2\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    public static Utf8String KhrMapMemory2ExtensionName => "VK_KHR_map_memory2"u8;

    [NativeTypeName("#define VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_integer_dot_product"],
        ImpliesSets = [
            "VK_KHR_shader_integer_dot_product+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_integer_dot_product+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderIntegerDotProductSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME \"VK_KHR_shader_integer_dot_product\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_integer_dot_product"],
        ImpliesSets = [
            "VK_KHR_shader_integer_dot_product+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_integer_dot_product+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderIntegerDotProductExtensionName =>
        "VK_KHR_shader_integer_dot_product"u8;

    [NativeTypeName("#define VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_pipeline_library"])]
    public const int KhrPipelineLibrarySpecVersion = 1;

    [NativeTypeName("#define VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME \"VK_KHR_pipeline_library\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_pipeline_library"])]
    public static Utf8String KhrPipelineLibraryExtensionName => "VK_KHR_pipeline_library"u8;

    [NativeTypeName("#define VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_non_semantic_info"])]
    public const int KhrShaderNonSemanticInfoSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME \"VK_KHR_shader_non_semantic_info\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_non_semantic_info"])]
    public static Utf8String KhrShaderNonSemanticInfoExtensionName =>
        "VK_KHR_shader_non_semantic_info"u8;

    [NativeTypeName("#define VK_KHR_PRESENT_ID_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_present_id"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    public const int KhrPresentIdSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_PRESENT_ID_EXTENSION_NAME \"VK_KHR_present_id\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_present_id"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrPresentIdExtensionName => "VK_KHR_present_id"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION 12")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public const int KhrVideoEncodeQueueSpecVersion = 12;

    [NativeTypeName(
        "#define VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME \"VK_KHR_video_encode_queue\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String KhrVideoEncodeQueueExtensionName => "VK_KHR_video_encode_queue"u8;

    [NativeTypeName("#define VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const int KhrSynchronization2SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME \"VK_KHR_synchronization2\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrSynchronization2ExtensionName => "VK_KHR_synchronization2"u8;

    [NativeTypeName("#define VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shader_barycentric"],
        ImpliesSets = [
            "VK_KHR_fragment_shader_barycentric+VK_KHR_get_physical_device_properties2",
            "VK_KHR_fragment_shader_barycentric+VK_VERSION_1_1",
        ]
    )]
    public const int KhrFragmentShaderBarycentricSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME \"VK_KHR_fragment_shader_barycentric\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shader_barycentric"],
        ImpliesSets = [
            "VK_KHR_fragment_shader_barycentric+VK_KHR_get_physical_device_properties2",
            "VK_KHR_fragment_shader_barycentric+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrFragmentShaderBarycentricExtensionName =>
        "VK_KHR_fragment_shader_barycentric"u8;

    [NativeTypeName("#define VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_subgroup_uniform_control_flow"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public const int KhrShaderSubgroupUniformControlFlowSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME \"VK_KHR_shader_subgroup_uniform_control_flow\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_subgroup_uniform_control_flow"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public static Utf8String KhrShaderSubgroupUniformControlFlowExtensionName =>
        "VK_KHR_shader_subgroup_uniform_control_flow"u8;

    [NativeTypeName("#define VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_zero_initialize_workgroup_memory"],
        ImpliesSets = [
            "VK_KHR_zero_initialize_workgroup_memory+VK_KHR_get_physical_device_properties2",
            "VK_KHR_zero_initialize_workgroup_memory+VK_VERSION_1_1",
        ]
    )]
    public const int KhrZeroInitializeWorkgroupMemorySpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME \"VK_KHR_zero_initialize_workgroup_memory\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_zero_initialize_workgroup_memory"],
        ImpliesSets = [
            "VK_KHR_zero_initialize_workgroup_memory+VK_KHR_get_physical_device_properties2",
            "VK_KHR_zero_initialize_workgroup_memory+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrZeroInitializeWorkgroupMemoryExtensionName =>
        "VK_KHR_zero_initialize_workgroup_memory"u8;

    [NativeTypeName("#define VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_workgroup_memory_explicit_layout"],
        ImpliesSets = [
            "VK_KHR_workgroup_memory_explicit_layout+VK_KHR_get_physical_device_properties2",
            "VK_KHR_workgroup_memory_explicit_layout+VK_VERSION_1_1",
        ]
    )]
    public const int KhrWorkgroupMemoryExplicitLayoutSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME \"VK_KHR_workgroup_memory_explicit_layout\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_workgroup_memory_explicit_layout"],
        ImpliesSets = [
            "VK_KHR_workgroup_memory_explicit_layout+VK_KHR_get_physical_device_properties2",
            "VK_KHR_workgroup_memory_explicit_layout+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrWorkgroupMemoryExplicitLayoutExtensionName =>
        "VK_KHR_workgroup_memory_explicit_layout"u8;

    [NativeTypeName("#define VK_KHR_COPY_COMMANDS_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    public const int KhrCopyCommands2SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME \"VK_KHR_copy_commands2\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrCopyCommands2ExtensionName => "VK_KHR_copy_commands2"u8;

    [NativeTypeName("#define VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const int KhrFormatFeatureFlags2SpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME \"VK_KHR_format_feature_flags2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrFormatFeatureFlags2ExtensionName =>
        "VK_KHR_format_feature_flags2"u8;

    [NativeTypeName("#define VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_maintenance1"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public const int KhrRayTracingMaintenance1SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME \"VK_KHR_ray_tracing_maintenance1\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_maintenance1"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public static Utf8String KhrRayTracingMaintenance1ExtensionName =>
        "VK_KHR_ray_tracing_maintenance1"u8;

    [NativeTypeName("#define VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_portability_enumeration"])]
    public const int KhrPortabilityEnumerationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME \"VK_KHR_portability_enumeration\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_portability_enumeration"])]
    public static Utf8String KhrPortabilityEnumerationExtensionName =>
        "VK_KHR_portability_enumeration"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_4_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    public const int KhrMaintenance4SpecVersion = 2;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_4_EXTENSION_NAME \"VK_KHR_maintenance4\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    public static Utf8String KhrMaintenance4ExtensionName => "VK_KHR_maintenance4"u8;

    [NativeTypeName("#define VK_KHR_SHADER_SUBGROUP_ROTATE_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_subgroup_rotate"])]
    public const int KhrShaderSubgroupRotateSpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_SHADER_SUBGROUP_ROTATE_EXTENSION_NAME \"VK_KHR_shader_subgroup_rotate\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_subgroup_rotate"])]
    public static Utf8String KhrShaderSubgroupRotateExtensionName =>
        "VK_KHR_shader_subgroup_rotate"u8;

    [NativeTypeName("#define VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_maximal_reconvergence"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public const int KhrShaderMaximalReconvergenceSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_EXTENSION_NAME \"VK_KHR_shader_maximal_reconvergence\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_maximal_reconvergence"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public static Utf8String KhrShaderMaximalReconvergenceExtensionName =>
        "VK_KHR_shader_maximal_reconvergence"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_5_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const int KhrMaintenance5SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_5_EXTENSION_NAME \"VK_KHR_maintenance5\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public static Utf8String KhrMaintenance5ExtensionName => "VK_KHR_maintenance5"u8;

    [NativeTypeName("#define VK_KHR_present_id2 1")]
    [SupportedApiProfile("vulkan")]
    public const int KHRPresentId2 = 1;

    [NativeTypeName("#define VK_KHR_PRESENT_ID_2_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int KhrPresentId2SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_PRESENT_ID_2_EXTENSION_NAME \"VK_KHR_present_id2\"")]
    [SupportedApiProfile("vulkan")]
    public static Utf8String KhrPresentId2ExtensionName => "VK_KHR_present_id2"u8;

    [NativeTypeName("#define VK_KHR_present_wait2 1")]
    [SupportedApiProfile("vulkan")]
    public const int KHRPresentWait2 = 1;

    [NativeTypeName("#define VK_KHR_PRESENT_WAIT_2_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int KhrPresentWait2SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_PRESENT_WAIT_2_EXTENSION_NAME \"VK_KHR_present_wait2\"")]
    [SupportedApiProfile("vulkan")]
    public static Utf8String KhrPresentWait2ExtensionName => "VK_KHR_present_wait2"u8;

    [NativeTypeName("#define VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_position_fetch"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public const int KhrRayTracingPositionFetchSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME \"VK_KHR_ray_tracing_position_fetch\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_position_fetch"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public static Utf8String KhrRayTracingPositionFetchExtensionName =>
        "VK_KHR_ray_tracing_position_fetch"u8;

    [NativeTypeName("#define VK_MAX_PIPELINE_BINARY_KEY_SIZE_KHR 32U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    public const uint MaxPipelineBinaryKeySizeKHR = 32U;

    [NativeTypeName("#define VK_KHR_PIPELINE_BINARY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    public const int KhrPipelineBinarySpecVersion = 1;

    [NativeTypeName("#define VK_KHR_PIPELINE_BINARY_EXTENSION_NAME \"VK_KHR_pipeline_binary\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    public static Utf8String KhrPipelineBinaryExtensionName => "VK_KHR_pipeline_binary"u8;

    [NativeTypeName("#define VK_KHR_surface_maintenance1 1")]
    [SupportedApiProfile("vulkan")]
    public const int KHRSurfaceMaintenance1 = 1;

    [NativeTypeName("#define VK_KHR_SURFACE_MAINTENANCE_1_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int KhrSurfaceMaintenance1SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SURFACE_MAINTENANCE_1_EXTENSION_NAME \"VK_KHR_surface_maintenance1\""
    )]
    [SupportedApiProfile("vulkan")]
    public static Utf8String KhrSurfaceMaintenance1ExtensionName => "VK_KHR_surface_maintenance1"u8;

    [NativeTypeName("#define VK_KHR_swapchain_maintenance1 1")]
    [SupportedApiProfile("vulkan")]
    public const int KHRSwapchainMaintenance1 = 1;

    [NativeTypeName("#define VK_KHR_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int KhrSwapchainMaintenance1SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME \"VK_KHR_swapchain_maintenance1\""
    )]
    [SupportedApiProfile("vulkan")]
    public static Utf8String KhrSwapchainMaintenance1ExtensionName =>
        "VK_KHR_swapchain_maintenance1"u8;

    [NativeTypeName("#define VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_cooperative_matrix"],
        ImpliesSets = [
            "VK_KHR_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_KHR_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    public const int KhrCooperativeMatrixSpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME \"VK_KHR_cooperative_matrix\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_cooperative_matrix"],
        ImpliesSets = [
            "VK_KHR_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_KHR_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrCooperativeMatrixExtensionName => "VK_KHR_cooperative_matrix"u8;

    [NativeTypeName("#define VK_KHR_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_compute_shader_derivatives"],
        ImpliesSets = [
            "VK_KHR_compute_shader_derivatives+VK_KHR_get_physical_device_properties2",
            "VK_KHR_compute_shader_derivatives+VK_VERSION_1_1",
        ]
    )]
    public const int KhrComputeShaderDerivativesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME \"VK_KHR_compute_shader_derivatives\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_compute_shader_derivatives"],
        ImpliesSets = [
            "VK_KHR_compute_shader_derivatives+VK_KHR_get_physical_device_properties2",
            "VK_KHR_compute_shader_derivatives+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrComputeShaderDerivativesExtensionName =>
        "VK_KHR_compute_shader_derivatives"u8;

    [NativeTypeName("#define VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR 7U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_av1"],
        ImpliesSets = ["VK_KHR_video_decode_queue"]
    )]
    public const uint MaxVideoAv1ReferencesPerFrameKHR = 7U;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_AV1_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_av1"],
        ImpliesSets = ["VK_KHR_video_decode_queue"]
    )]
    public const int KhrVideoDecodeAv1SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_AV1_EXTENSION_NAME \"VK_KHR_video_decode_av1\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_av1"],
        ImpliesSets = ["VK_KHR_video_decode_queue"]
    )]
    public static Utf8String KhrVideoDecodeAv1ExtensionName => "VK_KHR_video_decode_av1"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_AV1_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_av1"],
        ImpliesSets = ["VK_KHR_video_encode_queue"]
    )]
    public const int KhrVideoEncodeAv1SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_AV1_EXTENSION_NAME \"VK_KHR_video_encode_av1\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_av1"],
        ImpliesSets = ["VK_KHR_video_encode_queue"]
    )]
    public static Utf8String KhrVideoEncodeAv1ExtensionName => "VK_KHR_video_encode_av1"u8;

    [NativeTypeName("#define VK_KHR_video_decode_vp9 1")]
    [SupportedApiProfile("vulkan")]
    public const int KHRVideoDecodeVp9 = 1;

    [NativeTypeName("#define VK_MAX_VIDEO_VP9_REFERENCES_PER_FRAME_KHR 3U")]
    [SupportedApiProfile("vulkan")]
    public const uint MaxVideoVp9ReferencesPerFrameKHR = 3U;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_VP9_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int KhrVideoDecodeVp9SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_VP9_EXTENSION_NAME \"VK_KHR_video_decode_vp9\"")]
    [SupportedApiProfile("vulkan")]
    public static Utf8String KhrVideoDecodeVp9ExtensionName => "VK_KHR_video_decode_vp9"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_MAINTENANCE_1_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_maintenance1"],
        ImpliesSets = ["VK_KHR_video_queue"]
    )]
    public const int KhrVideoMaintenance1SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_VIDEO_MAINTENANCE_1_EXTENSION_NAME \"VK_KHR_video_maintenance1\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_maintenance1"],
        ImpliesSets = ["VK_KHR_video_queue"]
    )]
    public static Utf8String KhrVideoMaintenance1ExtensionName => "VK_KHR_video_maintenance1"u8;

    [NativeTypeName("#define VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_vertex_attribute_divisor"],
        ImpliesSets = [
            "VK_KHR_vertex_attribute_divisor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_vertex_attribute_divisor+VK_VERSION_1_1",
        ]
    )]
    public const int KhrVertexAttributeDivisorSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME \"VK_KHR_vertex_attribute_divisor\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_vertex_attribute_divisor"],
        ImpliesSets = [
            "VK_KHR_vertex_attribute_divisor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_vertex_attribute_divisor+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrVertexAttributeDivisorExtensionName =>
        "VK_KHR_vertex_attribute_divisor"u8;

    [NativeTypeName("#define VK_KHR_LOAD_STORE_OP_NONE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_load_store_op_none"])]
    public const int KhrLoadStoreOpNoneSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_LOAD_STORE_OP_NONE_EXTENSION_NAME \"VK_KHR_load_store_op_none\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_load_store_op_none"])]
    public static Utf8String KhrLoadStoreOpNoneExtensionName => "VK_KHR_load_store_op_none"u8;

    [NativeTypeName("#define VK_KHR_unified_image_layouts 1")]
    [SupportedApiProfile("vulkan")]
    public const int KHRUnifiedImageLayouts = 1;

    [NativeTypeName("#define VK_KHR_UNIFIED_IMAGE_LAYOUTS_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int KhrUnifiedImageLayoutsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_UNIFIED_IMAGE_LAYOUTS_EXTENSION_NAME \"VK_KHR_unified_image_layouts\""
    )]
    [SupportedApiProfile("vulkan")]
    public static Utf8String KhrUnifiedImageLayoutsExtensionName =>
        "VK_KHR_unified_image_layouts"u8;

    [NativeTypeName("#define VK_KHR_SHADER_FLOAT_CONTROLS_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_float_controls2"],
        ImpliesSets = ["VK_KHR_shader_float_controls", "VK_VERSION_1_1"]
    )]
    public const int KhrShaderFloatControls2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_FLOAT_CONTROLS_2_EXTENSION_NAME \"VK_KHR_shader_float_controls2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_float_controls2"],
        ImpliesSets = ["VK_KHR_shader_float_controls", "VK_VERSION_1_1"]
    )]
    public static Utf8String KhrShaderFloatControls2ExtensionName =>
        "VK_KHR_shader_float_controls2"u8;

    [NativeTypeName("#define VK_KHR_INDEX_TYPE_UINT8_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_index_type_uint8"],
        ImpliesSets = [
            "VK_KHR_index_type_uint8+VK_KHR_get_physical_device_properties2",
            "VK_KHR_index_type_uint8+VK_VERSION_1_1",
        ]
    )]
    public const int KhrIndexTypeUint8SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_INDEX_TYPE_UINT8_EXTENSION_NAME \"VK_KHR_index_type_uint8\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_index_type_uint8"],
        ImpliesSets = [
            "VK_KHR_index_type_uint8+VK_KHR_get_physical_device_properties2",
            "VK_KHR_index_type_uint8+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrIndexTypeUint8ExtensionName => "VK_KHR_index_type_uint8"u8;

    [NativeTypeName("#define VK_KHR_LINE_RASTERIZATION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_line_rasterization"],
        ImpliesSets = [
            "VK_KHR_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_KHR_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    public const int KhrLineRasterizationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME \"VK_KHR_line_rasterization\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_line_rasterization"],
        ImpliesSets = [
            "VK_KHR_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_KHR_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrLineRasterizationExtensionName => "VK_KHR_line_rasterization"u8;

    [NativeTypeName("#define VK_KHR_CALIBRATED_TIMESTAMPS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    public const int KhrCalibratedTimestampsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_CALIBRATED_TIMESTAMPS_EXTENSION_NAME \"VK_KHR_calibrated_timestamps\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrCalibratedTimestampsExtensionName =>
        "VK_KHR_calibrated_timestamps"u8;

    [NativeTypeName("#define VK_KHR_SHADER_EXPECT_ASSUME_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_expect_assume"],
        ImpliesSets = [
            "VK_KHR_shader_expect_assume+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_expect_assume+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderExpectAssumeSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_EXPECT_ASSUME_EXTENSION_NAME \"VK_KHR_shader_expect_assume\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_expect_assume"],
        ImpliesSets = [
            "VK_KHR_shader_expect_assume+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_expect_assume+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderExpectAssumeExtensionName => "VK_KHR_shader_expect_assume"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_6_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    public const int KhrMaintenance6SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_6_EXTENSION_NAME \"VK_KHR_maintenance6\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    public static Utf8String KhrMaintenance6ExtensionName => "VK_KHR_maintenance6"u8;

    [NativeTypeName("#define VK_KHR_video_encode_intra_refresh 1")]
    [SupportedApiProfile("vulkan")]
    public const int KHRVideoEncodeIntraRefresh = 1;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_INTRA_REFRESH_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int KhrVideoEncodeIntraRefreshSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_VIDEO_ENCODE_INTRA_REFRESH_EXTENSION_NAME \"VK_KHR_video_encode_intra_refresh\""
    )]
    [SupportedApiProfile("vulkan")]
    public static Utf8String KhrVideoEncodeIntraRefreshExtensionName =>
        "VK_KHR_video_encode_intra_refresh"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_quantization_map"],
        ImpliesSets = [
            "VK_KHR_video_encode_queue+VK_KHR_format_feature_flags2",
            "VK_KHR_video_encode_queue+VK_VERSION_1_3",
        ]
    )]
    public const int KhrVideoEncodeQuantizationMapSpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_EXTENSION_NAME \"VK_KHR_video_encode_quantization_map\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_quantization_map"],
        ImpliesSets = [
            "VK_KHR_video_encode_queue+VK_KHR_format_feature_flags2",
            "VK_KHR_video_encode_queue+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String KhrVideoEncodeQuantizationMapExtensionName =>
        "VK_KHR_video_encode_quantization_map"u8;

    [NativeTypeName("#define VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_relaxed_extended_instruction"])]
    public const int KhrShaderRelaxedExtendedInstructionSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_EXTENSION_NAME \"VK_KHR_shader_relaxed_extended_instruction\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_relaxed_extended_instruction"])]
    public static Utf8String KhrShaderRelaxedExtendedInstructionExtensionName =>
        "VK_KHR_shader_relaxed_extended_instruction"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_7_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance7"], ImpliesSets = ["VK_VERSION_1_1"])]
    public const int KhrMaintenance7SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_7_EXTENSION_NAME \"VK_KHR_maintenance7\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance7"], ImpliesSets = ["VK_VERSION_1_1"])]
    public static Utf8String KhrMaintenance7ExtensionName => "VK_KHR_maintenance7"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_8_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance8"], ImpliesSets = ["VK_VERSION_1_1"])]
    public const int KhrMaintenance8SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_8_EXTENSION_NAME \"VK_KHR_maintenance8\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance8"], ImpliesSets = ["VK_VERSION_1_1"])]
    public static Utf8String KhrMaintenance8ExtensionName => "VK_KHR_maintenance8"u8;

    [NativeTypeName("#define VK_KHR_maintenance9 1")]
    [SupportedApiProfile("vulkan")]
    public const int KHRMaintenance9 = 1;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_9_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int KhrMaintenance9SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_9_EXTENSION_NAME \"VK_KHR_maintenance9\"")]
    [SupportedApiProfile("vulkan")]
    public static Utf8String KhrMaintenance9ExtensionName => "VK_KHR_maintenance9"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_MAINTENANCE_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_maintenance2"],
        ImpliesSets = ["VK_KHR_video_queue"]
    )]
    public const int KhrVideoMaintenance2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_VIDEO_MAINTENANCE_2_EXTENSION_NAME \"VK_KHR_video_maintenance2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_maintenance2"],
        ImpliesSets = ["VK_KHR_video_queue"]
    )]
    public static Utf8String KhrVideoMaintenance2ExtensionName => "VK_KHR_video_maintenance2"u8;

    [NativeTypeName("#define VK_KHR_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_depth_clamp_zero_one"],
        ImpliesSets = [
            "VK_KHR_depth_clamp_zero_one+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_clamp_zero_one+VK_VERSION_1_1",
        ]
    )]
    public const int KhrDepthClampZeroOneSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME \"VK_KHR_depth_clamp_zero_one\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_depth_clamp_zero_one"],
        ImpliesSets = [
            "VK_KHR_depth_clamp_zero_one+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_clamp_zero_one+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrDepthClampZeroOneExtensionName => "VK_KHR_depth_clamp_zero_one"u8;

    [NativeTypeName("#define VK_KHR_ROBUSTNESS_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_robustness2"],
        ImpliesSets = [
            "VK_KHR_robustness2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_robustness2+VK_VERSION_1_1",
        ]
    )]
    public const int KhrRobustness2SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_ROBUSTNESS_2_EXTENSION_NAME \"VK_KHR_robustness2\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_robustness2"],
        ImpliesSets = [
            "VK_KHR_robustness2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_robustness2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrRobustness2ExtensionName => "VK_KHR_robustness2"u8;

    [NativeTypeName("#define VK_KHR_present_mode_fifo_latest_ready 1")]
    [SupportedApiProfile("vulkan")]
    public const int KHRPresentModeFifoLatestReady = 1;

    [NativeTypeName("#define VK_KHR_PRESENT_MODE_FIFO_LATEST_READY_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int KhrPresentModeFifoLatestReadySpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_PRESENT_MODE_FIFO_LATEST_READY_EXTENSION_NAME \"VK_KHR_present_mode_fifo_latest_ready\""
    )]
    [SupportedApiProfile("vulkan")]
    public static Utf8String KhrPresentModeFifoLatestReadyExtensionName =>
        "VK_KHR_present_mode_fifo_latest_ready"u8;

    [NativeTypeName("#define VK_EXT_DEBUG_REPORT_SPEC_VERSION 10")]
    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    public const int ExtDebugReportSpecVersion = 10;

    [NativeTypeName("#define VK_EXT_DEBUG_REPORT_EXTENSION_NAME \"VK_EXT_debug_report\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    public static Utf8String ExtDebugReportExtensionName => "VK_EXT_debug_report"u8;

    [NativeTypeName("#define VK_NV_GLSL_SHADER_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_glsl_shader"])]
    public const int NvGlslShaderSpecVersion = 1;

    [NativeTypeName("#define VK_NV_GLSL_SHADER_EXTENSION_NAME \"VK_NV_glsl_shader\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_glsl_shader"])]
    public static Utf8String NvGlslShaderExtensionName => "VK_NV_glsl_shader"u8;

    [NativeTypeName("#define VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_depth_range_unrestricted"])]
    public const int ExtDepthRangeUnrestrictedSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME \"VK_EXT_depth_range_unrestricted\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_depth_range_unrestricted"])]
    public static Utf8String ExtDepthRangeUnrestrictedExtensionName =>
        "VK_EXT_depth_range_unrestricted"u8;

    [NativeTypeName("#define VK_IMG_FILTER_CUBIC_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_IMG_filter_cubic"])]
    public const int ImgFilterCubicSpecVersion = 1;

    [NativeTypeName("#define VK_IMG_FILTER_CUBIC_EXTENSION_NAME \"VK_IMG_filter_cubic\"")]
    [SupportedApiProfile("vulkan", ["VK_IMG_filter_cubic"])]
    public static Utf8String ImgFilterCubicExtensionName => "VK_IMG_filter_cubic"u8;

    [NativeTypeName("#define VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_rasterization_order"])]
    public const int AmdRasterizationOrderSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME \"VK_AMD_rasterization_order\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_rasterization_order"])]
    public static Utf8String AmdRasterizationOrderExtensionName => "VK_AMD_rasterization_order"u8;

    [NativeTypeName("#define VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_trinary_minmax"])]
    public const int AmdShaderTrinaryMinmaxSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME \"VK_AMD_shader_trinary_minmax\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_trinary_minmax"])]
    public static Utf8String AmdShaderTrinaryMinmaxExtensionName =>
        "VK_AMD_shader_trinary_minmax"u8;

    [NativeTypeName("#define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_explicit_vertex_parameter"])]
    public const int AmdShaderExplicitVertexParameterSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME \"VK_AMD_shader_explicit_vertex_parameter\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_explicit_vertex_parameter"])]
    public static Utf8String AmdShaderExplicitVertexParameterExtensionName =>
        "VK_AMD_shader_explicit_vertex_parameter"u8;

    [NativeTypeName("#define VK_EXT_DEBUG_MARKER_SPEC_VERSION 4")]
    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    public const int ExtDebugMarkerSpecVersion = 4;

    [NativeTypeName("#define VK_EXT_DEBUG_MARKER_EXTENSION_NAME \"VK_EXT_debug_marker\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    public static Utf8String ExtDebugMarkerExtensionName => "VK_EXT_debug_marker"u8;

    [NativeTypeName("#define VK_AMD_GCN_SHADER_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_gcn_shader"])]
    public const int AmdGcnShaderSpecVersion = 1;

    [NativeTypeName("#define VK_AMD_GCN_SHADER_EXTENSION_NAME \"VK_AMD_gcn_shader\"")]
    [SupportedApiProfile("vulkan", ["VK_AMD_gcn_shader"])]
    public static Utf8String AmdGcnShaderExtensionName => "VK_AMD_gcn_shader"u8;

    [NativeTypeName("#define VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_dedicated_allocation"])]
    public const int NvDedicatedAllocationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME \"VK_NV_dedicated_allocation\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_dedicated_allocation"])]
    public static Utf8String NvDedicatedAllocationExtensionName => "VK_NV_dedicated_allocation"u8;

    [NativeTypeName("#define VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    public const int ExtTransformFeedbackSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME \"VK_EXT_transform_feedback\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtTransformFeedbackExtensionName => "VK_EXT_transform_feedback"u8;

    [NativeTypeName("#define VK_NVX_BINARY_IMPORT_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    public const int NvxBinaryImportSpecVersion = 2;

    [NativeTypeName("#define VK_NVX_BINARY_IMPORT_EXTENSION_NAME \"VK_NVX_binary_import\"")]
    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    public static Utf8String NvxBinaryImportExtensionName => "VK_NVX_binary_import"u8;

    [NativeTypeName("#define VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION 3")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    public const int NvxImageViewHandleSpecVersion = 3;

    [NativeTypeName("#define VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME \"VK_NVX_image_view_handle\"")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    public static Utf8String NvxImageViewHandleExtensionName => "VK_NVX_image_view_handle"u8;

    [NativeTypeName("#define VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
    public const int AmdDrawIndirectCountSpecVersion = 2;

    [NativeTypeName(
        "#define VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME \"VK_AMD_draw_indirect_count\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
    public static Utf8String AmdDrawIndirectCountExtensionName => "VK_AMD_draw_indirect_count"u8;

    [NativeTypeName("#define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_negative_viewport_height"])]
    public const int AmdNegativeViewportHeightSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME \"VK_AMD_negative_viewport_height\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_negative_viewport_height"])]
    public static Utf8String AmdNegativeViewportHeightExtensionName =>
        "VK_AMD_negative_viewport_height"u8;

    [NativeTypeName("#define VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_AMD_gpu_shader_half_float"])]
    public const int AmdGpuShaderHalfFloatSpecVersion = 2;

    [NativeTypeName(
        "#define VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME \"VK_AMD_gpu_shader_half_float\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_gpu_shader_half_float"])]
    public static Utf8String AmdGpuShaderHalfFloatExtensionName => "VK_AMD_gpu_shader_half_float"u8;

    [NativeTypeName("#define VK_AMD_SHADER_BALLOT_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_ballot"])]
    public const int AmdShaderBallotSpecVersion = 1;

    [NativeTypeName("#define VK_AMD_SHADER_BALLOT_EXTENSION_NAME \"VK_AMD_shader_ballot\"")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_ballot"])]
    public static Utf8String AmdShaderBallotExtensionName => "VK_AMD_shader_ballot"u8;

    [NativeTypeName("#define VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_texture_gather_bias_lod"],
        ImpliesSets = [
            "VK_AMD_texture_gather_bias_lod+VK_KHR_get_physical_device_properties2",
            "VK_AMD_texture_gather_bias_lod+VK_VERSION_1_1",
        ]
    )]
    public const int AmdTextureGatherBiasLodSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME \"VK_AMD_texture_gather_bias_lod\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_texture_gather_bias_lod"],
        ImpliesSets = [
            "VK_AMD_texture_gather_bias_lod+VK_KHR_get_physical_device_properties2",
            "VK_AMD_texture_gather_bias_lod+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String AmdTextureGatherBiasLodExtensionName =>
        "VK_AMD_texture_gather_bias_lod"u8;

    [NativeTypeName("#define VK_AMD_SHADER_INFO_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_info"])]
    public const int AmdShaderInfoSpecVersion = 1;

    [NativeTypeName("#define VK_AMD_SHADER_INFO_EXTENSION_NAME \"VK_AMD_shader_info\"")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_info"])]
    public static Utf8String AmdShaderInfoExtensionName => "VK_AMD_shader_info"u8;

    [NativeTypeName("#define VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_image_load_store_lod"])]
    public const int AmdShaderImageLoadStoreLodSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME \"VK_AMD_shader_image_load_store_lod\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_image_load_store_lod"])]
    public static Utf8String AmdShaderImageLoadStoreLodExtensionName =>
        "VK_AMD_shader_image_load_store_lod"u8;

    [NativeTypeName("#define VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_corner_sampled_image"],
        ImpliesSets = [
            "VK_NV_corner_sampled_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_corner_sampled_image+VK_VERSION_1_1",
        ]
    )]
    public const int NvCornerSampledImageSpecVersion = 2;

    [NativeTypeName(
        "#define VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME \"VK_NV_corner_sampled_image\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_corner_sampled_image"],
        ImpliesSets = [
            "VK_NV_corner_sampled_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_corner_sampled_image+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvCornerSampledImageExtensionName => "VK_NV_corner_sampled_image"u8;

    [NativeTypeName("#define VK_IMG_FORMAT_PVRTC_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_IMG_format_pvrtc"])]
    public const int ImgFormatPvrtcSpecVersion = 1;

    [NativeTypeName("#define VK_IMG_FORMAT_PVRTC_EXTENSION_NAME \"VK_IMG_format_pvrtc\"")]
    [SupportedApiProfile("vulkan", ["VK_IMG_format_pvrtc"])]
    public static Utf8String ImgFormatPvrtcExtensionName => "VK_IMG_format_pvrtc"u8;

    [NativeTypeName("#define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_external_memory_capabilities"])]
    public const int NvExternalMemoryCapabilitiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME \"VK_NV_external_memory_capabilities\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_external_memory_capabilities"])]
    public static Utf8String NvExternalMemoryCapabilitiesExtensionName =>
        "VK_NV_external_memory_capabilities"u8;

    [NativeTypeName("#define VK_NV_EXTERNAL_MEMORY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_external_memory"],
        ImpliesSets = ["VK_NV_external_memory_capabilities"]
    )]
    public const int NvExternalMemorySpecVersion = 1;

    [NativeTypeName("#define VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME \"VK_NV_external_memory\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_external_memory"],
        ImpliesSets = ["VK_NV_external_memory_capabilities"]
    )]
    public static Utf8String NvExternalMemoryExtensionName => "VK_NV_external_memory"u8;

    [NativeTypeName("#define VK_EXT_VALIDATION_FLAGS_SPEC_VERSION 3")]
    [SupportedApiProfile("vulkan", ["VK_EXT_validation_flags"])]
    public const int ExtValidationFlagsSpecVersion = 3;

    [NativeTypeName("#define VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME \"VK_EXT_validation_flags\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_validation_flags"])]
    public static Utf8String ExtValidationFlagsExtensionName => "VK_EXT_validation_flags"u8;

    [NativeTypeName("#define VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_subgroup_ballot"])]
    public const int ExtShaderSubgroupBallotSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME \"VK_EXT_shader_subgroup_ballot\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_subgroup_ballot"])]
    public static Utf8String ExtShaderSubgroupBallotExtensionName =>
        "VK_EXT_shader_subgroup_ballot"u8;

    [NativeTypeName("#define VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_subgroup_vote"])]
    public const int ExtShaderSubgroupVoteSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME \"VK_EXT_shader_subgroup_vote\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_subgroup_vote"])]
    public static Utf8String ExtShaderSubgroupVoteExtensionName => "VK_EXT_shader_subgroup_vote"u8;

    [NativeTypeName("#define VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_texture_compression_astc_hdr"],
        ImpliesSets = [
            "VK_EXT_texture_compression_astc_hdr+VK_KHR_get_physical_device_properties2",
            "VK_EXT_texture_compression_astc_hdr+VK_VERSION_1_1",
        ]
    )]
    public const int ExtTextureCompressionAstcHdrSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME \"VK_EXT_texture_compression_astc_hdr\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_texture_compression_astc_hdr"],
        ImpliesSets = [
            "VK_EXT_texture_compression_astc_hdr+VK_KHR_get_physical_device_properties2",
            "VK_EXT_texture_compression_astc_hdr+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtTextureCompressionAstcHdrExtensionName =>
        "VK_EXT_texture_compression_astc_hdr"u8;

    [NativeTypeName("#define VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_astc_decode_mode"],
        ImpliesSets = [
            "VK_EXT_astc_decode_mode+VK_KHR_get_physical_device_properties2",
            "VK_EXT_astc_decode_mode+VK_VERSION_1_1",
        ]
    )]
    public const int ExtAstcDecodeModeSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME \"VK_EXT_astc_decode_mode\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_astc_decode_mode"],
        ImpliesSets = [
            "VK_EXT_astc_decode_mode+VK_KHR_get_physical_device_properties2",
            "VK_EXT_astc_decode_mode+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtAstcDecodeModeExtensionName => "VK_EXT_astc_decode_mode"u8;

    [NativeTypeName("#define VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_robustness"],
        ImpliesSets = [
            "VK_EXT_pipeline_robustness+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_robustness+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPipelineRobustnessSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME \"VK_EXT_pipeline_robustness\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_robustness"],
        ImpliesSets = [
            "VK_EXT_pipeline_robustness+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_robustness+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPipelineRobustnessExtensionName => "VK_EXT_pipeline_robustness"u8;

    [NativeTypeName("#define VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering"],
        ImpliesSets = [
            "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conditional_rendering+VK_VERSION_1_1",
        ]
    )]
    public const int ExtConditionalRenderingSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME \"VK_EXT_conditional_rendering\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering"],
        ImpliesSets = [
            "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conditional_rendering+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtConditionalRenderingExtensionName =>
        "VK_EXT_conditional_rendering"u8;

    [NativeTypeName("#define VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
    public const int NvClipSpaceWScalingSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME \"VK_NV_clip_space_w_scaling\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
    public static Utf8String NvClipSpaceWScalingExtensionName => "VK_NV_clip_space_w_scaling"u8;

    [NativeTypeName("#define VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_direct_mode_display"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    public const int ExtDirectModeDisplaySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME \"VK_EXT_direct_mode_display\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_direct_mode_display"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    public static Utf8String ExtDirectModeDisplayExtensionName => "VK_EXT_direct_mode_display"u8;

    [NativeTypeName("#define VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_surface_counter"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    public const int ExtDisplaySurfaceCounterSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME \"VK_EXT_display_surface_counter\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_surface_counter"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    public static Utf8String ExtDisplaySurfaceCounterExtensionName =>
        "VK_EXT_display_surface_counter"u8;

    [NativeTypeName("#define VK_EXT_DISPLAY_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    public const int ExtDisplayControlSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME \"VK_EXT_display_control\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    public static Utf8String ExtDisplayControlExtensionName => "VK_EXT_display_control"u8;

    [NativeTypeName("#define VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    public const int GoogleDisplayTimingSpecVersion = 1;

    [NativeTypeName("#define VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME \"VK_GOOGLE_display_timing\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    public static Utf8String GoogleDisplayTimingExtensionName => "VK_GOOGLE_display_timing"u8;

    [NativeTypeName("#define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_sample_mask_override_coverage"])]
    public const int NvSampleMaskOverrideCoverageSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME \"VK_NV_sample_mask_override_coverage\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_sample_mask_override_coverage"])]
    public static Utf8String NvSampleMaskOverrideCoverageExtensionName =>
        "VK_NV_sample_mask_override_coverage"u8;

    [NativeTypeName("#define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_geometry_shader_passthrough"])]
    public const int NvGeometryShaderPassthroughSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME \"VK_NV_geometry_shader_passthrough\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_geometry_shader_passthrough"])]
    public static Utf8String NvGeometryShaderPassthroughExtensionName =>
        "VK_NV_geometry_shader_passthrough"u8;

    [NativeTypeName("#define VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_viewport_array2"])]
    public const int NvViewportArray2SpecVersion = 1;

    [NativeTypeName("#define VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME \"VK_NV_viewport_array2\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_viewport_array2"])]
    public static Utf8String NvViewportArray2ExtensionName => "VK_NV_viewport_array2"u8;

    [NativeTypeName("#define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NVX_multiview_per_view_attributes"],
        ImpliesSets = [
            "VK_NVX_multiview_per_view_attributes+VK_KHR_multiview",
            "VK_NVX_multiview_per_view_attributes+VK_VERSION_1_1",
        ]
    )]
    public const int NvxMultiviewPerViewAttributesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME \"VK_NVX_multiview_per_view_attributes\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NVX_multiview_per_view_attributes"],
        ImpliesSets = [
            "VK_NVX_multiview_per_view_attributes+VK_KHR_multiview",
            "VK_NVX_multiview_per_view_attributes+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvxMultiviewPerViewAttributesExtensionName =>
        "VK_NVX_multiview_per_view_attributes"u8;

    [NativeTypeName("#define VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_viewport_swizzle"])]
    public const int NvViewportSwizzleSpecVersion = 1;

    [NativeTypeName("#define VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME \"VK_NV_viewport_swizzle\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_viewport_swizzle"])]
    public static Utf8String NvViewportSwizzleExtensionName => "VK_NV_viewport_swizzle"u8;

    [NativeTypeName("#define VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDiscardRectanglesSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME \"VK_EXT_discard_rectangles\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDiscardRectanglesExtensionName => "VK_EXT_discard_rectangles"u8;

    [NativeTypeName("#define VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conservative_rasterization"],
        ImpliesSets = [
            "VK_EXT_conservative_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conservative_rasterization+VK_VERSION_1_1",
        ]
    )]
    public const int ExtConservativeRasterizationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME \"VK_EXT_conservative_rasterization\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conservative_rasterization"],
        ImpliesSets = [
            "VK_EXT_conservative_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conservative_rasterization+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtConservativeRasterizationExtensionName =>
        "VK_EXT_conservative_rasterization"u8;

    [NativeTypeName("#define VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_enable"],
        ImpliesSets = [
            "VK_EXT_depth_clip_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clip_enable+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDepthClipEnableSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME \"VK_EXT_depth_clip_enable\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_enable"],
        ImpliesSets = [
            "VK_EXT_depth_clip_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clip_enable+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDepthClipEnableExtensionName => "VK_EXT_depth_clip_enable"u8;

    [NativeTypeName("#define VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION 5")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_swapchain_colorspace"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    public const int ExtSwapchainColorSpaceSpecVersion = 5;

    [NativeTypeName(
        "#define VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME \"VK_EXT_swapchain_colorspace\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_swapchain_colorspace"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    public static Utf8String ExtSwapchainColorSpaceExtensionName => "VK_EXT_swapchain_colorspace"u8;

    [NativeTypeName("#define VK_EXT_HDR_METADATA_SPEC_VERSION 3")]
    [SupportedApiProfile("vulkan", ["VK_EXT_hdr_metadata"], ImpliesSets = ["VK_KHR_swapchain"])]
    public const int ExtHdrMetadataSpecVersion = 3;

    [NativeTypeName("#define VK_EXT_HDR_METADATA_EXTENSION_NAME \"VK_EXT_hdr_metadata\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_hdr_metadata"], ImpliesSets = ["VK_KHR_swapchain"])]
    public static Utf8String ExtHdrMetadataExtensionName => "VK_EXT_hdr_metadata"u8;

    [NativeTypeName("#define VK_IMG_RELAXED_LINE_RASTERIZATION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_IMG_relaxed_line_rasterization"],
        ImpliesSets = [
            "VK_IMG_relaxed_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_IMG_relaxed_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    public const int ImgRelaxedLineRasterizationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_IMG_RELAXED_LINE_RASTERIZATION_EXTENSION_NAME \"VK_IMG_relaxed_line_rasterization\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_IMG_relaxed_line_rasterization"],
        ImpliesSets = [
            "VK_IMG_relaxed_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_IMG_relaxed_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ImgRelaxedLineRasterizationExtensionName =>
        "VK_IMG_relaxed_line_rasterization"u8;

    [NativeTypeName("#define VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_dma_buf"],
        ImpliesSets = ["VK_KHR_external_memory_fd"]
    )]
    public const int ExtExternalMemoryDmaBufSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME \"VK_EXT_external_memory_dma_buf\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_dma_buf"],
        ImpliesSets = ["VK_KHR_external_memory_fd"]
    )]
    public static Utf8String ExtExternalMemoryDmaBufExtensionName =>
        "VK_EXT_external_memory_dma_buf"u8;

    [NativeTypeName("#define VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_queue_family_foreign"],
        ImpliesSets = [
            "VK_EXT_queue_family_foreign+VK_KHR_external_memory",
            "VK_EXT_queue_family_foreign+VK_VERSION_1_1",
        ]
    )]
    public const int ExtQueueFamilyForeignSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME \"VK_EXT_queue_family_foreign\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_queue_family_foreign"],
        ImpliesSets = [
            "VK_EXT_queue_family_foreign+VK_KHR_external_memory",
            "VK_EXT_queue_family_foreign+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtQueueFamilyForeignExtensionName => "VK_EXT_queue_family_foreign"u8;

    [NativeTypeName("#define VK_QUEUE_FAMILY_FOREIGN_EXT (~2U)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_queue_family_foreign"],
        ImpliesSets = [
            "VK_EXT_queue_family_foreign+VK_KHR_external_memory",
            "VK_EXT_queue_family_foreign+VK_VERSION_1_1",
        ]
    )]
    public const uint QueueFamilyForeignEXT = (~2U);

    [NativeTypeName("#define VK_EXT_DEBUG_UTILS_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    public const int ExtDebugUtilsSpecVersion = 2;

    [NativeTypeName("#define VK_EXT_DEBUG_UTILS_EXTENSION_NAME \"VK_EXT_debug_utils\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    public static Utf8String ExtDebugUtilsExtensionName => "VK_EXT_debug_utils"u8;

    [NativeTypeName("#define VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sampler_filter_minmax"],
        ImpliesSets = [
            "VK_EXT_sampler_filter_minmax+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sampler_filter_minmax+VK_VERSION_1_1",
        ]
    )]
    public const int ExtSamplerFilterMinmaxSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME \"VK_EXT_sampler_filter_minmax\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sampler_filter_minmax"],
        ImpliesSets = [
            "VK_EXT_sampler_filter_minmax+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sampler_filter_minmax+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtSamplerFilterMinmaxExtensionName =>
        "VK_EXT_sampler_filter_minmax"u8;

    [NativeTypeName("#define VK_AMD_GPU_SHADER_INT16_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_AMD_gpu_shader_int16"])]
    public const int AmdGpuShaderInt16SpecVersion = 2;

    [NativeTypeName("#define VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME \"VK_AMD_gpu_shader_int16\"")]
    [SupportedApiProfile("vulkan", ["VK_AMD_gpu_shader_int16"])]
    public static Utf8String AmdGpuShaderInt16ExtensionName => "VK_AMD_gpu_shader_int16"u8;

    [NativeTypeName("#define VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_mixed_attachment_samples"])]
    public const int AmdMixedAttachmentSamplesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME \"VK_AMD_mixed_attachment_samples\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_mixed_attachment_samples"])]
    public static Utf8String AmdMixedAttachmentSamplesExtensionName =>
        "VK_AMD_mixed_attachment_samples"u8;

    [NativeTypeName("#define VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_fragment_mask"])]
    public const int AmdShaderFragmentMaskSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME \"VK_AMD_shader_fragment_mask\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_fragment_mask"])]
    public static Utf8String AmdShaderFragmentMaskExtensionName => "VK_AMD_shader_fragment_mask"u8;

    [NativeTypeName("#define VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_inline_uniform_block"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_maintenance1",
            "VK_VERSION_1_1",
        ]
    )]
    public const int ExtInlineUniformBlockSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME \"VK_EXT_inline_uniform_block\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_inline_uniform_block"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_maintenance1",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtInlineUniformBlockExtensionName => "VK_EXT_inline_uniform_block"u8;

    [NativeTypeName("#define VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_stencil_export"])]
    public const int ExtShaderStencilExportSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME \"VK_EXT_shader_stencil_export\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_stencil_export"])]
    public static Utf8String ExtShaderStencilExportExtensionName =>
        "VK_EXT_shader_stencil_export"u8;

    [NativeTypeName("#define VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    public const int ExtSampleLocationsSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME \"VK_EXT_sample_locations\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtSampleLocationsExtensionName => "VK_EXT_sample_locations"u8;

    [NativeTypeName("#define VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_blend_operation_advanced"],
        ImpliesSets = [
            "VK_EXT_blend_operation_advanced+VK_KHR_get_physical_device_properties2",
            "VK_EXT_blend_operation_advanced+VK_VERSION_1_1",
        ]
    )]
    public const int ExtBlendOperationAdvancedSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME \"VK_EXT_blend_operation_advanced\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_blend_operation_advanced"],
        ImpliesSets = [
            "VK_EXT_blend_operation_advanced+VK_KHR_get_physical_device_properties2",
            "VK_EXT_blend_operation_advanced+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtBlendOperationAdvancedExtensionName =>
        "VK_EXT_blend_operation_advanced"u8;

    [NativeTypeName("#define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_fragment_coverage_to_color"])]
    public const int NvFragmentCoverageToColorSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME \"VK_NV_fragment_coverage_to_color\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_fragment_coverage_to_color"])]
    public static Utf8String NvFragmentCoverageToColorExtensionName =>
        "VK_NV_fragment_coverage_to_color"u8;

    [NativeTypeName("#define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_framebuffer_mixed_samples"])]
    public const int NvFramebufferMixedSamplesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME \"VK_NV_framebuffer_mixed_samples\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_framebuffer_mixed_samples"])]
    public static Utf8String NvFramebufferMixedSamplesExtensionName =>
        "VK_NV_framebuffer_mixed_samples"u8;

    [NativeTypeName("#define VK_NV_FILL_RECTANGLE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_fill_rectangle"])]
    public const int NvFillRectangleSpecVersion = 1;

    [NativeTypeName("#define VK_NV_FILL_RECTANGLE_EXTENSION_NAME \"VK_NV_fill_rectangle\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_fill_rectangle"])]
    public static Utf8String NvFillRectangleExtensionName => "VK_NV_fill_rectangle"u8;

    [NativeTypeName("#define VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_shader_sm_builtins"], ImpliesSets = ["VK_VERSION_1_1"])]
    public const int NvShaderSmBuiltinsSpecVersion = 1;

    [NativeTypeName("#define VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME \"VK_NV_shader_sm_builtins\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_shader_sm_builtins"], ImpliesSets = ["VK_VERSION_1_1"])]
    public static Utf8String NvShaderSmBuiltinsExtensionName => "VK_NV_shader_sm_builtins"u8;

    [NativeTypeName("#define VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_post_depth_coverage"])]
    public const int ExtPostDepthCoverageSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME \"VK_EXT_post_depth_coverage\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_post_depth_coverage"])]
    public static Utf8String ExtPostDepthCoverageExtensionName => "VK_EXT_post_depth_coverage"u8;

    [NativeTypeName("#define VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_drm_format_modifier"],
        ImpliesSets = [
            "VK_KHR_image_format_list+VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion",
            "VK_KHR_image_format_list+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const int ExtImageDrmFormatModifierSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME \"VK_EXT_image_drm_format_modifier\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_drm_format_modifier"],
        ImpliesSets = [
            "VK_KHR_image_format_list+VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion",
            "VK_KHR_image_format_list+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public static Utf8String ExtImageDrmFormatModifierExtensionName =>
        "VK_EXT_image_drm_format_modifier"u8;

    [NativeTypeName("#define VK_EXT_VALIDATION_CACHE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    public const int ExtValidationCacheSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_VALIDATION_CACHE_EXTENSION_NAME \"VK_EXT_validation_cache\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    public static Utf8String ExtValidationCacheExtensionName => "VK_EXT_validation_cache"u8;

    [NativeTypeName("#define VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_indexing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_maintenance3",
            "VK_VERSION_1_1",
        ]
    )]
    public const int ExtDescriptorIndexingSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME \"VK_EXT_descriptor_indexing\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_indexing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_maintenance3",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDescriptorIndexingExtensionName => "VK_EXT_descriptor_indexing"u8;

    [NativeTypeName("#define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_viewport_index_layer"])]
    public const int ExtShaderViewportIndexLayerSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME \"VK_EXT_shader_viewport_index_layer\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_viewport_index_layer"])]
    public static Utf8String ExtShaderViewportIndexLayerExtensionName =>
        "VK_EXT_shader_viewport_index_layer"u8;

    [NativeTypeName("#define VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    public const int NvShadingRateImageSpecVersion = 3;

    [NativeTypeName("#define VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME \"VK_NV_shading_rate_image\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvShadingRateImageExtensionName => "VK_NV_shading_rate_image"u8;

    [NativeTypeName("#define VK_NV_RAY_TRACING_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    public const int NvRayTracingSpecVersion = 3;

    [NativeTypeName("#define VK_NV_RAY_TRACING_EXTENSION_NAME \"VK_NV_ray_tracing\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvRayTracingExtensionName => "VK_NV_ray_tracing"u8;

    [NativeTypeName("#define VK_SHADER_UNUSED_KHR (~0U)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    public const uint ShaderUnusedKHR = (~0U);

    [NativeTypeName("#define VK_SHADER_UNUSED_NV VK_SHADER_UNUSED_KHR")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    public const uint ShaderUnusedNV = (~0U);

    [NativeTypeName("#define VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_representative_fragment_test"],
        ImpliesSets = [
            "VK_NV_representative_fragment_test+VK_KHR_get_physical_device_properties2",
            "VK_NV_representative_fragment_test+VK_VERSION_1_1",
        ]
    )]
    public const int NvRepresentativeFragmentTestSpecVersion = 2;

    [NativeTypeName(
        "#define VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME \"VK_NV_representative_fragment_test\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_representative_fragment_test"],
        ImpliesSets = [
            "VK_NV_representative_fragment_test+VK_KHR_get_physical_device_properties2",
            "VK_NV_representative_fragment_test+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvRepresentativeFragmentTestExtensionName =>
        "VK_NV_representative_fragment_test"u8;

    [NativeTypeName("#define VK_EXT_FILTER_CUBIC_SPEC_VERSION 3")]
    [SupportedApiProfile("vulkan", ["VK_EXT_filter_cubic"])]
    public const int ExtFilterCubicSpecVersion = 3;

    [NativeTypeName("#define VK_EXT_FILTER_CUBIC_EXTENSION_NAME \"VK_EXT_filter_cubic\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_filter_cubic"])]
    public static Utf8String ExtFilterCubicExtensionName => "VK_EXT_filter_cubic"u8;

    [NativeTypeName("#define VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION 4")]
    [SupportedApiProfile("vulkan", ["VK_QCOM_render_pass_shader_resolve"])]
    public const int QcomRenderPassShaderResolveSpecVersion = 4;

    [NativeTypeName(
        "#define VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME \"VK_QCOM_render_pass_shader_resolve\""
    )]
    [SupportedApiProfile("vulkan", ["VK_QCOM_render_pass_shader_resolve"])]
    public static Utf8String QcomRenderPassShaderResolveExtensionName =>
        "VK_QCOM_render_pass_shader_resolve"u8;

    [NativeTypeName("#define VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_EXT_global_priority"])]
    public const int ExtGlobalPrioritySpecVersion = 2;

    [NativeTypeName("#define VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME \"VK_EXT_global_priority\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_global_priority"])]
    public static Utf8String ExtGlobalPriorityExtensionName => "VK_EXT_global_priority"u8;

    [NativeTypeName("#define VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_host"],
        ImpliesSets = [
            "VK_EXT_external_memory_host+VK_KHR_external_memory",
            "VK_EXT_external_memory_host+VK_VERSION_1_1",
        ]
    )]
    public const int ExtExternalMemoryHostSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME \"VK_EXT_external_memory_host\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_host"],
        ImpliesSets = [
            "VK_EXT_external_memory_host+VK_KHR_external_memory",
            "VK_EXT_external_memory_host+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtExternalMemoryHostExtensionName => "VK_EXT_external_memory_host"u8;

    [NativeTypeName("#define VK_AMD_BUFFER_MARKER_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_buffer_marker"])]
    public const int AmdBufferMarkerSpecVersion = 1;

    [NativeTypeName("#define VK_AMD_BUFFER_MARKER_EXTENSION_NAME \"VK_AMD_buffer_marker\"")]
    [SupportedApiProfile("vulkan", ["VK_AMD_buffer_marker"])]
    public static Utf8String AmdBufferMarkerExtensionName => "VK_AMD_buffer_marker"u8;

    [NativeTypeName("#define VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_pipeline_compiler_control"])]
    public const int AmdPipelineCompilerControlSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME \"VK_AMD_pipeline_compiler_control\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_pipeline_compiler_control"])]
    public static Utf8String AmdPipelineCompilerControlExtensionName =>
        "VK_AMD_pipeline_compiler_control"u8;

    [NativeTypeName("#define VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    public const int ExtCalibratedTimestampsSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME \"VK_EXT_calibrated_timestamps\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtCalibratedTimestampsExtensionName =>
        "VK_EXT_calibrated_timestamps"u8;

    [NativeTypeName("#define VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_shader_core_properties"],
        ImpliesSets = [
            "VK_AMD_shader_core_properties+VK_KHR_get_physical_device_properties2",
            "VK_AMD_shader_core_properties+VK_VERSION_1_1",
        ]
    )]
    public const int AmdShaderCorePropertiesSpecVersion = 2;

    [NativeTypeName(
        "#define VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME \"VK_AMD_shader_core_properties\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_shader_core_properties"],
        ImpliesSets = [
            "VK_AMD_shader_core_properties+VK_KHR_get_physical_device_properties2",
            "VK_AMD_shader_core_properties+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String AmdShaderCorePropertiesExtensionName =>
        "VK_AMD_shader_core_properties"u8;

    [NativeTypeName("#define VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_memory_overallocation_behavior"])]
    public const int AmdMemoryOverallocationBehaviorSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME \"VK_AMD_memory_overallocation_behavior\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_memory_overallocation_behavior"])]
    public static Utf8String AmdMemoryOverallocationBehaviorExtensionName =>
        "VK_AMD_memory_overallocation_behavior"u8;

    [NativeTypeName("#define VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_attribute_divisor"],
        ImpliesSets = [
            "VK_EXT_vertex_attribute_divisor+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_attribute_divisor+VK_VERSION_1_1",
        ]
    )]
    public const int ExtVertexAttributeDivisorSpecVersion = 3;

    [NativeTypeName(
        "#define VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME \"VK_EXT_vertex_attribute_divisor\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_attribute_divisor"],
        ImpliesSets = [
            "VK_EXT_vertex_attribute_divisor+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_attribute_divisor+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtVertexAttributeDivisorExtensionName =>
        "VK_EXT_vertex_attribute_divisor"u8;

    [NativeTypeName("#define VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_pipeline_creation_feedback"])]
    public const int ExtPipelineCreationFeedbackSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME \"VK_EXT_pipeline_creation_feedback\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_pipeline_creation_feedback"])]
    public static Utf8String ExtPipelineCreationFeedbackExtensionName =>
        "VK_EXT_pipeline_creation_feedback"u8;

    [NativeTypeName("#define VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shader_subgroup_partitioned"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public const int NvShaderSubgroupPartitionedSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME \"VK_NV_shader_subgroup_partitioned\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shader_subgroup_partitioned"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public static Utf8String NvShaderSubgroupPartitionedExtensionName =>
        "VK_NV_shader_subgroup_partitioned"u8;

    [NativeTypeName("#define VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_compute_shader_derivatives"],
        ImpliesSets = [
            "VK_NV_compute_shader_derivatives+VK_KHR_get_physical_device_properties2",
            "VK_NV_compute_shader_derivatives+VK_VERSION_1_1",
        ]
    )]
    public const int NvComputeShaderDerivativesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME \"VK_NV_compute_shader_derivatives\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_compute_shader_derivatives"],
        ImpliesSets = [
            "VK_NV_compute_shader_derivatives+VK_KHR_get_physical_device_properties2",
            "VK_NV_compute_shader_derivatives+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvComputeShaderDerivativesExtensionName =>
        "VK_NV_compute_shader_derivatives"u8;

    [NativeTypeName("#define VK_NV_MESH_SHADER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    public const int NvMeshShaderSpecVersion = 1;

    [NativeTypeName("#define VK_NV_MESH_SHADER_EXTENSION_NAME \"VK_NV_mesh_shader\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvMeshShaderExtensionName => "VK_NV_mesh_shader"u8;

    [NativeTypeName("#define VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_fragment_shader_barycentric"],
        ImpliesSets = [
            "VK_NV_fragment_shader_barycentric+VK_KHR_get_physical_device_properties2",
            "VK_NV_fragment_shader_barycentric+VK_VERSION_1_1",
        ]
    )]
    public const int NvFragmentShaderBarycentricSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME \"VK_NV_fragment_shader_barycentric\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_fragment_shader_barycentric"],
        ImpliesSets = [
            "VK_NV_fragment_shader_barycentric+VK_KHR_get_physical_device_properties2",
            "VK_NV_fragment_shader_barycentric+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvFragmentShaderBarycentricExtensionName =>
        "VK_NV_fragment_shader_barycentric"u8;

    [NativeTypeName("#define VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shader_image_footprint"],
        ImpliesSets = [
            "VK_NV_shader_image_footprint+VK_KHR_get_physical_device_properties2",
            "VK_NV_shader_image_footprint+VK_VERSION_1_1",
        ]
    )]
    public const int NvShaderImageFootprintSpecVersion = 2;

    [NativeTypeName(
        "#define VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME \"VK_NV_shader_image_footprint\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shader_image_footprint"],
        ImpliesSets = [
            "VK_NV_shader_image_footprint+VK_KHR_get_physical_device_properties2",
            "VK_NV_shader_image_footprint+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvShaderImageFootprintExtensionName =>
        "VK_NV_shader_image_footprint"u8;

    [NativeTypeName("#define VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    public const int NvScissorExclusiveSpecVersion = 2;

    [NativeTypeName("#define VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME \"VK_NV_scissor_exclusive\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvScissorExclusiveExtensionName => "VK_NV_scissor_exclusive"u8;

    [NativeTypeName("#define VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    public const int NvDeviceDiagnosticCheckpointsSpecVersion = 2;

    [NativeTypeName(
        "#define VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME \"VK_NV_device_diagnostic_checkpoints\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvDeviceDiagnosticCheckpointsExtensionName =>
        "VK_NV_device_diagnostic_checkpoints"u8;

    [NativeTypeName("#define VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_INTEL_shader_integer_functions2"],
        ImpliesSets = [
            "VK_INTEL_shader_integer_functions2+VK_KHR_get_physical_device_properties2",
            "VK_INTEL_shader_integer_functions2+VK_VERSION_1_1",
        ]
    )]
    public const int IntelShaderIntegerFunctions2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME \"VK_INTEL_shader_integer_functions2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_INTEL_shader_integer_functions2"],
        ImpliesSets = [
            "VK_INTEL_shader_integer_functions2+VK_KHR_get_physical_device_properties2",
            "VK_INTEL_shader_integer_functions2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String IntelShaderIntegerFunctions2ExtensionName =>
        "VK_INTEL_shader_integer_functions2"u8;

    [NativeTypeName("#define VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    public const int IntelPerformanceQuerySpecVersion = 2;

    [NativeTypeName(
        "#define VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME \"VK_INTEL_performance_query\""
    )]
    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    public static Utf8String IntelPerformanceQueryExtensionName => "VK_INTEL_performance_query"u8;

    [NativeTypeName("#define VK_EXT_PCI_BUS_INFO_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pci_bus_info"],
        ImpliesSets = [
            "VK_EXT_pci_bus_info+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pci_bus_info+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPciBusInfoSpecVersion = 2;

    [NativeTypeName("#define VK_EXT_PCI_BUS_INFO_EXTENSION_NAME \"VK_EXT_pci_bus_info\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pci_bus_info"],
        ImpliesSets = [
            "VK_EXT_pci_bus_info+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pci_bus_info+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPciBusInfoExtensionName => "VK_EXT_pci_bus_info"u8;

    [NativeTypeName("#define VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_display_native_hdr"],
        ImpliesSets = [
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    public const int AmdDisplayNativeHdrSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME \"VK_AMD_display_native_hdr\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_display_native_hdr"],
        ImpliesSets = [
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String AmdDisplayNativeHdrExtensionName => "VK_AMD_display_native_hdr"u8;

    [NativeTypeName("#define VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1",
        ]
    )]
    public const int ExtFragmentDensityMapSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME \"VK_EXT_fragment_density_map\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtFragmentDensityMapExtensionName => "VK_EXT_fragment_density_map"u8;

    [NativeTypeName("#define VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_scalar_block_layout"],
        ImpliesSets = [
            "VK_EXT_scalar_block_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_scalar_block_layout+VK_VERSION_1_1",
        ]
    )]
    public const int ExtScalarBlockLayoutSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME \"VK_EXT_scalar_block_layout\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_scalar_block_layout"],
        ImpliesSets = [
            "VK_EXT_scalar_block_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_scalar_block_layout+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtScalarBlockLayoutExtensionName => "VK_EXT_scalar_block_layout"u8;

    [NativeTypeName("#define VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_GOOGLE_hlsl_functionality1"])]
    public const int GoogleHlslFunctionality1SpecVersion = 1;

    [NativeTypeName(
        "#define VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME \"VK_GOOGLE_hlsl_functionality1\""
    )]
    [SupportedApiProfile("vulkan", ["VK_GOOGLE_hlsl_functionality1"])]
    public static Utf8String GoogleHlslFunctionality1ExtensionName =>
        "VK_GOOGLE_hlsl_functionality1"u8;

    [NativeTypeName("#define VK_GOOGLE_DECORATE_STRING_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_GOOGLE_decorate_string"])]
    public const int GoogleDecorateStringSpecVersion = 1;

    [NativeTypeName(
        "#define VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME \"VK_GOOGLE_decorate_string\""
    )]
    [SupportedApiProfile("vulkan", ["VK_GOOGLE_decorate_string"])]
    public static Utf8String GoogleDecorateStringExtensionName => "VK_GOOGLE_decorate_string"u8;

    [NativeTypeName("#define VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_subgroup_size_control"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public const int ExtSubgroupSizeControlSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME \"VK_EXT_subgroup_size_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_subgroup_size_control"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public static Utf8String ExtSubgroupSizeControlExtensionName =>
        "VK_EXT_subgroup_size_control"u8;

    [NativeTypeName("#define VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_shader_core_properties2"],
        ImpliesSets = ["VK_AMD_shader_core_properties"]
    )]
    public const int AmdShaderCoreProperties2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME \"VK_AMD_shader_core_properties2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_shader_core_properties2"],
        ImpliesSets = ["VK_AMD_shader_core_properties"]
    )]
    public static Utf8String AmdShaderCoreProperties2ExtensionName =>
        "VK_AMD_shader_core_properties2"u8;

    [NativeTypeName("#define VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_device_coherent_memory"],
        ImpliesSets = [
            "VK_AMD_device_coherent_memory+VK_KHR_get_physical_device_properties2",
            "VK_AMD_device_coherent_memory+VK_VERSION_1_1",
        ]
    )]
    public const int AmdDeviceCoherentMemorySpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME \"VK_AMD_device_coherent_memory\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_device_coherent_memory"],
        ImpliesSets = [
            "VK_AMD_device_coherent_memory+VK_KHR_get_physical_device_properties2",
            "VK_AMD_device_coherent_memory+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String AmdDeviceCoherentMemoryExtensionName =>
        "VK_AMD_device_coherent_memory"u8;

    [NativeTypeName("#define VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_image_atomic_int64"],
        ImpliesSets = [
            "VK_EXT_shader_image_atomic_int64+VK_KHR_get_physical_device_properties2",
            "VK_EXT_shader_image_atomic_int64+VK_VERSION_1_1",
        ]
    )]
    public const int ExtShaderImageAtomicInt64SpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME \"VK_EXT_shader_image_atomic_int64\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_image_atomic_int64"],
        ImpliesSets = [
            "VK_EXT_shader_image_atomic_int64+VK_KHR_get_physical_device_properties2",
            "VK_EXT_shader_image_atomic_int64+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtShaderImageAtomicInt64ExtensionName =>
        "VK_EXT_shader_image_atomic_int64"u8;

    [NativeTypeName("#define VK_EXT_MEMORY_BUDGET_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_memory_budget"],
        ImpliesSets = [
            "VK_EXT_memory_budget+VK_KHR_get_physical_device_properties2",
            "VK_EXT_memory_budget+VK_VERSION_1_1",
        ]
    )]
    public const int ExtMemoryBudgetSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_MEMORY_BUDGET_EXTENSION_NAME \"VK_EXT_memory_budget\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_memory_budget"],
        ImpliesSets = [
            "VK_EXT_memory_budget+VK_KHR_get_physical_device_properties2",
            "VK_EXT_memory_budget+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtMemoryBudgetExtensionName => "VK_EXT_memory_budget"u8;

    [NativeTypeName("#define VK_EXT_MEMORY_PRIORITY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_memory_priority"],
        ImpliesSets = [
            "VK_EXT_memory_priority+VK_KHR_get_physical_device_properties2",
            "VK_EXT_memory_priority+VK_VERSION_1_1",
        ]
    )]
    public const int ExtMemoryPrioritySpecVersion = 1;

    [NativeTypeName("#define VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME \"VK_EXT_memory_priority\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_memory_priority"],
        ImpliesSets = [
            "VK_EXT_memory_priority+VK_KHR_get_physical_device_properties2",
            "VK_EXT_memory_priority+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtMemoryPriorityExtensionName => "VK_EXT_memory_priority"u8;

    [NativeTypeName("#define VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_dedicated_allocation_image_aliasing"],
        ImpliesSets = [
            "VK_KHR_dedicated_allocation+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public const int NvDedicatedAllocationImageAliasingSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME \"VK_NV_dedicated_allocation_image_aliasing\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_dedicated_allocation_image_aliasing"],
        ImpliesSets = [
            "VK_KHR_dedicated_allocation+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvDedicatedAllocationImageAliasingExtensionName =>
        "VK_NV_dedicated_allocation_image_aliasing"u8;

    [NativeTypeName("#define VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_buffer_device_address"],
        ImpliesSets = [
            "VK_EXT_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_EXT_buffer_device_address+VK_VERSION_1_1",
        ]
    )]
    public const int ExtBufferDeviceAddressSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME \"VK_EXT_buffer_device_address\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_buffer_device_address"],
        ImpliesSets = [
            "VK_EXT_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_EXT_buffer_device_address+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtBufferDeviceAddressExtensionName =>
        "VK_EXT_buffer_device_address"u8;

    [NativeTypeName("#define VK_EXT_TOOLING_INFO_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_tooling_info"])]
    public const int ExtToolingInfoSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_TOOLING_INFO_EXTENSION_NAME \"VK_EXT_tooling_info\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_tooling_info"])]
    public static Utf8String ExtToolingInfoExtensionName => "VK_EXT_tooling_info"u8;

    [NativeTypeName("#define VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_separate_stencil_usage"])]
    public const int ExtSeparateStencilUsageSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME \"VK_EXT_separate_stencil_usage\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_separate_stencil_usage"])]
    public static Utf8String ExtSeparateStencilUsageExtensionName =>
        "VK_EXT_separate_stencil_usage"u8;

    [NativeTypeName("#define VK_EXT_VALIDATION_FEATURES_SPEC_VERSION 6")]
    [SupportedApiProfile("vulkan", ["VK_EXT_validation_features"])]
    public const int ExtValidationFeaturesSpecVersion = 6;

    [NativeTypeName(
        "#define VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME \"VK_EXT_validation_features\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_validation_features"])]
    public static Utf8String ExtValidationFeaturesExtensionName => "VK_EXT_validation_features"u8;

    [NativeTypeName("#define VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix"],
        ImpliesSets = [
            "VK_NV_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_NV_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    public const int NvCooperativeMatrixSpecVersion = 1;

    [NativeTypeName("#define VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME \"VK_NV_cooperative_matrix\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix"],
        ImpliesSets = [
            "VK_NV_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_NV_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvCooperativeMatrixExtensionName => "VK_NV_cooperative_matrix"u8;

    [NativeTypeName("#define VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_coverage_reduction_mode"],
        ImpliesSets = [
            "VK_NV_framebuffer_mixed_samples+VK_KHR_get_physical_device_properties2",
            "VK_NV_framebuffer_mixed_samples+VK_VERSION_1_1",
        ]
    )]
    public const int NvCoverageReductionModeSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME \"VK_NV_coverage_reduction_mode\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_coverage_reduction_mode"],
        ImpliesSets = [
            "VK_NV_framebuffer_mixed_samples+VK_KHR_get_physical_device_properties2",
            "VK_NV_framebuffer_mixed_samples+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvCoverageReductionModeExtensionName =>
        "VK_NV_coverage_reduction_mode"u8;

    [NativeTypeName("#define VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_shader_interlock"],
        ImpliesSets = [
            "VK_EXT_fragment_shader_interlock+VK_KHR_get_physical_device_properties2",
            "VK_EXT_fragment_shader_interlock+VK_VERSION_1_1",
        ]
    )]
    public const int ExtFragmentShaderInterlockSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME \"VK_EXT_fragment_shader_interlock\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_shader_interlock"],
        ImpliesSets = [
            "VK_EXT_fragment_shader_interlock+VK_KHR_get_physical_device_properties2",
            "VK_EXT_fragment_shader_interlock+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtFragmentShaderInterlockExtensionName =>
        "VK_EXT_fragment_shader_interlock"u8;

    [NativeTypeName("#define VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_ycbcr_image_arrays"],
        ImpliesSets = [
            "VK_EXT_ycbcr_image_arrays+VK_KHR_sampler_ycbcr_conversion",
            "VK_EXT_ycbcr_image_arrays+VK_VERSION_1_1",
        ]
    )]
    public const int ExtYcbcrImageArraysSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME \"VK_EXT_ycbcr_image_arrays\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_ycbcr_image_arrays"],
        ImpliesSets = [
            "VK_EXT_ycbcr_image_arrays+VK_KHR_sampler_ycbcr_conversion",
            "VK_EXT_ycbcr_image_arrays+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtYcbcrImageArraysExtensionName => "VK_EXT_ycbcr_image_arrays"u8;

    [NativeTypeName("#define VK_EXT_PROVOKING_VERTEX_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_provoking_vertex"],
        ImpliesSets = [
            "VK_EXT_provoking_vertex+VK_KHR_get_physical_device_properties2",
            "VK_EXT_provoking_vertex+VK_VERSION_1_1",
        ]
    )]
    public const int ExtProvokingVertexSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME \"VK_EXT_provoking_vertex\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_provoking_vertex"],
        ImpliesSets = [
            "VK_EXT_provoking_vertex+VK_KHR_get_physical_device_properties2",
            "VK_EXT_provoking_vertex+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtProvokingVertexExtensionName => "VK_EXT_provoking_vertex"u8;

    [NativeTypeName("#define VK_EXT_HEADLESS_SURFACE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_headless_surface"], ImpliesSets = ["VK_KHR_surface"])]
    public const int ExtHeadlessSurfaceSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME \"VK_EXT_headless_surface\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_headless_surface"], ImpliesSets = ["VK_KHR_surface"])]
    public static Utf8String ExtHeadlessSurfaceExtensionName => "VK_EXT_headless_surface"u8;

    [NativeTypeName("#define VK_EXT_LINE_RASTERIZATION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_EXT_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    public const int ExtLineRasterizationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME \"VK_EXT_line_rasterization\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_EXT_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtLineRasterizationExtensionName => "VK_EXT_line_rasterization"u8;

    [NativeTypeName("#define VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_atomic_float"],
        ImpliesSets = [
            "VK_EXT_shader_atomic_float+VK_KHR_get_physical_device_properties2",
            "VK_EXT_shader_atomic_float+VK_VERSION_1_1",
        ]
    )]
    public const int ExtShaderAtomicFloatSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME \"VK_EXT_shader_atomic_float\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_atomic_float"],
        ImpliesSets = [
            "VK_EXT_shader_atomic_float+VK_KHR_get_physical_device_properties2",
            "VK_EXT_shader_atomic_float+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtShaderAtomicFloatExtensionName => "VK_EXT_shader_atomic_float"u8;

    [NativeTypeName("#define VK_EXT_HOST_QUERY_RESET_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_query_reset"],
        ImpliesSets = [
            "VK_EXT_host_query_reset+VK_KHR_get_physical_device_properties2",
            "VK_EXT_host_query_reset+VK_VERSION_1_1",
        ]
    )]
    public const int ExtHostQueryResetSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME \"VK_EXT_host_query_reset\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_query_reset"],
        ImpliesSets = [
            "VK_EXT_host_query_reset+VK_KHR_get_physical_device_properties2",
            "VK_EXT_host_query_reset+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtHostQueryResetExtensionName => "VK_EXT_host_query_reset"u8;

    [NativeTypeName("#define VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_index_type_uint8"],
        ImpliesSets = [
            "VK_EXT_index_type_uint8+VK_KHR_get_physical_device_properties2",
            "VK_EXT_index_type_uint8+VK_VERSION_1_1",
        ]
    )]
    public const int ExtIndexTypeUint8SpecVersion = 1;

    [NativeTypeName("#define VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME \"VK_EXT_index_type_uint8\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_index_type_uint8"],
        ImpliesSets = [
            "VK_EXT_index_type_uint8+VK_KHR_get_physical_device_properties2",
            "VK_EXT_index_type_uint8+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtIndexTypeUint8ExtensionName => "VK_EXT_index_type_uint8"u8;

    [NativeTypeName("#define VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    public const int ExtExtendedDynamicStateSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME \"VK_EXT_extended_dynamic_state\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtExtendedDynamicStateExtensionName =>
        "VK_EXT_extended_dynamic_state"u8;

    [NativeTypeName("#define VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const int ExtHostImageCopySpecVersion = 1;

    [NativeTypeName("#define VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME \"VK_EXT_host_image_copy\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtHostImageCopyExtensionName => "VK_EXT_host_image_copy"u8;

    [NativeTypeName("#define VK_EXT_MAP_MEMORY_PLACED_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_map_memory_placed"],
        ImpliesSets = [
            "VK_EXT_map_memory_placed+VK_KHR_map_memory2",
            "VK_EXT_map_memory_placed+VK_VERSION_1_4",
        ]
    )]
    public const int ExtMapMemoryPlacedSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_MAP_MEMORY_PLACED_EXTENSION_NAME \"VK_EXT_map_memory_placed\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_map_memory_placed"],
        ImpliesSets = [
            "VK_EXT_map_memory_placed+VK_KHR_map_memory2",
            "VK_EXT_map_memory_placed+VK_VERSION_1_4",
        ]
    )]
    public static Utf8String ExtMapMemoryPlacedExtensionName => "VK_EXT_map_memory_placed"u8;

    [NativeTypeName("#define VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_atomic_float2"],
        ImpliesSets = ["VK_EXT_shader_atomic_float"]
    )]
    public const int ExtShaderAtomicFloat2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME \"VK_EXT_shader_atomic_float2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_atomic_float2"],
        ImpliesSets = ["VK_EXT_shader_atomic_float"]
    )]
    public static Utf8String ExtShaderAtomicFloat2ExtensionName => "VK_EXT_shader_atomic_float2"u8;

    [NativeTypeName("#define VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_surface_maintenance1"],
        ImpliesSets = ["VK_KHR_get_surface_capabilities2", "VK_KHR_surface"]
    )]
    public const int ExtSurfaceMaintenance1SpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME \"VK_EXT_surface_maintenance1\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_surface_maintenance1"],
        ImpliesSets = ["VK_KHR_get_surface_capabilities2", "VK_KHR_surface"]
    )]
    public static Utf8String ExtSurfaceMaintenance1ExtensionName => "VK_EXT_surface_maintenance1"u8;

    [NativeTypeName("#define VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_swapchain_maintenance1"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_VERSION_1_1",
        ]
    )]
    public const int ExtSwapchainMaintenance1SpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME \"VK_EXT_swapchain_maintenance1\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_swapchain_maintenance1"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtSwapchainMaintenance1ExtensionName =>
        "VK_EXT_swapchain_maintenance1"u8;

    [NativeTypeName("#define VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_demote_to_helper_invocation"],
        ImpliesSets = [
            "VK_EXT_shader_demote_to_helper_invocation+VK_KHR_get_physical_device_properties2",
            "VK_EXT_shader_demote_to_helper_invocation+VK_VERSION_1_1",
        ]
    )]
    public const int ExtShaderDemoteToHelperInvocationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME \"VK_EXT_shader_demote_to_helper_invocation\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_demote_to_helper_invocation"],
        ImpliesSets = [
            "VK_EXT_shader_demote_to_helper_invocation+VK_KHR_get_physical_device_properties2",
            "VK_EXT_shader_demote_to_helper_invocation+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtShaderDemoteToHelperInvocationExtensionName =>
        "VK_EXT_shader_demote_to_helper_invocation"u8;

    [NativeTypeName("#define VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    public const int NvDeviceGeneratedCommandsSpecVersion = 3;

    [NativeTypeName(
        "#define VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME \"VK_NV_device_generated_commands\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    public static Utf8String NvDeviceGeneratedCommandsExtensionName =>
        "VK_NV_device_generated_commands"u8;

    [NativeTypeName("#define VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_inherited_viewport_scissor"],
        ImpliesSets = [
            "VK_NV_inherited_viewport_scissor+VK_KHR_get_physical_device_properties2",
            "VK_NV_inherited_viewport_scissor+VK_VERSION_1_1",
        ]
    )]
    public const int NvInheritedViewportScissorSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME \"VK_NV_inherited_viewport_scissor\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_inherited_viewport_scissor"],
        ImpliesSets = [
            "VK_NV_inherited_viewport_scissor+VK_KHR_get_physical_device_properties2",
            "VK_NV_inherited_viewport_scissor+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvInheritedViewportScissorExtensionName =>
        "VK_NV_inherited_viewport_scissor"u8;

    [NativeTypeName("#define VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_texel_buffer_alignment"],
        ImpliesSets = [
            "VK_EXT_texel_buffer_alignment+VK_KHR_get_physical_device_properties2",
            "VK_EXT_texel_buffer_alignment+VK_VERSION_1_1",
        ]
    )]
    public const int ExtTexelBufferAlignmentSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME \"VK_EXT_texel_buffer_alignment\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_texel_buffer_alignment"],
        ImpliesSets = [
            "VK_EXT_texel_buffer_alignment+VK_KHR_get_physical_device_properties2",
            "VK_EXT_texel_buffer_alignment+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtTexelBufferAlignmentExtensionName =>
        "VK_EXT_texel_buffer_alignment"u8;

    [NativeTypeName("#define VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION 5")]
    [SupportedApiProfile("vulkan", ["VK_QCOM_render_pass_transform"])]
    public const int QcomRenderPassTransformSpecVersion = 5;

    [NativeTypeName(
        "#define VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME \"VK_QCOM_render_pass_transform\""
    )]
    [SupportedApiProfile("vulkan", ["VK_QCOM_render_pass_transform"])]
    public static Utf8String QcomRenderPassTransformExtensionName =>
        "VK_QCOM_render_pass_transform"u8;

    [NativeTypeName("#define VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_bias_control"],
        ImpliesSets = [
            "VK_EXT_depth_bias_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_bias_control+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDepthBiasControlSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME \"VK_EXT_depth_bias_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_bias_control"],
        ImpliesSets = [
            "VK_EXT_depth_bias_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_bias_control+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDepthBiasControlExtensionName => "VK_EXT_depth_bias_control"u8;

    [NativeTypeName("#define VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_memory_report"],
        ImpliesSets = [
            "VK_EXT_device_memory_report+VK_KHR_get_physical_device_properties2",
            "VK_EXT_device_memory_report+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDeviceMemoryReportSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME \"VK_EXT_device_memory_report\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_memory_report"],
        ImpliesSets = [
            "VK_EXT_device_memory_report+VK_KHR_get_physical_device_properties2",
            "VK_EXT_device_memory_report+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDeviceMemoryReportExtensionName => "VK_EXT_device_memory_report"u8;

    [NativeTypeName("#define VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_acquire_drm_display"],
        ImpliesSets = ["VK_EXT_direct_mode_display"]
    )]
    public const int ExtAcquireDrmDisplaySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME \"VK_EXT_acquire_drm_display\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_acquire_drm_display"],
        ImpliesSets = ["VK_EXT_direct_mode_display"]
    )]
    public static Utf8String ExtAcquireDrmDisplayExtensionName => "VK_EXT_acquire_drm_display"u8;

    [NativeTypeName("#define VK_EXT_ROBUSTNESS_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_robustness2"],
        ImpliesSets = [
            "VK_EXT_robustness2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_robustness2+VK_VERSION_1_1",
        ]
    )]
    public const int ExtRobustness2SpecVersion = 1;

    [NativeTypeName("#define VK_EXT_ROBUSTNESS_2_EXTENSION_NAME \"VK_EXT_robustness2\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_robustness2"],
        ImpliesSets = [
            "VK_EXT_robustness2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_robustness2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtRobustness2ExtensionName => "VK_EXT_robustness2"u8;

    [NativeTypeName("#define VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION 12")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_custom_border_color"],
        ImpliesSets = [
            "VK_EXT_custom_border_color+VK_KHR_get_physical_device_properties2",
            "VK_EXT_custom_border_color+VK_VERSION_1_1",
        ]
    )]
    public const int ExtCustomBorderColorSpecVersion = 12;

    [NativeTypeName(
        "#define VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME \"VK_EXT_custom_border_color\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_custom_border_color"],
        ImpliesSets = [
            "VK_EXT_custom_border_color+VK_KHR_get_physical_device_properties2",
            "VK_EXT_custom_border_color+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtCustomBorderColorExtensionName => "VK_EXT_custom_border_color"u8;

    [NativeTypeName("#define VK_GOOGLE_USER_TYPE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_GOOGLE_user_type"])]
    public const int GoogleUserTypeSpecVersion = 1;

    [NativeTypeName("#define VK_GOOGLE_USER_TYPE_EXTENSION_NAME \"VK_GOOGLE_user_type\"")]
    [SupportedApiProfile("vulkan", ["VK_GOOGLE_user_type"])]
    public static Utf8String GoogleUserTypeExtensionName => "VK_GOOGLE_user_type"u8;

    [NativeTypeName("#define VK_NV_PRESENT_BARRIER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_present_barrier"],
        ImpliesSets = [
            "VK_KHR_surface+VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_surface+VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    public const int NvPresentBarrierSpecVersion = 1;

    [NativeTypeName("#define VK_NV_PRESENT_BARRIER_EXTENSION_NAME \"VK_NV_present_barrier\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_present_barrier"],
        ImpliesSets = [
            "VK_KHR_surface+VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_surface+VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvPresentBarrierExtensionName => "VK_NV_present_barrier"u8;

    [NativeTypeName("#define VK_EXT_PRIVATE_DATA_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPrivateDataSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_PRIVATE_DATA_EXTENSION_NAME \"VK_EXT_private_data\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPrivateDataExtensionName => "VK_EXT_private_data"u8;

    [NativeTypeName("#define VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_creation_cache_control"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPipelineCreationCacheControlSpecVersion = 3;

    [NativeTypeName(
        "#define VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME \"VK_EXT_pipeline_creation_cache_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_creation_cache_control"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPipelineCreationCacheControlExtensionName =>
        "VK_EXT_pipeline_creation_cache_control"u8;

    [NativeTypeName("#define VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostics_config"],
        ImpliesSets = [
            "VK_NV_device_diagnostics_config+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostics_config+VK_VERSION_1_1",
        ]
    )]
    public const int NvDeviceDiagnosticsConfigSpecVersion = 2;

    [NativeTypeName(
        "#define VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME \"VK_NV_device_diagnostics_config\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostics_config"],
        ImpliesSets = [
            "VK_NV_device_diagnostics_config+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostics_config+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvDeviceDiagnosticsConfigExtensionName =>
        "VK_NV_device_diagnostics_config"u8;

    [NativeTypeName("#define VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_QCOM_render_pass_store_ops"])]
    public const int QcomRenderPassStoreOpsSpecVersion = 2;

    [NativeTypeName(
        "#define VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME \"VK_QCOM_render_pass_store_ops\""
    )]
    [SupportedApiProfile("vulkan", ["VK_QCOM_render_pass_store_ops"])]
    public static Utf8String QcomRenderPassStoreOpsExtensionName =>
        "VK_QCOM_render_pass_store_ops"u8;

    [NativeTypeName("#define VK_QCOM_TILE_SHADING_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    public const int QcomTileShadingSpecVersion = 1;

    [NativeTypeName("#define VK_QCOM_TILE_SHADING_EXTENSION_NAME \"VK_QCOM_tile_shading\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    public static Utf8String QcomTileShadingExtensionName => "VK_QCOM_tile_shading"u8;

    [NativeTypeName("#define VK_NV_LOW_LATENCY_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_low_latency"])]
    public const int NvLowLatencySpecVersion = 1;

    [NativeTypeName("#define VK_NV_LOW_LATENCY_EXTENSION_NAME \"VK_NV_low_latency\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_low_latency"])]
    public static Utf8String NvLowLatencyExtensionName => "VK_NV_low_latency"u8;

    [NativeTypeName("#define VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public const int ExtDescriptorBufferSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME \"VK_EXT_descriptor_buffer\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtDescriptorBufferExtensionName => "VK_EXT_descriptor_buffer"u8;

    [NativeTypeName("#define VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_graphics_pipeline_library"],
        ImpliesSets = [
            "VK_KHR_pipeline_library+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_library+VK_VERSION_1_1",
        ]
    )]
    public const int ExtGraphicsPipelineLibrarySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME \"VK_EXT_graphics_pipeline_library\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_graphics_pipeline_library"],
        ImpliesSets = [
            "VK_KHR_pipeline_library+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_library+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtGraphicsPipelineLibraryExtensionName =>
        "VK_EXT_graphics_pipeline_library"u8;

    [NativeTypeName("#define VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_shader_early_and_late_fragment_tests"],
        ImpliesSets = [
            "VK_AMD_shader_early_and_late_fragment_tests+VK_KHR_get_physical_device_properties2",
            "VK_AMD_shader_early_and_late_fragment_tests+VK_VERSION_1_1",
        ]
    )]
    public const int AmdShaderEarlyAndLateFragmentTestsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME \"VK_AMD_shader_early_and_late_fragment_tests\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_shader_early_and_late_fragment_tests"],
        ImpliesSets = [
            "VK_AMD_shader_early_and_late_fragment_tests+VK_KHR_get_physical_device_properties2",
            "VK_AMD_shader_early_and_late_fragment_tests+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String AmdShaderEarlyAndLateFragmentTestsExtensionName =>
        "VK_AMD_shader_early_and_late_fragment_tests"u8;

    [NativeTypeName("#define VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_fragment_shading_rate_enums"],
        ImpliesSets = ["VK_KHR_fragment_shading_rate"]
    )]
    public const int NvFragmentShadingRateEnumsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME \"VK_NV_fragment_shading_rate_enums\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_fragment_shading_rate_enums"],
        ImpliesSets = ["VK_KHR_fragment_shading_rate"]
    )]
    public static Utf8String NvFragmentShadingRateEnumsExtensionName =>
        "VK_NV_fragment_shading_rate_enums"u8;

    [NativeTypeName("#define VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing_motion_blur"],
        ImpliesSets = ["VK_KHR_ray_tracing_pipeline"]
    )]
    public const int NvRayTracingMotionBlurSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME \"VK_NV_ray_tracing_motion_blur\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing_motion_blur"],
        ImpliesSets = ["VK_KHR_ray_tracing_pipeline"]
    )]
    public static Utf8String NvRayTracingMotionBlurExtensionName =>
        "VK_NV_ray_tracing_motion_blur"u8;

    [NativeTypeName("#define VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_ycbcr_2plane_444_formats"],
        ImpliesSets = [
            "VK_EXT_ycbcr_2plane_444_formats+VK_KHR_sampler_ycbcr_conversion",
            "VK_EXT_ycbcr_2plane_444_formats+VK_VERSION_1_1",
        ]
    )]
    public const int ExtYcbcr2Plane444FormatsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME \"VK_EXT_ycbcr_2plane_444_formats\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_ycbcr_2plane_444_formats"],
        ImpliesSets = [
            "VK_EXT_ycbcr_2plane_444_formats+VK_KHR_sampler_ycbcr_conversion",
            "VK_EXT_ycbcr_2plane_444_formats+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtYcbcr2Plane444FormatsExtensionName =>
        "VK_EXT_ycbcr_2plane_444_formats"u8;

    [NativeTypeName("#define VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map2"],
        ImpliesSets = ["VK_EXT_fragment_density_map"]
    )]
    public const int ExtFragmentDensityMap2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME \"VK_EXT_fragment_density_map2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map2"],
        ImpliesSets = ["VK_EXT_fragment_density_map"]
    )]
    public static Utf8String ExtFragmentDensityMap2ExtensionName =>
        "VK_EXT_fragment_density_map2"u8;

    [NativeTypeName("#define VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_rotated_copy_commands"],
        ImpliesSets = [
            "VK_QCOM_rotated_copy_commands+VK_KHR_copy_commands2",
            "VK_QCOM_rotated_copy_commands+VK_VERSION_1_3",
        ]
    )]
    public const int QcomRotatedCopyCommandsSpecVersion = 2;

    [NativeTypeName(
        "#define VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME \"VK_QCOM_rotated_copy_commands\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_rotated_copy_commands"],
        ImpliesSets = [
            "VK_QCOM_rotated_copy_commands+VK_KHR_copy_commands2",
            "VK_QCOM_rotated_copy_commands+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String QcomRotatedCopyCommandsExtensionName =>
        "VK_QCOM_rotated_copy_commands"u8;

    [NativeTypeName("#define VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_robustness"],
        ImpliesSets = [
            "VK_EXT_image_robustness+VK_KHR_get_physical_device_properties2",
            "VK_EXT_image_robustness+VK_VERSION_1_1",
        ]
    )]
    public const int ExtImageRobustnessSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME \"VK_EXT_image_robustness\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_robustness"],
        ImpliesSets = [
            "VK_EXT_image_robustness+VK_KHR_get_physical_device_properties2",
            "VK_EXT_image_robustness+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtImageRobustnessExtensionName => "VK_EXT_image_robustness"u8;

    [NativeTypeName("#define VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_compression_control"],
        ImpliesSets = [
            "VK_EXT_image_compression_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_image_compression_control+VK_VERSION_1_1",
        ]
    )]
    public const int ExtImageCompressionControlSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME \"VK_EXT_image_compression_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_compression_control"],
        ImpliesSets = [
            "VK_EXT_image_compression_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_image_compression_control+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtImageCompressionControlExtensionName =>
        "VK_EXT_image_compression_control"u8;

    [NativeTypeName("#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_attachment_feedback_loop_layout"],
        ImpliesSets = [
            "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
        ]
    )]
    public const int ExtAttachmentFeedbackLoopLayoutSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME \"VK_EXT_attachment_feedback_loop_layout\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_attachment_feedback_loop_layout"],
        ImpliesSets = [
            "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtAttachmentFeedbackLoopLayoutExtensionName =>
        "VK_EXT_attachment_feedback_loop_layout"u8;

    [NativeTypeName("#define VK_EXT_4444_FORMATS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_4444_formats"],
        ImpliesSets = [
            "VK_EXT_4444_formats+VK_KHR_get_physical_device_properties2",
            "VK_EXT_4444_formats+VK_VERSION_1_1",
        ]
    )]
    public const int Ext4444FormatsSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_4444_FORMATS_EXTENSION_NAME \"VK_EXT_4444_formats\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_4444_formats"],
        ImpliesSets = [
            "VK_EXT_4444_formats+VK_KHR_get_physical_device_properties2",
            "VK_EXT_4444_formats+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String Ext4444FormatsExtensionName => "VK_EXT_4444_formats"u8;

    [NativeTypeName("#define VK_EXT_DEVICE_FAULT_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_fault"],
        ImpliesSets = [
            "VK_EXT_device_fault+VK_KHR_get_physical_device_properties2",
            "VK_EXT_device_fault+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDeviceFaultSpecVersion = 2;

    [NativeTypeName("#define VK_EXT_DEVICE_FAULT_EXTENSION_NAME \"VK_EXT_device_fault\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_fault"],
        ImpliesSets = [
            "VK_EXT_device_fault+VK_KHR_get_physical_device_properties2",
            "VK_EXT_device_fault+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDeviceFaultExtensionName => "VK_EXT_device_fault"u8;

    [NativeTypeName("#define VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_rasterization_order_attachment_access"],
        ImpliesSets = [
            "VK_ARM_rasterization_order_attachment_access+VK_KHR_get_physical_device_properties2",
            "VK_ARM_rasterization_order_attachment_access+VK_VERSION_1_1",
        ]
    )]
    public const int ArmRasterizationOrderAttachmentAccessSpecVersion = 1;

    [NativeTypeName(
        "#define VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME \"VK_ARM_rasterization_order_attachment_access\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_rasterization_order_attachment_access"],
        ImpliesSets = [
            "VK_ARM_rasterization_order_attachment_access+VK_KHR_get_physical_device_properties2",
            "VK_ARM_rasterization_order_attachment_access+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ArmRasterizationOrderAttachmentAccessExtensionName =>
        "VK_ARM_rasterization_order_attachment_access"u8;

    [NativeTypeName("#define VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_rgba10x6_formats"],
        ImpliesSets = [
            "VK_EXT_rgba10x6_formats+VK_KHR_sampler_ycbcr_conversion",
            "VK_EXT_rgba10x6_formats+VK_VERSION_1_1",
        ]
    )]
    public const int ExtRgba10X6FormatsSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME \"VK_EXT_rgba10x6_formats\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_rgba10x6_formats"],
        ImpliesSets = [
            "VK_EXT_rgba10x6_formats+VK_KHR_sampler_ycbcr_conversion",
            "VK_EXT_rgba10x6_formats+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtRgba10X6FormatsExtensionName => "VK_EXT_rgba10x6_formats"u8;

    [NativeTypeName("#define VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_mutable_descriptor_type"],
        ImpliesSets = ["VK_KHR_maintenance3"]
    )]
    public const int ValveMutableDescriptorTypeSpecVersion = 1;

    [NativeTypeName(
        "#define VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME \"VK_VALVE_mutable_descriptor_type\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_mutable_descriptor_type"],
        ImpliesSets = ["VK_KHR_maintenance3"]
    )]
    public static Utf8String ValveMutableDescriptorTypeExtensionName =>
        "VK_VALVE_mutable_descriptor_type"u8;

    [NativeTypeName("#define VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_input_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_vertex_input_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_input_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    public const int ExtVertexInputDynamicStateSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME \"VK_EXT_vertex_input_dynamic_state\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_input_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_vertex_input_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_input_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtVertexInputDynamicStateExtensionName =>
        "VK_EXT_vertex_input_dynamic_state"u8;

    [NativeTypeName("#define VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_physical_device_drm"],
        ImpliesSets = [
            "VK_EXT_physical_device_drm+VK_KHR_get_physical_device_properties2",
            "VK_EXT_physical_device_drm+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPhysicalDeviceDrmSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME \"VK_EXT_physical_device_drm\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_physical_device_drm"],
        ImpliesSets = [
            "VK_EXT_physical_device_drm+VK_KHR_get_physical_device_properties2",
            "VK_EXT_physical_device_drm+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPhysicalDeviceDrmExtensionName => "VK_EXT_physical_device_drm"u8;

    [NativeTypeName("#define VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_address_binding_report"],
        ImpliesSets = [
            "VK_EXT_debug_utils+VK_KHR_get_physical_device_properties2",
            "VK_EXT_debug_utils+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDeviceAddressBindingReportSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME \"VK_EXT_device_address_binding_report\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_address_binding_report"],
        ImpliesSets = [
            "VK_EXT_debug_utils+VK_KHR_get_physical_device_properties2",
            "VK_EXT_debug_utils+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDeviceAddressBindingReportExtensionName =>
        "VK_EXT_device_address_binding_report"u8;

    [NativeTypeName("#define VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_control"],
        ImpliesSets = [
            "VK_EXT_depth_clip_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clip_control+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDepthClipControlSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME \"VK_EXT_depth_clip_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_control"],
        ImpliesSets = [
            "VK_EXT_depth_clip_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clip_control+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDepthClipControlExtensionName => "VK_EXT_depth_clip_control"u8;

    [NativeTypeName("#define VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_primitive_topology_list_restart"],
        ImpliesSets = [
            "VK_EXT_primitive_topology_list_restart+VK_KHR_get_physical_device_properties2",
            "VK_EXT_primitive_topology_list_restart+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPrimitiveTopologyListRestartSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME \"VK_EXT_primitive_topology_list_restart\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_primitive_topology_list_restart"],
        ImpliesSets = [
            "VK_EXT_primitive_topology_list_restart+VK_KHR_get_physical_device_properties2",
            "VK_EXT_primitive_topology_list_restart+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPrimitiveTopologyListRestartExtensionName =>
        "VK_EXT_primitive_topology_list_restart"u8;

    [NativeTypeName("#define VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_present_mode_fifo_latest_ready"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    public const int ExtPresentModeFifoLatestReadySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_EXTENSION_NAME \"VK_EXT_present_mode_fifo_latest_ready\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_present_mode_fifo_latest_ready"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    public static Utf8String ExtPresentModeFifoLatestReadyExtensionName =>
        "VK_EXT_present_mode_fifo_latest_ready"u8;

    [NativeTypeName("#define VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public const int HuaweiSubpassShadingSpecVersion = 3;

    [NativeTypeName(
        "#define VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME \"VK_HUAWEI_subpass_shading\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String HuaweiSubpassShadingExtensionName => "VK_HUAWEI_subpass_shading"u8;

    [NativeTypeName("#define VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_invocation_mask"],
        ImpliesSets = [
            "VK_KHR_ray_tracing_pipeline+VK_KHR_synchronization2",
            "VK_KHR_ray_tracing_pipeline+VK_VERSION_1_3",
        ]
    )]
    public const int HuaweiInvocationMaskSpecVersion = 1;

    [NativeTypeName(
        "#define VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME \"VK_HUAWEI_invocation_mask\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_invocation_mask"],
        ImpliesSets = [
            "VK_KHR_ray_tracing_pipeline+VK_KHR_synchronization2",
            "VK_KHR_ray_tracing_pipeline+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String HuaweiInvocationMaskExtensionName => "VK_HUAWEI_invocation_mask"u8;

    [NativeTypeName("#define VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_external_memory_rdma"],
        ImpliesSets = [
            "VK_NV_external_memory_rdma+VK_KHR_external_memory",
            "VK_NV_external_memory_rdma+VK_VERSION_1_1",
        ]
    )]
    public const int NvExternalMemoryRdmaSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME \"VK_NV_external_memory_rdma\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_external_memory_rdma"],
        ImpliesSets = [
            "VK_NV_external_memory_rdma+VK_KHR_external_memory",
            "VK_NV_external_memory_rdma+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvExternalMemoryRdmaExtensionName => "VK_NV_external_memory_rdma"u8;

    [NativeTypeName("#define VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_properties"],
        ImpliesSets = [
            "VK_EXT_pipeline_properties+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_properties+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPipelinePropertiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME \"VK_EXT_pipeline_properties\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_properties"],
        ImpliesSets = [
            "VK_EXT_pipeline_properties+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_properties+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPipelinePropertiesExtensionName => "VK_EXT_pipeline_properties"u8;

    [NativeTypeName("#define VK_EXT_FRAME_BOUNDARY_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_frame_boundary"])]
    public const int ExtFrameBoundarySpecVersion = 1;

    [NativeTypeName("#define VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME \"VK_EXT_frame_boundary\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_frame_boundary"])]
    public static Utf8String ExtFrameBoundaryExtensionName => "VK_EXT_frame_boundary"u8;

    [NativeTypeName("#define VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multisampled_render_to_single_sampled"],
        ImpliesSets = ["VK_KHR_create_renderpass2+VK_KHR_depth_stencil_resolve", "VK_VERSION_1_2"]
    )]
    public const int ExtMultisampledRenderToSingleSampledSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME \"VK_EXT_multisampled_render_to_single_sampled\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multisampled_render_to_single_sampled"],
        ImpliesSets = ["VK_KHR_create_renderpass2+VK_KHR_depth_stencil_resolve", "VK_VERSION_1_2"]
    )]
    public static Utf8String ExtMultisampledRenderToSingleSampledExtensionName =>
        "VK_EXT_multisampled_render_to_single_sampled"u8;

    [NativeTypeName("#define VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    public const int ExtExtendedDynamicState2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME \"VK_EXT_extended_dynamic_state2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtExtendedDynamicState2ExtensionName =>
        "VK_EXT_extended_dynamic_state2"u8;

    [NativeTypeName("#define VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_color_write_enable"],
        ImpliesSets = [
            "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_color_write_enable+VK_VERSION_1_1",
        ]
    )]
    public const int ExtColorWriteEnableSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME \"VK_EXT_color_write_enable\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_color_write_enable"],
        ImpliesSets = [
            "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_color_write_enable+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtColorWriteEnableExtensionName => "VK_EXT_color_write_enable"u8;

    [NativeTypeName("#define VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_primitives_generated_query"],
        ImpliesSets = ["VK_EXT_transform_feedback"]
    )]
    public const int ExtPrimitivesGeneratedQuerySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME \"VK_EXT_primitives_generated_query\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_primitives_generated_query"],
        ImpliesSets = ["VK_EXT_transform_feedback"]
    )]
    public static Utf8String ExtPrimitivesGeneratedQueryExtensionName =>
        "VK_EXT_primitives_generated_query"u8;

    [NativeTypeName("#define VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_global_priority_query"],
        ImpliesSets = [
            "VK_EXT_global_priority+VK_KHR_get_physical_device_properties2",
            "VK_EXT_global_priority+VK_VERSION_1_1",
        ]
    )]
    public const int ExtGlobalPriorityQuerySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME \"VK_EXT_global_priority_query\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_global_priority_query"],
        ImpliesSets = [
            "VK_EXT_global_priority+VK_KHR_get_physical_device_properties2",
            "VK_EXT_global_priority+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtGlobalPriorityQueryExtensionName =>
        "VK_EXT_global_priority_query"u8;

    [NativeTypeName("#define VK_MAX_GLOBAL_PRIORITY_SIZE_EXT VK_MAX_GLOBAL_PRIORITY_SIZE")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_global_priority_query"],
        ImpliesSets = [
            "VK_EXT_global_priority+VK_KHR_get_physical_device_properties2",
            "VK_EXT_global_priority+VK_VERSION_1_1",
        ]
    )]
    public const uint MaxGlobalPrioritySizeEXT = 16U;

    [NativeTypeName("#define VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_view_min_lod"],
        ImpliesSets = [
            "VK_EXT_image_view_min_lod+VK_KHR_get_physical_device_properties2",
            "VK_EXT_image_view_min_lod+VK_VERSION_1_1",
        ]
    )]
    public const int ExtImageViewMinLodSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME \"VK_EXT_image_view_min_lod\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_view_min_lod"],
        ImpliesSets = [
            "VK_EXT_image_view_min_lod+VK_KHR_get_physical_device_properties2",
            "VK_EXT_image_view_min_lod+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtImageViewMinLodExtensionName => "VK_EXT_image_view_min_lod"u8;

    [NativeTypeName("#define VK_EXT_MULTI_DRAW_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    public const int ExtMultiDrawSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_MULTI_DRAW_EXTENSION_NAME \"VK_EXT_multi_draw\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtMultiDrawExtensionName => "VK_EXT_multi_draw"u8;

    [NativeTypeName("#define VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_2d_view_of_3d"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public const int ExtImage2DViewOf3DSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME \"VK_EXT_image_2d_view_of_3d\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_2d_view_of_3d"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtImage2DViewOf3DExtensionName => "VK_EXT_image_2d_view_of_3d"u8;

    [NativeTypeName("#define VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_tile_image"], ImpliesSets = ["VK_VERSION_1_3"])]
    public const int ExtShaderTileImageSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME \"VK_EXT_shader_tile_image\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_tile_image"], ImpliesSets = ["VK_VERSION_1_3"])]
    public static Utf8String ExtShaderTileImageExtensionName => "VK_EXT_shader_tile_image"u8;

    [NativeTypeName("#define VK_EXT_OPACITY_MICROMAP_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    public const int ExtOpacityMicromapSpecVersion = 2;

    [NativeTypeName("#define VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME \"VK_EXT_opacity_micromap\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtOpacityMicromapExtensionName => "VK_EXT_opacity_micromap"u8;

    [NativeTypeName("#define VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_load_store_op_none"])]
    public const int ExtLoadStoreOpNoneSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME \"VK_EXT_load_store_op_none\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_load_store_op_none"])]
    public static Utf8String ExtLoadStoreOpNoneExtensionName => "VK_EXT_load_store_op_none"u8;

    [NativeTypeName("#define VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_cluster_culling_shader"],
        ImpliesSets = [
            "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
            "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
        ]
    )]
    public const int HuaweiClusterCullingShaderSpecVersion = 3;

    [NativeTypeName(
        "#define VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME \"VK_HUAWEI_cluster_culling_shader\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_cluster_culling_shader"],
        ImpliesSets = [
            "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
            "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String HuaweiClusterCullingShaderExtensionName =>
        "VK_HUAWEI_cluster_culling_shader"u8;

    [NativeTypeName("#define VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_border_color_swizzle"],
        ImpliesSets = ["VK_EXT_custom_border_color"]
    )]
    public const int ExtBorderColorSwizzleSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME \"VK_EXT_border_color_swizzle\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_border_color_swizzle"],
        ImpliesSets = ["VK_EXT_custom_border_color"]
    )]
    public static Utf8String ExtBorderColorSwizzleExtensionName => "VK_EXT_border_color_swizzle"u8;

    [NativeTypeName("#define VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pageable_device_local_memory"],
        ImpliesSets = ["VK_EXT_memory_priority"]
    )]
    public const int ExtPageableDeviceLocalMemorySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME \"VK_EXT_pageable_device_local_memory\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pageable_device_local_memory"],
        ImpliesSets = ["VK_EXT_memory_priority"]
    )]
    public static Utf8String ExtPageableDeviceLocalMemoryExtensionName =>
        "VK_EXT_pageable_device_local_memory"u8;

    [NativeTypeName("#define VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_shader_core_properties"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public const int ArmShaderCorePropertiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME \"VK_ARM_shader_core_properties\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_shader_core_properties"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public static Utf8String ArmShaderCorePropertiesExtensionName =>
        "VK_ARM_shader_core_properties"u8;

    [NativeTypeName("#define VK_ARM_SCHEDULING_CONTROLS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_scheduling_controls"],
        ImpliesSets = ["VK_ARM_shader_core_builtins"]
    )]
    public const int ArmSchedulingControlsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME \"VK_ARM_scheduling_controls\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_scheduling_controls"],
        ImpliesSets = ["VK_ARM_shader_core_builtins"]
    )]
    public static Utf8String ArmSchedulingControlsExtensionName => "VK_ARM_scheduling_controls"u8;

    [NativeTypeName("#define VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_sliced_view_of_3d"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public const int ExtImageSlicedViewOf3DSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME \"VK_EXT_image_sliced_view_of_3d\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_sliced_view_of_3d"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtImageSlicedViewOf3DExtensionName =>
        "VK_EXT_image_sliced_view_of_3d"u8;

    [NativeTypeName("#define VK_REMAINING_3D_SLICES_EXT (~0U)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_sliced_view_of_3d"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public const uint Remaining3DSlicesEXT = (~0U);

    [NativeTypeName("#define VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    public const int ValveDescriptorSetHostMappingSpecVersion = 1;

    [NativeTypeName(
        "#define VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME \"VK_VALVE_descriptor_set_host_mapping\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ValveDescriptorSetHostMappingExtensionName =>
        "VK_VALVE_descriptor_set_host_mapping"u8;

    [NativeTypeName("#define VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clamp_zero_one"],
        ImpliesSets = [
            "VK_EXT_depth_clamp_zero_one+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clamp_zero_one+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDepthClampZeroOneSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME \"VK_EXT_depth_clamp_zero_one\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clamp_zero_one"],
        ImpliesSets = [
            "VK_EXT_depth_clamp_zero_one+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clamp_zero_one+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDepthClampZeroOneExtensionName => "VK_EXT_depth_clamp_zero_one"u8;

    [NativeTypeName("#define VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_non_seamless_cube_map"],
        ImpliesSets = [
            "VK_EXT_non_seamless_cube_map+VK_KHR_get_physical_device_properties2",
            "VK_EXT_non_seamless_cube_map+VK_VERSION_1_1",
        ]
    )]
    public const int ExtNonSeamlessCubeMapSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME \"VK_EXT_non_seamless_cube_map\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_non_seamless_cube_map"],
        ImpliesSets = [
            "VK_EXT_non_seamless_cube_map+VK_KHR_get_physical_device_properties2",
            "VK_EXT_non_seamless_cube_map+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtNonSeamlessCubeMapExtensionName => "VK_EXT_non_seamless_cube_map"u8;

    [NativeTypeName("#define VK_ARM_RENDER_PASS_STRIPED_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_render_pass_striped"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const int ArmRenderPassStripedSpecVersion = 1;

    [NativeTypeName(
        "#define VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME \"VK_ARM_render_pass_striped\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_render_pass_striped"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ArmRenderPassStripedExtensionName => "VK_ARM_render_pass_striped"u8;

    [NativeTypeName("#define VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_fragment_density_map_offset"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1",
        ]
    )]
    public const int QcomFragmentDensityMapOffsetSpecVersion = 3;

    [NativeTypeName(
        "#define VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME \"VK_QCOM_fragment_density_map_offset\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_fragment_density_map_offset"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String QcomFragmentDensityMapOffsetExtensionName =>
        "VK_QCOM_fragment_density_map_offset"u8;

    [NativeTypeName("#define VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const int NvCopyMemoryIndirectSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME \"VK_NV_copy_memory_indirect\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public static Utf8String NvCopyMemoryIndirectExtensionName => "VK_NV_copy_memory_indirect"u8;

    [NativeTypeName("#define VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const int NvMemoryDecompressionSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME \"VK_NV_memory_decompression\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public static Utf8String NvMemoryDecompressionExtensionName => "VK_NV_memory_decompression"u8;

    [NativeTypeName("#define VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    public const int NvDeviceGeneratedCommandsComputeSpecVersion = 2;

    [NativeTypeName(
        "#define VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME \"VK_NV_device_generated_commands_compute\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    public static Utf8String NvDeviceGeneratedCommandsComputeExtensionName =>
        "VK_NV_device_generated_commands_compute"u8;

    [NativeTypeName("#define VK_NV_RAY_TRACING_LINEAR_SWEPT_SPHERES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing_linear_swept_spheres"],
        ImpliesSets = ["VK_KHR_ray_tracing_pipeline"]
    )]
    public const int NvRayTracingLinearSweptSpheresSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_RAY_TRACING_LINEAR_SWEPT_SPHERES_EXTENSION_NAME \"VK_NV_ray_tracing_linear_swept_spheres\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing_linear_swept_spheres"],
        ImpliesSets = ["VK_KHR_ray_tracing_pipeline"]
    )]
    public static Utf8String NvRayTracingLinearSweptSpheresExtensionName =>
        "VK_NV_ray_tracing_linear_swept_spheres"u8;

    [NativeTypeName("#define VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_linear_color_attachment"],
        ImpliesSets = [
            "VK_NV_linear_color_attachment+VK_KHR_get_physical_device_properties2",
            "VK_NV_linear_color_attachment+VK_VERSION_1_1",
        ]
    )]
    public const int NvLinearColorAttachmentSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME \"VK_NV_linear_color_attachment\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_linear_color_attachment"],
        ImpliesSets = [
            "VK_NV_linear_color_attachment+VK_KHR_get_physical_device_properties2",
            "VK_NV_linear_color_attachment+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvLinearColorAttachmentExtensionName =>
        "VK_NV_linear_color_attachment"u8;

    [NativeTypeName("#define VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_surfaceless_query"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    public const int GoogleSurfacelessQuerySpecVersion = 2;

    [NativeTypeName(
        "#define VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME \"VK_GOOGLE_surfaceless_query\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_surfaceless_query"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    public static Utf8String GoogleSurfacelessQueryExtensionName => "VK_GOOGLE_surfaceless_query"u8;

    [NativeTypeName("#define VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_compression_control_swapchain"],
        ImpliesSets = ["VK_EXT_image_compression_control"]
    )]
    public const int ExtImageCompressionControlSwapchainSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME \"VK_EXT_image_compression_control_swapchain\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_compression_control_swapchain"],
        ImpliesSets = ["VK_EXT_image_compression_control"]
    )]
    public static Utf8String ExtImageCompressionControlSwapchainExtensionName =>
        "VK_EXT_image_compression_control_swapchain"u8;

    [NativeTypeName("#define VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_image_processing"],
        ImpliesSets = [
            "VK_QCOM_image_processing+VK_KHR_format_feature_flags2",
            "VK_QCOM_image_processing+VK_VERSION_1_3",
        ]
    )]
    public const int QcomImageProcessingSpecVersion = 1;

    [NativeTypeName("#define VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME \"VK_QCOM_image_processing\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_image_processing"],
        ImpliesSets = [
            "VK_QCOM_image_processing+VK_KHR_format_feature_flags2",
            "VK_QCOM_image_processing+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String QcomImageProcessingExtensionName => "VK_QCOM_image_processing"u8;

    [NativeTypeName("#define VK_EXT_NESTED_COMMAND_BUFFER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_nested_command_buffer"],
        ImpliesSets = [
            "VK_EXT_nested_command_buffer+VK_KHR_get_physical_device_properties2",
            "VK_EXT_nested_command_buffer+VK_VERSION_1_1",
        ]
    )]
    public const int ExtNestedCommandBufferSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME \"VK_EXT_nested_command_buffer\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_nested_command_buffer"],
        ImpliesSets = [
            "VK_EXT_nested_command_buffer+VK_KHR_get_physical_device_properties2",
            "VK_EXT_nested_command_buffer+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtNestedCommandBufferExtensionName =>
        "VK_EXT_nested_command_buffer"u8;

    [NativeTypeName("#define VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_acquire_unmodified"],
        ImpliesSets = [
            "VK_EXT_external_memory_acquire_unmodified+VK_KHR_external_memory",
            "VK_EXT_external_memory_acquire_unmodified+VK_VERSION_1_1",
        ]
    )]
    public const int ExtExternalMemoryAcquireUnmodifiedSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME \"VK_EXT_external_memory_acquire_unmodified\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_acquire_unmodified"],
        ImpliesSets = [
            "VK_EXT_external_memory_acquire_unmodified+VK_KHR_external_memory",
            "VK_EXT_external_memory_acquire_unmodified+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtExternalMemoryAcquireUnmodifiedExtensionName =>
        "VK_EXT_external_memory_acquire_unmodified"u8;

    [NativeTypeName("#define VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    public const int ExtExtendedDynamicState3SpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME \"VK_EXT_extended_dynamic_state3\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtExtendedDynamicState3ExtensionName =>
        "VK_EXT_extended_dynamic_state3"u8;

    [NativeTypeName("#define VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_subpass_merge_feedback"],
        ImpliesSets = [
            "VK_EXT_subpass_merge_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_subpass_merge_feedback+VK_VERSION_1_1",
        ]
    )]
    public const int ExtSubpassMergeFeedbackSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME \"VK_EXT_subpass_merge_feedback\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_subpass_merge_feedback"],
        ImpliesSets = [
            "VK_EXT_subpass_merge_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_subpass_merge_feedback+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtSubpassMergeFeedbackExtensionName =>
        "VK_EXT_subpass_merge_feedback"u8;

    [NativeTypeName("#define VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_LUNARG_direct_driver_loading"])]
    public const int LunargDirectDriverLoadingSpecVersion = 1;

    [NativeTypeName(
        "#define VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME \"VK_LUNARG_direct_driver_loading\""
    )]
    [SupportedApiProfile("vulkan", ["VK_LUNARG_direct_driver_loading"])]
    public static Utf8String LunargDirectDriverLoadingExtensionName =>
        "VK_LUNARG_direct_driver_loading"u8;

    [NativeTypeName("#define VK_ARM_tensors 1")]
    [SupportedApiProfile("vulkan")]
    public const int ARMTensors = 1;

    [NativeTypeName("#define VK_ARM_TENSORS_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int ArmTensorsSpecVersion = 1;

    [NativeTypeName("#define VK_ARM_TENSORS_EXTENSION_NAME \"VK_ARM_tensors\"")]
    [SupportedApiProfile("vulkan")]
    public static Utf8String ArmTensorsExtensionName => "VK_ARM_tensors"u8;

    [NativeTypeName("#define VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT 32U")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const uint MaxShaderModuleIdentifierSizeEXT = 32U;

    [NativeTypeName("#define VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const int ExtShaderModuleIdentifierSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME \"VK_EXT_shader_module_identifier\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtShaderModuleIdentifierExtensionName =>
        "VK_EXT_shader_module_identifier"u8;

    [NativeTypeName("#define VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_rasterization_order_attachment_access"],
        ImpliesSets = [
            "VK_EXT_rasterization_order_attachment_access+VK_KHR_get_physical_device_properties2",
            "VK_EXT_rasterization_order_attachment_access+VK_VERSION_1_1",
        ]
    )]
    public const int ExtRasterizationOrderAttachmentAccessSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME \"VK_EXT_rasterization_order_attachment_access\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_rasterization_order_attachment_access"],
        ImpliesSets = [
            "VK_EXT_rasterization_order_attachment_access+VK_KHR_get_physical_device_properties2",
            "VK_EXT_rasterization_order_attachment_access+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtRasterizationOrderAttachmentAccessExtensionName =>
        "VK_EXT_rasterization_order_attachment_access"u8;

    [NativeTypeName("#define VK_NV_OPTICAL_FLOW_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const int NvOpticalFlowSpecVersion = 1;

    [NativeTypeName("#define VK_NV_OPTICAL_FLOW_EXTENSION_NAME \"VK_NV_optical_flow\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String NvOpticalFlowExtensionName => "VK_NV_optical_flow"u8;

    [NativeTypeName("#define VK_EXT_LEGACY_DITHERING_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_legacy_dithering"],
        ImpliesSets = [
            "VK_EXT_legacy_dithering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_legacy_dithering+VK_VERSION_1_1",
        ]
    )]
    public const int ExtLegacyDitheringSpecVersion = 2;

    [NativeTypeName("#define VK_EXT_LEGACY_DITHERING_EXTENSION_NAME \"VK_EXT_legacy_dithering\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_legacy_dithering"],
        ImpliesSets = [
            "VK_EXT_legacy_dithering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_legacy_dithering+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtLegacyDitheringExtensionName => "VK_EXT_legacy_dithering"u8;

    [NativeTypeName("#define VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_protected_access"],
        ImpliesSets = [
            "VK_EXT_pipeline_protected_access+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_protected_access+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPipelineProtectedAccessSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME \"VK_EXT_pipeline_protected_access\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_protected_access"],
        ImpliesSets = [
            "VK_EXT_pipeline_protected_access+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_protected_access+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPipelineProtectedAccessExtensionName =>
        "VK_EXT_pipeline_protected_access"u8;

    [NativeTypeName("#define VK_AMD_ANTI_LAG_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_anti_lag"])]
    public const int AmdAntiLagSpecVersion = 1;

    [NativeTypeName("#define VK_AMD_ANTI_LAG_EXTENSION_NAME \"VK_AMD_anti_lag\"")]
    [SupportedApiProfile("vulkan", ["VK_AMD_anti_lag"])]
    public static Utf8String AmdAntiLagExtensionName => "VK_AMD_anti_lag"u8;

    [NativeTypeName("#define VK_EXT_SHADER_OBJECT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const int ExtShaderObjectSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_SHADER_OBJECT_EXTENSION_NAME \"VK_EXT_shader_object\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtShaderObjectExtensionName => "VK_EXT_shader_object"u8;

    [NativeTypeName("#define VK_QCOM_TILE_PROPERTIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    public const int QcomTilePropertiesSpecVersion = 1;

    [NativeTypeName("#define VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME \"VK_QCOM_tile_properties\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String QcomTilePropertiesExtensionName => "VK_QCOM_tile_properties"u8;

    [NativeTypeName("#define VK_SEC_AMIGO_PROFILING_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_SEC_amigo_profiling"],
        ImpliesSets = [
            "VK_SEC_amigo_profiling+VK_KHR_get_physical_device_properties2",
            "VK_SEC_amigo_profiling+VK_VERSION_1_1",
        ]
    )]
    public const int SecAmigoProfilingSpecVersion = 1;

    [NativeTypeName("#define VK_SEC_AMIGO_PROFILING_EXTENSION_NAME \"VK_SEC_amigo_profiling\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_SEC_amigo_profiling"],
        ImpliesSets = [
            "VK_SEC_amigo_profiling+VK_KHR_get_physical_device_properties2",
            "VK_SEC_amigo_profiling+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String SecAmigoProfilingExtensionName => "VK_SEC_amigo_profiling"u8;

    [NativeTypeName("#define VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_multiview_per_view_viewports"],
        ImpliesSets = [
            "VK_QCOM_multiview_per_view_viewports+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_multiview_per_view_viewports+VK_VERSION_1_1",
        ]
    )]
    public const int QcomMultiviewPerViewViewportsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME \"VK_QCOM_multiview_per_view_viewports\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_multiview_per_view_viewports"],
        ImpliesSets = [
            "VK_QCOM_multiview_per_view_viewports+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_multiview_per_view_viewports+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String QcomMultiviewPerViewViewportsExtensionName =>
        "VK_QCOM_multiview_per_view_viewports"u8;

    [NativeTypeName("#define VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing_invocation_reorder"],
        ImpliesSets = ["VK_KHR_ray_tracing_pipeline"]
    )]
    public const int NvRayTracingInvocationReorderSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME \"VK_NV_ray_tracing_invocation_reorder\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing_invocation_reorder"],
        ImpliesSets = ["VK_KHR_ray_tracing_pipeline"]
    )]
    public static Utf8String NvRayTracingInvocationReorderExtensionName =>
        "VK_NV_ray_tracing_invocation_reorder"u8;

    [NativeTypeName("#define VK_NV_COOPERATIVE_VECTOR_SPEC_VERSION 4")]
    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    public const int NvCooperativeVectorSpecVersion = 4;

    [NativeTypeName("#define VK_NV_COOPERATIVE_VECTOR_EXTENSION_NAME \"VK_NV_cooperative_vector\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    public static Utf8String NvCooperativeVectorExtensionName => "VK_NV_cooperative_vector"u8;

    [NativeTypeName("#define VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_extended_sparse_address_space"])]
    public const int NvExtendedSparseAddressSpaceSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME \"VK_NV_extended_sparse_address_space\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_extended_sparse_address_space"])]
    public static Utf8String NvExtendedSparseAddressSpaceExtensionName =>
        "VK_NV_extended_sparse_address_space"u8;

    [NativeTypeName("#define VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mutable_descriptor_type"],
        ImpliesSets = [
            "VK_EXT_mutable_descriptor_type+VK_KHR_maintenance3",
            "VK_EXT_mutable_descriptor_type+VK_VERSION_1_1",
        ]
    )]
    public const int ExtMutableDescriptorTypeSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME \"VK_EXT_mutable_descriptor_type\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mutable_descriptor_type"],
        ImpliesSets = [
            "VK_EXT_mutable_descriptor_type+VK_KHR_maintenance3",
            "VK_EXT_mutable_descriptor_type+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtMutableDescriptorTypeExtensionName =>
        "VK_EXT_mutable_descriptor_type"u8;

    [NativeTypeName("#define VK_EXT_LEGACY_VERTEX_ATTRIBUTES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_legacy_vertex_attributes"],
        ImpliesSets = ["VK_EXT_vertex_input_dynamic_state"]
    )]
    public const int ExtLegacyVertexAttributesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_LEGACY_VERTEX_ATTRIBUTES_EXTENSION_NAME \"VK_EXT_legacy_vertex_attributes\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_legacy_vertex_attributes"],
        ImpliesSets = ["VK_EXT_vertex_input_dynamic_state"]
    )]
    public static Utf8String ExtLegacyVertexAttributesExtensionName =>
        "VK_EXT_legacy_vertex_attributes"u8;

    [NativeTypeName("#define VK_EXT_LAYER_SETTINGS_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_EXT_layer_settings"])]
    public const int ExtLayerSettingsSpecVersion = 2;

    [NativeTypeName("#define VK_EXT_LAYER_SETTINGS_EXTENSION_NAME \"VK_EXT_layer_settings\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_layer_settings"])]
    public static Utf8String ExtLayerSettingsExtensionName => "VK_EXT_layer_settings"u8;

    [NativeTypeName("#define VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_shader_core_builtins"],
        ImpliesSets = [
            "VK_ARM_shader_core_builtins+VK_KHR_get_physical_device_properties2",
            "VK_ARM_shader_core_builtins+VK_VERSION_1_1",
        ]
    )]
    public const int ArmShaderCoreBuiltinsSpecVersion = 2;

    [NativeTypeName(
        "#define VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME \"VK_ARM_shader_core_builtins\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_shader_core_builtins"],
        ImpliesSets = [
            "VK_ARM_shader_core_builtins+VK_KHR_get_physical_device_properties2",
            "VK_ARM_shader_core_builtins+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ArmShaderCoreBuiltinsExtensionName => "VK_ARM_shader_core_builtins"u8;

    [NativeTypeName("#define VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_library_group_handles"],
        ImpliesSets = ["VK_KHR_pipeline_library", "VK_KHR_ray_tracing_pipeline"]
    )]
    public const int ExtPipelineLibraryGroupHandlesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME \"VK_EXT_pipeline_library_group_handles\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_library_group_handles"],
        ImpliesSets = ["VK_KHR_pipeline_library", "VK_KHR_ray_tracing_pipeline"]
    )]
    public static Utf8String ExtPipelineLibraryGroupHandlesExtensionName =>
        "VK_EXT_pipeline_library_group_handles"u8;

    [NativeTypeName("#define VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_dynamic_rendering_unused_attachments"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const int ExtDynamicRenderingUnusedAttachmentsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME \"VK_EXT_dynamic_rendering_unused_attachments\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_dynamic_rendering_unused_attachments"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtDynamicRenderingUnusedAttachmentsExtensionName =>
        "VK_EXT_dynamic_rendering_unused_attachments"u8;

    [NativeTypeName("#define VK_NV_LOW_LATENCY_2_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    public const int NvLowLatency2SpecVersion = 2;

    [NativeTypeName("#define VK_NV_LOW_LATENCY_2_EXTENSION_NAME \"VK_NV_low_latency2\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String NvLowLatency2ExtensionName => "VK_NV_low_latency2"u8;

    [NativeTypeName("#define VK_ARM_data_graph 1")]
    [SupportedApiProfile("vulkan")]
    public const int ARMDataGraph = 1;

    [NativeTypeName("#define VK_MAX_PHYSICAL_DEVICE_DATA_GRAPH_OPERATION_SET_NAME_SIZE_ARM 128U")]
    [SupportedApiProfile("vulkan")]
    public const uint MaxPhysicalDeviceDataGraphOperationSetNameSizeARM = 128U;

    [NativeTypeName("#define VK_ARM_DATA_GRAPH_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int ArmDataGraphSpecVersion = 1;

    [NativeTypeName("#define VK_ARM_DATA_GRAPH_EXTENSION_NAME \"VK_ARM_data_graph\"")]
    [SupportedApiProfile("vulkan")]
    public static Utf8String ArmDataGraphExtensionName => "VK_ARM_data_graph"u8;

    [NativeTypeName("#define VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_QCOM_multiview_per_view_render_areas"])]
    public const int QcomMultiviewPerViewRenderAreasSpecVersion = 1;

    [NativeTypeName(
        "#define VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME \"VK_QCOM_multiview_per_view_render_areas\""
    )]
    [SupportedApiProfile("vulkan", ["VK_QCOM_multiview_per_view_render_areas"])]
    public static Utf8String QcomMultiviewPerViewRenderAreasExtensionName =>
        "VK_QCOM_multiview_per_view_render_areas"u8;

    [NativeTypeName("#define VK_NV_PER_STAGE_DESCRIPTOR_SET_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_per_stage_descriptor_set"],
        ImpliesSets = [
            "VK_NV_per_stage_descriptor_set+VK_KHR_maintenance6",
            "VK_NV_per_stage_descriptor_set+VK_VERSION_1_4",
        ]
    )]
    public const int NvPerStageDescriptorSetSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_PER_STAGE_DESCRIPTOR_SET_EXTENSION_NAME \"VK_NV_per_stage_descriptor_set\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_per_stage_descriptor_set"],
        ImpliesSets = [
            "VK_NV_per_stage_descriptor_set+VK_KHR_maintenance6",
            "VK_NV_per_stage_descriptor_set+VK_VERSION_1_4",
        ]
    )]
    public static Utf8String NvPerStageDescriptorSetExtensionName =>
        "VK_NV_per_stage_descriptor_set"u8;

    [NativeTypeName("#define VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_image_processing2"],
        ImpliesSets = ["VK_QCOM_image_processing"]
    )]
    public const int QcomImageProcessing2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME \"VK_QCOM_image_processing2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_image_processing2"],
        ImpliesSets = ["VK_QCOM_image_processing"]
    )]
    public static Utf8String QcomImageProcessing2ExtensionName => "VK_QCOM_image_processing2"u8;

    [NativeTypeName("#define VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_filter_cubic_weights"],
        ImpliesSets = ["VK_EXT_filter_cubic"]
    )]
    public const int QcomFilterCubicWeightsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME \"VK_QCOM_filter_cubic_weights\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_filter_cubic_weights"],
        ImpliesSets = ["VK_EXT_filter_cubic"]
    )]
    public static Utf8String QcomFilterCubicWeightsExtensionName =>
        "VK_QCOM_filter_cubic_weights"u8;

    [NativeTypeName("#define VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_QCOM_ycbcr_degamma"])]
    public const int QcomYcbcrDegammaSpecVersion = 1;

    [NativeTypeName("#define VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME \"VK_QCOM_ycbcr_degamma\"")]
    [SupportedApiProfile("vulkan", ["VK_QCOM_ycbcr_degamma"])]
    public static Utf8String QcomYcbcrDegammaExtensionName => "VK_QCOM_ycbcr_degamma"u8;

    [NativeTypeName("#define VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_filter_cubic_clamp"],
        ImpliesSets = [
            "VK_EXT_filter_cubic+VK_EXT_sampler_filter_minmax",
            "VK_EXT_filter_cubic+VK_VERSION_1_2",
        ]
    )]
    public const int QcomFilterCubicClampSpecVersion = 1;

    [NativeTypeName(
        "#define VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME \"VK_QCOM_filter_cubic_clamp\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_filter_cubic_clamp"],
        ImpliesSets = [
            "VK_EXT_filter_cubic+VK_EXT_sampler_filter_minmax",
            "VK_EXT_filter_cubic+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String QcomFilterCubicClampExtensionName => "VK_QCOM_filter_cubic_clamp"u8;

    [NativeTypeName("#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_attachment_feedback_loop_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
        ]
    )]
    public const int ExtAttachmentFeedbackLoopDynamicStateSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME \"VK_EXT_attachment_feedback_loop_dynamic_state\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_attachment_feedback_loop_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtAttachmentFeedbackLoopDynamicStateExtensionName =>
        "VK_EXT_attachment_feedback_loop_dynamic_state"u8;

    [NativeTypeName("#define VK_MSFT_LAYERED_DRIVER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_MSFT_layered_driver"],
        ImpliesSets = [
            "VK_MSFT_layered_driver+VK_KHR_get_physical_device_properties2",
            "VK_MSFT_layered_driver+VK_VERSION_1_1",
        ]
    )]
    public const int MsftLayeredDriverSpecVersion = 1;

    [NativeTypeName("#define VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME \"VK_MSFT_layered_driver\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_MSFT_layered_driver"],
        ImpliesSets = [
            "VK_MSFT_layered_driver+VK_KHR_get_physical_device_properties2",
            "VK_MSFT_layered_driver+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String MsftLayeredDriverExtensionName => "VK_MSFT_layered_driver"u8;

    [NativeTypeName("#define VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_descriptor_pool_overallocation"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public const int NvDescriptorPoolOverallocationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME \"VK_NV_descriptor_pool_overallocation\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_descriptor_pool_overallocation"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public static Utf8String NvDescriptorPoolOverallocationExtensionName =>
        "VK_NV_descriptor_pool_overallocation"u8;

    [NativeTypeName("#define VK_QCOM_TILE_MEMORY_HEAP_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_memory_heap"],
        ImpliesSets = [
            "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public const int QcomTileMemoryHeapSpecVersion = 1;

    [NativeTypeName("#define VK_QCOM_TILE_MEMORY_HEAP_EXTENSION_NAME \"VK_QCOM_tile_memory_heap\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_memory_heap"],
        ImpliesSets = [
            "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String QcomTileMemoryHeapExtensionName => "VK_QCOM_tile_memory_heap"u8;

    [NativeTypeName("#define VK_NV_DISPLAY_STEREO_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_display_stereo"],
        ImpliesSets = ["VK_KHR_display", "VK_KHR_get_display_properties2"]
    )]
    public const int NvDisplayStereoSpecVersion = 1;

    [NativeTypeName("#define VK_NV_DISPLAY_STEREO_EXTENSION_NAME \"VK_NV_display_stereo\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_display_stereo"],
        ImpliesSets = ["VK_KHR_display", "VK_KHR_get_display_properties2"]
    )]
    public static Utf8String NvDisplayStereoExtensionName => "VK_NV_display_stereo"u8;

    [NativeTypeName("#define VK_NV_RAW_ACCESS_CHAINS_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_raw_access_chains"])]
    public const int NvRawAccessChainsSpecVersion = 1;

    [NativeTypeName("#define VK_NV_RAW_ACCESS_CHAINS_EXTENSION_NAME \"VK_NV_raw_access_chains\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_raw_access_chains"])]
    public static Utf8String NvRawAccessChainsExtensionName => "VK_NV_raw_access_chains"u8;

    [NativeTypeName("#define VK_NV_EXTERNAL_COMPUTE_QUEUE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    public const int NvExternalComputeQueueSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_EXTERNAL_COMPUTE_QUEUE_EXTENSION_NAME \"VK_NV_external_compute_queue\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    public static Utf8String NvExternalComputeQueueExtensionName =>
        "VK_NV_external_compute_queue"u8;

    [NativeTypeName("#define VK_NV_COMMAND_BUFFER_INHERITANCE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_command_buffer_inheritance"])]
    public const int NvCommandBufferInheritanceSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_COMMAND_BUFFER_INHERITANCE_EXTENSION_NAME \"VK_NV_command_buffer_inheritance\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_command_buffer_inheritance"])]
    public static Utf8String NvCommandBufferInheritanceExtensionName =>
        "VK_NV_command_buffer_inheritance"u8;

    [NativeTypeName("#define VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_shader_atomic_float16_vector"])]
    public const int NvShaderAtomicFloat16VectorSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_EXTENSION_NAME \"VK_NV_shader_atomic_float16_vector\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_shader_atomic_float16_vector"])]
    public static Utf8String NvShaderAtomicFloat16VectorExtensionName =>
        "VK_NV_shader_atomic_float16_vector"u8;

    [NativeTypeName("#define VK_EXT_SHADER_REPLICATED_COMPOSITES_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_replicated_composites"])]
    public const int ExtShaderReplicatedCompositesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_REPLICATED_COMPOSITES_EXTENSION_NAME \"VK_EXT_shader_replicated_composites\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_replicated_composites"])]
    public static Utf8String ExtShaderReplicatedCompositesExtensionName =>
        "VK_EXT_shader_replicated_composites"u8;

    [NativeTypeName("#define VK_EXT_shader_float8 1")]
    [SupportedApiProfile("vulkan")]
    public const int EXTShaderFloat8 = 1;

    [NativeTypeName("#define VK_EXT_SHADER_FLOAT8_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int ExtShaderFloat8SpecVersion = 1;

    [NativeTypeName("#define VK_EXT_SHADER_FLOAT8_EXTENSION_NAME \"VK_EXT_shader_float8\"")]
    [SupportedApiProfile("vulkan")]
    public static Utf8String ExtShaderFloat8ExtensionName => "VK_EXT_shader_float8"u8;

    [NativeTypeName("#define VK_NV_RAY_TRACING_VALIDATION_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_ray_tracing_validation"])]
    public const int NvRayTracingValidationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_RAY_TRACING_VALIDATION_EXTENSION_NAME \"VK_NV_ray_tracing_validation\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_ray_tracing_validation"])]
    public static Utf8String NvRayTracingValidationExtensionName =>
        "VK_NV_ray_tracing_validation"u8;

    [NativeTypeName("#define VK_NV_CLUSTER_ACCELERATION_STRUCTURE_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public const int NvClusterAccelerationStructureSpecVersion = 3;

    [NativeTypeName(
        "#define VK_NV_CLUSTER_ACCELERATION_STRUCTURE_EXTENSION_NAME \"VK_NV_cluster_acceleration_structure\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public static Utf8String NvClusterAccelerationStructureExtensionName =>
        "VK_NV_cluster_acceleration_structure"u8;

    [NativeTypeName("#define VK_NV_PARTITIONED_ACCELERATION_STRUCTURE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public const int NvPartitionedAccelerationStructureSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_PARTITIONED_ACCELERATION_STRUCTURE_EXTENSION_NAME \"VK_NV_partitioned_acceleration_structure\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public static Utf8String NvPartitionedAccelerationStructureExtensionName =>
        "VK_NV_partitioned_acceleration_structure"u8;

    [NativeTypeName(
        "#define VK_PARTITIONED_ACCELERATION_STRUCTURE_PARTITION_INDEX_GLOBAL_NV (~0U)"
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public const uint PartitionedAccelerationStructurePartitionIndexGlobalNV = (~0U);

    [NativeTypeName("#define VK_EXT_DEVICE_GENERATED_COMMANDS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public const int ExtDeviceGeneratedCommandsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME \"VK_EXT_device_generated_commands\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtDeviceGeneratedCommandsExtensionName =>
        "VK_EXT_device_generated_commands"u8;

    [NativeTypeName("#define VK_MESA_IMAGE_ALIGNMENT_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_MESA_image_alignment_control"],
        ImpliesSets = [
            "VK_MESA_image_alignment_control+VK_KHR_get_physical_device_properties2",
            "VK_MESA_image_alignment_control+VK_VERSION_1_1",
        ]
    )]
    public const int MesaImageAlignmentControlSpecVersion = 1;

    [NativeTypeName(
        "#define VK_MESA_IMAGE_ALIGNMENT_CONTROL_EXTENSION_NAME \"VK_MESA_image_alignment_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_MESA_image_alignment_control"],
        ImpliesSets = [
            "VK_MESA_image_alignment_control+VK_KHR_get_physical_device_properties2",
            "VK_MESA_image_alignment_control+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String MesaImageAlignmentControlExtensionName =>
        "VK_MESA_image_alignment_control"u8;

    [NativeTypeName("#define VK_EXT_DEPTH_CLAMP_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clamp_control"],
        ImpliesSets = [
            "VK_EXT_depth_clamp_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clamp_control+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDepthClampControlSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DEPTH_CLAMP_CONTROL_EXTENSION_NAME \"VK_EXT_depth_clamp_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clamp_control"],
        ImpliesSets = [
            "VK_EXT_depth_clamp_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clamp_control+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDepthClampControlExtensionName => "VK_EXT_depth_clamp_control"u8;

    [NativeTypeName("#define VK_HUAWEI_HDR_VIVID_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_hdr_vivid"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_EXT_hdr_metadata+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_EXT_hdr_metadata+VK_VERSION_1_1",
        ]
    )]
    public const int HuaweiHdrVividSpecVersion = 1;

    [NativeTypeName("#define VK_HUAWEI_HDR_VIVID_EXTENSION_NAME \"VK_HUAWEI_hdr_vivid\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_hdr_vivid"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_EXT_hdr_metadata+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_EXT_hdr_metadata+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String HuaweiHdrVividExtensionName => "VK_HUAWEI_hdr_vivid"u8;

    [NativeTypeName("#define VK_NV_COOPERATIVE_MATRIX_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix2"],
        ImpliesSets = ["VK_KHR_cooperative_matrix"]
    )]
    public const int NvCooperativeMatrix2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_COOPERATIVE_MATRIX_2_EXTENSION_NAME \"VK_NV_cooperative_matrix2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix2"],
        ImpliesSets = ["VK_KHR_cooperative_matrix"]
    )]
    public static Utf8String NvCooperativeMatrix2ExtensionName => "VK_NV_cooperative_matrix2"u8;

    [NativeTypeName("#define VK_ARM_PIPELINE_OPACITY_MICROMAP_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_pipeline_opacity_micromap"],
        ImpliesSets = ["VK_EXT_opacity_micromap"]
    )]
    public const int ArmPipelineOpacityMicromapSpecVersion = 1;

    [NativeTypeName(
        "#define VK_ARM_PIPELINE_OPACITY_MICROMAP_EXTENSION_NAME \"VK_ARM_pipeline_opacity_micromap\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_pipeline_opacity_micromap"],
        ImpliesSets = ["VK_EXT_opacity_micromap"]
    )]
    public static Utf8String ArmPipelineOpacityMicromapExtensionName =>
        "VK_ARM_pipeline_opacity_micromap"u8;

    [NativeTypeName("#define VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_attribute_robustness"],
        ImpliesSets = [
            "VK_EXT_vertex_attribute_robustness+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_attribute_robustness+VK_VERSION_1_1",
        ]
    )]
    public const int ExtVertexAttributeRobustnessSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_EXTENSION_NAME \"VK_EXT_vertex_attribute_robustness\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_attribute_robustness"],
        ImpliesSets = [
            "VK_EXT_vertex_attribute_robustness+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_attribute_robustness+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtVertexAttributeRobustnessExtensionName =>
        "VK_EXT_vertex_attribute_robustness"u8;

    [NativeTypeName("#define VK_ARM_format_pack 1")]
    [SupportedApiProfile("vulkan")]
    public const int ARMFormatPack = 1;

    [NativeTypeName("#define VK_ARM_FORMAT_PACK_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int ArmFormatPackSpecVersion = 1;

    [NativeTypeName("#define VK_ARM_FORMAT_PACK_EXTENSION_NAME \"VK_ARM_format_pack\"")]
    [SupportedApiProfile("vulkan")]
    public static Utf8String ArmFormatPackExtensionName => "VK_ARM_format_pack"u8;

    [NativeTypeName("#define VK_VALVE_fragment_density_map_layered 1")]
    [SupportedApiProfile("vulkan")]
    public const int ValveFragmentDensityMapLayered = 1;

    [NativeTypeName("#define VK_VALVE_FRAGMENT_DENSITY_MAP_LAYERED_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int ValveFragmentDensityMapLayeredSpecVersion = 1;

    [NativeTypeName(
        "#define VK_VALVE_FRAGMENT_DENSITY_MAP_LAYERED_EXTENSION_NAME \"VK_VALVE_fragment_density_map_layered\""
    )]
    [SupportedApiProfile("vulkan")]
    public static Utf8String ValveFragmentDensityMapLayeredExtensionName =>
        "VK_VALVE_fragment_density_map_layered"u8;

    [NativeTypeName("#define VK_NV_PRESENT_METERING_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_present_metering"])]
    public const int NvPresentMeteringSpecVersion = 1;

    [NativeTypeName("#define VK_NV_PRESENT_METERING_EXTENSION_NAME \"VK_NV_present_metering\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_present_metering"])]
    public static Utf8String NvPresentMeteringExtensionName => "VK_NV_present_metering"u8;

    [NativeTypeName("#define VK_EXT_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map_offset"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_VERSION_1_3",
        ]
    )]
    public const int ExtFragmentDensityMapOffsetSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME \"VK_EXT_fragment_density_map_offset\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map_offset"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtFragmentDensityMapOffsetExtensionName =>
        "VK_EXT_fragment_density_map_offset"u8;

    [NativeTypeName("#define VK_EXT_ZERO_INITIALIZE_DEVICE_MEMORY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_zero_initialize_device_memory"],
        ImpliesSets = [
            "VK_EXT_zero_initialize_device_memory+VK_KHR_get_physical_device_properties2",
            "VK_EXT_zero_initialize_device_memory+VK_VERSION_1_1",
        ]
    )]
    public const int ExtZeroInitializeDeviceMemorySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_ZERO_INITIALIZE_DEVICE_MEMORY_EXTENSION_NAME \"VK_EXT_zero_initialize_device_memory\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_zero_initialize_device_memory"],
        ImpliesSets = [
            "VK_EXT_zero_initialize_device_memory+VK_KHR_get_physical_device_properties2",
            "VK_EXT_zero_initialize_device_memory+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtZeroInitializeDeviceMemoryExtensionName =>
        "VK_EXT_zero_initialize_device_memory"u8;

    [NativeTypeName("#define VK_SEC_pipeline_cache_incremental_mode 1")]
    [SupportedApiProfile("vulkan")]
    public const int SECPipelineCacheIncrementalMode = 1;

    [NativeTypeName("#define VK_SEC_PIPELINE_CACHE_INCREMENTAL_MODE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan")]
    public const int SecPipelineCacheIncrementalModeSpecVersion = 1;

    [NativeTypeName(
        "#define VK_SEC_PIPELINE_CACHE_INCREMENTAL_MODE_EXTENSION_NAME \"VK_SEC_pipeline_cache_incremental_mode\""
    )]
    [SupportedApiProfile("vulkan")]
    public static Utf8String SecPipelineCacheIncrementalModeExtensionName =>
        "VK_SEC_pipeline_cache_incremental_mode"u8;

    [NativeTypeName("#define VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION 13")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    public const int KhrAccelerationStructureSpecVersion = 13;

    [NativeTypeName(
        "#define VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME \"VK_KHR_acceleration_structure\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrAccelerationStructureExtensionName =>
        "VK_KHR_acceleration_structure"u8;

    [NativeTypeName("#define VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    public const int KhrRayTracingPipelineSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME \"VK_KHR_ray_tracing_pipeline\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrRayTracingPipelineExtensionName => "VK_KHR_ray_tracing_pipeline"u8;

    [NativeTypeName("#define VK_KHR_RAY_QUERY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_query"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    public const int KhrRayQuerySpecVersion = 1;

    [NativeTypeName("#define VK_KHR_RAY_QUERY_EXTENSION_NAME \"VK_KHR_ray_query\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_query"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrRayQueryExtensionName => "VK_KHR_ray_query"u8;

    [NativeTypeName("#define VK_EXT_MESH_SHADER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    public const int ExtMeshShaderSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_MESH_SHADER_EXTENSION_NAME \"VK_EXT_mesh_shader\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    public static Utf8String ExtMeshShaderExtensionName => "VK_EXT_mesh_shader"u8;

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_acquire_drm_display"],
        ImpliesSets = ["VK_EXT_direct_mode_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireDrmDisplayEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AcquireDrmDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("int32_t")] int drmFd,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, int, DisplayKHRHandle, Result>)(
                _slots[0] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[0] = nativeContext.LoadFunction("vkAcquireDrmDisplayEXT", "vulkan")
            )
        )(physicalDevice, drmFd, display);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_acquire_drm_display"],
        ImpliesSets = ["VK_EXT_direct_mode_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireDrmDisplayEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireDrmDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("int32_t")] int drmFd,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display
    ) => ThisThread.AcquireDrmDisplayEXT(physicalDevice, drmFd, display);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AcquireNextImage2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAcquireNextImageInfoKHR *")] AcquireNextImageInfoKHR* pAcquireInfo,
        [NativeTypeName("uint32_t *")] uint* pImageIndex
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, AcquireNextImageInfoKHR*, uint*, Result>)(
                _slots[1] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[1] = nativeContext.LoadFunction("vkAcquireNextImage2KHR", "vulkan")
            )
        )(device, pAcquireInfo, pImageIndex);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireNextImage2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAcquireNextImageInfoKHR *")] AcquireNextImageInfoKHR* pAcquireInfo,
        [NativeTypeName("uint32_t *")] uint* pImageIndex
    ) => ThisThread.AcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AcquireNextImage2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAcquireNextImageInfoKHR *")]
            Ref<AcquireNextImageInfoKHR> pAcquireInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pImageIndex
    )
    {
        fixed (uint* __dsl_pImageIndex = pImageIndex)
        fixed (AcquireNextImageInfoKHR* __dsl_pAcquireInfo = pAcquireInfo)
        {
            return (Result)
                ((IVk)this).AcquireNextImage2KHR(device, __dsl_pAcquireInfo, __dsl_pImageIndex);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireNextImage2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAcquireNextImageInfoKHR *")]
            Ref<AcquireNextImageInfoKHR> pAcquireInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pImageIndex
    ) => ThisThread.AcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImageKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AcquireNextImageKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("uint64_t")] ulong timeout,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("VkFence")] FenceHandle fence,
        [NativeTypeName("uint32_t *")] uint* pImageIndex
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                SwapchainKHRHandle,
                ulong,
                SemaphoreHandle,
                FenceHandle,
                uint*,
                Result>)(
                _slots[2] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[2] = nativeContext.LoadFunction("vkAcquireNextImageKHR", "vulkan")
            )
        )(device, swapchain, timeout, semaphore, fence, pImageIndex);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImageKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireNextImageKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("uint64_t")] ulong timeout,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("VkFence")] FenceHandle fence,
        [NativeTypeName("uint32_t *")] uint* pImageIndex
    ) => ThisThread.AcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImageKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AcquireNextImageKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("uint64_t")] ulong timeout,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("VkFence")] FenceHandle fence,
        [NativeTypeName("uint32_t *")] Ref<uint> pImageIndex
    )
    {
        fixed (uint* __dsl_pImageIndex = pImageIndex)
        {
            return (Result)
                ((IVk)this).AcquireNextImageKHR(
                    device,
                    swapchain,
                    timeout,
                    semaphore,
                    fence,
                    __dsl_pImageIndex
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImageKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireNextImageKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("uint64_t")] ulong timeout,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("VkFence")] FenceHandle fence,
        [NativeTypeName("uint32_t *")] Ref<uint> pImageIndex
    ) => ThisThread.AcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkAcquirePerformanceConfigurationINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AcquirePerformanceConfigurationIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPerformanceConfigurationAcquireInfoINTEL *")]
            PerformanceConfigurationAcquireInfoIntel* pAcquireInfo,
        [NativeTypeName("VkPerformanceConfigurationINTEL *")]
            PerformanceConfigurationIntelHandle* pConfiguration
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PerformanceConfigurationAcquireInfoIntel*,
                PerformanceConfigurationIntelHandle*,
                Result>)(
                _slots[3] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[3] = nativeContext.LoadFunction(
                        "vkAcquirePerformanceConfigurationINTEL",
                        "vulkan"
                    )
            )
        )(device, pAcquireInfo, pConfiguration);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkAcquirePerformanceConfigurationINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquirePerformanceConfigurationIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPerformanceConfigurationAcquireInfoINTEL *")]
            PerformanceConfigurationAcquireInfoIntel* pAcquireInfo,
        [NativeTypeName("VkPerformanceConfigurationINTEL *")]
            PerformanceConfigurationIntelHandle* pConfiguration
    ) => ThisThread.AcquirePerformanceConfigurationIntel(device, pAcquireInfo, pConfiguration);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAcquirePerformanceConfigurationINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AcquirePerformanceConfigurationIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPerformanceConfigurationAcquireInfoINTEL *")]
            Ref<PerformanceConfigurationAcquireInfoIntel> pAcquireInfo,
        [NativeTypeName("VkPerformanceConfigurationINTEL *")]
            Ref<PerformanceConfigurationIntelHandle> pConfiguration
    )
    {
        fixed (PerformanceConfigurationIntelHandle* __dsl_pConfiguration = pConfiguration)
        fixed (PerformanceConfigurationAcquireInfoIntel* __dsl_pAcquireInfo = pAcquireInfo)
        {
            return (Result)
                ((IVk)this).AcquirePerformanceConfigurationIntel(
                    device,
                    __dsl_pAcquireInfo,
                    __dsl_pConfiguration
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAcquirePerformanceConfigurationINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquirePerformanceConfigurationIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPerformanceConfigurationAcquireInfoINTEL *")]
            Ref<PerformanceConfigurationAcquireInfoIntel> pAcquireInfo,
        [NativeTypeName("VkPerformanceConfigurationINTEL *")]
            Ref<PerformanceConfigurationIntelHandle> pConfiguration
    ) => ThisThread.AcquirePerformanceConfigurationIntel(device, pAcquireInfo, pConfiguration);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireProfilingLockKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AcquireProfilingLockKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAcquireProfilingLockInfoKHR *")] AcquireProfilingLockInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, AcquireProfilingLockInfoKHR*, Result>)(
                _slots[4] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[4] = nativeContext.LoadFunction("vkAcquireProfilingLockKHR", "vulkan")
            )
        )(device, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireProfilingLockKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireProfilingLockKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAcquireProfilingLockInfoKHR *")] AcquireProfilingLockInfoKHR* pInfo
    ) => ThisThread.AcquireProfilingLockKHR(device, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireProfilingLockKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AcquireProfilingLockKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAcquireProfilingLockInfoKHR *")]
            Ref<AcquireProfilingLockInfoKHR> pInfo
    )
    {
        fixed (AcquireProfilingLockInfoKHR* __dsl_pInfo = pInfo)
        {
            return (Result)((IVk)this).AcquireProfilingLockKHR(device, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireProfilingLockKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireProfilingLockKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAcquireProfilingLockInfoKHR *")]
            Ref<AcquireProfilingLockInfoKHR> pInfo
    ) => ThisThread.AcquireProfilingLockKHR(device, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AllocateCommandBuffers(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCommandBufferAllocateInfo *")]
            CommandBufferAllocateInfo* pAllocateInfo,
        [NativeTypeName("VkCommandBuffer *")] CommandBufferHandle* pCommandBuffers
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                CommandBufferAllocateInfo*,
                CommandBufferHandle*,
                Result>)(
                _slots[5] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[5] = nativeContext.LoadFunction("vkAllocateCommandBuffers", "vulkan")
            )
        )(device, pAllocateInfo, pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AllocateCommandBuffers(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCommandBufferAllocateInfo *")]
            CommandBufferAllocateInfo* pAllocateInfo,
        [NativeTypeName("VkCommandBuffer *")] CommandBufferHandle* pCommandBuffers
    ) => ThisThread.AllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AllocateCommandBuffers(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCommandBufferAllocateInfo *")]
            Ref<CommandBufferAllocateInfo> pAllocateInfo,
        [NativeTypeName("VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
    )
    {
        fixed (CommandBufferHandle* __dsl_pCommandBuffers = pCommandBuffers)
        fixed (CommandBufferAllocateInfo* __dsl_pAllocateInfo = pAllocateInfo)
        {
            return (Result)
                ((IVk)this).AllocateCommandBuffers(
                    device,
                    __dsl_pAllocateInfo,
                    __dsl_pCommandBuffers
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AllocateCommandBuffers(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCommandBufferAllocateInfo *")]
            Ref<CommandBufferAllocateInfo> pAllocateInfo,
        [NativeTypeName("VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
    ) => ThisThread.AllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AllocateDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetAllocateInfo *")]
            DescriptorSetAllocateInfo* pAllocateInfo,
        [NativeTypeName("VkDescriptorSet *")] DescriptorSetHandle* pDescriptorSets
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DescriptorSetAllocateInfo*,
                DescriptorSetHandle*,
                Result>)(
                _slots[6] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[6] = nativeContext.LoadFunction("vkAllocateDescriptorSets", "vulkan")
            )
        )(device, pAllocateInfo, pDescriptorSets);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AllocateDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetAllocateInfo *")]
            DescriptorSetAllocateInfo* pAllocateInfo,
        [NativeTypeName("VkDescriptorSet *")] DescriptorSetHandle* pDescriptorSets
    ) => ThisThread.AllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AllocateDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetAllocateInfo *")]
            Ref<DescriptorSetAllocateInfo> pAllocateInfo,
        [NativeTypeName("VkDescriptorSet *")] Ref<DescriptorSetHandle> pDescriptorSets
    )
    {
        fixed (DescriptorSetHandle* __dsl_pDescriptorSets = pDescriptorSets)
        fixed (DescriptorSetAllocateInfo* __dsl_pAllocateInfo = pAllocateInfo)
        {
            return (Result)
                ((IVk)this).AllocateDescriptorSets(
                    device,
                    __dsl_pAllocateInfo,
                    __dsl_pDescriptorSets
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AllocateDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetAllocateInfo *")]
            Ref<DescriptorSetAllocateInfo> pAllocateInfo,
        [NativeTypeName("VkDescriptorSet *")] Ref<DescriptorSetHandle> pDescriptorSets
    ) => ThisThread.AllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AllocateMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryAllocateInfo *")] MemoryAllocateInfo* pAllocateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDeviceMemory *")] DeviceMemoryHandle* pMemory
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                MemoryAllocateInfo*,
                AllocationCallbacks*,
                DeviceMemoryHandle*,
                Result>)(
                _slots[7] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[7] = nativeContext.LoadFunction("vkAllocateMemory", "vulkan")
            )
        )(device, pAllocateInfo, pAllocator, pMemory);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AllocateMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryAllocateInfo *")] MemoryAllocateInfo* pAllocateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDeviceMemory *")] DeviceMemoryHandle* pMemory
    ) => ThisThread.AllocateMemory(device, pAllocateInfo, pAllocator, pMemory);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.AllocateMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryAllocateInfo *")] Ref<MemoryAllocateInfo> pAllocateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDeviceMemory *")] Ref<DeviceMemoryHandle> pMemory
    )
    {
        fixed (DeviceMemoryHandle* __dsl_pMemory = pMemory)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (MemoryAllocateInfo* __dsl_pAllocateInfo = pAllocateInfo)
        {
            return (Result)
                ((IVk)this).AllocateMemory(
                    device,
                    __dsl_pAllocateInfo,
                    __dsl_pAllocator,
                    __dsl_pMemory
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AllocateMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryAllocateInfo *")] Ref<MemoryAllocateInfo> pAllocateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDeviceMemory *")] Ref<DeviceMemoryHandle> pMemory
    ) => ThisThread.AllocateMemory(device, pAllocateInfo, pAllocator, pMemory);

    [SupportedApiProfile("vulkan", ["VK_AMD_anti_lag"])]
    [NativeFunction("vulkan", EntryPoint = "vkAntiLagUpdateAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.AntiLagUpdateAMD(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAntiLagDataAMD *")] AntiLagDataAMD* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, AntiLagDataAMD*, void>)(
                _slots[8] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[8] = nativeContext.LoadFunction("vkAntiLagUpdateAMD", "vulkan")
            )
        )(device, pData);

    [SupportedApiProfile("vulkan", ["VK_AMD_anti_lag"])]
    [NativeFunction("vulkan", EntryPoint = "vkAntiLagUpdateAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void AntiLagUpdateAMD(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAntiLagDataAMD *")] AntiLagDataAMD* pData
    ) => ThisThread.AntiLagUpdateAMD(device, pData);

    [SupportedApiProfile("vulkan", ["VK_AMD_anti_lag"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAntiLagUpdateAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.AntiLagUpdateAMD(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAntiLagDataAMD *")] Ref<AntiLagDataAMD> pData
    )
    {
        fixed (AntiLagDataAMD* __dsl_pData = pData)
        {
            ((IVk)this).AntiLagUpdateAMD(device, __dsl_pData);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_AMD_anti_lag"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAntiLagUpdateAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void AntiLagUpdateAMD(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAntiLagDataAMD *")] Ref<AntiLagDataAMD> pData
    ) => ThisThread.AntiLagUpdateAMD(device, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBeginCommandBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BeginCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCommandBufferBeginInfo *")] CommandBufferBeginInfo* pBeginInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CommandBufferBeginInfo*, Result>)(
                _slots[9] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[9] = nativeContext.LoadFunction("vkBeginCommandBuffer", "vulkan")
            )
        )(commandBuffer, pBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBeginCommandBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BeginCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCommandBufferBeginInfo *")] CommandBufferBeginInfo* pBeginInfo
    ) => ThisThread.BeginCommandBuffer(commandBuffer, pBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBeginCommandBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BeginCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCommandBufferBeginInfo *")] Ref<CommandBufferBeginInfo> pBeginInfo
    )
    {
        fixed (CommandBufferBeginInfo* __dsl_pBeginInfo = pBeginInfo)
        {
            return (Result)((IVk)this).BeginCommandBuffer(commandBuffer, __dsl_pBeginInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBeginCommandBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BeginCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCommandBufferBeginInfo *")] Ref<CommandBufferBeginInfo> pBeginInfo
    ) => ThisThread.BeginCommandBuffer(commandBuffer, pBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindAccelerationStructureMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindAccelerationStructureMemoryNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindAccelerationStructureMemoryInfoNV *")]
            BindAccelerationStructureMemoryInfoNV* pBindInfos
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                uint,
                BindAccelerationStructureMemoryInfoNV*,
                Result>)(
                _slots[10] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[10] = nativeContext.LoadFunction(
                        "vkBindAccelerationStructureMemoryNV",
                        "vulkan"
                    )
            )
        )(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindAccelerationStructureMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindAccelerationStructureMemoryNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindAccelerationStructureMemoryInfoNV *")]
            BindAccelerationStructureMemoryInfoNV* pBindInfos
    ) => ThisThread.BindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindAccelerationStructureMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindAccelerationStructureMemoryNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindAccelerationStructureMemoryInfoNV *")]
            Ref<BindAccelerationStructureMemoryInfoNV> pBindInfos
    )
    {
        fixed (BindAccelerationStructureMemoryInfoNV* __dsl_pBindInfos = pBindInfos)
        {
            return (Result)
                ((IVk)this).BindAccelerationStructureMemoryNV(
                    device,
                    bindInfoCount,
                    __dsl_pBindInfos
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindAccelerationStructureMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindAccelerationStructureMemoryNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindAccelerationStructureMemoryInfoNV *")]
            Ref<BindAccelerationStructureMemoryInfoNV> pBindInfos
    ) => ThisThread.BindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindBufferMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("VkDeviceSize")] ulong memoryOffset
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, BufferHandle, DeviceMemoryHandle, ulong, Result>)(
                _slots[11] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[11] = nativeContext.LoadFunction("vkBindBufferMemory", "vulkan")
            )
        )(device, buffer, memory, memoryOffset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindBufferMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("VkDeviceSize")] ulong memoryOffset
    ) => ThisThread.BindBufferMemory(device, buffer, memory, memoryOffset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindBufferMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] BindBufferMemoryInfo* pBindInfos
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, BindBufferMemoryInfo*, Result>)(
                _slots[12] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[12] = nativeContext.LoadFunction("vkBindBufferMemory2", "vulkan")
            )
        )(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindBufferMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] BindBufferMemoryInfo* pBindInfos
    ) => ThisThread.BindBufferMemory2(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindBufferMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] Ref<BindBufferMemoryInfo> pBindInfos
    )
    {
        fixed (BindBufferMemoryInfo* __dsl_pBindInfos = pBindInfos)
        {
            return (Result)((IVk)this).BindBufferMemory2(device, bindInfoCount, __dsl_pBindInfos);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindBufferMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] Ref<BindBufferMemoryInfo> pBindInfos
    ) => ThisThread.BindBufferMemory2(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindBufferMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] BindBufferMemoryInfo* pBindInfos
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, BindBufferMemoryInfo*, Result>)(
                _slots[13] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[13] = nativeContext.LoadFunction("vkBindBufferMemory2KHR", "vulkan")
            )
        )(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindBufferMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] BindBufferMemoryInfo* pBindInfos
    ) => ThisThread.BindBufferMemory2KHR(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindBufferMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] Ref<BindBufferMemoryInfo> pBindInfos
    )
    {
        fixed (BindBufferMemoryInfo* __dsl_pBindInfos = pBindInfos)
        {
            return (Result)
                ((IVk)this).BindBufferMemory2KHR(device, bindInfoCount, __dsl_pBindInfos);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindBufferMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] Ref<BindBufferMemoryInfo> pBindInfos
    ) => ThisThread.BindBufferMemory2KHR(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkBindDataGraphPipelineSessionMemoryARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindDataGraphPipelineSessionMemoryARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindDataGraphPipelineSessionMemoryInfoARM *")]
            BindDataGraphPipelineSessionMemoryInfoARM* pBindInfos
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                uint,
                BindDataGraphPipelineSessionMemoryInfoARM*,
                Result>)(
                _slots[14] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[14] = nativeContext.LoadFunction(
                        "vkBindDataGraphPipelineSessionMemoryARM",
                        "vulkan"
                    )
            )
        )(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkBindDataGraphPipelineSessionMemoryARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindDataGraphPipelineSessionMemoryARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindDataGraphPipelineSessionMemoryInfoARM *")]
            BindDataGraphPipelineSessionMemoryInfoARM* pBindInfos
    ) => ThisThread.BindDataGraphPipelineSessionMemoryARM(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindDataGraphPipelineSessionMemoryARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindDataGraphPipelineSessionMemoryARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindDataGraphPipelineSessionMemoryInfoARM *")]
            Ref<BindDataGraphPipelineSessionMemoryInfoARM> pBindInfos
    )
    {
        fixed (BindDataGraphPipelineSessionMemoryInfoARM* __dsl_pBindInfos = pBindInfos)
        {
            return (Result)
                ((IVk)this).BindDataGraphPipelineSessionMemoryARM(
                    device,
                    bindInfoCount,
                    __dsl_pBindInfos
                );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindDataGraphPipelineSessionMemoryARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindDataGraphPipelineSessionMemoryARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindDataGraphPipelineSessionMemoryInfoARM *")]
            Ref<BindDataGraphPipelineSessionMemoryInfoARM> pBindInfos
    ) => ThisThread.BindDataGraphPipelineSessionMemoryARM(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindImageMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("VkDeviceSize")] ulong memoryOffset
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ImageHandle, DeviceMemoryHandle, ulong, Result>)(
                _slots[15] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[15] = nativeContext.LoadFunction("vkBindImageMemory", "vulkan")
            )
        )(device, image, memory, memoryOffset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindImageMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("VkDeviceSize")] ulong memoryOffset
    ) => ThisThread.BindImageMemory(device, image, memory, memoryOffset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindImageMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] BindImageMemoryInfo* pBindInfos
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, BindImageMemoryInfo*, Result>)(
                _slots[16] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[16] = nativeContext.LoadFunction("vkBindImageMemory2", "vulkan")
            )
        )(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindImageMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] BindImageMemoryInfo* pBindInfos
    ) => ThisThread.BindImageMemory2(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindImageMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] Ref<BindImageMemoryInfo> pBindInfos
    )
    {
        fixed (BindImageMemoryInfo* __dsl_pBindInfos = pBindInfos)
        {
            return (Result)((IVk)this).BindImageMemory2(device, bindInfoCount, __dsl_pBindInfos);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindImageMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] Ref<BindImageMemoryInfo> pBindInfos
    ) => ThisThread.BindImageMemory2(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindImageMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] BindImageMemoryInfo* pBindInfos
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, BindImageMemoryInfo*, Result>)(
                _slots[17] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[17] = nativeContext.LoadFunction("vkBindImageMemory2KHR", "vulkan")
            )
        )(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindImageMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] BindImageMemoryInfo* pBindInfos
    ) => ThisThread.BindImageMemory2KHR(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindImageMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] Ref<BindImageMemoryInfo> pBindInfos
    )
    {
        fixed (BindImageMemoryInfo* __dsl_pBindInfos = pBindInfos)
        {
            return (Result)((IVk)this).BindImageMemory2KHR(device, bindInfoCount, __dsl_pBindInfos);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindImageMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] Ref<BindImageMemoryInfo> pBindInfos
    ) => ThisThread.BindImageMemory2KHR(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindOpticalFlowSessionImageNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindOpticalFlowSessionImageNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
        OpticalFlowSessionBindingPointNV bindingPoint,
        [NativeTypeName("VkImageView")] ImageViewHandle view,
        ImageLayout layout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                OpticalFlowSessionNVHandle,
                OpticalFlowSessionBindingPointNV,
                ImageViewHandle,
                ImageLayout,
                Result>)(
                _slots[18] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[18] = nativeContext.LoadFunction(
                        "vkBindOpticalFlowSessionImageNV",
                        "vulkan"
                    )
            )
        )(device, session, bindingPoint, view, layout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindOpticalFlowSessionImageNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindOpticalFlowSessionImageNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
        OpticalFlowSessionBindingPointNV bindingPoint,
        [NativeTypeName("VkImageView")] ImageViewHandle view,
        ImageLayout layout
    ) => ThisThread.BindOpticalFlowSessionImageNV(device, session, bindingPoint, view, layout);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkBindTensorMemoryARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindTensorMemoryARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindTensorMemoryInfoARM *")] BindTensorMemoryInfoARM* pBindInfos
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, BindTensorMemoryInfoARM*, Result>)(
                _slots[19] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[19] = nativeContext.LoadFunction("vkBindTensorMemoryARM", "vulkan")
            )
        )(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkBindTensorMemoryARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindTensorMemoryARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindTensorMemoryInfoARM *")] BindTensorMemoryInfoARM* pBindInfos
    ) => ThisThread.BindTensorMemoryARM(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindTensorMemoryARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindTensorMemoryARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindTensorMemoryInfoARM *")]
            Ref<BindTensorMemoryInfoARM> pBindInfos
    )
    {
        fixed (BindTensorMemoryInfoARM* __dsl_pBindInfos = pBindInfos)
        {
            return (Result)((IVk)this).BindTensorMemoryARM(device, bindInfoCount, __dsl_pBindInfos);
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindTensorMemoryARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindTensorMemoryARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindTensorMemoryInfoARM *")]
            Ref<BindTensorMemoryInfoARM> pBindInfos
    ) => ThisThread.BindTensorMemoryARM(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindVideoSessionMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindVideoSessionMemoryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
        [NativeTypeName("uint32_t")] uint bindSessionMemoryInfoCount,
        [NativeTypeName("const VkBindVideoSessionMemoryInfoKHR *")]
            BindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                VideoSessionKHRHandle,
                uint,
                BindVideoSessionMemoryInfoKHR*,
                Result>)(
                _slots[20] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[20] = nativeContext.LoadFunction(
                        "vkBindVideoSessionMemoryKHR",
                        "vulkan"
                    )
            )
        )(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindVideoSessionMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindVideoSessionMemoryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
        [NativeTypeName("uint32_t")] uint bindSessionMemoryInfoCount,
        [NativeTypeName("const VkBindVideoSessionMemoryInfoKHR *")]
            BindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos
    ) =>
        ThisThread.BindVideoSessionMemoryKHR(
            device,
            videoSession,
            bindSessionMemoryInfoCount,
            pBindSessionMemoryInfos
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindVideoSessionMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BindVideoSessionMemoryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
        [NativeTypeName("uint32_t")] uint bindSessionMemoryInfoCount,
        [NativeTypeName("const VkBindVideoSessionMemoryInfoKHR *")]
            Ref<BindVideoSessionMemoryInfoKHR> pBindSessionMemoryInfos
    )
    {
        fixed (
            BindVideoSessionMemoryInfoKHR* __dsl_pBindSessionMemoryInfos = pBindSessionMemoryInfos
        )
        {
            return (Result)
                ((IVk)this).BindVideoSessionMemoryKHR(
                    device,
                    videoSession,
                    bindSessionMemoryInfoCount,
                    __dsl_pBindSessionMemoryInfos
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindVideoSessionMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindVideoSessionMemoryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
        [NativeTypeName("uint32_t")] uint bindSessionMemoryInfoCount,
        [NativeTypeName("const VkBindVideoSessionMemoryInfoKHR *")]
            Ref<BindVideoSessionMemoryInfoKHR> pBindSessionMemoryInfos
    ) =>
        ThisThread.BindVideoSessionMemoryKHR(
            device,
            videoSession,
            bindSessionMemoryInfoCount,
            pBindSessionMemoryInfos
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBuildAccelerationStructuresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BuildAccelerationStructuresKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            AccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeferredOperationKHRHandle,
                uint,
                AccelerationStructureBuildGeometryInfoKHR*,
                AccelerationStructureBuildRangeInfoKHR**,
                Result>)(
                _slots[21] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[21] = nativeContext.LoadFunction(
                        "vkBuildAccelerationStructuresKHR",
                        "vulkan"
                    )
            )
        )(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBuildAccelerationStructuresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BuildAccelerationStructuresKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            AccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos
    ) =>
        ThisThread.BuildAccelerationStructuresKHR(
            device,
            deferredOperation,
            infoCount,
            pInfos,
            ppBuildRangeInfos
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBuildAccelerationStructuresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BuildAccelerationStructuresKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            Ref2D<AccelerationStructureBuildRangeInfoKHR> ppBuildRangeInfos
    )
    {
        fixed (AccelerationStructureBuildRangeInfoKHR** __dsl_ppBuildRangeInfos = ppBuildRangeInfos)
        fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pInfos = pInfos)
        {
            return (Result)
                ((IVk)this).BuildAccelerationStructuresKHR(
                    device,
                    deferredOperation,
                    infoCount,
                    __dsl_pInfos,
                    __dsl_ppBuildRangeInfos
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBuildAccelerationStructuresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BuildAccelerationStructuresKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            Ref2D<AccelerationStructureBuildRangeInfoKHR> ppBuildRangeInfos
    ) =>
        ThisThread.BuildAccelerationStructuresKHR(
            device,
            deferredOperation,
            infoCount,
            pInfos,
            ppBuildRangeInfos
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BuildMicromapsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pInfos
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeferredOperationKHRHandle,
                uint,
                MicromapBuildInfoEXT*,
                Result>)(
                _slots[22] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[22] = nativeContext.LoadFunction("vkBuildMicromapsEXT", "vulkan")
            )
        )(device, deferredOperation, infoCount, pInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BuildMicromapsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pInfos
    ) => ThisThread.BuildMicromapsEXT(device, deferredOperation, infoCount, pInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.BuildMicromapsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pInfos
    )
    {
        fixed (MicromapBuildInfoEXT* __dsl_pInfos = pInfos)
        {
            return (Result)
                ((IVk)this).BuildMicromapsEXT(device, deferredOperation, infoCount, __dsl_pInfos);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BuildMicromapsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pInfos
    ) => ThisThread.BuildMicromapsEXT(device, deferredOperation, infoCount, pInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering"],
        ImpliesSets = [
            "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conditional_rendering+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginConditionalRenderingEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginConditionalRenderingEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkConditionalRenderingBeginInfoEXT *")]
            ConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, ConditionalRenderingBeginInfoEXT*, void>)(
                _slots[23] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[23] = nativeContext.LoadFunction(
                        "vkCmdBeginConditionalRenderingEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pConditionalRenderingBegin);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering"],
        ImpliesSets = [
            "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conditional_rendering+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginConditionalRenderingEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginConditionalRenderingEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkConditionalRenderingBeginInfoEXT *")]
            ConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin
    ) => ThisThread.CmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering"],
        ImpliesSets = [
            "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conditional_rendering+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginConditionalRenderingEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginConditionalRenderingEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkConditionalRenderingBeginInfoEXT *")]
            Ref<ConditionalRenderingBeginInfoEXT> pConditionalRenderingBegin
    )
    {
        fixed (
            ConditionalRenderingBeginInfoEXT* __dsl_pConditionalRenderingBegin =
                pConditionalRenderingBegin
        )
        {
            ((IVk)this).CmdBeginConditionalRenderingEXT(
                commandBuffer,
                __dsl_pConditionalRenderingBegin
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering"],
        ImpliesSets = [
            "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conditional_rendering+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginConditionalRenderingEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginConditionalRenderingEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkConditionalRenderingBeginInfoEXT *")]
            Ref<ConditionalRenderingBeginInfoEXT> pConditionalRenderingBegin
    ) => ThisThread.CmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, DebugUtilsLabelEXT*, void>)(
                _slots[24] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[24] = nativeContext.LoadFunction(
                        "vkCmdBeginDebugUtilsLabelEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pLabelInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) => ThisThread.CmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    )
    {
        fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
        {
            ((IVk)this).CmdBeginDebugUtilsLabelEXT(commandBuffer, __dsl_pLabelInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    ) => ThisThread.CmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginPerTileExecutionQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerTileBeginInfoQCOM *")] PerTileBeginInfoQCOM* pPerTileBeginInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PerTileBeginInfoQCOM*, void>)(
                _slots[25] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[25] = nativeContext.LoadFunction(
                        "vkCmdBeginPerTileExecutionQCOM",
                        "vulkan"
                    )
            )
        )(commandBuffer, pPerTileBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginPerTileExecutionQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerTileBeginInfoQCOM *")] PerTileBeginInfoQCOM* pPerTileBeginInfo
    ) => ThisThread.CmdBeginPerTileExecutionQCOM(commandBuffer, pPerTileBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginPerTileExecutionQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerTileBeginInfoQCOM *")]
            Ref<PerTileBeginInfoQCOM> pPerTileBeginInfo
    )
    {
        fixed (PerTileBeginInfoQCOM* __dsl_pPerTileBeginInfo = pPerTileBeginInfo)
        {
            ((IVk)this).CmdBeginPerTileExecutionQCOM(commandBuffer, __dsl_pPerTileBeginInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginPerTileExecutionQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerTileBeginInfoQCOM *")]
            Ref<PerTileBeginInfoQCOM> pPerTileBeginInfo
    ) => ThisThread.CmdBeginPerTileExecutionQCOM(commandBuffer, pPerTileBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginQuery")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginQuery(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("VkQueryControlFlags")] QueryControlFlags flags
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                QueryPoolHandle,
                uint,
                QueryControlFlags,
                void>)(
                _slots[26] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[26] = nativeContext.LoadFunction("vkCmdBeginQuery", "vulkan")
            )
        )(commandBuffer, queryPool, query, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginQuery")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginQuery(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("VkQueryControlFlags")] QueryControlFlags flags
    ) => ThisThread.CmdBeginQuery(commandBuffer, queryPool, query, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginQueryIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginQueryIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("VkQueryControlFlags")] QueryControlFlags flags,
        [NativeTypeName("uint32_t")] uint index
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                QueryPoolHandle,
                uint,
                QueryControlFlags,
                uint,
                void>)(
                _slots[27] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[27] = nativeContext.LoadFunction("vkCmdBeginQueryIndexedEXT", "vulkan")
            )
        )(commandBuffer, queryPool, query, flags, index);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginQueryIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginQueryIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("VkQueryControlFlags")] QueryControlFlags flags,
        [NativeTypeName("uint32_t")] uint index
    ) => ThisThread.CmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRendering")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginRendering(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, RenderingInfo*, void>)(
                _slots[28] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[28] = nativeContext.LoadFunction("vkCmdBeginRendering", "vulkan")
            )
        )(commandBuffer, pRenderingInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRendering")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRendering(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo
    ) => ThisThread.CmdBeginRendering(commandBuffer, pRenderingInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRendering")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginRendering(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo
    )
    {
        fixed (RenderingInfo* __dsl_pRenderingInfo = pRenderingInfo)
        {
            ((IVk)this).CmdBeginRendering(commandBuffer, __dsl_pRenderingInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRendering")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRendering(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo
    ) => ThisThread.CmdBeginRendering(commandBuffer, pRenderingInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginRenderingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, RenderingInfo*, void>)(
                _slots[29] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[29] = nativeContext.LoadFunction("vkCmdBeginRenderingKHR", "vulkan")
            )
        )(commandBuffer, pRenderingInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo
    ) => ThisThread.CmdBeginRenderingKHR(commandBuffer, pRenderingInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginRenderingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo
    )
    {
        fixed (RenderingInfo* __dsl_pRenderingInfo = pRenderingInfo)
        {
            ((IVk)this).CmdBeginRenderingKHR(commandBuffer, __dsl_pRenderingInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo
    ) => ThisThread.CmdBeginRenderingKHR(commandBuffer, pRenderingInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginRenderPass(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
        SubpassContents contents
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, RenderPassBeginInfo*, SubpassContents, void>)(
                _slots[30] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[30] = nativeContext.LoadFunction("vkCmdBeginRenderPass", "vulkan")
            )
        )(commandBuffer, pRenderPassBegin, contents);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderPass(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
        SubpassContents contents
    ) => ThisThread.CmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginRenderPass(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] Ref<RenderPassBeginInfo> pRenderPassBegin,
        SubpassContents contents
    )
    {
        fixed (RenderPassBeginInfo* __dsl_pRenderPassBegin = pRenderPassBegin)
        {
            ((IVk)this).CmdBeginRenderPass(commandBuffer, __dsl_pRenderPassBegin, contents);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderPass(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] Ref<RenderPassBeginInfo> pRenderPassBegin,
        SubpassContents contents
    ) => ThisThread.CmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginRenderPass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                RenderPassBeginInfo*,
                SubpassBeginInfo*,
                void>)(
                _slots[31] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[31] = nativeContext.LoadFunction("vkCmdBeginRenderPass2", "vulkan")
            )
        )(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderPass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo
    ) => ThisThread.CmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginRenderPass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] Ref<RenderPassBeginInfo> pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo
    )
    {
        fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
        fixed (RenderPassBeginInfo* __dsl_pRenderPassBegin = pRenderPassBegin)
        {
            ((IVk)this).CmdBeginRenderPass2(
                commandBuffer,
                __dsl_pRenderPassBegin,
                __dsl_pSubpassBeginInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderPass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] Ref<RenderPassBeginInfo> pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo
    ) => ThisThread.CmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                RenderPassBeginInfo*,
                SubpassBeginInfo*,
                void>)(
                _slots[32] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[32] = nativeContext.LoadFunction("vkCmdBeginRenderPass2KHR", "vulkan")
            )
        )(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo
    ) => ThisThread.CmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] Ref<RenderPassBeginInfo> pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo
    )
    {
        fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
        fixed (RenderPassBeginInfo* __dsl_pRenderPassBegin = pRenderPassBegin)
        {
            ((IVk)this).CmdBeginRenderPass2KHR(
                commandBuffer,
                __dsl_pRenderPassBegin,
                __dsl_pSubpassBeginInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] Ref<RenderPassBeginInfo> pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo
    ) => ThisThread.CmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginTransformFeedbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle* pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pCounterBufferOffsets
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, BufferHandle*, ulong*, void>)(
                _slots[33] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[33] = nativeContext.LoadFunction(
                        "vkCmdBeginTransformFeedbackEXT",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            firstCounterBuffer,
            counterBufferCount,
            pCounterBuffers,
            pCounterBufferOffsets
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginTransformFeedbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle* pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pCounterBufferOffsets
    ) =>
        ThisThread.CmdBeginTransformFeedbackEXT(
            commandBuffer,
            firstCounterBuffer,
            counterBufferCount,
            pCounterBuffers,
            pCounterBufferOffsets
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginTransformFeedbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pCounterBufferOffsets
    )
    {
        fixed (ulong* __dsl_pCounterBufferOffsets = pCounterBufferOffsets)
        fixed (BufferHandle* __dsl_pCounterBuffers = pCounterBuffers)
        {
            ((IVk)this).CmdBeginTransformFeedbackEXT(
                commandBuffer,
                firstCounterBuffer,
                counterBufferCount,
                __dsl_pCounterBuffers,
                __dsl_pCounterBufferOffsets
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginTransformFeedbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pCounterBufferOffsets
    ) =>
        ThisThread.CmdBeginTransformFeedbackEXT(
            commandBuffer,
            firstCounterBuffer,
            counterBufferCount,
            pCounterBuffers,
            pCounterBufferOffsets
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoBeginCodingInfoKHR *")] VideoBeginCodingInfoKHR* pBeginInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, VideoBeginCodingInfoKHR*, void>)(
                _slots[34] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[34] = nativeContext.LoadFunction("vkCmdBeginVideoCodingKHR", "vulkan")
            )
        )(commandBuffer, pBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoBeginCodingInfoKHR *")] VideoBeginCodingInfoKHR* pBeginInfo
    ) => ThisThread.CmdBeginVideoCodingKHR(commandBuffer, pBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBeginVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoBeginCodingInfoKHR *")]
            Ref<VideoBeginCodingInfoKHR> pBeginInfo
    )
    {
        fixed (VideoBeginCodingInfoKHR* __dsl_pBeginInfo = pBeginInfo)
        {
            ((IVk)this).CmdBeginVideoCodingKHR(commandBuffer, __dsl_pBeginInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoBeginCodingInfoKHR *")]
            Ref<VideoBeginCodingInfoKHR> pBeginInfo
    ) => ThisThread.CmdBeginVideoCodingKHR(commandBuffer, pBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindDescriptorBufferEmbeddedSamplers2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *")]
            BindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                BindDescriptorBufferEmbeddedSamplersInfoEXT*,
                void>)(
                _slots[35] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[35] = nativeContext.LoadFunction(
                        "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorBufferEmbeddedSamplers2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *")]
            BindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo
    ) =>
        ThisThread.CmdBindDescriptorBufferEmbeddedSamplers2EXT(
            commandBuffer,
            pBindDescriptorBufferEmbeddedSamplersInfo
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindDescriptorBufferEmbeddedSamplers2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *")]
            Ref<BindDescriptorBufferEmbeddedSamplersInfoEXT> pBindDescriptorBufferEmbeddedSamplersInfo
    )
    {
        fixed (
            BindDescriptorBufferEmbeddedSamplersInfoEXT* __dsl_pBindDescriptorBufferEmbeddedSamplersInfo =
                pBindDescriptorBufferEmbeddedSamplersInfo
        )
        {
            ((IVk)this).CmdBindDescriptorBufferEmbeddedSamplers2EXT(
                commandBuffer,
                __dsl_pBindDescriptorBufferEmbeddedSamplersInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorBufferEmbeddedSamplers2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *")]
            Ref<BindDescriptorBufferEmbeddedSamplersInfoEXT> pBindDescriptorBufferEmbeddedSamplersInfo
    ) =>
        ThisThread.CmdBindDescriptorBufferEmbeddedSamplers2EXT(
            commandBuffer,
            pBindDescriptorBufferEmbeddedSamplersInfo
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindDescriptorBufferEmbeddedSamplersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                PipelineBindPoint,
                PipelineLayoutHandle,
                uint,
                void>)(
                _slots[36] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[36] = nativeContext.LoadFunction(
                        "vkCmdBindDescriptorBufferEmbeddedSamplersEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pipelineBindPoint, layout, set);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorBufferEmbeddedSamplersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set
    ) =>
        ThisThread.CmdBindDescriptorBufferEmbeddedSamplersEXT(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindDescriptorBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint bufferCount,
        [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
            DescriptorBufferBindingInfoEXT* pBindingInfos
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, DescriptorBufferBindingInfoEXT*, void>)(
                _slots[37] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[37] = nativeContext.LoadFunction(
                        "vkCmdBindDescriptorBuffersEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, bufferCount, pBindingInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint bufferCount,
        [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
            DescriptorBufferBindingInfoEXT* pBindingInfos
    ) => ThisThread.CmdBindDescriptorBuffersEXT(commandBuffer, bufferCount, pBindingInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindDescriptorBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint bufferCount,
        [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
            Ref<DescriptorBufferBindingInfoEXT> pBindingInfos
    )
    {
        fixed (DescriptorBufferBindingInfoEXT* __dsl_pBindingInfos = pBindingInfos)
        {
            ((IVk)this).CmdBindDescriptorBuffersEXT(
                commandBuffer,
                bufferCount,
                __dsl_pBindingInfos
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint bufferCount,
        [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
            Ref<DescriptorBufferBindingInfoEXT> pBindingInfos
    ) => ThisThread.CmdBindDescriptorBuffersEXT(commandBuffer, bufferCount, pBindingInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindDescriptorBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
            DescriptorBufferBindingInfoEXT pBindingInfos
    ) =>
        ((IVk)this).CmdBindDescriptorBuffersEXT(
            commandBuffer,
            1,
            (DescriptorBufferBindingInfoEXT*)&pBindingInfos
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
            DescriptorBufferBindingInfoEXT pBindingInfos
    ) => ThisThread.CmdBindDescriptorBuffersEXT(commandBuffer, pBindingInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindDescriptorSets(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] DescriptorSetHandle* pDescriptorSets,
        [NativeTypeName("uint32_t")] uint dynamicOffsetCount,
        [NativeTypeName("const uint32_t *")] uint* pDynamicOffsets
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                PipelineBindPoint,
                PipelineLayoutHandle,
                uint,
                uint,
                DescriptorSetHandle*,
                uint,
                uint*,
                void>)(
                _slots[38] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[38] = nativeContext.LoadFunction("vkCmdBindDescriptorSets", "vulkan")
            )
        )(
            commandBuffer,
            pipelineBindPoint,
            layout,
            firstSet,
            descriptorSetCount,
            pDescriptorSets,
            dynamicOffsetCount,
            pDynamicOffsets
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorSets(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] DescriptorSetHandle* pDescriptorSets,
        [NativeTypeName("uint32_t")] uint dynamicOffsetCount,
        [NativeTypeName("const uint32_t *")] uint* pDynamicOffsets
    ) =>
        ThisThread.CmdBindDescriptorSets(
            commandBuffer,
            pipelineBindPoint,
            layout,
            firstSet,
            descriptorSetCount,
            pDescriptorSets,
            dynamicOffsetCount,
            pDynamicOffsets
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindDescriptorSets(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] Ref<DescriptorSetHandle> pDescriptorSets,
        [NativeTypeName("uint32_t")] uint dynamicOffsetCount,
        [NativeTypeName("const uint32_t *")] Ref<uint> pDynamicOffsets
    )
    {
        fixed (uint* __dsl_pDynamicOffsets = pDynamicOffsets)
        fixed (DescriptorSetHandle* __dsl_pDescriptorSets = pDescriptorSets)
        {
            ((IVk)this).CmdBindDescriptorSets(
                commandBuffer,
                pipelineBindPoint,
                layout,
                firstSet,
                descriptorSetCount,
                __dsl_pDescriptorSets,
                dynamicOffsetCount,
                __dsl_pDynamicOffsets
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorSets(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] Ref<DescriptorSetHandle> pDescriptorSets,
        [NativeTypeName("uint32_t")] uint dynamicOffsetCount,
        [NativeTypeName("const uint32_t *")] Ref<uint> pDynamicOffsets
    ) =>
        ThisThread.CmdBindDescriptorSets(
            commandBuffer,
            pipelineBindPoint,
            layout,
            firstSet,
            descriptorSetCount,
            pDescriptorSets,
            dynamicOffsetCount,
            pDynamicOffsets
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindDescriptorSets2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            BindDescriptorSetsInfo* pBindDescriptorSetsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BindDescriptorSetsInfo*, void>)(
                _slots[39] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[39] = nativeContext.LoadFunction("vkCmdBindDescriptorSets2", "vulkan")
            )
        )(commandBuffer, pBindDescriptorSetsInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorSets2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            BindDescriptorSetsInfo* pBindDescriptorSetsInfo
    ) => ThisThread.CmdBindDescriptorSets2(commandBuffer, pBindDescriptorSetsInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindDescriptorSets2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            Ref<BindDescriptorSetsInfo> pBindDescriptorSetsInfo
    )
    {
        fixed (BindDescriptorSetsInfo* __dsl_pBindDescriptorSetsInfo = pBindDescriptorSetsInfo)
        {
            ((IVk)this).CmdBindDescriptorSets2(commandBuffer, __dsl_pBindDescriptorSetsInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorSets2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            Ref<BindDescriptorSetsInfo> pBindDescriptorSetsInfo
    ) => ThisThread.CmdBindDescriptorSets2(commandBuffer, pBindDescriptorSetsInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindDescriptorSets2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            BindDescriptorSetsInfo* pBindDescriptorSetsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BindDescriptorSetsInfo*, void>)(
                _slots[40] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[40] = nativeContext.LoadFunction(
                        "vkCmdBindDescriptorSets2KHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pBindDescriptorSetsInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorSets2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            BindDescriptorSetsInfo* pBindDescriptorSetsInfo
    ) => ThisThread.CmdBindDescriptorSets2KHR(commandBuffer, pBindDescriptorSetsInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindDescriptorSets2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            Ref<BindDescriptorSetsInfo> pBindDescriptorSetsInfo
    )
    {
        fixed (BindDescriptorSetsInfo* __dsl_pBindDescriptorSetsInfo = pBindDescriptorSetsInfo)
        {
            ((IVk)this).CmdBindDescriptorSets2KHR(commandBuffer, __dsl_pBindDescriptorSetsInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorSets2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            Ref<BindDescriptorSetsInfo> pBindDescriptorSetsInfo
    ) => ThisThread.CmdBindDescriptorSets2KHR(commandBuffer, pBindDescriptorSetsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindIndexBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        IndexType indexType
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BufferHandle, ulong, IndexType, void>)(
                _slots[41] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[41] = nativeContext.LoadFunction("vkCmdBindIndexBuffer", "vulkan")
            )
        )(commandBuffer, buffer, offset, indexType);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindIndexBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        IndexType indexType
    ) => ThisThread.CmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindIndexBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        IndexType indexType
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BufferHandle, ulong, ulong, IndexType, void>)(
                _slots[42] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[42] = nativeContext.LoadFunction("vkCmdBindIndexBuffer2", "vulkan")
            )
        )(commandBuffer, buffer, offset, size, indexType);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindIndexBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        IndexType indexType
    ) => ThisThread.CmdBindIndexBuffer2(commandBuffer, buffer, offset, size, indexType);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindIndexBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        IndexType indexType
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BufferHandle, ulong, ulong, IndexType, void>)(
                _slots[43] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[43] = nativeContext.LoadFunction("vkCmdBindIndexBuffer2KHR", "vulkan")
            )
        )(commandBuffer, buffer, offset, size, indexType);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindIndexBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        IndexType indexType
    ) => ThisThread.CmdBindIndexBuffer2KHR(commandBuffer, buffer, offset, size, indexType);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_invocation_mask"],
        ImpliesSets = [
            "VK_KHR_ray_tracing_pipeline+VK_KHR_synchronization2",
            "VK_KHR_ray_tracing_pipeline+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindInvocationMaskHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindInvocationMaskHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImageView")] ImageViewHandle imageView,
        ImageLayout imageLayout
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, ImageViewHandle, ImageLayout, void>)(
                _slots[44] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[44] = nativeContext.LoadFunction(
                        "vkCmdBindInvocationMaskHUAWEI",
                        "vulkan"
                    )
            )
        )(commandBuffer, imageView, imageLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_invocation_mask"],
        ImpliesSets = [
            "VK_KHR_ray_tracing_pipeline+VK_KHR_synchronization2",
            "VK_KHR_ray_tracing_pipeline+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindInvocationMaskHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindInvocationMaskHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImageView")] ImageViewHandle imageView,
        ImageLayout imageLayout
    ) => ThisThread.CmdBindInvocationMaskHuawei(commandBuffer, imageView, imageLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindPipeline")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindPipeline(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PipelineBindPoint, PipelineHandle, void>)(
                _slots[45] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[45] = nativeContext.LoadFunction("vkCmdBindPipeline", "vulkan")
            )
        )(commandBuffer, pipelineBindPoint, pipeline);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindPipeline")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindPipeline(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline
    ) => ThisThread.CmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindPipelineShaderGroupNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindPipelineShaderGroupNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint groupIndex
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                PipelineBindPoint,
                PipelineHandle,
                uint,
                void>)(
                _slots[46] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[46] = nativeContext.LoadFunction(
                        "vkCmdBindPipelineShaderGroupNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, pipelineBindPoint, pipeline, groupIndex);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindPipelineShaderGroupNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindPipelineShaderGroupNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint groupIndex
    ) =>
        ThisThread.CmdBindPipelineShaderGroupNV(
            commandBuffer,
            pipelineBindPoint,
            pipeline,
            groupIndex
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindShadersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint stageCount,
        [NativeTypeName("const VkShaderStageFlagBits *")] ShaderStageFlags* pStages,
        [NativeTypeName("const VkShaderEXT *")] ShaderEXTHandle* pShaders
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                ShaderStageFlags*,
                ShaderEXTHandle*,
                void>)(
                _slots[47] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[47] = nativeContext.LoadFunction("vkCmdBindShadersEXT", "vulkan")
            )
        )(commandBuffer, stageCount, pStages, pShaders);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindShadersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint stageCount,
        [NativeTypeName("const VkShaderStageFlagBits *")] ShaderStageFlags* pStages,
        [NativeTypeName("const VkShaderEXT *")] ShaderEXTHandle* pShaders
    ) => ThisThread.CmdBindShadersEXT(commandBuffer, stageCount, pStages, pShaders);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindShadersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint stageCount,
        [NativeTypeName("const VkShaderStageFlagBits *")] Ref<ShaderStageFlags> pStages,
        [NativeTypeName("const VkShaderEXT *")] Ref<ShaderEXTHandle> pShaders
    )
    {
        fixed (ShaderEXTHandle* __dsl_pShaders = pShaders)
        fixed (ShaderStageFlags* __dsl_pStages = pStages)
        {
            ((IVk)this).CmdBindShadersEXT(commandBuffer, stageCount, __dsl_pStages, __dsl_pShaders);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindShadersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint stageCount,
        [NativeTypeName("const VkShaderStageFlagBits *")] Ref<ShaderStageFlags> pStages,
        [NativeTypeName("const VkShaderEXT *")] Ref<ShaderEXTHandle> pShaders
    ) => ThisThread.CmdBindShadersEXT(commandBuffer, stageCount, pStages, pShaders);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadingRateImageNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindShadingRateImageNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImageView")] ImageViewHandle imageView,
        ImageLayout imageLayout
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, ImageViewHandle, ImageLayout, void>)(
                _slots[48] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[48] = nativeContext.LoadFunction(
                        "vkCmdBindShadingRateImageNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, imageView, imageLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadingRateImageNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindShadingRateImageNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImageView")] ImageViewHandle imageView,
        ImageLayout imageLayout
    ) => ThisThread.CmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_memory_heap"],
        ImpliesSets = [
            "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindTileMemoryQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindTileMemoryQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkTileMemoryBindInfoQCOM *")]
            TileMemoryBindInfoQCOM* pTileMemoryBindInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, TileMemoryBindInfoQCOM*, void>)(
                _slots[49] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[49] = nativeContext.LoadFunction("vkCmdBindTileMemoryQCOM", "vulkan")
            )
        )(commandBuffer, pTileMemoryBindInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_memory_heap"],
        ImpliesSets = [
            "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindTileMemoryQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindTileMemoryQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkTileMemoryBindInfoQCOM *")]
            TileMemoryBindInfoQCOM* pTileMemoryBindInfo
    ) => ThisThread.CmdBindTileMemoryQCOM(commandBuffer, pTileMemoryBindInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_memory_heap"],
        ImpliesSets = [
            "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindTileMemoryQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindTileMemoryQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkTileMemoryBindInfoQCOM *")]
            Ref<TileMemoryBindInfoQCOM> pTileMemoryBindInfo
    )
    {
        fixed (TileMemoryBindInfoQCOM* __dsl_pTileMemoryBindInfo = pTileMemoryBindInfo)
        {
            ((IVk)this).CmdBindTileMemoryQCOM(commandBuffer, __dsl_pTileMemoryBindInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_memory_heap"],
        ImpliesSets = [
            "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindTileMemoryQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindTileMemoryQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkTileMemoryBindInfoQCOM *")]
            Ref<TileMemoryBindInfoQCOM> pTileMemoryBindInfo
    ) => ThisThread.CmdBindTileMemoryQCOM(commandBuffer, pTileMemoryBindInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindTransformFeedbackBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindTransformFeedbackBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle* pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
        [NativeTypeName("const VkDeviceSize *")] ulong* pSizes
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                uint,
                BufferHandle*,
                ulong*,
                ulong*,
                void>)(
                _slots[50] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[50] = nativeContext.LoadFunction(
                        "vkCmdBindTransformFeedbackBuffersEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindTransformFeedbackBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindTransformFeedbackBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle* pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
        [NativeTypeName("const VkDeviceSize *")] ulong* pSizes
    ) =>
        ThisThread.CmdBindTransformFeedbackBuffersEXT(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets,
            pSizes
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindTransformFeedbackBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindTransformFeedbackBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes
    )
    {
        fixed (ulong* __dsl_pSizes = pSizes)
        fixed (ulong* __dsl_pOffsets = pOffsets)
        fixed (BufferHandle* __dsl_pBuffers = pBuffers)
        {
            ((IVk)this).CmdBindTransformFeedbackBuffersEXT(
                commandBuffer,
                firstBinding,
                bindingCount,
                __dsl_pBuffers,
                __dsl_pOffsets,
                __dsl_pSizes
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindTransformFeedbackBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindTransformFeedbackBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes
    ) =>
        ThisThread.CmdBindTransformFeedbackBuffersEXT(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets,
            pSizes
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindVertexBuffers(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle* pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, BufferHandle*, ulong*, void>)(
                _slots[51] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[51] = nativeContext.LoadFunction("vkCmdBindVertexBuffers", "vulkan")
            )
        )(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindVertexBuffers(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle* pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets
    ) =>
        ThisThread.CmdBindVertexBuffers(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindVertexBuffers(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets
    )
    {
        fixed (ulong* __dsl_pOffsets = pOffsets)
        fixed (BufferHandle* __dsl_pBuffers = pBuffers)
        {
            ((IVk)this).CmdBindVertexBuffers(
                commandBuffer,
                firstBinding,
                bindingCount,
                __dsl_pBuffers,
                __dsl_pOffsets
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindVertexBuffers(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets
    ) =>
        ThisThread.CmdBindVertexBuffers(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindVertexBuffers2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle* pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
        [NativeTypeName("const VkDeviceSize *")] ulong* pSizes,
        [NativeTypeName("const VkDeviceSize *")] ulong* pStrides
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                uint,
                BufferHandle*,
                ulong*,
                ulong*,
                ulong*,
                void>)(
                _slots[52] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[52] = nativeContext.LoadFunction("vkCmdBindVertexBuffers2", "vulkan")
            )
        )(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindVertexBuffers2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle* pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
        [NativeTypeName("const VkDeviceSize *")] ulong* pSizes,
        [NativeTypeName("const VkDeviceSize *")] ulong* pStrides
    ) =>
        ThisThread.CmdBindVertexBuffers2(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets,
            pSizes,
            pStrides
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindVertexBuffers2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pStrides
    )
    {
        fixed (ulong* __dsl_pStrides = pStrides)
        fixed (ulong* __dsl_pSizes = pSizes)
        fixed (ulong* __dsl_pOffsets = pOffsets)
        fixed (BufferHandle* __dsl_pBuffers = pBuffers)
        {
            ((IVk)this).CmdBindVertexBuffers2(
                commandBuffer,
                firstBinding,
                bindingCount,
                __dsl_pBuffers,
                __dsl_pOffsets,
                __dsl_pSizes,
                __dsl_pStrides
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindVertexBuffers2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pStrides
    ) =>
        ThisThread.CmdBindVertexBuffers2(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets,
            pSizes,
            pStrides
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindVertexBuffers2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle* pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
        [NativeTypeName("const VkDeviceSize *")] ulong* pSizes,
        [NativeTypeName("const VkDeviceSize *")] ulong* pStrides
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                uint,
                BufferHandle*,
                ulong*,
                ulong*,
                ulong*,
                void>)(
                _slots[53] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[53] = nativeContext.LoadFunction(
                        "vkCmdBindVertexBuffers2EXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindVertexBuffers2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle* pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
        [NativeTypeName("const VkDeviceSize *")] ulong* pSizes,
        [NativeTypeName("const VkDeviceSize *")] ulong* pStrides
    ) =>
        ThisThread.CmdBindVertexBuffers2EXT(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets,
            pSizes,
            pStrides
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBindVertexBuffers2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pStrides
    )
    {
        fixed (ulong* __dsl_pStrides = pStrides)
        fixed (ulong* __dsl_pSizes = pSizes)
        fixed (ulong* __dsl_pOffsets = pOffsets)
        fixed (BufferHandle* __dsl_pBuffers = pBuffers)
        {
            ((IVk)this).CmdBindVertexBuffers2EXT(
                commandBuffer,
                firstBinding,
                bindingCount,
                __dsl_pBuffers,
                __dsl_pOffsets,
                __dsl_pSizes,
                __dsl_pStrides
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindVertexBuffers2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pStrides
    ) =>
        ThisThread.CmdBindVertexBuffers2EXT(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets,
            pSizes,
            pStrides
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBlitImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageBlit *")] ImageBlit* pRegions,
        Filter filter
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                ImageHandle,
                ImageLayout,
                ImageHandle,
                ImageLayout,
                uint,
                ImageBlit*,
                Filter,
                void>)(
                _slots[54] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[54] = nativeContext.LoadFunction("vkCmdBlitImage", "vulkan")
            )
        )(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions,
            filter
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBlitImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageBlit *")] ImageBlit* pRegions,
        Filter filter
    ) =>
        ThisThread.CmdBlitImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions,
            filter
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBlitImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageBlit *")] Ref<ImageBlit> pRegions,
        Filter filter
    )
    {
        fixed (ImageBlit* __dsl_pRegions = pRegions)
        {
            ((IVk)this).CmdBlitImage(
                commandBuffer,
                srcImage,
                srcImageLayout,
                dstImage,
                dstImageLayout,
                regionCount,
                __dsl_pRegions,
                filter
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBlitImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageBlit *")] Ref<ImageBlit> pRegions,
        Filter filter
    ) =>
        ThisThread.CmdBlitImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions,
            filter
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBlitImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageBlit *")] ImageBlit pRegions,
        Filter filter
    ) =>
        ((IVk)this).CmdBlitImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            1,
            (ImageBlit*)&pRegions,
            filter
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBlitImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageBlit *")] ImageBlit pRegions,
        Filter filter
    ) =>
        ThisThread.CmdBlitImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            pRegions,
            filter
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBlitImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] BlitImageInfo2* pBlitImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BlitImageInfo2*, void>)(
                _slots[55] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[55] = nativeContext.LoadFunction("vkCmdBlitImage2", "vulkan")
            )
        )(commandBuffer, pBlitImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBlitImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] BlitImageInfo2* pBlitImageInfo
    ) => ThisThread.CmdBlitImage2(commandBuffer, pBlitImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBlitImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] Ref<BlitImageInfo2> pBlitImageInfo
    )
    {
        fixed (BlitImageInfo2* __dsl_pBlitImageInfo = pBlitImageInfo)
        {
            ((IVk)this).CmdBlitImage2(commandBuffer, __dsl_pBlitImageInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBlitImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] Ref<BlitImageInfo2> pBlitImageInfo
    ) => ThisThread.CmdBlitImage2(commandBuffer, pBlitImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBlitImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] BlitImageInfo2* pBlitImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BlitImageInfo2*, void>)(
                _slots[56] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[56] = nativeContext.LoadFunction("vkCmdBlitImage2KHR", "vulkan")
            )
        )(commandBuffer, pBlitImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBlitImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] BlitImageInfo2* pBlitImageInfo
    ) => ThisThread.CmdBlitImage2KHR(commandBuffer, pBlitImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBlitImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] Ref<BlitImageInfo2> pBlitImageInfo
    )
    {
        fixed (BlitImageInfo2* __dsl_pBlitImageInfo = pBlitImageInfo)
        {
            ((IVk)this).CmdBlitImage2KHR(commandBuffer, __dsl_pBlitImageInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBlitImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] Ref<BlitImageInfo2> pBlitImageInfo
    ) => ThisThread.CmdBlitImage2KHR(commandBuffer, pBlitImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBuildAccelerationStructureNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkAccelerationStructureInfoNV *")]
            AccelerationStructureInfoNV* pInfo,
        [NativeTypeName("VkBuffer")] BufferHandle instanceData,
        [NativeTypeName("VkDeviceSize")] ulong instanceOffset,
        [NativeTypeName("VkBool32")] MaybeBool<uint> update,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle dst,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle src,
        [NativeTypeName("VkBuffer")] BufferHandle scratch,
        [NativeTypeName("VkDeviceSize")] ulong scratchOffset
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                AccelerationStructureInfoNV*,
                BufferHandle,
                ulong,
                MaybeBool<uint>,
                AccelerationStructureNVHandle,
                AccelerationStructureNVHandle,
                BufferHandle,
                ulong,
                void>)(
                _slots[57] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[57] = nativeContext.LoadFunction(
                        "vkCmdBuildAccelerationStructureNV",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            pInfo,
            instanceData,
            instanceOffset,
            update,
            dst,
            src,
            scratch,
            scratchOffset
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildAccelerationStructureNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkAccelerationStructureInfoNV *")]
            AccelerationStructureInfoNV* pInfo,
        [NativeTypeName("VkBuffer")] BufferHandle instanceData,
        [NativeTypeName("VkDeviceSize")] ulong instanceOffset,
        [NativeTypeName("VkBool32")] MaybeBool<uint> update,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle dst,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle src,
        [NativeTypeName("VkBuffer")] BufferHandle scratch,
        [NativeTypeName("VkDeviceSize")] ulong scratchOffset
    ) =>
        ThisThread.CmdBuildAccelerationStructureNV(
            commandBuffer,
            pInfo,
            instanceData,
            instanceOffset,
            update,
            dst,
            src,
            scratch,
            scratchOffset
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBuildAccelerationStructureNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkAccelerationStructureInfoNV *")]
            Ref<AccelerationStructureInfoNV> pInfo,
        [NativeTypeName("VkBuffer")] BufferHandle instanceData,
        [NativeTypeName("VkDeviceSize")] ulong instanceOffset,
        [NativeTypeName("VkBool32")] MaybeBool<uint> update,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle dst,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle src,
        [NativeTypeName("VkBuffer")] BufferHandle scratch,
        [NativeTypeName("VkDeviceSize")] ulong scratchOffset
    )
    {
        fixed (AccelerationStructureInfoNV* __dsl_pInfo = pInfo)
        {
            ((IVk)this).CmdBuildAccelerationStructureNV(
                commandBuffer,
                __dsl_pInfo,
                instanceData,
                instanceOffset,
                update,
                dst,
                src,
                scratch,
                scratchOffset
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildAccelerationStructureNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkAccelerationStructureInfoNV *")]
            Ref<AccelerationStructureInfoNV> pInfo,
        [NativeTypeName("VkBuffer")] BufferHandle instanceData,
        [NativeTypeName("VkDeviceSize")] ulong instanceOffset,
        [NativeTypeName("VkBool32")] MaybeBool<uint> update,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle dst,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle src,
        [NativeTypeName("VkBuffer")] BufferHandle scratch,
        [NativeTypeName("VkDeviceSize")] ulong scratchOffset
    ) =>
        ThisThread.CmdBuildAccelerationStructureNV(
            commandBuffer,
            pInfo,
            instanceData,
            instanceOffset,
            update,
            dst,
            src,
            scratch,
            scratchOffset
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresIndirectKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBuildAccelerationStructuresIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pInfos,
        [NativeTypeName("const VkDeviceAddress *")] ulong* pIndirectDeviceAddresses,
        [NativeTypeName("const uint32_t *")] uint* pIndirectStrides,
        [NativeTypeName("const uint32_t *const *")] uint** ppMaxPrimitiveCounts
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                AccelerationStructureBuildGeometryInfoKHR*,
                ulong*,
                uint*,
                uint**,
                void>)(
                _slots[58] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[58] = nativeContext.LoadFunction(
                        "vkCmdBuildAccelerationStructuresIndirectKHR",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            infoCount,
            pInfos,
            pIndirectDeviceAddresses,
            pIndirectStrides,
            ppMaxPrimitiveCounts
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresIndirectKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildAccelerationStructuresIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pInfos,
        [NativeTypeName("const VkDeviceAddress *")] ulong* pIndirectDeviceAddresses,
        [NativeTypeName("const uint32_t *")] uint* pIndirectStrides,
        [NativeTypeName("const uint32_t *const *")] uint** ppMaxPrimitiveCounts
    ) =>
        ThisThread.CmdBuildAccelerationStructuresIndirectKHR(
            commandBuffer,
            infoCount,
            pInfos,
            pIndirectDeviceAddresses,
            pIndirectStrides,
            ppMaxPrimitiveCounts
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresIndirectKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBuildAccelerationStructuresIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
        [NativeTypeName("const VkDeviceAddress *")] Ref<ulong> pIndirectDeviceAddresses,
        [NativeTypeName("const uint32_t *")] Ref<uint> pIndirectStrides,
        [NativeTypeName("const uint32_t *const *")] Ref2D<uint> ppMaxPrimitiveCounts
    )
    {
        fixed (uint** __dsl_ppMaxPrimitiveCounts = ppMaxPrimitiveCounts)
        fixed (uint* __dsl_pIndirectStrides = pIndirectStrides)
        fixed (ulong* __dsl_pIndirectDeviceAddresses = pIndirectDeviceAddresses)
        fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pInfos = pInfos)
        {
            ((IVk)this).CmdBuildAccelerationStructuresIndirectKHR(
                commandBuffer,
                infoCount,
                __dsl_pInfos,
                __dsl_pIndirectDeviceAddresses,
                __dsl_pIndirectStrides,
                __dsl_ppMaxPrimitiveCounts
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresIndirectKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildAccelerationStructuresIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
        [NativeTypeName("const VkDeviceAddress *")] Ref<ulong> pIndirectDeviceAddresses,
        [NativeTypeName("const uint32_t *")] Ref<uint> pIndirectStrides,
        [NativeTypeName("const uint32_t *const *")] Ref2D<uint> ppMaxPrimitiveCounts
    ) =>
        ThisThread.CmdBuildAccelerationStructuresIndirectKHR(
            commandBuffer,
            infoCount,
            pInfos,
            pIndirectDeviceAddresses,
            pIndirectStrides,
            ppMaxPrimitiveCounts
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBuildAccelerationStructuresKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            AccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                AccelerationStructureBuildGeometryInfoKHR*,
                AccelerationStructureBuildRangeInfoKHR**,
                void>)(
                _slots[59] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[59] = nativeContext.LoadFunction(
                        "vkCmdBuildAccelerationStructuresKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildAccelerationStructuresKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            AccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos
    ) =>
        ThisThread.CmdBuildAccelerationStructuresKHR(
            commandBuffer,
            infoCount,
            pInfos,
            ppBuildRangeInfos
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBuildAccelerationStructuresKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            Ref2D<AccelerationStructureBuildRangeInfoKHR> ppBuildRangeInfos
    )
    {
        fixed (AccelerationStructureBuildRangeInfoKHR** __dsl_ppBuildRangeInfos = ppBuildRangeInfos)
        fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pInfos = pInfos)
        {
            ((IVk)this).CmdBuildAccelerationStructuresKHR(
                commandBuffer,
                infoCount,
                __dsl_pInfos,
                __dsl_ppBuildRangeInfos
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildAccelerationStructuresKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            Ref2D<AccelerationStructureBuildRangeInfoKHR> ppBuildRangeInfos
    ) =>
        ThisThread.CmdBuildAccelerationStructuresKHR(
            commandBuffer,
            infoCount,
            pInfos,
            ppBuildRangeInfos
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildClusterAccelerationStructureIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBuildClusterAccelerationStructureIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkClusterAccelerationStructureCommandsInfoNV *")]
            ClusterAccelerationStructureCommandsInfoNV* pCommandInfos
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                ClusterAccelerationStructureCommandsInfoNV*,
                void>)(
                _slots[60] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[60] = nativeContext.LoadFunction(
                        "vkCmdBuildClusterAccelerationStructureIndirectNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, pCommandInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildClusterAccelerationStructureIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildClusterAccelerationStructureIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkClusterAccelerationStructureCommandsInfoNV *")]
            ClusterAccelerationStructureCommandsInfoNV* pCommandInfos
    ) => ThisThread.CmdBuildClusterAccelerationStructureIndirectNV(commandBuffer, pCommandInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildClusterAccelerationStructureIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBuildClusterAccelerationStructureIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkClusterAccelerationStructureCommandsInfoNV *")]
            Ref<ClusterAccelerationStructureCommandsInfoNV> pCommandInfos
    )
    {
        fixed (ClusterAccelerationStructureCommandsInfoNV* __dsl_pCommandInfos = pCommandInfos)
        {
            ((IVk)this).CmdBuildClusterAccelerationStructureIndirectNV(
                commandBuffer,
                __dsl_pCommandInfos
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildClusterAccelerationStructureIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildClusterAccelerationStructureIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkClusterAccelerationStructureCommandsInfoNV *")]
            Ref<ClusterAccelerationStructureCommandsInfoNV> pCommandInfos
    ) => ThisThread.CmdBuildClusterAccelerationStructureIndirectNV(commandBuffer, pCommandInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBuildMicromapsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pInfos
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, MicromapBuildInfoEXT*, void>)(
                _slots[61] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[61] = nativeContext.LoadFunction("vkCmdBuildMicromapsEXT", "vulkan")
            )
        )(commandBuffer, infoCount, pInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildMicromapsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pInfos
    ) => ThisThread.CmdBuildMicromapsEXT(commandBuffer, infoCount, pInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBuildMicromapsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pInfos
    )
    {
        fixed (MicromapBuildInfoEXT* __dsl_pInfos = pInfos)
        {
            ((IVk)this).CmdBuildMicromapsEXT(commandBuffer, infoCount, __dsl_pInfos);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildMicromapsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pInfos
    ) => ThisThread.CmdBuildMicromapsEXT(commandBuffer, infoCount, pInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBuildMicromapsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT pInfos
    ) => ((IVk)this).CmdBuildMicromapsEXT(commandBuffer, 1, (MicromapBuildInfoEXT*)&pInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildMicromapsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT pInfos
    ) => ThisThread.CmdBuildMicromapsEXT(commandBuffer, pInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildPartitionedAccelerationStructuresNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBuildPartitionedAccelerationStructuresNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBuildPartitionedAccelerationStructureInfoNV *")]
            BuildPartitionedAccelerationStructureInfoNV* pBuildInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                BuildPartitionedAccelerationStructureInfoNV*,
                void>)(
                _slots[62] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[62] = nativeContext.LoadFunction(
                        "vkCmdBuildPartitionedAccelerationStructuresNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, pBuildInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildPartitionedAccelerationStructuresNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildPartitionedAccelerationStructuresNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBuildPartitionedAccelerationStructureInfoNV *")]
            BuildPartitionedAccelerationStructureInfoNV* pBuildInfo
    ) => ThisThread.CmdBuildPartitionedAccelerationStructuresNV(commandBuffer, pBuildInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildPartitionedAccelerationStructuresNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdBuildPartitionedAccelerationStructuresNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBuildPartitionedAccelerationStructureInfoNV *")]
            Ref<BuildPartitionedAccelerationStructureInfoNV> pBuildInfo
    )
    {
        fixed (BuildPartitionedAccelerationStructureInfoNV* __dsl_pBuildInfo = pBuildInfo)
        {
            ((IVk)this).CmdBuildPartitionedAccelerationStructuresNV(
                commandBuffer,
                __dsl_pBuildInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildPartitionedAccelerationStructuresNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildPartitionedAccelerationStructuresNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBuildPartitionedAccelerationStructureInfoNV *")]
            Ref<BuildPartitionedAccelerationStructureInfoNV> pBuildInfo
    ) => ThisThread.CmdBuildPartitionedAccelerationStructuresNV(commandBuffer, pBuildInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearAttachments")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdClearAttachments(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkClearAttachment *")] ClearAttachment* pAttachments,
        [NativeTypeName("uint32_t")] uint rectCount,
        [NativeTypeName("const VkClearRect *")] ClearRect* pRects
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                ClearAttachment*,
                uint,
                ClearRect*,
                void>)(
                _slots[63] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[63] = nativeContext.LoadFunction("vkCmdClearAttachments", "vulkan")
            )
        )(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearAttachments")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearAttachments(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkClearAttachment *")] ClearAttachment* pAttachments,
        [NativeTypeName("uint32_t")] uint rectCount,
        [NativeTypeName("const VkClearRect *")] ClearRect* pRects
    ) =>
        ThisThread.CmdClearAttachments(
            commandBuffer,
            attachmentCount,
            pAttachments,
            rectCount,
            pRects
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearAttachments")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdClearAttachments(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkClearAttachment *")] Ref<ClearAttachment> pAttachments,
        [NativeTypeName("uint32_t")] uint rectCount,
        [NativeTypeName("const VkClearRect *")] Ref<ClearRect> pRects
    )
    {
        fixed (ClearRect* __dsl_pRects = pRects)
        fixed (ClearAttachment* __dsl_pAttachments = pAttachments)
        {
            ((IVk)this).CmdClearAttachments(
                commandBuffer,
                attachmentCount,
                __dsl_pAttachments,
                rectCount,
                __dsl_pRects
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearAttachments")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearAttachments(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkClearAttachment *")] Ref<ClearAttachment> pAttachments,
        [NativeTypeName("uint32_t")] uint rectCount,
        [NativeTypeName("const VkClearRect *")] Ref<ClearRect> pRects
    ) =>
        ThisThread.CmdClearAttachments(
            commandBuffer,
            attachmentCount,
            pAttachments,
            rectCount,
            pRects
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearColorImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdClearColorImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearColorValue *")] ClearColorValue* pColor,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange* pRanges
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                ImageHandle,
                ImageLayout,
                ClearColorValue*,
                uint,
                ImageSubresourceRange*,
                void>)(
                _slots[64] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[64] = nativeContext.LoadFunction("vkCmdClearColorImage", "vulkan")
            )
        )(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearColorImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearColorImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearColorValue *")] ClearColorValue* pColor,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange* pRanges
    ) =>
        ThisThread.CmdClearColorImage(
            commandBuffer,
            image,
            imageLayout,
            pColor,
            rangeCount,
            pRanges
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearColorImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdClearColorImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearColorValue *")] Ref<ClearColorValue> pColor,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] Ref<ImageSubresourceRange> pRanges
    )
    {
        fixed (ImageSubresourceRange* __dsl_pRanges = pRanges)
        fixed (ClearColorValue* __dsl_pColor = pColor)
        {
            ((IVk)this).CmdClearColorImage(
                commandBuffer,
                image,
                imageLayout,
                __dsl_pColor,
                rangeCount,
                __dsl_pRanges
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearColorImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearColorImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearColorValue *")] Ref<ClearColorValue> pColor,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] Ref<ImageSubresourceRange> pRanges
    ) =>
        ThisThread.CmdClearColorImage(
            commandBuffer,
            image,
            imageLayout,
            pColor,
            rangeCount,
            pRanges
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearColorImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdClearColorImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearColorValue *")] Ref<ClearColorValue> pColor,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange pRanges
    )
    {
        fixed (ClearColorValue* __dsl_pColor = pColor)
        {
            ((IVk)this).CmdClearColorImage(
                commandBuffer,
                image,
                imageLayout,
                __dsl_pColor,
                1,
                (ImageSubresourceRange*)&pRanges
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearColorImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearColorImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearColorValue *")] Ref<ClearColorValue> pColor,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange pRanges
    ) => ThisThread.CmdClearColorImage(commandBuffer, image, imageLayout, pColor, pRanges);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearDepthStencilImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdClearDepthStencilImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearDepthStencilValue *")] ClearDepthStencilValue* pDepthStencil,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange* pRanges
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                ImageHandle,
                ImageLayout,
                ClearDepthStencilValue*,
                uint,
                ImageSubresourceRange*,
                void>)(
                _slots[65] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[65] = nativeContext.LoadFunction(
                        "vkCmdClearDepthStencilImage",
                        "vulkan"
                    )
            )
        )(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearDepthStencilImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearDepthStencilImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearDepthStencilValue *")] ClearDepthStencilValue* pDepthStencil,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange* pRanges
    ) =>
        ThisThread.CmdClearDepthStencilImage(
            commandBuffer,
            image,
            imageLayout,
            pDepthStencil,
            rangeCount,
            pRanges
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearDepthStencilImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdClearDepthStencilImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearDepthStencilValue *")]
            Ref<ClearDepthStencilValue> pDepthStencil,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] Ref<ImageSubresourceRange> pRanges
    )
    {
        fixed (ImageSubresourceRange* __dsl_pRanges = pRanges)
        fixed (ClearDepthStencilValue* __dsl_pDepthStencil = pDepthStencil)
        {
            ((IVk)this).CmdClearDepthStencilImage(
                commandBuffer,
                image,
                imageLayout,
                __dsl_pDepthStencil,
                rangeCount,
                __dsl_pRanges
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearDepthStencilImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearDepthStencilImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearDepthStencilValue *")]
            Ref<ClearDepthStencilValue> pDepthStencil,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] Ref<ImageSubresourceRange> pRanges
    ) =>
        ThisThread.CmdClearDepthStencilImage(
            commandBuffer,
            image,
            imageLayout,
            pDepthStencil,
            rangeCount,
            pRanges
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearDepthStencilImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdClearDepthStencilImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearDepthStencilValue *")]
            Ref<ClearDepthStencilValue> pDepthStencil,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange pRanges
    )
    {
        fixed (ClearDepthStencilValue* __dsl_pDepthStencil = pDepthStencil)
        {
            ((IVk)this).CmdClearDepthStencilImage(
                commandBuffer,
                image,
                imageLayout,
                __dsl_pDepthStencil,
                1,
                (ImageSubresourceRange*)&pRanges
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearDepthStencilImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearDepthStencilImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearDepthStencilValue *")]
            Ref<ClearDepthStencilValue> pDepthStencil,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange pRanges
    ) =>
        ThisThread.CmdClearDepthStencilImage(
            commandBuffer,
            image,
            imageLayout,
            pDepthStencil,
            pRanges
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdControlVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdControlVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoCodingControlInfoKHR *")]
            VideoCodingControlInfoKHR* pCodingControlInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, VideoCodingControlInfoKHR*, void>)(
                _slots[66] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[66] = nativeContext.LoadFunction(
                        "vkCmdControlVideoCodingKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pCodingControlInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdControlVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdControlVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoCodingControlInfoKHR *")]
            VideoCodingControlInfoKHR* pCodingControlInfo
    ) => ThisThread.CmdControlVideoCodingKHR(commandBuffer, pCodingControlInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdControlVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdControlVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoCodingControlInfoKHR *")]
            Ref<VideoCodingControlInfoKHR> pCodingControlInfo
    )
    {
        fixed (VideoCodingControlInfoKHR* __dsl_pCodingControlInfo = pCodingControlInfo)
        {
            ((IVk)this).CmdControlVideoCodingKHR(commandBuffer, __dsl_pCodingControlInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdControlVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdControlVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoCodingControlInfoKHR *")]
            Ref<VideoCodingControlInfoKHR> pCodingControlInfo
    ) => ThisThread.CmdControlVideoCodingKHR(commandBuffer, pCodingControlInfo);

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            ConvertCooperativeVectorMatrixInfoNV* pInfos
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                ConvertCooperativeVectorMatrixInfoNV*,
                void>)(
                _slots[67] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[67] = nativeContext.LoadFunction(
                        "vkCmdConvertCooperativeVectorMatrixNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, infoCount, pInfos);

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            ConvertCooperativeVectorMatrixInfoNV* pInfos
    ) => ThisThread.CmdConvertCooperativeVectorMatrixNV(commandBuffer, infoCount, pInfos);

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            Ref<ConvertCooperativeVectorMatrixInfoNV> pInfos
    )
    {
        fixed (ConvertCooperativeVectorMatrixInfoNV* __dsl_pInfos = pInfos)
        {
            ((IVk)this).CmdConvertCooperativeVectorMatrixNV(commandBuffer, infoCount, __dsl_pInfos);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            Ref<ConvertCooperativeVectorMatrixInfoNV> pInfos
    ) => ThisThread.CmdConvertCooperativeVectorMatrixNV(commandBuffer, infoCount, pInfos);

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            ConvertCooperativeVectorMatrixInfoNV pInfos
    ) =>
        ((IVk)this).CmdConvertCooperativeVectorMatrixNV(
            commandBuffer,
            1,
            (ConvertCooperativeVectorMatrixInfoNV*)&pInfos
        );

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            ConvertCooperativeVectorMatrixInfoNV pInfos
    ) => ThisThread.CmdConvertCooperativeVectorMatrixNV(commandBuffer, pInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            CopyAccelerationStructureInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CopyAccelerationStructureInfoKHR*, void>)(
                _slots[68] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[68] = nativeContext.LoadFunction(
                        "vkCmdCopyAccelerationStructureKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            CopyAccelerationStructureInfoKHR* pInfo
    ) => ThisThread.CmdCopyAccelerationStructureKHR(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            Ref<CopyAccelerationStructureInfoKHR> pInfo
    )
    {
        fixed (CopyAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
        {
            ((IVk)this).CmdCopyAccelerationStructureKHR(commandBuffer, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            Ref<CopyAccelerationStructureInfoKHR> pInfo
    ) => ThisThread.CmdCopyAccelerationStructureKHR(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyAccelerationStructureNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle dst,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle src,
        CopyAccelerationStructureModeKHR mode
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                AccelerationStructureNVHandle,
                AccelerationStructureNVHandle,
                CopyAccelerationStructureModeKHR,
                void>)(
                _slots[69] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[69] = nativeContext.LoadFunction(
                        "vkCmdCopyAccelerationStructureNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, dst, src, mode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyAccelerationStructureNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle dst,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle src,
        CopyAccelerationStructureModeKHR mode
    ) => ThisThread.CmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureToMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            CopyAccelerationStructureToMemoryInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                CopyAccelerationStructureToMemoryInfoKHR*,
                void>)(
                _slots[70] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[70] = nativeContext.LoadFunction(
                        "vkCmdCopyAccelerationStructureToMemoryKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureToMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            CopyAccelerationStructureToMemoryInfoKHR* pInfo
    ) => ThisThread.CmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureToMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            Ref<CopyAccelerationStructureToMemoryInfoKHR> pInfo
    )
    {
        fixed (CopyAccelerationStructureToMemoryInfoKHR* __dsl_pInfo = pInfo)
        {
            ((IVk)this).CmdCopyAccelerationStructureToMemoryKHR(commandBuffer, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureToMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            Ref<CopyAccelerationStructureToMemoryInfoKHR> pInfo
    ) => ThisThread.CmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferCopy *")] BufferCopy* pRegions
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                BufferHandle,
                BufferHandle,
                uint,
                BufferCopy*,
                void>)(
                _slots[71] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[71] = nativeContext.LoadFunction("vkCmdCopyBuffer", "vulkan")
            )
        )(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferCopy *")] BufferCopy* pRegions
    ) => ThisThread.CmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferCopy *")] Ref<BufferCopy> pRegions
    )
    {
        fixed (BufferCopy* __dsl_pRegions = pRegions)
        {
            ((IVk)this).CmdCopyBuffer(
                commandBuffer,
                srcBuffer,
                dstBuffer,
                regionCount,
                __dsl_pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferCopy *")] Ref<BufferCopy> pRegions
    ) => ThisThread.CmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("const VkBufferCopy *")] BufferCopy pRegions
    ) => ((IVk)this).CmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, 1, (BufferCopy*)&pRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("const VkBufferCopy *")] BufferCopy pRegions
    ) => ThisThread.CmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, pRegions);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] CopyBufferInfo2* pCopyBufferInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CopyBufferInfo2*, void>)(
                _slots[72] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[72] = nativeContext.LoadFunction("vkCmdCopyBuffer2", "vulkan")
            )
        )(commandBuffer, pCopyBufferInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] CopyBufferInfo2* pCopyBufferInfo
    ) => ThisThread.CmdCopyBuffer2(commandBuffer, pCopyBufferInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] Ref<CopyBufferInfo2> pCopyBufferInfo
    )
    {
        fixed (CopyBufferInfo2* __dsl_pCopyBufferInfo = pCopyBufferInfo)
        {
            ((IVk)this).CmdCopyBuffer2(commandBuffer, __dsl_pCopyBufferInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] Ref<CopyBufferInfo2> pCopyBufferInfo
    ) => ThisThread.CmdCopyBuffer2(commandBuffer, pCopyBufferInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] CopyBufferInfo2* pCopyBufferInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CopyBufferInfo2*, void>)(
                _slots[73] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[73] = nativeContext.LoadFunction("vkCmdCopyBuffer2KHR", "vulkan")
            )
        )(commandBuffer, pCopyBufferInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] CopyBufferInfo2* pCopyBufferInfo
    ) => ThisThread.CmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] Ref<CopyBufferInfo2> pCopyBufferInfo
    )
    {
        fixed (CopyBufferInfo2* __dsl_pCopyBufferInfo = pCopyBufferInfo)
        {
            ((IVk)this).CmdCopyBuffer2KHR(commandBuffer, __dsl_pCopyBufferInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] Ref<CopyBufferInfo2> pCopyBufferInfo
    ) => ThisThread.CmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyBufferToImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy* pRegions
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                BufferHandle,
                ImageHandle,
                ImageLayout,
                uint,
                BufferImageCopy*,
                void>)(
                _slots[74] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[74] = nativeContext.LoadFunction("vkCmdCopyBufferToImage", "vulkan")
            )
        )(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBufferToImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy* pRegions
    ) =>
        ThisThread.CmdCopyBufferToImage(
            commandBuffer,
            srcBuffer,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyBufferToImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] Ref<BufferImageCopy> pRegions
    )
    {
        fixed (BufferImageCopy* __dsl_pRegions = pRegions)
        {
            ((IVk)this).CmdCopyBufferToImage(
                commandBuffer,
                srcBuffer,
                dstImage,
                dstImageLayout,
                regionCount,
                __dsl_pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBufferToImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] Ref<BufferImageCopy> pRegions
    ) =>
        ThisThread.CmdCopyBufferToImage(
            commandBuffer,
            srcBuffer,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyBufferToImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy pRegions
    ) =>
        ((IVk)this).CmdCopyBufferToImage(
            commandBuffer,
            srcBuffer,
            dstImage,
            dstImageLayout,
            1,
            (BufferImageCopy*)&pRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBufferToImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle srcBuffer,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy pRegions
    ) =>
        ThisThread.CmdCopyBufferToImage(
            commandBuffer,
            srcBuffer,
            dstImage,
            dstImageLayout,
            pRegions
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyBufferToImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            CopyBufferToImageInfo2* pCopyBufferToImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CopyBufferToImageInfo2*, void>)(
                _slots[75] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[75] = nativeContext.LoadFunction("vkCmdCopyBufferToImage2", "vulkan")
            )
        )(commandBuffer, pCopyBufferToImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBufferToImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            CopyBufferToImageInfo2* pCopyBufferToImageInfo
    ) => ThisThread.CmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyBufferToImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            Ref<CopyBufferToImageInfo2> pCopyBufferToImageInfo
    )
    {
        fixed (CopyBufferToImageInfo2* __dsl_pCopyBufferToImageInfo = pCopyBufferToImageInfo)
        {
            ((IVk)this).CmdCopyBufferToImage2(commandBuffer, __dsl_pCopyBufferToImageInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBufferToImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            Ref<CopyBufferToImageInfo2> pCopyBufferToImageInfo
    ) => ThisThread.CmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyBufferToImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            CopyBufferToImageInfo2* pCopyBufferToImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CopyBufferToImageInfo2*, void>)(
                _slots[76] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[76] = nativeContext.LoadFunction(
                        "vkCmdCopyBufferToImage2KHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pCopyBufferToImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBufferToImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            CopyBufferToImageInfo2* pCopyBufferToImageInfo
    ) => ThisThread.CmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyBufferToImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            Ref<CopyBufferToImageInfo2> pCopyBufferToImageInfo
    )
    {
        fixed (CopyBufferToImageInfo2* __dsl_pCopyBufferToImageInfo = pCopyBufferToImageInfo)
        {
            ((IVk)this).CmdCopyBufferToImage2KHR(commandBuffer, __dsl_pCopyBufferToImageInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBufferToImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            Ref<CopyBufferToImageInfo2> pCopyBufferToImageInfo
    ) => ThisThread.CmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageCopy *")] ImageCopy* pRegions
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                ImageHandle,
                ImageLayout,
                ImageHandle,
                ImageLayout,
                uint,
                ImageCopy*,
                void>)(
                _slots[77] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[77] = nativeContext.LoadFunction("vkCmdCopyImage", "vulkan")
            )
        )(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageCopy *")] ImageCopy* pRegions
    ) =>
        ThisThread.CmdCopyImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageCopy *")] Ref<ImageCopy> pRegions
    )
    {
        fixed (ImageCopy* __dsl_pRegions = pRegions)
        {
            ((IVk)this).CmdCopyImage(
                commandBuffer,
                srcImage,
                srcImageLayout,
                dstImage,
                dstImageLayout,
                regionCount,
                __dsl_pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageCopy *")] Ref<ImageCopy> pRegions
    ) =>
        ThisThread.CmdCopyImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageCopy *")] ImageCopy pRegions
    ) =>
        ((IVk)this).CmdCopyImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            1,
            (ImageCopy*)&pRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageCopy *")] ImageCopy pRegions
    ) =>
        ThisThread.CmdCopyImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            pRegions
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] CopyImageInfo2* pCopyImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CopyImageInfo2*, void>)(
                _slots[78] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[78] = nativeContext.LoadFunction("vkCmdCopyImage2", "vulkan")
            )
        )(commandBuffer, pCopyImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] CopyImageInfo2* pCopyImageInfo
    ) => ThisThread.CmdCopyImage2(commandBuffer, pCopyImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] Ref<CopyImageInfo2> pCopyImageInfo
    )
    {
        fixed (CopyImageInfo2* __dsl_pCopyImageInfo = pCopyImageInfo)
        {
            ((IVk)this).CmdCopyImage2(commandBuffer, __dsl_pCopyImageInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] Ref<CopyImageInfo2> pCopyImageInfo
    ) => ThisThread.CmdCopyImage2(commandBuffer, pCopyImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] CopyImageInfo2* pCopyImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CopyImageInfo2*, void>)(
                _slots[79] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[79] = nativeContext.LoadFunction("vkCmdCopyImage2KHR", "vulkan")
            )
        )(commandBuffer, pCopyImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] CopyImageInfo2* pCopyImageInfo
    ) => ThisThread.CmdCopyImage2KHR(commandBuffer, pCopyImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] Ref<CopyImageInfo2> pCopyImageInfo
    )
    {
        fixed (CopyImageInfo2* __dsl_pCopyImageInfo = pCopyImageInfo)
        {
            ((IVk)this).CmdCopyImage2KHR(commandBuffer, __dsl_pCopyImageInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] Ref<CopyImageInfo2> pCopyImageInfo
    ) => ThisThread.CmdCopyImage2KHR(commandBuffer, pCopyImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyImageToBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy* pRegions
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                ImageHandle,
                ImageLayout,
                BufferHandle,
                uint,
                BufferImageCopy*,
                void>)(
                _slots[80] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[80] = nativeContext.LoadFunction("vkCmdCopyImageToBuffer", "vulkan")
            )
        )(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImageToBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy* pRegions
    ) =>
        ThisThread.CmdCopyImageToBuffer(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstBuffer,
            regionCount,
            pRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyImageToBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] Ref<BufferImageCopy> pRegions
    )
    {
        fixed (BufferImageCopy* __dsl_pRegions = pRegions)
        {
            ((IVk)this).CmdCopyImageToBuffer(
                commandBuffer,
                srcImage,
                srcImageLayout,
                dstBuffer,
                regionCount,
                __dsl_pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImageToBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] Ref<BufferImageCopy> pRegions
    ) =>
        ThisThread.CmdCopyImageToBuffer(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstBuffer,
            regionCount,
            pRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyImageToBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy pRegions
    ) =>
        ((IVk)this).CmdCopyImageToBuffer(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstBuffer,
            1,
            (BufferImageCopy*)&pRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImageToBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy pRegions
    ) =>
        ThisThread.CmdCopyImageToBuffer(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstBuffer,
            pRegions
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyImageToBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            CopyImageToBufferInfo2* pCopyImageToBufferInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CopyImageToBufferInfo2*, void>)(
                _slots[81] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[81] = nativeContext.LoadFunction("vkCmdCopyImageToBuffer2", "vulkan")
            )
        )(commandBuffer, pCopyImageToBufferInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImageToBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            CopyImageToBufferInfo2* pCopyImageToBufferInfo
    ) => ThisThread.CmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyImageToBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            Ref<CopyImageToBufferInfo2> pCopyImageToBufferInfo
    )
    {
        fixed (CopyImageToBufferInfo2* __dsl_pCopyImageToBufferInfo = pCopyImageToBufferInfo)
        {
            ((IVk)this).CmdCopyImageToBuffer2(commandBuffer, __dsl_pCopyImageToBufferInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImageToBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            Ref<CopyImageToBufferInfo2> pCopyImageToBufferInfo
    ) => ThisThread.CmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyImageToBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            CopyImageToBufferInfo2* pCopyImageToBufferInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CopyImageToBufferInfo2*, void>)(
                _slots[82] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[82] = nativeContext.LoadFunction(
                        "vkCmdCopyImageToBuffer2KHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pCopyImageToBufferInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImageToBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            CopyImageToBufferInfo2* pCopyImageToBufferInfo
    ) => ThisThread.CmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyImageToBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            Ref<CopyImageToBufferInfo2> pCopyImageToBufferInfo
    )
    {
        fixed (CopyImageToBufferInfo2* __dsl_pCopyImageToBufferInfo = pCopyImageToBufferInfo)
        {
            ((IVk)this).CmdCopyImageToBuffer2KHR(commandBuffer, __dsl_pCopyImageToBufferInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImageToBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            Ref<CopyImageToBufferInfo2> pCopyImageToBufferInfo
    ) => ThisThread.CmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyMemoryIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint copyCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, ulong, uint, uint, void>)(
                _slots[83] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[83] = nativeContext.LoadFunction("vkCmdCopyMemoryIndirectNV", "vulkan")
            )
        )(commandBuffer, copyBufferAddress, copyCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint copyCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => ThisThread.CmdCopyMemoryIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            CopyMemoryToAccelerationStructureInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                CopyMemoryToAccelerationStructureInfoKHR*,
                void>)(
                _slots[84] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[84] = nativeContext.LoadFunction(
                        "vkCmdCopyMemoryToAccelerationStructureKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            CopyMemoryToAccelerationStructureInfoKHR* pInfo
    ) => ThisThread.CmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            Ref<CopyMemoryToAccelerationStructureInfoKHR> pInfo
    )
    {
        fixed (CopyMemoryToAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
        {
            ((IVk)this).CmdCopyMemoryToAccelerationStructureKHR(commandBuffer, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            Ref<CopyMemoryToAccelerationStructureInfoKHR> pInfo
    ) => ThisThread.CmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyMemoryToImageIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint copyCount,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageSubresourceLayers *")]
            ImageSubresourceLayers* pImageSubresources
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                ulong,
                uint,
                uint,
                ImageHandle,
                ImageLayout,
                ImageSubresourceLayers*,
                void>)(
                _slots[85] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[85] = nativeContext.LoadFunction(
                        "vkCmdCopyMemoryToImageIndirectNV",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            copyBufferAddress,
            copyCount,
            stride,
            dstImage,
            dstImageLayout,
            pImageSubresources
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryToImageIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint copyCount,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageSubresourceLayers *")]
            ImageSubresourceLayers* pImageSubresources
    ) =>
        ThisThread.CmdCopyMemoryToImageIndirectNV(
            commandBuffer,
            copyBufferAddress,
            copyCount,
            stride,
            dstImage,
            dstImageLayout,
            pImageSubresources
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyMemoryToImageIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint copyCount,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageSubresourceLayers *")]
            Ref<ImageSubresourceLayers> pImageSubresources
    )
    {
        fixed (ImageSubresourceLayers* __dsl_pImageSubresources = pImageSubresources)
        {
            ((IVk)this).CmdCopyMemoryToImageIndirectNV(
                commandBuffer,
                copyBufferAddress,
                copyCount,
                stride,
                dstImage,
                dstImageLayout,
                __dsl_pImageSubresources
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryToImageIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint copyCount,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageSubresourceLayers *")]
            Ref<ImageSubresourceLayers> pImageSubresources
    ) =>
        ThisThread.CmdCopyMemoryToImageIndirectNV(
            commandBuffer,
            copyBufferAddress,
            copyCount,
            stride,
            dstImage,
            dstImageLayout,
            pImageSubresources
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyMemoryToImageIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageSubresourceLayers *")]
            ImageSubresourceLayers pImageSubresources
    ) =>
        ((IVk)this).CmdCopyMemoryToImageIndirectNV(
            commandBuffer,
            copyBufferAddress,
            1,
            stride,
            dstImage,
            dstImageLayout,
            (ImageSubresourceLayers*)&pImageSubresources
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryToImageIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageSubresourceLayers *")]
            ImageSubresourceLayers pImageSubresources
    ) =>
        ThisThread.CmdCopyMemoryToImageIndirectNV(
            commandBuffer,
            copyBufferAddress,
            stride,
            dstImage,
            dstImageLayout,
            pImageSubresources
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyMemoryToMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")] CopyMemoryToMicromapInfoEXT* pInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CopyMemoryToMicromapInfoEXT*, void>)(
                _slots[86] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[86] = nativeContext.LoadFunction(
                        "vkCmdCopyMemoryToMicromapEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryToMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")] CopyMemoryToMicromapInfoEXT* pInfo
    ) => ThisThread.CmdCopyMemoryToMicromapEXT(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyMemoryToMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
            Ref<CopyMemoryToMicromapInfoEXT> pInfo
    )
    {
        fixed (CopyMemoryToMicromapInfoEXT* __dsl_pInfo = pInfo)
        {
            ((IVk)this).CmdCopyMemoryToMicromapEXT(commandBuffer, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryToMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
            Ref<CopyMemoryToMicromapInfoEXT> pInfo
    ) => ThisThread.CmdCopyMemoryToMicromapEXT(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] CopyMicromapInfoEXT* pInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CopyMicromapInfoEXT*, void>)(
                _slots[87] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[87] = nativeContext.LoadFunction("vkCmdCopyMicromapEXT", "vulkan")
            )
        )(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] CopyMicromapInfoEXT* pInfo
    ) => ThisThread.CmdCopyMicromapEXT(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] Ref<CopyMicromapInfoEXT> pInfo
    )
    {
        fixed (CopyMicromapInfoEXT* __dsl_pInfo = pInfo)
        {
            ((IVk)this).CmdCopyMicromapEXT(commandBuffer, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] Ref<CopyMicromapInfoEXT> pInfo
    ) => ThisThread.CmdCopyMicromapEXT(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyMicromapToMemoryEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")] CopyMicromapToMemoryInfoEXT* pInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CopyMicromapToMemoryInfoEXT*, void>)(
                _slots[88] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[88] = nativeContext.LoadFunction(
                        "vkCmdCopyMicromapToMemoryEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMicromapToMemoryEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")] CopyMicromapToMemoryInfoEXT* pInfo
    ) => ThisThread.CmdCopyMicromapToMemoryEXT(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyMicromapToMemoryEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
            Ref<CopyMicromapToMemoryInfoEXT> pInfo
    )
    {
        fixed (CopyMicromapToMemoryInfoEXT* __dsl_pInfo = pInfo)
        {
            ((IVk)this).CmdCopyMicromapToMemoryEXT(commandBuffer, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMicromapToMemoryEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
            Ref<CopyMicromapToMemoryInfoEXT> pInfo
    ) => ThisThread.CmdCopyMicromapToMemoryEXT(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyQueryPoolResults")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyQueryPoolResults(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong stride,
        [NativeTypeName("VkQueryResultFlags")] QueryResultFlags flags
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                QueryPoolHandle,
                uint,
                uint,
                BufferHandle,
                ulong,
                ulong,
                QueryResultFlags,
                void>)(
                _slots[89] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[89] = nativeContext.LoadFunction("vkCmdCopyQueryPoolResults", "vulkan")
            )
        )(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyQueryPoolResults")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyQueryPoolResults(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong stride,
        [NativeTypeName("VkQueryResultFlags")] QueryResultFlags flags
    ) =>
        ThisThread.CmdCopyQueryPoolResults(
            commandBuffer,
            queryPool,
            firstQuery,
            queryCount,
            dstBuffer,
            dstOffset,
            stride,
            flags
        );

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyTensorARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyTensorARM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyTensorInfoARM *")] CopyTensorInfoARM* pCopyTensorInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CopyTensorInfoARM*, void>)(
                _slots[90] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[90] = nativeContext.LoadFunction("vkCmdCopyTensorARM", "vulkan")
            )
        )(commandBuffer, pCopyTensorInfo);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyTensorARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyTensorARM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyTensorInfoARM *")] CopyTensorInfoARM* pCopyTensorInfo
    ) => ThisThread.CmdCopyTensorARM(commandBuffer, pCopyTensorInfo);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyTensorARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCopyTensorARM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyTensorInfoARM *")] Ref<CopyTensorInfoARM> pCopyTensorInfo
    )
    {
        fixed (CopyTensorInfoARM* __dsl_pCopyTensorInfo = pCopyTensorInfo)
        {
            ((IVk)this).CmdCopyTensorARM(commandBuffer, __dsl_pCopyTensorInfo);
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyTensorARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyTensorARM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCopyTensorInfoARM *")] Ref<CopyTensorInfoARM> pCopyTensorInfo
    ) => ThisThread.CmdCopyTensorARM(commandBuffer, pCopyTensorInfo);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCuLaunchKernelNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCuLaunchKernelNVX(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCuLaunchInfoNVX *")] CuLaunchInfoNVX* pLaunchInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CuLaunchInfoNVX*, void>)(
                _slots[91] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[91] = nativeContext.LoadFunction("vkCmdCuLaunchKernelNVX", "vulkan")
            )
        )(commandBuffer, pLaunchInfo);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCuLaunchKernelNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCuLaunchKernelNVX(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCuLaunchInfoNVX *")] CuLaunchInfoNVX* pLaunchInfo
    ) => ThisThread.CmdCuLaunchKernelNVX(commandBuffer, pLaunchInfo);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCuLaunchKernelNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdCuLaunchKernelNVX(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCuLaunchInfoNVX *")] Ref<CuLaunchInfoNVX> pLaunchInfo
    )
    {
        fixed (CuLaunchInfoNVX* __dsl_pLaunchInfo = pLaunchInfo)
        {
            ((IVk)this).CmdCuLaunchKernelNVX(commandBuffer, __dsl_pLaunchInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCuLaunchKernelNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCuLaunchKernelNVX(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCuLaunchInfoNVX *")] Ref<CuLaunchInfoNVX> pLaunchInfo
    ) => ThisThread.CmdCuLaunchKernelNVX(commandBuffer, pLaunchInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerBeginEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDebugMarkerBeginEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")] DebugMarkerMarkerInfoEXT* pMarkerInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, DebugMarkerMarkerInfoEXT*, void>)(
                _slots[92] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[92] = nativeContext.LoadFunction("vkCmdDebugMarkerBeginEXT", "vulkan")
            )
        )(commandBuffer, pMarkerInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerBeginEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDebugMarkerBeginEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")] DebugMarkerMarkerInfoEXT* pMarkerInfo
    ) => ThisThread.CmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerBeginEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDebugMarkerBeginEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
            Ref<DebugMarkerMarkerInfoEXT> pMarkerInfo
    )
    {
        fixed (DebugMarkerMarkerInfoEXT* __dsl_pMarkerInfo = pMarkerInfo)
        {
            ((IVk)this).CmdDebugMarkerBeginEXT(commandBuffer, __dsl_pMarkerInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerBeginEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDebugMarkerBeginEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
            Ref<DebugMarkerMarkerInfoEXT> pMarkerInfo
    ) => ThisThread.CmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerEndEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDebugMarkerEndEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, void>)(
                _slots[93] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[93] = nativeContext.LoadFunction("vkCmdDebugMarkerEndEXT", "vulkan")
            )
        )(commandBuffer);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerEndEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDebugMarkerEndEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) => ThisThread.CmdDebugMarkerEndEXT(commandBuffer);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerInsertEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDebugMarkerInsertEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")] DebugMarkerMarkerInfoEXT* pMarkerInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, DebugMarkerMarkerInfoEXT*, void>)(
                _slots[94] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[94] = nativeContext.LoadFunction("vkCmdDebugMarkerInsertEXT", "vulkan")
            )
        )(commandBuffer, pMarkerInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerInsertEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDebugMarkerInsertEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")] DebugMarkerMarkerInfoEXT* pMarkerInfo
    ) => ThisThread.CmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerInsertEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDebugMarkerInsertEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
            Ref<DebugMarkerMarkerInfoEXT> pMarkerInfo
    )
    {
        fixed (DebugMarkerMarkerInfoEXT* __dsl_pMarkerInfo = pMarkerInfo)
        {
            ((IVk)this).CmdDebugMarkerInsertEXT(commandBuffer, __dsl_pMarkerInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerInsertEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDebugMarkerInsertEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
            Ref<DebugMarkerMarkerInfoEXT> pMarkerInfo
    ) => ThisThread.CmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecodeVideoKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDecodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoDecodeInfoKHR *")] VideoDecodeInfoKHR* pDecodeInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, VideoDecodeInfoKHR*, void>)(
                _slots[95] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[95] = nativeContext.LoadFunction("vkCmdDecodeVideoKHR", "vulkan")
            )
        )(commandBuffer, pDecodeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecodeVideoKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDecodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoDecodeInfoKHR *")] VideoDecodeInfoKHR* pDecodeInfo
    ) => ThisThread.CmdDecodeVideoKHR(commandBuffer, pDecodeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecodeVideoKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDecodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoDecodeInfoKHR *")] Ref<VideoDecodeInfoKHR> pDecodeInfo
    )
    {
        fixed (VideoDecodeInfoKHR* __dsl_pDecodeInfo = pDecodeInfo)
        {
            ((IVk)this).CmdDecodeVideoKHR(commandBuffer, __dsl_pDecodeInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecodeVideoKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDecodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoDecodeInfoKHR *")] Ref<VideoDecodeInfoKHR> pDecodeInfo
    ) => ThisThread.CmdDecodeVideoKHR(commandBuffer, pDecodeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryIndirectCountNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDecompressMemoryIndirectCountNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsAddress,
        [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsCountAddress,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, ulong, ulong, uint, void>)(
                _slots[96] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[96] = nativeContext.LoadFunction(
                        "vkCmdDecompressMemoryIndirectCountNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryIndirectCountNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDecompressMemoryIndirectCountNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsAddress,
        [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsCountAddress,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        ThisThread.CmdDecompressMemoryIndirectCountNV(
            commandBuffer,
            indirectCommandsAddress,
            indirectCommandsCountAddress,
            stride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDecompressMemoryNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint decompressRegionCount,
        [NativeTypeName("const VkDecompressMemoryRegionNV *")]
            DecompressMemoryRegionNV* pDecompressMemoryRegions
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, DecompressMemoryRegionNV*, void>)(
                _slots[97] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[97] = nativeContext.LoadFunction("vkCmdDecompressMemoryNV", "vulkan")
            )
        )(commandBuffer, decompressRegionCount, pDecompressMemoryRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDecompressMemoryNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint decompressRegionCount,
        [NativeTypeName("const VkDecompressMemoryRegionNV *")]
            DecompressMemoryRegionNV* pDecompressMemoryRegions
    ) =>
        ThisThread.CmdDecompressMemoryNV(
            commandBuffer,
            decompressRegionCount,
            pDecompressMemoryRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDecompressMemoryNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint decompressRegionCount,
        [NativeTypeName("const VkDecompressMemoryRegionNV *")]
            Ref<DecompressMemoryRegionNV> pDecompressMemoryRegions
    )
    {
        fixed (DecompressMemoryRegionNV* __dsl_pDecompressMemoryRegions = pDecompressMemoryRegions)
        {
            ((IVk)this).CmdDecompressMemoryNV(
                commandBuffer,
                decompressRegionCount,
                __dsl_pDecompressMemoryRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDecompressMemoryNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint decompressRegionCount,
        [NativeTypeName("const VkDecompressMemoryRegionNV *")]
            Ref<DecompressMemoryRegionNV> pDecompressMemoryRegions
    ) =>
        ThisThread.CmdDecompressMemoryNV(
            commandBuffer,
            decompressRegionCount,
            pDecompressMemoryRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDecompressMemoryNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDecompressMemoryRegionNV *")]
            DecompressMemoryRegionNV pDecompressMemoryRegions
    ) =>
        ((IVk)this).CmdDecompressMemoryNV(
            commandBuffer,
            1,
            (DecompressMemoryRegionNV*)&pDecompressMemoryRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDecompressMemoryNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDecompressMemoryRegionNV *")]
            DecompressMemoryRegionNV pDecompressMemoryRegions
    ) => ThisThread.CmdDecompressMemoryNV(commandBuffer, pDecompressMemoryRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatch")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDispatch(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, uint, void>)(
                _slots[98] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[98] = nativeContext.LoadFunction("vkCmdDispatch", "vulkan")
            )
        )(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatch")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatch(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) => ThisThread.CmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchBase")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDispatchBase(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint baseGroupX,
        [NativeTypeName("uint32_t")] uint baseGroupY,
        [NativeTypeName("uint32_t")] uint baseGroupZ,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, uint, uint, uint, uint, void>)(
                _slots[99] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[99] = nativeContext.LoadFunction("vkCmdDispatchBase", "vulkan")
            )
        )(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchBase")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchBase(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint baseGroupX,
        [NativeTypeName("uint32_t")] uint baseGroupY,
        [NativeTypeName("uint32_t")] uint baseGroupZ,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        ThisThread.CmdDispatchBase(
            commandBuffer,
            baseGroupX,
            baseGroupY,
            baseGroupZ,
            groupCountX,
            groupCountY,
            groupCountZ
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchBaseKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDispatchBaseKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint baseGroupX,
        [NativeTypeName("uint32_t")] uint baseGroupY,
        [NativeTypeName("uint32_t")] uint baseGroupZ,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, uint, uint, uint, uint, void>)(
                _slots[100] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[100] = nativeContext.LoadFunction("vkCmdDispatchBaseKHR", "vulkan")
            )
        )(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchBaseKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchBaseKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint baseGroupX,
        [NativeTypeName("uint32_t")] uint baseGroupY,
        [NativeTypeName("uint32_t")] uint baseGroupZ,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        ThisThread.CmdDispatchBaseKHR(
            commandBuffer,
            baseGroupX,
            baseGroupY,
            baseGroupZ,
            groupCountX,
            groupCountY,
            groupCountZ
        );

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchDataGraphARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDispatchDataGraphARM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDataGraphPipelineSessionARM")] DataGraphPipelineSessionARMHandle session,
        [NativeTypeName("const VkDataGraphPipelineDispatchInfoARM *")]
            DataGraphPipelineDispatchInfoARM* pInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                DataGraphPipelineSessionARMHandle,
                DataGraphPipelineDispatchInfoARM*,
                void>)(
                _slots[101] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[101] = nativeContext.LoadFunction(
                        "vkCmdDispatchDataGraphARM",
                        "vulkan"
                    )
            )
        )(commandBuffer, session, pInfo);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchDataGraphARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchDataGraphARM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDataGraphPipelineSessionARM")] DataGraphPipelineSessionARMHandle session,
        [NativeTypeName("const VkDataGraphPipelineDispatchInfoARM *")]
            DataGraphPipelineDispatchInfoARM* pInfo
    ) => ThisThread.CmdDispatchDataGraphARM(commandBuffer, session, pInfo);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchDataGraphARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDispatchDataGraphARM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDataGraphPipelineSessionARM")] DataGraphPipelineSessionARMHandle session,
        [NativeTypeName("const VkDataGraphPipelineDispatchInfoARM *")]
            Ref<DataGraphPipelineDispatchInfoARM> pInfo
    )
    {
        fixed (DataGraphPipelineDispatchInfoARM* __dsl_pInfo = pInfo)
        {
            ((IVk)this).CmdDispatchDataGraphARM(commandBuffer, session, __dsl_pInfo);
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchDataGraphARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchDataGraphARM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDataGraphPipelineSessionARM")] DataGraphPipelineSessionARMHandle session,
        [NativeTypeName("const VkDataGraphPipelineDispatchInfoARM *")]
            Ref<DataGraphPipelineDispatchInfoARM> pInfo
    ) => ThisThread.CmdDispatchDataGraphARM(commandBuffer, session, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchIndirect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDispatchIndirect(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BufferHandle, ulong, void>)(
                _slots[102] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[102] = nativeContext.LoadFunction("vkCmdDispatchIndirect", "vulkan")
            )
        )(commandBuffer, buffer, offset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchIndirect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchIndirect(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset
    ) => ThisThread.CmdDispatchIndirect(commandBuffer, buffer, offset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchTileQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDispatchTileQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDispatchTileInfoQCOM *")] DispatchTileInfoQCOM* pDispatchTileInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, DispatchTileInfoQCOM*, void>)(
                _slots[103] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[103] = nativeContext.LoadFunction("vkCmdDispatchTileQCOM", "vulkan")
            )
        )(commandBuffer, pDispatchTileInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchTileQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchTileQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDispatchTileInfoQCOM *")] DispatchTileInfoQCOM* pDispatchTileInfo
    ) => ThisThread.CmdDispatchTileQCOM(commandBuffer, pDispatchTileInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchTileQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDispatchTileQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDispatchTileInfoQCOM *")]
            Ref<DispatchTileInfoQCOM> pDispatchTileInfo
    )
    {
        fixed (DispatchTileInfoQCOM* __dsl_pDispatchTileInfo = pDispatchTileInfo)
        {
            ((IVk)this).CmdDispatchTileQCOM(commandBuffer, __dsl_pDispatchTileInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchTileQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchTileQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDispatchTileInfoQCOM *")]
            Ref<DispatchTileInfoQCOM> pDispatchTileInfo
    ) => ThisThread.CmdDispatchTileQCOM(commandBuffer, pDispatchTileInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDraw")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDraw(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint vertexCount,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstVertex,
        [NativeTypeName("uint32_t")] uint firstInstance
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, uint, uint, void>)(
                _slots[104] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[104] = nativeContext.LoadFunction("vkCmdDraw", "vulkan")
            )
        )(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDraw")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDraw(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint vertexCount,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstVertex,
        [NativeTypeName("uint32_t")] uint firstInstance
    ) => ThisThread.CmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_cluster_culling_shader"],
        ImpliesSets = [
            "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
            "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawClusterHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawClusterHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, uint, void>)(
                _slots[105] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[105] = nativeContext.LoadFunction("vkCmdDrawClusterHUAWEI", "vulkan")
            )
        )(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_cluster_culling_shader"],
        ImpliesSets = [
            "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
            "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawClusterHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawClusterHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) => ThisThread.CmdDrawClusterHuawei(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_cluster_culling_shader"],
        ImpliesSets = [
            "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
            "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawClusterIndirectHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawClusterIndirectHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BufferHandle, ulong, void>)(
                _slots[106] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[106] = nativeContext.LoadFunction(
                        "vkCmdDrawClusterIndirectHUAWEI",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_cluster_culling_shader"],
        ImpliesSets = [
            "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
            "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawClusterIndirectHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawClusterIndirectHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset
    ) => ThisThread.CmdDrawClusterIndirectHuawei(commandBuffer, buffer, offset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexed")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawIndexed(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint indexCount,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstIndex,
        [NativeTypeName("int32_t")] int vertexOffset,
        [NativeTypeName("uint32_t")] uint firstInstance
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, uint, int, uint, void>)(
                _slots[107] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[107] = nativeContext.LoadFunction("vkCmdDrawIndexed", "vulkan")
            )
        )(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexed")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexed(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint indexCount,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstIndex,
        [NativeTypeName("int32_t")] int vertexOffset,
        [NativeTypeName("uint32_t")] uint firstInstance
    ) =>
        ThisThread.CmdDrawIndexed(
            commandBuffer,
            indexCount,
            instanceCount,
            firstIndex,
            vertexOffset,
            firstInstance
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawIndexedIndirect(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BufferHandle, ulong, uint, uint, void>)(
                _slots[108] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[108] = nativeContext.LoadFunction("vkCmdDrawIndexedIndirect", "vulkan")
            )
        )(commandBuffer, buffer, offset, drawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexedIndirect(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => ThisThread.CmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawIndexedIndirectCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                BufferHandle,
                ulong,
                BufferHandle,
                ulong,
                uint,
                uint,
                void>)(
                _slots[109] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[109] = nativeContext.LoadFunction(
                        "vkCmdDrawIndexedIndirectCount",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexedIndirectCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        ThisThread.CmdDrawIndexedIndirectCount(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCountAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawIndexedIndirectCountAMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                BufferHandle,
                ulong,
                BufferHandle,
                ulong,
                uint,
                uint,
                void>)(
                _slots[110] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[110] = nativeContext.LoadFunction(
                        "vkCmdDrawIndexedIndirectCountAMD",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCountAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexedIndirectCountAMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        ThisThread.CmdDrawIndexedIndirectCountAMD(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCountKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawIndexedIndirectCountKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                BufferHandle,
                ulong,
                BufferHandle,
                ulong,
                uint,
                uint,
                void>)(
                _slots[111] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[111] = nativeContext.LoadFunction(
                        "vkCmdDrawIndexedIndirectCountKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCountKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexedIndirectCountKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        ThisThread.CmdDrawIndexedIndirectCountKHR(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawIndirect(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BufferHandle, ulong, uint, uint, void>)(
                _slots[112] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[112] = nativeContext.LoadFunction("vkCmdDrawIndirect", "vulkan")
            )
        )(commandBuffer, buffer, offset, drawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirect(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => ThisThread.CmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectByteCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawIndirectByteCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("VkBuffer")] BufferHandle counterBuffer,
        [NativeTypeName("VkDeviceSize")] ulong counterBufferOffset,
        [NativeTypeName("uint32_t")] uint counterOffset,
        [NativeTypeName("uint32_t")] uint vertexStride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                uint,
                BufferHandle,
                ulong,
                uint,
                uint,
                void>)(
                _slots[113] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[113] = nativeContext.LoadFunction(
                        "vkCmdDrawIndirectByteCountEXT",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            instanceCount,
            firstInstance,
            counterBuffer,
            counterBufferOffset,
            counterOffset,
            vertexStride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectByteCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirectByteCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("VkBuffer")] BufferHandle counterBuffer,
        [NativeTypeName("VkDeviceSize")] ulong counterBufferOffset,
        [NativeTypeName("uint32_t")] uint counterOffset,
        [NativeTypeName("uint32_t")] uint vertexStride
    ) =>
        ThisThread.CmdDrawIndirectByteCountEXT(
            commandBuffer,
            instanceCount,
            firstInstance,
            counterBuffer,
            counterBufferOffset,
            counterOffset,
            vertexStride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawIndirectCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                BufferHandle,
                ulong,
                BufferHandle,
                ulong,
                uint,
                uint,
                void>)(
                _slots[114] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[114] = nativeContext.LoadFunction("vkCmdDrawIndirectCount", "vulkan")
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirectCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        ThisThread.CmdDrawIndirectCount(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCountAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawIndirectCountAMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                BufferHandle,
                ulong,
                BufferHandle,
                ulong,
                uint,
                uint,
                void>)(
                _slots[115] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[115] = nativeContext.LoadFunction(
                        "vkCmdDrawIndirectCountAMD",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCountAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirectCountAMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        ThisThread.CmdDrawIndirectCountAMD(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCountKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawIndirectCountKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                BufferHandle,
                ulong,
                BufferHandle,
                ulong,
                uint,
                uint,
                void>)(
                _slots[116] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[116] = nativeContext.LoadFunction(
                        "vkCmdDrawIndirectCountKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCountKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirectCountKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        ThisThread.CmdDrawIndirectCountKHR(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawMeshTasksEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, uint, void>)(
                _slots[117] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[117] = nativeContext.LoadFunction("vkCmdDrawMeshTasksEXT", "vulkan")
            )
        )(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) => ThisThread.CmdDrawMeshTasksEXT(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader+VK_KHR_draw_indirect_count", "VK_EXT_mesh_shader+VK_VERSION_1_2"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawMeshTasksIndirectCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                BufferHandle,
                ulong,
                BufferHandle,
                ulong,
                uint,
                uint,
                void>)(
                _slots[118] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[118] = nativeContext.LoadFunction(
                        "vkCmdDrawMeshTasksIndirectCountEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader+VK_KHR_draw_indirect_count", "VK_EXT_mesh_shader+VK_VERSION_1_2"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksIndirectCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        ThisThread.CmdDrawMeshTasksIndirectCountEXT(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader+VK_KHR_draw_indirect_count", "VK_NV_mesh_shader+VK_VERSION_1_2"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectCountNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawMeshTasksIndirectCountNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                BufferHandle,
                ulong,
                BufferHandle,
                ulong,
                uint,
                uint,
                void>)(
                _slots[119] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[119] = nativeContext.LoadFunction(
                        "vkCmdDrawMeshTasksIndirectCountNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader+VK_KHR_draw_indirect_count", "VK_NV_mesh_shader+VK_VERSION_1_2"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectCountNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksIndirectCountNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        ThisThread.CmdDrawMeshTasksIndirectCountNV(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawMeshTasksIndirectEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BufferHandle, ulong, uint, uint, void>)(
                _slots[120] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[120] = nativeContext.LoadFunction(
                        "vkCmdDrawMeshTasksIndirectEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, drawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksIndirectEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => ThisThread.CmdDrawMeshTasksIndirectEXT(commandBuffer, buffer, offset, drawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawMeshTasksIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BufferHandle, ulong, uint, uint, void>)(
                _slots[121] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[121] = nativeContext.LoadFunction(
                        "vkCmdDrawMeshTasksIndirectNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, drawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => ThisThread.CmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawMeshTasksNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint taskCount,
        [NativeTypeName("uint32_t")] uint firstTask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, void>)(
                _slots[122] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[122] = nativeContext.LoadFunction("vkCmdDrawMeshTasksNV", "vulkan")
            )
        )(commandBuffer, taskCount, firstTask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint taskCount,
        [NativeTypeName("uint32_t")] uint firstTask
    ) => ThisThread.CmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawMultiEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawInfoEXT *")] MultiDrawInfoEXT* pVertexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                MultiDrawInfoEXT*,
                uint,
                uint,
                uint,
                void>)(
                _slots[123] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[123] = nativeContext.LoadFunction("vkCmdDrawMultiEXT", "vulkan")
            )
        )(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMultiEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawInfoEXT *")] MultiDrawInfoEXT* pVertexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        ThisThread.CmdDrawMultiEXT(
            commandBuffer,
            drawCount,
            pVertexInfo,
            instanceCount,
            firstInstance,
            stride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawMultiEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawInfoEXT *")] Ref<MultiDrawInfoEXT> pVertexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (MultiDrawInfoEXT* __dsl_pVertexInfo = pVertexInfo)
        {
            ((IVk)this).CmdDrawMultiEXT(
                commandBuffer,
                drawCount,
                __dsl_pVertexInfo,
                instanceCount,
                firstInstance,
                stride
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMultiEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawInfoEXT *")] Ref<MultiDrawInfoEXT> pVertexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        ThisThread.CmdDrawMultiEXT(
            commandBuffer,
            drawCount,
            pVertexInfo,
            instanceCount,
            firstInstance,
            stride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawMultiEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkMultiDrawInfoEXT *")] MultiDrawInfoEXT pVertexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        ((IVk)this).CmdDrawMultiEXT(
            commandBuffer,
            1,
            (MultiDrawInfoEXT*)&pVertexInfo,
            instanceCount,
            firstInstance,
            stride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMultiEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkMultiDrawInfoEXT *")] MultiDrawInfoEXT pVertexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        ThisThread.CmdDrawMultiEXT(
            commandBuffer,
            pVertexInfo,
            instanceCount,
            firstInstance,
            stride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawMultiIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")] MultiDrawIndexedInfoEXT* pIndexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("const int32_t *")] int* pVertexOffset
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                MultiDrawIndexedInfoEXT*,
                uint,
                uint,
                uint,
                int*,
                void>)(
                _slots[124] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[124] = nativeContext.LoadFunction("vkCmdDrawMultiIndexedEXT", "vulkan")
            )
        )(
            commandBuffer,
            drawCount,
            pIndexInfo,
            instanceCount,
            firstInstance,
            stride,
            pVertexOffset
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMultiIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")] MultiDrawIndexedInfoEXT* pIndexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("const int32_t *")] int* pVertexOffset
    ) =>
        ThisThread.CmdDrawMultiIndexedEXT(
            commandBuffer,
            drawCount,
            pIndexInfo,
            instanceCount,
            firstInstance,
            stride,
            pVertexOffset
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawMultiIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")]
            Ref<MultiDrawIndexedInfoEXT> pIndexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("const int32_t *")] Ref<int> pVertexOffset
    )
    {
        fixed (int* __dsl_pVertexOffset = pVertexOffset)
        fixed (MultiDrawIndexedInfoEXT* __dsl_pIndexInfo = pIndexInfo)
        {
            ((IVk)this).CmdDrawMultiIndexedEXT(
                commandBuffer,
                drawCount,
                __dsl_pIndexInfo,
                instanceCount,
                firstInstance,
                stride,
                __dsl_pVertexOffset
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMultiIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")]
            Ref<MultiDrawIndexedInfoEXT> pIndexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("const int32_t *")] Ref<int> pVertexOffset
    ) =>
        ThisThread.CmdDrawMultiIndexedEXT(
            commandBuffer,
            drawCount,
            pIndexInfo,
            instanceCount,
            firstInstance,
            stride,
            pVertexOffset
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdDrawMultiIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")] MultiDrawIndexedInfoEXT pIndexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("const int32_t *")] Ref<int> pVertexOffset
    )
    {
        fixed (int* __dsl_pVertexOffset = pVertexOffset)
        {
            ((IVk)this).CmdDrawMultiIndexedEXT(
                commandBuffer,
                1,
                (MultiDrawIndexedInfoEXT*)&pIndexInfo,
                instanceCount,
                firstInstance,
                stride,
                __dsl_pVertexOffset
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMultiIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")] MultiDrawIndexedInfoEXT pIndexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("const int32_t *")] Ref<int> pVertexOffset
    ) =>
        ThisThread.CmdDrawMultiIndexedEXT(
            commandBuffer,
            pIndexInfo,
            instanceCount,
            firstInstance,
            stride,
            pVertexOffset
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEncodeVideoKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEncodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoEncodeInfoKHR *")] VideoEncodeInfoKHR* pEncodeInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, VideoEncodeInfoKHR*, void>)(
                _slots[125] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[125] = nativeContext.LoadFunction("vkCmdEncodeVideoKHR", "vulkan")
            )
        )(commandBuffer, pEncodeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEncodeVideoKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEncodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoEncodeInfoKHR *")] VideoEncodeInfoKHR* pEncodeInfo
    ) => ThisThread.CmdEncodeVideoKHR(commandBuffer, pEncodeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEncodeVideoKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEncodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoEncodeInfoKHR *")] Ref<VideoEncodeInfoKHR> pEncodeInfo
    )
    {
        fixed (VideoEncodeInfoKHR* __dsl_pEncodeInfo = pEncodeInfo)
        {
            ((IVk)this).CmdEncodeVideoKHR(commandBuffer, __dsl_pEncodeInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEncodeVideoKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEncodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoEncodeInfoKHR *")] Ref<VideoEncodeInfoKHR> pEncodeInfo
    ) => ThisThread.CmdEncodeVideoKHR(commandBuffer, pEncodeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering"],
        ImpliesSets = [
            "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conditional_rendering+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndConditionalRenderingEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndConditionalRenderingEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, void>)(
                _slots[126] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[126] = nativeContext.LoadFunction(
                        "vkCmdEndConditionalRenderingEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering"],
        ImpliesSets = [
            "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conditional_rendering+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndConditionalRenderingEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndConditionalRenderingEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) => ThisThread.CmdEndConditionalRenderingEXT(commandBuffer);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, void>)(
                _slots[127] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[127] = nativeContext.LoadFunction(
                        "vkCmdEndDebugUtilsLabelEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) => ThisThread.CmdEndDebugUtilsLabelEXT(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndPerTileExecutionQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerTileEndInfoQCOM *")] PerTileEndInfoQCOM* pPerTileEndInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PerTileEndInfoQCOM*, void>)(
                _slots[128] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[128] = nativeContext.LoadFunction(
                        "vkCmdEndPerTileExecutionQCOM",
                        "vulkan"
                    )
            )
        )(commandBuffer, pPerTileEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndPerTileExecutionQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerTileEndInfoQCOM *")] PerTileEndInfoQCOM* pPerTileEndInfo
    ) => ThisThread.CmdEndPerTileExecutionQCOM(commandBuffer, pPerTileEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndPerTileExecutionQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerTileEndInfoQCOM *")] Ref<PerTileEndInfoQCOM> pPerTileEndInfo
    )
    {
        fixed (PerTileEndInfoQCOM* __dsl_pPerTileEndInfo = pPerTileEndInfo)
        {
            ((IVk)this).CmdEndPerTileExecutionQCOM(commandBuffer, __dsl_pPerTileEndInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndPerTileExecutionQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerTileEndInfoQCOM *")] Ref<PerTileEndInfoQCOM> pPerTileEndInfo
    ) => ThisThread.CmdEndPerTileExecutionQCOM(commandBuffer, pPerTileEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndQuery")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndQuery(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, QueryPoolHandle, uint, void>)(
                _slots[129] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[129] = nativeContext.LoadFunction("vkCmdEndQuery", "vulkan")
            )
        )(commandBuffer, queryPool, query);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndQuery")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndQuery(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) => ThisThread.CmdEndQuery(commandBuffer, queryPool, query);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndQueryIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndQueryIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("uint32_t")] uint index
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, QueryPoolHandle, uint, uint, void>)(
                _slots[130] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[130] = nativeContext.LoadFunction("vkCmdEndQueryIndexedEXT", "vulkan")
            )
        )(commandBuffer, queryPool, query, index);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndQueryIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndQueryIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("uint32_t")] uint index
    ) => ThisThread.CmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndRendering(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, void>)(
                _slots[131] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[131] = nativeContext.LoadFunction("vkCmdEndRendering", "vulkan")
            )
        )(commandBuffer);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRendering(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) => ThisThread.CmdEndRendering(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map_offset"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndRendering2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingEndInfoEXT *")] RenderingEndInfoEXT* pRenderingEndInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, RenderingEndInfoEXT*, void>)(
                _slots[132] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[132] = nativeContext.LoadFunction("vkCmdEndRendering2EXT", "vulkan")
            )
        )(commandBuffer, pRenderingEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map_offset"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRendering2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingEndInfoEXT *")] RenderingEndInfoEXT* pRenderingEndInfo
    ) => ThisThread.CmdEndRendering2EXT(commandBuffer, pRenderingEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map_offset"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndRendering2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingEndInfoEXT *")] Ref<RenderingEndInfoEXT> pRenderingEndInfo
    )
    {
        fixed (RenderingEndInfoEXT* __dsl_pRenderingEndInfo = pRenderingEndInfo)
        {
            ((IVk)this).CmdEndRendering2EXT(commandBuffer, __dsl_pRenderingEndInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map_offset"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRendering2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingEndInfoEXT *")] Ref<RenderingEndInfoEXT> pRenderingEndInfo
    ) => ThisThread.CmdEndRendering2EXT(commandBuffer, pRenderingEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndRenderingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, void>)(
                _slots[133] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[133] = nativeContext.LoadFunction("vkCmdEndRenderingKHR", "vulkan")
            )
        )(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRenderingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) => ThisThread.CmdEndRenderingKHR(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndRenderPass(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, void>)(
                _slots[134] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[134] = nativeContext.LoadFunction("vkCmdEndRenderPass", "vulkan")
            )
        )(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRenderPass(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) => ThisThread.CmdEndRenderPass(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndRenderPass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, SubpassEndInfo*, void>)(
                _slots[135] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[135] = nativeContext.LoadFunction("vkCmdEndRenderPass2", "vulkan")
            )
        )(commandBuffer, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRenderPass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) => ThisThread.CmdEndRenderPass2(commandBuffer, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndRenderPass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    )
    {
        fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
        {
            ((IVk)this).CmdEndRenderPass2(commandBuffer, __dsl_pSubpassEndInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRenderPass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    ) => ThisThread.CmdEndRenderPass2(commandBuffer, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, SubpassEndInfo*, void>)(
                _slots[136] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[136] = nativeContext.LoadFunction("vkCmdEndRenderPass2KHR", "vulkan")
            )
        )(commandBuffer, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) => ThisThread.CmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    )
    {
        fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
        {
            ((IVk)this).CmdEndRenderPass2KHR(commandBuffer, __dsl_pSubpassEndInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    ) => ThisThread.CmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndTransformFeedbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle* pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pCounterBufferOffsets
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, BufferHandle*, ulong*, void>)(
                _slots[137] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[137] = nativeContext.LoadFunction(
                        "vkCmdEndTransformFeedbackEXT",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            firstCounterBuffer,
            counterBufferCount,
            pCounterBuffers,
            pCounterBufferOffsets
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndTransformFeedbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle* pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pCounterBufferOffsets
    ) =>
        ThisThread.CmdEndTransformFeedbackEXT(
            commandBuffer,
            firstCounterBuffer,
            counterBufferCount,
            pCounterBuffers,
            pCounterBufferOffsets
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndTransformFeedbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pCounterBufferOffsets
    )
    {
        fixed (ulong* __dsl_pCounterBufferOffsets = pCounterBufferOffsets)
        fixed (BufferHandle* __dsl_pCounterBuffers = pCounterBuffers)
        {
            ((IVk)this).CmdEndTransformFeedbackEXT(
                commandBuffer,
                firstCounterBuffer,
                counterBufferCount,
                __dsl_pCounterBuffers,
                __dsl_pCounterBufferOffsets
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndTransformFeedbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] Ref<BufferHandle> pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pCounterBufferOffsets
    ) =>
        ThisThread.CmdEndTransformFeedbackEXT(
            commandBuffer,
            firstCounterBuffer,
            counterBufferCount,
            pCounterBuffers,
            pCounterBufferOffsets
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoEndCodingInfoKHR *")] VideoEndCodingInfoKHR* pEndCodingInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, VideoEndCodingInfoKHR*, void>)(
                _slots[138] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[138] = nativeContext.LoadFunction("vkCmdEndVideoCodingKHR", "vulkan")
            )
        )(commandBuffer, pEndCodingInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoEndCodingInfoKHR *")] VideoEndCodingInfoKHR* pEndCodingInfo
    ) => ThisThread.CmdEndVideoCodingKHR(commandBuffer, pEndCodingInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdEndVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoEndCodingInfoKHR *")]
            Ref<VideoEndCodingInfoKHR> pEndCodingInfo
    )
    {
        fixed (VideoEndCodingInfoKHR* __dsl_pEndCodingInfo = pEndCodingInfo)
        {
            ((IVk)this).CmdEndVideoCodingKHR(commandBuffer, __dsl_pEndCodingInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkVideoEndCodingInfoKHR *")]
            Ref<VideoEndCodingInfoKHR> pEndCodingInfo
    ) => ThisThread.CmdEndVideoCodingKHR(commandBuffer, pEndCodingInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteCommands")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdExecuteCommand(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle pCommandBuffers
    ) => ((IVk)this).CmdExecuteCommands(commandBuffer, 1, (CommandBufferHandle*)&pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteCommands")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdExecuteCommand(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle pCommandBuffers
    ) => ThisThread.CmdExecuteCommand(commandBuffer, pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteCommands")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdExecuteCommands(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle* pCommandBuffers
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, CommandBufferHandle*, void>)(
                _slots[139] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[139] = nativeContext.LoadFunction("vkCmdExecuteCommands", "vulkan")
            )
        )(commandBuffer, commandBufferCount, pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteCommands")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdExecuteCommands(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle* pCommandBuffers
    ) => ThisThread.CmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteCommands")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdExecuteCommands(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
    )
    {
        fixed (CommandBufferHandle* __dsl_pCommandBuffers = pCommandBuffers)
        {
            ((IVk)this).CmdExecuteCommands(
                commandBuffer,
                commandBufferCount,
                __dsl_pCommandBuffers
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteCommands")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdExecuteCommands(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
    ) => ThisThread.CmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdExecuteGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            GeneratedCommandsInfoEXT* pGeneratedCommandsInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                MaybeBool<uint>,
                GeneratedCommandsInfoEXT*,
                void>)(
                _slots[140] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[140] = nativeContext.LoadFunction(
                        "vkCmdExecuteGeneratedCommandsEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdExecuteGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            GeneratedCommandsInfoEXT* pGeneratedCommandsInfo
    ) =>
        ThisThread.CmdExecuteGeneratedCommandsEXT(
            commandBuffer,
            isPreprocessed,
            pGeneratedCommandsInfo
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdExecuteGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            Ref<GeneratedCommandsInfoEXT> pGeneratedCommandsInfo
    )
    {
        fixed (GeneratedCommandsInfoEXT* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
        {
            ((IVk)this).CmdExecuteGeneratedCommandsEXT(
                commandBuffer,
                isPreprocessed,
                __dsl_pGeneratedCommandsInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdExecuteGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            Ref<GeneratedCommandsInfoEXT> pGeneratedCommandsInfo
    ) =>
        ThisThread.CmdExecuteGeneratedCommandsEXT(
            commandBuffer,
            isPreprocessed,
            pGeneratedCommandsInfo
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdExecuteGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            GeneratedCommandsInfoNV* pGeneratedCommandsInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                MaybeBool<uint>,
                GeneratedCommandsInfoNV*,
                void>)(
                _slots[141] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[141] = nativeContext.LoadFunction(
                        "vkCmdExecuteGeneratedCommandsNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdExecuteGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            GeneratedCommandsInfoNV* pGeneratedCommandsInfo
    ) =>
        ThisThread.CmdExecuteGeneratedCommandsNV(
            commandBuffer,
            isPreprocessed,
            pGeneratedCommandsInfo
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdExecuteGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            Ref<GeneratedCommandsInfoNV> pGeneratedCommandsInfo
    )
    {
        fixed (GeneratedCommandsInfoNV* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
        {
            ((IVk)this).CmdExecuteGeneratedCommandsNV(
                commandBuffer,
                isPreprocessed,
                __dsl_pGeneratedCommandsInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdExecuteGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            Ref<GeneratedCommandsInfoNV> pGeneratedCommandsInfo
    ) =>
        ThisThread.CmdExecuteGeneratedCommandsNV(
            commandBuffer,
            isPreprocessed,
            pGeneratedCommandsInfo
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdFillBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdFillBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        [NativeTypeName("uint32_t")] uint data
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BufferHandle, ulong, ulong, uint, void>)(
                _slots[142] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[142] = nativeContext.LoadFunction("vkCmdFillBuffer", "vulkan")
            )
        )(commandBuffer, dstBuffer, dstOffset, size, data);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdFillBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdFillBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        [NativeTypeName("uint32_t")] uint data
    ) => ThisThread.CmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdInsertDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, DebugUtilsLabelEXT*, void>)(
                _slots[143] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[143] = nativeContext.LoadFunction(
                        "vkCmdInsertDebugUtilsLabelEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pLabelInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdInsertDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) => ThisThread.CmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdInsertDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    )
    {
        fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
        {
            ((IVk)this).CmdInsertDebugUtilsLabelEXT(commandBuffer, __dsl_pLabelInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdInsertDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    ) => ThisThread.CmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdNextSubpass(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        SubpassContents contents
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, SubpassContents, void>)(
                _slots[144] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[144] = nativeContext.LoadFunction("vkCmdNextSubpass", "vulkan")
            )
        )(commandBuffer, contents);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdNextSubpass(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        SubpassContents contents
    ) => ThisThread.CmdNextSubpass(commandBuffer, contents);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdNextSubpass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, SubpassBeginInfo*, SubpassEndInfo*, void>)(
                _slots[145] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[145] = nativeContext.LoadFunction("vkCmdNextSubpass2", "vulkan")
            )
        )(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdNextSubpass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) => ThisThread.CmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdNextSubpass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    )
    {
        fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
        fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
        {
            ((IVk)this).CmdNextSubpass2(
                commandBuffer,
                __dsl_pSubpassBeginInfo,
                __dsl_pSubpassEndInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdNextSubpass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    ) => ThisThread.CmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdNextSubpass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, SubpassBeginInfo*, SubpassEndInfo*, void>)(
                _slots[146] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[146] = nativeContext.LoadFunction("vkCmdNextSubpass2KHR", "vulkan")
            )
        )(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdNextSubpass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) => ThisThread.CmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdNextSubpass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    )
    {
        fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
        fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
        {
            ((IVk)this).CmdNextSubpass2KHR(
                commandBuffer,
                __dsl_pSubpassBeginInfo,
                __dsl_pSubpassEndInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdNextSubpass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    ) => ThisThread.CmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdOpticalFlowExecuteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdOpticalFlowExecuteNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
        [NativeTypeName("const VkOpticalFlowExecuteInfoNV *")]
            OpticalFlowExecuteInfoNV* pExecuteInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                OpticalFlowSessionNVHandle,
                OpticalFlowExecuteInfoNV*,
                void>)(
                _slots[147] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[147] = nativeContext.LoadFunction(
                        "vkCmdOpticalFlowExecuteNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, session, pExecuteInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdOpticalFlowExecuteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdOpticalFlowExecuteNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
        [NativeTypeName("const VkOpticalFlowExecuteInfoNV *")]
            OpticalFlowExecuteInfoNV* pExecuteInfo
    ) => ThisThread.CmdOpticalFlowExecuteNV(commandBuffer, session, pExecuteInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdOpticalFlowExecuteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdOpticalFlowExecuteNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
        [NativeTypeName("const VkOpticalFlowExecuteInfoNV *")]
            Ref<OpticalFlowExecuteInfoNV> pExecuteInfo
    )
    {
        fixed (OpticalFlowExecuteInfoNV* __dsl_pExecuteInfo = pExecuteInfo)
        {
            ((IVk)this).CmdOpticalFlowExecuteNV(commandBuffer, session, __dsl_pExecuteInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdOpticalFlowExecuteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdOpticalFlowExecuteNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
        [NativeTypeName("const VkOpticalFlowExecuteInfoNV *")]
            Ref<OpticalFlowExecuteInfoNV> pExecuteInfo
    ) => ThisThread.CmdOpticalFlowExecuteNV(commandBuffer, session, pExecuteInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPipelineBarrier(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags dstStageMask,
        [NativeTypeName("VkDependencyFlags")] DependencyFlags dependencyFlags,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] MemoryBarrier* pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            BufferMemoryBarrier* pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")] ImageMemoryBarrier* pImageMemoryBarriers
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                PipelineStageFlags,
                PipelineStageFlags,
                DependencyFlags,
                uint,
                MemoryBarrier*,
                uint,
                BufferMemoryBarrier*,
                uint,
                ImageMemoryBarrier*,
                void>)(
                _slots[148] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[148] = nativeContext.LoadFunction("vkCmdPipelineBarrier", "vulkan")
            )
        )(
            commandBuffer,
            srcStageMask,
            dstStageMask,
            dependencyFlags,
            memoryBarrierCount,
            pMemoryBarriers,
            bufferMemoryBarrierCount,
            pBufferMemoryBarriers,
            imageMemoryBarrierCount,
            pImageMemoryBarriers
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPipelineBarrier(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags dstStageMask,
        [NativeTypeName("VkDependencyFlags")] DependencyFlags dependencyFlags,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] MemoryBarrier* pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            BufferMemoryBarrier* pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")] ImageMemoryBarrier* pImageMemoryBarriers
    ) =>
        ThisThread.CmdPipelineBarrier(
            commandBuffer,
            srcStageMask,
            dstStageMask,
            dependencyFlags,
            memoryBarrierCount,
            pMemoryBarriers,
            bufferMemoryBarrierCount,
            pBufferMemoryBarriers,
            imageMemoryBarrierCount,
            pImageMemoryBarriers
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPipelineBarrier(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags dstStageMask,
        [NativeTypeName("VkDependencyFlags")] DependencyFlags dependencyFlags,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] Ref<MemoryBarrier> pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            Ref<BufferMemoryBarrier> pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")]
            Ref<ImageMemoryBarrier> pImageMemoryBarriers
    )
    {
        fixed (ImageMemoryBarrier* __dsl_pImageMemoryBarriers = pImageMemoryBarriers)
        fixed (BufferMemoryBarrier* __dsl_pBufferMemoryBarriers = pBufferMemoryBarriers)
        fixed (MemoryBarrier* __dsl_pMemoryBarriers = pMemoryBarriers)
        {
            ((IVk)this).CmdPipelineBarrier(
                commandBuffer,
                srcStageMask,
                dstStageMask,
                dependencyFlags,
                memoryBarrierCount,
                __dsl_pMemoryBarriers,
                bufferMemoryBarrierCount,
                __dsl_pBufferMemoryBarriers,
                imageMemoryBarrierCount,
                __dsl_pImageMemoryBarriers
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPipelineBarrier(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags dstStageMask,
        [NativeTypeName("VkDependencyFlags")] DependencyFlags dependencyFlags,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] Ref<MemoryBarrier> pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            Ref<BufferMemoryBarrier> pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")]
            Ref<ImageMemoryBarrier> pImageMemoryBarriers
    ) =>
        ThisThread.CmdPipelineBarrier(
            commandBuffer,
            srcStageMask,
            dstStageMask,
            dependencyFlags,
            memoryBarrierCount,
            pMemoryBarriers,
            bufferMemoryBarrierCount,
            pBufferMemoryBarriers,
            imageMemoryBarrierCount,
            pImageMemoryBarriers
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPipelineBarrier2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, DependencyInfo*, void>)(
                _slots[149] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[149] = nativeContext.LoadFunction("vkCmdPipelineBarrier2", "vulkan")
            )
        )(commandBuffer, pDependencyInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPipelineBarrier2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) => ThisThread.CmdPipelineBarrier2(commandBuffer, pDependencyInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPipelineBarrier2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    )
    {
        fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
        {
            ((IVk)this).CmdPipelineBarrier2(commandBuffer, __dsl_pDependencyInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPipelineBarrier2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    ) => ThisThread.CmdPipelineBarrier2(commandBuffer, pDependencyInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPipelineBarrier2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, DependencyInfo*, void>)(
                _slots[150] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[150] = nativeContext.LoadFunction("vkCmdPipelineBarrier2KHR", "vulkan")
            )
        )(commandBuffer, pDependencyInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPipelineBarrier2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) => ThisThread.CmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPipelineBarrier2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    )
    {
        fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
        {
            ((IVk)this).CmdPipelineBarrier2KHR(commandBuffer, __dsl_pDependencyInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPipelineBarrier2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    ) => ThisThread.CmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPreprocessGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            GeneratedCommandsInfoEXT* pGeneratedCommandsInfo,
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle stateCommandBuffer
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                GeneratedCommandsInfoEXT*,
                CommandBufferHandle,
                void>)(
                _slots[151] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[151] = nativeContext.LoadFunction(
                        "vkCmdPreprocessGeneratedCommandsEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pGeneratedCommandsInfo, stateCommandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPreprocessGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            GeneratedCommandsInfoEXT* pGeneratedCommandsInfo,
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle stateCommandBuffer
    ) =>
        ThisThread.CmdPreprocessGeneratedCommandsEXT(
            commandBuffer,
            pGeneratedCommandsInfo,
            stateCommandBuffer
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPreprocessGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            Ref<GeneratedCommandsInfoEXT> pGeneratedCommandsInfo,
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle stateCommandBuffer
    )
    {
        fixed (GeneratedCommandsInfoEXT* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
        {
            ((IVk)this).CmdPreprocessGeneratedCommandsEXT(
                commandBuffer,
                __dsl_pGeneratedCommandsInfo,
                stateCommandBuffer
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPreprocessGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            Ref<GeneratedCommandsInfoEXT> pGeneratedCommandsInfo,
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle stateCommandBuffer
    ) =>
        ThisThread.CmdPreprocessGeneratedCommandsEXT(
            commandBuffer,
            pGeneratedCommandsInfo,
            stateCommandBuffer
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPreprocessGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            GeneratedCommandsInfoNV* pGeneratedCommandsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, GeneratedCommandsInfoNV*, void>)(
                _slots[152] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[152] = nativeContext.LoadFunction(
                        "vkCmdPreprocessGeneratedCommandsNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, pGeneratedCommandsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPreprocessGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            GeneratedCommandsInfoNV* pGeneratedCommandsInfo
    ) => ThisThread.CmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPreprocessGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            Ref<GeneratedCommandsInfoNV> pGeneratedCommandsInfo
    )
    {
        fixed (GeneratedCommandsInfoNV* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
        {
            ((IVk)this).CmdPreprocessGeneratedCommandsNV(
                commandBuffer,
                __dsl_pGeneratedCommandsInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPreprocessGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            Ref<GeneratedCommandsInfoNV> pGeneratedCommandsInfo
    ) => ThisThread.CmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushConstants(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("VkShaderStageFlags")] ShaderStageFlags stageFlags,
        [NativeTypeName("uint32_t")] uint offset,
        [NativeTypeName("uint32_t")] uint size,
        [NativeTypeName("const void *")] void* pValues
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                PipelineLayoutHandle,
                ShaderStageFlags,
                uint,
                uint,
                void*,
                void>)(
                _slots[153] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[153] = nativeContext.LoadFunction("vkCmdPushConstants", "vulkan")
            )
        )(commandBuffer, layout, stageFlags, offset, size, pValues);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushConstants(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("VkShaderStageFlags")] ShaderStageFlags stageFlags,
        [NativeTypeName("uint32_t")] uint offset,
        [NativeTypeName("uint32_t")] uint size,
        [NativeTypeName("const void *")] void* pValues
    ) => ThisThread.CmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushConstants(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("VkShaderStageFlags")] ShaderStageFlags stageFlags,
        [NativeTypeName("uint32_t")] uint offset,
        [NativeTypeName("uint32_t")] uint size,
        [NativeTypeName("const void *")] Ref pValues
    )
    {
        fixed (void* __dsl_pValues = pValues)
        {
            ((IVk)this).CmdPushConstants(
                commandBuffer,
                layout,
                stageFlags,
                offset,
                size,
                __dsl_pValues
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushConstants(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("VkShaderStageFlags")] ShaderStageFlags stageFlags,
        [NativeTypeName("uint32_t")] uint offset,
        [NativeTypeName("uint32_t")] uint size,
        [NativeTypeName("const void *")] Ref pValues
    ) => ThisThread.CmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushConstants2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] PushConstantsInfo* pPushConstantsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PushConstantsInfo*, void>)(
                _slots[154] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[154] = nativeContext.LoadFunction("vkCmdPushConstants2", "vulkan")
            )
        )(commandBuffer, pPushConstantsInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushConstants2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] PushConstantsInfo* pPushConstantsInfo
    ) => ThisThread.CmdPushConstants2(commandBuffer, pPushConstantsInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushConstants2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] Ref<PushConstantsInfo> pPushConstantsInfo
    )
    {
        fixed (PushConstantsInfo* __dsl_pPushConstantsInfo = pPushConstantsInfo)
        {
            ((IVk)this).CmdPushConstants2(commandBuffer, __dsl_pPushConstantsInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushConstants2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] Ref<PushConstantsInfo> pPushConstantsInfo
    ) => ThisThread.CmdPushConstants2(commandBuffer, pPushConstantsInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushConstants2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] PushConstantsInfo* pPushConstantsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PushConstantsInfo*, void>)(
                _slots[155] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[155] = nativeContext.LoadFunction("vkCmdPushConstants2KHR", "vulkan")
            )
        )(commandBuffer, pPushConstantsInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushConstants2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] PushConstantsInfo* pPushConstantsInfo
    ) => ThisThread.CmdPushConstants2KHR(commandBuffer, pPushConstantsInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushConstants2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] Ref<PushConstantsInfo> pPushConstantsInfo
    )
    {
        fixed (PushConstantsInfo* __dsl_pPushConstantsInfo = pPushConstantsInfo)
        {
            ((IVk)this).CmdPushConstants2KHR(commandBuffer, __dsl_pPushConstantsInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushConstants2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] Ref<PushConstantsInfo> pPushConstantsInfo
    ) => ThisThread.CmdPushConstants2KHR(commandBuffer, pPushConstantsInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSet(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                PipelineBindPoint,
                PipelineLayoutHandle,
                uint,
                uint,
                WriteDescriptorSet*,
                void>)(
                _slots[156] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[156] = nativeContext.LoadFunction("vkCmdPushDescriptorSet", "vulkan")
            )
        )(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSet(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites
    ) =>
        ThisThread.CmdPushDescriptorSet(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set,
            descriptorWriteCount,
            pDescriptorWrites
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSet(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] Ref<WriteDescriptorSet> pDescriptorWrites
    )
    {
        fixed (WriteDescriptorSet* __dsl_pDescriptorWrites = pDescriptorWrites)
        {
            ((IVk)this).CmdPushDescriptorSet(
                commandBuffer,
                pipelineBindPoint,
                layout,
                set,
                descriptorWriteCount,
                __dsl_pDescriptorWrites
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSet(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] Ref<WriteDescriptorSet> pDescriptorWrites
    ) =>
        ThisThread.CmdPushDescriptorSet(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set,
            descriptorWriteCount,
            pDescriptorWrites
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSet(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet pDescriptorWrites
    ) =>
        ((IVk)this).CmdPushDescriptorSet(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set,
            1,
            (WriteDescriptorSet*)&pDescriptorWrites
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSet(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet pDescriptorWrites
    ) =>
        ThisThread.CmdPushDescriptorSet(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set,
            pDescriptorWrites
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSet2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            PushDescriptorSetInfo* pPushDescriptorSetInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PushDescriptorSetInfo*, void>)(
                _slots[157] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[157] = nativeContext.LoadFunction("vkCmdPushDescriptorSet2", "vulkan")
            )
        )(commandBuffer, pPushDescriptorSetInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSet2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            PushDescriptorSetInfo* pPushDescriptorSetInfo
    ) => ThisThread.CmdPushDescriptorSet2(commandBuffer, pPushDescriptorSetInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSet2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            Ref<PushDescriptorSetInfo> pPushDescriptorSetInfo
    )
    {
        fixed (PushDescriptorSetInfo* __dsl_pPushDescriptorSetInfo = pPushDescriptorSetInfo)
        {
            ((IVk)this).CmdPushDescriptorSet2(commandBuffer, __dsl_pPushDescriptorSetInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSet2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            Ref<PushDescriptorSetInfo> pPushDescriptorSetInfo
    ) => ThisThread.CmdPushDescriptorSet2(commandBuffer, pPushDescriptorSetInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSet2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            PushDescriptorSetInfo* pPushDescriptorSetInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PushDescriptorSetInfo*, void>)(
                _slots[158] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[158] = nativeContext.LoadFunction(
                        "vkCmdPushDescriptorSet2KHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pPushDescriptorSetInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSet2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            PushDescriptorSetInfo* pPushDescriptorSetInfo
    ) => ThisThread.CmdPushDescriptorSet2KHR(commandBuffer, pPushDescriptorSetInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSet2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            Ref<PushDescriptorSetInfo> pPushDescriptorSetInfo
    )
    {
        fixed (PushDescriptorSetInfo* __dsl_pPushDescriptorSetInfo = pPushDescriptorSetInfo)
        {
            ((IVk)this).CmdPushDescriptorSet2KHR(commandBuffer, __dsl_pPushDescriptorSetInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSet2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            Ref<PushDescriptorSetInfo> pPushDescriptorSetInfo
    ) => ThisThread.CmdPushDescriptorSet2KHR(commandBuffer, pPushDescriptorSetInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_push_descriptor"],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSetKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                PipelineBindPoint,
                PipelineLayoutHandle,
                uint,
                uint,
                WriteDescriptorSet*,
                void>)(
                _slots[159] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[159] = nativeContext.LoadFunction(
                        "vkCmdPushDescriptorSetKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_push_descriptor"],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites
    ) =>
        ThisThread.CmdPushDescriptorSetKHR(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set,
            descriptorWriteCount,
            pDescriptorWrites
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_push_descriptor"],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSetKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] Ref<WriteDescriptorSet> pDescriptorWrites
    )
    {
        fixed (WriteDescriptorSet* __dsl_pDescriptorWrites = pDescriptorWrites)
        {
            ((IVk)this).CmdPushDescriptorSetKHR(
                commandBuffer,
                pipelineBindPoint,
                layout,
                set,
                descriptorWriteCount,
                __dsl_pDescriptorWrites
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_push_descriptor"],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] Ref<WriteDescriptorSet> pDescriptorWrites
    ) =>
        ThisThread.CmdPushDescriptorSetKHR(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set,
            descriptorWriteCount,
            pDescriptorWrites
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_push_descriptor"],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSetKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet pDescriptorWrites
    ) =>
        ((IVk)this).CmdPushDescriptorSetKHR(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set,
            1,
            (WriteDescriptorSet*)&pDescriptorWrites
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_push_descriptor"],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet pDescriptorWrites
    ) =>
        ThisThread.CmdPushDescriptorSetKHR(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set,
            pDescriptorWrites
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSetWithTemplate(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] void* pData
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                DescriptorUpdateTemplateHandle,
                PipelineLayoutHandle,
                uint,
                void*,
                void>)(
                _slots[160] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[160] = nativeContext.LoadFunction(
                        "vkCmdPushDescriptorSetWithTemplate",
                        "vulkan"
                    )
            )
        )(commandBuffer, descriptorUpdateTemplate, layout, set, pData);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplate(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] void* pData
    ) =>
        ThisThread.CmdPushDescriptorSetWithTemplate(
            commandBuffer,
            descriptorUpdateTemplate,
            layout,
            set,
            pData
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSetWithTemplate(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        {
            ((IVk)this).CmdPushDescriptorSetWithTemplate(
                commandBuffer,
                descriptorUpdateTemplate,
                layout,
                set,
                __dsl_pData
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplate(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] Ref pData
    ) =>
        ThisThread.CmdPushDescriptorSetWithTemplate(
            commandBuffer,
            descriptorUpdateTemplate,
            layout,
            set,
            pData
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSetWithTemplate2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            PushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PushDescriptorSetWithTemplateInfo*, void>)(
                _slots[161] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[161] = nativeContext.LoadFunction(
                        "vkCmdPushDescriptorSetWithTemplate2",
                        "vulkan"
                    )
            )
        )(commandBuffer, pPushDescriptorSetWithTemplateInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplate2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            PushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo
    ) =>
        ThisThread.CmdPushDescriptorSetWithTemplate2(
            commandBuffer,
            pPushDescriptorSetWithTemplateInfo
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSetWithTemplate2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            Ref<PushDescriptorSetWithTemplateInfo> pPushDescriptorSetWithTemplateInfo
    )
    {
        fixed (
            PushDescriptorSetWithTemplateInfo* __dsl_pPushDescriptorSetWithTemplateInfo =
                pPushDescriptorSetWithTemplateInfo
        )
        {
            ((IVk)this).CmdPushDescriptorSetWithTemplate2(
                commandBuffer,
                __dsl_pPushDescriptorSetWithTemplateInfo
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplate2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            Ref<PushDescriptorSetWithTemplateInfo> pPushDescriptorSetWithTemplateInfo
    ) =>
        ThisThread.CmdPushDescriptorSetWithTemplate2(
            commandBuffer,
            pPushDescriptorSetWithTemplateInfo
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSetWithTemplate2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            PushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PushDescriptorSetWithTemplateInfo*, void>)(
                _slots[162] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[162] = nativeContext.LoadFunction(
                        "vkCmdPushDescriptorSetWithTemplate2KHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pPushDescriptorSetWithTemplateInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplate2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            PushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo
    ) =>
        ThisThread.CmdPushDescriptorSetWithTemplate2KHR(
            commandBuffer,
            pPushDescriptorSetWithTemplateInfo
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSetWithTemplate2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            Ref<PushDescriptorSetWithTemplateInfo> pPushDescriptorSetWithTemplateInfo
    )
    {
        fixed (
            PushDescriptorSetWithTemplateInfo* __dsl_pPushDescriptorSetWithTemplateInfo =
                pPushDescriptorSetWithTemplateInfo
        )
        {
            ((IVk)this).CmdPushDescriptorSetWithTemplate2KHR(
                commandBuffer,
                __dsl_pPushDescriptorSetWithTemplateInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplate2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            Ref<PushDescriptorSetWithTemplateInfo> pPushDescriptorSetWithTemplateInfo
    ) =>
        ThisThread.CmdPushDescriptorSetWithTemplate2KHR(
            commandBuffer,
            pPushDescriptorSetWithTemplateInfo
        );

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_push_descriptor+VK_KHR_descriptor_update_template",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] void* pData
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                DescriptorUpdateTemplateHandle,
                PipelineLayoutHandle,
                uint,
                void*,
                void>)(
                _slots[163] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[163] = nativeContext.LoadFunction(
                        "vkCmdPushDescriptorSetWithTemplateKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, descriptorUpdateTemplate, layout, set, pData);

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_push_descriptor+VK_KHR_descriptor_update_template",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] void* pData
    ) =>
        ThisThread.CmdPushDescriptorSetWithTemplateKHR(
            commandBuffer,
            descriptorUpdateTemplate,
            layout,
            set,
            pData
        );

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_push_descriptor+VK_KHR_descriptor_update_template",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdPushDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        {
            ((IVk)this).CmdPushDescriptorSetWithTemplateKHR(
                commandBuffer,
                descriptorUpdateTemplate,
                layout,
                set,
                __dsl_pData
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_push_descriptor+VK_KHR_descriptor_update_template",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] Ref pData
    ) =>
        ThisThread.CmdPushDescriptorSetWithTemplateKHR(
            commandBuffer,
            descriptorUpdateTemplate,
            layout,
            set,
            pData
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdResetEvent(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags stageMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, EventHandle, PipelineStageFlags, void>)(
                _slots[164] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[164] = nativeContext.LoadFunction("vkCmdResetEvent", "vulkan")
            )
        )(commandBuffer, @event, stageMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResetEvent(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags stageMask
    ) => ThisThread.CmdResetEvent(commandBuffer, @event, stageMask);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdResetEvent2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stageMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, EventHandle, PipelineStageFlags2, void>)(
                _slots[165] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[165] = nativeContext.LoadFunction("vkCmdResetEvent2", "vulkan")
            )
        )(commandBuffer, @event, stageMask);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResetEvent2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stageMask
    ) => ThisThread.CmdResetEvent2(commandBuffer, @event, stageMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdResetEvent2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stageMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, EventHandle, PipelineStageFlags2, void>)(
                _slots[166] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[166] = nativeContext.LoadFunction("vkCmdResetEvent2KHR", "vulkan")
            )
        )(commandBuffer, @event, stageMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResetEvent2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stageMask
    ) => ThisThread.CmdResetEvent2KHR(commandBuffer, @event, stageMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdResetQueryPool(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, QueryPoolHandle, uint, uint, void>)(
                _slots[167] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[167] = nativeContext.LoadFunction("vkCmdResetQueryPool", "vulkan")
            )
        )(commandBuffer, queryPool, firstQuery, queryCount);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResetQueryPool(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) => ThisThread.CmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdResolveImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageResolve *")] ImageResolve* pRegions
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                ImageHandle,
                ImageLayout,
                ImageHandle,
                ImageLayout,
                uint,
                ImageResolve*,
                void>)(
                _slots[168] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[168] = nativeContext.LoadFunction("vkCmdResolveImage", "vulkan")
            )
        )(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResolveImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageResolve *")] ImageResolve* pRegions
    ) =>
        ThisThread.CmdResolveImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdResolveImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageResolve *")] Ref<ImageResolve> pRegions
    )
    {
        fixed (ImageResolve* __dsl_pRegions = pRegions)
        {
            ((IVk)this).CmdResolveImage(
                commandBuffer,
                srcImage,
                srcImageLayout,
                dstImage,
                dstImageLayout,
                regionCount,
                __dsl_pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResolveImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageResolve *")] Ref<ImageResolve> pRegions
    ) =>
        ThisThread.CmdResolveImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdResolveImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageResolve *")] ImageResolve pRegions
    ) =>
        ((IVk)this).CmdResolveImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            1,
            (ImageResolve*)&pRegions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResolveImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageResolve *")] ImageResolve pRegions
    ) =>
        ThisThread.CmdResolveImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            pRegions
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdResolveImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] ResolveImageInfo2* pResolveImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, ResolveImageInfo2*, void>)(
                _slots[169] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[169] = nativeContext.LoadFunction("vkCmdResolveImage2", "vulkan")
            )
        )(commandBuffer, pResolveImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResolveImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] ResolveImageInfo2* pResolveImageInfo
    ) => ThisThread.CmdResolveImage2(commandBuffer, pResolveImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdResolveImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] Ref<ResolveImageInfo2> pResolveImageInfo
    )
    {
        fixed (ResolveImageInfo2* __dsl_pResolveImageInfo = pResolveImageInfo)
        {
            ((IVk)this).CmdResolveImage2(commandBuffer, __dsl_pResolveImageInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResolveImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] Ref<ResolveImageInfo2> pResolveImageInfo
    ) => ThisThread.CmdResolveImage2(commandBuffer, pResolveImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdResolveImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] ResolveImageInfo2* pResolveImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, ResolveImageInfo2*, void>)(
                _slots[170] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[170] = nativeContext.LoadFunction("vkCmdResolveImage2KHR", "vulkan")
            )
        )(commandBuffer, pResolveImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResolveImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] ResolveImageInfo2* pResolveImageInfo
    ) => ThisThread.CmdResolveImage2KHR(commandBuffer, pResolveImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdResolveImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] Ref<ResolveImageInfo2> pResolveImageInfo
    )
    {
        fixed (ResolveImageInfo2* __dsl_pResolveImageInfo = pResolveImageInfo)
        {
            ((IVk)this).CmdResolveImage2KHR(commandBuffer, __dsl_pResolveImageInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResolveImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] Ref<ResolveImageInfo2> pResolveImageInfo
    ) => ThisThread.CmdResolveImage2KHR(commandBuffer, pResolveImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetAlphaToCoverageEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetAlphaToCoverageEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> alphaToCoverageEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[171] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[171] = nativeContext.LoadFunction(
                        "vkCmdSetAlphaToCoverageEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, alphaToCoverageEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetAlphaToCoverageEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetAlphaToCoverageEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> alphaToCoverageEnable
    ) => ThisThread.CmdSetAlphaToCoverageEnableEXT(commandBuffer, alphaToCoverageEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetAlphaToOneEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetAlphaToOneEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> alphaToOneEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[172] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[172] = nativeContext.LoadFunction(
                        "vkCmdSetAlphaToOneEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, alphaToOneEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetAlphaToOneEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetAlphaToOneEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> alphaToOneEnable
    ) => ThisThread.CmdSetAlphaToOneEnableEXT(commandBuffer, alphaToOneEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_attachment_feedback_loop_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetAttachmentFeedbackLoopEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetAttachmentFeedbackLoopEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImageAspectFlags")] ImageAspectFlags aspectMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, ImageAspectFlags, void>)(
                _slots[173] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[173] = nativeContext.LoadFunction(
                        "vkCmdSetAttachmentFeedbackLoopEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, aspectMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_attachment_feedback_loop_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetAttachmentFeedbackLoopEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetAttachmentFeedbackLoopEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkImageAspectFlags")] ImageAspectFlags aspectMask
    ) => ThisThread.CmdSetAttachmentFeedbackLoopEnableEXT(commandBuffer, aspectMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetBlendConstants")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetBlendConstants(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const float[4]")] float* blendConstants
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, float*, void>)(
                _slots[174] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[174] = nativeContext.LoadFunction("vkCmdSetBlendConstants", "vulkan")
            )
        )(commandBuffer, blendConstants);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetBlendConstants")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetBlendConstants(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const float[4]")] float* blendConstants
    ) => ThisThread.CmdSetBlendConstants(commandBuffer, blendConstants);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetBlendConstants")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetBlendConstants(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const float[4]")] Ref<float> blendConstants
    )
    {
        fixed (float* __dsl_blendConstants = blendConstants)
        {
            ((IVk)this).CmdSetBlendConstants(commandBuffer, __dsl_blendConstants);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetBlendConstants")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetBlendConstants(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const float[4]")] Ref<float> blendConstants
    ) => ThisThread.CmdSetBlendConstants(commandBuffer, blendConstants);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCheckpointNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCheckpointNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const void *")] void* pCheckpointMarker
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, void*, void>)(
                _slots[175] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[175] = nativeContext.LoadFunction("vkCmdSetCheckpointNV", "vulkan")
            )
        )(commandBuffer, pCheckpointMarker);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCheckpointNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCheckpointNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const void *")] void* pCheckpointMarker
    ) => ThisThread.CmdSetCheckpointNV(commandBuffer, pCheckpointMarker);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCheckpointNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCheckpointNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const void *")] Ref pCheckpointMarker
    )
    {
        fixed (void* __dsl_pCheckpointMarker = pCheckpointMarker)
        {
            ((IVk)this).CmdSetCheckpointNV(commandBuffer, __dsl_pCheckpointMarker);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCheckpointNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCheckpointNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const void *")] Ref pCheckpointMarker
    ) => ThisThread.CmdSetCheckpointNV(commandBuffer, pCheckpointMarker);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCoarseSampleOrderNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        CoarseSampleOrderTypeNV sampleOrderType,
        [NativeTypeName("uint32_t")] uint customSampleOrderCount,
        [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
            CoarseSampleOrderCustomNV* pCustomSampleOrders
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                CoarseSampleOrderTypeNV,
                uint,
                CoarseSampleOrderCustomNV*,
                void>)(
                _slots[176] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[176] = nativeContext.LoadFunction(
                        "vkCmdSetCoarseSampleOrderNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoarseSampleOrderNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        CoarseSampleOrderTypeNV sampleOrderType,
        [NativeTypeName("uint32_t")] uint customSampleOrderCount,
        [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
            CoarseSampleOrderCustomNV* pCustomSampleOrders
    ) =>
        ThisThread.CmdSetCoarseSampleOrderNV(
            commandBuffer,
            sampleOrderType,
            customSampleOrderCount,
            pCustomSampleOrders
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCoarseSampleOrderNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        CoarseSampleOrderTypeNV sampleOrderType,
        [NativeTypeName("uint32_t")] uint customSampleOrderCount,
        [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
            Ref<CoarseSampleOrderCustomNV> pCustomSampleOrders
    )
    {
        fixed (CoarseSampleOrderCustomNV* __dsl_pCustomSampleOrders = pCustomSampleOrders)
        {
            ((IVk)this).CmdSetCoarseSampleOrderNV(
                commandBuffer,
                sampleOrderType,
                customSampleOrderCount,
                __dsl_pCustomSampleOrders
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoarseSampleOrderNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        CoarseSampleOrderTypeNV sampleOrderType,
        [NativeTypeName("uint32_t")] uint customSampleOrderCount,
        [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
            Ref<CoarseSampleOrderCustomNV> pCustomSampleOrders
    ) =>
        ThisThread.CmdSetCoarseSampleOrderNV(
            commandBuffer,
            sampleOrderType,
            customSampleOrderCount,
            pCustomSampleOrders
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCoarseSampleOrderNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        CoarseSampleOrderTypeNV sampleOrderType,
        [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
            CoarseSampleOrderCustomNV pCustomSampleOrders
    ) =>
        ((IVk)this).CmdSetCoarseSampleOrderNV(
            commandBuffer,
            sampleOrderType,
            1,
            (CoarseSampleOrderCustomNV*)&pCustomSampleOrders
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoarseSampleOrderNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        CoarseSampleOrderTypeNV sampleOrderType,
        [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
            CoarseSampleOrderCustomNV pCustomSampleOrders
    ) => ThisThread.CmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, pCustomSampleOrders);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorBlendAdvancedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendAdvancedEXT *")]
            ColorBlendAdvancedEXT* pColorBlendAdvanced
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, ColorBlendAdvancedEXT*, void>)(
                _slots[177] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[177] = nativeContext.LoadFunction(
                        "vkCmdSetColorBlendAdvancedEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendAdvancedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendAdvancedEXT *")]
            ColorBlendAdvancedEXT* pColorBlendAdvanced
    ) =>
        ThisThread.CmdSetColorBlendAdvancedEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorBlendAdvanced
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorBlendAdvancedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendAdvancedEXT *")]
            Ref<ColorBlendAdvancedEXT> pColorBlendAdvanced
    )
    {
        fixed (ColorBlendAdvancedEXT* __dsl_pColorBlendAdvanced = pColorBlendAdvanced)
        {
            ((IVk)this).CmdSetColorBlendAdvancedEXT(
                commandBuffer,
                firstAttachment,
                attachmentCount,
                __dsl_pColorBlendAdvanced
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendAdvancedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendAdvancedEXT *")]
            Ref<ColorBlendAdvancedEXT> pColorBlendAdvanced
    ) =>
        ThisThread.CmdSetColorBlendAdvancedEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorBlendAdvanced
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorBlendAdvancedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkColorBlendAdvancedEXT *")]
            ColorBlendAdvancedEXT pColorBlendAdvanced
    ) =>
        ((IVk)this).CmdSetColorBlendAdvancedEXT(
            commandBuffer,
            firstAttachment,
            1,
            (ColorBlendAdvancedEXT*)&pColorBlendAdvanced
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendAdvancedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkColorBlendAdvancedEXT *")]
            ColorBlendAdvancedEXT pColorBlendAdvanced
    ) =>
        ThisThread.CmdSetColorBlendAdvancedEXT(commandBuffer, firstAttachment, pColorBlendAdvanced);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorBlendEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] MaybeBool<uint>* pColorBlendEnables
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, MaybeBool<uint>*, void>)(
                _slots[178] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[178] = nativeContext.LoadFunction(
                        "vkCmdSetColorBlendEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] MaybeBool<uint>* pColorBlendEnables
    ) =>
        ThisThread.CmdSetColorBlendEnableEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorBlendEnables
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorBlendEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] Ref<MaybeBool<uint>> pColorBlendEnables
    )
    {
        fixed (MaybeBool<uint>* __dsl_pColorBlendEnables = pColorBlendEnables)
        {
            ((IVk)this).CmdSetColorBlendEnableEXT(
                commandBuffer,
                firstAttachment,
                attachmentCount,
                __dsl_pColorBlendEnables
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] Ref<MaybeBool<uint>> pColorBlendEnables
    ) =>
        ThisThread.CmdSetColorBlendEnableEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorBlendEnables
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorBlendEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkBool32 *")] MaybeBool<uint> pColorBlendEnables
    ) =>
        ((IVk)this).CmdSetColorBlendEnableEXT(
            commandBuffer,
            firstAttachment,
            1,
            (MaybeBool<uint>*)&pColorBlendEnables
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkBool32 *")] MaybeBool<uint> pColorBlendEnables
    ) => ThisThread.CmdSetColorBlendEnableEXT(commandBuffer, firstAttachment, pColorBlendEnables);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEquationEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorBlendEquationEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendEquationEXT *")]
            ColorBlendEquationEXT* pColorBlendEquations
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, ColorBlendEquationEXT*, void>)(
                _slots[179] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[179] = nativeContext.LoadFunction(
                        "vkCmdSetColorBlendEquationEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEquationEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendEquationEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendEquationEXT *")]
            ColorBlendEquationEXT* pColorBlendEquations
    ) =>
        ThisThread.CmdSetColorBlendEquationEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorBlendEquations
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEquationEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorBlendEquationEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendEquationEXT *")]
            Ref<ColorBlendEquationEXT> pColorBlendEquations
    )
    {
        fixed (ColorBlendEquationEXT* __dsl_pColorBlendEquations = pColorBlendEquations)
        {
            ((IVk)this).CmdSetColorBlendEquationEXT(
                commandBuffer,
                firstAttachment,
                attachmentCount,
                __dsl_pColorBlendEquations
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEquationEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendEquationEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendEquationEXT *")]
            Ref<ColorBlendEquationEXT> pColorBlendEquations
    ) =>
        ThisThread.CmdSetColorBlendEquationEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorBlendEquations
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEquationEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorBlendEquationEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkColorBlendEquationEXT *")]
            ColorBlendEquationEXT pColorBlendEquations
    ) =>
        ((IVk)this).CmdSetColorBlendEquationEXT(
            commandBuffer,
            firstAttachment,
            1,
            (ColorBlendEquationEXT*)&pColorBlendEquations
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEquationEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendEquationEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkColorBlendEquationEXT *")]
            ColorBlendEquationEXT pColorBlendEquations
    ) =>
        ThisThread.CmdSetColorBlendEquationEXT(
            commandBuffer,
            firstAttachment,
            pColorBlendEquations
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_color_write_enable"],
        ImpliesSets = [
            "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_color_write_enable+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] MaybeBool<uint>* pColorWriteEnables
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, MaybeBool<uint>*, void>)(
                _slots[180] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[180] = nativeContext.LoadFunction(
                        "vkCmdSetColorWriteEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, attachmentCount, pColorWriteEnables);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_color_write_enable"],
        ImpliesSets = [
            "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_color_write_enable+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] MaybeBool<uint>* pColorWriteEnables
    ) => ThisThread.CmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_color_write_enable"],
        ImpliesSets = [
            "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_color_write_enable+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] Ref<MaybeBool<uint>> pColorWriteEnables
    )
    {
        fixed (MaybeBool<uint>* __dsl_pColorWriteEnables = pColorWriteEnables)
        {
            ((IVk)this).CmdSetColorWriteEnableEXT(
                commandBuffer,
                attachmentCount,
                __dsl_pColorWriteEnables
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_color_write_enable"],
        ImpliesSets = [
            "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_color_write_enable+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] Ref<MaybeBool<uint>> pColorWriteEnables
    ) => ThisThread.CmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_color_write_enable"],
        ImpliesSets = [
            "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_color_write_enable+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBool32 *")] MaybeBool<uint> pColorWriteEnables
    ) =>
        ((IVk)this).CmdSetColorWriteEnableEXT(
            commandBuffer,
            1,
            (MaybeBool<uint>*)&pColorWriteEnables
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_color_write_enable"],
        ImpliesSets = [
            "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_color_write_enable+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkBool32 *")] MaybeBool<uint> pColorWriteEnables
    ) => ThisThread.CmdSetColorWriteEnableEXT(commandBuffer, pColorWriteEnables);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorWriteMaskEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorComponentFlags *")] ColorComponentFlags* pColorWriteMasks
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, ColorComponentFlags*, void>)(
                _slots[181] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[181] = nativeContext.LoadFunction(
                        "vkCmdSetColorWriteMaskEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorWriteMaskEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorComponentFlags *")] ColorComponentFlags* pColorWriteMasks
    ) =>
        ThisThread.CmdSetColorWriteMaskEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorWriteMasks
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorWriteMaskEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorComponentFlags *")] Ref<ColorComponentFlags> pColorWriteMasks
    )
    {
        fixed (ColorComponentFlags* __dsl_pColorWriteMasks = pColorWriteMasks)
        {
            ((IVk)this).CmdSetColorWriteMaskEXT(
                commandBuffer,
                firstAttachment,
                attachmentCount,
                __dsl_pColorWriteMasks
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorWriteMaskEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorComponentFlags *")] Ref<ColorComponentFlags> pColorWriteMasks
    ) =>
        ThisThread.CmdSetColorWriteMaskEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorWriteMasks
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetColorWriteMaskEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkColorComponentFlags *")] ColorComponentFlags pColorWriteMasks
    ) =>
        ((IVk)this).CmdSetColorWriteMaskEXT(
            commandBuffer,
            firstAttachment,
            1,
            (ColorComponentFlags*)&pColorWriteMasks
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorWriteMaskEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkColorComponentFlags *")] ColorComponentFlags pColorWriteMasks
    ) => ThisThread.CmdSetColorWriteMaskEXT(commandBuffer, firstAttachment, pColorWriteMasks);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conservative_rasterization", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetConservativeRasterizationModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetConservativeRasterizationModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        ConservativeRasterizationModeEXT conservativeRasterizationMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, ConservativeRasterizationModeEXT, void>)(
                _slots[182] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[182] = nativeContext.LoadFunction(
                        "vkCmdSetConservativeRasterizationModeEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, conservativeRasterizationMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conservative_rasterization", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetConservativeRasterizationModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetConservativeRasterizationModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        ConservativeRasterizationModeEXT conservativeRasterizationMode
    ) =>
        ThisThread.CmdSetConservativeRasterizationModeEXT(
            commandBuffer,
            conservativeRasterizationMode
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationModeNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCoverageModulationModeNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        CoverageModulationModeNV coverageModulationMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CoverageModulationModeNV, void>)(
                _slots[183] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[183] = nativeContext.LoadFunction(
                        "vkCmdSetCoverageModulationModeNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, coverageModulationMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationModeNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageModulationModeNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        CoverageModulationModeNV coverageModulationMode
    ) => ThisThread.CmdSetCoverageModulationModeNV(commandBuffer, coverageModulationMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCoverageModulationTableEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> coverageModulationTableEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[184] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[184] = nativeContext.LoadFunction(
                        "vkCmdSetCoverageModulationTableEnableNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, coverageModulationTableEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageModulationTableEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> coverageModulationTableEnable
    ) =>
        ThisThread.CmdSetCoverageModulationTableEnableNV(
            commandBuffer,
            coverageModulationTableEnable
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCoverageModulationTableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint coverageModulationTableCount,
        [NativeTypeName("const float *")] float* pCoverageModulationTable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, float*, void>)(
                _slots[185] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[185] = nativeContext.LoadFunction(
                        "vkCmdSetCoverageModulationTableNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, coverageModulationTableCount, pCoverageModulationTable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageModulationTableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint coverageModulationTableCount,
        [NativeTypeName("const float *")] float* pCoverageModulationTable
    ) =>
        ThisThread.CmdSetCoverageModulationTableNV(
            commandBuffer,
            coverageModulationTableCount,
            pCoverageModulationTable
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCoverageModulationTableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint coverageModulationTableCount,
        [NativeTypeName("const float *")] Ref<float> pCoverageModulationTable
    )
    {
        fixed (float* __dsl_pCoverageModulationTable = pCoverageModulationTable)
        {
            ((IVk)this).CmdSetCoverageModulationTableNV(
                commandBuffer,
                coverageModulationTableCount,
                __dsl_pCoverageModulationTable
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageModulationTableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint coverageModulationTableCount,
        [NativeTypeName("const float *")] Ref<float> pCoverageModulationTable
    ) =>
        ThisThread.CmdSetCoverageModulationTableNV(
            commandBuffer,
            coverageModulationTableCount,
            pCoverageModulationTable
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCoverageModulationTableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const float *")] float pCoverageModulationTable
    ) =>
        ((IVk)this).CmdSetCoverageModulationTableNV(
            commandBuffer,
            1,
            (float*)&pCoverageModulationTable
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageModulationTableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const float *")] float pCoverageModulationTable
    ) => ThisThread.CmdSetCoverageModulationTableNV(commandBuffer, pCoverageModulationTable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_coverage_reduction_mode"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageReductionModeNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCoverageReductionModeNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        CoverageReductionModeNV coverageReductionMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CoverageReductionModeNV, void>)(
                _slots[186] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[186] = nativeContext.LoadFunction(
                        "vkCmdSetCoverageReductionModeNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, coverageReductionMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_coverage_reduction_mode"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageReductionModeNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageReductionModeNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        CoverageReductionModeNV coverageReductionMode
    ) => ThisThread.CmdSetCoverageReductionModeNV(commandBuffer, coverageReductionMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_fragment_coverage_to_color"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageToColorEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCoverageToColorEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> coverageToColorEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[187] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[187] = nativeContext.LoadFunction(
                        "vkCmdSetCoverageToColorEnableNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, coverageToColorEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_fragment_coverage_to_color"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageToColorEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageToColorEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> coverageToColorEnable
    ) => ThisThread.CmdSetCoverageToColorEnableNV(commandBuffer, coverageToColorEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_fragment_coverage_to_color"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageToColorLocationNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCoverageToColorLocationNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint coverageToColorLocation
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, void>)(
                _slots[188] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[188] = nativeContext.LoadFunction(
                        "vkCmdSetCoverageToColorLocationNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, coverageToColorLocation);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_fragment_coverage_to_color"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageToColorLocationNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageToColorLocationNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint coverageToColorLocation
    ) => ThisThread.CmdSetCoverageToColorLocationNV(commandBuffer, coverageToColorLocation);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCullMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCullMode(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkCullModeFlags")] CullModeFlags cullMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CullModeFlags, void>)(
                _slots[189] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[189] = nativeContext.LoadFunction("vkCmdSetCullMode", "vulkan")
            )
        )(commandBuffer, cullMode);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCullMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCullMode(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkCullModeFlags")] CullModeFlags cullMode
    ) => ThisThread.CmdSetCullMode(commandBuffer, cullMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCullModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetCullModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkCullModeFlags")] CullModeFlags cullMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CullModeFlags, void>)(
                _slots[190] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[190] = nativeContext.LoadFunction("vkCmdSetCullModeEXT", "vulkan")
            )
        )(commandBuffer, cullMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCullModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCullModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkCullModeFlags")] CullModeFlags cullMode
    ) => ThisThread.CmdSetCullModeEXT(commandBuffer, cullMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthBias(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        float depthBiasConstantFactor,
        float depthBiasClamp,
        float depthBiasSlopeFactor
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, float, float, float, void>)(
                _slots[191] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[191] = nativeContext.LoadFunction("vkCmdSetDepthBias", "vulkan")
            )
        )(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBias(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        float depthBiasConstantFactor,
        float depthBiasClamp,
        float depthBiasSlopeFactor
    ) =>
        ThisThread.CmdSetDepthBias(
            commandBuffer,
            depthBiasConstantFactor,
            depthBiasClamp,
            depthBiasSlopeFactor
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_bias_control"],
        ImpliesSets = [
            "VK_EXT_depth_bias_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_bias_control+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthBias2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDepthBiasInfoEXT *")] DepthBiasInfoEXT* pDepthBiasInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, DepthBiasInfoEXT*, void>)(
                _slots[192] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[192] = nativeContext.LoadFunction("vkCmdSetDepthBias2EXT", "vulkan")
            )
        )(commandBuffer, pDepthBiasInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_bias_control"],
        ImpliesSets = [
            "VK_EXT_depth_bias_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_bias_control+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBias2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDepthBiasInfoEXT *")] DepthBiasInfoEXT* pDepthBiasInfo
    ) => ThisThread.CmdSetDepthBias2EXT(commandBuffer, pDepthBiasInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_bias_control"],
        ImpliesSets = [
            "VK_EXT_depth_bias_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_bias_control+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthBias2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDepthBiasInfoEXT *")] Ref<DepthBiasInfoEXT> pDepthBiasInfo
    )
    {
        fixed (DepthBiasInfoEXT* __dsl_pDepthBiasInfo = pDepthBiasInfo)
        {
            ((IVk)this).CmdSetDepthBias2EXT(commandBuffer, __dsl_pDepthBiasInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_bias_control"],
        ImpliesSets = [
            "VK_EXT_depth_bias_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_bias_control+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBias2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkDepthBiasInfoEXT *")] Ref<DepthBiasInfoEXT> pDepthBiasInfo
    ) => ThisThread.CmdSetDepthBias2EXT(commandBuffer, pDepthBiasInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBiasEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthBiasEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthBiasEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[193] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[193] = nativeContext.LoadFunction("vkCmdSetDepthBiasEnable", "vulkan")
            )
        )(commandBuffer, depthBiasEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBiasEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBiasEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthBiasEnable
    ) => ThisThread.CmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBiasEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthBiasEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthBiasEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[194] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[194] = nativeContext.LoadFunction(
                        "vkCmdSetDepthBiasEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthBiasEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBiasEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBiasEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthBiasEnable
    ) => ThisThread.CmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBounds")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthBounds(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        float minDepthBounds,
        float maxDepthBounds
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, float, float, void>)(
                _slots[195] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[195] = nativeContext.LoadFunction("vkCmdSetDepthBounds", "vulkan")
            )
        )(commandBuffer, minDepthBounds, maxDepthBounds);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBounds")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBounds(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        float minDepthBounds,
        float maxDepthBounds
    ) => ThisThread.CmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBoundsTestEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthBoundsTestEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthBoundsTestEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[196] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[196] = nativeContext.LoadFunction(
                        "vkCmdSetDepthBoundsTestEnable",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthBoundsTestEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBoundsTestEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBoundsTestEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthBoundsTestEnable
    ) => ThisThread.CmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBoundsTestEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthBoundsTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthBoundsTestEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[197] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[197] = nativeContext.LoadFunction(
                        "vkCmdSetDepthBoundsTestEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthBoundsTestEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBoundsTestEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBoundsTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthBoundsTestEnable
    ) => ThisThread.CmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthClampEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthClampEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[198] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[198] = nativeContext.LoadFunction(
                        "vkCmdSetDepthClampEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthClampEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthClampEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthClampEnable
    ) => ThisThread.CmdSetDepthClampEnableEXT(commandBuffer, depthClampEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clamp_control", "VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampRangeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthClampRangeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        DepthClampModeEXT depthClampMode,
        [NativeTypeName("const VkDepthClampRangeEXT *")] DepthClampRangeEXT* pDepthClampRange
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                DepthClampModeEXT,
                DepthClampRangeEXT*,
                void>)(
                _slots[199] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[199] = nativeContext.LoadFunction(
                        "vkCmdSetDepthClampRangeEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthClampMode, pDepthClampRange);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clamp_control", "VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampRangeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthClampRangeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        DepthClampModeEXT depthClampMode,
        [NativeTypeName("const VkDepthClampRangeEXT *")] DepthClampRangeEXT* pDepthClampRange
    ) => ThisThread.CmdSetDepthClampRangeEXT(commandBuffer, depthClampMode, pDepthClampRange);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clamp_control", "VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampRangeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthClampRangeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        DepthClampModeEXT depthClampMode,
        [NativeTypeName("const VkDepthClampRangeEXT *")] Ref<DepthClampRangeEXT> pDepthClampRange
    )
    {
        fixed (DepthClampRangeEXT* __dsl_pDepthClampRange = pDepthClampRange)
        {
            ((IVk)this).CmdSetDepthClampRangeEXT(
                commandBuffer,
                depthClampMode,
                __dsl_pDepthClampRange
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clamp_control", "VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampRangeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthClampRangeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        DepthClampModeEXT depthClampMode,
        [NativeTypeName("const VkDepthClampRangeEXT *")] Ref<DepthClampRangeEXT> pDepthClampRange
    ) => ThisThread.CmdSetDepthClampRangeEXT(commandBuffer, depthClampMode, pDepthClampRange);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_enable", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClipEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthClipEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthClipEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[200] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[200] = nativeContext.LoadFunction(
                        "vkCmdSetDepthClipEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthClipEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_enable", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClipEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthClipEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthClipEnable
    ) => ThisThread.CmdSetDepthClipEnableEXT(commandBuffer, depthClipEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_control", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClipNegativeOneToOneEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthClipNegativeOneToOneEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> negativeOneToOne
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[201] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[201] = nativeContext.LoadFunction(
                        "vkCmdSetDepthClipNegativeOneToOneEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, negativeOneToOne);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_control", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClipNegativeOneToOneEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthClipNegativeOneToOneEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> negativeOneToOne
    ) => ThisThread.CmdSetDepthClipNegativeOneToOneEXT(commandBuffer, negativeOneToOne);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthCompareOp")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthCompareOp(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        CompareOp depthCompareOp
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CompareOp, void>)(
                _slots[202] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[202] = nativeContext.LoadFunction("vkCmdSetDepthCompareOp", "vulkan")
            )
        )(commandBuffer, depthCompareOp);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthCompareOp")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthCompareOp(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        CompareOp depthCompareOp
    ) => ThisThread.CmdSetDepthCompareOp(commandBuffer, depthCompareOp);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthCompareOpEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthCompareOpEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        CompareOp depthCompareOp
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CompareOp, void>)(
                _slots[203] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[203] = nativeContext.LoadFunction(
                        "vkCmdSetDepthCompareOpEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthCompareOp);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthCompareOpEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthCompareOpEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        CompareOp depthCompareOp
    ) => ThisThread.CmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthTestEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthTestEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthTestEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[204] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[204] = nativeContext.LoadFunction("vkCmdSetDepthTestEnable", "vulkan")
            )
        )(commandBuffer, depthTestEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthTestEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthTestEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthTestEnable
    ) => ThisThread.CmdSetDepthTestEnable(commandBuffer, depthTestEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthTestEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthTestEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[205] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[205] = nativeContext.LoadFunction(
                        "vkCmdSetDepthTestEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthTestEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthTestEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthTestEnable
    ) => ThisThread.CmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthWriteEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthWriteEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthWriteEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[206] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[206] = nativeContext.LoadFunction("vkCmdSetDepthWriteEnable", "vulkan")
            )
        )(commandBuffer, depthWriteEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthWriteEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthWriteEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthWriteEnable
    ) => ThisThread.CmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthWriteEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDepthWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthWriteEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[207] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[207] = nativeContext.LoadFunction(
                        "vkCmdSetDepthWriteEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthWriteEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthWriteEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> depthWriteEnable
    ) => ThisThread.CmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsets2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDescriptorBufferOffsets2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSetDescriptorBufferOffsetsInfoEXT *")]
            SetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, SetDescriptorBufferOffsetsInfoEXT*, void>)(
                _slots[208] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[208] = nativeContext.LoadFunction(
                        "vkCmdSetDescriptorBufferOffsets2EXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pSetDescriptorBufferOffsetsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsets2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDescriptorBufferOffsets2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSetDescriptorBufferOffsetsInfoEXT *")]
            SetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo
    ) =>
        ThisThread.CmdSetDescriptorBufferOffsets2EXT(
            commandBuffer,
            pSetDescriptorBufferOffsetsInfo
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsets2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDescriptorBufferOffsets2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSetDescriptorBufferOffsetsInfoEXT *")]
            Ref<SetDescriptorBufferOffsetsInfoEXT> pSetDescriptorBufferOffsetsInfo
    )
    {
        fixed (
            SetDescriptorBufferOffsetsInfoEXT* __dsl_pSetDescriptorBufferOffsetsInfo =
                pSetDescriptorBufferOffsetsInfo
        )
        {
            ((IVk)this).CmdSetDescriptorBufferOffsets2EXT(
                commandBuffer,
                __dsl_pSetDescriptorBufferOffsetsInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsets2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDescriptorBufferOffsets2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSetDescriptorBufferOffsetsInfoEXT *")]
            Ref<SetDescriptorBufferOffsetsInfoEXT> pSetDescriptorBufferOffsetsInfo
    ) =>
        ThisThread.CmdSetDescriptorBufferOffsets2EXT(
            commandBuffer,
            pSetDescriptorBufferOffsetsInfo
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsetsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDescriptorBufferOffsetsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint setCount,
        [NativeTypeName("const uint32_t *")] uint* pBufferIndices,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                PipelineBindPoint,
                PipelineLayoutHandle,
                uint,
                uint,
                uint*,
                ulong*,
                void>)(
                _slots[209] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[209] = nativeContext.LoadFunction(
                        "vkCmdSetDescriptorBufferOffsetsEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsetsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDescriptorBufferOffsetsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint setCount,
        [NativeTypeName("const uint32_t *")] uint* pBufferIndices,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets
    ) =>
        ThisThread.CmdSetDescriptorBufferOffsetsEXT(
            commandBuffer,
            pipelineBindPoint,
            layout,
            firstSet,
            setCount,
            pBufferIndices,
            pOffsets
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsetsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDescriptorBufferOffsetsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint setCount,
        [NativeTypeName("const uint32_t *")] Ref<uint> pBufferIndices,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets
    )
    {
        fixed (ulong* __dsl_pOffsets = pOffsets)
        fixed (uint* __dsl_pBufferIndices = pBufferIndices)
        {
            ((IVk)this).CmdSetDescriptorBufferOffsetsEXT(
                commandBuffer,
                pipelineBindPoint,
                layout,
                firstSet,
                setCount,
                __dsl_pBufferIndices,
                __dsl_pOffsets
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsetsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDescriptorBufferOffsetsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint setCount,
        [NativeTypeName("const uint32_t *")] Ref<uint> pBufferIndices,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets
    ) =>
        ThisThread.CmdSetDescriptorBufferOffsetsEXT(
            commandBuffer,
            pipelineBindPoint,
            layout,
            firstSet,
            setCount,
            pBufferIndices,
            pOffsets
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDeviceMask")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDeviceMask(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint deviceMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, void>)(
                _slots[210] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[210] = nativeContext.LoadFunction("vkCmdSetDeviceMask", "vulkan")
            )
        )(commandBuffer, deviceMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDeviceMask")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDeviceMask(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint deviceMask
    ) => ThisThread.CmdSetDeviceMask(commandBuffer, deviceMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDeviceMaskKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDeviceMaskKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint deviceMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, void>)(
                _slots[211] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[211] = nativeContext.LoadFunction("vkCmdSetDeviceMaskKHR", "vulkan")
            )
        )(commandBuffer, deviceMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDeviceMaskKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDeviceMaskKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint deviceMask
    ) => ThisThread.CmdSetDeviceMaskKHR(commandBuffer, deviceMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDiscardRectangleEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> discardRectangleEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[212] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[212] = nativeContext.LoadFunction(
                        "vkCmdSetDiscardRectangleEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, discardRectangleEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDiscardRectangleEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> discardRectangleEnable
    ) => ThisThread.CmdSetDiscardRectangleEnableEXT(commandBuffer, discardRectangleEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDiscardRectangleEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
        [NativeTypeName("uint32_t")] uint discardRectangleCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pDiscardRectangles
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, Rect2D*, void>)(
                _slots[213] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[213] = nativeContext.LoadFunction(
                        "vkCmdSetDiscardRectangleEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDiscardRectangleEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
        [NativeTypeName("uint32_t")] uint discardRectangleCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pDiscardRectangles
    ) =>
        ThisThread.CmdSetDiscardRectangleEXT(
            commandBuffer,
            firstDiscardRectangle,
            discardRectangleCount,
            pDiscardRectangles
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDiscardRectangleEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
        [NativeTypeName("uint32_t")] uint discardRectangleCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pDiscardRectangles
    )
    {
        fixed (Rect2D* __dsl_pDiscardRectangles = pDiscardRectangles)
        {
            ((IVk)this).CmdSetDiscardRectangleEXT(
                commandBuffer,
                firstDiscardRectangle,
                discardRectangleCount,
                __dsl_pDiscardRectangles
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDiscardRectangleEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
        [NativeTypeName("uint32_t")] uint discardRectangleCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pDiscardRectangles
    ) =>
        ThisThread.CmdSetDiscardRectangleEXT(
            commandBuffer,
            firstDiscardRectangle,
            discardRectangleCount,
            pDiscardRectangles
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDiscardRectangleEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
        [NativeTypeName("const VkRect2D *")] Rect2D pDiscardRectangles
    ) =>
        ((IVk)this).CmdSetDiscardRectangleEXT(
            commandBuffer,
            firstDiscardRectangle,
            1,
            (Rect2D*)&pDiscardRectangles
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDiscardRectangleEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
        [NativeTypeName("const VkRect2D *")] Rect2D pDiscardRectangles
    ) =>
        ThisThread.CmdSetDiscardRectangleEXT(
            commandBuffer,
            firstDiscardRectangle,
            pDiscardRectangles
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetDiscardRectangleModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        DiscardRectangleModeEXT discardRectangleMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, DiscardRectangleModeEXT, void>)(
                _slots[214] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[214] = nativeContext.LoadFunction(
                        "vkCmdSetDiscardRectangleModeEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, discardRectangleMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDiscardRectangleModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        DiscardRectangleModeEXT discardRectangleMode
    ) => ThisThread.CmdSetDiscardRectangleModeEXT(commandBuffer, discardRectangleMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetEvent(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags stageMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, EventHandle, PipelineStageFlags, void>)(
                _slots[215] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[215] = nativeContext.LoadFunction("vkCmdSetEvent", "vulkan")
            )
        )(commandBuffer, @event, stageMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetEvent(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags stageMask
    ) => ThisThread.CmdSetEvent(commandBuffer, @event, stageMask);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetEvent2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, EventHandle, DependencyInfo*, void>)(
                _slots[216] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[216] = nativeContext.LoadFunction("vkCmdSetEvent2", "vulkan")
            )
        )(commandBuffer, @event, pDependencyInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetEvent2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) => ThisThread.CmdSetEvent2(commandBuffer, @event, pDependencyInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetEvent2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    )
    {
        fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
        {
            ((IVk)this).CmdSetEvent2(commandBuffer, @event, __dsl_pDependencyInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetEvent2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    ) => ThisThread.CmdSetEvent2(commandBuffer, @event, pDependencyInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetEvent2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, EventHandle, DependencyInfo*, void>)(
                _slots[217] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[217] = nativeContext.LoadFunction("vkCmdSetEvent2KHR", "vulkan")
            )
        )(commandBuffer, @event, pDependencyInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetEvent2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) => ThisThread.CmdSetEvent2KHR(commandBuffer, @event, pDependencyInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetEvent2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    )
    {
        fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
        {
            ((IVk)this).CmdSetEvent2KHR(commandBuffer, @event, __dsl_pDependencyInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetEvent2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    ) => ThisThread.CmdSetEvent2KHR(commandBuffer, @event, pDependencyInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetExclusiveScissorEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkBool32 *")] MaybeBool<uint>* pExclusiveScissorEnables
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, MaybeBool<uint>*, void>)(
                _slots[218] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[218] = nativeContext.LoadFunction(
                        "vkCmdSetExclusiveScissorEnableNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissorEnables);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExclusiveScissorEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkBool32 *")] MaybeBool<uint>* pExclusiveScissorEnables
    ) =>
        ThisThread.CmdSetExclusiveScissorEnableNV(
            commandBuffer,
            firstExclusiveScissor,
            exclusiveScissorCount,
            pExclusiveScissorEnables
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetExclusiveScissorEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkBool32 *")] Ref<MaybeBool<uint>> pExclusiveScissorEnables
    )
    {
        fixed (MaybeBool<uint>* __dsl_pExclusiveScissorEnables = pExclusiveScissorEnables)
        {
            ((IVk)this).CmdSetExclusiveScissorEnableNV(
                commandBuffer,
                firstExclusiveScissor,
                exclusiveScissorCount,
                __dsl_pExclusiveScissorEnables
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExclusiveScissorEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkBool32 *")] Ref<MaybeBool<uint>> pExclusiveScissorEnables
    ) =>
        ThisThread.CmdSetExclusiveScissorEnableNV(
            commandBuffer,
            firstExclusiveScissor,
            exclusiveScissorCount,
            pExclusiveScissorEnables
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetExclusiveScissorEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("const VkBool32 *")] MaybeBool<uint> pExclusiveScissorEnables
    ) =>
        ((IVk)this).CmdSetExclusiveScissorEnableNV(
            commandBuffer,
            firstExclusiveScissor,
            1,
            (MaybeBool<uint>*)&pExclusiveScissorEnables
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExclusiveScissorEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("const VkBool32 *")] MaybeBool<uint> pExclusiveScissorEnables
    ) =>
        ThisThread.CmdSetExclusiveScissorEnableNV(
            commandBuffer,
            firstExclusiveScissor,
            pExclusiveScissorEnables
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetExclusiveScissorNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pExclusiveScissors
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, Rect2D*, void>)(
                _slots[219] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[219] = nativeContext.LoadFunction(
                        "vkCmdSetExclusiveScissorNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExclusiveScissorNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pExclusiveScissors
    ) =>
        ThisThread.CmdSetExclusiveScissorNV(
            commandBuffer,
            firstExclusiveScissor,
            exclusiveScissorCount,
            pExclusiveScissors
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetExclusiveScissorNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pExclusiveScissors
    )
    {
        fixed (Rect2D* __dsl_pExclusiveScissors = pExclusiveScissors)
        {
            ((IVk)this).CmdSetExclusiveScissorNV(
                commandBuffer,
                firstExclusiveScissor,
                exclusiveScissorCount,
                __dsl_pExclusiveScissors
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExclusiveScissorNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pExclusiveScissors
    ) =>
        ThisThread.CmdSetExclusiveScissorNV(
            commandBuffer,
            firstExclusiveScissor,
            exclusiveScissorCount,
            pExclusiveScissors
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetExclusiveScissorNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("const VkRect2D *")] Rect2D pExclusiveScissors
    ) =>
        ((IVk)this).CmdSetExclusiveScissorNV(
            commandBuffer,
            firstExclusiveScissor,
            1,
            (Rect2D*)&pExclusiveScissors
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExclusiveScissorNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("const VkRect2D *")] Rect2D pExclusiveScissors
    ) =>
        ThisThread.CmdSetExclusiveScissorNV(
            commandBuffer,
            firstExclusiveScissor,
            pExclusiveScissors
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conservative_rasterization", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExtraPrimitiveOverestimationSizeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetExtraPrimitiveOverestimationSizeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        float extraPrimitiveOverestimationSize
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, float, void>)(
                _slots[220] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[220] = nativeContext.LoadFunction(
                        "vkCmdSetExtraPrimitiveOverestimationSizeEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, extraPrimitiveOverestimationSize);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conservative_rasterization", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExtraPrimitiveOverestimationSizeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExtraPrimitiveOverestimationSizeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        float extraPrimitiveOverestimationSize
    ) =>
        ThisThread.CmdSetExtraPrimitiveOverestimationSizeEXT(
            commandBuffer,
            extraPrimitiveOverestimationSize
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_fragment_shading_rate_enums"],
        ImpliesSets = ["VK_KHR_fragment_shading_rate"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateEnumNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetFragmentShadingRateEnumNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        FragmentShadingRateNV shadingRate,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            FragmentShadingRateCombinerOpKHR* combinerOps
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                FragmentShadingRateNV,
                FragmentShadingRateCombinerOpKHR*,
                void>)(
                _slots[221] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[221] = nativeContext.LoadFunction(
                        "vkCmdSetFragmentShadingRateEnumNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, shadingRate, combinerOps);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_fragment_shading_rate_enums"],
        ImpliesSets = ["VK_KHR_fragment_shading_rate"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateEnumNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetFragmentShadingRateEnumNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        FragmentShadingRateNV shadingRate,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            FragmentShadingRateCombinerOpKHR* combinerOps
    ) => ThisThread.CmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_fragment_shading_rate_enums"],
        ImpliesSets = ["VK_KHR_fragment_shading_rate"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateEnumNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetFragmentShadingRateEnumNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        FragmentShadingRateNV shadingRate,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            Ref<FragmentShadingRateCombinerOpKHR> combinerOps
    )
    {
        fixed (FragmentShadingRateCombinerOpKHR* __dsl_combinerOps = combinerOps)
        {
            ((IVk)this).CmdSetFragmentShadingRateEnumNV(
                commandBuffer,
                shadingRate,
                __dsl_combinerOps
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_fragment_shading_rate_enums"],
        ImpliesSets = ["VK_KHR_fragment_shading_rate"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateEnumNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetFragmentShadingRateEnumNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        FragmentShadingRateNV shadingRate,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            Ref<FragmentShadingRateCombinerOpKHR> combinerOps
    ) => ThisThread.CmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetFragmentShadingRateKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkExtent2D *")] Extent2D* pFragmentSize,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            FragmentShadingRateCombinerOpKHR* combinerOps
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                Extent2D*,
                FragmentShadingRateCombinerOpKHR*,
                void>)(
                _slots[222] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[222] = nativeContext.LoadFunction(
                        "vkCmdSetFragmentShadingRateKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pFragmentSize, combinerOps);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetFragmentShadingRateKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkExtent2D *")] Extent2D* pFragmentSize,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            FragmentShadingRateCombinerOpKHR* combinerOps
    ) => ThisThread.CmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetFragmentShadingRateKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkExtent2D *")] Ref<Extent2D> pFragmentSize,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            Ref<FragmentShadingRateCombinerOpKHR> combinerOps
    )
    {
        fixed (FragmentShadingRateCombinerOpKHR* __dsl_combinerOps = combinerOps)
        fixed (Extent2D* __dsl_pFragmentSize = pFragmentSize)
        {
            ((IVk)this).CmdSetFragmentShadingRateKHR(
                commandBuffer,
                __dsl_pFragmentSize,
                __dsl_combinerOps
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetFragmentShadingRateKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkExtent2D *")] Ref<Extent2D> pFragmentSize,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            Ref<FragmentShadingRateCombinerOpKHR> combinerOps
    ) => ThisThread.CmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFrontFace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetFrontFace(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        FrontFace frontFace
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, FrontFace, void>)(
                _slots[223] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[223] = nativeContext.LoadFunction("vkCmdSetFrontFace", "vulkan")
            )
        )(commandBuffer, frontFace);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFrontFace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetFrontFace(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        FrontFace frontFace
    ) => ThisThread.CmdSetFrontFace(commandBuffer, frontFace);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFrontFaceEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetFrontFaceEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        FrontFace frontFace
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, FrontFace, void>)(
                _slots[224] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[224] = nativeContext.LoadFunction("vkCmdSetFrontFaceEXT", "vulkan")
            )
        )(commandBuffer, frontFace);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFrontFaceEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetFrontFaceEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        FrontFace frontFace
    ) => ThisThread.CmdSetFrontFaceEXT(commandBuffer, frontFace);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineRasterizationModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetLineRasterizationModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkLineRasterizationModeEXT")] LineRasterizationMode lineRasterizationMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, LineRasterizationMode, void>)(
                _slots[225] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[225] = nativeContext.LoadFunction(
                        "vkCmdSetLineRasterizationModeEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, lineRasterizationMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineRasterizationModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineRasterizationModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkLineRasterizationModeEXT")] LineRasterizationMode lineRasterizationMode
    ) => ThisThread.CmdSetLineRasterizationModeEXT(commandBuffer, lineRasterizationMode);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStipple")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetLineStipple(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, ushort, void>)(
                _slots[226] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[226] = nativeContext.LoadFunction("vkCmdSetLineStipple", "vulkan")
            )
        )(commandBuffer, lineStippleFactor, lineStipplePattern);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStipple")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineStipple(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) => ThisThread.CmdSetLineStipple(commandBuffer, lineStippleFactor, lineStipplePattern);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetLineStippleEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> stippledLineEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[227] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[227] = nativeContext.LoadFunction(
                        "vkCmdSetLineStippleEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, stippledLineEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineStippleEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> stippledLineEnable
    ) => ThisThread.CmdSetLineStippleEnableEXT(commandBuffer, stippledLineEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_EXT_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetLineStippleEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, ushort, void>)(
                _slots[228] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[228] = nativeContext.LoadFunction("vkCmdSetLineStippleEXT", "vulkan")
            )
        )(commandBuffer, lineStippleFactor, lineStipplePattern);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_EXT_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineStippleEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) => ThisThread.CmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_line_rasterization"],
        ImpliesSets = [
            "VK_KHR_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_KHR_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetLineStippleKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, ushort, void>)(
                _slots[229] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[229] = nativeContext.LoadFunction("vkCmdSetLineStippleKHR", "vulkan")
            )
        )(commandBuffer, lineStippleFactor, lineStipplePattern);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_line_rasterization"],
        ImpliesSets = [
            "VK_KHR_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_KHR_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineStippleKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) => ThisThread.CmdSetLineStippleKHR(commandBuffer, lineStippleFactor, lineStipplePattern);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineWidth")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetLineWidth(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        float lineWidth
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, float, void>)(
                _slots[230] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[230] = nativeContext.LoadFunction("vkCmdSetLineWidth", "vulkan")
            )
        )(commandBuffer, lineWidth);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineWidth")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineWidth(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        float lineWidth
    ) => ThisThread.CmdSetLineWidth(commandBuffer, lineWidth);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLogicOpEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetLogicOpEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> logicOpEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[231] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[231] = nativeContext.LoadFunction("vkCmdSetLogicOpEnableEXT", "vulkan")
            )
        )(commandBuffer, logicOpEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLogicOpEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLogicOpEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> logicOpEnable
    ) => ThisThread.CmdSetLogicOpEnableEXT(commandBuffer, logicOpEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLogicOpEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetLogicOpEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        LogicOp logicOp
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, LogicOp, void>)(
                _slots[232] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[232] = nativeContext.LoadFunction("vkCmdSetLogicOpEXT", "vulkan")
            )
        )(commandBuffer, logicOp);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLogicOpEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLogicOpEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        LogicOp logicOp
    ) => ThisThread.CmdSetLogicOpEXT(commandBuffer, logicOp);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPatchControlPointsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetPatchControlPointsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint patchControlPoints
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, void>)(
                _slots[233] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[233] = nativeContext.LoadFunction(
                        "vkCmdSetPatchControlPointsEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, patchControlPoints);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPatchControlPointsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPatchControlPointsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint patchControlPoints
    ) => ThisThread.CmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceMarkerINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CmdSetPerformanceMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerformanceMarkerInfoINTEL *")]
            PerformanceMarkerInfoIntel* pMarkerInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PerformanceMarkerInfoIntel*, Result>)(
                _slots[234] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[234] = nativeContext.LoadFunction(
                        "vkCmdSetPerformanceMarkerINTEL",
                        "vulkan"
                    )
            )
        )(commandBuffer, pMarkerInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceMarkerINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CmdSetPerformanceMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerformanceMarkerInfoINTEL *")]
            PerformanceMarkerInfoIntel* pMarkerInfo
    ) => ThisThread.CmdSetPerformanceMarkerIntel(commandBuffer, pMarkerInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceMarkerINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CmdSetPerformanceMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerformanceMarkerInfoINTEL *")]
            Ref<PerformanceMarkerInfoIntel> pMarkerInfo
    )
    {
        fixed (PerformanceMarkerInfoIntel* __dsl_pMarkerInfo = pMarkerInfo)
        {
            return (Result)
                ((IVk)this).CmdSetPerformanceMarkerIntel(commandBuffer, __dsl_pMarkerInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceMarkerINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CmdSetPerformanceMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerformanceMarkerInfoINTEL *")]
            Ref<PerformanceMarkerInfoIntel> pMarkerInfo
    ) => ThisThread.CmdSetPerformanceMarkerIntel(commandBuffer, pMarkerInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceOverrideINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CmdSetPerformanceOverrideIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerformanceOverrideInfoINTEL *")]
            PerformanceOverrideInfoIntel* pOverrideInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PerformanceOverrideInfoIntel*, Result>)(
                _slots[235] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[235] = nativeContext.LoadFunction(
                        "vkCmdSetPerformanceOverrideINTEL",
                        "vulkan"
                    )
            )
        )(commandBuffer, pOverrideInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceOverrideINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CmdSetPerformanceOverrideIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerformanceOverrideInfoINTEL *")]
            PerformanceOverrideInfoIntel* pOverrideInfo
    ) => ThisThread.CmdSetPerformanceOverrideIntel(commandBuffer, pOverrideInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceOverrideINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CmdSetPerformanceOverrideIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerformanceOverrideInfoINTEL *")]
            Ref<PerformanceOverrideInfoIntel> pOverrideInfo
    )
    {
        fixed (PerformanceOverrideInfoIntel* __dsl_pOverrideInfo = pOverrideInfo)
        {
            return (Result)
                ((IVk)this).CmdSetPerformanceOverrideIntel(commandBuffer, __dsl_pOverrideInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceOverrideINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CmdSetPerformanceOverrideIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerformanceOverrideInfoINTEL *")]
            Ref<PerformanceOverrideInfoIntel> pOverrideInfo
    ) => ThisThread.CmdSetPerformanceOverrideIntel(commandBuffer, pOverrideInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceStreamMarkerINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CmdSetPerformanceStreamMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerformanceStreamMarkerInfoINTEL *")]
            PerformanceStreamMarkerInfoIntel* pMarkerInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PerformanceStreamMarkerInfoIntel*, Result>)(
                _slots[236] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[236] = nativeContext.LoadFunction(
                        "vkCmdSetPerformanceStreamMarkerINTEL",
                        "vulkan"
                    )
            )
        )(commandBuffer, pMarkerInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceStreamMarkerINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CmdSetPerformanceStreamMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerformanceStreamMarkerInfoINTEL *")]
            PerformanceStreamMarkerInfoIntel* pMarkerInfo
    ) => ThisThread.CmdSetPerformanceStreamMarkerIntel(commandBuffer, pMarkerInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceStreamMarkerINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CmdSetPerformanceStreamMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerformanceStreamMarkerInfoINTEL *")]
            Ref<PerformanceStreamMarkerInfoIntel> pMarkerInfo
    )
    {
        fixed (PerformanceStreamMarkerInfoIntel* __dsl_pMarkerInfo = pMarkerInfo)
        {
            return (Result)
                ((IVk)this).CmdSetPerformanceStreamMarkerIntel(commandBuffer, __dsl_pMarkerInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceStreamMarkerINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CmdSetPerformanceStreamMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkPerformanceStreamMarkerInfoINTEL *")]
            Ref<PerformanceStreamMarkerInfoIntel> pMarkerInfo
    ) => ThisThread.CmdSetPerformanceStreamMarkerIntel(commandBuffer, pMarkerInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPolygonModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetPolygonModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PolygonMode polygonMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PolygonMode, void>)(
                _slots[237] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[237] = nativeContext.LoadFunction("vkCmdSetPolygonModeEXT", "vulkan")
            )
        )(commandBuffer, polygonMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPolygonModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPolygonModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PolygonMode polygonMode
    ) => ThisThread.CmdSetPolygonModeEXT(commandBuffer, polygonMode);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveRestartEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetPrimitiveRestartEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> primitiveRestartEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[238] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[238] = nativeContext.LoadFunction(
                        "vkCmdSetPrimitiveRestartEnable",
                        "vulkan"
                    )
            )
        )(commandBuffer, primitiveRestartEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveRestartEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPrimitiveRestartEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> primitiveRestartEnable
    ) => ThisThread.CmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveRestartEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetPrimitiveRestartEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> primitiveRestartEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[239] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[239] = nativeContext.LoadFunction(
                        "vkCmdSetPrimitiveRestartEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, primitiveRestartEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveRestartEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPrimitiveRestartEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> primitiveRestartEnable
    ) => ThisThread.CmdSetPrimitiveRestartEnableEXT(commandBuffer, primitiveRestartEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveTopology")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetPrimitiveTopology(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PrimitiveTopology primitiveTopology
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PrimitiveTopology, void>)(
                _slots[240] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[240] = nativeContext.LoadFunction(
                        "vkCmdSetPrimitiveTopology",
                        "vulkan"
                    )
            )
        )(commandBuffer, primitiveTopology);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveTopology")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPrimitiveTopology(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PrimitiveTopology primitiveTopology
    ) => ThisThread.CmdSetPrimitiveTopology(commandBuffer, primitiveTopology);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveTopologyEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetPrimitiveTopologyEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PrimitiveTopology primitiveTopology
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PrimitiveTopology, void>)(
                _slots[241] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[241] = nativeContext.LoadFunction(
                        "vkCmdSetPrimitiveTopologyEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, primitiveTopology);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveTopologyEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPrimitiveTopologyEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PrimitiveTopology primitiveTopology
    ) => ThisThread.CmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_provoking_vertex"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetProvokingVertexModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetProvokingVertexModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        ProvokingVertexModeEXT provokingVertexMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, ProvokingVertexModeEXT, void>)(
                _slots[242] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[242] = nativeContext.LoadFunction(
                        "vkCmdSetProvokingVertexModeEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, provokingVertexMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_provoking_vertex"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetProvokingVertexModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetProvokingVertexModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        ProvokingVertexModeEXT provokingVertexMode
    ) => ThisThread.CmdSetProvokingVertexModeEXT(commandBuffer, provokingVertexMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizationSamplesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetRasterizationSamplesEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        SampleCountFlags rasterizationSamples
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, SampleCountFlags, void>)(
                _slots[243] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[243] = nativeContext.LoadFunction(
                        "vkCmdSetRasterizationSamplesEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, rasterizationSamples);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizationSamplesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRasterizationSamplesEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        SampleCountFlags rasterizationSamples
    ) => ThisThread.CmdSetRasterizationSamplesEXT(commandBuffer, rasterizationSamples);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizationStreamEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetRasterizationStreamEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint rasterizationStream
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, void>)(
                _slots[244] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[244] = nativeContext.LoadFunction(
                        "vkCmdSetRasterizationStreamEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, rasterizationStream);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizationStreamEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRasterizationStreamEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint rasterizationStream
    ) => ThisThread.CmdSetRasterizationStreamEXT(commandBuffer, rasterizationStream);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizerDiscardEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetRasterizerDiscardEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> rasterizerDiscardEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[245] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[245] = nativeContext.LoadFunction(
                        "vkCmdSetRasterizerDiscardEnable",
                        "vulkan"
                    )
            )
        )(commandBuffer, rasterizerDiscardEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizerDiscardEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRasterizerDiscardEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> rasterizerDiscardEnable
    ) => ThisThread.CmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizerDiscardEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetRasterizerDiscardEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> rasterizerDiscardEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[246] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[246] = nativeContext.LoadFunction(
                        "vkCmdSetRasterizerDiscardEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, rasterizerDiscardEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizerDiscardEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRasterizerDiscardEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> rasterizerDiscardEnable
    ) => ThisThread.CmdSetRasterizerDiscardEnableEXT(commandBuffer, rasterizerDiscardEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRayTracingPipelineStackSizeKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetRayTracingPipelineStackSizeKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint pipelineStackSize
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, void>)(
                _slots[247] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[247] = nativeContext.LoadFunction(
                        "vkCmdSetRayTracingPipelineStackSizeKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pipelineStackSize);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRayTracingPipelineStackSizeKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRayTracingPipelineStackSizeKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint pipelineStackSize
    ) => ThisThread.CmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocations")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetRenderingAttachmentLocations(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            RenderingAttachmentLocationInfo* pLocationInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, RenderingAttachmentLocationInfo*, void>)(
                _slots[248] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[248] = nativeContext.LoadFunction(
                        "vkCmdSetRenderingAttachmentLocations",
                        "vulkan"
                    )
            )
        )(commandBuffer, pLocationInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocations")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingAttachmentLocations(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            RenderingAttachmentLocationInfo* pLocationInfo
    ) => ThisThread.CmdSetRenderingAttachmentLocations(commandBuffer, pLocationInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocations")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetRenderingAttachmentLocations(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            Ref<RenderingAttachmentLocationInfo> pLocationInfo
    )
    {
        fixed (RenderingAttachmentLocationInfo* __dsl_pLocationInfo = pLocationInfo)
        {
            ((IVk)this).CmdSetRenderingAttachmentLocations(commandBuffer, __dsl_pLocationInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocations")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingAttachmentLocations(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            Ref<RenderingAttachmentLocationInfo> pLocationInfo
    ) => ThisThread.CmdSetRenderingAttachmentLocations(commandBuffer, pLocationInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocationsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetRenderingAttachmentLocationsKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            RenderingAttachmentLocationInfo* pLocationInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, RenderingAttachmentLocationInfo*, void>)(
                _slots[249] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[249] = nativeContext.LoadFunction(
                        "vkCmdSetRenderingAttachmentLocationsKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pLocationInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocationsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingAttachmentLocationsKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            RenderingAttachmentLocationInfo* pLocationInfo
    ) => ThisThread.CmdSetRenderingAttachmentLocationsKHR(commandBuffer, pLocationInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocationsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetRenderingAttachmentLocationsKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            Ref<RenderingAttachmentLocationInfo> pLocationInfo
    )
    {
        fixed (RenderingAttachmentLocationInfo* __dsl_pLocationInfo = pLocationInfo)
        {
            ((IVk)this).CmdSetRenderingAttachmentLocationsKHR(commandBuffer, __dsl_pLocationInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocationsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingAttachmentLocationsKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            Ref<RenderingAttachmentLocationInfo> pLocationInfo
    ) => ThisThread.CmdSetRenderingAttachmentLocationsKHR(commandBuffer, pLocationInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetRenderingInputAttachmentIndices(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            RenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, RenderingInputAttachmentIndexInfo*, void>)(
                _slots[250] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[250] = nativeContext.LoadFunction(
                        "vkCmdSetRenderingInputAttachmentIndices",
                        "vulkan"
                    )
            )
        )(commandBuffer, pInputAttachmentIndexInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingInputAttachmentIndices(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            RenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo
    ) => ThisThread.CmdSetRenderingInputAttachmentIndices(commandBuffer, pInputAttachmentIndexInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetRenderingInputAttachmentIndices(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            Ref<RenderingInputAttachmentIndexInfo> pInputAttachmentIndexInfo
    )
    {
        fixed (
            RenderingInputAttachmentIndexInfo* __dsl_pInputAttachmentIndexInfo =
                pInputAttachmentIndexInfo
        )
        {
            ((IVk)this).CmdSetRenderingInputAttachmentIndices(
                commandBuffer,
                __dsl_pInputAttachmentIndexInfo
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingInputAttachmentIndices(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            Ref<RenderingInputAttachmentIndexInfo> pInputAttachmentIndexInfo
    ) => ThisThread.CmdSetRenderingInputAttachmentIndices(commandBuffer, pInputAttachmentIndexInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndicesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetRenderingInputAttachmentIndicesKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            RenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, RenderingInputAttachmentIndexInfo*, void>)(
                _slots[251] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[251] = nativeContext.LoadFunction(
                        "vkCmdSetRenderingInputAttachmentIndicesKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pInputAttachmentIndexInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndicesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingInputAttachmentIndicesKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            RenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo
    ) =>
        ThisThread.CmdSetRenderingInputAttachmentIndicesKHR(
            commandBuffer,
            pInputAttachmentIndexInfo
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndicesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetRenderingInputAttachmentIndicesKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            Ref<RenderingInputAttachmentIndexInfo> pInputAttachmentIndexInfo
    )
    {
        fixed (
            RenderingInputAttachmentIndexInfo* __dsl_pInputAttachmentIndexInfo =
                pInputAttachmentIndexInfo
        )
        {
            ((IVk)this).CmdSetRenderingInputAttachmentIndicesKHR(
                commandBuffer,
                __dsl_pInputAttachmentIndexInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndicesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingInputAttachmentIndicesKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            Ref<RenderingInputAttachmentIndexInfo> pInputAttachmentIndexInfo
    ) =>
        ThisThread.CmdSetRenderingInputAttachmentIndicesKHR(
            commandBuffer,
            pInputAttachmentIndexInfo
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_representative_fragment_test"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRepresentativeFragmentTestEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetRepresentativeFragmentTestEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> representativeFragmentTestEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[252] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[252] = nativeContext.LoadFunction(
                        "vkCmdSetRepresentativeFragmentTestEnableNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, representativeFragmentTestEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_representative_fragment_test"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRepresentativeFragmentTestEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRepresentativeFragmentTestEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> representativeFragmentTestEnable
    ) =>
        ThisThread.CmdSetRepresentativeFragmentTestEnableNV(
            commandBuffer,
            representativeFragmentTestEnable
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetSampleLocationsEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> sampleLocationsEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[253] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[253] = nativeContext.LoadFunction(
                        "vkCmdSetSampleLocationsEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, sampleLocationsEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetSampleLocationsEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> sampleLocationsEnable
    ) => ThisThread.CmdSetSampleLocationsEnableEXT(commandBuffer, sampleLocationsEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetSampleLocationsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSampleLocationsInfoEXT *")]
            SampleLocationsInfoEXT* pSampleLocationsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, SampleLocationsInfoEXT*, void>)(
                _slots[254] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[254] = nativeContext.LoadFunction(
                        "vkCmdSetSampleLocationsEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pSampleLocationsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetSampleLocationsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSampleLocationsInfoEXT *")]
            SampleLocationsInfoEXT* pSampleLocationsInfo
    ) => ThisThread.CmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetSampleLocationsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSampleLocationsInfoEXT *")]
            Ref<SampleLocationsInfoEXT> pSampleLocationsInfo
    )
    {
        fixed (SampleLocationsInfoEXT* __dsl_pSampleLocationsInfo = pSampleLocationsInfo)
        {
            ((IVk)this).CmdSetSampleLocationsEXT(commandBuffer, __dsl_pSampleLocationsInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetSampleLocationsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkSampleLocationsInfoEXT *")]
            Ref<SampleLocationsInfoEXT> pSampleLocationsInfo
    ) => ThisThread.CmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetSampleMaskEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        SampleCountFlags samples,
        [NativeTypeName("const VkSampleMask *")] uint* pSampleMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, SampleCountFlags, uint*, void>)(
                _slots[255] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[255] = nativeContext.LoadFunction("vkCmdSetSampleMaskEXT", "vulkan")
            )
        )(commandBuffer, samples, pSampleMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetSampleMaskEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        SampleCountFlags samples,
        [NativeTypeName("const VkSampleMask *")] uint* pSampleMask
    ) => ThisThread.CmdSetSampleMaskEXT(commandBuffer, samples, pSampleMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetSampleMaskEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        SampleCountFlags samples,
        [NativeTypeName("const VkSampleMask *")] Ref<uint> pSampleMask
    )
    {
        fixed (uint* __dsl_pSampleMask = pSampleMask)
        {
            ((IVk)this).CmdSetSampleMaskEXT(commandBuffer, samples, __dsl_pSampleMask);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetSampleMaskEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        SampleCountFlags samples,
        [NativeTypeName("const VkSampleMask *")] Ref<uint> pSampleMask
    ) => ThisThread.CmdSetSampleMaskEXT(commandBuffer, samples, pSampleMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetScissor(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstScissor,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, Rect2D*, void>)(
                _slots[256] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[256] = nativeContext.LoadFunction("vkCmdSetScissor", "vulkan")
            )
        )(commandBuffer, firstScissor, scissorCount, pScissors);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissor(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstScissor,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
    ) => ThisThread.CmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetScissor(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstScissor,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
    )
    {
        fixed (Rect2D* __dsl_pScissors = pScissors)
        {
            ((IVk)this).CmdSetScissor(commandBuffer, firstScissor, scissorCount, __dsl_pScissors);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissor(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstScissor,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
    ) => ThisThread.CmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetScissor(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstScissor,
        [NativeTypeName("const VkRect2D *")] Rect2D pScissors
    ) => ((IVk)this).CmdSetScissor(commandBuffer, firstScissor, 1, (Rect2D*)&pScissors);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissor(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstScissor,
        [NativeTypeName("const VkRect2D *")] Rect2D pScissors
    ) => ThisThread.CmdSetScissor(commandBuffer, firstScissor, pScissors);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetScissorWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, Rect2D*, void>)(
                _slots[257] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[257] = nativeContext.LoadFunction("vkCmdSetScissorWithCount", "vulkan")
            )
        )(commandBuffer, scissorCount, pScissors);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissorWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
    ) => ThisThread.CmdSetScissorWithCount(commandBuffer, scissorCount, pScissors);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetScissorWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
    )
    {
        fixed (Rect2D* __dsl_pScissors = pScissors)
        {
            ((IVk)this).CmdSetScissorWithCount(commandBuffer, scissorCount, __dsl_pScissors);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissorWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
    ) => ThisThread.CmdSetScissorWithCount(commandBuffer, scissorCount, pScissors);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetScissorWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRect2D *")] Rect2D pScissors
    ) => ((IVk)this).CmdSetScissorWithCount(commandBuffer, 1, (Rect2D*)&pScissors);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissorWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRect2D *")] Rect2D pScissors
    ) => ThisThread.CmdSetScissorWithCount(commandBuffer, pScissors);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetScissorWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, Rect2D*, void>)(
                _slots[258] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[258] = nativeContext.LoadFunction(
                        "vkCmdSetScissorWithCountEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, scissorCount, pScissors);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissorWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
    ) => ThisThread.CmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetScissorWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
    )
    {
        fixed (Rect2D* __dsl_pScissors = pScissors)
        {
            ((IVk)this).CmdSetScissorWithCountEXT(commandBuffer, scissorCount, __dsl_pScissors);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissorWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
    ) => ThisThread.CmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetScissorWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRect2D *")] Rect2D pScissors
    ) => ((IVk)this).CmdSetScissorWithCountEXT(commandBuffer, 1, (Rect2D*)&pScissors);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissorWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkRect2D *")] Rect2D pScissors
    ) => ThisThread.CmdSetScissorWithCountEXT(commandBuffer, pScissors);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetShadingRateImageEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetShadingRateImageEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> shadingRateImageEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[259] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[259] = nativeContext.LoadFunction(
                        "vkCmdSetShadingRateImageEnableNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, shadingRateImageEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetShadingRateImageEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetShadingRateImageEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> shadingRateImageEnable
    ) => ThisThread.CmdSetShadingRateImageEnableNV(commandBuffer, shadingRateImageEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilCompareMask")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetStencilCompareMask(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
        [NativeTypeName("uint32_t")] uint compareMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, StencilFaceFlags, uint, void>)(
                _slots[260] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[260] = nativeContext.LoadFunction(
                        "vkCmdSetStencilCompareMask",
                        "vulkan"
                    )
            )
        )(commandBuffer, faceMask, compareMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilCompareMask")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilCompareMask(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
        [NativeTypeName("uint32_t")] uint compareMask
    ) => ThisThread.CmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilOp")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetStencilOp(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
        StencilOp failOp,
        StencilOp passOp,
        StencilOp depthFailOp,
        CompareOp compareOp
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                StencilFaceFlags,
                StencilOp,
                StencilOp,
                StencilOp,
                CompareOp,
                void>)(
                _slots[261] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[261] = nativeContext.LoadFunction("vkCmdSetStencilOp", "vulkan")
            )
        )(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilOp")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilOp(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
        StencilOp failOp,
        StencilOp passOp,
        StencilOp depthFailOp,
        CompareOp compareOp
    ) =>
        ThisThread.CmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilOpEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetStencilOpEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
        StencilOp failOp,
        StencilOp passOp,
        StencilOp depthFailOp,
        CompareOp compareOp
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                StencilFaceFlags,
                StencilOp,
                StencilOp,
                StencilOp,
                CompareOp,
                void>)(
                _slots[262] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[262] = nativeContext.LoadFunction("vkCmdSetStencilOpEXT", "vulkan")
            )
        )(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilOpEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilOpEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
        StencilOp failOp,
        StencilOp passOp,
        StencilOp depthFailOp,
        CompareOp compareOp
    ) =>
        ThisThread.CmdSetStencilOpEXT(
            commandBuffer,
            faceMask,
            failOp,
            passOp,
            depthFailOp,
            compareOp
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilReference")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetStencilReference(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
        [NativeTypeName("uint32_t")] uint reference
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, StencilFaceFlags, uint, void>)(
                _slots[263] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[263] = nativeContext.LoadFunction("vkCmdSetStencilReference", "vulkan")
            )
        )(commandBuffer, faceMask, reference);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilReference")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilReference(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
        [NativeTypeName("uint32_t")] uint reference
    ) => ThisThread.CmdSetStencilReference(commandBuffer, faceMask, reference);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilTestEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetStencilTestEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> stencilTestEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[264] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[264] = nativeContext.LoadFunction(
                        "vkCmdSetStencilTestEnable",
                        "vulkan"
                    )
            )
        )(commandBuffer, stencilTestEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilTestEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilTestEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> stencilTestEnable
    ) => ThisThread.CmdSetStencilTestEnable(commandBuffer, stencilTestEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilTestEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetStencilTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> stencilTestEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[265] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[265] = nativeContext.LoadFunction(
                        "vkCmdSetStencilTestEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, stencilTestEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilTestEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> stencilTestEnable
    ) => ThisThread.CmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilWriteMask")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetStencilWriteMask(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
        [NativeTypeName("uint32_t")] uint writeMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, StencilFaceFlags, uint, void>)(
                _slots[266] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[266] = nativeContext.LoadFunction("vkCmdSetStencilWriteMask", "vulkan")
            )
        )(commandBuffer, faceMask, writeMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilWriteMask")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilWriteMask(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] StencilFaceFlags faceMask,
        [NativeTypeName("uint32_t")] uint writeMask
    ) => ThisThread.CmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_EXT_extended_dynamic_state3+VK_KHR_maintenance2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetTessellationDomainOriginEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetTessellationDomainOriginEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        TessellationDomainOrigin domainOrigin
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, TessellationDomainOrigin, void>)(
                _slots[267] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[267] = nativeContext.LoadFunction(
                        "vkCmdSetTessellationDomainOriginEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, domainOrigin);

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_EXT_extended_dynamic_state3+VK_KHR_maintenance2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetTessellationDomainOriginEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetTessellationDomainOriginEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        TessellationDomainOrigin domainOrigin
    ) => ThisThread.CmdSetTessellationDomainOriginEXT(commandBuffer, domainOrigin);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_input_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_vertex_input_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_input_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetVertexInputEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetVertexInputEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint vertexBindingDescriptionCount,
        [NativeTypeName("const VkVertexInputBindingDescription2EXT *")]
            VertexInputBindingDescription2EXT* pVertexBindingDescriptions,
        [NativeTypeName("uint32_t")] uint vertexAttributeDescriptionCount,
        [NativeTypeName("const VkVertexInputAttributeDescription2EXT *")]
            VertexInputAttributeDescription2EXT* pVertexAttributeDescriptions
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                VertexInputBindingDescription2EXT*,
                uint,
                VertexInputAttributeDescription2EXT*,
                void>)(
                _slots[268] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[268] = nativeContext.LoadFunction("vkCmdSetVertexInputEXT", "vulkan")
            )
        )(
            commandBuffer,
            vertexBindingDescriptionCount,
            pVertexBindingDescriptions,
            vertexAttributeDescriptionCount,
            pVertexAttributeDescriptions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_input_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_vertex_input_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_input_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetVertexInputEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetVertexInputEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint vertexBindingDescriptionCount,
        [NativeTypeName("const VkVertexInputBindingDescription2EXT *")]
            VertexInputBindingDescription2EXT* pVertexBindingDescriptions,
        [NativeTypeName("uint32_t")] uint vertexAttributeDescriptionCount,
        [NativeTypeName("const VkVertexInputAttributeDescription2EXT *")]
            VertexInputAttributeDescription2EXT* pVertexAttributeDescriptions
    ) =>
        ThisThread.CmdSetVertexInputEXT(
            commandBuffer,
            vertexBindingDescriptionCount,
            pVertexBindingDescriptions,
            vertexAttributeDescriptionCount,
            pVertexAttributeDescriptions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_input_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_vertex_input_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_input_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetVertexInputEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetVertexInputEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint vertexBindingDescriptionCount,
        [NativeTypeName("const VkVertexInputBindingDescription2EXT *")]
            Ref<VertexInputBindingDescription2EXT> pVertexBindingDescriptions,
        [NativeTypeName("uint32_t")] uint vertexAttributeDescriptionCount,
        [NativeTypeName("const VkVertexInputAttributeDescription2EXT *")]
            Ref<VertexInputAttributeDescription2EXT> pVertexAttributeDescriptions
    )
    {
        fixed (
            VertexInputAttributeDescription2EXT* __dsl_pVertexAttributeDescriptions =
                pVertexAttributeDescriptions
        )
        fixed (
            VertexInputBindingDescription2EXT* __dsl_pVertexBindingDescriptions =
                pVertexBindingDescriptions
        )
        {
            ((IVk)this).CmdSetVertexInputEXT(
                commandBuffer,
                vertexBindingDescriptionCount,
                __dsl_pVertexBindingDescriptions,
                vertexAttributeDescriptionCount,
                __dsl_pVertexAttributeDescriptions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_input_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_vertex_input_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_input_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetVertexInputEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetVertexInputEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint vertexBindingDescriptionCount,
        [NativeTypeName("const VkVertexInputBindingDescription2EXT *")]
            Ref<VertexInputBindingDescription2EXT> pVertexBindingDescriptions,
        [NativeTypeName("uint32_t")] uint vertexAttributeDescriptionCount,
        [NativeTypeName("const VkVertexInputAttributeDescription2EXT *")]
            Ref<VertexInputAttributeDescription2EXT> pVertexAttributeDescriptions
    ) =>
        ThisThread.CmdSetVertexInputEXT(
            commandBuffer,
            vertexBindingDescriptionCount,
            pVertexBindingDescriptions,
            vertexAttributeDescriptionCount,
            pVertexAttributeDescriptions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewport(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Viewport* pViewports
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, Viewport*, void>)(
                _slots[269] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[269] = nativeContext.LoadFunction("vkCmdSetViewport", "vulkan")
            )
        )(commandBuffer, firstViewport, viewportCount, pViewports);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewport(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Viewport* pViewports
    ) => ThisThread.CmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewport(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
    )
    {
        fixed (Viewport* __dsl_pViewports = pViewports)
        {
            ((IVk)this).CmdSetViewport(
                commandBuffer,
                firstViewport,
                viewportCount,
                __dsl_pViewports
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewport(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
    ) => ThisThread.CmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewport(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkViewport *")] Viewport pViewports
    ) => ((IVk)this).CmdSetViewport(commandBuffer, firstViewport, 1, (Viewport*)&pViewports);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewport(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkViewport *")] Viewport pViewports
    ) => ThisThread.CmdSetViewport(commandBuffer, firstViewport, pViewports);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportShadingRatePaletteNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkShadingRatePaletteNV *")]
            ShadingRatePaletteNV* pShadingRatePalettes
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, ShadingRatePaletteNV*, void>)(
                _slots[270] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[270] = nativeContext.LoadFunction(
                        "vkCmdSetViewportShadingRatePaletteNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportShadingRatePaletteNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkShadingRatePaletteNV *")]
            ShadingRatePaletteNV* pShadingRatePalettes
    ) =>
        ThisThread.CmdSetViewportShadingRatePaletteNV(
            commandBuffer,
            firstViewport,
            viewportCount,
            pShadingRatePalettes
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportShadingRatePaletteNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkShadingRatePaletteNV *")]
            Ref<ShadingRatePaletteNV> pShadingRatePalettes
    )
    {
        fixed (ShadingRatePaletteNV* __dsl_pShadingRatePalettes = pShadingRatePalettes)
        {
            ((IVk)this).CmdSetViewportShadingRatePaletteNV(
                commandBuffer,
                firstViewport,
                viewportCount,
                __dsl_pShadingRatePalettes
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportShadingRatePaletteNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkShadingRatePaletteNV *")]
            Ref<ShadingRatePaletteNV> pShadingRatePalettes
    ) =>
        ThisThread.CmdSetViewportShadingRatePaletteNV(
            commandBuffer,
            firstViewport,
            viewportCount,
            pShadingRatePalettes
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportShadingRatePaletteNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkShadingRatePaletteNV *")] ShadingRatePaletteNV pShadingRatePalettes
    ) =>
        ((IVk)this).CmdSetViewportShadingRatePaletteNV(
            commandBuffer,
            firstViewport,
            1,
            (ShadingRatePaletteNV*)&pShadingRatePalettes
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportShadingRatePaletteNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkShadingRatePaletteNV *")] ShadingRatePaletteNV pShadingRatePalettes
    ) =>
        ThisThread.CmdSetViewportShadingRatePaletteNV(
            commandBuffer,
            firstViewport,
            pShadingRatePalettes
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportSwizzleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportSwizzleNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportSwizzleNV *")] ViewportSwizzleNV* pViewportSwizzles
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, ViewportSwizzleNV*, void>)(
                _slots[271] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[271] = nativeContext.LoadFunction(
                        "vkCmdSetViewportSwizzleNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstViewport, viewportCount, pViewportSwizzles);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportSwizzleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportSwizzleNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportSwizzleNV *")] ViewportSwizzleNV* pViewportSwizzles
    ) =>
        ThisThread.CmdSetViewportSwizzleNV(
            commandBuffer,
            firstViewport,
            viewportCount,
            pViewportSwizzles
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportSwizzleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportSwizzleNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportSwizzleNV *")] Ref<ViewportSwizzleNV> pViewportSwizzles
    )
    {
        fixed (ViewportSwizzleNV* __dsl_pViewportSwizzles = pViewportSwizzles)
        {
            ((IVk)this).CmdSetViewportSwizzleNV(
                commandBuffer,
                firstViewport,
                viewportCount,
                __dsl_pViewportSwizzles
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportSwizzleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportSwizzleNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportSwizzleNV *")] Ref<ViewportSwizzleNV> pViewportSwizzles
    ) =>
        ThisThread.CmdSetViewportSwizzleNV(
            commandBuffer,
            firstViewport,
            viewportCount,
            pViewportSwizzles
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportSwizzleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportSwizzleNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkViewportSwizzleNV *")] ViewportSwizzleNV pViewportSwizzles
    ) =>
        ((IVk)this).CmdSetViewportSwizzleNV(
            commandBuffer,
            firstViewport,
            1,
            (ViewportSwizzleNV*)&pViewportSwizzles
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportSwizzleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportSwizzleNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkViewportSwizzleNV *")] ViewportSwizzleNV pViewportSwizzles
    ) => ThisThread.CmdSetViewportSwizzleNV(commandBuffer, firstViewport, pViewportSwizzles);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Viewport* pViewports
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, Viewport*, void>)(
                _slots[272] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[272] = nativeContext.LoadFunction(
                        "vkCmdSetViewportWithCount",
                        "vulkan"
                    )
            )
        )(commandBuffer, viewportCount, pViewports);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Viewport* pViewports
    ) => ThisThread.CmdSetViewportWithCount(commandBuffer, viewportCount, pViewports);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
    )
    {
        fixed (Viewport* __dsl_pViewports = pViewports)
        {
            ((IVk)this).CmdSetViewportWithCount(commandBuffer, viewportCount, __dsl_pViewports);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
    ) => ThisThread.CmdSetViewportWithCount(commandBuffer, viewportCount, pViewports);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkViewport *")] Viewport pViewports
    ) => ((IVk)this).CmdSetViewportWithCount(commandBuffer, 1, (Viewport*)&pViewports);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkViewport *")] Viewport pViewports
    ) => ThisThread.CmdSetViewportWithCount(commandBuffer, pViewports);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Viewport* pViewports
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, Viewport*, void>)(
                _slots[273] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[273] = nativeContext.LoadFunction(
                        "vkCmdSetViewportWithCountEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, viewportCount, pViewports);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Viewport* pViewports
    ) => ThisThread.CmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
    )
    {
        fixed (Viewport* __dsl_pViewports = pViewports)
        {
            ((IVk)this).CmdSetViewportWithCountEXT(commandBuffer, viewportCount, __dsl_pViewports);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
    ) => ThisThread.CmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkViewport *")] Viewport pViewports
    ) => ((IVk)this).CmdSetViewportWithCountEXT(commandBuffer, 1, (Viewport*)&pViewports);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkViewport *")] Viewport pViewports
    ) => ThisThread.CmdSetViewportWithCountEXT(commandBuffer, pViewports);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_clip_space_w_scaling"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportWScalingEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> viewportWScalingEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, MaybeBool<uint>, void>)(
                _slots[274] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[274] = nativeContext.LoadFunction(
                        "vkCmdSetViewportWScalingEnableNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, viewportWScalingEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_clip_space_w_scaling"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWScalingEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBool32")] MaybeBool<uint> viewportWScalingEnable
    ) => ThisThread.CmdSetViewportWScalingEnableNV(commandBuffer, viewportWScalingEnable);

    [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportWScalingNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportWScalingNV *")] ViewportWScalingNV* pViewportWScalings
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, uint, ViewportWScalingNV*, void>)(
                _slots[275] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[275] = nativeContext.LoadFunction(
                        "vkCmdSetViewportWScalingNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstViewport, viewportCount, pViewportWScalings);

    [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWScalingNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportWScalingNV *")] ViewportWScalingNV* pViewportWScalings
    ) =>
        ThisThread.CmdSetViewportWScalingNV(
            commandBuffer,
            firstViewport,
            viewportCount,
            pViewportWScalings
        );

    [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportWScalingNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportWScalingNV *")] Ref<ViewportWScalingNV> pViewportWScalings
    )
    {
        fixed (ViewportWScalingNV* __dsl_pViewportWScalings = pViewportWScalings)
        {
            ((IVk)this).CmdSetViewportWScalingNV(
                commandBuffer,
                firstViewport,
                viewportCount,
                __dsl_pViewportWScalings
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWScalingNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportWScalingNV *")] Ref<ViewportWScalingNV> pViewportWScalings
    ) =>
        ThisThread.CmdSetViewportWScalingNV(
            commandBuffer,
            firstViewport,
            viewportCount,
            pViewportWScalings
        );

    [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSetViewportWScalingNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkViewportWScalingNV *")] ViewportWScalingNV pViewportWScalings
    ) =>
        ((IVk)this).CmdSetViewportWScalingNV(
            commandBuffer,
            firstViewport,
            1,
            (ViewportWScalingNV*)&pViewportWScalings
        );

    [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWScalingNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkViewportWScalingNV *")] ViewportWScalingNV pViewportWScalings
    ) => ThisThread.CmdSetViewportWScalingNV(commandBuffer, firstViewport, pViewportWScalings);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSubpassShadingHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdSubpassShadingHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, void>)(
                _slots[276] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[276] = nativeContext.LoadFunction(
                        "vkCmdSubpassShadingHUAWEI",
                        "vulkan"
                    )
            )
        )(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSubpassShadingHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSubpassShadingHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) => ThisThread.CmdSubpassShadingHuawei(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_maintenance1", "VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = ["VK_KHR_acceleration_structure"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirect2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdTraceRaysIndirect2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, ulong, void>)(
                _slots[277] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[277] = nativeContext.LoadFunction(
                        "vkCmdTraceRaysIndirect2KHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, indirectDeviceAddress);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_maintenance1", "VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = ["VK_KHR_acceleration_structure"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirect2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdTraceRaysIndirect2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
    ) => ThisThread.CmdTraceRaysIndirect2KHR(commandBuffer, indirectDeviceAddress);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirectKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdTraceRaysIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
        [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                StridedDeviceAddressRegionKHR*,
                StridedDeviceAddressRegionKHR*,
                StridedDeviceAddressRegionKHR*,
                StridedDeviceAddressRegionKHR*,
                ulong,
                void>)(
                _slots[278] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[278] = nativeContext.LoadFunction(
                        "vkCmdTraceRaysIndirectKHR",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            pRaygenShaderBindingTable,
            pMissShaderBindingTable,
            pHitShaderBindingTable,
            pCallableShaderBindingTable,
            indirectDeviceAddress
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirectKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdTraceRaysIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
        [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
    ) =>
        ThisThread.CmdTraceRaysIndirectKHR(
            commandBuffer,
            pRaygenShaderBindingTable,
            pMissShaderBindingTable,
            pHitShaderBindingTable,
            pCallableShaderBindingTable,
            indirectDeviceAddress
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirectKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdTraceRaysIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pCallableShaderBindingTable,
        [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
    )
    {
        fixed (
            StridedDeviceAddressRegionKHR* __dsl_pCallableShaderBindingTable =
                pCallableShaderBindingTable
        )
        fixed (StridedDeviceAddressRegionKHR* __dsl_pHitShaderBindingTable = pHitShaderBindingTable)
        fixed (
            StridedDeviceAddressRegionKHR* __dsl_pMissShaderBindingTable = pMissShaderBindingTable
        )
        fixed (
            StridedDeviceAddressRegionKHR* __dsl_pRaygenShaderBindingTable =
                pRaygenShaderBindingTable
        )
        {
            ((IVk)this).CmdTraceRaysIndirectKHR(
                commandBuffer,
                __dsl_pRaygenShaderBindingTable,
                __dsl_pMissShaderBindingTable,
                __dsl_pHitShaderBindingTable,
                __dsl_pCallableShaderBindingTable,
                indirectDeviceAddress
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirectKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdTraceRaysIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pCallableShaderBindingTable,
        [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
    ) =>
        ThisThread.CmdTraceRaysIndirectKHR(
            commandBuffer,
            pRaygenShaderBindingTable,
            pMissShaderBindingTable,
            pHitShaderBindingTable,
            pCallableShaderBindingTable,
            indirectDeviceAddress
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdTraceRaysKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
        [NativeTypeName("uint32_t")] uint width,
        [NativeTypeName("uint32_t")] uint height,
        [NativeTypeName("uint32_t")] uint depth
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                StridedDeviceAddressRegionKHR*,
                StridedDeviceAddressRegionKHR*,
                StridedDeviceAddressRegionKHR*,
                StridedDeviceAddressRegionKHR*,
                uint,
                uint,
                uint,
                void>)(
                _slots[279] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[279] = nativeContext.LoadFunction("vkCmdTraceRaysKHR", "vulkan")
            )
        )(
            commandBuffer,
            pRaygenShaderBindingTable,
            pMissShaderBindingTable,
            pHitShaderBindingTable,
            pCallableShaderBindingTable,
            width,
            height,
            depth
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdTraceRaysKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
        [NativeTypeName("uint32_t")] uint width,
        [NativeTypeName("uint32_t")] uint height,
        [NativeTypeName("uint32_t")] uint depth
    ) =>
        ThisThread.CmdTraceRaysKHR(
            commandBuffer,
            pRaygenShaderBindingTable,
            pMissShaderBindingTable,
            pHitShaderBindingTable,
            pCallableShaderBindingTable,
            width,
            height,
            depth
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdTraceRaysKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pCallableShaderBindingTable,
        [NativeTypeName("uint32_t")] uint width,
        [NativeTypeName("uint32_t")] uint height,
        [NativeTypeName("uint32_t")] uint depth
    )
    {
        fixed (
            StridedDeviceAddressRegionKHR* __dsl_pCallableShaderBindingTable =
                pCallableShaderBindingTable
        )
        fixed (StridedDeviceAddressRegionKHR* __dsl_pHitShaderBindingTable = pHitShaderBindingTable)
        fixed (
            StridedDeviceAddressRegionKHR* __dsl_pMissShaderBindingTable = pMissShaderBindingTable
        )
        fixed (
            StridedDeviceAddressRegionKHR* __dsl_pRaygenShaderBindingTable =
                pRaygenShaderBindingTable
        )
        {
            ((IVk)this).CmdTraceRaysKHR(
                commandBuffer,
                __dsl_pRaygenShaderBindingTable,
                __dsl_pMissShaderBindingTable,
                __dsl_pHitShaderBindingTable,
                __dsl_pCallableShaderBindingTable,
                width,
                height,
                depth
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdTraceRaysKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pCallableShaderBindingTable,
        [NativeTypeName("uint32_t")] uint width,
        [NativeTypeName("uint32_t")] uint height,
        [NativeTypeName("uint32_t")] uint depth
    ) =>
        ThisThread.CmdTraceRaysKHR(
            commandBuffer,
            pRaygenShaderBindingTable,
            pMissShaderBindingTable,
            pHitShaderBindingTable,
            pCallableShaderBindingTable,
            width,
            height,
            depth
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdTraceRaysNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle raygenShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong raygenShaderBindingOffset,
        [NativeTypeName("VkBuffer")] BufferHandle missShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong missShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong missShaderBindingStride,
        [NativeTypeName("VkBuffer")] BufferHandle hitShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingStride,
        [NativeTypeName("VkBuffer")] BufferHandle callableShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingStride,
        [NativeTypeName("uint32_t")] uint width,
        [NativeTypeName("uint32_t")] uint height,
        [NativeTypeName("uint32_t")] uint depth
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                BufferHandle,
                ulong,
                BufferHandle,
                ulong,
                ulong,
                BufferHandle,
                ulong,
                ulong,
                BufferHandle,
                ulong,
                ulong,
                uint,
                uint,
                uint,
                void>)(
                _slots[280] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[280] = nativeContext.LoadFunction("vkCmdTraceRaysNV", "vulkan")
            )
        )(
            commandBuffer,
            raygenShaderBindingTableBuffer,
            raygenShaderBindingOffset,
            missShaderBindingTableBuffer,
            missShaderBindingOffset,
            missShaderBindingStride,
            hitShaderBindingTableBuffer,
            hitShaderBindingOffset,
            hitShaderBindingStride,
            callableShaderBindingTableBuffer,
            callableShaderBindingOffset,
            callableShaderBindingStride,
            width,
            height,
            depth
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdTraceRaysNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle raygenShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong raygenShaderBindingOffset,
        [NativeTypeName("VkBuffer")] BufferHandle missShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong missShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong missShaderBindingStride,
        [NativeTypeName("VkBuffer")] BufferHandle hitShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingStride,
        [NativeTypeName("VkBuffer")] BufferHandle callableShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingStride,
        [NativeTypeName("uint32_t")] uint width,
        [NativeTypeName("uint32_t")] uint height,
        [NativeTypeName("uint32_t")] uint depth
    ) =>
        ThisThread.CmdTraceRaysNV(
            commandBuffer,
            raygenShaderBindingTableBuffer,
            raygenShaderBindingOffset,
            missShaderBindingTableBuffer,
            missShaderBindingOffset,
            missShaderBindingStride,
            hitShaderBindingTableBuffer,
            hitShaderBindingOffset,
            hitShaderBindingStride,
            callableShaderBindingTableBuffer,
            callableShaderBindingOffset,
            callableShaderBindingStride,
            width,
            height,
            depth
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdUpdateBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdUpdateBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong dataSize,
        [NativeTypeName("const void *")] void* pData
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, BufferHandle, ulong, ulong, void*, void>)(
                _slots[281] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[281] = nativeContext.LoadFunction("vkCmdUpdateBuffer", "vulkan")
            )
        )(commandBuffer, dstBuffer, dstOffset, dataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdUpdateBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdUpdateBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong dataSize,
        [NativeTypeName("const void *")] void* pData
    ) => ThisThread.CmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdUpdateBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdUpdateBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong dataSize,
        [NativeTypeName("const void *")] Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        {
            ((IVk)this).CmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, __dsl_pData);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdUpdateBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdUpdateBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong dataSize,
        [NativeTypeName("const void *")] Ref pData
    ) => ThisThread.CmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdUpdatePipelineIndirectBufferNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdUpdatePipelineIndirectBufferNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, PipelineBindPoint, PipelineHandle, void>)(
                _slots[282] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[282] = nativeContext.LoadFunction(
                        "vkCmdUpdatePipelineIndirectBufferNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, pipelineBindPoint, pipeline);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdUpdatePipelineIndirectBufferNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdUpdatePipelineIndirectBufferNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline
    ) => ThisThread.CmdUpdatePipelineIndirectBufferNV(commandBuffer, pipelineBindPoint, pipeline);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWaitEvents(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] EventHandle* pEvents,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags dstStageMask,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] MemoryBarrier* pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            BufferMemoryBarrier* pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")] ImageMemoryBarrier* pImageMemoryBarriers
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                EventHandle*,
                PipelineStageFlags,
                PipelineStageFlags,
                uint,
                MemoryBarrier*,
                uint,
                BufferMemoryBarrier*,
                uint,
                ImageMemoryBarrier*,
                void>)(
                _slots[283] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[283] = nativeContext.LoadFunction("vkCmdWaitEvents", "vulkan")
            )
        )(
            commandBuffer,
            eventCount,
            pEvents,
            srcStageMask,
            dstStageMask,
            memoryBarrierCount,
            pMemoryBarriers,
            bufferMemoryBarrierCount,
            pBufferMemoryBarriers,
            imageMemoryBarrierCount,
            pImageMemoryBarriers
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWaitEvents(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] EventHandle* pEvents,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags dstStageMask,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] MemoryBarrier* pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            BufferMemoryBarrier* pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")] ImageMemoryBarrier* pImageMemoryBarriers
    ) =>
        ThisThread.CmdWaitEvents(
            commandBuffer,
            eventCount,
            pEvents,
            srcStageMask,
            dstStageMask,
            memoryBarrierCount,
            pMemoryBarriers,
            bufferMemoryBarrierCount,
            pBufferMemoryBarriers,
            imageMemoryBarrierCount,
            pImageMemoryBarriers
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWaitEvents(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] Ref<EventHandle> pEvents,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags dstStageMask,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] Ref<MemoryBarrier> pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            Ref<BufferMemoryBarrier> pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")]
            Ref<ImageMemoryBarrier> pImageMemoryBarriers
    )
    {
        fixed (ImageMemoryBarrier* __dsl_pImageMemoryBarriers = pImageMemoryBarriers)
        fixed (BufferMemoryBarrier* __dsl_pBufferMemoryBarriers = pBufferMemoryBarriers)
        fixed (MemoryBarrier* __dsl_pMemoryBarriers = pMemoryBarriers)
        fixed (EventHandle* __dsl_pEvents = pEvents)
        {
            ((IVk)this).CmdWaitEvents(
                commandBuffer,
                eventCount,
                __dsl_pEvents,
                srcStageMask,
                dstStageMask,
                memoryBarrierCount,
                __dsl_pMemoryBarriers,
                bufferMemoryBarrierCount,
                __dsl_pBufferMemoryBarriers,
                imageMemoryBarrierCount,
                __dsl_pImageMemoryBarriers
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWaitEvents(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] Ref<EventHandle> pEvents,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] PipelineStageFlags dstStageMask,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] Ref<MemoryBarrier> pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            Ref<BufferMemoryBarrier> pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")]
            Ref<ImageMemoryBarrier> pImageMemoryBarriers
    ) =>
        ThisThread.CmdWaitEvents(
            commandBuffer,
            eventCount,
            pEvents,
            srcStageMask,
            dstStageMask,
            memoryBarrierCount,
            pMemoryBarriers,
            bufferMemoryBarrierCount,
            pBufferMemoryBarriers,
            imageMemoryBarrierCount,
            pImageMemoryBarriers
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWaitEvents2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] EventHandle* pEvents,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfos
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, EventHandle*, DependencyInfo*, void>)(
                _slots[284] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[284] = nativeContext.LoadFunction("vkCmdWaitEvents2", "vulkan")
            )
        )(commandBuffer, eventCount, pEvents, pDependencyInfos);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWaitEvents2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] EventHandle* pEvents,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfos
    ) => ThisThread.CmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWaitEvents2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] Ref<EventHandle> pEvents,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfos
    )
    {
        fixed (DependencyInfo* __dsl_pDependencyInfos = pDependencyInfos)
        fixed (EventHandle* __dsl_pEvents = pEvents)
        {
            ((IVk)this).CmdWaitEvents2(
                commandBuffer,
                eventCount,
                __dsl_pEvents,
                __dsl_pDependencyInfos
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWaitEvents2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] Ref<EventHandle> pEvents,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfos
    ) => ThisThread.CmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWaitEvents2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] EventHandle* pEvents,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfos
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, uint, EventHandle*, DependencyInfo*, void>)(
                _slots[285] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[285] = nativeContext.LoadFunction("vkCmdWaitEvents2KHR", "vulkan")
            )
        )(commandBuffer, eventCount, pEvents, pDependencyInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWaitEvents2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] EventHandle* pEvents,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfos
    ) => ThisThread.CmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWaitEvents2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] Ref<EventHandle> pEvents,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfos
    )
    {
        fixed (DependencyInfo* __dsl_pDependencyInfos = pDependencyInfos)
        fixed (EventHandle* __dsl_pEvents = pEvents)
        {
            ((IVk)this).CmdWaitEvents2KHR(
                commandBuffer,
                eventCount,
                __dsl_pEvents,
                __dsl_pDependencyInfos
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWaitEvents2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] Ref<EventHandle> pEvents,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfos
    ) => ThisThread.CmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            AccelerationStructureKHRHandle* pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                AccelerationStructureKHRHandle*,
                QueryType,
                QueryPoolHandle,
                uint,
                void>)(
                _slots[286] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[286] = nativeContext.LoadFunction(
                        "vkCmdWriteAccelerationStructuresPropertiesKHR",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            AccelerationStructureKHRHandle* pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        ThisThread.CmdWriteAccelerationStructuresPropertiesKHR(
            commandBuffer,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            Ref<AccelerationStructureKHRHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    )
    {
        fixed (
            AccelerationStructureKHRHandle* __dsl_pAccelerationStructures = pAccelerationStructures
        )
        {
            ((IVk)this).CmdWriteAccelerationStructuresPropertiesKHR(
                commandBuffer,
                accelerationStructureCount,
                __dsl_pAccelerationStructures,
                queryType,
                queryPool,
                firstQuery
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            Ref<AccelerationStructureKHRHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        ThisThread.CmdWriteAccelerationStructuresPropertiesKHR(
            commandBuffer,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            AccelerationStructureKHRHandle pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        ((IVk)this).CmdWriteAccelerationStructuresPropertiesKHR(
            commandBuffer,
            1,
            (AccelerationStructureKHRHandle*)&pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            AccelerationStructureKHRHandle pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        ThisThread.CmdWriteAccelerationStructuresPropertiesKHR(
            commandBuffer,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWriteAccelerationStructuresPropertiesNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureNV *")]
            AccelerationStructureNVHandle* pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                AccelerationStructureNVHandle*,
                QueryType,
                QueryPoolHandle,
                uint,
                void>)(
                _slots[287] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[287] = nativeContext.LoadFunction(
                        "vkCmdWriteAccelerationStructuresPropertiesNV",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteAccelerationStructuresPropertiesNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureNV *")]
            AccelerationStructureNVHandle* pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        ThisThread.CmdWriteAccelerationStructuresPropertiesNV(
            commandBuffer,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWriteAccelerationStructuresPropertiesNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureNV *")]
            Ref<AccelerationStructureNVHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    )
    {
        fixed (
            AccelerationStructureNVHandle* __dsl_pAccelerationStructures = pAccelerationStructures
        )
        {
            ((IVk)this).CmdWriteAccelerationStructuresPropertiesNV(
                commandBuffer,
                accelerationStructureCount,
                __dsl_pAccelerationStructures,
                queryType,
                queryPool,
                firstQuery
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteAccelerationStructuresPropertiesNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureNV *")]
            Ref<AccelerationStructureNVHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        ThisThread.CmdWriteAccelerationStructuresPropertiesNV(
            commandBuffer,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWriteAccelerationStructuresPropertiesNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkAccelerationStructureNV *")]
            AccelerationStructureNVHandle pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        ((IVk)this).CmdWriteAccelerationStructuresPropertiesNV(
            commandBuffer,
            1,
            (AccelerationStructureNVHandle*)&pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteAccelerationStructuresPropertiesNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkAccelerationStructureNV *")]
            AccelerationStructureNVHandle pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        ThisThread.CmdWriteAccelerationStructuresPropertiesNV(
            commandBuffer,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_buffer_marker+VK_KHR_synchronization2", "VK_AMD_buffer_marker+VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteBufferMarker2AMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWriteBufferMarker2AMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stage,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("uint32_t")] uint marker
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                PipelineStageFlags2,
                BufferHandle,
                ulong,
                uint,
                void>)(
                _slots[288] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[288] = nativeContext.LoadFunction(
                        "vkCmdWriteBufferMarker2AMD",
                        "vulkan"
                    )
            )
        )(commandBuffer, stage, dstBuffer, dstOffset, marker);

    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_buffer_marker+VK_KHR_synchronization2", "VK_AMD_buffer_marker+VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteBufferMarker2AMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteBufferMarker2AMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stage,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("uint32_t")] uint marker
    ) => ThisThread.CmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker);

    [SupportedApiProfile("vulkan", ["VK_AMD_buffer_marker"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteBufferMarkerAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWriteBufferMarkerAMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineStageFlags pipelineStage,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("uint32_t")] uint marker
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                PipelineStageFlags,
                BufferHandle,
                ulong,
                uint,
                void>)(
                _slots[289] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[289] = nativeContext.LoadFunction(
                        "vkCmdWriteBufferMarkerAMD",
                        "vulkan"
                    )
            )
        )(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);

    [SupportedApiProfile("vulkan", ["VK_AMD_buffer_marker"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteBufferMarkerAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteBufferMarkerAMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineStageFlags pipelineStage,
        [NativeTypeName("VkBuffer")] BufferHandle dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("uint32_t")] uint marker
    ) =>
        ThisThread.CmdWriteBufferMarkerAMD(
            commandBuffer,
            pipelineStage,
            dstBuffer,
            dstOffset,
            marker
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWriteMicromapsPropertiesEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle* pMicromaps,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                uint,
                MicromapEXTHandle*,
                QueryType,
                QueryPoolHandle,
                uint,
                void>)(
                _slots[290] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[290] = nativeContext.LoadFunction(
                        "vkCmdWriteMicromapsPropertiesEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteMicromapsPropertiesEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle* pMicromaps,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        ThisThread.CmdWriteMicromapsPropertiesEXT(
            commandBuffer,
            micromapCount,
            pMicromaps,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWriteMicromapsPropertiesEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] Ref<MicromapEXTHandle> pMicromaps,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    )
    {
        fixed (MicromapEXTHandle* __dsl_pMicromaps = pMicromaps)
        {
            ((IVk)this).CmdWriteMicromapsPropertiesEXT(
                commandBuffer,
                micromapCount,
                __dsl_pMicromaps,
                queryType,
                queryPool,
                firstQuery
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteMicromapsPropertiesEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] Ref<MicromapEXTHandle> pMicromaps,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        ThisThread.CmdWriteMicromapsPropertiesEXT(
            commandBuffer,
            micromapCount,
            pMicromaps,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWriteMicromapsPropertiesEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle pMicromaps,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        ((IVk)this).CmdWriteMicromapsPropertiesEXT(
            commandBuffer,
            1,
            (MicromapEXTHandle*)&pMicromaps,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteMicromapsPropertiesEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle pMicromaps,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        ThisThread.CmdWriteMicromapsPropertiesEXT(
            commandBuffer,
            pMicromaps,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWriteTimestamp(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineStageFlags pipelineStage,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                PipelineStageFlags,
                QueryPoolHandle,
                uint,
                void>)(
                _slots[291] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[291] = nativeContext.LoadFunction("vkCmdWriteTimestamp", "vulkan")
            )
        )(commandBuffer, pipelineStage, queryPool, query);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteTimestamp(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        PipelineStageFlags pipelineStage,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) => ThisThread.CmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWriteTimestamp2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stage,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                PipelineStageFlags2,
                QueryPoolHandle,
                uint,
                void>)(
                _slots[292] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[292] = nativeContext.LoadFunction("vkCmdWriteTimestamp2", "vulkan")
            )
        )(commandBuffer, stage, queryPool, query);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteTimestamp2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stage,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) => ThisThread.CmdWriteTimestamp2(commandBuffer, stage, queryPool, query);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.CmdWriteTimestamp2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stage,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle,
                PipelineStageFlags2,
                QueryPoolHandle,
                uint,
                void>)(
                _slots[293] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[293] = nativeContext.LoadFunction("vkCmdWriteTimestamp2KHR", "vulkan")
            )
        )(commandBuffer, stage, queryPool, query);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteTimestamp2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] PipelineStageFlags2 stage,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) => ThisThread.CmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCompileDeferredNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CompileDeferredNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint shader
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, PipelineHandle, uint, Result>)(
                _slots[294] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[294] = nativeContext.LoadFunction("vkCompileDeferredNV", "vulkan")
            )
        )(device, pipeline, shader);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCompileDeferredNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CompileDeferredNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint shader
    ) => ThisThread.CompileDeferredNV(device, pipeline, shader);

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [NativeFunction("vulkan", EntryPoint = "vkConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            ConvertCooperativeVectorMatrixInfoNV* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ConvertCooperativeVectorMatrixInfoNV*, Result>)(
                _slots[295] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[295] = nativeContext.LoadFunction(
                        "vkConvertCooperativeVectorMatrixNV",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [NativeFunction("vulkan", EntryPoint = "vkConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            ConvertCooperativeVectorMatrixInfoNV* pInfo
    ) => ThisThread.ConvertCooperativeVectorMatrixNV(device, pInfo);

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            Ref<ConvertCooperativeVectorMatrixInfoNV> pInfo
    )
    {
        fixed (ConvertCooperativeVectorMatrixInfoNV* __dsl_pInfo = pInfo)
        {
            return (Result)((IVk)this).ConvertCooperativeVectorMatrixNV(device, __dsl_pInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            Ref<ConvertCooperativeVectorMatrixInfoNV> pInfo
    ) => ThisThread.ConvertCooperativeVectorMatrixNV(device, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            CopyAccelerationStructureInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeferredOperationKHRHandle,
                CopyAccelerationStructureInfoKHR*,
                Result>)(
                _slots[296] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[296] = nativeContext.LoadFunction(
                        "vkCopyAccelerationStructureKHR",
                        "vulkan"
                    )
            )
        )(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            CopyAccelerationStructureInfoKHR* pInfo
    ) => ThisThread.CopyAccelerationStructureKHR(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            Ref<CopyAccelerationStructureInfoKHR> pInfo
    )
    {
        fixed (CopyAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).CopyAccelerationStructureKHR(device, deferredOperation, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            Ref<CopyAccelerationStructureInfoKHR> pInfo
    ) => ThisThread.CopyAccelerationStructureKHR(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureToMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            CopyAccelerationStructureToMemoryInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeferredOperationKHRHandle,
                CopyAccelerationStructureToMemoryInfoKHR*,
                Result>)(
                _slots[297] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[297] = nativeContext.LoadFunction(
                        "vkCopyAccelerationStructureToMemoryKHR",
                        "vulkan"
                    )
            )
        )(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureToMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            CopyAccelerationStructureToMemoryInfoKHR* pInfo
    ) => ThisThread.CopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureToMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            Ref<CopyAccelerationStructureToMemoryInfoKHR> pInfo
    )
    {
        fixed (CopyAccelerationStructureToMemoryInfoKHR* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).CopyAccelerationStructureToMemoryKHR(
                    device,
                    deferredOperation,
                    __dsl_pInfo
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureToMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            Ref<CopyAccelerationStructureToMemoryInfoKHR> pInfo
    ) => ThisThread.CopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyImageToImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            CopyImageToImageInfo* pCopyImageToImageInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, CopyImageToImageInfo*, Result>)(
                _slots[298] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[298] = nativeContext.LoadFunction("vkCopyImageToImage", "vulkan")
            )
        )(device, pCopyImageToImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            CopyImageToImageInfo* pCopyImageToImageInfo
    ) => ThisThread.CopyImageToImage(device, pCopyImageToImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyImageToImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            Ref<CopyImageToImageInfo> pCopyImageToImageInfo
    )
    {
        fixed (CopyImageToImageInfo* __dsl_pCopyImageToImageInfo = pCopyImageToImageInfo)
        {
            return (Result)((IVk)this).CopyImageToImage(device, __dsl_pCopyImageToImageInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            Ref<CopyImageToImageInfo> pCopyImageToImageInfo
    ) => ThisThread.CopyImageToImage(device, pCopyImageToImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyImageToImageEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            CopyImageToImageInfo* pCopyImageToImageInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, CopyImageToImageInfo*, Result>)(
                _slots[299] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[299] = nativeContext.LoadFunction("vkCopyImageToImageEXT", "vulkan")
            )
        )(device, pCopyImageToImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToImageEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            CopyImageToImageInfo* pCopyImageToImageInfo
    ) => ThisThread.CopyImageToImageEXT(device, pCopyImageToImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyImageToImageEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            Ref<CopyImageToImageInfo> pCopyImageToImageInfo
    )
    {
        fixed (CopyImageToImageInfo* __dsl_pCopyImageToImageInfo = pCopyImageToImageInfo)
        {
            return (Result)((IVk)this).CopyImageToImageEXT(device, __dsl_pCopyImageToImageInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToImageEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            Ref<CopyImageToImageInfo> pCopyImageToImageInfo
    ) => ThisThread.CopyImageToImageEXT(device, pCopyImageToImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyImageToMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            CopyImageToMemoryInfo* pCopyImageToMemoryInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, CopyImageToMemoryInfo*, Result>)(
                _slots[300] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[300] = nativeContext.LoadFunction("vkCopyImageToMemory", "vulkan")
            )
        )(device, pCopyImageToMemoryInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            CopyImageToMemoryInfo* pCopyImageToMemoryInfo
    ) => ThisThread.CopyImageToMemory(device, pCopyImageToMemoryInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyImageToMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            Ref<CopyImageToMemoryInfo> pCopyImageToMemoryInfo
    )
    {
        fixed (CopyImageToMemoryInfo* __dsl_pCopyImageToMemoryInfo = pCopyImageToMemoryInfo)
        {
            return (Result)((IVk)this).CopyImageToMemory(device, __dsl_pCopyImageToMemoryInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            Ref<CopyImageToMemoryInfo> pCopyImageToMemoryInfo
    ) => ThisThread.CopyImageToMemory(device, pCopyImageToMemoryInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyImageToMemoryEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            CopyImageToMemoryInfo* pCopyImageToMemoryInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, CopyImageToMemoryInfo*, Result>)(
                _slots[301] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[301] = nativeContext.LoadFunction("vkCopyImageToMemoryEXT", "vulkan")
            )
        )(device, pCopyImageToMemoryInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToMemoryEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            CopyImageToMemoryInfo* pCopyImageToMemoryInfo
    ) => ThisThread.CopyImageToMemoryEXT(device, pCopyImageToMemoryInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyImageToMemoryEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            Ref<CopyImageToMemoryInfo> pCopyImageToMemoryInfo
    )
    {
        fixed (CopyImageToMemoryInfo* __dsl_pCopyImageToMemoryInfo = pCopyImageToMemoryInfo)
        {
            return (Result)((IVk)this).CopyImageToMemoryEXT(device, __dsl_pCopyImageToMemoryInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToMemoryEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            Ref<CopyImageToMemoryInfo> pCopyImageToMemoryInfo
    ) => ThisThread.CopyImageToMemoryEXT(device, pCopyImageToMemoryInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            CopyMemoryToAccelerationStructureInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeferredOperationKHRHandle,
                CopyMemoryToAccelerationStructureInfoKHR*,
                Result>)(
                _slots[302] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[302] = nativeContext.LoadFunction(
                        "vkCopyMemoryToAccelerationStructureKHR",
                        "vulkan"
                    )
            )
        )(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            CopyMemoryToAccelerationStructureInfoKHR* pInfo
    ) => ThisThread.CopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            Ref<CopyMemoryToAccelerationStructureInfoKHR> pInfo
    )
    {
        fixed (CopyMemoryToAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).CopyMemoryToAccelerationStructureKHR(
                    device,
                    deferredOperation,
                    __dsl_pInfo
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            Ref<CopyMemoryToAccelerationStructureInfoKHR> pInfo
    ) => ThisThread.CopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyMemoryToImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            CopyMemoryToImageInfo* pCopyMemoryToImageInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, CopyMemoryToImageInfo*, Result>)(
                _slots[303] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[303] = nativeContext.LoadFunction("vkCopyMemoryToImage", "vulkan")
            )
        )(device, pCopyMemoryToImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            CopyMemoryToImageInfo* pCopyMemoryToImageInfo
    ) => ThisThread.CopyMemoryToImage(device, pCopyMemoryToImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyMemoryToImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            Ref<CopyMemoryToImageInfo> pCopyMemoryToImageInfo
    )
    {
        fixed (CopyMemoryToImageInfo* __dsl_pCopyMemoryToImageInfo = pCopyMemoryToImageInfo)
        {
            return (Result)((IVk)this).CopyMemoryToImage(device, __dsl_pCopyMemoryToImageInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            Ref<CopyMemoryToImageInfo> pCopyMemoryToImageInfo
    ) => ThisThread.CopyMemoryToImage(device, pCopyMemoryToImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyMemoryToImageEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            CopyMemoryToImageInfo* pCopyMemoryToImageInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, CopyMemoryToImageInfo*, Result>)(
                _slots[304] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[304] = nativeContext.LoadFunction("vkCopyMemoryToImageEXT", "vulkan")
            )
        )(device, pCopyMemoryToImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToImageEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            CopyMemoryToImageInfo* pCopyMemoryToImageInfo
    ) => ThisThread.CopyMemoryToImageEXT(device, pCopyMemoryToImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyMemoryToImageEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            Ref<CopyMemoryToImageInfo> pCopyMemoryToImageInfo
    )
    {
        fixed (CopyMemoryToImageInfo* __dsl_pCopyMemoryToImageInfo = pCopyMemoryToImageInfo)
        {
            return (Result)((IVk)this).CopyMemoryToImageEXT(device, __dsl_pCopyMemoryToImageInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToImageEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            Ref<CopyMemoryToImageInfo> pCopyMemoryToImageInfo
    ) => ThisThread.CopyMemoryToImageEXT(device, pCopyMemoryToImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyMemoryToMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")] CopyMemoryToMicromapInfoEXT* pInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeferredOperationKHRHandle,
                CopyMemoryToMicromapInfoEXT*,
                Result>)(
                _slots[305] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[305] = nativeContext.LoadFunction(
                        "vkCopyMemoryToMicromapEXT",
                        "vulkan"
                    )
            )
        )(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")] CopyMemoryToMicromapInfoEXT* pInfo
    ) => ThisThread.CopyMemoryToMicromapEXT(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyMemoryToMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
            Ref<CopyMemoryToMicromapInfoEXT> pInfo
    )
    {
        fixed (CopyMemoryToMicromapInfoEXT* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).CopyMemoryToMicromapEXT(device, deferredOperation, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
            Ref<CopyMemoryToMicromapInfoEXT> pInfo
    ) => ThisThread.CopyMemoryToMicromapEXT(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] CopyMicromapInfoEXT* pInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeferredOperationKHRHandle,
                CopyMicromapInfoEXT*,
                Result>)(
                _slots[306] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[306] = nativeContext.LoadFunction("vkCopyMicromapEXT", "vulkan")
            )
        )(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] CopyMicromapInfoEXT* pInfo
    ) => ThisThread.CopyMicromapEXT(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] Ref<CopyMicromapInfoEXT> pInfo
    )
    {
        fixed (CopyMicromapInfoEXT* __dsl_pInfo = pInfo)
        {
            return (Result)((IVk)this).CopyMicromapEXT(device, deferredOperation, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] Ref<CopyMicromapInfoEXT> pInfo
    ) => ThisThread.CopyMicromapEXT(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyMicromapToMemoryEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")] CopyMicromapToMemoryInfoEXT* pInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeferredOperationKHRHandle,
                CopyMicromapToMemoryInfoEXT*,
                Result>)(
                _slots[307] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[307] = nativeContext.LoadFunction(
                        "vkCopyMicromapToMemoryEXT",
                        "vulkan"
                    )
            )
        )(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMicromapToMemoryEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")] CopyMicromapToMemoryInfoEXT* pInfo
    ) => ThisThread.CopyMicromapToMemoryEXT(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CopyMicromapToMemoryEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
            Ref<CopyMicromapToMemoryInfoEXT> pInfo
    )
    {
        fixed (CopyMicromapToMemoryInfoEXT* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).CopyMicromapToMemoryEXT(device, deferredOperation, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMicromapToMemoryEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
            Ref<CopyMicromapToMemoryInfoEXT> pInfo
    ) => ThisThread.CopyMicromapToMemoryEXT(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoKHR *")]
            AccelerationStructureCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkAccelerationStructureKHR *")]
            AccelerationStructureKHRHandle* pAccelerationStructure
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                AccelerationStructureCreateInfoKHR*,
                AllocationCallbacks*,
                AccelerationStructureKHRHandle*,
                Result>)(
                _slots[308] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[308] = nativeContext.LoadFunction(
                        "vkCreateAccelerationStructureKHR",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pAccelerationStructure);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoKHR *")]
            AccelerationStructureCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkAccelerationStructureKHR *")]
            AccelerationStructureKHRHandle* pAccelerationStructure
    ) =>
        ThisThread.CreateAccelerationStructureKHR(
            device,
            pCreateInfo,
            pAllocator,
            pAccelerationStructure
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoKHR *")]
            Ref<AccelerationStructureCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkAccelerationStructureKHR *")]
            Ref<AccelerationStructureKHRHandle> pAccelerationStructure
    )
    {
        fixed (
            AccelerationStructureKHRHandle* __dsl_pAccelerationStructure = pAccelerationStructure
        )
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (AccelerationStructureCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateAccelerationStructureKHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pAccelerationStructure
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoKHR *")]
            Ref<AccelerationStructureCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkAccelerationStructureKHR *")]
            Ref<AccelerationStructureKHRHandle> pAccelerationStructure
    ) =>
        ThisThread.CreateAccelerationStructureKHR(
            device,
            pCreateInfo,
            pAllocator,
            pAccelerationStructure
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateAccelerationStructureNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoNV *")]
            AccelerationStructureCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkAccelerationStructureNV *")]
            AccelerationStructureNVHandle* pAccelerationStructure
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                AccelerationStructureCreateInfoNV*,
                AllocationCallbacks*,
                AccelerationStructureNVHandle*,
                Result>)(
                _slots[309] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[309] = nativeContext.LoadFunction(
                        "vkCreateAccelerationStructureNV",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pAccelerationStructure);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateAccelerationStructureNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoNV *")]
            AccelerationStructureCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkAccelerationStructureNV *")]
            AccelerationStructureNVHandle* pAccelerationStructure
    ) =>
        ThisThread.CreateAccelerationStructureNV(
            device,
            pCreateInfo,
            pAllocator,
            pAccelerationStructure
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateAccelerationStructureNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoNV *")]
            Ref<AccelerationStructureCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkAccelerationStructureNV *")]
            Ref<AccelerationStructureNVHandle> pAccelerationStructure
    )
    {
        fixed (AccelerationStructureNVHandle* __dsl_pAccelerationStructure = pAccelerationStructure)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (AccelerationStructureCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateAccelerationStructureNV(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pAccelerationStructure
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateAccelerationStructureNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoNV *")]
            Ref<AccelerationStructureCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkAccelerationStructureNV *")]
            Ref<AccelerationStructureNVHandle> pAccelerationStructure
    ) =>
        ThisThread.CreateAccelerationStructureNV(
            device,
            pCreateInfo,
            pAllocator,
            pAccelerationStructure
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateBuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferCreateInfo *")] BufferCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkBuffer *")] BufferHandle* pBuffer
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                BufferCreateInfo*,
                AllocationCallbacks*,
                BufferHandle*,
                Result>)(
                _slots[310] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[310] = nativeContext.LoadFunction("vkCreateBuffer", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateBuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferCreateInfo *")] BufferCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkBuffer *")] BufferHandle* pBuffer
    ) => ThisThread.CreateBuffer(device, pCreateInfo, pAllocator, pBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateBuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferCreateInfo *")] Ref<BufferCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkBuffer *")] Ref<BufferHandle> pBuffer
    )
    {
        fixed (BufferHandle* __dsl_pBuffer = pBuffer)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (BufferCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateBuffer(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pBuffer
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateBuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferCreateInfo *")] Ref<BufferCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkBuffer *")] Ref<BufferHandle> pBuffer
    ) => ThisThread.CreateBuffer(device, pCreateInfo, pAllocator, pBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateBufferView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateBufferView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferViewCreateInfo *")] BufferViewCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkBufferView *")] BufferViewHandle* pView
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                BufferViewCreateInfo*,
                AllocationCallbacks*,
                BufferViewHandle*,
                Result>)(
                _slots[311] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[311] = nativeContext.LoadFunction("vkCreateBufferView", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pView);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateBufferView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateBufferView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferViewCreateInfo *")] BufferViewCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkBufferView *")] BufferViewHandle* pView
    ) => ThisThread.CreateBufferView(device, pCreateInfo, pAllocator, pView);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateBufferView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateBufferView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferViewCreateInfo *")] Ref<BufferViewCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkBufferView *")] Ref<BufferViewHandle> pView
    )
    {
        fixed (BufferViewHandle* __dsl_pView = pView)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (BufferViewCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateBufferView(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pView
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateBufferView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateBufferView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferViewCreateInfo *")] Ref<BufferViewCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkBufferView *")] Ref<BufferViewHandle> pView
    ) => ThisThread.CreateBufferView(device, pCreateInfo, pAllocator, pView);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCommandPoolCreateInfo *")] CommandPoolCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCommandPool *")] CommandPoolHandle* pCommandPool
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                CommandPoolCreateInfo*,
                AllocationCallbacks*,
                CommandPoolHandle*,
                Result>)(
                _slots[312] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[312] = nativeContext.LoadFunction("vkCreateCommandPool", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pCommandPool);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCommandPoolCreateInfo *")] CommandPoolCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCommandPool *")] CommandPoolHandle* pCommandPool
    ) => ThisThread.CreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCommandPoolCreateInfo *")] Ref<CommandPoolCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCommandPool *")] Ref<CommandPoolHandle> pCommandPool
    )
    {
        fixed (CommandPoolHandle* __dsl_pCommandPool = pCommandPool)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (CommandPoolCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateCommandPool(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pCommandPool
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCommandPoolCreateInfo *")] Ref<CommandPoolCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCommandPool *")] Ref<CommandPoolHandle> pCommandPool
    ) => ThisThread.CreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateComputePipelines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateComputePipelines(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            ComputePipelineCreateInfo* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PipelineCacheHandle,
                uint,
                ComputePipelineCreateInfo*,
                AllocationCallbacks*,
                PipelineHandle*,
                Result>)(
                _slots[313] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[313] = nativeContext.LoadFunction("vkCreateComputePipelines", "vulkan")
            )
        )(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateComputePipelines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateComputePipelines(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            ComputePipelineCreateInfo* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
    ) =>
        ThisThread.CreateComputePipelines(
            device,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateComputePipelines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateComputePipelines(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            Ref<ComputePipelineCreateInfo> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
    )
    {
        fixed (PipelineHandle* __dsl_pPipelines = pPipelines)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ComputePipelineCreateInfo* __dsl_pCreateInfos = pCreateInfos)
        {
            return (Result)
                ((IVk)this).CreateComputePipelines(
                    device,
                    pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateComputePipelines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateComputePipelines(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            Ref<ComputePipelineCreateInfo> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
    ) =>
        ThisThread.CreateComputePipelines(
            device,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCuFunctionNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateCuFunctionNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCuFunctionCreateInfoNVX *")] CuFunctionCreateInfoNVX* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCuFunctionNVX *")] CuFunctionNVXHandle* pFunction
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                CuFunctionCreateInfoNVX*,
                AllocationCallbacks*,
                CuFunctionNVXHandle*,
                Result>)(
                _slots[314] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[314] = nativeContext.LoadFunction("vkCreateCuFunctionNVX", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pFunction);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCuFunctionNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCuFunctionNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCuFunctionCreateInfoNVX *")] CuFunctionCreateInfoNVX* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCuFunctionNVX *")] CuFunctionNVXHandle* pFunction
    ) => ThisThread.CreateCuFunctionNVX(device, pCreateInfo, pAllocator, pFunction);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCuFunctionNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateCuFunctionNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCuFunctionCreateInfoNVX *")]
            Ref<CuFunctionCreateInfoNVX> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCuFunctionNVX *")] Ref<CuFunctionNVXHandle> pFunction
    )
    {
        fixed (CuFunctionNVXHandle* __dsl_pFunction = pFunction)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (CuFunctionCreateInfoNVX* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateCuFunctionNVX(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pFunction
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCuFunctionNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCuFunctionNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCuFunctionCreateInfoNVX *")]
            Ref<CuFunctionCreateInfoNVX> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCuFunctionNVX *")] Ref<CuFunctionNVXHandle> pFunction
    ) => ThisThread.CreateCuFunctionNVX(device, pCreateInfo, pAllocator, pFunction);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCuModuleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateCuModuleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCuModuleCreateInfoNVX *")] CuModuleCreateInfoNVX* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCuModuleNVX *")] CuModuleNVXHandle* pModule
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                CuModuleCreateInfoNVX*,
                AllocationCallbacks*,
                CuModuleNVXHandle*,
                Result>)(
                _slots[315] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[315] = nativeContext.LoadFunction("vkCreateCuModuleNVX", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pModule);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCuModuleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCuModuleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCuModuleCreateInfoNVX *")] CuModuleCreateInfoNVX* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCuModuleNVX *")] CuModuleNVXHandle* pModule
    ) => ThisThread.CreateCuModuleNVX(device, pCreateInfo, pAllocator, pModule);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCuModuleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateCuModuleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCuModuleCreateInfoNVX *")] Ref<CuModuleCreateInfoNVX> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCuModuleNVX *")] Ref<CuModuleNVXHandle> pModule
    )
    {
        fixed (CuModuleNVXHandle* __dsl_pModule = pModule)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (CuModuleCreateInfoNVX* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateCuModuleNVX(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pModule
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCuModuleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCuModuleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkCuModuleCreateInfoNVX *")] Ref<CuModuleCreateInfoNVX> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCuModuleNVX *")] Ref<CuModuleNVXHandle> pModule
    ) => ThisThread.CreateCuModuleNVX(device, pCreateInfo, pAllocator, pModule);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDataGraphPipelinesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDataGraphPipelinesARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkDataGraphPipelineCreateInfoARM *")]
            DataGraphPipelineCreateInfoARM* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeferredOperationKHRHandle,
                PipelineCacheHandle,
                uint,
                DataGraphPipelineCreateInfoARM*,
                AllocationCallbacks*,
                PipelineHandle*,
                Result>)(
                _slots[316] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[316] = nativeContext.LoadFunction(
                        "vkCreateDataGraphPipelinesARM",
                        "vulkan"
                    )
            )
        )(
            device,
            deferredOperation,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDataGraphPipelinesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDataGraphPipelinesARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkDataGraphPipelineCreateInfoARM *")]
            DataGraphPipelineCreateInfoARM* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
    ) =>
        ThisThread.CreateDataGraphPipelinesARM(
            device,
            deferredOperation,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDataGraphPipelinesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDataGraphPipelinesARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkDataGraphPipelineCreateInfoARM *")]
            Ref<DataGraphPipelineCreateInfoARM> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
    )
    {
        fixed (PipelineHandle* __dsl_pPipelines = pPipelines)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DataGraphPipelineCreateInfoARM* __dsl_pCreateInfos = pCreateInfos)
        {
            return (Result)
                ((IVk)this).CreateDataGraphPipelinesARM(
                    device,
                    deferredOperation,
                    pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDataGraphPipelinesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDataGraphPipelinesARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkDataGraphPipelineCreateInfoARM *")]
            Ref<DataGraphPipelineCreateInfoARM> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
    ) =>
        ThisThread.CreateDataGraphPipelinesARM(
            device,
            deferredOperation,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDataGraphPipelineSessionARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDataGraphPipelineSessionARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineSessionCreateInfoARM *")]
            DataGraphPipelineSessionCreateInfoARM* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDataGraphPipelineSessionARM *")]
            DataGraphPipelineSessionARMHandle* pSession
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DataGraphPipelineSessionCreateInfoARM*,
                AllocationCallbacks*,
                DataGraphPipelineSessionARMHandle*,
                Result>)(
                _slots[317] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[317] = nativeContext.LoadFunction(
                        "vkCreateDataGraphPipelineSessionARM",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pSession);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDataGraphPipelineSessionARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDataGraphPipelineSessionARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineSessionCreateInfoARM *")]
            DataGraphPipelineSessionCreateInfoARM* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDataGraphPipelineSessionARM *")]
            DataGraphPipelineSessionARMHandle* pSession
    ) => ThisThread.CreateDataGraphPipelineSessionARM(device, pCreateInfo, pAllocator, pSession);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDataGraphPipelineSessionARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDataGraphPipelineSessionARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineSessionCreateInfoARM *")]
            Ref<DataGraphPipelineSessionCreateInfoARM> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDataGraphPipelineSessionARM *")]
            Ref<DataGraphPipelineSessionARMHandle> pSession
    )
    {
        fixed (DataGraphPipelineSessionARMHandle* __dsl_pSession = pSession)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DataGraphPipelineSessionCreateInfoARM* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateDataGraphPipelineSessionARM(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSession
                );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDataGraphPipelineSessionARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDataGraphPipelineSessionARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineSessionCreateInfoARM *")]
            Ref<DataGraphPipelineSessionCreateInfoARM> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDataGraphPipelineSessionARM *")]
            Ref<DataGraphPipelineSessionARMHandle> pSession
    ) => ThisThread.CreateDataGraphPipelineSessionARM(device, pCreateInfo, pAllocator, pSession);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDebugReportCallbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkDebugReportCallbackCreateInfoEXT *")]
            DebugReportCallbackCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDebugReportCallbackEXT *")] DebugReportCallbackEXTHandle* pCallback
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle,
                DebugReportCallbackCreateInfoEXT*,
                AllocationCallbacks*,
                DebugReportCallbackEXTHandle*,
                Result>)(
                _slots[318] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[318] = nativeContext.LoadFunction(
                        "vkCreateDebugReportCallbackEXT",
                        "vulkan"
                    )
            )
        )(instance, pCreateInfo, pAllocator, pCallback);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDebugReportCallbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkDebugReportCallbackCreateInfoEXT *")]
            DebugReportCallbackCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDebugReportCallbackEXT *")] DebugReportCallbackEXTHandle* pCallback
    ) => ThisThread.CreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDebugReportCallbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkDebugReportCallbackCreateInfoEXT *")]
            Ref<DebugReportCallbackCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDebugReportCallbackEXT *")] Ref<DebugReportCallbackEXTHandle> pCallback
    )
    {
        fixed (DebugReportCallbackEXTHandle* __dsl_pCallback = pCallback)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DebugReportCallbackCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateDebugReportCallbackEXT(
                    instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pCallback
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDebugReportCallbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkDebugReportCallbackCreateInfoEXT *")]
            Ref<DebugReportCallbackCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDebugReportCallbackEXT *")] Ref<DebugReportCallbackEXTHandle> pCallback
    ) => ThisThread.CreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDebugUtilsMessengerEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkDebugUtilsMessengerCreateInfoEXT *")]
            DebugUtilsMessengerCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDebugUtilsMessengerEXT *")] DebugUtilsMessengerEXTHandle* pMessenger
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle,
                DebugUtilsMessengerCreateInfoEXT*,
                AllocationCallbacks*,
                DebugUtilsMessengerEXTHandle*,
                Result>)(
                _slots[319] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[319] = nativeContext.LoadFunction(
                        "vkCreateDebugUtilsMessengerEXT",
                        "vulkan"
                    )
            )
        )(instance, pCreateInfo, pAllocator, pMessenger);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDebugUtilsMessengerEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkDebugUtilsMessengerCreateInfoEXT *")]
            DebugUtilsMessengerCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDebugUtilsMessengerEXT *")] DebugUtilsMessengerEXTHandle* pMessenger
    ) => ThisThread.CreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDebugUtilsMessengerEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkDebugUtilsMessengerCreateInfoEXT *")]
            Ref<DebugUtilsMessengerCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDebugUtilsMessengerEXT *")] Ref<DebugUtilsMessengerEXTHandle> pMessenger
    )
    {
        fixed (DebugUtilsMessengerEXTHandle* __dsl_pMessenger = pMessenger)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DebugUtilsMessengerCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateDebugUtilsMessengerEXT(
                    instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pMessenger
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDebugUtilsMessengerEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkDebugUtilsMessengerCreateInfoEXT *")]
            Ref<DebugUtilsMessengerCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDebugUtilsMessengerEXT *")] Ref<DebugUtilsMessengerEXTHandle> pMessenger
    ) => ThisThread.CreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDeferredOperationKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDeferredOperationKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDeferredOperationKHR *")] DeferredOperationKHRHandle* pDeferredOperation
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                AllocationCallbacks*,
                DeferredOperationKHRHandle*,
                Result>)(
                _slots[320] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[320] = nativeContext.LoadFunction(
                        "vkCreateDeferredOperationKHR",
                        "vulkan"
                    )
            )
        )(device, pAllocator, pDeferredOperation);

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDeferredOperationKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDeferredOperationKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDeferredOperationKHR *")] DeferredOperationKHRHandle* pDeferredOperation
    ) => ThisThread.CreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDeferredOperationKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDeferredOperationKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDeferredOperationKHR *")]
            Ref<DeferredOperationKHRHandle> pDeferredOperation
    )
    {
        fixed (DeferredOperationKHRHandle* __dsl_pDeferredOperation = pDeferredOperation)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            return (Result)
                ((IVk)this).CreateDeferredOperationKHR(
                    device,
                    __dsl_pAllocator,
                    __dsl_pDeferredOperation
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDeferredOperationKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDeferredOperationKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDeferredOperationKHR *")]
            Ref<DeferredOperationKHRHandle> pDeferredOperation
    ) => ThisThread.CreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorPoolCreateInfo *")]
            DescriptorPoolCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorPool *")] DescriptorPoolHandle* pDescriptorPool
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DescriptorPoolCreateInfo*,
                AllocationCallbacks*,
                DescriptorPoolHandle*,
                Result>)(
                _slots[321] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[321] = nativeContext.LoadFunction("vkCreateDescriptorPool", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pDescriptorPool);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorPoolCreateInfo *")]
            DescriptorPoolCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorPool *")] DescriptorPoolHandle* pDescriptorPool
    ) => ThisThread.CreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorPoolCreateInfo *")]
            Ref<DescriptorPoolCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorPool *")] Ref<DescriptorPoolHandle> pDescriptorPool
    )
    {
        fixed (DescriptorPoolHandle* __dsl_pDescriptorPool = pDescriptorPool)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DescriptorPoolCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateDescriptorPool(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDescriptorPool
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorPoolCreateInfo *")]
            Ref<DescriptorPoolCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorPool *")] Ref<DescriptorPoolHandle> pDescriptorPool
    ) => ThisThread.CreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorSetLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDescriptorSetLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            DescriptorSetLayoutCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorSetLayout *")] DescriptorSetLayoutHandle* pSetLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DescriptorSetLayoutCreateInfo*,
                AllocationCallbacks*,
                DescriptorSetLayoutHandle*,
                Result>)(
                _slots[322] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[322] = nativeContext.LoadFunction(
                        "vkCreateDescriptorSetLayout",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pSetLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorSetLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorSetLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            DescriptorSetLayoutCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorSetLayout *")] DescriptorSetLayoutHandle* pSetLayout
    ) => ThisThread.CreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorSetLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDescriptorSetLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorSetLayout *")] Ref<DescriptorSetLayoutHandle> pSetLayout
    )
    {
        fixed (DescriptorSetLayoutHandle* __dsl_pSetLayout = pSetLayout)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DescriptorSetLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateDescriptorSetLayout(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSetLayout
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorSetLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorSetLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorSetLayout *")] Ref<DescriptorSetLayoutHandle> pSetLayout
    ) => ThisThread.CreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            DescriptorUpdateTemplateCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            DescriptorUpdateTemplateHandle* pDescriptorUpdateTemplate
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DescriptorUpdateTemplateCreateInfo*,
                AllocationCallbacks*,
                DescriptorUpdateTemplateHandle*,
                Result>)(
                _slots[323] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[323] = nativeContext.LoadFunction(
                        "vkCreateDescriptorUpdateTemplate",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            DescriptorUpdateTemplateCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            DescriptorUpdateTemplateHandle* pDescriptorUpdateTemplate
    ) =>
        ThisThread.CreateDescriptorUpdateTemplate(
            device,
            pCreateInfo,
            pAllocator,
            pDescriptorUpdateTemplate
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            Ref<DescriptorUpdateTemplateCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            Ref<DescriptorUpdateTemplateHandle> pDescriptorUpdateTemplate
    )
    {
        fixed (
            DescriptorUpdateTemplateHandle* __dsl_pDescriptorUpdateTemplate =
                pDescriptorUpdateTemplate
        )
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DescriptorUpdateTemplateCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateDescriptorUpdateTemplate(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDescriptorUpdateTemplate
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            Ref<DescriptorUpdateTemplateCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            Ref<DescriptorUpdateTemplateHandle> pDescriptorUpdateTemplate
    ) =>
        ThisThread.CreateDescriptorUpdateTemplate(
            device,
            pCreateInfo,
            pAllocator,
            pDescriptorUpdateTemplate
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            DescriptorUpdateTemplateCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            DescriptorUpdateTemplateHandle* pDescriptorUpdateTemplate
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DescriptorUpdateTemplateCreateInfo*,
                AllocationCallbacks*,
                DescriptorUpdateTemplateHandle*,
                Result>)(
                _slots[324] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[324] = nativeContext.LoadFunction(
                        "vkCreateDescriptorUpdateTemplateKHR",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            DescriptorUpdateTemplateCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            DescriptorUpdateTemplateHandle* pDescriptorUpdateTemplate
    ) =>
        ThisThread.CreateDescriptorUpdateTemplateKHR(
            device,
            pCreateInfo,
            pAllocator,
            pDescriptorUpdateTemplate
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            Ref<DescriptorUpdateTemplateCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            Ref<DescriptorUpdateTemplateHandle> pDescriptorUpdateTemplate
    )
    {
        fixed (
            DescriptorUpdateTemplateHandle* __dsl_pDescriptorUpdateTemplate =
                pDescriptorUpdateTemplate
        )
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DescriptorUpdateTemplateCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateDescriptorUpdateTemplateKHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDescriptorUpdateTemplate
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            Ref<DescriptorUpdateTemplateCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            Ref<DescriptorUpdateTemplateHandle> pDescriptorUpdateTemplate
    ) =>
        ThisThread.CreateDescriptorUpdateTemplateKHR(
            device,
            pCreateInfo,
            pAllocator,
            pDescriptorUpdateTemplate
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    private Result CreateDeviceInternal(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkDeviceCreateInfo *")] DeviceCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDevice *")] DeviceHandle* pDevice
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                DeviceCreateInfo*,
                AllocationCallbacks*,
                DeviceHandle*,
                Result>)(
                _slots[325] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[325] = nativeContext.LoadFunction("vkCreateDevice", "vulkan")
            )
        )(physicalDevice, pCreateInfo, pAllocator, pDevice);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDevice(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkDeviceCreateInfo *")] DeviceCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDevice *")] DeviceHandle* pDevice
    )
    {
        Result result = CreateDeviceInternal(physicalDevice, pCreateInfo, pAllocator, pDevice);
        if (result == Result.Success)
        {
            CurrentDevice = *pDevice;
        }
        return result;
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDevice(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkDeviceCreateInfo *")] DeviceCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDevice *")] DeviceHandle* pDevice
    ) => ThisThread.CreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDevice(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkDeviceCreateInfo *")] Ref<DeviceCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDevice *")] Ref<DeviceHandle> pDevice
    )
    {
        fixed (DeviceHandle* __dsl_pDevice = pDevice)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DeviceCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateDevice(
                    physicalDevice,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDevice
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDevice(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkDeviceCreateInfo *")] Ref<DeviceCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDevice *")] Ref<DeviceHandle> pDevice
    ) => ThisThread.CreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayModeKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDisplayModeKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("const VkDisplayModeCreateInfoKHR *")]
            DisplayModeCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDisplayModeKHR *")] DisplayModeKHRHandle* pMode
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                DisplayKHRHandle,
                DisplayModeCreateInfoKHR*,
                AllocationCallbacks*,
                DisplayModeKHRHandle*,
                Result>)(
                _slots[326] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[326] = nativeContext.LoadFunction("vkCreateDisplayModeKHR", "vulkan")
            )
        )(physicalDevice, display, pCreateInfo, pAllocator, pMode);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayModeKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDisplayModeKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("const VkDisplayModeCreateInfoKHR *")]
            DisplayModeCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDisplayModeKHR *")] DisplayModeKHRHandle* pMode
    ) => ThisThread.CreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayModeKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDisplayModeKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("const VkDisplayModeCreateInfoKHR *")]
            Ref<DisplayModeCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDisplayModeKHR *")] Ref<DisplayModeKHRHandle> pMode
    )
    {
        fixed (DisplayModeKHRHandle* __dsl_pMode = pMode)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DisplayModeCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateDisplayModeKHR(
                    physicalDevice,
                    display,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pMode
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayModeKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDisplayModeKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("const VkDisplayModeCreateInfoKHR *")]
            Ref<DisplayModeCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDisplayModeKHR *")] Ref<DisplayModeKHRHandle> pMode
    ) => ThisThread.CreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayPlaneSurfaceKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDisplayPlaneSurfaceKHR(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkDisplaySurfaceCreateInfoKHR *")]
            DisplaySurfaceCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] SurfaceKHRHandle* pSurface
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle,
                DisplaySurfaceCreateInfoKHR*,
                AllocationCallbacks*,
                SurfaceKHRHandle*,
                Result>)(
                _slots[327] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[327] = nativeContext.LoadFunction(
                        "vkCreateDisplayPlaneSurfaceKHR",
                        "vulkan"
                    )
            )
        )(instance, pCreateInfo, pAllocator, pSurface);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayPlaneSurfaceKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDisplayPlaneSurfaceKHR(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkDisplaySurfaceCreateInfoKHR *")]
            DisplaySurfaceCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] SurfaceKHRHandle* pSurface
    ) => ThisThread.CreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayPlaneSurfaceKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateDisplayPlaneSurfaceKHR(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkDisplaySurfaceCreateInfoKHR *")]
            Ref<DisplaySurfaceCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] Ref<SurfaceKHRHandle> pSurface
    )
    {
        fixed (SurfaceKHRHandle* __dsl_pSurface = pSurface)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DisplaySurfaceCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateDisplayPlaneSurfaceKHR(
                    instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSurface
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayPlaneSurfaceKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDisplayPlaneSurfaceKHR(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkDisplaySurfaceCreateInfoKHR *")]
            Ref<DisplaySurfaceCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] Ref<SurfaceKHRHandle> pSurface
    ) => ThisThread.CreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateEvent(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkEventCreateInfo *")] EventCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkEvent *")] EventHandle* pEvent
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                EventCreateInfo*,
                AllocationCallbacks*,
                EventHandle*,
                Result>)(
                _slots[328] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[328] = nativeContext.LoadFunction("vkCreateEvent", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pEvent);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateEvent(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkEventCreateInfo *")] EventCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkEvent *")] EventHandle* pEvent
    ) => ThisThread.CreateEvent(device, pCreateInfo, pAllocator, pEvent);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateEvent(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkEventCreateInfo *")] Ref<EventCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkEvent *")] Ref<EventHandle> pEvent
    )
    {
        fixed (EventHandle* __dsl_pEvent = pEvent)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (EventCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateEvent(device, __dsl_pCreateInfo, __dsl_pAllocator, __dsl_pEvent);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateEvent(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkEventCreateInfo *")] Ref<EventCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkEvent *")] Ref<EventHandle> pEvent
    ) => ThisThread.CreateEvent(device, pCreateInfo, pAllocator, pEvent);

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateExternalComputeQueueNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkExternalComputeQueueCreateInfoNV *")]
            ExternalComputeQueueCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkExternalComputeQueueNV *")] ExternalComputeQueueNVHandle* pExternalQueue
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ExternalComputeQueueCreateInfoNV*,
                AllocationCallbacks*,
                ExternalComputeQueueNVHandle*,
                Result>)(
                _slots[329] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[329] = nativeContext.LoadFunction(
                        "vkCreateExternalComputeQueueNV",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pExternalQueue);

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateExternalComputeQueueNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkExternalComputeQueueCreateInfoNV *")]
            ExternalComputeQueueCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkExternalComputeQueueNV *")] ExternalComputeQueueNVHandle* pExternalQueue
    ) => ThisThread.CreateExternalComputeQueueNV(device, pCreateInfo, pAllocator, pExternalQueue);

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateExternalComputeQueueNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkExternalComputeQueueCreateInfoNV *")]
            Ref<ExternalComputeQueueCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkExternalComputeQueueNV *")]
            Ref<ExternalComputeQueueNVHandle> pExternalQueue
    )
    {
        fixed (ExternalComputeQueueNVHandle* __dsl_pExternalQueue = pExternalQueue)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ExternalComputeQueueCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateExternalComputeQueueNV(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pExternalQueue
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateExternalComputeQueueNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkExternalComputeQueueCreateInfoNV *")]
            Ref<ExternalComputeQueueCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkExternalComputeQueueNV *")]
            Ref<ExternalComputeQueueNVHandle> pExternalQueue
    ) => ThisThread.CreateExternalComputeQueueNV(device, pCreateInfo, pAllocator, pExternalQueue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateFence")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateFence(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkFenceCreateInfo *")] FenceCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFence *")] FenceHandle* pFence
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                FenceCreateInfo*,
                AllocationCallbacks*,
                FenceHandle*,
                Result>)(
                _slots[330] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[330] = nativeContext.LoadFunction("vkCreateFence", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pFence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateFence")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateFence(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkFenceCreateInfo *")] FenceCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFence *")] FenceHandle* pFence
    ) => ThisThread.CreateFence(device, pCreateInfo, pAllocator, pFence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateFence")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateFence(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkFenceCreateInfo *")] Ref<FenceCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFence *")] Ref<FenceHandle> pFence
    )
    {
        fixed (FenceHandle* __dsl_pFence = pFence)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (FenceCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateFence(device, __dsl_pCreateInfo, __dsl_pAllocator, __dsl_pFence);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateFence")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateFence(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkFenceCreateInfo *")] Ref<FenceCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFence *")] Ref<FenceHandle> pFence
    ) => ThisThread.CreateFence(device, pCreateInfo, pAllocator, pFence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateFramebuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateFramebuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkFramebufferCreateInfo *")] FramebufferCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFramebuffer *")] FramebufferHandle* pFramebuffer
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                FramebufferCreateInfo*,
                AllocationCallbacks*,
                FramebufferHandle*,
                Result>)(
                _slots[331] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[331] = nativeContext.LoadFunction("vkCreateFramebuffer", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pFramebuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateFramebuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateFramebuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkFramebufferCreateInfo *")] FramebufferCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFramebuffer *")] FramebufferHandle* pFramebuffer
    ) => ThisThread.CreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateFramebuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateFramebuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkFramebufferCreateInfo *")] Ref<FramebufferCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFramebuffer *")] Ref<FramebufferHandle> pFramebuffer
    )
    {
        fixed (FramebufferHandle* __dsl_pFramebuffer = pFramebuffer)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (FramebufferCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateFramebuffer(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pFramebuffer
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateFramebuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateFramebuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkFramebufferCreateInfo *")] Ref<FramebufferCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFramebuffer *")] Ref<FramebufferHandle> pFramebuffer
    ) => ThisThread.CreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateGraphicsPipelines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateGraphicsPipelines(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkGraphicsPipelineCreateInfo *")]
            GraphicsPipelineCreateInfo* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PipelineCacheHandle,
                uint,
                GraphicsPipelineCreateInfo*,
                AllocationCallbacks*,
                PipelineHandle*,
                Result>)(
                _slots[332] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[332] = nativeContext.LoadFunction(
                        "vkCreateGraphicsPipelines",
                        "vulkan"
                    )
            )
        )(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateGraphicsPipelines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateGraphicsPipelines(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkGraphicsPipelineCreateInfo *")]
            GraphicsPipelineCreateInfo* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
    ) =>
        ThisThread.CreateGraphicsPipelines(
            device,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateGraphicsPipelines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateGraphicsPipelines(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkGraphicsPipelineCreateInfo *")]
            Ref<GraphicsPipelineCreateInfo> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
    )
    {
        fixed (PipelineHandle* __dsl_pPipelines = pPipelines)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (GraphicsPipelineCreateInfo* __dsl_pCreateInfos = pCreateInfos)
        {
            return (Result)
                ((IVk)this).CreateGraphicsPipelines(
                    device,
                    pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateGraphicsPipelines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateGraphicsPipelines(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkGraphicsPipelineCreateInfo *")]
            Ref<GraphicsPipelineCreateInfo> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
    ) =>
        ThisThread.CreateGraphicsPipelines(
            device,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [SupportedApiProfile("vulkan", ["VK_EXT_headless_surface"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateHeadlessSurfaceEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateHeadlessSurfaceEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkHeadlessSurfaceCreateInfoEXT *")]
            HeadlessSurfaceCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] SurfaceKHRHandle* pSurface
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle,
                HeadlessSurfaceCreateInfoEXT*,
                AllocationCallbacks*,
                SurfaceKHRHandle*,
                Result>)(
                _slots[333] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[333] = nativeContext.LoadFunction(
                        "vkCreateHeadlessSurfaceEXT",
                        "vulkan"
                    )
            )
        )(instance, pCreateInfo, pAllocator, pSurface);

    [SupportedApiProfile("vulkan", ["VK_EXT_headless_surface"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateHeadlessSurfaceEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateHeadlessSurfaceEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkHeadlessSurfaceCreateInfoEXT *")]
            HeadlessSurfaceCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] SurfaceKHRHandle* pSurface
    ) => ThisThread.CreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);

    [SupportedApiProfile("vulkan", ["VK_EXT_headless_surface"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateHeadlessSurfaceEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateHeadlessSurfaceEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkHeadlessSurfaceCreateInfoEXT *")]
            Ref<HeadlessSurfaceCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] Ref<SurfaceKHRHandle> pSurface
    )
    {
        fixed (SurfaceKHRHandle* __dsl_pSurface = pSurface)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (HeadlessSurfaceCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateHeadlessSurfaceEXT(
                    instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSurface
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_headless_surface"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateHeadlessSurfaceEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateHeadlessSurfaceEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkHeadlessSurfaceCreateInfoEXT *")]
            Ref<HeadlessSurfaceCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] Ref<SurfaceKHRHandle> pSurface
    ) => ThisThread.CreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageCreateInfo *")] ImageCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkImage *")] ImageHandle* pImage
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ImageCreateInfo*,
                AllocationCallbacks*,
                ImageHandle*,
                Result>)(
                _slots[334] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[334] = nativeContext.LoadFunction("vkCreateImage", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pImage);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageCreateInfo *")] ImageCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkImage *")] ImageHandle* pImage
    ) => ThisThread.CreateImage(device, pCreateInfo, pAllocator, pImage);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageCreateInfo *")] Ref<ImageCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkImage *")] Ref<ImageHandle> pImage
    )
    {
        fixed (ImageHandle* __dsl_pImage = pImage)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ImageCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateImage(device, __dsl_pCreateInfo, __dsl_pAllocator, __dsl_pImage);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageCreateInfo *")] Ref<ImageCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkImage *")] Ref<ImageHandle> pImage
    ) => ThisThread.CreateImage(device, pCreateInfo, pAllocator, pImage);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateImageView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateImageView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewCreateInfo *")] ImageViewCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkImageView *")] ImageViewHandle* pView
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ImageViewCreateInfo*,
                AllocationCallbacks*,
                ImageViewHandle*,
                Result>)(
                _slots[335] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[335] = nativeContext.LoadFunction("vkCreateImageView", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pView);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateImageView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateImageView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewCreateInfo *")] ImageViewCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkImageView *")] ImageViewHandle* pView
    ) => ThisThread.CreateImageView(device, pCreateInfo, pAllocator, pView);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateImageView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateImageView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewCreateInfo *")] Ref<ImageViewCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkImageView *")] Ref<ImageViewHandle> pView
    )
    {
        fixed (ImageViewHandle* __dsl_pView = pView)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ImageViewCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateImageView(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pView
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateImageView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateImageView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewCreateInfo *")] Ref<ImageViewCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkImageView *")] Ref<ImageViewHandle> pView
    ) => ThisThread.CreateImageView(device, pCreateInfo, pAllocator, pView);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoEXT *")]
            IndirectCommandsLayoutCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutEXT *")]
            IndirectCommandsLayoutEXTHandle* pIndirectCommandsLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                IndirectCommandsLayoutCreateInfoEXT*,
                AllocationCallbacks*,
                IndirectCommandsLayoutEXTHandle*,
                Result>)(
                _slots[336] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[336] = nativeContext.LoadFunction(
                        "vkCreateIndirectCommandsLayoutEXT",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoEXT *")]
            IndirectCommandsLayoutCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutEXT *")]
            IndirectCommandsLayoutEXTHandle* pIndirectCommandsLayout
    ) =>
        ThisThread.CreateIndirectCommandsLayoutEXT(
            device,
            pCreateInfo,
            pAllocator,
            pIndirectCommandsLayout
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoEXT *")]
            Ref<IndirectCommandsLayoutCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutEXT *")]
            Ref<IndirectCommandsLayoutEXTHandle> pIndirectCommandsLayout
    )
    {
        fixed (
            IndirectCommandsLayoutEXTHandle* __dsl_pIndirectCommandsLayout = pIndirectCommandsLayout
        )
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (IndirectCommandsLayoutCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateIndirectCommandsLayoutEXT(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pIndirectCommandsLayout
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoEXT *")]
            Ref<IndirectCommandsLayoutCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutEXT *")]
            Ref<IndirectCommandsLayoutEXTHandle> pIndirectCommandsLayout
    ) =>
        ThisThread.CreateIndirectCommandsLayoutEXT(
            device,
            pCreateInfo,
            pAllocator,
            pIndirectCommandsLayout
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoNV *")]
            IndirectCommandsLayoutCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutNV *")]
            IndirectCommandsLayoutNVHandle* pIndirectCommandsLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                IndirectCommandsLayoutCreateInfoNV*,
                AllocationCallbacks*,
                IndirectCommandsLayoutNVHandle*,
                Result>)(
                _slots[337] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[337] = nativeContext.LoadFunction(
                        "vkCreateIndirectCommandsLayoutNV",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoNV *")]
            IndirectCommandsLayoutCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutNV *")]
            IndirectCommandsLayoutNVHandle* pIndirectCommandsLayout
    ) =>
        ThisThread.CreateIndirectCommandsLayoutNV(
            device,
            pCreateInfo,
            pAllocator,
            pIndirectCommandsLayout
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoNV *")]
            Ref<IndirectCommandsLayoutCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutNV *")]
            Ref<IndirectCommandsLayoutNVHandle> pIndirectCommandsLayout
    )
    {
        fixed (
            IndirectCommandsLayoutNVHandle* __dsl_pIndirectCommandsLayout = pIndirectCommandsLayout
        )
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (IndirectCommandsLayoutCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateIndirectCommandsLayoutNV(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pIndirectCommandsLayout
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoNV *")]
            Ref<IndirectCommandsLayoutCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutNV *")]
            Ref<IndirectCommandsLayoutNVHandle> pIndirectCommandsLayout
    ) =>
        ThisThread.CreateIndirectCommandsLayoutNV(
            device,
            pCreateInfo,
            pAllocator,
            pIndirectCommandsLayout
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectExecutionSetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkIndirectExecutionSetCreateInfoEXT *")]
            IndirectExecutionSetCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkIndirectExecutionSetEXT *")]
            IndirectExecutionSetEXTHandle* pIndirectExecutionSet
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                IndirectExecutionSetCreateInfoEXT*,
                AllocationCallbacks*,
                IndirectExecutionSetEXTHandle*,
                Result>)(
                _slots[338] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[338] = nativeContext.LoadFunction(
                        "vkCreateIndirectExecutionSetEXT",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pIndirectExecutionSet);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectExecutionSetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkIndirectExecutionSetCreateInfoEXT *")]
            IndirectExecutionSetCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkIndirectExecutionSetEXT *")]
            IndirectExecutionSetEXTHandle* pIndirectExecutionSet
    ) =>
        ThisThread.CreateIndirectExecutionSetEXT(
            device,
            pCreateInfo,
            pAllocator,
            pIndirectExecutionSet
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectExecutionSetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkIndirectExecutionSetCreateInfoEXT *")]
            Ref<IndirectExecutionSetCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkIndirectExecutionSetEXT *")]
            Ref<IndirectExecutionSetEXTHandle> pIndirectExecutionSet
    )
    {
        fixed (IndirectExecutionSetEXTHandle* __dsl_pIndirectExecutionSet = pIndirectExecutionSet)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (IndirectExecutionSetCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateIndirectExecutionSetEXT(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pIndirectExecutionSet
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectExecutionSetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkIndirectExecutionSetCreateInfoEXT *")]
            Ref<IndirectExecutionSetCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkIndirectExecutionSetEXT *")]
            Ref<IndirectExecutionSetEXTHandle> pIndirectExecutionSet
    ) =>
        ThisThread.CreateIndirectExecutionSetEXT(
            device,
            pCreateInfo,
            pAllocator,
            pIndirectExecutionSet
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateInstance")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    private Result CreateInstanceInternal(
        [NativeTypeName("const VkInstanceCreateInfo *")] InstanceCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkInstance *")] InstanceHandle* pInstance
    ) =>
        (
            (delegate* unmanaged<
                InstanceCreateInfo*,
                AllocationCallbacks*,
                InstanceHandle*,
                Result>)(
                _slots[339] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[339] = nativeContext.LoadFunction("vkCreateInstance", "vulkan")
            )
        )(pCreateInfo, pAllocator, pInstance);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateInstance")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateInstance(
        [NativeTypeName("const VkInstanceCreateInfo *")] InstanceCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkInstance *")] InstanceHandle* pInstance
    )
    {
        Result result = CreateInstanceInternal(pCreateInfo, pAllocator, pInstance);
        if (result == Result.Success)
        {
            CurrentInstance = *pInstance;
        }
        return result;
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateInstance")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateInstance(
        [NativeTypeName("const VkInstanceCreateInfo *")] InstanceCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkInstance *")] InstanceHandle* pInstance
    ) => ThisThread.CreateInstance(pCreateInfo, pAllocator, pInstance);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateInstance")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateInstance(
        [NativeTypeName("const VkInstanceCreateInfo *")] Ref<InstanceCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkInstance *")] Ref<InstanceHandle> pInstance
    )
    {
        fixed (InstanceHandle* __dsl_pInstance = pInstance)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (InstanceCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateInstance(__dsl_pCreateInfo, __dsl_pAllocator, __dsl_pInstance);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateInstance")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateInstance(
        [NativeTypeName("const VkInstanceCreateInfo *")] Ref<InstanceCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkInstance *")] Ref<InstanceHandle> pInstance
    ) => ThisThread.CreateInstance(pCreateInfo, pAllocator, pInstance);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMicromapCreateInfoEXT *")] MicromapCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkMicromapEXT *")] MicromapEXTHandle* pMicromap
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                MicromapCreateInfoEXT*,
                AllocationCallbacks*,
                MicromapEXTHandle*,
                Result>)(
                _slots[340] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[340] = nativeContext.LoadFunction("vkCreateMicromapEXT", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pMicromap);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMicromapCreateInfoEXT *")] MicromapCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkMicromapEXT *")] MicromapEXTHandle* pMicromap
    ) => ThisThread.CreateMicromapEXT(device, pCreateInfo, pAllocator, pMicromap);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMicromapCreateInfoEXT *")] Ref<MicromapCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkMicromapEXT *")] Ref<MicromapEXTHandle> pMicromap
    )
    {
        fixed (MicromapEXTHandle* __dsl_pMicromap = pMicromap)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (MicromapCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateMicromapEXT(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pMicromap
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMicromapCreateInfoEXT *")] Ref<MicromapCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkMicromapEXT *")] Ref<MicromapEXTHandle> pMicromap
    ) => ThisThread.CreateMicromapEXT(device, pCreateInfo, pAllocator, pMicromap);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateOpticalFlowSessionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkOpticalFlowSessionCreateInfoNV *")]
            OpticalFlowSessionCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkOpticalFlowSessionNV *")] OpticalFlowSessionNVHandle* pSession
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                OpticalFlowSessionCreateInfoNV*,
                AllocationCallbacks*,
                OpticalFlowSessionNVHandle*,
                Result>)(
                _slots[341] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[341] = nativeContext.LoadFunction(
                        "vkCreateOpticalFlowSessionNV",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pSession);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateOpticalFlowSessionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkOpticalFlowSessionCreateInfoNV *")]
            OpticalFlowSessionCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkOpticalFlowSessionNV *")] OpticalFlowSessionNVHandle* pSession
    ) => ThisThread.CreateOpticalFlowSessionNV(device, pCreateInfo, pAllocator, pSession);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateOpticalFlowSessionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkOpticalFlowSessionCreateInfoNV *")]
            Ref<OpticalFlowSessionCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkOpticalFlowSessionNV *")] Ref<OpticalFlowSessionNVHandle> pSession
    )
    {
        fixed (OpticalFlowSessionNVHandle* __dsl_pSession = pSession)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (OpticalFlowSessionCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateOpticalFlowSessionNV(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSession
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateOpticalFlowSessionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkOpticalFlowSessionCreateInfoNV *")]
            Ref<OpticalFlowSessionCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkOpticalFlowSessionNV *")] Ref<OpticalFlowSessionNVHandle> pSession
    ) => ThisThread.CreateOpticalFlowSessionNV(device, pCreateInfo, pAllocator, pSession);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineBinariesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreatePipelineBinariesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineBinaryCreateInfoKHR *")]
            PipelineBinaryCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        PipelineBinaryHandlesInfoKHR* pBinaries
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PipelineBinaryCreateInfoKHR*,
                AllocationCallbacks*,
                PipelineBinaryHandlesInfoKHR*,
                Result>)(
                _slots[342] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[342] = nativeContext.LoadFunction(
                        "vkCreatePipelineBinariesKHR",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pBinaries);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineBinariesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePipelineBinariesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineBinaryCreateInfoKHR *")]
            PipelineBinaryCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        PipelineBinaryHandlesInfoKHR* pBinaries
    ) => ThisThread.CreatePipelineBinariesKHR(device, pCreateInfo, pAllocator, pBinaries);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineBinariesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreatePipelineBinariesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineBinaryCreateInfoKHR *")]
            Ref<PipelineBinaryCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        Ref<PipelineBinaryHandlesInfoKHR> pBinaries
    )
    {
        fixed (PipelineBinaryHandlesInfoKHR* __dsl_pBinaries = pBinaries)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PipelineBinaryCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreatePipelineBinariesKHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pBinaries
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineBinariesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePipelineBinariesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineBinaryCreateInfoKHR *")]
            Ref<PipelineBinaryCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        Ref<PipelineBinaryHandlesInfoKHR> pBinaries
    ) => ThisThread.CreatePipelineBinariesKHR(device, pCreateInfo, pAllocator, pBinaries);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineCache")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreatePipelineCache(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineCacheCreateInfo *")] PipelineCacheCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipelineCache *")] PipelineCacheHandle* pPipelineCache
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PipelineCacheCreateInfo*,
                AllocationCallbacks*,
                PipelineCacheHandle*,
                Result>)(
                _slots[343] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[343] = nativeContext.LoadFunction("vkCreatePipelineCache", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pPipelineCache);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineCache")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePipelineCache(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineCacheCreateInfo *")] PipelineCacheCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipelineCache *")] PipelineCacheHandle* pPipelineCache
    ) => ThisThread.CreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineCache")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreatePipelineCache(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineCacheCreateInfo *")]
            Ref<PipelineCacheCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipelineCache *")] Ref<PipelineCacheHandle> pPipelineCache
    )
    {
        fixed (PipelineCacheHandle* __dsl_pPipelineCache = pPipelineCache)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PipelineCacheCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreatePipelineCache(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPipelineCache
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineCache")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePipelineCache(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineCacheCreateInfo *")]
            Ref<PipelineCacheCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipelineCache *")] Ref<PipelineCacheHandle> pPipelineCache
    ) => ThisThread.CreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreatePipelineLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineLayoutCreateInfo *")]
            PipelineLayoutCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipelineLayout *")] PipelineLayoutHandle* pPipelineLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PipelineLayoutCreateInfo*,
                AllocationCallbacks*,
                PipelineLayoutHandle*,
                Result>)(
                _slots[344] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[344] = nativeContext.LoadFunction("vkCreatePipelineLayout", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pPipelineLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePipelineLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineLayoutCreateInfo *")]
            PipelineLayoutCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipelineLayout *")] PipelineLayoutHandle* pPipelineLayout
    ) => ThisThread.CreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreatePipelineLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineLayoutCreateInfo *")]
            Ref<PipelineLayoutCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipelineLayout *")] Ref<PipelineLayoutHandle> pPipelineLayout
    )
    {
        fixed (PipelineLayoutHandle* __dsl_pPipelineLayout = pPipelineLayout)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PipelineLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreatePipelineLayout(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPipelineLayout
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePipelineLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineLayoutCreateInfo *")]
            Ref<PipelineLayoutCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipelineLayout *")] Ref<PipelineLayoutHandle> pPipelineLayout
    ) => ThisThread.CreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlot")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreatePrivateDataSlot(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            PrivateDataSlotCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] PrivateDataSlotHandle* pPrivateDataSlot
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PrivateDataSlotCreateInfo*,
                AllocationCallbacks*,
                PrivateDataSlotHandle*,
                Result>)(
                _slots[345] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[345] = nativeContext.LoadFunction("vkCreatePrivateDataSlot", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pPrivateDataSlot);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlot")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePrivateDataSlot(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            PrivateDataSlotCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] PrivateDataSlotHandle* pPrivateDataSlot
    ) => ThisThread.CreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlot")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreatePrivateDataSlot(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            Ref<PrivateDataSlotCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] Ref<PrivateDataSlotHandle> pPrivateDataSlot
    )
    {
        fixed (PrivateDataSlotHandle* __dsl_pPrivateDataSlot = pPrivateDataSlot)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PrivateDataSlotCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreatePrivateDataSlot(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPrivateDataSlot
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlot")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePrivateDataSlot(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            Ref<PrivateDataSlotCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] Ref<PrivateDataSlotHandle> pPrivateDataSlot
    ) => ThisThread.CreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlotEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreatePrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            PrivateDataSlotCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] PrivateDataSlotHandle* pPrivateDataSlot
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PrivateDataSlotCreateInfo*,
                AllocationCallbacks*,
                PrivateDataSlotHandle*,
                Result>)(
                _slots[346] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[346] = nativeContext.LoadFunction(
                        "vkCreatePrivateDataSlotEXT",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pPrivateDataSlot);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlotEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            PrivateDataSlotCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] PrivateDataSlotHandle* pPrivateDataSlot
    ) => ThisThread.CreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlotEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreatePrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            Ref<PrivateDataSlotCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] Ref<PrivateDataSlotHandle> pPrivateDataSlot
    )
    {
        fixed (PrivateDataSlotHandle* __dsl_pPrivateDataSlot = pPrivateDataSlot)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PrivateDataSlotCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreatePrivateDataSlotEXT(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPrivateDataSlot
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlotEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            Ref<PrivateDataSlotCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] Ref<PrivateDataSlotHandle> pPrivateDataSlot
    ) => ThisThread.CreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkQueryPoolCreateInfo *")] QueryPoolCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkQueryPool *")] QueryPoolHandle* pQueryPool
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                QueryPoolCreateInfo*,
                AllocationCallbacks*,
                QueryPoolHandle*,
                Result>)(
                _slots[347] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[347] = nativeContext.LoadFunction("vkCreateQueryPool", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pQueryPool);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkQueryPoolCreateInfo *")] QueryPoolCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkQueryPool *")] QueryPoolHandle* pQueryPool
    ) => ThisThread.CreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkQueryPoolCreateInfo *")] Ref<QueryPoolCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkQueryPool *")] Ref<QueryPoolHandle> pQueryPool
    )
    {
        fixed (QueryPoolHandle* __dsl_pQueryPool = pQueryPool)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (QueryPoolCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateQueryPool(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pQueryPool
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkQueryPoolCreateInfo *")] Ref<QueryPoolCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkQueryPool *")] Ref<QueryPoolHandle> pQueryPool
    ) => ThisThread.CreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateRayTracingPipelinesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoKHR *")]
            RayTracingPipelineCreateInfoKHR* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeferredOperationKHRHandle,
                PipelineCacheHandle,
                uint,
                RayTracingPipelineCreateInfoKHR*,
                AllocationCallbacks*,
                PipelineHandle*,
                Result>)(
                _slots[348] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[348] = nativeContext.LoadFunction(
                        "vkCreateRayTracingPipelinesKHR",
                        "vulkan"
                    )
            )
        )(
            device,
            deferredOperation,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRayTracingPipelinesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoKHR *")]
            RayTracingPipelineCreateInfoKHR* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
    ) =>
        ThisThread.CreateRayTracingPipelinesKHR(
            device,
            deferredOperation,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateRayTracingPipelinesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoKHR *")]
            Ref<RayTracingPipelineCreateInfoKHR> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
    )
    {
        fixed (PipelineHandle* __dsl_pPipelines = pPipelines)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (RayTracingPipelineCreateInfoKHR* __dsl_pCreateInfos = pCreateInfos)
        {
            return (Result)
                ((IVk)this).CreateRayTracingPipelinesKHR(
                    device,
                    deferredOperation,
                    pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRayTracingPipelinesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle deferredOperation,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoKHR *")]
            Ref<RayTracingPipelineCreateInfoKHR> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
    ) =>
        ThisThread.CreateRayTracingPipelinesKHR(
            device,
            deferredOperation,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateRayTracingPipelinesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoNV *")]
            RayTracingPipelineCreateInfoNV* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PipelineCacheHandle,
                uint,
                RayTracingPipelineCreateInfoNV*,
                AllocationCallbacks*,
                PipelineHandle*,
                Result>)(
                _slots[349] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[349] = nativeContext.LoadFunction(
                        "vkCreateRayTracingPipelinesNV",
                        "vulkan"
                    )
            )
        )(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRayTracingPipelinesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoNV *")]
            RayTracingPipelineCreateInfoNV* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle* pPipelines
    ) =>
        ThisThread.CreateRayTracingPipelinesNV(
            device,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateRayTracingPipelinesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoNV *")]
            Ref<RayTracingPipelineCreateInfoNV> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
    )
    {
        fixed (PipelineHandle* __dsl_pPipelines = pPipelines)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (RayTracingPipelineCreateInfoNV* __dsl_pCreateInfos = pCreateInfos)
        {
            return (Result)
                ((IVk)this).CreateRayTracingPipelinesNV(
                    device,
                    pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRayTracingPipelinesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoNV *")]
            Ref<RayTracingPipelineCreateInfoNV> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref<PipelineHandle> pPipelines
    ) =>
        ThisThread.CreateRayTracingPipelinesNV(
            device,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateRenderPass(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderPassCreateInfo *")] RenderPassCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkRenderPass *")] RenderPassHandle* pRenderPass
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                RenderPassCreateInfo*,
                AllocationCallbacks*,
                RenderPassHandle*,
                Result>)(
                _slots[350] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[350] = nativeContext.LoadFunction("vkCreateRenderPass", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pRenderPass);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRenderPass(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderPassCreateInfo *")] RenderPassCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkRenderPass *")] RenderPassHandle* pRenderPass
    ) => ThisThread.CreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateRenderPass(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderPassCreateInfo *")] Ref<RenderPassCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkRenderPass *")] Ref<RenderPassHandle> pRenderPass
    )
    {
        fixed (RenderPassHandle* __dsl_pRenderPass = pRenderPass)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (RenderPassCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateRenderPass(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pRenderPass
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRenderPass(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderPassCreateInfo *")] Ref<RenderPassCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkRenderPass *")] Ref<RenderPassHandle> pRenderPass
    ) => ThisThread.CreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateRenderPass2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] RenderPassCreateInfo2* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkRenderPass *")] RenderPassHandle* pRenderPass
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                RenderPassCreateInfo2*,
                AllocationCallbacks*,
                RenderPassHandle*,
                Result>)(
                _slots[351] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[351] = nativeContext.LoadFunction("vkCreateRenderPass2", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pRenderPass);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRenderPass2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] RenderPassCreateInfo2* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkRenderPass *")] RenderPassHandle* pRenderPass
    ) => ThisThread.CreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateRenderPass2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] Ref<RenderPassCreateInfo2> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkRenderPass *")] Ref<RenderPassHandle> pRenderPass
    )
    {
        fixed (RenderPassHandle* __dsl_pRenderPass = pRenderPass)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (RenderPassCreateInfo2* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateRenderPass2(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pRenderPass
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRenderPass2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] Ref<RenderPassCreateInfo2> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkRenderPass *")] Ref<RenderPassHandle> pRenderPass
    ) => ThisThread.CreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateRenderPass2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] RenderPassCreateInfo2* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkRenderPass *")] RenderPassHandle* pRenderPass
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                RenderPassCreateInfo2*,
                AllocationCallbacks*,
                RenderPassHandle*,
                Result>)(
                _slots[352] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[352] = nativeContext.LoadFunction("vkCreateRenderPass2KHR", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pRenderPass);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRenderPass2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] RenderPassCreateInfo2* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkRenderPass *")] RenderPassHandle* pRenderPass
    ) => ThisThread.CreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateRenderPass2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] Ref<RenderPassCreateInfo2> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkRenderPass *")] Ref<RenderPassHandle> pRenderPass
    )
    {
        fixed (RenderPassHandle* __dsl_pRenderPass = pRenderPass)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (RenderPassCreateInfo2* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateRenderPass2KHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pRenderPass
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRenderPass2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] Ref<RenderPassCreateInfo2> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkRenderPass *")] Ref<RenderPassHandle> pRenderPass
    ) => ThisThread.CreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSampler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateSampler(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerCreateInfo *")] SamplerCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSampler *")] SamplerHandle* pSampler
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                SamplerCreateInfo*,
                AllocationCallbacks*,
                SamplerHandle*,
                Result>)(
                _slots[353] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[353] = nativeContext.LoadFunction("vkCreateSampler", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pSampler);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSampler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSampler(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerCreateInfo *")] SamplerCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSampler *")] SamplerHandle* pSampler
    ) => ThisThread.CreateSampler(device, pCreateInfo, pAllocator, pSampler);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSampler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateSampler(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerCreateInfo *")] Ref<SamplerCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSampler *")] Ref<SamplerHandle> pSampler
    )
    {
        fixed (SamplerHandle* __dsl_pSampler = pSampler)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SamplerCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateSampler(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSampler
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSampler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSampler(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerCreateInfo *")] Ref<SamplerCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSampler *")] Ref<SamplerHandle> pSampler
    ) => ThisThread.CreateSampler(device, pCreateInfo, pAllocator, pSampler);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateSamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            SamplerYcbcrConversionCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            SamplerYcbcrConversionHandle* pYcbcrConversion
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                SamplerYcbcrConversionCreateInfo*,
                AllocationCallbacks*,
                SamplerYcbcrConversionHandle*,
                Result>)(
                _slots[354] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[354] = nativeContext.LoadFunction(
                        "vkCreateSamplerYcbcrConversion",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pYcbcrConversion);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            SamplerYcbcrConversionCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            SamplerYcbcrConversionHandle* pYcbcrConversion
    ) => ThisThread.CreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateSamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            Ref<SamplerYcbcrConversionCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            Ref<SamplerYcbcrConversionHandle> pYcbcrConversion
    )
    {
        fixed (SamplerYcbcrConversionHandle* __dsl_pYcbcrConversion = pYcbcrConversion)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SamplerYcbcrConversionCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateSamplerYcbcrConversion(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pYcbcrConversion
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            Ref<SamplerYcbcrConversionCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            Ref<SamplerYcbcrConversionHandle> pYcbcrConversion
    ) => ThisThread.CreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateSamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            SamplerYcbcrConversionCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            SamplerYcbcrConversionHandle* pYcbcrConversion
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                SamplerYcbcrConversionCreateInfo*,
                AllocationCallbacks*,
                SamplerYcbcrConversionHandle*,
                Result>)(
                _slots[355] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[355] = nativeContext.LoadFunction(
                        "vkCreateSamplerYcbcrConversionKHR",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pYcbcrConversion);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            SamplerYcbcrConversionCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            SamplerYcbcrConversionHandle* pYcbcrConversion
    ) =>
        ThisThread.CreateSamplerYcbcrConversionKHR(
            device,
            pCreateInfo,
            pAllocator,
            pYcbcrConversion
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateSamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            Ref<SamplerYcbcrConversionCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            Ref<SamplerYcbcrConversionHandle> pYcbcrConversion
    )
    {
        fixed (SamplerYcbcrConversionHandle* __dsl_pYcbcrConversion = pYcbcrConversion)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SamplerYcbcrConversionCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateSamplerYcbcrConversionKHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pYcbcrConversion
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            Ref<SamplerYcbcrConversionCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            Ref<SamplerYcbcrConversionHandle> pYcbcrConversion
    ) =>
        ThisThread.CreateSamplerYcbcrConversionKHR(
            device,
            pCreateInfo,
            pAllocator,
            pYcbcrConversion
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateSemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreCreateInfo *")] SemaphoreCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSemaphore *")] SemaphoreHandle* pSemaphore
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                SemaphoreCreateInfo*,
                AllocationCallbacks*,
                SemaphoreHandle*,
                Result>)(
                _slots[356] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[356] = nativeContext.LoadFunction("vkCreateSemaphore", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pSemaphore);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreCreateInfo *")] SemaphoreCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSemaphore *")] SemaphoreHandle* pSemaphore
    ) => ThisThread.CreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateSemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreCreateInfo *")] Ref<SemaphoreCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSemaphore *")] Ref<SemaphoreHandle> pSemaphore
    )
    {
        fixed (SemaphoreHandle* __dsl_pSemaphore = pSemaphore)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SemaphoreCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateSemaphore(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSemaphore
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreCreateInfo *")] Ref<SemaphoreCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSemaphore *")] Ref<SemaphoreHandle> pSemaphore
    ) => ThisThread.CreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateShaderModule")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateShaderModule(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")] ShaderModuleCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkShaderModule *")] ShaderModuleHandle* pShaderModule
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ShaderModuleCreateInfo*,
                AllocationCallbacks*,
                ShaderModuleHandle*,
                Result>)(
                _slots[357] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[357] = nativeContext.LoadFunction("vkCreateShaderModule", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pShaderModule);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateShaderModule")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateShaderModule(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")] ShaderModuleCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkShaderModule *")] ShaderModuleHandle* pShaderModule
    ) => ThisThread.CreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateShaderModule")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateShaderModule(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")]
            Ref<ShaderModuleCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkShaderModule *")] Ref<ShaderModuleHandle> pShaderModule
    )
    {
        fixed (ShaderModuleHandle* __dsl_pShaderModule = pShaderModule)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ShaderModuleCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateShaderModule(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pShaderModule
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateShaderModule")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateShaderModule(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")]
            Ref<ShaderModuleCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkShaderModule *")] Ref<ShaderModuleHandle> pShaderModule
    ) => ThisThread.CreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateShadersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateShadersEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkShaderCreateInfoEXT *")] ShaderCreateInfoEXT* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkShaderEXT *")] ShaderEXTHandle* pShaders
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                uint,
                ShaderCreateInfoEXT*,
                AllocationCallbacks*,
                ShaderEXTHandle*,
                Result>)(
                _slots[358] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[358] = nativeContext.LoadFunction("vkCreateShadersEXT", "vulkan")
            )
        )(device, createInfoCount, pCreateInfos, pAllocator, pShaders);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateShadersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateShadersEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkShaderCreateInfoEXT *")] ShaderCreateInfoEXT* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkShaderEXT *")] ShaderEXTHandle* pShaders
    ) => ThisThread.CreateShadersEXT(device, createInfoCount, pCreateInfos, pAllocator, pShaders);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateShadersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateShadersEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkShaderCreateInfoEXT *")] Ref<ShaderCreateInfoEXT> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkShaderEXT *")] Ref<ShaderEXTHandle> pShaders
    )
    {
        fixed (ShaderEXTHandle* __dsl_pShaders = pShaders)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ShaderCreateInfoEXT* __dsl_pCreateInfos = pCreateInfos)
        {
            return (Result)
                ((IVk)this).CreateShadersEXT(
                    device,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pShaders
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateShadersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateShadersEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkShaderCreateInfoEXT *")] Ref<ShaderCreateInfoEXT> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkShaderEXT *")] Ref<ShaderEXTHandle> pShaders
    ) => ThisThread.CreateShadersEXT(device, createInfoCount, pCreateInfos, pAllocator, pShaders);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_display_swapchain"],
        ImpliesSets = ["VK_KHR_display", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSharedSwapchainsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateSharedSwapchainsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")] SwapchainCreateInfoKHR* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] SwapchainKHRHandle* pSwapchains
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                uint,
                SwapchainCreateInfoKHR*,
                AllocationCallbacks*,
                SwapchainKHRHandle*,
                Result>)(
                _slots[359] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[359] = nativeContext.LoadFunction(
                        "vkCreateSharedSwapchainsKHR",
                        "vulkan"
                    )
            )
        )(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_display_swapchain"],
        ImpliesSets = ["VK_KHR_display", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSharedSwapchainsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSharedSwapchainsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")] SwapchainCreateInfoKHR* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] SwapchainKHRHandle* pSwapchains
    ) =>
        ThisThread.CreateSharedSwapchainsKHR(
            device,
            swapchainCount,
            pCreateInfos,
            pAllocator,
            pSwapchains
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_display_swapchain"],
        ImpliesSets = ["VK_KHR_display", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSharedSwapchainsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateSharedSwapchainsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
            Ref<SwapchainCreateInfoKHR> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] Ref<SwapchainKHRHandle> pSwapchains
    )
    {
        fixed (SwapchainKHRHandle* __dsl_pSwapchains = pSwapchains)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SwapchainCreateInfoKHR* __dsl_pCreateInfos = pCreateInfos)
        {
            return (Result)
                ((IVk)this).CreateSharedSwapchainsKHR(
                    device,
                    swapchainCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pSwapchains
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_display_swapchain"],
        ImpliesSets = ["VK_KHR_display", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSharedSwapchainsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSharedSwapchainsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
            Ref<SwapchainCreateInfoKHR> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] Ref<SwapchainKHRHandle> pSwapchains
    ) =>
        ThisThread.CreateSharedSwapchainsKHR(
            device,
            swapchainCount,
            pCreateInfos,
            pAllocator,
            pSwapchains
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSwapchainKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateSwapchainKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")] SwapchainCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] SwapchainKHRHandle* pSwapchain
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                SwapchainCreateInfoKHR*,
                AllocationCallbacks*,
                SwapchainKHRHandle*,
                Result>)(
                _slots[360] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[360] = nativeContext.LoadFunction("vkCreateSwapchainKHR", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pSwapchain);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSwapchainKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSwapchainKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")] SwapchainCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] SwapchainKHRHandle* pSwapchain
    ) => ThisThread.CreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSwapchainKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateSwapchainKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
            Ref<SwapchainCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] Ref<SwapchainKHRHandle> pSwapchain
    )
    {
        fixed (SwapchainKHRHandle* __dsl_pSwapchain = pSwapchain)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SwapchainCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateSwapchainKHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSwapchain
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSwapchainKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSwapchainKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
            Ref<SwapchainCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] Ref<SwapchainKHRHandle> pSwapchain
    ) => ThisThread.CreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkCreateTensorARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateTensorARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorCreateInfoARM *")] TensorCreateInfoARM* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkTensorARM *")] TensorARMHandle* pTensor
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                TensorCreateInfoARM*,
                AllocationCallbacks*,
                TensorARMHandle*,
                Result>)(
                _slots[361] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[361] = nativeContext.LoadFunction("vkCreateTensorARM", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pTensor);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkCreateTensorARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateTensorARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorCreateInfoARM *")] TensorCreateInfoARM* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkTensorARM *")] TensorARMHandle* pTensor
    ) => ThisThread.CreateTensorARM(device, pCreateInfo, pAllocator, pTensor);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateTensorARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateTensorARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorCreateInfoARM *")] Ref<TensorCreateInfoARM> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkTensorARM *")] Ref<TensorARMHandle> pTensor
    )
    {
        fixed (TensorARMHandle* __dsl_pTensor = pTensor)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (TensorCreateInfoARM* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateTensorARM(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pTensor
                );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateTensorARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateTensorARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorCreateInfoARM *")] Ref<TensorCreateInfoARM> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkTensorARM *")] Ref<TensorARMHandle> pTensor
    ) => ThisThread.CreateTensorARM(device, pCreateInfo, pAllocator, pTensor);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkCreateTensorViewARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateTensorViewARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorViewCreateInfoARM *")] TensorViewCreateInfoARM* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkTensorViewARM *")] TensorViewARMHandle* pView
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                TensorViewCreateInfoARM*,
                AllocationCallbacks*,
                TensorViewARMHandle*,
                Result>)(
                _slots[362] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[362] = nativeContext.LoadFunction("vkCreateTensorViewARM", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pView);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkCreateTensorViewARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateTensorViewARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorViewCreateInfoARM *")] TensorViewCreateInfoARM* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkTensorViewARM *")] TensorViewARMHandle* pView
    ) => ThisThread.CreateTensorViewARM(device, pCreateInfo, pAllocator, pView);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateTensorViewARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateTensorViewARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorViewCreateInfoARM *")]
            Ref<TensorViewCreateInfoARM> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkTensorViewARM *")] Ref<TensorViewARMHandle> pView
    )
    {
        fixed (TensorViewARMHandle* __dsl_pView = pView)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (TensorViewCreateInfoARM* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateTensorViewARM(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pView
                );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateTensorViewARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateTensorViewARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorViewCreateInfoARM *")]
            Ref<TensorViewCreateInfoARM> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkTensorViewARM *")] Ref<TensorViewARMHandle> pView
    ) => ThisThread.CreateTensorViewARM(device, pCreateInfo, pAllocator, pView);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateValidationCacheEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateValidationCacheEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkValidationCacheCreateInfoEXT *")]
            ValidationCacheCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkValidationCacheEXT *")] ValidationCacheEXTHandle* pValidationCache
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ValidationCacheCreateInfoEXT*,
                AllocationCallbacks*,
                ValidationCacheEXTHandle*,
                Result>)(
                _slots[363] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[363] = nativeContext.LoadFunction(
                        "vkCreateValidationCacheEXT",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pValidationCache);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateValidationCacheEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateValidationCacheEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkValidationCacheCreateInfoEXT *")]
            ValidationCacheCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkValidationCacheEXT *")] ValidationCacheEXTHandle* pValidationCache
    ) => ThisThread.CreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateValidationCacheEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateValidationCacheEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkValidationCacheCreateInfoEXT *")]
            Ref<ValidationCacheCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkValidationCacheEXT *")] Ref<ValidationCacheEXTHandle> pValidationCache
    )
    {
        fixed (ValidationCacheEXTHandle* __dsl_pValidationCache = pValidationCache)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ValidationCacheCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateValidationCacheEXT(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pValidationCache
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateValidationCacheEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateValidationCacheEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkValidationCacheCreateInfoEXT *")]
            Ref<ValidationCacheCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkValidationCacheEXT *")] Ref<ValidationCacheEXTHandle> pValidationCache
    ) => ThisThread.CreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateVideoSessionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkVideoSessionCreateInfoKHR *")]
            VideoSessionCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkVideoSessionKHR *")] VideoSessionKHRHandle* pVideoSession
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                VideoSessionCreateInfoKHR*,
                AllocationCallbacks*,
                VideoSessionKHRHandle*,
                Result>)(
                _slots[364] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[364] = nativeContext.LoadFunction("vkCreateVideoSessionKHR", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pVideoSession);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateVideoSessionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkVideoSessionCreateInfoKHR *")]
            VideoSessionCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkVideoSessionKHR *")] VideoSessionKHRHandle* pVideoSession
    ) => ThisThread.CreateVideoSessionKHR(device, pCreateInfo, pAllocator, pVideoSession);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateVideoSessionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkVideoSessionCreateInfoKHR *")]
            Ref<VideoSessionCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkVideoSessionKHR *")] Ref<VideoSessionKHRHandle> pVideoSession
    )
    {
        fixed (VideoSessionKHRHandle* __dsl_pVideoSession = pVideoSession)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (VideoSessionCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateVideoSessionKHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pVideoSession
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateVideoSessionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkVideoSessionCreateInfoKHR *")]
            Ref<VideoSessionCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkVideoSessionKHR *")] Ref<VideoSessionKHRHandle> pVideoSession
    ) => ThisThread.CreateVideoSessionKHR(device, pCreateInfo, pAllocator, pVideoSession);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkVideoSessionParametersCreateInfoKHR *")]
            VideoSessionParametersCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkVideoSessionParametersKHR *")]
            VideoSessionParametersKHRHandle* pVideoSessionParameters
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                VideoSessionParametersCreateInfoKHR*,
                AllocationCallbacks*,
                VideoSessionParametersKHRHandle*,
                Result>)(
                _slots[365] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[365] = nativeContext.LoadFunction(
                        "vkCreateVideoSessionParametersKHR",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pVideoSessionParameters);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkVideoSessionParametersCreateInfoKHR *")]
            VideoSessionParametersCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkVideoSessionParametersKHR *")]
            VideoSessionParametersKHRHandle* pVideoSessionParameters
    ) =>
        ThisThread.CreateVideoSessionParametersKHR(
            device,
            pCreateInfo,
            pAllocator,
            pVideoSessionParameters
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.CreateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkVideoSessionParametersCreateInfoKHR *")]
            Ref<VideoSessionParametersCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkVideoSessionParametersKHR *")]
            Ref<VideoSessionParametersKHRHandle> pVideoSessionParameters
    )
    {
        fixed (
            VideoSessionParametersKHRHandle* __dsl_pVideoSessionParameters = pVideoSessionParameters
        )
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (VideoSessionParametersCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVk)this).CreateVideoSessionParametersKHR(
                    device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pVideoSessionParameters
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkVideoSessionParametersCreateInfoKHR *")]
            Ref<VideoSessionParametersCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkVideoSessionParametersKHR *")]
            Ref<VideoSessionParametersKHRHandle> pVideoSessionParameters
    ) =>
        ThisThread.CreateVideoSessionParametersKHR(
            device,
            pCreateInfo,
            pAllocator,
            pVideoSessionParameters
        );

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectNameEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.DebugMarkerSetObjectNameEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugMarkerObjectNameInfoEXT *")]
            DebugMarkerObjectNameInfoEXT* pNameInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DebugMarkerObjectNameInfoEXT*, Result>)(
                _slots[366] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[366] = nativeContext.LoadFunction(
                        "vkDebugMarkerSetObjectNameEXT",
                        "vulkan"
                    )
            )
        )(device, pNameInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectNameEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DebugMarkerSetObjectNameEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugMarkerObjectNameInfoEXT *")]
            DebugMarkerObjectNameInfoEXT* pNameInfo
    ) => ThisThread.DebugMarkerSetObjectNameEXT(device, pNameInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectNameEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.DebugMarkerSetObjectNameEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugMarkerObjectNameInfoEXT *")]
            Ref<DebugMarkerObjectNameInfoEXT> pNameInfo
    )
    {
        fixed (DebugMarkerObjectNameInfoEXT* __dsl_pNameInfo = pNameInfo)
        {
            return (Result)((IVk)this).DebugMarkerSetObjectNameEXT(device, __dsl_pNameInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectNameEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DebugMarkerSetObjectNameEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugMarkerObjectNameInfoEXT *")]
            Ref<DebugMarkerObjectNameInfoEXT> pNameInfo
    ) => ThisThread.DebugMarkerSetObjectNameEXT(device, pNameInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectTagEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.DebugMarkerSetObjectTagEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugMarkerObjectTagInfoEXT *")]
            DebugMarkerObjectTagInfoEXT* pTagInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DebugMarkerObjectTagInfoEXT*, Result>)(
                _slots[367] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[367] = nativeContext.LoadFunction(
                        "vkDebugMarkerSetObjectTagEXT",
                        "vulkan"
                    )
            )
        )(device, pTagInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectTagEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DebugMarkerSetObjectTagEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugMarkerObjectTagInfoEXT *")]
            DebugMarkerObjectTagInfoEXT* pTagInfo
    ) => ThisThread.DebugMarkerSetObjectTagEXT(device, pTagInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectTagEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.DebugMarkerSetObjectTagEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugMarkerObjectTagInfoEXT *")]
            Ref<DebugMarkerObjectTagInfoEXT> pTagInfo
    )
    {
        fixed (DebugMarkerObjectTagInfoEXT* __dsl_pTagInfo = pTagInfo)
        {
            return (Result)((IVk)this).DebugMarkerSetObjectTagEXT(device, __dsl_pTagInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectTagEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DebugMarkerSetObjectTagEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugMarkerObjectTagInfoEXT *")]
            Ref<DebugMarkerObjectTagInfoEXT> pTagInfo
    ) => ThisThread.DebugMarkerSetObjectTagEXT(device, pTagInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkDebugReportMessageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DebugReportMessageEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkDebugReportFlagsEXT")] DebugReportFlagsEXT flags,
        DebugReportObjectTypeEXT objectType,
        [NativeTypeName("uint64_t")] ulong @object,
        [NativeTypeName("size_t")] nuint location,
        [NativeTypeName("int32_t")] int messageCode,
        [NativeTypeName("const char *")] sbyte* pLayerPrefix,
        [NativeTypeName("const char *")] sbyte* pMessage
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle,
                DebugReportFlagsEXT,
                DebugReportObjectTypeEXT,
                ulong,
                nuint,
                int,
                sbyte*,
                sbyte*,
                void>)(
                _slots[368] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[368] = nativeContext.LoadFunction("vkDebugReportMessageEXT", "vulkan")
            )
        )(instance, flags, objectType, @object, location, messageCode, pLayerPrefix, pMessage);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkDebugReportMessageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DebugReportMessageEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkDebugReportFlagsEXT")] DebugReportFlagsEXT flags,
        DebugReportObjectTypeEXT objectType,
        [NativeTypeName("uint64_t")] ulong @object,
        [NativeTypeName("size_t")] nuint location,
        [NativeTypeName("int32_t")] int messageCode,
        [NativeTypeName("const char *")] sbyte* pLayerPrefix,
        [NativeTypeName("const char *")] sbyte* pMessage
    ) =>
        ThisThread.DebugReportMessageEXT(
            instance,
            flags,
            objectType,
            @object,
            location,
            messageCode,
            pLayerPrefix,
            pMessage
        );

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDebugReportMessageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DebugReportMessageEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkDebugReportFlagsEXT")] DebugReportFlagsEXT flags,
        DebugReportObjectTypeEXT objectType,
        [NativeTypeName("uint64_t")] ulong @object,
        [NativeTypeName("size_t")] nuint location,
        [NativeTypeName("int32_t")] int messageCode,
        [NativeTypeName("const char *")] Ref<sbyte> pLayerPrefix,
        [NativeTypeName("const char *")] Ref<sbyte> pMessage
    )
    {
        fixed (sbyte* __dsl_pMessage = pMessage)
        fixed (sbyte* __dsl_pLayerPrefix = pLayerPrefix)
        {
            ((IVk)this).DebugReportMessageEXT(
                instance,
                flags,
                objectType,
                @object,
                location,
                messageCode,
                __dsl_pLayerPrefix,
                __dsl_pMessage
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDebugReportMessageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DebugReportMessageEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkDebugReportFlagsEXT")] DebugReportFlagsEXT flags,
        DebugReportObjectTypeEXT objectType,
        [NativeTypeName("uint64_t")] ulong @object,
        [NativeTypeName("size_t")] nuint location,
        [NativeTypeName("int32_t")] int messageCode,
        [NativeTypeName("const char *")] Ref<sbyte> pLayerPrefix,
        [NativeTypeName("const char *")] Ref<sbyte> pMessage
    ) =>
        ThisThread.DebugReportMessageEXT(
            instance,
            flags,
            objectType,
            @object,
            location,
            messageCode,
            pLayerPrefix,
            pMessage
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkDeferredOperationJoinKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.DeferredOperationJoinKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DeferredOperationKHRHandle, Result>)(
                _slots[369] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[369] = nativeContext.LoadFunction(
                        "vkDeferredOperationJoinKHR",
                        "vulkan"
                    )
            )
        )(device, operation);

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkDeferredOperationJoinKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DeferredOperationJoinKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation
    ) => ThisThread.DeferredOperationJoinKHR(device, operation);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkAccelerationStructureKHR")]
            AccelerationStructureKHRHandle accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                AccelerationStructureKHRHandle,
                AllocationCallbacks*,
                void>)(
                _slots[370] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[370] = nativeContext.LoadFunction(
                        "vkDestroyAccelerationStructureKHR",
                        "vulkan"
                    )
            )
        )(device, accelerationStructure, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkAccelerationStructureKHR")]
            AccelerationStructureKHRHandle accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkAccelerationStructureKHR")]
            AccelerationStructureKHRHandle accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyAccelerationStructureKHR(
                device,
                accelerationStructure,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkAccelerationStructureKHR")]
            AccelerationStructureKHRHandle accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyAccelerationStructureNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkAccelerationStructureNV")]
            AccelerationStructureNVHandle accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                AccelerationStructureNVHandle,
                AllocationCallbacks*,
                void>)(
                _slots[371] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[371] = nativeContext.LoadFunction(
                        "vkDestroyAccelerationStructureNV",
                        "vulkan"
                    )
            )
        )(device, accelerationStructure, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyAccelerationStructureNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkAccelerationStructureNV")]
            AccelerationStructureNVHandle accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyAccelerationStructureNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkAccelerationStructureNV")]
            AccelerationStructureNVHandle accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyAccelerationStructureNV(
                device,
                accelerationStructure,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyAccelerationStructureNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkAccelerationStructureNV")]
            AccelerationStructureNVHandle accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyBuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, BufferHandle, AllocationCallbacks*, void>)(
                _slots[372] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[372] = nativeContext.LoadFunction("vkDestroyBuffer", "vulkan")
            )
        )(device, buffer, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyBuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyBuffer(device, buffer, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyBuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyBuffer(device, buffer, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyBuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyBuffer(device, buffer, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyBufferView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyBufferView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkBufferView")] BufferViewHandle bufferView,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, BufferViewHandle, AllocationCallbacks*, void>)(
                _slots[373] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[373] = nativeContext.LoadFunction("vkDestroyBufferView", "vulkan")
            )
        )(device, bufferView, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyBufferView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyBufferView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkBufferView")] BufferViewHandle bufferView,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyBufferView(device, bufferView, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyBufferView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyBufferView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkBufferView")] BufferViewHandle bufferView,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyBufferView(device, bufferView, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyBufferView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyBufferView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkBufferView")] BufferViewHandle bufferView,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyBufferView(device, bufferView, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, CommandPoolHandle, AllocationCallbacks*, void>)(
                _slots[374] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[374] = nativeContext.LoadFunction("vkDestroyCommandPool", "vulkan")
            )
        )(device, commandPool, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyCommandPool(device, commandPool, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyCommandPool(device, commandPool, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyCommandPool(device, commandPool, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCuFunctionNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyCuFunctionNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCuFunctionNVX")] CuFunctionNVXHandle function,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, CuFunctionNVXHandle, AllocationCallbacks*, void>)(
                _slots[375] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[375] = nativeContext.LoadFunction("vkDestroyCuFunctionNVX", "vulkan")
            )
        )(device, function, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCuFunctionNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCuFunctionNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCuFunctionNVX")] CuFunctionNVXHandle function,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyCuFunctionNVX(device, function, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCuFunctionNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyCuFunctionNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCuFunctionNVX")] CuFunctionNVXHandle function,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyCuFunctionNVX(device, function, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCuFunctionNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCuFunctionNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCuFunctionNVX")] CuFunctionNVXHandle function,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyCuFunctionNVX(device, function, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCuModuleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyCuModuleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCuModuleNVX")] CuModuleNVXHandle module,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, CuModuleNVXHandle, AllocationCallbacks*, void>)(
                _slots[376] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[376] = nativeContext.LoadFunction("vkDestroyCuModuleNVX", "vulkan")
            )
        )(device, module, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCuModuleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCuModuleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCuModuleNVX")] CuModuleNVXHandle module,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyCuModuleNVX(device, module, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCuModuleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyCuModuleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCuModuleNVX")] CuModuleNVXHandle module,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyCuModuleNVX(device, module, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCuModuleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCuModuleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCuModuleNVX")] CuModuleNVXHandle module,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyCuModuleNVX(device, module, pAllocator);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDataGraphPipelineSessionARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDataGraphPipelineSessionARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDataGraphPipelineSessionARM")] DataGraphPipelineSessionARMHandle session,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DataGraphPipelineSessionARMHandle,
                AllocationCallbacks*,
                void>)(
                _slots[377] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[377] = nativeContext.LoadFunction(
                        "vkDestroyDataGraphPipelineSessionARM",
                        "vulkan"
                    )
            )
        )(device, session, pAllocator);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDataGraphPipelineSessionARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDataGraphPipelineSessionARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDataGraphPipelineSessionARM")] DataGraphPipelineSessionARMHandle session,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyDataGraphPipelineSessionARM(device, session, pAllocator);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDataGraphPipelineSessionARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDataGraphPipelineSessionARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDataGraphPipelineSessionARM")] DataGraphPipelineSessionARMHandle session,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyDataGraphPipelineSessionARM(device, session, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDataGraphPipelineSessionARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDataGraphPipelineSessionARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDataGraphPipelineSessionARM")] DataGraphPipelineSessionARMHandle session,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyDataGraphPipelineSessionARM(device, session, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugReportCallbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkDebugReportCallbackEXT")] DebugReportCallbackEXTHandle callback,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle,
                DebugReportCallbackEXTHandle,
                AllocationCallbacks*,
                void>)(
                _slots[378] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[378] = nativeContext.LoadFunction(
                        "vkDestroyDebugReportCallbackEXT",
                        "vulkan"
                    )
            )
        )(instance, callback, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugReportCallbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkDebugReportCallbackEXT")] DebugReportCallbackEXTHandle callback,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyDebugReportCallbackEXT(instance, callback, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugReportCallbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkDebugReportCallbackEXT")] DebugReportCallbackEXTHandle callback,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyDebugReportCallbackEXT(instance, callback, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugReportCallbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkDebugReportCallbackEXT")] DebugReportCallbackEXTHandle callback,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyDebugReportCallbackEXT(instance, callback, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugUtilsMessengerEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkDebugUtilsMessengerEXT")] DebugUtilsMessengerEXTHandle messenger,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle,
                DebugUtilsMessengerEXTHandle,
                AllocationCallbacks*,
                void>)(
                _slots[379] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[379] = nativeContext.LoadFunction(
                        "vkDestroyDebugUtilsMessengerEXT",
                        "vulkan"
                    )
            )
        )(instance, messenger, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugUtilsMessengerEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkDebugUtilsMessengerEXT")] DebugUtilsMessengerEXTHandle messenger,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugUtilsMessengerEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkDebugUtilsMessengerEXT")] DebugUtilsMessengerEXTHandle messenger,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyDebugUtilsMessengerEXT(instance, messenger, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugUtilsMessengerEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkDebugUtilsMessengerEXT")] DebugUtilsMessengerEXTHandle messenger,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDeferredOperationKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDeferredOperationKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeferredOperationKHRHandle,
                AllocationCallbacks*,
                void>)(
                _slots[380] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[380] = nativeContext.LoadFunction(
                        "vkDestroyDeferredOperationKHR",
                        "vulkan"
                    )
            )
        )(device, operation, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDeferredOperationKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDeferredOperationKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyDeferredOperationKHR(device, operation, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDeferredOperationKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDeferredOperationKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyDeferredOperationKHR(device, operation, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDeferredOperationKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDeferredOperationKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyDeferredOperationKHR(device, operation, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DescriptorPoolHandle, AllocationCallbacks*, void>)(
                _slots[381] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[381] = nativeContext.LoadFunction("vkDestroyDescriptorPool", "vulkan")
            )
        )(device, descriptorPool, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyDescriptorPool(device, descriptorPool, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyDescriptorPool(device, descriptorPool, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyDescriptorPool(device, descriptorPool, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorSetLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDescriptorSetLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle descriptorSetLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DescriptorSetLayoutHandle,
                AllocationCallbacks*,
                void>)(
                _slots[382] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[382] = nativeContext.LoadFunction(
                        "vkDestroyDescriptorSetLayout",
                        "vulkan"
                    )
            )
        )(device, descriptorSetLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorSetLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorSetLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle descriptorSetLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorSetLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDescriptorSetLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle descriptorSetLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyDescriptorSetLayout(device, descriptorSetLayout, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorSetLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorSetLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle descriptorSetLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DescriptorUpdateTemplateHandle,
                AllocationCallbacks*,
                void>)(
                _slots[383] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[383] = nativeContext.LoadFunction(
                        "vkDestroyDescriptorUpdateTemplate",
                        "vulkan"
                    )
            )
        )(device, descriptorUpdateTemplate, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyDescriptorUpdateTemplate(
                device,
                descriptorUpdateTemplate,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DescriptorUpdateTemplateHandle,
                AllocationCallbacks*,
                void>)(
                _slots[384] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[384] = nativeContext.LoadFunction(
                        "vkDestroyDescriptorUpdateTemplateKHR",
                        "vulkan"
                    )
            )
        )(device, descriptorUpdateTemplate, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        ThisThread.DestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyDescriptorUpdateTemplateKHR(
                device,
                descriptorUpdateTemplate,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) =>
        ThisThread.DestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDevice(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, AllocationCallbacks*, void>)(
                _slots[385] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[385] = nativeContext.LoadFunction("vkDestroyDevice", "vulkan")
            )
        )(device, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDevice(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyDevice(device, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyDevice(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyDevice(device, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDevice(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyDevice(device, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyEvent(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, EventHandle, AllocationCallbacks*, void>)(
                _slots[386] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[386] = nativeContext.LoadFunction("vkDestroyEvent", "vulkan")
            )
        )(device, @event, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyEvent(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyEvent(device, @event, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyEvent(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyEvent(device, @event, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyEvent(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkEvent")] EventHandle @event,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyEvent(device, @event, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyExternalComputeQueueNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle externalQueue,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ExternalComputeQueueNVHandle,
                AllocationCallbacks*,
                void>)(
                _slots[387] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[387] = nativeContext.LoadFunction(
                        "vkDestroyExternalComputeQueueNV",
                        "vulkan"
                    )
            )
        )(device, externalQueue, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyExternalComputeQueueNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle externalQueue,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyExternalComputeQueueNV(device, externalQueue, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyExternalComputeQueueNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle externalQueue,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyExternalComputeQueueNV(device, externalQueue, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyExternalComputeQueueNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle externalQueue,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyExternalComputeQueueNV(device, externalQueue, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyFence")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyFence(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkFence")] FenceHandle fence,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, FenceHandle, AllocationCallbacks*, void>)(
                _slots[388] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[388] = nativeContext.LoadFunction("vkDestroyFence", "vulkan")
            )
        )(device, fence, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyFence")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyFence(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkFence")] FenceHandle fence,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyFence(device, fence, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyFence")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyFence(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkFence")] FenceHandle fence,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyFence(device, fence, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyFence")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyFence(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkFence")] FenceHandle fence,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyFence(device, fence, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyFramebuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyFramebuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkFramebuffer")] FramebufferHandle framebuffer,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, FramebufferHandle, AllocationCallbacks*, void>)(
                _slots[389] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[389] = nativeContext.LoadFunction("vkDestroyFramebuffer", "vulkan")
            )
        )(device, framebuffer, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyFramebuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyFramebuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkFramebuffer")] FramebufferHandle framebuffer,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyFramebuffer(device, framebuffer, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyFramebuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyFramebuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkFramebuffer")] FramebufferHandle framebuffer,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyFramebuffer(device, framebuffer, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyFramebuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyFramebuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkFramebuffer")] FramebufferHandle framebuffer,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyFramebuffer(device, framebuffer, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ImageHandle, AllocationCallbacks*, void>)(
                _slots[390] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[390] = nativeContext.LoadFunction("vkDestroyImage", "vulkan")
            )
        )(device, image, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyImage(device, image, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyImage(device, image, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyImage(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyImage(device, image, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyImageView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyImageView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImageView")] ImageViewHandle imageView,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ImageViewHandle, AllocationCallbacks*, void>)(
                _slots[391] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[391] = nativeContext.LoadFunction("vkDestroyImageView", "vulkan")
            )
        )(device, imageView, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyImageView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyImageView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImageView")] ImageViewHandle imageView,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyImageView(device, imageView, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyImageView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyImageView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImageView")] ImageViewHandle imageView,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyImageView(device, imageView, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyImageView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyImageView(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImageView")] ImageViewHandle imageView,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyImageView(device, imageView, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectCommandsLayoutEXT")]
            IndirectCommandsLayoutEXTHandle indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                IndirectCommandsLayoutEXTHandle,
                AllocationCallbacks*,
                void>)(
                _slots[392] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[392] = nativeContext.LoadFunction(
                        "vkDestroyIndirectCommandsLayoutEXT",
                        "vulkan"
                    )
            )
        )(device, indirectCommandsLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectCommandsLayoutEXT")]
            IndirectCommandsLayoutEXTHandle indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyIndirectCommandsLayoutEXT(device, indirectCommandsLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectCommandsLayoutEXT")]
            IndirectCommandsLayoutEXTHandle indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyIndirectCommandsLayoutEXT(
                device,
                indirectCommandsLayout,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectCommandsLayoutEXT")]
            IndirectCommandsLayoutEXTHandle indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyIndirectCommandsLayoutEXT(device, indirectCommandsLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectCommandsLayoutNV")]
            IndirectCommandsLayoutNVHandle indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                IndirectCommandsLayoutNVHandle,
                AllocationCallbacks*,
                void>)(
                _slots[393] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[393] = nativeContext.LoadFunction(
                        "vkDestroyIndirectCommandsLayoutNV",
                        "vulkan"
                    )
            )
        )(device, indirectCommandsLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectCommandsLayoutNV")]
            IndirectCommandsLayoutNVHandle indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectCommandsLayoutNV")]
            IndirectCommandsLayoutNVHandle indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyIndirectCommandsLayoutNV(
                device,
                indirectCommandsLayout,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectCommandsLayoutNV")]
            IndirectCommandsLayoutNVHandle indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectExecutionSetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                IndirectExecutionSetEXTHandle,
                AllocationCallbacks*,
                void>)(
                _slots[394] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[394] = nativeContext.LoadFunction(
                        "vkDestroyIndirectExecutionSetEXT",
                        "vulkan"
                    )
            )
        )(device, indirectExecutionSet, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectExecutionSetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyIndirectExecutionSetEXT(device, indirectExecutionSet, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectExecutionSetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyIndirectExecutionSetEXT(
                device,
                indirectExecutionSet,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectExecutionSetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyIndirectExecutionSetEXT(device, indirectExecutionSet, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyInstance")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyInstance(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<InstanceHandle, AllocationCallbacks*, void>)(
                _slots[395] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[395] = nativeContext.LoadFunction("vkDestroyInstance", "vulkan")
            )
        )(instance, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyInstance")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyInstance(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyInstance(instance, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyInstance")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyInstance(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyInstance(instance, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyInstance")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyInstance(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyInstance(instance, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkMicromapEXT")] MicromapEXTHandle micromap,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, MicromapEXTHandle, AllocationCallbacks*, void>)(
                _slots[396] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[396] = nativeContext.LoadFunction("vkDestroyMicromapEXT", "vulkan")
            )
        )(device, micromap, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkMicromapEXT")] MicromapEXTHandle micromap,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyMicromapEXT(device, micromap, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkMicromapEXT")] MicromapEXTHandle micromap,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyMicromapEXT(device, micromap, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkMicromapEXT")] MicromapEXTHandle micromap,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyMicromapEXT(device, micromap, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyOpticalFlowSessionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                OpticalFlowSessionNVHandle,
                AllocationCallbacks*,
                void>)(
                _slots[397] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[397] = nativeContext.LoadFunction(
                        "vkDestroyOpticalFlowSessionNV",
                        "vulkan"
                    )
            )
        )(device, session, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyOpticalFlowSessionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyOpticalFlowSessionNV(device, session, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyOpticalFlowSessionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyOpticalFlowSessionNV(device, session, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyOpticalFlowSessionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle session,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyOpticalFlowSessionNV(device, session, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipeline")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyPipeline(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, PipelineHandle, AllocationCallbacks*, void>)(
                _slots[398] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[398] = nativeContext.LoadFunction("vkDestroyPipeline", "vulkan")
            )
        )(device, pipeline, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipeline")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipeline(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyPipeline(device, pipeline, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipeline")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyPipeline(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyPipeline(device, pipeline, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipeline")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipeline(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyPipeline(device, pipeline, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineBinaryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyPipelineBinaryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineBinaryKHR")] PipelineBinaryKHRHandle pipelineBinary,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PipelineBinaryKHRHandle,
                AllocationCallbacks*,
                void>)(
                _slots[399] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[399] = nativeContext.LoadFunction(
                        "vkDestroyPipelineBinaryKHR",
                        "vulkan"
                    )
            )
        )(device, pipelineBinary, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineBinaryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipelineBinaryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineBinaryKHR")] PipelineBinaryKHRHandle pipelineBinary,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyPipelineBinaryKHR(device, pipelineBinary, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineBinaryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyPipelineBinaryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineBinaryKHR")] PipelineBinaryKHRHandle pipelineBinary,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyPipelineBinaryKHR(device, pipelineBinary, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineBinaryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipelineBinaryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineBinaryKHR")] PipelineBinaryKHRHandle pipelineBinary,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyPipelineBinaryKHR(device, pipelineBinary, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineCache")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyPipelineCache(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, PipelineCacheHandle, AllocationCallbacks*, void>)(
                _slots[400] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[400] = nativeContext.LoadFunction("vkDestroyPipelineCache", "vulkan")
            )
        )(device, pipelineCache, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineCache")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipelineCache(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyPipelineCache(device, pipelineCache, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineCache")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyPipelineCache(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyPipelineCache(device, pipelineCache, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineCache")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipelineCache(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyPipelineCache(device, pipelineCache, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyPipelineLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle pipelineLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, PipelineLayoutHandle, AllocationCallbacks*, void>)(
                _slots[401] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[401] = nativeContext.LoadFunction("vkDestroyPipelineLayout", "vulkan")
            )
        )(device, pipelineLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipelineLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle pipelineLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyPipelineLayout(device, pipelineLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyPipelineLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle pipelineLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyPipelineLayout(device, pipelineLayout, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipelineLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle pipelineLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyPipelineLayout(device, pipelineLayout, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlot")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyPrivateDataSlot(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, PrivateDataSlotHandle, AllocationCallbacks*, void>)(
                _slots[402] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[402] = nativeContext.LoadFunction("vkDestroyPrivateDataSlot", "vulkan")
            )
        )(device, privateDataSlot, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlot")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPrivateDataSlot(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyPrivateDataSlot(device, privateDataSlot, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlot")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyPrivateDataSlot(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyPrivateDataSlot(device, privateDataSlot, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlot")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPrivateDataSlot(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyPrivateDataSlot(device, privateDataSlot, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlotEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyPrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, PrivateDataSlotHandle, AllocationCallbacks*, void>)(
                _slots[403] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[403] = nativeContext.LoadFunction(
                        "vkDestroyPrivateDataSlotEXT",
                        "vulkan"
                    )
            )
        )(device, privateDataSlot, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlotEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlotEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyPrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyPrivateDataSlotEXT(device, privateDataSlot, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlotEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, QueryPoolHandle, AllocationCallbacks*, void>)(
                _slots[404] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[404] = nativeContext.LoadFunction("vkDestroyQueryPool", "vulkan")
            )
        )(device, queryPool, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyQueryPool(device, queryPool, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyQueryPool(device, queryPool, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyQueryPool(device, queryPool, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyRenderPass(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle renderPass,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, RenderPassHandle, AllocationCallbacks*, void>)(
                _slots[405] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[405] = nativeContext.LoadFunction("vkDestroyRenderPass", "vulkan")
            )
        )(device, renderPass, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyRenderPass(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle renderPass,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyRenderPass(device, renderPass, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyRenderPass(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle renderPass,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyRenderPass(device, renderPass, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyRenderPass(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle renderPass,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyRenderPass(device, renderPass, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySampler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroySampler(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSampler")] SamplerHandle sampler,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SamplerHandle, AllocationCallbacks*, void>)(
                _slots[406] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[406] = nativeContext.LoadFunction("vkDestroySampler", "vulkan")
            )
        )(device, sampler, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySampler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySampler(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSampler")] SamplerHandle sampler,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroySampler(device, sampler, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySampler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroySampler(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSampler")] SamplerHandle sampler,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroySampler(device, sampler, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySampler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySampler(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSampler")] SamplerHandle sampler,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroySampler(device, sampler, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroySamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSamplerYcbcrConversion")] SamplerYcbcrConversionHandle ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                SamplerYcbcrConversionHandle,
                AllocationCallbacks*,
                void>)(
                _slots[407] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[407] = nativeContext.LoadFunction(
                        "vkDestroySamplerYcbcrConversion",
                        "vulkan"
                    )
            )
        )(device, ycbcrConversion, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSamplerYcbcrConversion")] SamplerYcbcrConversionHandle ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroySamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSamplerYcbcrConversion")] SamplerYcbcrConversionHandle ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroySamplerYcbcrConversion(device, ycbcrConversion, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSamplerYcbcrConversion")] SamplerYcbcrConversionHandle ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroySamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSamplerYcbcrConversion")] SamplerYcbcrConversionHandle ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                SamplerYcbcrConversionHandle,
                AllocationCallbacks*,
                void>)(
                _slots[408] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[408] = nativeContext.LoadFunction(
                        "vkDestroySamplerYcbcrConversionKHR",
                        "vulkan"
                    )
            )
        )(device, ycbcrConversion, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSamplerYcbcrConversion")] SamplerYcbcrConversionHandle ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroySamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSamplerYcbcrConversion")] SamplerYcbcrConversionHandle ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroySamplerYcbcrConversionKHR(device, ycbcrConversion, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSamplerYcbcrConversion")] SamplerYcbcrConversionHandle ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroySemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SemaphoreHandle, AllocationCallbacks*, void>)(
                _slots[409] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[409] = nativeContext.LoadFunction("vkDestroySemaphore", "vulkan")
            )
        )(device, semaphore, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroySemaphore(device, semaphore, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroySemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroySemaphore(device, semaphore, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroySemaphore(device, semaphore, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyShaderEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderEXT")] ShaderEXTHandle shader,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ShaderEXTHandle, AllocationCallbacks*, void>)(
                _slots[410] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[410] = nativeContext.LoadFunction("vkDestroyShaderEXT", "vulkan")
            )
        )(device, shader, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyShaderEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderEXT")] ShaderEXTHandle shader,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyShaderEXT(device, shader, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyShaderEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderEXT")] ShaderEXTHandle shader,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyShaderEXT(device, shader, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyShaderEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderEXT")] ShaderEXTHandle shader,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyShaderEXT(device, shader, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderModule")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyShaderModule(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderModule")] ShaderModuleHandle shaderModule,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ShaderModuleHandle, AllocationCallbacks*, void>)(
                _slots[411] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[411] = nativeContext.LoadFunction("vkDestroyShaderModule", "vulkan")
            )
        )(device, shaderModule, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderModule")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyShaderModule(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderModule")] ShaderModuleHandle shaderModule,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyShaderModule(device, shaderModule, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderModule")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyShaderModule(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderModule")] ShaderModuleHandle shaderModule,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyShaderModule(device, shaderModule, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderModule")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyShaderModule(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderModule")] ShaderModuleHandle shaderModule,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyShaderModule(device, shaderModule, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySurfaceKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroySurfaceKHR(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<InstanceHandle, SurfaceKHRHandle, AllocationCallbacks*, void>)(
                _slots[412] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[412] = nativeContext.LoadFunction("vkDestroySurfaceKHR", "vulkan")
            )
        )(instance, surface, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySurfaceKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySurfaceKHR(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroySurfaceKHR(instance, surface, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySurfaceKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroySurfaceKHR(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroySurfaceKHR(instance, surface, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySurfaceKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySurfaceKHR(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroySurfaceKHR(instance, surface, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySwapchainKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroySwapchainKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SwapchainKHRHandle, AllocationCallbacks*, void>)(
                _slots[413] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[413] = nativeContext.LoadFunction("vkDestroySwapchainKHR", "vulkan")
            )
        )(device, swapchain, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySwapchainKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySwapchainKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroySwapchainKHR(device, swapchain, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySwapchainKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroySwapchainKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroySwapchainKHR(device, swapchain, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySwapchainKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySwapchainKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroySwapchainKHR(device, swapchain, pAllocator);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyTensorARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyTensorARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkTensorARM")] TensorARMHandle tensor,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, TensorARMHandle, AllocationCallbacks*, void>)(
                _slots[414] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[414] = nativeContext.LoadFunction("vkDestroyTensorARM", "vulkan")
            )
        )(device, tensor, pAllocator);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyTensorARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyTensorARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkTensorARM")] TensorARMHandle tensor,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyTensorARM(device, tensor, pAllocator);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyTensorARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyTensorARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkTensorARM")] TensorARMHandle tensor,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyTensorARM(device, tensor, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyTensorARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyTensorARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkTensorARM")] TensorARMHandle tensor,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyTensorARM(device, tensor, pAllocator);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyTensorViewARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyTensorViewARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkTensorViewARM")] TensorViewARMHandle tensorView,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, TensorViewARMHandle, AllocationCallbacks*, void>)(
                _slots[415] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[415] = nativeContext.LoadFunction("vkDestroyTensorViewARM", "vulkan")
            )
        )(device, tensorView, pAllocator);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyTensorViewARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyTensorViewARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkTensorViewARM")] TensorViewARMHandle tensorView,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyTensorViewARM(device, tensorView, pAllocator);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyTensorViewARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyTensorViewARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkTensorViewARM")] TensorViewARMHandle tensorView,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyTensorViewARM(device, tensorView, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyTensorViewARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyTensorViewARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkTensorViewARM")] TensorViewARMHandle tensorView,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyTensorViewARM(device, tensorView, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyValidationCacheEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyValidationCacheEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle validationCache,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ValidationCacheEXTHandle,
                AllocationCallbacks*,
                void>)(
                _slots[416] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[416] = nativeContext.LoadFunction(
                        "vkDestroyValidationCacheEXT",
                        "vulkan"
                    )
            )
        )(device, validationCache, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyValidationCacheEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyValidationCacheEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle validationCache,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyValidationCacheEXT(device, validationCache, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyValidationCacheEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyValidationCacheEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle validationCache,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyValidationCacheEXT(device, validationCache, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyValidationCacheEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyValidationCacheEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle validationCache,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyValidationCacheEXT(device, validationCache, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyVideoSessionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, VideoSessionKHRHandle, AllocationCallbacks*, void>)(
                _slots[417] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[417] = nativeContext.LoadFunction("vkDestroyVideoSessionKHR", "vulkan")
            )
        )(device, videoSession, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyVideoSessionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyVideoSessionKHR(device, videoSession, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyVideoSessionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyVideoSessionKHR(device, videoSession, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyVideoSessionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyVideoSessionKHR(device, videoSession, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            VideoSessionParametersKHRHandle videoSessionParameters,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                VideoSessionParametersKHRHandle,
                AllocationCallbacks*,
                void>)(
                _slots[418] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[418] = nativeContext.LoadFunction(
                        "vkDestroyVideoSessionParametersKHR",
                        "vulkan"
                    )
            )
        )(device, videoSessionParameters, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            VideoSessionParametersKHRHandle videoSessionParameters,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.DestroyVideoSessionParametersKHR(device, videoSessionParameters, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.DestroyVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            VideoSessionParametersKHRHandle videoSessionParameters,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).DestroyVideoSessionParametersKHR(
                device,
                videoSessionParameters,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            VideoSessionParametersKHRHandle videoSessionParameters,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.DestroyVideoSessionParametersKHR(device, videoSessionParameters, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDeviceWaitIdle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.DeviceWaitIdle([NativeTypeName("VkDevice")] DeviceHandle device) =>
        (
            (delegate* unmanaged<DeviceHandle, Result>)(
                _slots[419] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[419] = nativeContext.LoadFunction("vkDeviceWaitIdle", "vulkan")
            )
        )(device);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDeviceWaitIdle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DeviceWaitIdle([NativeTypeName("VkDevice")] DeviceHandle device) =>
        ThisThread.DeviceWaitIdle(device);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDisplayPowerControlEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.DisplayPowerControlEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("const VkDisplayPowerInfoEXT *")] DisplayPowerInfoEXT* pDisplayPowerInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DisplayKHRHandle, DisplayPowerInfoEXT*, Result>)(
                _slots[420] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[420] = nativeContext.LoadFunction("vkDisplayPowerControlEXT", "vulkan")
            )
        )(device, display, pDisplayPowerInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDisplayPowerControlEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DisplayPowerControlEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("const VkDisplayPowerInfoEXT *")] DisplayPowerInfoEXT* pDisplayPowerInfo
    ) => ThisThread.DisplayPowerControlEXT(device, display, pDisplayPowerInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDisplayPowerControlEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.DisplayPowerControlEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("const VkDisplayPowerInfoEXT *")] Ref<DisplayPowerInfoEXT> pDisplayPowerInfo
    )
    {
        fixed (DisplayPowerInfoEXT* __dsl_pDisplayPowerInfo = pDisplayPowerInfo)
        {
            return (Result)
                ((IVk)this).DisplayPowerControlEXT(device, display, __dsl_pDisplayPowerInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDisplayPowerControlEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DisplayPowerControlEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("const VkDisplayPowerInfoEXT *")] Ref<DisplayPowerInfoEXT> pDisplayPowerInfo
    ) => ThisThread.DisplayPowerControlEXT(device, display, pDisplayPowerInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEndCommandBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EndCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, Result>)(
                _slots[421] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[421] = nativeContext.LoadFunction("vkEndCommandBuffer", "vulkan")
            )
        )(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEndCommandBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EndCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer
    ) => ThisThread.EndCommandBuffer(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceExtensionProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumerateDeviceExtensionProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const char *")] sbyte* pLayerName,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        ExtensionProperties* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                sbyte*,
                uint*,
                ExtensionProperties*,
                Result>)(
                _slots[422] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[422] = nativeContext.LoadFunction(
                        "vkEnumerateDeviceExtensionProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pLayerName, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceExtensionProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateDeviceExtensionProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const char *")] sbyte* pLayerName,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        ExtensionProperties* pProperties
    ) =>
        ThisThread.EnumerateDeviceExtensionProperties(
            physicalDevice,
            pLayerName,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceExtensionProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumerateDeviceExtensionProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const char *")] Ref<sbyte> pLayerName,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<ExtensionProperties> pProperties
    )
    {
        fixed (ExtensionProperties* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (sbyte* __dsl_pLayerName = pLayerName)
        {
            return (Result)
                ((IVk)this).EnumerateDeviceExtensionProperties(
                    physicalDevice,
                    __dsl_pLayerName,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceExtensionProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateDeviceExtensionProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const char *")] Ref<sbyte> pLayerName,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<ExtensionProperties> pProperties
    ) =>
        ThisThread.EnumerateDeviceExtensionProperties(
            physicalDevice,
            pLayerName,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceLayerProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumerateDeviceLayerProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        LayerProperties* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, uint*, LayerProperties*, Result>)(
                _slots[423] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[423] = nativeContext.LoadFunction(
                        "vkEnumerateDeviceLayerProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceLayerProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateDeviceLayerProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        LayerProperties* pProperties
    ) => ThisThread.EnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceLayerProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumerateDeviceLayerProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<LayerProperties> pProperties
    )
    {
        fixed (LayerProperties* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        {
            return (Result)
                ((IVk)this).EnumerateDeviceLayerProperties(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceLayerProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateDeviceLayerProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<LayerProperties> pProperties
    ) => ThisThread.EnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceExtensionProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumerateInstanceExtensionProperties(
        [NativeTypeName("const char *")] sbyte* pLayerName,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        ExtensionProperties* pProperties
    ) =>
        (
            (delegate* unmanaged<sbyte*, uint*, ExtensionProperties*, Result>)(
                _slots[424] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[424] = nativeContext.LoadFunction(
                        "vkEnumerateInstanceExtensionProperties",
                        "vulkan"
                    )
            )
        )(pLayerName, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceExtensionProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateInstanceExtensionProperties(
        [NativeTypeName("const char *")] sbyte* pLayerName,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        ExtensionProperties* pProperties
    ) => ThisThread.EnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceExtensionProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumerateInstanceExtensionProperties(
        [NativeTypeName("const char *")] Ref<sbyte> pLayerName,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<ExtensionProperties> pProperties
    )
    {
        fixed (ExtensionProperties* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (sbyte* __dsl_pLayerName = pLayerName)
        {
            return (Result)
                ((IVk)this).EnumerateInstanceExtensionProperties(
                    __dsl_pLayerName,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceExtensionProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateInstanceExtensionProperties(
        [NativeTypeName("const char *")] Ref<sbyte> pLayerName,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<ExtensionProperties> pProperties
    ) => ThisThread.EnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceLayerProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumerateInstanceLayerProperties(
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        LayerProperties* pProperties
    ) =>
        (
            (delegate* unmanaged<uint*, LayerProperties*, Result>)(
                _slots[425] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[425] = nativeContext.LoadFunction(
                        "vkEnumerateInstanceLayerProperties",
                        "vulkan"
                    )
            )
        )(pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceLayerProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateInstanceLayerProperties(
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        LayerProperties* pProperties
    ) => ThisThread.EnumerateInstanceLayerProperties(pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceLayerProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumerateInstanceLayerProperties(
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<LayerProperties> pProperties
    )
    {
        fixed (LayerProperties* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        {
            return (Result)
                ((IVk)this).EnumerateInstanceLayerProperties(
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceLayerProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateInstanceLayerProperties(
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<LayerProperties> pProperties
    ) => ThisThread.EnumerateInstanceLayerProperties(pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumerateInstanceVersion([NativeTypeName("uint32_t *")] uint* pApiVersion) =>
        (
            (delegate* unmanaged<uint*, Result>)(
                _slots[426] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[426] = nativeContext.LoadFunction(
                        "vkEnumerateInstanceVersion",
                        "vulkan"
                    )
            )
        )(pApiVersion);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateInstanceVersion(
        [NativeTypeName("uint32_t *")] uint* pApiVersion
    ) => ThisThread.EnumerateInstanceVersion(pApiVersion);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumerateInstanceVersion([NativeTypeName("uint32_t *")] Ref<uint> pApiVersion)
    {
        fixed (uint* __dsl_pApiVersion = pApiVersion)
        {
            return (Result)((IVk)this).EnumerateInstanceVersion(__dsl_pApiVersion);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateInstanceVersion(
        [NativeTypeName("uint32_t *")] Ref<uint> pApiVersion
    ) => ThisThread.EnumerateInstanceVersion(pApiVersion);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroups")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumeratePhysicalDeviceGroups(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceGroupCount,
        PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
    ) =>
        (
            (delegate* unmanaged<InstanceHandle, uint*, PhysicalDeviceGroupProperties*, Result>)(
                _slots[427] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[427] = nativeContext.LoadFunction(
                        "vkEnumeratePhysicalDeviceGroups",
                        "vulkan"
                    )
            )
        )(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroups")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDeviceGroups(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceGroupCount,
        PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
    ) =>
        ThisThread.EnumeratePhysicalDeviceGroups(
            instance,
            pPhysicalDeviceGroupCount,
            pPhysicalDeviceGroupProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroups")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumeratePhysicalDeviceGroups(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceGroupCount,
        Ref<PhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties
    )
    {
        fixed (
            PhysicalDeviceGroupProperties* __dsl_pPhysicalDeviceGroupProperties =
                pPhysicalDeviceGroupProperties
        )
        fixed (uint* __dsl_pPhysicalDeviceGroupCount = pPhysicalDeviceGroupCount)
        {
            return (Result)
                ((IVk)this).EnumeratePhysicalDeviceGroups(
                    instance,
                    __dsl_pPhysicalDeviceGroupCount,
                    __dsl_pPhysicalDeviceGroupProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroups")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDeviceGroups(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceGroupCount,
        Ref<PhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties
    ) =>
        ThisThread.EnumeratePhysicalDeviceGroups(
            instance,
            pPhysicalDeviceGroupCount,
            pPhysicalDeviceGroupProperties
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroupsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumeratePhysicalDeviceGroupsKHR(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceGroupCount,
        PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
    ) =>
        (
            (delegate* unmanaged<InstanceHandle, uint*, PhysicalDeviceGroupProperties*, Result>)(
                _slots[428] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[428] = nativeContext.LoadFunction(
                        "vkEnumeratePhysicalDeviceGroupsKHR",
                        "vulkan"
                    )
            )
        )(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroupsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDeviceGroupsKHR(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceGroupCount,
        PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
    ) =>
        ThisThread.EnumeratePhysicalDeviceGroupsKHR(
            instance,
            pPhysicalDeviceGroupCount,
            pPhysicalDeviceGroupProperties
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroupsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumeratePhysicalDeviceGroupsKHR(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceGroupCount,
        Ref<PhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties
    )
    {
        fixed (
            PhysicalDeviceGroupProperties* __dsl_pPhysicalDeviceGroupProperties =
                pPhysicalDeviceGroupProperties
        )
        fixed (uint* __dsl_pPhysicalDeviceGroupCount = pPhysicalDeviceGroupCount)
        {
            return (Result)
                ((IVk)this).EnumeratePhysicalDeviceGroupsKHR(
                    instance,
                    __dsl_pPhysicalDeviceGroupCount,
                    __dsl_pPhysicalDeviceGroupProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroupsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDeviceGroupsKHR(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceGroupCount,
        Ref<PhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties
    ) =>
        ThisThread.EnumeratePhysicalDeviceGroupsKHR(
            instance,
            pPhysicalDeviceGroupCount,
            pPhysicalDeviceGroupProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t *")] uint* pCounterCount,
        PerformanceCounterKHR* pCounters,
        PerformanceCounterDescriptionKHR* pCounterDescriptions
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                uint,
                uint*,
                PerformanceCounterKHR*,
                PerformanceCounterDescriptionKHR*,
                Result>)(
                _slots[429] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[429] = nativeContext.LoadFunction(
                        "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t *")] uint* pCounterCount,
        PerformanceCounterKHR* pCounters,
        PerformanceCounterDescriptionKHR* pCounterDescriptions
    ) =>
        ThisThread.EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
            physicalDevice,
            queueFamilyIndex,
            pCounterCount,
            pCounters,
            pCounterDescriptions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t *")] Ref<uint> pCounterCount,
        Ref<PerformanceCounterKHR> pCounters,
        Ref<PerformanceCounterDescriptionKHR> pCounterDescriptions
    )
    {
        fixed (PerformanceCounterDescriptionKHR* __dsl_pCounterDescriptions = pCounterDescriptions)
        fixed (PerformanceCounterKHR* __dsl_pCounters = pCounters)
        fixed (uint* __dsl_pCounterCount = pCounterCount)
        {
            return (Result)
                ((IVk)this).EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
                    physicalDevice,
                    queueFamilyIndex,
                    __dsl_pCounterCount,
                    __dsl_pCounters,
                    __dsl_pCounterDescriptions
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t *")] Ref<uint> pCounterCount,
        Ref<PerformanceCounterKHR> pCounters,
        Ref<PerformanceCounterDescriptionKHR> pCounterDescriptions
    ) =>
        ThisThread.EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
            physicalDevice,
            queueFamilyIndex,
            pCounterCount,
            pCounters,
            pCounterDescriptions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumeratePhysicalDevices(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceCount,
        [NativeTypeName("VkPhysicalDevice *")] PhysicalDeviceHandle* pPhysicalDevices
    ) =>
        (
            (delegate* unmanaged<InstanceHandle, uint*, PhysicalDeviceHandle*, Result>)(
                _slots[430] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[430] = nativeContext.LoadFunction(
                        "vkEnumeratePhysicalDevices",
                        "vulkan"
                    )
            )
        )(instance, pPhysicalDeviceCount, pPhysicalDevices);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDevices(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceCount,
        [NativeTypeName("VkPhysicalDevice *")] PhysicalDeviceHandle* pPhysicalDevices
    ) => ThisThread.EnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.EnumeratePhysicalDevices(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceCount,
        [NativeTypeName("VkPhysicalDevice *")] Ref<PhysicalDeviceHandle> pPhysicalDevices
    )
    {
        fixed (PhysicalDeviceHandle* __dsl_pPhysicalDevices = pPhysicalDevices)
        fixed (uint* __dsl_pPhysicalDeviceCount = pPhysicalDeviceCount)
        {
            return (Result)
                ((IVk)this).EnumeratePhysicalDevices(
                    instance,
                    __dsl_pPhysicalDeviceCount,
                    __dsl_pPhysicalDevices
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDevices(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceCount,
        [NativeTypeName("VkPhysicalDevice *")] Ref<PhysicalDeviceHandle> pPhysicalDevices
    ) => ThisThread.EnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkFlushMappedMemoryRanges")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.FlushMappedMemoryRanges(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] MappedMemoryRange* pMemoryRanges
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, MappedMemoryRange*, Result>)(
                _slots[431] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[431] = nativeContext.LoadFunction(
                        "vkFlushMappedMemoryRanges",
                        "vulkan"
                    )
            )
        )(device, memoryRangeCount, pMemoryRanges);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkFlushMappedMemoryRanges")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result FlushMappedMemoryRanges(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] MappedMemoryRange* pMemoryRanges
    ) => ThisThread.FlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFlushMappedMemoryRanges")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.FlushMappedMemoryRanges(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] Ref<MappedMemoryRange> pMemoryRanges
    )
    {
        fixed (MappedMemoryRange* __dsl_pMemoryRanges = pMemoryRanges)
        {
            return (Result)
                ((IVk)this).FlushMappedMemoryRanges(device, memoryRangeCount, __dsl_pMemoryRanges);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFlushMappedMemoryRanges")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result FlushMappedMemoryRanges(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] Ref<MappedMemoryRange> pMemoryRanges
    ) => ThisThread.FlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFreeCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.FreeCommandBuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle pCommandBuffers
    ) =>
        ((IVk)this).FreeCommandBuffers(
            device,
            commandPool,
            1,
            (CommandBufferHandle*)&pCommandBuffers
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFreeCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FreeCommandBuffer(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle pCommandBuffers
    ) => ThisThread.FreeCommandBuffer(device, commandPool, pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkFreeCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.FreeCommandBuffers(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle* pCommandBuffers
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                CommandPoolHandle,
                uint,
                CommandBufferHandle*,
                void>)(
                _slots[432] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[432] = nativeContext.LoadFunction("vkFreeCommandBuffers", "vulkan")
            )
        )(device, commandPool, commandBufferCount, pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkFreeCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FreeCommandBuffers(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle* pCommandBuffers
    ) => ThisThread.FreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFreeCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.FreeCommandBuffers(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
    )
    {
        fixed (CommandBufferHandle* __dsl_pCommandBuffers = pCommandBuffers)
        {
            ((IVk)this).FreeCommandBuffers(
                device,
                commandPool,
                commandBufferCount,
                __dsl_pCommandBuffers
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFreeCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FreeCommandBuffers(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
    ) => ThisThread.FreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkFreeDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.FreeDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] DescriptorSetHandle* pDescriptorSets
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DescriptorPoolHandle,
                uint,
                DescriptorSetHandle*,
                Result>)(
                _slots[433] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[433] = nativeContext.LoadFunction("vkFreeDescriptorSets", "vulkan")
            )
        )(device, descriptorPool, descriptorSetCount, pDescriptorSets);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkFreeDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result FreeDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] DescriptorSetHandle* pDescriptorSets
    ) => ThisThread.FreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFreeDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.FreeDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] Ref<DescriptorSetHandle> pDescriptorSets
    )
    {
        fixed (DescriptorSetHandle* __dsl_pDescriptorSets = pDescriptorSets)
        {
            return (Result)
                ((IVk)this).FreeDescriptorSets(
                    device,
                    descriptorPool,
                    descriptorSetCount,
                    __dsl_pDescriptorSets
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFreeDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result FreeDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] Ref<DescriptorSetHandle> pDescriptorSets
    ) => ThisThread.FreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkFreeMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.FreeMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DeviceMemoryHandle, AllocationCallbacks*, void>)(
                _slots[434] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[434] = nativeContext.LoadFunction("vkFreeMemory", "vulkan")
            )
        )(device, memory, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkFreeMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FreeMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.FreeMemory(device, memory, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFreeMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.FreeMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        {
            ((IVk)this).FreeMemory(device, memory, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFreeMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FreeMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.FreeMemory(device, memory, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureBuildSizesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetAccelerationStructureBuildSizesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pBuildInfo,
        [NativeTypeName("const uint32_t *")] uint* pMaxPrimitiveCounts,
        AccelerationStructureBuildSizesInfoKHR* pSizeInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                AccelerationStructureBuildTypeKHR,
                AccelerationStructureBuildGeometryInfoKHR*,
                uint*,
                AccelerationStructureBuildSizesInfoKHR*,
                void>)(
                _slots[435] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[435] = nativeContext.LoadFunction(
                        "vkGetAccelerationStructureBuildSizesKHR",
                        "vulkan"
                    )
            )
        )(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureBuildSizesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetAccelerationStructureBuildSizesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pBuildInfo,
        [NativeTypeName("const uint32_t *")] uint* pMaxPrimitiveCounts,
        AccelerationStructureBuildSizesInfoKHR* pSizeInfo
    ) =>
        ThisThread.GetAccelerationStructureBuildSizesKHR(
            device,
            buildType,
            pBuildInfo,
            pMaxPrimitiveCounts,
            pSizeInfo
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureBuildSizesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetAccelerationStructureBuildSizesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pBuildInfo,
        [NativeTypeName("const uint32_t *")] Ref<uint> pMaxPrimitiveCounts,
        Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
    )
    {
        fixed (AccelerationStructureBuildSizesInfoKHR* __dsl_pSizeInfo = pSizeInfo)
        fixed (uint* __dsl_pMaxPrimitiveCounts = pMaxPrimitiveCounts)
        fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pBuildInfo = pBuildInfo)
        {
            ((IVk)this).GetAccelerationStructureBuildSizesKHR(
                device,
                buildType,
                __dsl_pBuildInfo,
                __dsl_pMaxPrimitiveCounts,
                __dsl_pSizeInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureBuildSizesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetAccelerationStructureBuildSizesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pBuildInfo,
        [NativeTypeName("const uint32_t *")] Ref<uint> pMaxPrimitiveCounts,
        Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
    ) =>
        ThisThread.GetAccelerationStructureBuildSizesKHR(
            device,
            buildType,
            pBuildInfo,
            pMaxPrimitiveCounts,
            pSizeInfo
        );

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureDeviceAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetAccelerationStructureDeviceAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureDeviceAddressInfoKHR *")]
            AccelerationStructureDeviceAddressInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, AccelerationStructureDeviceAddressInfoKHR*, ulong>)(
                _slots[436] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[436] = nativeContext.LoadFunction(
                        "vkGetAccelerationStructureDeviceAddressKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureDeviceAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetAccelerationStructureDeviceAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureDeviceAddressInfoKHR *")]
            AccelerationStructureDeviceAddressInfoKHR* pInfo
    ) => ThisThread.GetAccelerationStructureDeviceAddressKHR(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureDeviceAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetAccelerationStructureDeviceAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureDeviceAddressInfoKHR *")]
            Ref<AccelerationStructureDeviceAddressInfoKHR> pInfo
    )
    {
        fixed (AccelerationStructureDeviceAddressInfoKHR* __dsl_pInfo = pInfo)
        {
            return (ulong)((IVk)this).GetAccelerationStructureDeviceAddressKHR(device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureDeviceAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetAccelerationStructureDeviceAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureDeviceAddressInfoKHR *")]
            Ref<AccelerationStructureDeviceAddressInfoKHR> pInfo
    ) => ThisThread.GetAccelerationStructureDeviceAddressKHR(device, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureHandleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetAccelerationStructureHandleNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkAccelerationStructureNV")]
            AccelerationStructureNVHandle accelerationStructure,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                AccelerationStructureNVHandle,
                nuint,
                void*,
                Result>)(
                _slots[437] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[437] = nativeContext.LoadFunction(
                        "vkGetAccelerationStructureHandleNV",
                        "vulkan"
                    )
            )
        )(device, accelerationStructure, dataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureHandleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetAccelerationStructureHandleNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkAccelerationStructureNV")]
            AccelerationStructureNVHandle accelerationStructure,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        ThisThread.GetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureHandleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetAccelerationStructureHandleNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkAccelerationStructureNV")]
            AccelerationStructureNVHandle accelerationStructure,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        {
            return (Result)
                ((IVk)this).GetAccelerationStructureHandleNV(
                    device,
                    accelerationStructure,
                    dataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureHandleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetAccelerationStructureHandleNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkAccelerationStructureNV")]
            AccelerationStructureNVHandle accelerationStructure,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    ) =>
        ThisThread.GetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetAccelerationStructureMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureMemoryRequirementsInfoNV *")]
            AccelerationStructureMemoryRequirementsInfoNV* pInfo,
        [NativeTypeName("VkMemoryRequirements2KHR *")] MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                AccelerationStructureMemoryRequirementsInfoNV*,
                MemoryRequirements2*,
                void>)(
                _slots[438] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[438] = nativeContext.LoadFunction(
                        "vkGetAccelerationStructureMemoryRequirementsNV",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetAccelerationStructureMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureMemoryRequirementsInfoNV *")]
            AccelerationStructureMemoryRequirementsInfoNV* pInfo,
        [NativeTypeName("VkMemoryRequirements2KHR *")] MemoryRequirements2* pMemoryRequirements
    ) =>
        ThisThread.GetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetAccelerationStructureMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureMemoryRequirementsInfoNV *")]
            Ref<AccelerationStructureMemoryRequirementsInfoNV> pInfo,
        [NativeTypeName("VkMemoryRequirements2KHR *")] Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (AccelerationStructureMemoryRequirementsInfoNV* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetAccelerationStructureMemoryRequirementsNV(
                device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetAccelerationStructureMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureMemoryRequirementsInfoNV *")]
            Ref<AccelerationStructureMemoryRequirementsInfoNV> pInfo,
        [NativeTypeName("VkMemoryRequirements2KHR *")] Ref<MemoryRequirements2> pMemoryRequirements
    ) =>
        ThisThread.GetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_EXT_descriptor_buffer+VK_KHR_acceleration_structure",
            "VK_EXT_descriptor_buffer+VK_NV_ray_tracing",
        ],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureCaptureDescriptorDataInfoEXT *")]
            AccelerationStructureCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                AccelerationStructureCaptureDescriptorDataInfoEXT*,
                void*,
                Result>)(
                _slots[439] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[439] = nativeContext.LoadFunction(
                        "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT",
                        "vulkan"
                    )
            )
        )(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_EXT_descriptor_buffer+VK_KHR_acceleration_structure",
            "VK_EXT_descriptor_buffer+VK_NV_ray_tracing",
        ],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureCaptureDescriptorDataInfoEXT *")]
            AccelerationStructureCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) => ThisThread.GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_EXT_descriptor_buffer+VK_KHR_acceleration_structure",
            "VK_EXT_descriptor_buffer+VK_NV_ray_tracing",
        ],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureCaptureDescriptorDataInfoEXT *")]
            Ref<AccelerationStructureCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (AccelerationStructureCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
                    device,
                    __dsl_pInfo,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_EXT_descriptor_buffer+VK_KHR_acceleration_structure",
            "VK_EXT_descriptor_buffer+VK_NV_ray_tracing",
        ],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureCaptureDescriptorDataInfoEXT *")]
            Ref<AccelerationStructureCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    ) => ThisThread.GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetBufferDeviceAddress(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, BufferDeviceAddressInfo*, ulong>)(
                _slots[440] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[440] = nativeContext.LoadFunction("vkGetBufferDeviceAddress", "vulkan")
            )
        )(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferDeviceAddress(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) => ThisThread.GetBufferDeviceAddress(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetBufferDeviceAddress(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    )
    {
        fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
        {
            return (ulong)((IVk)this).GetBufferDeviceAddress(device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferDeviceAddress(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    ) => ThisThread.GetBufferDeviceAddress(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_buffer_device_address"],
        ImpliesSets = [
            "VK_EXT_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_EXT_buffer_device_address+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetBufferDeviceAddressEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, BufferDeviceAddressInfo*, ulong>)(
                _slots[441] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[441] = nativeContext.LoadFunction(
                        "vkGetBufferDeviceAddressEXT",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_buffer_device_address"],
        ImpliesSets = [
            "VK_EXT_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_EXT_buffer_device_address+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferDeviceAddressEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) => ThisThread.GetBufferDeviceAddressEXT(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_buffer_device_address"],
        ImpliesSets = [
            "VK_EXT_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_EXT_buffer_device_address+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetBufferDeviceAddressEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    )
    {
        fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
        {
            return (ulong)((IVk)this).GetBufferDeviceAddressEXT(device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_buffer_device_address"],
        ImpliesSets = [
            "VK_EXT_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_EXT_buffer_device_address+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferDeviceAddressEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    ) => ThisThread.GetBufferDeviceAddressEXT(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetBufferDeviceAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, BufferDeviceAddressInfo*, ulong>)(
                _slots[442] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[442] = nativeContext.LoadFunction(
                        "vkGetBufferDeviceAddressKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferDeviceAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) => ThisThread.GetBufferDeviceAddressKHR(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetBufferDeviceAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    )
    {
        fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
        {
            return (ulong)((IVk)this).GetBufferDeviceAddressKHR(device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferDeviceAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    ) => ThisThread.GetBufferDeviceAddressKHR(device, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        MemoryRequirements* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, BufferHandle, MemoryRequirements*, void>)(
                _slots[443] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[443] = nativeContext.LoadFunction(
                        "vkGetBufferMemoryRequirements",
                        "vulkan"
                    )
            )
        )(device, buffer, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        MemoryRequirements* pMemoryRequirements
    ) => ThisThread.GetBufferMemoryRequirements(device, buffer, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        Ref<MemoryRequirements> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements* __dsl_pMemoryRequirements = pMemoryRequirements)
        {
            ((IVk)this).GetBufferMemoryRequirements(device, buffer, __dsl_pMemoryRequirements);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkBuffer")] BufferHandle buffer,
        Ref<MemoryRequirements> pMemoryRequirements
    ) => ThisThread.GetBufferMemoryRequirements(device, buffer, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetBufferMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            BufferMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                BufferMemoryRequirementsInfo2*,
                MemoryRequirements2*,
                void>)(
                _slots[444] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[444] = nativeContext.LoadFunction(
                        "vkGetBufferMemoryRequirements2",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetBufferMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            BufferMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => ThisThread.GetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetBufferMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            Ref<BufferMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (BufferMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetBufferMemoryRequirements2(
                device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetBufferMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            Ref<BufferMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => ThisThread.GetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetBufferMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            BufferMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                BufferMemoryRequirementsInfo2*,
                MemoryRequirements2*,
                void>)(
                _slots[445] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[445] = nativeContext.LoadFunction(
                        "vkGetBufferMemoryRequirements2KHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetBufferMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            BufferMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => ThisThread.GetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetBufferMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            Ref<BufferMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (BufferMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetBufferMemoryRequirements2KHR(
                device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetBufferMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            Ref<BufferMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => ThisThread.GetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetBufferOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, BufferDeviceAddressInfo*, ulong>)(
                _slots[446] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[446] = nativeContext.LoadFunction(
                        "vkGetBufferOpaqueCaptureAddress",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) => ThisThread.GetBufferOpaqueCaptureAddress(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetBufferOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    )
    {
        fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
        {
            return (ulong)((IVk)this).GetBufferOpaqueCaptureAddress(device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    ) => ThisThread.GetBufferOpaqueCaptureAddress(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetBufferOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, BufferDeviceAddressInfo*, ulong>)(
                _slots[447] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[447] = nativeContext.LoadFunction(
                        "vkGetBufferOpaqueCaptureAddressKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) => ThisThread.GetBufferOpaqueCaptureAddressKHR(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetBufferOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    )
    {
        fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
        {
            return (ulong)((IVk)this).GetBufferOpaqueCaptureAddressKHR(device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    ) => ThisThread.GetBufferOpaqueCaptureAddressKHR(device, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetBufferOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferCaptureDescriptorDataInfoEXT *")]
            BufferCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, BufferCaptureDescriptorDataInfoEXT*, void*, Result>)(
                _slots[448] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[448] = nativeContext.LoadFunction(
                        "vkGetBufferOpaqueCaptureDescriptorDataEXT",
                        "vulkan"
                    )
            )
        )(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetBufferOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferCaptureDescriptorDataInfoEXT *")]
            BufferCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) => ThisThread.GetBufferOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetBufferOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferCaptureDescriptorDataInfoEXT *")]
            Ref<BufferCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (BufferCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).GetBufferOpaqueCaptureDescriptorDataEXT(
                    device,
                    __dsl_pInfo,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetBufferOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkBufferCaptureDescriptorDataInfoEXT *")]
            Ref<BufferCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    ) => ThisThread.GetBufferOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetCalibratedTimestampsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            CalibratedTimestampInfoKHR* pTimestampInfos,
        [NativeTypeName("uint64_t *")] ulong* pTimestamps,
        [NativeTypeName("uint64_t *")] ulong* pMaxDeviation
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                uint,
                CalibratedTimestampInfoKHR*,
                ulong*,
                ulong*,
                Result>)(
                _slots[449] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[449] = nativeContext.LoadFunction(
                        "vkGetCalibratedTimestampsEXT",
                        "vulkan"
                    )
            )
        )(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetCalibratedTimestampsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            CalibratedTimestampInfoKHR* pTimestampInfos,
        [NativeTypeName("uint64_t *")] ulong* pTimestamps,
        [NativeTypeName("uint64_t *")] ulong* pMaxDeviation
    ) =>
        ThisThread.GetCalibratedTimestampsEXT(
            device,
            timestampCount,
            pTimestampInfos,
            pTimestamps,
            pMaxDeviation
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetCalibratedTimestampsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            Ref<CalibratedTimestampInfoKHR> pTimestampInfos,
        [NativeTypeName("uint64_t *")] Ref<ulong> pTimestamps,
        [NativeTypeName("uint64_t *")] Ref<ulong> pMaxDeviation
    )
    {
        fixed (ulong* __dsl_pMaxDeviation = pMaxDeviation)
        fixed (ulong* __dsl_pTimestamps = pTimestamps)
        fixed (CalibratedTimestampInfoKHR* __dsl_pTimestampInfos = pTimestampInfos)
        {
            return (Result)
                ((IVk)this).GetCalibratedTimestampsEXT(
                    device,
                    timestampCount,
                    __dsl_pTimestampInfos,
                    __dsl_pTimestamps,
                    __dsl_pMaxDeviation
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetCalibratedTimestampsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            Ref<CalibratedTimestampInfoKHR> pTimestampInfos,
        [NativeTypeName("uint64_t *")] Ref<ulong> pTimestamps,
        [NativeTypeName("uint64_t *")] Ref<ulong> pMaxDeviation
    ) =>
        ThisThread.GetCalibratedTimestampsEXT(
            device,
            timestampCount,
            pTimestampInfos,
            pTimestamps,
            pMaxDeviation
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetCalibratedTimestampsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            CalibratedTimestampInfoKHR* pTimestampInfos,
        [NativeTypeName("uint64_t *")] ulong* pTimestamps,
        [NativeTypeName("uint64_t *")] ulong* pMaxDeviation
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                uint,
                CalibratedTimestampInfoKHR*,
                ulong*,
                ulong*,
                Result>)(
                _slots[450] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[450] = nativeContext.LoadFunction(
                        "vkGetCalibratedTimestampsKHR",
                        "vulkan"
                    )
            )
        )(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetCalibratedTimestampsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            CalibratedTimestampInfoKHR* pTimestampInfos,
        [NativeTypeName("uint64_t *")] ulong* pTimestamps,
        [NativeTypeName("uint64_t *")] ulong* pMaxDeviation
    ) =>
        ThisThread.GetCalibratedTimestampsKHR(
            device,
            timestampCount,
            pTimestampInfos,
            pTimestamps,
            pMaxDeviation
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetCalibratedTimestampsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            Ref<CalibratedTimestampInfoKHR> pTimestampInfos,
        [NativeTypeName("uint64_t *")] Ref<ulong> pTimestamps,
        [NativeTypeName("uint64_t *")] Ref<ulong> pMaxDeviation
    )
    {
        fixed (ulong* __dsl_pMaxDeviation = pMaxDeviation)
        fixed (ulong* __dsl_pTimestamps = pTimestamps)
        fixed (CalibratedTimestampInfoKHR* __dsl_pTimestampInfos = pTimestampInfos)
        {
            return (Result)
                ((IVk)this).GetCalibratedTimestampsKHR(
                    device,
                    timestampCount,
                    __dsl_pTimestampInfos,
                    __dsl_pTimestamps,
                    __dsl_pMaxDeviation
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetCalibratedTimestampsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            Ref<CalibratedTimestampInfoKHR> pTimestampInfos,
        [NativeTypeName("uint64_t *")] Ref<ulong> pTimestamps,
        [NativeTypeName("uint64_t *")] Ref<ulong> pMaxDeviation
    ) =>
        ThisThread.GetCalibratedTimestampsKHR(
            device,
            timestampCount,
            pTimestampInfos,
            pTimestamps,
            pMaxDeviation
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetClusterAccelerationStructureBuildSizesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetClusterAccelerationStructureBuildSizesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkClusterAccelerationStructureInputInfoNV *")]
            ClusterAccelerationStructureInputInfoNV* pInfo,
        AccelerationStructureBuildSizesInfoKHR* pSizeInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ClusterAccelerationStructureInputInfoNV*,
                AccelerationStructureBuildSizesInfoKHR*,
                void>)(
                _slots[451] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[451] = nativeContext.LoadFunction(
                        "vkGetClusterAccelerationStructureBuildSizesNV",
                        "vulkan"
                    )
            )
        )(device, pInfo, pSizeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetClusterAccelerationStructureBuildSizesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetClusterAccelerationStructureBuildSizesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkClusterAccelerationStructureInputInfoNV *")]
            ClusterAccelerationStructureInputInfoNV* pInfo,
        AccelerationStructureBuildSizesInfoKHR* pSizeInfo
    ) => ThisThread.GetClusterAccelerationStructureBuildSizesNV(device, pInfo, pSizeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetClusterAccelerationStructureBuildSizesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetClusterAccelerationStructureBuildSizesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkClusterAccelerationStructureInputInfoNV *")]
            Ref<ClusterAccelerationStructureInputInfoNV> pInfo,
        Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
    )
    {
        fixed (AccelerationStructureBuildSizesInfoKHR* __dsl_pSizeInfo = pSizeInfo)
        fixed (ClusterAccelerationStructureInputInfoNV* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetClusterAccelerationStructureBuildSizesNV(
                device,
                __dsl_pInfo,
                __dsl_pSizeInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetClusterAccelerationStructureBuildSizesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetClusterAccelerationStructureBuildSizesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkClusterAccelerationStructureInputInfoNV *")]
            Ref<ClusterAccelerationStructureInputInfoNV> pInfo,
        Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
    ) => ThisThread.GetClusterAccelerationStructureBuildSizesNV(device, pInfo, pSizeInfo);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelineAvailablePropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDataGraphPipelineAvailablePropertiesARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineInfoARM *")]
            DataGraphPipelineInfoARM* pPipelineInfo,
        [NativeTypeName("uint32_t *")] uint* pPropertiesCount,
        DataGraphPipelinePropertyARM* pProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DataGraphPipelineInfoARM*,
                uint*,
                DataGraphPipelinePropertyARM*,
                Result>)(
                _slots[452] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[452] = nativeContext.LoadFunction(
                        "vkGetDataGraphPipelineAvailablePropertiesARM",
                        "vulkan"
                    )
            )
        )(device, pPipelineInfo, pPropertiesCount, pProperties);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelineAvailablePropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDataGraphPipelineAvailablePropertiesARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineInfoARM *")]
            DataGraphPipelineInfoARM* pPipelineInfo,
        [NativeTypeName("uint32_t *")] uint* pPropertiesCount,
        DataGraphPipelinePropertyARM* pProperties
    ) =>
        ThisThread.GetDataGraphPipelineAvailablePropertiesARM(
            device,
            pPipelineInfo,
            pPropertiesCount,
            pProperties
        );

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelineAvailablePropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDataGraphPipelineAvailablePropertiesARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineInfoARM *")]
            Ref<DataGraphPipelineInfoARM> pPipelineInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertiesCount,
        Ref<DataGraphPipelinePropertyARM> pProperties
    )
    {
        fixed (DataGraphPipelinePropertyARM* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertiesCount = pPropertiesCount)
        fixed (DataGraphPipelineInfoARM* __dsl_pPipelineInfo = pPipelineInfo)
        {
            return (Result)
                ((IVk)this).GetDataGraphPipelineAvailablePropertiesARM(
                    device,
                    __dsl_pPipelineInfo,
                    __dsl_pPropertiesCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelineAvailablePropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDataGraphPipelineAvailablePropertiesARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineInfoARM *")]
            Ref<DataGraphPipelineInfoARM> pPipelineInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertiesCount,
        Ref<DataGraphPipelinePropertyARM> pProperties
    ) =>
        ThisThread.GetDataGraphPipelineAvailablePropertiesARM(
            device,
            pPipelineInfo,
            pPropertiesCount,
            pProperties
        );

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelinePropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDataGraphPipelinePropertiesARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineInfoARM *")]
            DataGraphPipelineInfoARM* pPipelineInfo,
        [NativeTypeName("uint32_t")] uint propertiesCount,
        DataGraphPipelinePropertyQueryResultARM* pProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DataGraphPipelineInfoARM*,
                uint,
                DataGraphPipelinePropertyQueryResultARM*,
                Result>)(
                _slots[453] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[453] = nativeContext.LoadFunction(
                        "vkGetDataGraphPipelinePropertiesARM",
                        "vulkan"
                    )
            )
        )(device, pPipelineInfo, propertiesCount, pProperties);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelinePropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDataGraphPipelinePropertiesARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineInfoARM *")]
            DataGraphPipelineInfoARM* pPipelineInfo,
        [NativeTypeName("uint32_t")] uint propertiesCount,
        DataGraphPipelinePropertyQueryResultARM* pProperties
    ) =>
        ThisThread.GetDataGraphPipelinePropertiesARM(
            device,
            pPipelineInfo,
            propertiesCount,
            pProperties
        );

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelinePropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDataGraphPipelinePropertiesARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineInfoARM *")]
            Ref<DataGraphPipelineInfoARM> pPipelineInfo,
        [NativeTypeName("uint32_t")] uint propertiesCount,
        Ref<DataGraphPipelinePropertyQueryResultARM> pProperties
    )
    {
        fixed (DataGraphPipelinePropertyQueryResultARM* __dsl_pProperties = pProperties)
        fixed (DataGraphPipelineInfoARM* __dsl_pPipelineInfo = pPipelineInfo)
        {
            return (Result)
                ((IVk)this).GetDataGraphPipelinePropertiesARM(
                    device,
                    __dsl_pPipelineInfo,
                    propertiesCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelinePropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDataGraphPipelinePropertiesARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineInfoARM *")]
            Ref<DataGraphPipelineInfoARM> pPipelineInfo,
        [NativeTypeName("uint32_t")] uint propertiesCount,
        Ref<DataGraphPipelinePropertyQueryResultARM> pProperties
    ) =>
        ThisThread.GetDataGraphPipelinePropertiesARM(
            device,
            pPipelineInfo,
            propertiesCount,
            pProperties
        );

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelineSessionBindPointRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDataGraphPipelineSessionBindPointRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineSessionBindPointRequirementsInfoARM *")]
            DataGraphPipelineSessionBindPointRequirementsInfoARM* pInfo,
        [NativeTypeName("uint32_t *")] uint* pBindPointRequirementCount,
        DataGraphPipelineSessionBindPointRequirementARM* pBindPointRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DataGraphPipelineSessionBindPointRequirementsInfoARM*,
                uint*,
                DataGraphPipelineSessionBindPointRequirementARM*,
                Result>)(
                _slots[454] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[454] = nativeContext.LoadFunction(
                        "vkGetDataGraphPipelineSessionBindPointRequirementsARM",
                        "vulkan"
                    )
            )
        )(device, pInfo, pBindPointRequirementCount, pBindPointRequirements);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelineSessionBindPointRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDataGraphPipelineSessionBindPointRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineSessionBindPointRequirementsInfoARM *")]
            DataGraphPipelineSessionBindPointRequirementsInfoARM* pInfo,
        [NativeTypeName("uint32_t *")] uint* pBindPointRequirementCount,
        DataGraphPipelineSessionBindPointRequirementARM* pBindPointRequirements
    ) =>
        ThisThread.GetDataGraphPipelineSessionBindPointRequirementsARM(
            device,
            pInfo,
            pBindPointRequirementCount,
            pBindPointRequirements
        );

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelineSessionBindPointRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDataGraphPipelineSessionBindPointRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineSessionBindPointRequirementsInfoARM *")]
            Ref<DataGraphPipelineSessionBindPointRequirementsInfoARM> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pBindPointRequirementCount,
        Ref<DataGraphPipelineSessionBindPointRequirementARM> pBindPointRequirements
    )
    {
        fixed (
            DataGraphPipelineSessionBindPointRequirementARM* __dsl_pBindPointRequirements =
                pBindPointRequirements
        )
        fixed (uint* __dsl_pBindPointRequirementCount = pBindPointRequirementCount)
        fixed (DataGraphPipelineSessionBindPointRequirementsInfoARM* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).GetDataGraphPipelineSessionBindPointRequirementsARM(
                    device,
                    __dsl_pInfo,
                    __dsl_pBindPointRequirementCount,
                    __dsl_pBindPointRequirements
                );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelineSessionBindPointRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDataGraphPipelineSessionBindPointRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineSessionBindPointRequirementsInfoARM *")]
            Ref<DataGraphPipelineSessionBindPointRequirementsInfoARM> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pBindPointRequirementCount,
        Ref<DataGraphPipelineSessionBindPointRequirementARM> pBindPointRequirements
    ) =>
        ThisThread.GetDataGraphPipelineSessionBindPointRequirementsARM(
            device,
            pInfo,
            pBindPointRequirementCount,
            pBindPointRequirements
        );

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelineSessionMemoryRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDataGraphPipelineSessionMemoryRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineSessionMemoryRequirementsInfoARM *")]
            DataGraphPipelineSessionMemoryRequirementsInfoARM* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DataGraphPipelineSessionMemoryRequirementsInfoARM*,
                MemoryRequirements2*,
                void>)(
                _slots[455] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[455] = nativeContext.LoadFunction(
                        "vkGetDataGraphPipelineSessionMemoryRequirementsARM",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelineSessionMemoryRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDataGraphPipelineSessionMemoryRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineSessionMemoryRequirementsInfoARM *")]
            DataGraphPipelineSessionMemoryRequirementsInfoARM* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        ThisThread.GetDataGraphPipelineSessionMemoryRequirementsARM(
            device,
            pInfo,
            pMemoryRequirements
        );

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelineSessionMemoryRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDataGraphPipelineSessionMemoryRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineSessionMemoryRequirementsInfoARM *")]
            Ref<DataGraphPipelineSessionMemoryRequirementsInfoARM> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (DataGraphPipelineSessionMemoryRequirementsInfoARM* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetDataGraphPipelineSessionMemoryRequirementsARM(
                device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDataGraphPipelineSessionMemoryRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDataGraphPipelineSessionMemoryRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDataGraphPipelineSessionMemoryRequirementsInfoARM *")]
            Ref<DataGraphPipelineSessionMemoryRequirementsInfoARM> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) =>
        ThisThread.GetDataGraphPipelineSessionMemoryRequirementsARM(
            device,
            pInfo,
            pMemoryRequirements
        );

    [return: NativeTypeName("uint32_t")]
    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeferredOperationMaxConcurrencyKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint IVk.GetDeferredOperationMaxConcurrencyKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DeferredOperationKHRHandle, uint>)(
                _slots[456] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[456] = nativeContext.LoadFunction(
                        "vkGetDeferredOperationMaxConcurrencyKHR",
                        "vulkan"
                    )
            )
        )(device, operation);

    [return: NativeTypeName("uint32_t")]
    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeferredOperationMaxConcurrencyKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDeferredOperationMaxConcurrencyKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation
    ) => ThisThread.GetDeferredOperationMaxConcurrencyKHR(device, operation);

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeferredOperationResultKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDeferredOperationResultKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DeferredOperationKHRHandle, Result>)(
                _slots[457] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[457] = nativeContext.LoadFunction(
                        "vkGetDeferredOperationResultKHR",
                        "vulkan"
                    )
            )
        )(device, operation);

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeferredOperationResultKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeferredOperationResultKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle operation
    ) => ThisThread.GetDeferredOperationResultKHR(device, operation);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDescriptorEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorGetInfoEXT *")] DescriptorGetInfoEXT* pDescriptorInfo,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pDescriptor
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DescriptorGetInfoEXT*, nuint, void*, void>)(
                _slots[458] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[458] = nativeContext.LoadFunction("vkGetDescriptorEXT", "vulkan")
            )
        )(device, pDescriptorInfo, dataSize, pDescriptor);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorGetInfoEXT *")] DescriptorGetInfoEXT* pDescriptorInfo,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pDescriptor
    ) => ThisThread.GetDescriptorEXT(device, pDescriptorInfo, dataSize, pDescriptor);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDescriptorEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorGetInfoEXT *")]
            Ref<DescriptorGetInfoEXT> pDescriptorInfo,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pDescriptor
    )
    {
        fixed (void* __dsl_pDescriptor = pDescriptor)
        fixed (DescriptorGetInfoEXT* __dsl_pDescriptorInfo = pDescriptorInfo)
        {
            ((IVk)this).GetDescriptorEXT(
                device,
                __dsl_pDescriptorInfo,
                dataSize,
                __dsl_pDescriptor
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorGetInfoEXT *")]
            Ref<DescriptorGetInfoEXT> pDescriptorInfo,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pDescriptor
    ) => ThisThread.GetDescriptorEXT(device, pDescriptorInfo, dataSize, pDescriptor);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetHostMappingVALVE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDescriptorSetHostMappingValve(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
        void** ppData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DescriptorSetHandle, void**, void>)(
                _slots[459] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[459] = nativeContext.LoadFunction(
                        "vkGetDescriptorSetHostMappingVALVE",
                        "vulkan"
                    )
            )
        )(device, descriptorSet, ppData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetHostMappingVALVE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetHostMappingValve(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
        void** ppData
    ) => ThisThread.GetDescriptorSetHostMappingValve(device, descriptorSet, ppData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetHostMappingVALVE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDescriptorSetHostMappingValve(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
        Ref2D ppData
    )
    {
        fixed (void** __dsl_ppData = ppData)
        {
            ((IVk)this).GetDescriptorSetHostMappingValve(device, descriptorSet, __dsl_ppData);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetHostMappingVALVE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetHostMappingValve(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
        Ref2D ppData
    ) => ThisThread.GetDescriptorSetHostMappingValve(device, descriptorSet, ppData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutBindingOffsetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDescriptorSetLayoutBindingOffsetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint binding,
        [NativeTypeName("VkDeviceSize *")] ulong* pOffset
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DescriptorSetLayoutHandle, uint, ulong*, void>)(
                _slots[460] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[460] = nativeContext.LoadFunction(
                        "vkGetDescriptorSetLayoutBindingOffsetEXT",
                        "vulkan"
                    )
            )
        )(device, layout, binding, pOffset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutBindingOffsetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutBindingOffsetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint binding,
        [NativeTypeName("VkDeviceSize *")] ulong* pOffset
    ) => ThisThread.GetDescriptorSetLayoutBindingOffsetEXT(device, layout, binding, pOffset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutBindingOffsetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDescriptorSetLayoutBindingOffsetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint binding,
        [NativeTypeName("VkDeviceSize *")] Ref<ulong> pOffset
    )
    {
        fixed (ulong* __dsl_pOffset = pOffset)
        {
            ((IVk)this).GetDescriptorSetLayoutBindingOffsetEXT(
                device,
                layout,
                binding,
                __dsl_pOffset
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutBindingOffsetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutBindingOffsetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle layout,
        [NativeTypeName("uint32_t")] uint binding,
        [NativeTypeName("VkDeviceSize *")] Ref<ulong> pOffset
    ) => ThisThread.GetDescriptorSetLayoutBindingOffsetEXT(device, layout, binding, pOffset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutHostMappingInfoVALVE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDescriptorSetLayoutHostMappingInfoValve(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetBindingReferenceVALVE *")]
            DescriptorSetBindingReferenceValve* pBindingReference,
        DescriptorSetLayoutHostMappingInfoValve* pHostMapping
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DescriptorSetBindingReferenceValve*,
                DescriptorSetLayoutHostMappingInfoValve*,
                void>)(
                _slots[461] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[461] = nativeContext.LoadFunction(
                        "vkGetDescriptorSetLayoutHostMappingInfoVALVE",
                        "vulkan"
                    )
            )
        )(device, pBindingReference, pHostMapping);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutHostMappingInfoVALVE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutHostMappingInfoValve(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetBindingReferenceVALVE *")]
            DescriptorSetBindingReferenceValve* pBindingReference,
        DescriptorSetLayoutHostMappingInfoValve* pHostMapping
    ) =>
        ThisThread.GetDescriptorSetLayoutHostMappingInfoValve(
            device,
            pBindingReference,
            pHostMapping
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutHostMappingInfoVALVE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDescriptorSetLayoutHostMappingInfoValve(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetBindingReferenceVALVE *")]
            Ref<DescriptorSetBindingReferenceValve> pBindingReference,
        Ref<DescriptorSetLayoutHostMappingInfoValve> pHostMapping
    )
    {
        fixed (DescriptorSetLayoutHostMappingInfoValve* __dsl_pHostMapping = pHostMapping)
        fixed (DescriptorSetBindingReferenceValve* __dsl_pBindingReference = pBindingReference)
        {
            ((IVk)this).GetDescriptorSetLayoutHostMappingInfoValve(
                device,
                __dsl_pBindingReference,
                __dsl_pHostMapping
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutHostMappingInfoVALVE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutHostMappingInfoValve(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetBindingReferenceVALVE *")]
            Ref<DescriptorSetBindingReferenceValve> pBindingReference,
        Ref<DescriptorSetLayoutHostMappingInfoValve> pHostMapping
    ) =>
        ThisThread.GetDescriptorSetLayoutHostMappingInfoValve(
            device,
            pBindingReference,
            pHostMapping
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSizeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDescriptorSetLayoutSizeEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle layout,
        [NativeTypeName("VkDeviceSize *")] ulong* pLayoutSizeInBytes
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DescriptorSetLayoutHandle, ulong*, void>)(
                _slots[462] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[462] = nativeContext.LoadFunction(
                        "vkGetDescriptorSetLayoutSizeEXT",
                        "vulkan"
                    )
            )
        )(device, layout, pLayoutSizeInBytes);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSizeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutSizeEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle layout,
        [NativeTypeName("VkDeviceSize *")] ulong* pLayoutSizeInBytes
    ) => ThisThread.GetDescriptorSetLayoutSizeEXT(device, layout, pLayoutSizeInBytes);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSizeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDescriptorSetLayoutSizeEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle layout,
        [NativeTypeName("VkDeviceSize *")] Ref<ulong> pLayoutSizeInBytes
    )
    {
        fixed (ulong* __dsl_pLayoutSizeInBytes = pLayoutSizeInBytes)
        {
            ((IVk)this).GetDescriptorSetLayoutSizeEXT(device, layout, __dsl_pLayoutSizeInBytes);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSizeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutSizeEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle layout,
        [NativeTypeName("VkDeviceSize *")] Ref<ulong> pLayoutSizeInBytes
    ) => ThisThread.GetDescriptorSetLayoutSizeEXT(device, layout, pLayoutSizeInBytes);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDescriptorSetLayoutSupport(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            DescriptorSetLayoutCreateInfo* pCreateInfo,
        DescriptorSetLayoutSupport* pSupport
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DescriptorSetLayoutCreateInfo*,
                DescriptorSetLayoutSupport*,
                void>)(
                _slots[463] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[463] = nativeContext.LoadFunction(
                        "vkGetDescriptorSetLayoutSupport",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pSupport);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutSupport(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            DescriptorSetLayoutCreateInfo* pCreateInfo,
        DescriptorSetLayoutSupport* pSupport
    ) => ThisThread.GetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDescriptorSetLayoutSupport(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
        Ref<DescriptorSetLayoutSupport> pSupport
    )
    {
        fixed (DescriptorSetLayoutSupport* __dsl_pSupport = pSupport)
        fixed (DescriptorSetLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            ((IVk)this).GetDescriptorSetLayoutSupport(device, __dsl_pCreateInfo, __dsl_pSupport);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutSupport(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
        Ref<DescriptorSetLayoutSupport> pSupport
    ) => ThisThread.GetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance3"],
        ImpliesSets = [
            "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
            "VK_KHR_maintenance3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupportKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDescriptorSetLayoutSupportKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            DescriptorSetLayoutCreateInfo* pCreateInfo,
        DescriptorSetLayoutSupport* pSupport
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DescriptorSetLayoutCreateInfo*,
                DescriptorSetLayoutSupport*,
                void>)(
                _slots[464] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[464] = nativeContext.LoadFunction(
                        "vkGetDescriptorSetLayoutSupportKHR",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pSupport);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance3"],
        ImpliesSets = [
            "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
            "VK_KHR_maintenance3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupportKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutSupportKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            DescriptorSetLayoutCreateInfo* pCreateInfo,
        DescriptorSetLayoutSupport* pSupport
    ) => ThisThread.GetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance3"],
        ImpliesSets = [
            "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
            "VK_KHR_maintenance3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupportKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDescriptorSetLayoutSupportKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
        Ref<DescriptorSetLayoutSupport> pSupport
    )
    {
        fixed (DescriptorSetLayoutSupport* __dsl_pSupport = pSupport)
        fixed (DescriptorSetLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            ((IVk)this).GetDescriptorSetLayoutSupportKHR(device, __dsl_pCreateInfo, __dsl_pSupport);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance3"],
        ImpliesSets = [
            "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
            "VK_KHR_maintenance3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupportKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutSupportKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
        Ref<DescriptorSetLayoutSupport> pSupport
    ) => ThisThread.GetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceAccelerationStructureCompatibilityKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceAccelerationStructureCompatibilityKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureVersionInfoKHR *")]
            AccelerationStructureVersionInfoKHR* pVersionInfo,
        AccelerationStructureCompatibilityKHR* pCompatibility
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                AccelerationStructureVersionInfoKHR*,
                AccelerationStructureCompatibilityKHR*,
                void>)(
                _slots[465] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[465] = nativeContext.LoadFunction(
                        "vkGetDeviceAccelerationStructureCompatibilityKHR",
                        "vulkan"
                    )
            )
        )(device, pVersionInfo, pCompatibility);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceAccelerationStructureCompatibilityKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceAccelerationStructureCompatibilityKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureVersionInfoKHR *")]
            AccelerationStructureVersionInfoKHR* pVersionInfo,
        AccelerationStructureCompatibilityKHR* pCompatibility
    ) =>
        ThisThread.GetDeviceAccelerationStructureCompatibilityKHR(
            device,
            pVersionInfo,
            pCompatibility
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceAccelerationStructureCompatibilityKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceAccelerationStructureCompatibilityKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureVersionInfoKHR *")]
            Ref<AccelerationStructureVersionInfoKHR> pVersionInfo,
        Ref<AccelerationStructureCompatibilityKHR> pCompatibility
    )
    {
        fixed (AccelerationStructureCompatibilityKHR* __dsl_pCompatibility = pCompatibility)
        fixed (AccelerationStructureVersionInfoKHR* __dsl_pVersionInfo = pVersionInfo)
        {
            ((IVk)this).GetDeviceAccelerationStructureCompatibilityKHR(
                device,
                __dsl_pVersionInfo,
                __dsl_pCompatibility
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceAccelerationStructureCompatibilityKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceAccelerationStructureCompatibilityKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkAccelerationStructureVersionInfoKHR *")]
            Ref<AccelerationStructureVersionInfoKHR> pVersionInfo,
        Ref<AccelerationStructureCompatibilityKHR> pCompatibility
    ) =>
        ThisThread.GetDeviceAccelerationStructureCompatibilityKHR(
            device,
            pVersionInfo,
            pCompatibility
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            DeviceBufferMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeviceBufferMemoryRequirements*,
                MemoryRequirements2*,
                void>)(
                _slots[466] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[466] = nativeContext.LoadFunction(
                        "vkGetDeviceBufferMemoryRequirements",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            DeviceBufferMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => ThisThread.GetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            Ref<DeviceBufferMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (DeviceBufferMemoryRequirements* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetDeviceBufferMemoryRequirements(
                device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            Ref<DeviceBufferMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => ThisThread.GetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceBufferMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            DeviceBufferMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeviceBufferMemoryRequirements*,
                MemoryRequirements2*,
                void>)(
                _slots[467] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[467] = nativeContext.LoadFunction(
                        "vkGetDeviceBufferMemoryRequirementsKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceBufferMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            DeviceBufferMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => ThisThread.GetDeviceBufferMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceBufferMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            Ref<DeviceBufferMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (DeviceBufferMemoryRequirements* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetDeviceBufferMemoryRequirementsKHR(
                device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceBufferMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            Ref<DeviceBufferMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => ThisThread.GetDeviceBufferMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_fault"],
        ImpliesSets = [
            "VK_EXT_device_fault+VK_KHR_get_physical_device_properties2",
            "VK_EXT_device_fault+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceFaultInfoEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDeviceFaultInfoEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        DeviceFaultCountsEXT* pFaultCounts,
        DeviceFaultInfoEXT* pFaultInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DeviceFaultCountsEXT*, DeviceFaultInfoEXT*, Result>)(
                _slots[468] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[468] = nativeContext.LoadFunction("vkGetDeviceFaultInfoEXT", "vulkan")
            )
        )(device, pFaultCounts, pFaultInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_fault"],
        ImpliesSets = [
            "VK_EXT_device_fault+VK_KHR_get_physical_device_properties2",
            "VK_EXT_device_fault+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceFaultInfoEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceFaultInfoEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        DeviceFaultCountsEXT* pFaultCounts,
        DeviceFaultInfoEXT* pFaultInfo
    ) => ThisThread.GetDeviceFaultInfoEXT(device, pFaultCounts, pFaultInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_fault"],
        ImpliesSets = [
            "VK_EXT_device_fault+VK_KHR_get_physical_device_properties2",
            "VK_EXT_device_fault+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceFaultInfoEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDeviceFaultInfoEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        Ref<DeviceFaultCountsEXT> pFaultCounts,
        Ref<DeviceFaultInfoEXT> pFaultInfo
    )
    {
        fixed (DeviceFaultInfoEXT* __dsl_pFaultInfo = pFaultInfo)
        fixed (DeviceFaultCountsEXT* __dsl_pFaultCounts = pFaultCounts)
        {
            return (Result)
                ((IVk)this).GetDeviceFaultInfoEXT(device, __dsl_pFaultCounts, __dsl_pFaultInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_fault"],
        ImpliesSets = [
            "VK_EXT_device_fault+VK_KHR_get_physical_device_properties2",
            "VK_EXT_device_fault+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceFaultInfoEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceFaultInfoEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        Ref<DeviceFaultCountsEXT> pFaultCounts,
        Ref<DeviceFaultInfoEXT> pFaultInfo
    ) => ThisThread.GetDeviceFaultInfoEXT(device, pFaultCounts, pFaultInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceGroupPeerMemoryFeatures(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")] PeerMemoryFeatureFlags* pPeerMemoryFeatures
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, uint, uint, PeerMemoryFeatureFlags*, void>)(
                _slots[469] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[469] = nativeContext.LoadFunction(
                        "vkGetDeviceGroupPeerMemoryFeatures",
                        "vulkan"
                    )
            )
        )(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceGroupPeerMemoryFeatures(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")] PeerMemoryFeatureFlags* pPeerMemoryFeatures
    ) =>
        ThisThread.GetDeviceGroupPeerMemoryFeatures(
            device,
            heapIndex,
            localDeviceIndex,
            remoteDeviceIndex,
            pPeerMemoryFeatures
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceGroupPeerMemoryFeatures(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")]
            Ref<PeerMemoryFeatureFlags> pPeerMemoryFeatures
    )
    {
        fixed (PeerMemoryFeatureFlags* __dsl_pPeerMemoryFeatures = pPeerMemoryFeatures)
        {
            ((IVk)this).GetDeviceGroupPeerMemoryFeatures(
                device,
                heapIndex,
                localDeviceIndex,
                remoteDeviceIndex,
                __dsl_pPeerMemoryFeatures
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceGroupPeerMemoryFeatures(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")]
            Ref<PeerMemoryFeatureFlags> pPeerMemoryFeatures
    ) =>
        ThisThread.GetDeviceGroupPeerMemoryFeatures(
            device,
            heapIndex,
            localDeviceIndex,
            remoteDeviceIndex,
            pPeerMemoryFeatures
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeaturesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceGroupPeerMemoryFeaturesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")] PeerMemoryFeatureFlags* pPeerMemoryFeatures
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, uint, uint, PeerMemoryFeatureFlags*, void>)(
                _slots[470] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[470] = nativeContext.LoadFunction(
                        "vkGetDeviceGroupPeerMemoryFeaturesKHR",
                        "vulkan"
                    )
            )
        )(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeaturesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceGroupPeerMemoryFeaturesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")] PeerMemoryFeatureFlags* pPeerMemoryFeatures
    ) =>
        ThisThread.GetDeviceGroupPeerMemoryFeaturesKHR(
            device,
            heapIndex,
            localDeviceIndex,
            remoteDeviceIndex,
            pPeerMemoryFeatures
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeaturesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceGroupPeerMemoryFeaturesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")]
            Ref<PeerMemoryFeatureFlags> pPeerMemoryFeatures
    )
    {
        fixed (PeerMemoryFeatureFlags* __dsl_pPeerMemoryFeatures = pPeerMemoryFeatures)
        {
            ((IVk)this).GetDeviceGroupPeerMemoryFeaturesKHR(
                device,
                heapIndex,
                localDeviceIndex,
                remoteDeviceIndex,
                __dsl_pPeerMemoryFeatures
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeaturesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceGroupPeerMemoryFeaturesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")]
            Ref<PeerMemoryFeatureFlags> pPeerMemoryFeatures
    ) =>
        ThisThread.GetDeviceGroupPeerMemoryFeaturesKHR(
            device,
            heapIndex,
            localDeviceIndex,
            remoteDeviceIndex,
            pPeerMemoryFeatures
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPresentCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDeviceGroupPresentCapabilitiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        DeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DeviceGroupPresentCapabilitiesKHR*, Result>)(
                _slots[471] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[471] = nativeContext.LoadFunction(
                        "vkGetDeviceGroupPresentCapabilitiesKHR",
                        "vulkan"
                    )
            )
        )(device, pDeviceGroupPresentCapabilities);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPresentCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceGroupPresentCapabilitiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        DeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities
    ) => ThisThread.GetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPresentCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDeviceGroupPresentCapabilitiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        Ref<DeviceGroupPresentCapabilitiesKHR> pDeviceGroupPresentCapabilities
    )
    {
        fixed (
            DeviceGroupPresentCapabilitiesKHR* __dsl_pDeviceGroupPresentCapabilities =
                pDeviceGroupPresentCapabilities
        )
        {
            return (Result)
                ((IVk)this).GetDeviceGroupPresentCapabilitiesKHR(
                    device,
                    __dsl_pDeviceGroupPresentCapabilities
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPresentCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceGroupPresentCapabilitiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        Ref<DeviceGroupPresentCapabilitiesKHR> pDeviceGroupPresentCapabilities
    ) => ThisThread.GetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupSurfacePresentModesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDeviceGroupSurfacePresentModesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("VkDeviceGroupPresentModeFlagsKHR *")]
            DeviceGroupPresentModeFlagsKHR* pModes
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                SurfaceKHRHandle,
                DeviceGroupPresentModeFlagsKHR*,
                Result>)(
                _slots[472] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[472] = nativeContext.LoadFunction(
                        "vkGetDeviceGroupSurfacePresentModesKHR",
                        "vulkan"
                    )
            )
        )(device, surface, pModes);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupSurfacePresentModesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceGroupSurfacePresentModesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("VkDeviceGroupPresentModeFlagsKHR *")]
            DeviceGroupPresentModeFlagsKHR* pModes
    ) => ThisThread.GetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupSurfacePresentModesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDeviceGroupSurfacePresentModesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("VkDeviceGroupPresentModeFlagsKHR *")]
            Ref<DeviceGroupPresentModeFlagsKHR> pModes
    )
    {
        fixed (DeviceGroupPresentModeFlagsKHR* __dsl_pModes = pModes)
        {
            return (Result)
                ((IVk)this).GetDeviceGroupSurfacePresentModesKHR(device, surface, __dsl_pModes);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupSurfacePresentModesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceGroupSurfacePresentModesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("VkDeviceGroupPresentModeFlagsKHR *")]
            Ref<DeviceGroupPresentModeFlagsKHR> pModes
    ) => ThisThread.GetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceImageMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeviceImageMemoryRequirements*,
                MemoryRequirements2*,
                void>)(
                _slots[473] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[473] = nativeContext.LoadFunction(
                        "vkGetDeviceImageMemoryRequirements",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => ThisThread.GetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceImageMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetDeviceImageMemoryRequirements(
                device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => ThisThread.GetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceImageMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeviceImageMemoryRequirements*,
                MemoryRequirements2*,
                void>)(
                _slots[474] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[474] = nativeContext.LoadFunction(
                        "vkGetDeviceImageMemoryRequirementsKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => ThisThread.GetDeviceImageMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceImageMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetDeviceImageMemoryRequirementsKHR(
                device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => ThisThread.GetDeviceImageMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeviceImageMemoryRequirements*,
                uint*,
                SparseImageMemoryRequirements2*,
                void>)(
                _slots[475] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[475] = nativeContext.LoadFunction(
                        "vkGetDeviceImageSparseMemoryRequirements",
                        "vulkan"
                    )
            )
        )(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        ThisThread.GetDeviceImageSparseMemoryRequirements(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    )
    {
        fixed (
            SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                pSparseMemoryRequirements
        )
        fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
        fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetDeviceImageSparseMemoryRequirements(
                device,
                __dsl_pInfo,
                __dsl_pSparseMemoryRequirementCount,
                __dsl_pSparseMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    ) =>
        ThisThread.GetDeviceImageSparseMemoryRequirements(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceImageSparseMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeviceImageMemoryRequirements*,
                uint*,
                SparseImageMemoryRequirements2*,
                void>)(
                _slots[476] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[476] = nativeContext.LoadFunction(
                        "vkGetDeviceImageSparseMemoryRequirementsKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSparseMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        ThisThread.GetDeviceImageSparseMemoryRequirementsKHR(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceImageSparseMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    )
    {
        fixed (
            SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                pSparseMemoryRequirements
        )
        fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
        fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetDeviceImageSparseMemoryRequirementsKHR(
                device,
                __dsl_pInfo,
                __dsl_pSparseMemoryRequirementCount,
                __dsl_pSparseMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSparseMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    ) =>
        ThisThread.GetDeviceImageSparseMemoryRequirementsKHR(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceImageSubresourceLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")] DeviceImageSubresourceInfo* pInfo,
        SubresourceLayout2* pLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeviceImageSubresourceInfo*,
                SubresourceLayout2*,
                void>)(
                _slots[477] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[477] = nativeContext.LoadFunction(
                        "vkGetDeviceImageSubresourceLayout",
                        "vulkan"
                    )
            )
        )(device, pInfo, pLayout);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSubresourceLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")] DeviceImageSubresourceInfo* pInfo,
        SubresourceLayout2* pLayout
    ) => ThisThread.GetDeviceImageSubresourceLayout(device, pInfo, pLayout);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceImageSubresourceLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
            Ref<DeviceImageSubresourceInfo> pInfo,
        Ref<SubresourceLayout2> pLayout
    )
    {
        fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
        fixed (DeviceImageSubresourceInfo* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetDeviceImageSubresourceLayout(device, __dsl_pInfo, __dsl_pLayout);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSubresourceLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
            Ref<DeviceImageSubresourceInfo> pInfo,
        Ref<SubresourceLayout2> pLayout
    ) => ThisThread.GetDeviceImageSubresourceLayout(device, pInfo, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayoutKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceImageSubresourceLayoutKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")] DeviceImageSubresourceInfo* pInfo,
        SubresourceLayout2* pLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeviceImageSubresourceInfo*,
                SubresourceLayout2*,
                void>)(
                _slots[478] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[478] = nativeContext.LoadFunction(
                        "vkGetDeviceImageSubresourceLayoutKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayoutKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSubresourceLayoutKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")] DeviceImageSubresourceInfo* pInfo,
        SubresourceLayout2* pLayout
    ) => ThisThread.GetDeviceImageSubresourceLayoutKHR(device, pInfo, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayoutKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceImageSubresourceLayoutKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
            Ref<DeviceImageSubresourceInfo> pInfo,
        Ref<SubresourceLayout2> pLayout
    )
    {
        fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
        fixed (DeviceImageSubresourceInfo* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetDeviceImageSubresourceLayoutKHR(device, __dsl_pInfo, __dsl_pLayout);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayoutKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSubresourceLayoutKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
            Ref<DeviceImageSubresourceInfo> pInfo,
        Ref<SubresourceLayout2> pLayout
    ) => ThisThread.GetDeviceImageSubresourceLayoutKHR(device, pInfo, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryCommitment")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceMemoryCommitment(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("VkDeviceSize *")] ulong* pCommittedMemoryInBytes
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DeviceMemoryHandle, ulong*, void>)(
                _slots[479] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[479] = nativeContext.LoadFunction(
                        "vkGetDeviceMemoryCommitment",
                        "vulkan"
                    )
            )
        )(device, memory, pCommittedMemoryInBytes);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryCommitment")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceMemoryCommitment(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("VkDeviceSize *")] ulong* pCommittedMemoryInBytes
    ) => ThisThread.GetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryCommitment")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceMemoryCommitment(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("VkDeviceSize *")] Ref<ulong> pCommittedMemoryInBytes
    )
    {
        fixed (ulong* __dsl_pCommittedMemoryInBytes = pCommittedMemoryInBytes)
        {
            ((IVk)this).GetDeviceMemoryCommitment(device, memory, __dsl_pCommittedMemoryInBytes);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryCommitment")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceMemoryCommitment(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("VkDeviceSize *")] Ref<ulong> pCommittedMemoryInBytes
    ) => ThisThread.GetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetDeviceMemoryOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            DeviceMemoryOpaqueCaptureAddressInfo* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DeviceMemoryOpaqueCaptureAddressInfo*, ulong>)(
                _slots[480] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[480] = nativeContext.LoadFunction(
                        "vkGetDeviceMemoryOpaqueCaptureAddress",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetDeviceMemoryOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            DeviceMemoryOpaqueCaptureAddressInfo* pInfo
    ) => ThisThread.GetDeviceMemoryOpaqueCaptureAddress(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetDeviceMemoryOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            Ref<DeviceMemoryOpaqueCaptureAddressInfo> pInfo
    )
    {
        fixed (DeviceMemoryOpaqueCaptureAddressInfo* __dsl_pInfo = pInfo)
        {
            return (ulong)((IVk)this).GetDeviceMemoryOpaqueCaptureAddress(device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetDeviceMemoryOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            Ref<DeviceMemoryOpaqueCaptureAddressInfo> pInfo
    ) => ThisThread.GetDeviceMemoryOpaqueCaptureAddress(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetDeviceMemoryOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            DeviceMemoryOpaqueCaptureAddressInfo* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DeviceMemoryOpaqueCaptureAddressInfo*, ulong>)(
                _slots[481] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[481] = nativeContext.LoadFunction(
                        "vkGetDeviceMemoryOpaqueCaptureAddressKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetDeviceMemoryOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            DeviceMemoryOpaqueCaptureAddressInfo* pInfo
    ) => ThisThread.GetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetDeviceMemoryOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            Ref<DeviceMemoryOpaqueCaptureAddressInfo> pInfo
    )
    {
        fixed (DeviceMemoryOpaqueCaptureAddressInfo* __dsl_pInfo = pInfo)
        {
            return (ulong)((IVk)this).GetDeviceMemoryOpaqueCaptureAddressKHR(device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetDeviceMemoryOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            Ref<DeviceMemoryOpaqueCaptureAddressInfo> pInfo
    ) => ThisThread.GetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMicromapCompatibilityEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceMicromapCompatibilityEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMicromapVersionInfoEXT *")] MicromapVersionInfoEXT* pVersionInfo,
        AccelerationStructureCompatibilityKHR* pCompatibility
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                MicromapVersionInfoEXT*,
                AccelerationStructureCompatibilityKHR*,
                void>)(
                _slots[482] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[482] = nativeContext.LoadFunction(
                        "vkGetDeviceMicromapCompatibilityEXT",
                        "vulkan"
                    )
            )
        )(device, pVersionInfo, pCompatibility);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMicromapCompatibilityEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceMicromapCompatibilityEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMicromapVersionInfoEXT *")] MicromapVersionInfoEXT* pVersionInfo,
        AccelerationStructureCompatibilityKHR* pCompatibility
    ) => ThisThread.GetDeviceMicromapCompatibilityEXT(device, pVersionInfo, pCompatibility);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMicromapCompatibilityEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceMicromapCompatibilityEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMicromapVersionInfoEXT *")]
            Ref<MicromapVersionInfoEXT> pVersionInfo,
        Ref<AccelerationStructureCompatibilityKHR> pCompatibility
    )
    {
        fixed (AccelerationStructureCompatibilityKHR* __dsl_pCompatibility = pCompatibility)
        fixed (MicromapVersionInfoEXT* __dsl_pVersionInfo = pVersionInfo)
        {
            ((IVk)this).GetDeviceMicromapCompatibilityEXT(
                device,
                __dsl_pVersionInfo,
                __dsl_pCompatibility
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMicromapCompatibilityEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceMicromapCompatibilityEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMicromapVersionInfoEXT *")]
            Ref<MicromapVersionInfoEXT> pVersionInfo,
        Ref<AccelerationStructureCompatibilityKHR> pCompatibility
    ) => ThisThread.GetDeviceMicromapCompatibilityEXT(device, pVersionInfo, pCompatibility);

    [return: NativeTypeName("PFN_vkVoidFunction")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceProcAddr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PFNVkVoidFunction IVk.GetDeviceProcAddr(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const char *")] sbyte* pName
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, sbyte*, PFNVkVoidFunction>)(
                _slots[483] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[483] = nativeContext.LoadFunction("vkGetDeviceProcAddr", "vulkan")
            )
        )(device, pName);

    [return: NativeTypeName("PFN_vkVoidFunction")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceProcAddr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PFNVkVoidFunction GetDeviceProcAddr(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const char *")] sbyte* pName
    ) => ThisThread.GetDeviceProcAddr(device, pName);

    [return: NativeTypeName("PFN_vkVoidFunction")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceProcAddr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PFNVkVoidFunction IVk.GetDeviceProcAddr(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const char *")] Ref<sbyte> pName
    )
    {
        fixed (sbyte* __dsl_pName = pName)
        {
            return (PFNVkVoidFunction)((IVk)this).GetDeviceProcAddr(device, __dsl_pName);
        }
    }

    [return: NativeTypeName("PFN_vkVoidFunction")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceProcAddr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PFNVkVoidFunction GetDeviceProcAddr(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const char *")] Ref<sbyte> pName
    ) => ThisThread.GetDeviceProcAddr(device, pName);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceQueue(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t")] uint queueIndex,
        [NativeTypeName("VkQueue *")] QueueHandle* pQueue
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, uint, QueueHandle*, void>)(
                _slots[484] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[484] = nativeContext.LoadFunction("vkGetDeviceQueue", "vulkan")
            )
        )(device, queueFamilyIndex, queueIndex, pQueue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceQueue(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t")] uint queueIndex,
        [NativeTypeName("VkQueue *")] QueueHandle* pQueue
    ) => ThisThread.GetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceQueue(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t")] uint queueIndex,
        [NativeTypeName("VkQueue *")] Ref<QueueHandle> pQueue
    )
    {
        fixed (QueueHandle* __dsl_pQueue = pQueue)
        {
            ((IVk)this).GetDeviceQueue(device, queueFamilyIndex, queueIndex, __dsl_pQueue);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceQueue(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t")] uint queueIndex,
        [NativeTypeName("VkQueue *")] Ref<QueueHandle> pQueue
    ) => ThisThread.GetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceQueue2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceQueueInfo2 *")] DeviceQueueInfo2* pQueueInfo,
        [NativeTypeName("VkQueue *")] QueueHandle* pQueue
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DeviceQueueInfo2*, QueueHandle*, void>)(
                _slots[485] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[485] = nativeContext.LoadFunction("vkGetDeviceQueue2", "vulkan")
            )
        )(device, pQueueInfo, pQueue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceQueue2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceQueueInfo2 *")] DeviceQueueInfo2* pQueueInfo,
        [NativeTypeName("VkQueue *")] QueueHandle* pQueue
    ) => ThisThread.GetDeviceQueue2(device, pQueueInfo, pQueue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceQueue2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceQueueInfo2 *")] Ref<DeviceQueueInfo2> pQueueInfo,
        [NativeTypeName("VkQueue *")] Ref<QueueHandle> pQueue
    )
    {
        fixed (QueueHandle* __dsl_pQueue = pQueue)
        fixed (DeviceQueueInfo2* __dsl_pQueueInfo = pQueueInfo)
        {
            ((IVk)this).GetDeviceQueue2(device, __dsl_pQueueInfo, __dsl_pQueue);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceQueue2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceQueueInfo2 *")] Ref<DeviceQueueInfo2> pQueueInfo,
        [NativeTypeName("VkQueue *")] Ref<QueueHandle> pQueue
    ) => ThisThread.GetDeviceQueue2(device, pQueueInfo, pQueue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle renderpass,
        Extent2D* pMaxWorkgroupSize
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, RenderPassHandle, Extent2D*, Result>)(
                _slots[486] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[486] = nativeContext.LoadFunction(
                        "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI",
                        "vulkan"
                    )
            )
        )(device, renderpass, pMaxWorkgroupSize);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle renderpass,
        Extent2D* pMaxWorkgroupSize
    ) =>
        ThisThread.GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
            device,
            renderpass,
            pMaxWorkgroupSize
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle renderpass,
        Ref<Extent2D> pMaxWorkgroupSize
    )
    {
        fixed (Extent2D* __dsl_pMaxWorkgroupSize = pMaxWorkgroupSize)
        {
            return (Result)
                ((IVk)this).GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
                    device,
                    renderpass,
                    __dsl_pMaxWorkgroupSize
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle renderpass,
        Ref<Extent2D> pMaxWorkgroupSize
    ) =>
        ThisThread.GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
            device,
            renderpass,
            pMaxWorkgroupSize
        );

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceTensorMemoryRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceTensorMemoryRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceTensorMemoryRequirementsARM *")]
            DeviceTensorMemoryRequirementsARM* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeviceTensorMemoryRequirementsARM*,
                MemoryRequirements2*,
                void>)(
                _slots[487] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[487] = nativeContext.LoadFunction(
                        "vkGetDeviceTensorMemoryRequirementsARM",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceTensorMemoryRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceTensorMemoryRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceTensorMemoryRequirementsARM *")]
            DeviceTensorMemoryRequirementsARM* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => ThisThread.GetDeviceTensorMemoryRequirementsARM(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceTensorMemoryRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetDeviceTensorMemoryRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceTensorMemoryRequirementsARM *")]
            Ref<DeviceTensorMemoryRequirementsARM> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (DeviceTensorMemoryRequirementsARM* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetDeviceTensorMemoryRequirementsARM(
                device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceTensorMemoryRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceTensorMemoryRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceTensorMemoryRequirementsARM *")]
            Ref<DeviceTensorMemoryRequirementsARM> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => ThisThread.GetDeviceTensorMemoryRequirementsARM(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModeProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDisplayModeProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayModeProperties2KHR* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                DisplayKHRHandle,
                uint*,
                DisplayModeProperties2KHR*,
                Result>)(
                _slots[488] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[488] = nativeContext.LoadFunction(
                        "vkGetDisplayModeProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, display, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModeProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayModeProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayModeProperties2KHR* pProperties
    ) =>
        ThisThread.GetDisplayModeProperties2KHR(
            physicalDevice,
            display,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModeProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDisplayModeProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayModeProperties2KHR> pProperties
    )
    {
        fixed (DisplayModeProperties2KHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        {
            return (Result)
                ((IVk)this).GetDisplayModeProperties2KHR(
                    physicalDevice,
                    display,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModeProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayModeProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayModeProperties2KHR> pProperties
    ) =>
        ThisThread.GetDisplayModeProperties2KHR(
            physicalDevice,
            display,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDisplayModePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayModePropertiesKHR* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                DisplayKHRHandle,
                uint*,
                DisplayModePropertiesKHR*,
                Result>)(
                _slots[489] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[489] = nativeContext.LoadFunction(
                        "vkGetDisplayModePropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, display, pPropertyCount, pProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayModePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayModePropertiesKHR* pProperties
    ) =>
        ThisThread.GetDisplayModePropertiesKHR(
            physicalDevice,
            display,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDisplayModePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayModePropertiesKHR> pProperties
    )
    {
        fixed (DisplayModePropertiesKHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        {
            return (Result)
                ((IVk)this).GetDisplayModePropertiesKHR(
                    physicalDevice,
                    display,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayModePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayModePropertiesKHR> pProperties
    ) =>
        ThisThread.GetDisplayModePropertiesKHR(
            physicalDevice,
            display,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilities2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDisplayPlaneCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkDisplayPlaneInfo2KHR *")] DisplayPlaneInfo2KHR* pDisplayPlaneInfo,
        DisplayPlaneCapabilities2KHR* pCapabilities
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                DisplayPlaneInfo2KHR*,
                DisplayPlaneCapabilities2KHR*,
                Result>)(
                _slots[490] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[490] = nativeContext.LoadFunction(
                        "vkGetDisplayPlaneCapabilities2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pDisplayPlaneInfo, pCapabilities);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilities2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayPlaneCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkDisplayPlaneInfo2KHR *")] DisplayPlaneInfo2KHR* pDisplayPlaneInfo,
        DisplayPlaneCapabilities2KHR* pCapabilities
    ) =>
        ThisThread.GetDisplayPlaneCapabilities2KHR(
            physicalDevice,
            pDisplayPlaneInfo,
            pCapabilities
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilities2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDisplayPlaneCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkDisplayPlaneInfo2KHR *")]
            Ref<DisplayPlaneInfo2KHR> pDisplayPlaneInfo,
        Ref<DisplayPlaneCapabilities2KHR> pCapabilities
    )
    {
        fixed (DisplayPlaneCapabilities2KHR* __dsl_pCapabilities = pCapabilities)
        fixed (DisplayPlaneInfo2KHR* __dsl_pDisplayPlaneInfo = pDisplayPlaneInfo)
        {
            return (Result)
                ((IVk)this).GetDisplayPlaneCapabilities2KHR(
                    physicalDevice,
                    __dsl_pDisplayPlaneInfo,
                    __dsl_pCapabilities
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilities2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayPlaneCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkDisplayPlaneInfo2KHR *")]
            Ref<DisplayPlaneInfo2KHR> pDisplayPlaneInfo,
        Ref<DisplayPlaneCapabilities2KHR> pCapabilities
    ) =>
        ThisThread.GetDisplayPlaneCapabilities2KHR(
            physicalDevice,
            pDisplayPlaneInfo,
            pCapabilities
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDisplayPlaneCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayModeKHR")] DisplayModeKHRHandle mode,
        [NativeTypeName("uint32_t")] uint planeIndex,
        DisplayPlaneCapabilitiesKHR* pCapabilities
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                DisplayModeKHRHandle,
                uint,
                DisplayPlaneCapabilitiesKHR*,
                Result>)(
                _slots[491] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[491] = nativeContext.LoadFunction(
                        "vkGetDisplayPlaneCapabilitiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, mode, planeIndex, pCapabilities);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayPlaneCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayModeKHR")] DisplayModeKHRHandle mode,
        [NativeTypeName("uint32_t")] uint planeIndex,
        DisplayPlaneCapabilitiesKHR* pCapabilities
    ) => ThisThread.GetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDisplayPlaneCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayModeKHR")] DisplayModeKHRHandle mode,
        [NativeTypeName("uint32_t")] uint planeIndex,
        Ref<DisplayPlaneCapabilitiesKHR> pCapabilities
    )
    {
        fixed (DisplayPlaneCapabilitiesKHR* __dsl_pCapabilities = pCapabilities)
        {
            return (Result)
                ((IVk)this).GetDisplayPlaneCapabilitiesKHR(
                    physicalDevice,
                    mode,
                    planeIndex,
                    __dsl_pCapabilities
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayPlaneCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayModeKHR")] DisplayModeKHRHandle mode,
        [NativeTypeName("uint32_t")] uint planeIndex,
        Ref<DisplayPlaneCapabilitiesKHR> pCapabilities
    ) => ThisThread.GetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneSupportedDisplaysKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDisplayPlaneSupportedDisplaysKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint planeIndex,
        [NativeTypeName("uint32_t *")] uint* pDisplayCount,
        [NativeTypeName("VkDisplayKHR *")] DisplayKHRHandle* pDisplays
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, uint, uint*, DisplayKHRHandle*, Result>)(
                _slots[492] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[492] = nativeContext.LoadFunction(
                        "vkGetDisplayPlaneSupportedDisplaysKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, planeIndex, pDisplayCount, pDisplays);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneSupportedDisplaysKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayPlaneSupportedDisplaysKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint planeIndex,
        [NativeTypeName("uint32_t *")] uint* pDisplayCount,
        [NativeTypeName("VkDisplayKHR *")] DisplayKHRHandle* pDisplays
    ) =>
        ThisThread.GetDisplayPlaneSupportedDisplaysKHR(
            physicalDevice,
            planeIndex,
            pDisplayCount,
            pDisplays
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneSupportedDisplaysKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDisplayPlaneSupportedDisplaysKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint planeIndex,
        [NativeTypeName("uint32_t *")] Ref<uint> pDisplayCount,
        [NativeTypeName("VkDisplayKHR *")] Ref<DisplayKHRHandle> pDisplays
    )
    {
        fixed (DisplayKHRHandle* __dsl_pDisplays = pDisplays)
        fixed (uint* __dsl_pDisplayCount = pDisplayCount)
        {
            return (Result)
                ((IVk)this).GetDisplayPlaneSupportedDisplaysKHR(
                    physicalDevice,
                    planeIndex,
                    __dsl_pDisplayCount,
                    __dsl_pDisplays
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneSupportedDisplaysKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayPlaneSupportedDisplaysKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint planeIndex,
        [NativeTypeName("uint32_t *")] Ref<uint> pDisplayCount,
        [NativeTypeName("VkDisplayKHR *")] Ref<DisplayKHRHandle> pDisplays
    ) =>
        ThisThread.GetDisplayPlaneSupportedDisplaysKHR(
            physicalDevice,
            planeIndex,
            pDisplayCount,
            pDisplays
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_acquire_drm_display"],
        ImpliesSets = ["VK_EXT_direct_mode_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDrmDisplayEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDrmDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("int32_t")] int drmFd,
        [NativeTypeName("uint32_t")] uint connectorId,
        [NativeTypeName("VkDisplayKHR *")] DisplayKHRHandle* display
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, int, uint, DisplayKHRHandle*, Result>)(
                _slots[493] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[493] = nativeContext.LoadFunction("vkGetDrmDisplayEXT", "vulkan")
            )
        )(physicalDevice, drmFd, connectorId, display);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_acquire_drm_display"],
        ImpliesSets = ["VK_EXT_direct_mode_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDrmDisplayEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDrmDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("int32_t")] int drmFd,
        [NativeTypeName("uint32_t")] uint connectorId,
        [NativeTypeName("VkDisplayKHR *")] DisplayKHRHandle* display
    ) => ThisThread.GetDrmDisplayEXT(physicalDevice, drmFd, connectorId, display);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_acquire_drm_display"],
        ImpliesSets = ["VK_EXT_direct_mode_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDrmDisplayEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDrmDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("int32_t")] int drmFd,
        [NativeTypeName("uint32_t")] uint connectorId,
        [NativeTypeName("VkDisplayKHR *")] Ref<DisplayKHRHandle> display
    )
    {
        fixed (DisplayKHRHandle* __dsl_display = display)
        {
            return (Result)
                ((IVk)this).GetDrmDisplayEXT(physicalDevice, drmFd, connectorId, __dsl_display);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_acquire_drm_display"],
        ImpliesSets = ["VK_EXT_direct_mode_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDrmDisplayEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDrmDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("int32_t")] int drmFd,
        [NativeTypeName("uint32_t")] uint connectorId,
        [NativeTypeName("VkDisplayKHR *")] Ref<DisplayKHRHandle> display
    ) => ThisThread.GetDrmDisplayEXT(physicalDevice, drmFd, connectorId, display);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDynamicRenderingTilePropertiesQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDynamicRenderingTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo,
        TilePropertiesQCOM* pProperties
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, RenderingInfo*, TilePropertiesQCOM*, Result>)(
                _slots[494] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[494] = nativeContext.LoadFunction(
                        "vkGetDynamicRenderingTilePropertiesQCOM",
                        "vulkan"
                    )
            )
        )(device, pRenderingInfo, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDynamicRenderingTilePropertiesQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDynamicRenderingTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo,
        TilePropertiesQCOM* pProperties
    ) => ThisThread.GetDynamicRenderingTilePropertiesQCOM(device, pRenderingInfo, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDynamicRenderingTilePropertiesQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetDynamicRenderingTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo,
        Ref<TilePropertiesQCOM> pProperties
    )
    {
        fixed (TilePropertiesQCOM* __dsl_pProperties = pProperties)
        fixed (RenderingInfo* __dsl_pRenderingInfo = pRenderingInfo)
        {
            return (Result)
                ((IVk)this).GetDynamicRenderingTilePropertiesQCOM(
                    device,
                    __dsl_pRenderingInfo,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDynamicRenderingTilePropertiesQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDynamicRenderingTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo,
        Ref<TilePropertiesQCOM> pProperties
    ) => ThisThread.GetDynamicRenderingTilePropertiesQCOM(device, pRenderingInfo, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetEncodedVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetEncodedVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkVideoEncodeSessionParametersGetInfoKHR *")]
            VideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo,
        VideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                VideoEncodeSessionParametersGetInfoKHR*,
                VideoEncodeSessionParametersFeedbackInfoKHR*,
                nuint*,
                void*,
                Result>)(
                _slots[495] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[495] = nativeContext.LoadFunction(
                        "vkGetEncodedVideoSessionParametersKHR",
                        "vulkan"
                    )
            )
        )(device, pVideoSessionParametersInfo, pFeedbackInfo, pDataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetEncodedVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetEncodedVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkVideoEncodeSessionParametersGetInfoKHR *")]
            VideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo,
        VideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) =>
        ThisThread.GetEncodedVideoSessionParametersKHR(
            device,
            pVideoSessionParametersInfo,
            pFeedbackInfo,
            pDataSize,
            pData
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetEncodedVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetEncodedVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkVideoEncodeSessionParametersGetInfoKHR *")]
            Ref<VideoEncodeSessionParametersGetInfoKHR> pVideoSessionParametersInfo,
        Ref<VideoEncodeSessionParametersFeedbackInfoKHR> pFeedbackInfo,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (nuint* __dsl_pDataSize = pDataSize)
        fixed (VideoEncodeSessionParametersFeedbackInfoKHR* __dsl_pFeedbackInfo = pFeedbackInfo)
        fixed (
            VideoEncodeSessionParametersGetInfoKHR* __dsl_pVideoSessionParametersInfo =
                pVideoSessionParametersInfo
        )
        {
            return (Result)
                ((IVk)this).GetEncodedVideoSessionParametersKHR(
                    device,
                    __dsl_pVideoSessionParametersInfo,
                    __dsl_pFeedbackInfo,
                    __dsl_pDataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetEncodedVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetEncodedVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkVideoEncodeSessionParametersGetInfoKHR *")]
            Ref<VideoEncodeSessionParametersGetInfoKHR> pVideoSessionParametersInfo,
        Ref<VideoEncodeSessionParametersFeedbackInfoKHR> pFeedbackInfo,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    ) =>
        ThisThread.GetEncodedVideoSessionParametersKHR(
            device,
            pVideoSessionParametersInfo,
            pFeedbackInfo,
            pDataSize,
            pData
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetEventStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetEventStatus(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkEvent")] EventHandle @event
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, EventHandle, Result>)(
                _slots[496] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[496] = nativeContext.LoadFunction("vkGetEventStatus", "vulkan")
            )
        )(device, @event);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetEventStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetEventStatus(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkEvent")] EventHandle @event
    ) => ThisThread.GetEventStatus(device, @event);

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetExternalComputeQueueDataNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetExternalComputeQueueDataNV(
        [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle externalQueue,
        ExternalComputeQueueDataParamsNV* @params,
        void* pData
    ) =>
        (
            (delegate* unmanaged<
                ExternalComputeQueueNVHandle,
                ExternalComputeQueueDataParamsNV*,
                void*,
                void>)(
                _slots[497] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[497] = nativeContext.LoadFunction(
                        "vkGetExternalComputeQueueDataNV",
                        "vulkan"
                    )
            )
        )(externalQueue, @params, pData);

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetExternalComputeQueueDataNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetExternalComputeQueueDataNV(
        [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle externalQueue,
        ExternalComputeQueueDataParamsNV* @params,
        void* pData
    ) => ThisThread.GetExternalComputeQueueDataNV(externalQueue, @params, pData);

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetExternalComputeQueueDataNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetExternalComputeQueueDataNV(
        [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle externalQueue,
        Ref<ExternalComputeQueueDataParamsNV> @params,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (ExternalComputeQueueDataParamsNV* __dsl_params = @params)
        {
            ((IVk)this).GetExternalComputeQueueDataNV(externalQueue, __dsl_params, __dsl_pData);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetExternalComputeQueueDataNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetExternalComputeQueueDataNV(
        [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle externalQueue,
        Ref<ExternalComputeQueueDataParamsNV> @params,
        Ref pData
    ) => ThisThread.GetExternalComputeQueueDataNV(externalQueue, @params, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetFenceFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetFenceFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkFenceGetFdInfoKHR *")] FenceGetFdInfoKHR* pGetFdInfo,
        int* pFd
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, FenceGetFdInfoKHR*, int*, Result>)(
                _slots[498] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[498] = nativeContext.LoadFunction("vkGetFenceFdKHR", "vulkan")
            )
        )(device, pGetFdInfo, pFd);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetFenceFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetFenceFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkFenceGetFdInfoKHR *")] FenceGetFdInfoKHR* pGetFdInfo,
        int* pFd
    ) => ThisThread.GetFenceFdKHR(device, pGetFdInfo, pFd);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetFenceFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetFenceFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkFenceGetFdInfoKHR *")] Ref<FenceGetFdInfoKHR> pGetFdInfo,
        Ref<int> pFd
    )
    {
        fixed (int* __dsl_pFd = pFd)
        fixed (FenceGetFdInfoKHR* __dsl_pGetFdInfo = pGetFdInfo)
        {
            return (Result)((IVk)this).GetFenceFdKHR(device, __dsl_pGetFdInfo, __dsl_pFd);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetFenceFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetFenceFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkFenceGetFdInfoKHR *")] Ref<FenceGetFdInfoKHR> pGetFdInfo,
        Ref<int> pFd
    ) => ThisThread.GetFenceFdKHR(device, pGetFdInfo, pFd);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetFenceStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetFenceStatus(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkFence")] FenceHandle fence
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, FenceHandle, Result>)(
                _slots[499] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[499] = nativeContext.LoadFunction("vkGetFenceStatus", "vulkan")
            )
        )(device, fence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetFenceStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetFenceStatus(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkFence")] FenceHandle fence
    ) => ThisThread.GetFenceStatus(device, fence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetFramebufferTilePropertiesQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetFramebufferTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkFramebuffer")] FramebufferHandle framebuffer,
        [NativeTypeName("uint32_t *")] uint* pPropertiesCount,
        TilePropertiesQCOM* pProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                FramebufferHandle,
                uint*,
                TilePropertiesQCOM*,
                Result>)(
                _slots[500] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[500] = nativeContext.LoadFunction(
                        "vkGetFramebufferTilePropertiesQCOM",
                        "vulkan"
                    )
            )
        )(device, framebuffer, pPropertiesCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetFramebufferTilePropertiesQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetFramebufferTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkFramebuffer")] FramebufferHandle framebuffer,
        [NativeTypeName("uint32_t *")] uint* pPropertiesCount,
        TilePropertiesQCOM* pProperties
    ) =>
        ThisThread.GetFramebufferTilePropertiesQCOM(
            device,
            framebuffer,
            pPropertiesCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetFramebufferTilePropertiesQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetFramebufferTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkFramebuffer")] FramebufferHandle framebuffer,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertiesCount,
        Ref<TilePropertiesQCOM> pProperties
    )
    {
        fixed (TilePropertiesQCOM* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertiesCount = pPropertiesCount)
        {
            return (Result)
                ((IVk)this).GetFramebufferTilePropertiesQCOM(
                    device,
                    framebuffer,
                    __dsl_pPropertiesCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetFramebufferTilePropertiesQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetFramebufferTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkFramebuffer")] FramebufferHandle framebuffer,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertiesCount,
        Ref<TilePropertiesQCOM> pProperties
    ) =>
        ThisThread.GetFramebufferTilePropertiesQCOM(
            device,
            framebuffer,
            pPropertiesCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetGeneratedCommandsMemoryRequirementsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoEXT *")]
            GeneratedCommandsMemoryRequirementsInfoEXT* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                GeneratedCommandsMemoryRequirementsInfoEXT*,
                MemoryRequirements2*,
                void>)(
                _slots[501] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[501] = nativeContext.LoadFunction(
                        "vkGetGeneratedCommandsMemoryRequirementsEXT",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetGeneratedCommandsMemoryRequirementsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoEXT *")]
            GeneratedCommandsMemoryRequirementsInfoEXT* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => ThisThread.GetGeneratedCommandsMemoryRequirementsEXT(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetGeneratedCommandsMemoryRequirementsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoEXT *")]
            Ref<GeneratedCommandsMemoryRequirementsInfoEXT> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (GeneratedCommandsMemoryRequirementsInfoEXT* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetGeneratedCommandsMemoryRequirementsEXT(
                device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetGeneratedCommandsMemoryRequirementsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoEXT *")]
            Ref<GeneratedCommandsMemoryRequirementsInfoEXT> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => ThisThread.GetGeneratedCommandsMemoryRequirementsEXT(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetGeneratedCommandsMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoNV *")]
            GeneratedCommandsMemoryRequirementsInfoNV* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                GeneratedCommandsMemoryRequirementsInfoNV*,
                MemoryRequirements2*,
                void>)(
                _slots[502] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[502] = nativeContext.LoadFunction(
                        "vkGetGeneratedCommandsMemoryRequirementsNV",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetGeneratedCommandsMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoNV *")]
            GeneratedCommandsMemoryRequirementsInfoNV* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => ThisThread.GetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetGeneratedCommandsMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoNV *")]
            Ref<GeneratedCommandsMemoryRequirementsInfoNV> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (GeneratedCommandsMemoryRequirementsInfoNV* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetGeneratedCommandsMemoryRequirementsNV(
                device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetGeneratedCommandsMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoNV *")]
            Ref<GeneratedCommandsMemoryRequirementsInfoNV> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => ThisThread.GetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_drm_format_modifier"],
        ImpliesSets = [
            "VK_KHR_image_format_list+VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion",
            "VK_KHR_image_format_list+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageDrmFormatModifierPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetImageDrmFormatModifierPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        ImageDrmFormatModifierPropertiesEXT* pProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ImageHandle,
                ImageDrmFormatModifierPropertiesEXT*,
                Result>)(
                _slots[503] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[503] = nativeContext.LoadFunction(
                        "vkGetImageDrmFormatModifierPropertiesEXT",
                        "vulkan"
                    )
            )
        )(device, image, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_drm_format_modifier"],
        ImpliesSets = [
            "VK_KHR_image_format_list+VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion",
            "VK_KHR_image_format_list+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageDrmFormatModifierPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageDrmFormatModifierPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        ImageDrmFormatModifierPropertiesEXT* pProperties
    ) => ThisThread.GetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_drm_format_modifier"],
        ImpliesSets = [
            "VK_KHR_image_format_list+VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion",
            "VK_KHR_image_format_list+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageDrmFormatModifierPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetImageDrmFormatModifierPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        Ref<ImageDrmFormatModifierPropertiesEXT> pProperties
    )
    {
        fixed (ImageDrmFormatModifierPropertiesEXT* __dsl_pProperties = pProperties)
        {
            return (Result)
                ((IVk)this).GetImageDrmFormatModifierPropertiesEXT(
                    device,
                    image,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_drm_format_modifier"],
        ImpliesSets = [
            "VK_KHR_image_format_list+VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion",
            "VK_KHR_image_format_list+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageDrmFormatModifierPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageDrmFormatModifierPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        Ref<ImageDrmFormatModifierPropertiesEXT> pProperties
    ) => ThisThread.GetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        MemoryRequirements* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ImageHandle, MemoryRequirements*, void>)(
                _slots[504] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[504] = nativeContext.LoadFunction(
                        "vkGetImageMemoryRequirements",
                        "vulkan"
                    )
            )
        )(device, image, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        MemoryRequirements* pMemoryRequirements
    ) => ThisThread.GetImageMemoryRequirements(device, image, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        Ref<MemoryRequirements> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements* __dsl_pMemoryRequirements = pMemoryRequirements)
        {
            ((IVk)this).GetImageMemoryRequirements(device, image, __dsl_pMemoryRequirements);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        Ref<MemoryRequirements> pMemoryRequirements
    ) => ThisThread.GetImageMemoryRequirements(device, image, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            ImageMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ImageMemoryRequirementsInfo2*,
                MemoryRequirements2*,
                void>)(
                _slots[505] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[505] = nativeContext.LoadFunction(
                        "vkGetImageMemoryRequirements2",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            ImageMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => ThisThread.GetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            Ref<ImageMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (ImageMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetImageMemoryRequirements2(device, __dsl_pInfo, __dsl_pMemoryRequirements);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            Ref<ImageMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => ThisThread.GetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            ImageMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ImageMemoryRequirementsInfo2*,
                MemoryRequirements2*,
                void>)(
                _slots[506] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[506] = nativeContext.LoadFunction(
                        "vkGetImageMemoryRequirements2KHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            ImageMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => ThisThread.GetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            Ref<ImageMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (ImageMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetImageMemoryRequirements2KHR(
                device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            Ref<ImageMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => ThisThread.GetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetImageOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageCaptureDescriptorDataInfoEXT *")]
            ImageCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ImageCaptureDescriptorDataInfoEXT*, void*, Result>)(
                _slots[507] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[507] = nativeContext.LoadFunction(
                        "vkGetImageOpaqueCaptureDescriptorDataEXT",
                        "vulkan"
                    )
            )
        )(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageCaptureDescriptorDataInfoEXT *")]
            ImageCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) => ThisThread.GetImageOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetImageOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageCaptureDescriptorDataInfoEXT *")]
            Ref<ImageCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (ImageCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).GetImageOpaqueCaptureDescriptorDataEXT(
                    device,
                    __dsl_pInfo,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageCaptureDescriptorDataInfoEXT *")]
            Ref<ImageCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    ) => ThisThread.GetImageOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements* pSparseMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ImageHandle,
                uint*,
                SparseImageMemoryRequirements*,
                void>)(
                _slots[508] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[508] = nativeContext.LoadFunction(
                        "vkGetImageSparseMemoryRequirements",
                        "vulkan"
                    )
            )
        )(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements* pSparseMemoryRequirements
    ) =>
        ThisThread.GetImageSparseMemoryRequirements(
            device,
            image,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements> pSparseMemoryRequirements
    )
    {
        fixed (
            SparseImageMemoryRequirements* __dsl_pSparseMemoryRequirements =
                pSparseMemoryRequirements
        )
        fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
        {
            ((IVk)this).GetImageSparseMemoryRequirements(
                device,
                image,
                __dsl_pSparseMemoryRequirementCount,
                __dsl_pSparseMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements> pSparseMemoryRequirements
    ) =>
        ThisThread.GetImageSparseMemoryRequirements(
            device,
            image,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageSparseMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            ImageSparseMemoryRequirementsInfo2* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ImageSparseMemoryRequirementsInfo2*,
                uint*,
                SparseImageMemoryRequirements2*,
                void>)(
                _slots[509] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[509] = nativeContext.LoadFunction(
                        "vkGetImageSparseMemoryRequirements2",
                        "vulkan"
                    )
            )
        )(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSparseMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            ImageSparseMemoryRequirementsInfo2* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        ThisThread.GetImageSparseMemoryRequirements2(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageSparseMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            Ref<ImageSparseMemoryRequirementsInfo2> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    )
    {
        fixed (
            SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                pSparseMemoryRequirements
        )
        fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
        fixed (ImageSparseMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetImageSparseMemoryRequirements2(
                device,
                __dsl_pInfo,
                __dsl_pSparseMemoryRequirementCount,
                __dsl_pSparseMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSparseMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            Ref<ImageSparseMemoryRequirementsInfo2> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    ) =>
        ThisThread.GetImageSparseMemoryRequirements2(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageSparseMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            ImageSparseMemoryRequirementsInfo2* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ImageSparseMemoryRequirementsInfo2*,
                uint*,
                SparseImageMemoryRequirements2*,
                void>)(
                _slots[510] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[510] = nativeContext.LoadFunction(
                        "vkGetImageSparseMemoryRequirements2KHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSparseMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            ImageSparseMemoryRequirementsInfo2* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        ThisThread.GetImageSparseMemoryRequirements2KHR(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageSparseMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            Ref<ImageSparseMemoryRequirementsInfo2> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    )
    {
        fixed (
            SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                pSparseMemoryRequirements
        )
        fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
        fixed (ImageSparseMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetImageSparseMemoryRequirements2KHR(
                device,
                __dsl_pInfo,
                __dsl_pSparseMemoryRequirementCount,
                __dsl_pSparseMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSparseMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            Ref<ImageSparseMemoryRequirementsInfo2> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    ) =>
        ThisThread.GetImageSparseMemoryRequirements2KHR(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageSubresourceLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource *")] ImageSubresource* pSubresource,
        SubresourceLayout* pLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ImageHandle,
                ImageSubresource*,
                SubresourceLayout*,
                void>)(
                _slots[511] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[511] = nativeContext.LoadFunction(
                        "vkGetImageSubresourceLayout",
                        "vulkan"
                    )
            )
        )(device, image, pSubresource, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource *")] ImageSubresource* pSubresource,
        SubresourceLayout* pLayout
    ) => ThisThread.GetImageSubresourceLayout(device, image, pSubresource, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageSubresourceLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource *")] Ref<ImageSubresource> pSubresource,
        Ref<SubresourceLayout> pLayout
    )
    {
        fixed (SubresourceLayout* __dsl_pLayout = pLayout)
        fixed (ImageSubresource* __dsl_pSubresource = pSubresource)
        {
            ((IVk)this).GetImageSubresourceLayout(device, image, __dsl_pSubresource, __dsl_pLayout);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource *")] Ref<ImageSubresource> pSubresource,
        Ref<SubresourceLayout> pLayout
    ) => ThisThread.GetImageSubresourceLayout(device, image, pSubresource, pLayout);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageSubresourceLayout2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
        SubresourceLayout2* pLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ImageHandle,
                ImageSubresource2*,
                SubresourceLayout2*,
                void>)(
                _slots[512] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[512] = nativeContext.LoadFunction(
                        "vkGetImageSubresourceLayout2",
                        "vulkan"
                    )
            )
        )(device, image, pSubresource, pLayout);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
        SubresourceLayout2* pLayout
    ) => ThisThread.GetImageSubresourceLayout2(device, image, pSubresource, pLayout);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageSubresourceLayout2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
        Ref<SubresourceLayout2> pLayout
    )
    {
        fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
        fixed (ImageSubresource2* __dsl_pSubresource = pSubresource)
        {
            ((IVk)this).GetImageSubresourceLayout2(
                device,
                image,
                __dsl_pSubresource,
                __dsl_pLayout
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
        Ref<SubresourceLayout2> pLayout
    ) => ThisThread.GetImageSubresourceLayout2(device, image, pSubresource, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageSubresourceLayout2EXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
        SubresourceLayout2* pLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ImageHandle,
                ImageSubresource2*,
                SubresourceLayout2*,
                void>)(
                _slots[513] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[513] = nativeContext.LoadFunction(
                        "vkGetImageSubresourceLayout2EXT",
                        "vulkan"
                    )
            )
        )(device, image, pSubresource, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout2EXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
        SubresourceLayout2* pLayout
    ) => ThisThread.GetImageSubresourceLayout2EXT(device, image, pSubresource, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageSubresourceLayout2EXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
        Ref<SubresourceLayout2> pLayout
    )
    {
        fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
        fixed (ImageSubresource2* __dsl_pSubresource = pSubresource)
        {
            ((IVk)this).GetImageSubresourceLayout2EXT(
                device,
                image,
                __dsl_pSubresource,
                __dsl_pLayout
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout2EXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
        Ref<SubresourceLayout2> pLayout
    ) => ThisThread.GetImageSubresourceLayout2EXT(device, image, pSubresource, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageSubresourceLayout2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
        SubresourceLayout2* pLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ImageHandle,
                ImageSubresource2*,
                SubresourceLayout2*,
                void>)(
                _slots[514] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[514] = nativeContext.LoadFunction(
                        "vkGetImageSubresourceLayout2KHR",
                        "vulkan"
                    )
            )
        )(device, image, pSubresource, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
        SubresourceLayout2* pLayout
    ) => ThisThread.GetImageSubresourceLayout2KHR(device, image, pSubresource, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetImageSubresourceLayout2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
        Ref<SubresourceLayout2> pLayout
    )
    {
        fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
        fixed (ImageSubresource2* __dsl_pSubresource = pSubresource)
        {
            ((IVk)this).GetImageSubresourceLayout2KHR(
                device,
                image,
                __dsl_pSubresource,
                __dsl_pLayout
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImage")] ImageHandle image,
        [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
        Ref<SubresourceLayout2> pLayout
    ) => ThisThread.GetImageSubresourceLayout2KHR(device, image, pSubresource, pLayout);

    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewAddressNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetImageViewAddressNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImageView")] ImageViewHandle imageView,
        ImageViewAddressPropertiesNVX* pProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ImageViewHandle,
                ImageViewAddressPropertiesNVX*,
                Result>)(
                _slots[515] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[515] = nativeContext.LoadFunction("vkGetImageViewAddressNVX", "vulkan")
            )
        )(device, imageView, pProperties);

    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewAddressNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageViewAddressNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImageView")] ImageViewHandle imageView,
        ImageViewAddressPropertiesNVX* pProperties
    ) => ThisThread.GetImageViewAddressNVX(device, imageView, pProperties);

    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewAddressNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetImageViewAddressNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImageView")] ImageViewHandle imageView,
        Ref<ImageViewAddressPropertiesNVX> pProperties
    )
    {
        fixed (ImageViewAddressPropertiesNVX* __dsl_pProperties = pProperties)
        {
            return (Result)((IVk)this).GetImageViewAddressNVX(device, imageView, __dsl_pProperties);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewAddressNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageViewAddressNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkImageView")] ImageViewHandle imageView,
        Ref<ImageViewAddressPropertiesNVX> pProperties
    ) => ThisThread.GetImageViewAddressNVX(device, imageView, pProperties);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandle64NVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetImageViewHandle64NVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] ImageViewHandleInfoNVX* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ImageViewHandleInfoNVX*, ulong>)(
                _slots[516] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[516] = nativeContext.LoadFunction(
                        "vkGetImageViewHandle64NVX",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandle64NVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetImageViewHandle64NVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] ImageViewHandleInfoNVX* pInfo
    ) => ThisThread.GetImageViewHandle64NVX(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandle64NVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetImageViewHandle64NVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] Ref<ImageViewHandleInfoNVX> pInfo
    )
    {
        fixed (ImageViewHandleInfoNVX* __dsl_pInfo = pInfo)
        {
            return (ulong)((IVk)this).GetImageViewHandle64NVX(device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandle64NVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetImageViewHandle64NVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] Ref<ImageViewHandleInfoNVX> pInfo
    ) => ThisThread.GetImageViewHandle64NVX(device, pInfo);

    [return: NativeTypeName("uint32_t")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint IVk.GetImageViewHandleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] ImageViewHandleInfoNVX* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ImageViewHandleInfoNVX*, uint>)(
                _slots[517] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[517] = nativeContext.LoadFunction("vkGetImageViewHandleNVX", "vulkan")
            )
        )(device, pInfo);

    [return: NativeTypeName("uint32_t")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetImageViewHandleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] ImageViewHandleInfoNVX* pInfo
    ) => ThisThread.GetImageViewHandleNVX(device, pInfo);

    [return: NativeTypeName("uint32_t")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint IVk.GetImageViewHandleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] Ref<ImageViewHandleInfoNVX> pInfo
    )
    {
        fixed (ImageViewHandleInfoNVX* __dsl_pInfo = pInfo)
        {
            return (uint)((IVk)this).GetImageViewHandleNVX(device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("uint32_t")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetImageViewHandleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] Ref<ImageViewHandleInfoNVX> pInfo
    ) => ThisThread.GetImageViewHandleNVX(device, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetImageViewOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewCaptureDescriptorDataInfoEXT *")]
            ImageViewCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ImageViewCaptureDescriptorDataInfoEXT*,
                void*,
                Result>)(
                _slots[518] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[518] = nativeContext.LoadFunction(
                        "vkGetImageViewOpaqueCaptureDescriptorDataEXT",
                        "vulkan"
                    )
            )
        )(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageViewOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewCaptureDescriptorDataInfoEXT *")]
            ImageViewCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) => ThisThread.GetImageViewOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetImageViewOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewCaptureDescriptorDataInfoEXT *")]
            Ref<ImageViewCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (ImageViewCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).GetImageViewOpaqueCaptureDescriptorDataEXT(
                    device,
                    __dsl_pInfo,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageViewOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImageViewCaptureDescriptorDataInfoEXT *")]
            Ref<ImageViewCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    ) => ThisThread.GetImageViewOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [return: NativeTypeName("PFN_vkVoidFunction")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetInstanceProcAddr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PFNVkVoidFunction IVk.GetInstanceProcAddr(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const char *")] sbyte* pName
    ) =>
        (
            (delegate* unmanaged<InstanceHandle, sbyte*, PFNVkVoidFunction>)(
                _slots[519] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[519] = nativeContext.LoadFunction("vkGetInstanceProcAddr", "vulkan")
            )
        )(instance, pName);

    [return: NativeTypeName("PFN_vkVoidFunction")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetInstanceProcAddr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PFNVkVoidFunction GetInstanceProcAddr(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const char *")] sbyte* pName
    ) => ThisThread.GetInstanceProcAddr(instance, pName);

    [return: NativeTypeName("PFN_vkVoidFunction")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetInstanceProcAddr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PFNVkVoidFunction IVk.GetInstanceProcAddr(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const char *")] Ref<sbyte> pName
    )
    {
        fixed (sbyte* __dsl_pName = pName)
        {
            return (PFNVkVoidFunction)((IVk)this).GetInstanceProcAddr(instance, __dsl_pName);
        }
    }

    [return: NativeTypeName("PFN_vkVoidFunction")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetInstanceProcAddr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PFNVkVoidFunction GetInstanceProcAddr(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        [NativeTypeName("const char *")] Ref<sbyte> pName
    ) => ThisThread.GetInstanceProcAddr(instance, pName);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetLatencyTimingsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetLatencyTimingsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        GetLatencyMarkerInfoNV* pLatencyMarkerInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SwapchainKHRHandle, GetLatencyMarkerInfoNV*, void>)(
                _slots[520] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[520] = nativeContext.LoadFunction("vkGetLatencyTimingsNV", "vulkan")
            )
        )(device, swapchain, pLatencyMarkerInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetLatencyTimingsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetLatencyTimingsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        GetLatencyMarkerInfoNV* pLatencyMarkerInfo
    ) => ThisThread.GetLatencyTimingsNV(device, swapchain, pLatencyMarkerInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetLatencyTimingsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetLatencyTimingsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        Ref<GetLatencyMarkerInfoNV> pLatencyMarkerInfo
    )
    {
        fixed (GetLatencyMarkerInfoNV* __dsl_pLatencyMarkerInfo = pLatencyMarkerInfo)
        {
            ((IVk)this).GetLatencyTimingsNV(device, swapchain, __dsl_pLatencyMarkerInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetLatencyTimingsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetLatencyTimingsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        Ref<GetLatencyMarkerInfoNV> pLatencyMarkerInfo
    ) => ThisThread.GetLatencyTimingsNV(device, swapchain, pLatencyMarkerInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetMemoryFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryGetFdInfoKHR *")] MemoryGetFdInfoKHR* pGetFdInfo,
        int* pFd
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, MemoryGetFdInfoKHR*, int*, Result>)(
                _slots[521] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[521] = nativeContext.LoadFunction("vkGetMemoryFdKHR", "vulkan")
            )
        )(device, pGetFdInfo, pFd);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryGetFdInfoKHR *")] MemoryGetFdInfoKHR* pGetFdInfo,
        int* pFd
    ) => ThisThread.GetMemoryFdKHR(device, pGetFdInfo, pFd);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetMemoryFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryGetFdInfoKHR *")] Ref<MemoryGetFdInfoKHR> pGetFdInfo,
        Ref<int> pFd
    )
    {
        fixed (int* __dsl_pFd = pFd)
        fixed (MemoryGetFdInfoKHR* __dsl_pGetFdInfo = pGetFdInfo)
        {
            return (Result)((IVk)this).GetMemoryFdKHR(device, __dsl_pGetFdInfo, __dsl_pFd);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryGetFdInfoKHR *")] Ref<MemoryGetFdInfoKHR> pGetFdInfo,
        Ref<int> pFd
    ) => ThisThread.GetMemoryFdKHR(device, pGetFdInfo, pFd);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetMemoryFdPropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ExternalMemoryHandleTypeFlags handleType,
        int fd,
        MemoryFdPropertiesKHR* pMemoryFdProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ExternalMemoryHandleTypeFlags,
                int,
                MemoryFdPropertiesKHR*,
                Result>)(
                _slots[522] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[522] = nativeContext.LoadFunction(
                        "vkGetMemoryFdPropertiesKHR",
                        "vulkan"
                    )
            )
        )(device, handleType, fd, pMemoryFdProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryFdPropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ExternalMemoryHandleTypeFlags handleType,
        int fd,
        MemoryFdPropertiesKHR* pMemoryFdProperties
    ) => ThisThread.GetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetMemoryFdPropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ExternalMemoryHandleTypeFlags handleType,
        int fd,
        Ref<MemoryFdPropertiesKHR> pMemoryFdProperties
    )
    {
        fixed (MemoryFdPropertiesKHR* __dsl_pMemoryFdProperties = pMemoryFdProperties)
        {
            return (Result)
                ((IVk)this).GetMemoryFdPropertiesKHR(
                    device,
                    handleType,
                    fd,
                    __dsl_pMemoryFdProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryFdPropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ExternalMemoryHandleTypeFlags handleType,
        int fd,
        Ref<MemoryFdPropertiesKHR> pMemoryFdProperties
    ) => ThisThread.GetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_host"],
        ImpliesSets = [
            "VK_EXT_external_memory_host+VK_KHR_external_memory",
            "VK_EXT_external_memory_host+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryHostPointerPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetMemoryHostPointerPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ExternalMemoryHandleTypeFlags handleType,
        [NativeTypeName("const void *")] void* pHostPointer,
        MemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ExternalMemoryHandleTypeFlags,
                void*,
                MemoryHostPointerPropertiesEXT*,
                Result>)(
                _slots[523] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[523] = nativeContext.LoadFunction(
                        "vkGetMemoryHostPointerPropertiesEXT",
                        "vulkan"
                    )
            )
        )(device, handleType, pHostPointer, pMemoryHostPointerProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_host"],
        ImpliesSets = [
            "VK_EXT_external_memory_host+VK_KHR_external_memory",
            "VK_EXT_external_memory_host+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryHostPointerPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryHostPointerPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ExternalMemoryHandleTypeFlags handleType,
        [NativeTypeName("const void *")] void* pHostPointer,
        MemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties
    ) =>
        ThisThread.GetMemoryHostPointerPropertiesEXT(
            device,
            handleType,
            pHostPointer,
            pMemoryHostPointerProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_host"],
        ImpliesSets = [
            "VK_EXT_external_memory_host+VK_KHR_external_memory",
            "VK_EXT_external_memory_host+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryHostPointerPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetMemoryHostPointerPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ExternalMemoryHandleTypeFlags handleType,
        [NativeTypeName("const void *")] Ref pHostPointer,
        Ref<MemoryHostPointerPropertiesEXT> pMemoryHostPointerProperties
    )
    {
        fixed (
            MemoryHostPointerPropertiesEXT* __dsl_pMemoryHostPointerProperties =
                pMemoryHostPointerProperties
        )
        fixed (void* __dsl_pHostPointer = pHostPointer)
        {
            return (Result)
                ((IVk)this).GetMemoryHostPointerPropertiesEXT(
                    device,
                    handleType,
                    __dsl_pHostPointer,
                    __dsl_pMemoryHostPointerProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_host"],
        ImpliesSets = [
            "VK_EXT_external_memory_host+VK_KHR_external_memory",
            "VK_EXT_external_memory_host+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryHostPointerPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryHostPointerPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ExternalMemoryHandleTypeFlags handleType,
        [NativeTypeName("const void *")] Ref pHostPointer,
        Ref<MemoryHostPointerPropertiesEXT> pMemoryHostPointerProperties
    ) =>
        ThisThread.GetMemoryHostPointerPropertiesEXT(
            device,
            handleType,
            pHostPointer,
            pMemoryHostPointerProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_external_memory_rdma"],
        ImpliesSets = [
            "VK_NV_external_memory_rdma+VK_KHR_external_memory",
            "VK_NV_external_memory_rdma+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryRemoteAddressNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetMemoryRemoteAddressNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryGetRemoteAddressInfoNV *")]
            MemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo,
        [NativeTypeName("VkRemoteAddressNV *")] void** pAddress
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, MemoryGetRemoteAddressInfoNV*, void**, Result>)(
                _slots[524] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[524] = nativeContext.LoadFunction(
                        "vkGetMemoryRemoteAddressNV",
                        "vulkan"
                    )
            )
        )(device, pMemoryGetRemoteAddressInfo, pAddress);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_external_memory_rdma"],
        ImpliesSets = [
            "VK_NV_external_memory_rdma+VK_KHR_external_memory",
            "VK_NV_external_memory_rdma+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryRemoteAddressNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryRemoteAddressNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryGetRemoteAddressInfoNV *")]
            MemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo,
        [NativeTypeName("VkRemoteAddressNV *")] void** pAddress
    ) => ThisThread.GetMemoryRemoteAddressNV(device, pMemoryGetRemoteAddressInfo, pAddress);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_external_memory_rdma"],
        ImpliesSets = [
            "VK_NV_external_memory_rdma+VK_KHR_external_memory",
            "VK_NV_external_memory_rdma+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryRemoteAddressNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetMemoryRemoteAddressNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryGetRemoteAddressInfoNV *")]
            Ref<MemoryGetRemoteAddressInfoNV> pMemoryGetRemoteAddressInfo,
        [NativeTypeName("VkRemoteAddressNV *")] Ref2D pAddress
    )
    {
        fixed (void** __dsl_pAddress = pAddress)
        fixed (
            MemoryGetRemoteAddressInfoNV* __dsl_pMemoryGetRemoteAddressInfo =
                pMemoryGetRemoteAddressInfo
        )
        {
            return (Result)
                ((IVk)this).GetMemoryRemoteAddressNV(
                    device,
                    __dsl_pMemoryGetRemoteAddressInfo,
                    __dsl_pAddress
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_external_memory_rdma"],
        ImpliesSets = [
            "VK_NV_external_memory_rdma+VK_KHR_external_memory",
            "VK_NV_external_memory_rdma+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryRemoteAddressNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryRemoteAddressNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryGetRemoteAddressInfoNV *")]
            Ref<MemoryGetRemoteAddressInfoNV> pMemoryGetRemoteAddressInfo,
        [NativeTypeName("VkRemoteAddressNV *")] Ref2D pAddress
    ) => ThisThread.GetMemoryRemoteAddressNV(device, pMemoryGetRemoteAddressInfo, pAddress);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMicromapBuildSizesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetMicromapBuildSizesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pBuildInfo,
        MicromapBuildSizesInfoEXT* pSizeInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                AccelerationStructureBuildTypeKHR,
                MicromapBuildInfoEXT*,
                MicromapBuildSizesInfoEXT*,
                void>)(
                _slots[525] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[525] = nativeContext.LoadFunction(
                        "vkGetMicromapBuildSizesEXT",
                        "vulkan"
                    )
            )
        )(device, buildType, pBuildInfo, pSizeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMicromapBuildSizesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetMicromapBuildSizesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pBuildInfo,
        MicromapBuildSizesInfoEXT* pSizeInfo
    ) => ThisThread.GetMicromapBuildSizesEXT(device, buildType, pBuildInfo, pSizeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMicromapBuildSizesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetMicromapBuildSizesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pBuildInfo,
        Ref<MicromapBuildSizesInfoEXT> pSizeInfo
    )
    {
        fixed (MicromapBuildSizesInfoEXT* __dsl_pSizeInfo = pSizeInfo)
        fixed (MicromapBuildInfoEXT* __dsl_pBuildInfo = pBuildInfo)
        {
            ((IVk)this).GetMicromapBuildSizesEXT(
                device,
                buildType,
                __dsl_pBuildInfo,
                __dsl_pSizeInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMicromapBuildSizesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetMicromapBuildSizesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pBuildInfo,
        Ref<MicromapBuildSizesInfoEXT> pSizeInfo
    ) => ThisThread.GetMicromapBuildSizesEXT(device, buildType, pBuildInfo, pSizeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPartitionedAccelerationStructuresBuildSizesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPartitionedAccelerationStructuresBuildSizesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPartitionedAccelerationStructureInstancesInputNV *")]
            PartitionedAccelerationStructureInstancesInputNV* pInfo,
        AccelerationStructureBuildSizesInfoKHR* pSizeInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PartitionedAccelerationStructureInstancesInputNV*,
                AccelerationStructureBuildSizesInfoKHR*,
                void>)(
                _slots[526] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[526] = nativeContext.LoadFunction(
                        "vkGetPartitionedAccelerationStructuresBuildSizesNV",
                        "vulkan"
                    )
            )
        )(device, pInfo, pSizeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPartitionedAccelerationStructuresBuildSizesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPartitionedAccelerationStructuresBuildSizesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPartitionedAccelerationStructureInstancesInputNV *")]
            PartitionedAccelerationStructureInstancesInputNV* pInfo,
        AccelerationStructureBuildSizesInfoKHR* pSizeInfo
    ) => ThisThread.GetPartitionedAccelerationStructuresBuildSizesNV(device, pInfo, pSizeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPartitionedAccelerationStructuresBuildSizesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPartitionedAccelerationStructuresBuildSizesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPartitionedAccelerationStructureInstancesInputNV *")]
            Ref<PartitionedAccelerationStructureInstancesInputNV> pInfo,
        Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
    )
    {
        fixed (AccelerationStructureBuildSizesInfoKHR* __dsl_pSizeInfo = pSizeInfo)
        fixed (PartitionedAccelerationStructureInstancesInputNV* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetPartitionedAccelerationStructuresBuildSizesNV(
                device,
                __dsl_pInfo,
                __dsl_pSizeInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPartitionedAccelerationStructuresBuildSizesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPartitionedAccelerationStructuresBuildSizesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPartitionedAccelerationStructureInstancesInputNV *")]
            Ref<PartitionedAccelerationStructureInstancesInputNV> pInfo,
        Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
    ) => ThisThread.GetPartitionedAccelerationStructuresBuildSizesNV(device, pInfo, pSizeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPastPresentationTimingGOOGLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPastPresentationTimingGoogle(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("uint32_t *")] uint* pPresentationTimingCount,
        PastPresentationTimingGoogle* pPresentationTimings
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                SwapchainKHRHandle,
                uint*,
                PastPresentationTimingGoogle*,
                Result>)(
                _slots[527] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[527] = nativeContext.LoadFunction(
                        "vkGetPastPresentationTimingGOOGLE",
                        "vulkan"
                    )
            )
        )(device, swapchain, pPresentationTimingCount, pPresentationTimings);

    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPastPresentationTimingGOOGLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPastPresentationTimingGoogle(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("uint32_t *")] uint* pPresentationTimingCount,
        PastPresentationTimingGoogle* pPresentationTimings
    ) =>
        ThisThread.GetPastPresentationTimingGoogle(
            device,
            swapchain,
            pPresentationTimingCount,
            pPresentationTimings
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPastPresentationTimingGOOGLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPastPresentationTimingGoogle(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("uint32_t *")] Ref<uint> pPresentationTimingCount,
        Ref<PastPresentationTimingGoogle> pPresentationTimings
    )
    {
        fixed (PastPresentationTimingGoogle* __dsl_pPresentationTimings = pPresentationTimings)
        fixed (uint* __dsl_pPresentationTimingCount = pPresentationTimingCount)
        {
            return (Result)
                ((IVk)this).GetPastPresentationTimingGoogle(
                    device,
                    swapchain,
                    __dsl_pPresentationTimingCount,
                    __dsl_pPresentationTimings
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPastPresentationTimingGOOGLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPastPresentationTimingGoogle(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("uint32_t *")] Ref<uint> pPresentationTimingCount,
        Ref<PastPresentationTimingGoogle> pPresentationTimings
    ) =>
        ThisThread.GetPastPresentationTimingGoogle(
            device,
            swapchain,
            pPresentationTimingCount,
            pPresentationTimings
        );

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPerformanceParameterINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPerformanceParameterIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        PerformanceParameterTypeIntel parameter,
        PerformanceValueIntel* pValue
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PerformanceParameterTypeIntel,
                PerformanceValueIntel*,
                Result>)(
                _slots[528] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[528] = nativeContext.LoadFunction(
                        "vkGetPerformanceParameterINTEL",
                        "vulkan"
                    )
            )
        )(device, parameter, pValue);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPerformanceParameterINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPerformanceParameterIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        PerformanceParameterTypeIntel parameter,
        PerformanceValueIntel* pValue
    ) => ThisThread.GetPerformanceParameterIntel(device, parameter, pValue);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPerformanceParameterINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPerformanceParameterIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        PerformanceParameterTypeIntel parameter,
        Ref<PerformanceValueIntel> pValue
    )
    {
        fixed (PerformanceValueIntel* __dsl_pValue = pValue)
        {
            return (Result)
                ((IVk)this).GetPerformanceParameterIntel(device, parameter, __dsl_pValue);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPerformanceParameterINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPerformanceParameterIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        PerformanceParameterTypeIntel parameter,
        Ref<PerformanceValueIntel> pValue
    ) => ThisThread.GetPerformanceParameterIntel(device, parameter, pValue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceCalibrateableTimeDomainsEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pTimeDomainCount,
        TimeDomainKHR* pTimeDomains
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, uint*, TimeDomainKHR*, Result>)(
                _slots[529] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[529] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT",
                        "vulkan"
                    )
            )
        )(physicalDevice, pTimeDomainCount, pTimeDomains);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCalibrateableTimeDomainsEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pTimeDomainCount,
        TimeDomainKHR* pTimeDomains
    ) =>
        ThisThread.GetPhysicalDeviceCalibrateableTimeDomainsEXT(
            physicalDevice,
            pTimeDomainCount,
            pTimeDomains
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceCalibrateableTimeDomainsEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pTimeDomainCount,
        Ref<TimeDomainKHR> pTimeDomains
    )
    {
        fixed (TimeDomainKHR* __dsl_pTimeDomains = pTimeDomains)
        fixed (uint* __dsl_pTimeDomainCount = pTimeDomainCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceCalibrateableTimeDomainsEXT(
                    physicalDevice,
                    __dsl_pTimeDomainCount,
                    __dsl_pTimeDomains
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCalibrateableTimeDomainsEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pTimeDomainCount,
        Ref<TimeDomainKHR> pTimeDomains
    ) =>
        ThisThread.GetPhysicalDeviceCalibrateableTimeDomainsEXT(
            physicalDevice,
            pTimeDomainCount,
            pTimeDomains
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceCalibrateableTimeDomainsKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pTimeDomainCount,
        TimeDomainKHR* pTimeDomains
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, uint*, TimeDomainKHR*, Result>)(
                _slots[530] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[530] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pTimeDomainCount, pTimeDomains);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCalibrateableTimeDomainsKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pTimeDomainCount,
        TimeDomainKHR* pTimeDomains
    ) =>
        ThisThread.GetPhysicalDeviceCalibrateableTimeDomainsKHR(
            physicalDevice,
            pTimeDomainCount,
            pTimeDomains
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceCalibrateableTimeDomainsKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pTimeDomainCount,
        Ref<TimeDomainKHR> pTimeDomains
    )
    {
        fixed (TimeDomainKHR* __dsl_pTimeDomains = pTimeDomains)
        fixed (uint* __dsl_pTimeDomainCount = pTimeDomainCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceCalibrateableTimeDomainsKHR(
                    physicalDevice,
                    __dsl_pTimeDomainCount,
                    __dsl_pTimeDomains
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCalibrateableTimeDomainsKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pTimeDomainCount,
        Ref<TimeDomainKHR> pTimeDomains
    ) =>
        ThisThread.GetPhysicalDeviceCalibrateableTimeDomainsKHR(
            physicalDevice,
            pTimeDomainCount,
            pTimeDomains
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix2"],
        ImpliesSets = ["VK_KHR_cooperative_matrix"]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeMatrixFlexibleDimensionsPropertiesNV* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                uint*,
                CooperativeMatrixFlexibleDimensionsPropertiesNV*,
                Result>)(
                _slots[531] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[531] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix2"],
        ImpliesSets = ["VK_KHR_cooperative_matrix"]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeMatrixFlexibleDimensionsPropertiesNV* pProperties
    ) =>
        ThisThread.GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix2"],
        ImpliesSets = ["VK_KHR_cooperative_matrix"]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeMatrixFlexibleDimensionsPropertiesNV> pProperties
    )
    {
        fixed (CooperativeMatrixFlexibleDimensionsPropertiesNV* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix2"],
        ImpliesSets = ["VK_KHR_cooperative_matrix"]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeMatrixFlexibleDimensionsPropertiesNV> pProperties
    ) =>
        ThisThread.GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_cooperative_matrix"],
        ImpliesSets = [
            "VK_KHR_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_KHR_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeMatrixPropertiesKHR* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                uint*,
                CooperativeMatrixPropertiesKHR*,
                Result>)(
                _slots[532] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[532] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_cooperative_matrix"],
        ImpliesSets = [
            "VK_KHR_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_KHR_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeMatrixPropertiesKHR* pProperties
    ) =>
        ThisThread.GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_cooperative_matrix"],
        ImpliesSets = [
            "VK_KHR_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_KHR_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeMatrixPropertiesKHR> pProperties
    )
    {
        fixed (CooperativeMatrixPropertiesKHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_cooperative_matrix"],
        ImpliesSets = [
            "VK_KHR_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_KHR_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeMatrixPropertiesKHR> pProperties
    ) =>
        ThisThread.GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix"],
        ImpliesSets = [
            "VK_NV_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_NV_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceCooperativeMatrixPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeMatrixPropertiesNV* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                uint*,
                CooperativeMatrixPropertiesNV*,
                Result>)(
                _slots[533] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[533] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix"],
        ImpliesSets = [
            "VK_NV_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_NV_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeMatrixPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeMatrixPropertiesNV* pProperties
    ) =>
        ThisThread.GetPhysicalDeviceCooperativeMatrixPropertiesNV(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix"],
        ImpliesSets = [
            "VK_NV_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_NV_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceCooperativeMatrixPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeMatrixPropertiesNV> pProperties
    )
    {
        fixed (CooperativeMatrixPropertiesNV* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceCooperativeMatrixPropertiesNV(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix"],
        ImpliesSets = [
            "VK_NV_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_NV_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeMatrixPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeMatrixPropertiesNV> pProperties
    ) =>
        ThisThread.GetPhysicalDeviceCooperativeMatrixPropertiesNV(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeVectorPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceCooperativeVectorPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeVectorPropertiesNV* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                uint*,
                CooperativeVectorPropertiesNV*,
                Result>)(
                _slots[534] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[534] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceCooperativeVectorPropertiesNV",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeVectorPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeVectorPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeVectorPropertiesNV* pProperties
    ) =>
        ThisThread.GetPhysicalDeviceCooperativeVectorPropertiesNV(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeVectorPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceCooperativeVectorPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeVectorPropertiesNV> pProperties
    )
    {
        fixed (CooperativeVectorPropertiesNV* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceCooperativeVectorPropertiesNV(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeVectorPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeVectorPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeVectorPropertiesNV> pProperties
    ) =>
        ThisThread.GetPhysicalDeviceCooperativeVectorPropertiesNV(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlaneProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceDisplayPlaneProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayPlaneProperties2KHR* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, uint*, DisplayPlaneProperties2KHR*, Result>)(
                _slots[535] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[535] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceDisplayPlaneProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlaneProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayPlaneProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayPlaneProperties2KHR* pProperties
    ) =>
        ThisThread.GetPhysicalDeviceDisplayPlaneProperties2KHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlaneProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceDisplayPlaneProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayPlaneProperties2KHR> pProperties
    )
    {
        fixed (DisplayPlaneProperties2KHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceDisplayPlaneProperties2KHR(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlaneProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayPlaneProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayPlaneProperties2KHR> pProperties
    ) =>
        ThisThread.GetPhysicalDeviceDisplayPlaneProperties2KHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlanePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceDisplayPlanePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayPlanePropertiesKHR* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, uint*, DisplayPlanePropertiesKHR*, Result>)(
                _slots[536] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[536] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceDisplayPlanePropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlanePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayPlanePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayPlanePropertiesKHR* pProperties
    ) =>
        ThisThread.GetPhysicalDeviceDisplayPlanePropertiesKHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlanePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceDisplayPlanePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayPlanePropertiesKHR> pProperties
    )
    {
        fixed (DisplayPlanePropertiesKHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceDisplayPlanePropertiesKHR(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlanePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayPlanePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayPlanePropertiesKHR> pProperties
    ) =>
        ThisThread.GetPhysicalDeviceDisplayPlanePropertiesKHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceDisplayProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayProperties2KHR* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, uint*, DisplayProperties2KHR*, Result>)(
                _slots[537] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[537] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceDisplayProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayProperties2KHR* pProperties
    ) =>
        ThisThread.GetPhysicalDeviceDisplayProperties2KHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceDisplayProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayProperties2KHR> pProperties
    )
    {
        fixed (DisplayProperties2KHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceDisplayProperties2KHR(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayProperties2KHR> pProperties
    ) =>
        ThisThread.GetPhysicalDeviceDisplayProperties2KHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceDisplayPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayPropertiesKHR* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, uint*, DisplayPropertiesKHR*, Result>)(
                _slots[538] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[538] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceDisplayPropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayPropertiesKHR* pProperties
    ) =>
        ThisThread.GetPhysicalDeviceDisplayPropertiesKHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceDisplayPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayPropertiesKHR> pProperties
    )
    {
        fixed (DisplayPropertiesKHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceDisplayPropertiesKHR(
                    physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayPropertiesKHR> pProperties
    ) =>
        ThisThread.GetPhysicalDeviceDisplayPropertiesKHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceExternalBufferProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            PhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
        ExternalBufferProperties* pExternalBufferProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceExternalBufferInfo*,
                ExternalBufferProperties*,
                void>)(
                _slots[539] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[539] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalBufferProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalBufferProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            PhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
        ExternalBufferProperties* pExternalBufferProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalBufferProperties(
            physicalDevice,
            pExternalBufferInfo,
            pExternalBufferProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceExternalBufferProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            Ref<PhysicalDeviceExternalBufferInfo> pExternalBufferInfo,
        Ref<ExternalBufferProperties> pExternalBufferProperties
    )
    {
        fixed (
            ExternalBufferProperties* __dsl_pExternalBufferProperties = pExternalBufferProperties
        )
        fixed (PhysicalDeviceExternalBufferInfo* __dsl_pExternalBufferInfo = pExternalBufferInfo)
        {
            ((IVk)this).GetPhysicalDeviceExternalBufferProperties(
                physicalDevice,
                __dsl_pExternalBufferInfo,
                __dsl_pExternalBufferProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalBufferProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            Ref<PhysicalDeviceExternalBufferInfo> pExternalBufferInfo,
        Ref<ExternalBufferProperties> pExternalBufferProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalBufferProperties(
            physicalDevice,
            pExternalBufferInfo,
            pExternalBufferProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceExternalBufferPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            PhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
        ExternalBufferProperties* pExternalBufferProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceExternalBufferInfo*,
                ExternalBufferProperties*,
                void>)(
                _slots[540] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[540] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalBufferPropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalBufferPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            PhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
        ExternalBufferProperties* pExternalBufferProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalBufferPropertiesKHR(
            physicalDevice,
            pExternalBufferInfo,
            pExternalBufferProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceExternalBufferPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            Ref<PhysicalDeviceExternalBufferInfo> pExternalBufferInfo,
        Ref<ExternalBufferProperties> pExternalBufferProperties
    )
    {
        fixed (
            ExternalBufferProperties* __dsl_pExternalBufferProperties = pExternalBufferProperties
        )
        fixed (PhysicalDeviceExternalBufferInfo* __dsl_pExternalBufferInfo = pExternalBufferInfo)
        {
            ((IVk)this).GetPhysicalDeviceExternalBufferPropertiesKHR(
                physicalDevice,
                __dsl_pExternalBufferInfo,
                __dsl_pExternalBufferProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalBufferPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            Ref<PhysicalDeviceExternalBufferInfo> pExternalBufferInfo,
        Ref<ExternalBufferProperties> pExternalBufferProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalBufferPropertiesKHR(
            physicalDevice,
            pExternalBufferInfo,
            pExternalBufferProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFenceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceExternalFenceProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            PhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
        ExternalFenceProperties* pExternalFenceProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceExternalFenceInfo*,
                ExternalFenceProperties*,
                void>)(
                _slots[541] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[541] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalFenceProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFenceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalFenceProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            PhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
        ExternalFenceProperties* pExternalFenceProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalFenceProperties(
            physicalDevice,
            pExternalFenceInfo,
            pExternalFenceProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFenceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceExternalFenceProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            Ref<PhysicalDeviceExternalFenceInfo> pExternalFenceInfo,
        Ref<ExternalFenceProperties> pExternalFenceProperties
    )
    {
        fixed (ExternalFenceProperties* __dsl_pExternalFenceProperties = pExternalFenceProperties)
        fixed (PhysicalDeviceExternalFenceInfo* __dsl_pExternalFenceInfo = pExternalFenceInfo)
        {
            ((IVk)this).GetPhysicalDeviceExternalFenceProperties(
                physicalDevice,
                __dsl_pExternalFenceInfo,
                __dsl_pExternalFenceProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFenceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalFenceProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            Ref<PhysicalDeviceExternalFenceInfo> pExternalFenceInfo,
        Ref<ExternalFenceProperties> pExternalFenceProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalFenceProperties(
            physicalDevice,
            pExternalFenceInfo,
            pExternalFenceProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_fence_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_fence_capabilities+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFencePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceExternalFencePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            PhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
        ExternalFenceProperties* pExternalFenceProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceExternalFenceInfo*,
                ExternalFenceProperties*,
                void>)(
                _slots[542] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[542] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalFencePropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_fence_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_fence_capabilities+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFencePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalFencePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            PhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
        ExternalFenceProperties* pExternalFenceProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalFencePropertiesKHR(
            physicalDevice,
            pExternalFenceInfo,
            pExternalFenceProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_fence_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_fence_capabilities+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFencePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceExternalFencePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            Ref<PhysicalDeviceExternalFenceInfo> pExternalFenceInfo,
        Ref<ExternalFenceProperties> pExternalFenceProperties
    )
    {
        fixed (ExternalFenceProperties* __dsl_pExternalFenceProperties = pExternalFenceProperties)
        fixed (PhysicalDeviceExternalFenceInfo* __dsl_pExternalFenceInfo = pExternalFenceInfo)
        {
            ((IVk)this).GetPhysicalDeviceExternalFencePropertiesKHR(
                physicalDevice,
                __dsl_pExternalFenceInfo,
                __dsl_pExternalFenceProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_fence_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_fence_capabilities+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFencePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalFencePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            Ref<PhysicalDeviceExternalFenceInfo> pExternalFenceInfo,
        Ref<ExternalFenceProperties> pExternalFenceProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalFencePropertiesKHR(
            physicalDevice,
            pExternalFenceInfo,
            pExternalFenceProperties
        );

    [SupportedApiProfile("vulkan", ["VK_NV_external_memory_capabilities"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalImageFormatPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceExternalImageFormatPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
        [NativeTypeName("VkImageCreateFlags")] ImageCreateFlags flags,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagsNV")]
            ExternalMemoryHandleTypeFlagsNV externalHandleType,
        ExternalImageFormatPropertiesNV* pExternalImageFormatProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                Format,
                ImageType,
                ImageTiling,
                ImageUsageFlags,
                ImageCreateFlags,
                ExternalMemoryHandleTypeFlagsNV,
                ExternalImageFormatPropertiesNV*,
                Result>)(
                _slots[543] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[543] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalImageFormatPropertiesNV",
                        "vulkan"
                    )
            )
        )(
            physicalDevice,
            format,
            type,
            tiling,
            usage,
            flags,
            externalHandleType,
            pExternalImageFormatProperties
        );

    [SupportedApiProfile("vulkan", ["VK_NV_external_memory_capabilities"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalImageFormatPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceExternalImageFormatPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
        [NativeTypeName("VkImageCreateFlags")] ImageCreateFlags flags,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagsNV")]
            ExternalMemoryHandleTypeFlagsNV externalHandleType,
        ExternalImageFormatPropertiesNV* pExternalImageFormatProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalImageFormatPropertiesNV(
            physicalDevice,
            format,
            type,
            tiling,
            usage,
            flags,
            externalHandleType,
            pExternalImageFormatProperties
        );

    [SupportedApiProfile("vulkan", ["VK_NV_external_memory_capabilities"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalImageFormatPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceExternalImageFormatPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
        [NativeTypeName("VkImageCreateFlags")] ImageCreateFlags flags,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagsNV")]
            ExternalMemoryHandleTypeFlagsNV externalHandleType,
        Ref<ExternalImageFormatPropertiesNV> pExternalImageFormatProperties
    )
    {
        fixed (
            ExternalImageFormatPropertiesNV* __dsl_pExternalImageFormatProperties =
                pExternalImageFormatProperties
        )
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceExternalImageFormatPropertiesNV(
                    physicalDevice,
                    format,
                    type,
                    tiling,
                    usage,
                    flags,
                    externalHandleType,
                    __dsl_pExternalImageFormatProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_external_memory_capabilities"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalImageFormatPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceExternalImageFormatPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
        [NativeTypeName("VkImageCreateFlags")] ImageCreateFlags flags,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagsNV")]
            ExternalMemoryHandleTypeFlagsNV externalHandleType,
        Ref<ExternalImageFormatPropertiesNV> pExternalImageFormatProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalImageFormatPropertiesNV(
            physicalDevice,
            format,
            type,
            tiling,
            usage,
            flags,
            externalHandleType,
            pExternalImageFormatProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphoreProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceExternalSemaphoreProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
        ExternalSemaphoreProperties* pExternalSemaphoreProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceExternalSemaphoreInfo*,
                ExternalSemaphoreProperties*,
                void>)(
                _slots[544] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[544] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalSemaphoreProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphoreProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalSemaphoreProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
        ExternalSemaphoreProperties* pExternalSemaphoreProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalSemaphoreProperties(
            physicalDevice,
            pExternalSemaphoreInfo,
            pExternalSemaphoreProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphoreProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceExternalSemaphoreProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            Ref<PhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo,
        Ref<ExternalSemaphoreProperties> pExternalSemaphoreProperties
    )
    {
        fixed (
            ExternalSemaphoreProperties* __dsl_pExternalSemaphoreProperties =
                pExternalSemaphoreProperties
        )
        fixed (
            PhysicalDeviceExternalSemaphoreInfo* __dsl_pExternalSemaphoreInfo =
                pExternalSemaphoreInfo
        )
        {
            ((IVk)this).GetPhysicalDeviceExternalSemaphoreProperties(
                physicalDevice,
                __dsl_pExternalSemaphoreInfo,
                __dsl_pExternalSemaphoreProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphoreProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalSemaphoreProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            Ref<PhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo,
        Ref<ExternalSemaphoreProperties> pExternalSemaphoreProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalSemaphoreProperties(
            physicalDevice,
            pExternalSemaphoreInfo,
            pExternalSemaphoreProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_semaphore_capabilities+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceExternalSemaphorePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
        ExternalSemaphoreProperties* pExternalSemaphoreProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceExternalSemaphoreInfo*,
                ExternalSemaphoreProperties*,
                void>)(
                _slots[545] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[545] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_semaphore_capabilities+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalSemaphorePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
        ExternalSemaphoreProperties* pExternalSemaphoreProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalSemaphorePropertiesKHR(
            physicalDevice,
            pExternalSemaphoreInfo,
            pExternalSemaphoreProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_semaphore_capabilities+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceExternalSemaphorePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            Ref<PhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo,
        Ref<ExternalSemaphoreProperties> pExternalSemaphoreProperties
    )
    {
        fixed (
            ExternalSemaphoreProperties* __dsl_pExternalSemaphoreProperties =
                pExternalSemaphoreProperties
        )
        fixed (
            PhysicalDeviceExternalSemaphoreInfo* __dsl_pExternalSemaphoreInfo =
                pExternalSemaphoreInfo
        )
        {
            ((IVk)this).GetPhysicalDeviceExternalSemaphorePropertiesKHR(
                physicalDevice,
                __dsl_pExternalSemaphoreInfo,
                __dsl_pExternalSemaphoreProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_semaphore_capabilities+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalSemaphorePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            Ref<PhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo,
        Ref<ExternalSemaphoreProperties> pExternalSemaphoreProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalSemaphorePropertiesKHR(
            physicalDevice,
            pExternalSemaphoreInfo,
            pExternalSemaphoreProperties
        );

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalTensorPropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceExternalTensorPropertiesARM(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalTensorInfoARM *")]
            PhysicalDeviceExternalTensorInfoARM* pExternalTensorInfo,
        ExternalTensorPropertiesARM* pExternalTensorProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceExternalTensorInfoARM*,
                ExternalTensorPropertiesARM*,
                void>)(
                _slots[546] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[546] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalTensorPropertiesARM",
                        "vulkan"
                    )
            )
        )(physicalDevice, pExternalTensorInfo, pExternalTensorProperties);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalTensorPropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalTensorPropertiesARM(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalTensorInfoARM *")]
            PhysicalDeviceExternalTensorInfoARM* pExternalTensorInfo,
        ExternalTensorPropertiesARM* pExternalTensorProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalTensorPropertiesARM(
            physicalDevice,
            pExternalTensorInfo,
            pExternalTensorProperties
        );

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalTensorPropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceExternalTensorPropertiesARM(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalTensorInfoARM *")]
            Ref<PhysicalDeviceExternalTensorInfoARM> pExternalTensorInfo,
        Ref<ExternalTensorPropertiesARM> pExternalTensorProperties
    )
    {
        fixed (
            ExternalTensorPropertiesARM* __dsl_pExternalTensorProperties = pExternalTensorProperties
        )
        fixed (PhysicalDeviceExternalTensorInfoARM* __dsl_pExternalTensorInfo = pExternalTensorInfo)
        {
            ((IVk)this).GetPhysicalDeviceExternalTensorPropertiesARM(
                physicalDevice,
                __dsl_pExternalTensorInfo,
                __dsl_pExternalTensorProperties
            );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalTensorPropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalTensorPropertiesARM(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalTensorInfoARM *")]
            Ref<PhysicalDeviceExternalTensorInfoARM> pExternalTensorInfo,
        Ref<ExternalTensorPropertiesARM> pExternalTensorProperties
    ) =>
        ThisThread.GetPhysicalDeviceExternalTensorPropertiesARM(
            physicalDevice,
            pExternalTensorInfo,
            pExternalTensorProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceFeatures(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceFeatures* pFeatures
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, PhysicalDeviceFeatures*, void>)(
                _slots[547] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[547] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceFeatures",
                        "vulkan"
                    )
            )
        )(physicalDevice, pFeatures);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFeatures(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceFeatures* pFeatures
    ) => ThisThread.GetPhysicalDeviceFeatures(physicalDevice, pFeatures);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceFeatures(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceFeatures> pFeatures
    )
    {
        fixed (PhysicalDeviceFeatures* __dsl_pFeatures = pFeatures)
        {
            ((IVk)this).GetPhysicalDeviceFeatures(physicalDevice, __dsl_pFeatures);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFeatures(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceFeatures> pFeatures
    ) => ThisThread.GetPhysicalDeviceFeatures(physicalDevice, pFeatures);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceFeatures2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceFeatures2* pFeatures
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, PhysicalDeviceFeatures2*, void>)(
                _slots[548] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[548] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceFeatures2",
                        "vulkan"
                    )
            )
        )(physicalDevice, pFeatures);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFeatures2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceFeatures2* pFeatures
    ) => ThisThread.GetPhysicalDeviceFeatures2(physicalDevice, pFeatures);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceFeatures2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceFeatures2> pFeatures
    )
    {
        fixed (PhysicalDeviceFeatures2* __dsl_pFeatures = pFeatures)
        {
            ((IVk)this).GetPhysicalDeviceFeatures2(physicalDevice, __dsl_pFeatures);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFeatures2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceFeatures2> pFeatures
    ) => ThisThread.GetPhysicalDeviceFeatures2(physicalDevice, pFeatures);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceFeatures2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceFeatures2* pFeatures
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, PhysicalDeviceFeatures2*, void>)(
                _slots[549] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[549] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceFeatures2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pFeatures);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFeatures2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceFeatures2* pFeatures
    ) => ThisThread.GetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceFeatures2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceFeatures2> pFeatures
    )
    {
        fixed (PhysicalDeviceFeatures2* __dsl_pFeatures = pFeatures)
        {
            ((IVk)this).GetPhysicalDeviceFeatures2KHR(physicalDevice, __dsl_pFeatures);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFeatures2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceFeatures2> pFeatures
    ) => ThisThread.GetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        FormatProperties* pFormatProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, Format, FormatProperties*, void>)(
                _slots[550] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[550] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceFormatProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, format, pFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        FormatProperties* pFormatProperties
    ) => ThisThread.GetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        Ref<FormatProperties> pFormatProperties
    )
    {
        fixed (FormatProperties* __dsl_pFormatProperties = pFormatProperties)
        {
            ((IVk)this).GetPhysicalDeviceFormatProperties(
                physicalDevice,
                format,
                __dsl_pFormatProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        Ref<FormatProperties> pFormatProperties
    ) => ThisThread.GetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        FormatProperties2* pFormatProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, Format, FormatProperties2*, void>)(
                _slots[551] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[551] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceFormatProperties2",
                        "vulkan"
                    )
            )
        )(physicalDevice, format, pFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        FormatProperties2* pFormatProperties
    ) => ThisThread.GetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        Ref<FormatProperties2> pFormatProperties
    )
    {
        fixed (FormatProperties2* __dsl_pFormatProperties = pFormatProperties)
        {
            ((IVk)this).GetPhysicalDeviceFormatProperties2(
                physicalDevice,
                format,
                __dsl_pFormatProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        Ref<FormatProperties2> pFormatProperties
    ) => ThisThread.GetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        FormatProperties2* pFormatProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, Format, FormatProperties2*, void>)(
                _slots[552] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[552] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceFormatProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, format, pFormatProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        FormatProperties2* pFormatProperties
    ) =>
        ThisThread.GetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        Ref<FormatProperties2> pFormatProperties
    )
    {
        fixed (FormatProperties2* __dsl_pFormatProperties = pFormatProperties)
        {
            ((IVk)this).GetPhysicalDeviceFormatProperties2KHR(
                physicalDevice,
                format,
                __dsl_pFormatProperties
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        Ref<FormatProperties2> pFormatProperties
    ) =>
        ThisThread.GetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFragmentShadingRatesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceFragmentShadingRatesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pFragmentShadingRateCount,
        PhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                uint*,
                PhysicalDeviceFragmentShadingRateKHR*,
                Result>)(
                _slots[553] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[553] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceFragmentShadingRatesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFragmentShadingRatesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceFragmentShadingRatesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pFragmentShadingRateCount,
        PhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates
    ) =>
        ThisThread.GetPhysicalDeviceFragmentShadingRatesKHR(
            physicalDevice,
            pFragmentShadingRateCount,
            pFragmentShadingRates
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFragmentShadingRatesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceFragmentShadingRatesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pFragmentShadingRateCount,
        Ref<PhysicalDeviceFragmentShadingRateKHR> pFragmentShadingRates
    )
    {
        fixed (
            PhysicalDeviceFragmentShadingRateKHR* __dsl_pFragmentShadingRates =
                pFragmentShadingRates
        )
        fixed (uint* __dsl_pFragmentShadingRateCount = pFragmentShadingRateCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceFragmentShadingRatesKHR(
                    physicalDevice,
                    __dsl_pFragmentShadingRateCount,
                    __dsl_pFragmentShadingRates
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFragmentShadingRatesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceFragmentShadingRatesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pFragmentShadingRateCount,
        Ref<PhysicalDeviceFragmentShadingRateKHR> pFragmentShadingRates
    ) =>
        ThisThread.GetPhysicalDeviceFragmentShadingRatesKHR(
            physicalDevice,
            pFragmentShadingRateCount,
            pFragmentShadingRates
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
        [NativeTypeName("VkImageCreateFlags")] ImageCreateFlags flags,
        ImageFormatProperties* pImageFormatProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                Format,
                ImageType,
                ImageTiling,
                ImageUsageFlags,
                ImageCreateFlags,
                ImageFormatProperties*,
                Result>)(
                _slots[554] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[554] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceImageFormatProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
        [NativeTypeName("VkImageCreateFlags")] ImageCreateFlags flags,
        ImageFormatProperties* pImageFormatProperties
    ) =>
        ThisThread.GetPhysicalDeviceImageFormatProperties(
            physicalDevice,
            format,
            type,
            tiling,
            usage,
            flags,
            pImageFormatProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
        [NativeTypeName("VkImageCreateFlags")] ImageCreateFlags flags,
        Ref<ImageFormatProperties> pImageFormatProperties
    )
    {
        fixed (ImageFormatProperties* __dsl_pImageFormatProperties = pImageFormatProperties)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceImageFormatProperties(
                    physicalDevice,
                    format,
                    type,
                    tiling,
                    usage,
                    flags,
                    __dsl_pImageFormatProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
        [NativeTypeName("VkImageCreateFlags")] ImageCreateFlags flags,
        Ref<ImageFormatProperties> pImageFormatProperties
    ) =>
        ThisThread.GetPhysicalDeviceImageFormatProperties(
            physicalDevice,
            format,
            type,
            tiling,
            usage,
            flags,
            pImageFormatProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            PhysicalDeviceImageFormatInfo2* pImageFormatInfo,
        ImageFormatProperties2* pImageFormatProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceImageFormatInfo2*,
                ImageFormatProperties2*,
                Result>)(
                _slots[555] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[555] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceImageFormatProperties2",
                        "vulkan"
                    )
            )
        )(physicalDevice, pImageFormatInfo, pImageFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            PhysicalDeviceImageFormatInfo2* pImageFormatInfo,
        ImageFormatProperties2* pImageFormatProperties
    ) =>
        ThisThread.GetPhysicalDeviceImageFormatProperties2(
            physicalDevice,
            pImageFormatInfo,
            pImageFormatProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            Ref<PhysicalDeviceImageFormatInfo2> pImageFormatInfo,
        Ref<ImageFormatProperties2> pImageFormatProperties
    )
    {
        fixed (ImageFormatProperties2* __dsl_pImageFormatProperties = pImageFormatProperties)
        fixed (PhysicalDeviceImageFormatInfo2* __dsl_pImageFormatInfo = pImageFormatInfo)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceImageFormatProperties2(
                    physicalDevice,
                    __dsl_pImageFormatInfo,
                    __dsl_pImageFormatProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            Ref<PhysicalDeviceImageFormatInfo2> pImageFormatInfo,
        Ref<ImageFormatProperties2> pImageFormatProperties
    ) =>
        ThisThread.GetPhysicalDeviceImageFormatProperties2(
            physicalDevice,
            pImageFormatInfo,
            pImageFormatProperties
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            PhysicalDeviceImageFormatInfo2* pImageFormatInfo,
        ImageFormatProperties2* pImageFormatProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceImageFormatInfo2*,
                ImageFormatProperties2*,
                Result>)(
                _slots[556] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[556] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceImageFormatProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pImageFormatInfo, pImageFormatProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            PhysicalDeviceImageFormatInfo2* pImageFormatInfo,
        ImageFormatProperties2* pImageFormatProperties
    ) =>
        ThisThread.GetPhysicalDeviceImageFormatProperties2KHR(
            physicalDevice,
            pImageFormatInfo,
            pImageFormatProperties
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            Ref<PhysicalDeviceImageFormatInfo2> pImageFormatInfo,
        Ref<ImageFormatProperties2> pImageFormatProperties
    )
    {
        fixed (ImageFormatProperties2* __dsl_pImageFormatProperties = pImageFormatProperties)
        fixed (PhysicalDeviceImageFormatInfo2* __dsl_pImageFormatInfo = pImageFormatInfo)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceImageFormatProperties2KHR(
                    physicalDevice,
                    __dsl_pImageFormatInfo,
                    __dsl_pImageFormatProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            Ref<PhysicalDeviceImageFormatInfo2> pImageFormatInfo,
        Ref<ImageFormatProperties2> pImageFormatProperties
    ) =>
        ThisThread.GetPhysicalDeviceImageFormatProperties2KHR(
            physicalDevice,
            pImageFormatInfo,
            pImageFormatProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceMemoryProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceMemoryProperties* pMemoryProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, PhysicalDeviceMemoryProperties*, void>)(
                _slots[557] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[557] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceMemoryProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pMemoryProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMemoryProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceMemoryProperties* pMemoryProperties
    ) => ThisThread.GetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceMemoryProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceMemoryProperties> pMemoryProperties
    )
    {
        fixed (PhysicalDeviceMemoryProperties* __dsl_pMemoryProperties = pMemoryProperties)
        {
            ((IVk)this).GetPhysicalDeviceMemoryProperties(physicalDevice, __dsl_pMemoryProperties);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMemoryProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceMemoryProperties> pMemoryProperties
    ) => ThisThread.GetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceMemoryProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceMemoryProperties2* pMemoryProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, PhysicalDeviceMemoryProperties2*, void>)(
                _slots[558] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[558] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceMemoryProperties2",
                        "vulkan"
                    )
            )
        )(physicalDevice, pMemoryProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMemoryProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceMemoryProperties2* pMemoryProperties
    ) => ThisThread.GetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceMemoryProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceMemoryProperties2> pMemoryProperties
    )
    {
        fixed (PhysicalDeviceMemoryProperties2* __dsl_pMemoryProperties = pMemoryProperties)
        {
            ((IVk)this).GetPhysicalDeviceMemoryProperties2(physicalDevice, __dsl_pMemoryProperties);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMemoryProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceMemoryProperties2> pMemoryProperties
    ) => ThisThread.GetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceMemoryProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceMemoryProperties2* pMemoryProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, PhysicalDeviceMemoryProperties2*, void>)(
                _slots[559] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[559] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceMemoryProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pMemoryProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMemoryProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceMemoryProperties2* pMemoryProperties
    ) => ThisThread.GetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceMemoryProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceMemoryProperties2> pMemoryProperties
    )
    {
        fixed (PhysicalDeviceMemoryProperties2* __dsl_pMemoryProperties = pMemoryProperties)
        {
            ((IVk)this).GetPhysicalDeviceMemoryProperties2KHR(
                physicalDevice,
                __dsl_pMemoryProperties
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMemoryProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceMemoryProperties2> pMemoryProperties
    ) => ThisThread.GetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMultisamplePropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceMultisamplePropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        SampleCountFlags samples,
        MultisamplePropertiesEXT* pMultisampleProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                SampleCountFlags,
                MultisamplePropertiesEXT*,
                void>)(
                _slots[560] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[560] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceMultisamplePropertiesEXT",
                        "vulkan"
                    )
            )
        )(physicalDevice, samples, pMultisampleProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMultisamplePropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMultisamplePropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        SampleCountFlags samples,
        MultisamplePropertiesEXT* pMultisampleProperties
    ) =>
        ThisThread.GetPhysicalDeviceMultisamplePropertiesEXT(
            physicalDevice,
            samples,
            pMultisampleProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMultisamplePropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceMultisamplePropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        SampleCountFlags samples,
        Ref<MultisamplePropertiesEXT> pMultisampleProperties
    )
    {
        fixed (MultisamplePropertiesEXT* __dsl_pMultisampleProperties = pMultisampleProperties)
        {
            ((IVk)this).GetPhysicalDeviceMultisamplePropertiesEXT(
                physicalDevice,
                samples,
                __dsl_pMultisampleProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMultisamplePropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMultisamplePropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        SampleCountFlags samples,
        Ref<MultisamplePropertiesEXT> pMultisampleProperties
    ) =>
        ThisThread.GetPhysicalDeviceMultisamplePropertiesEXT(
            physicalDevice,
            samples,
            pMultisampleProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceOpticalFlowImageFormatsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceOpticalFlowImageFormatsNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkOpticalFlowImageFormatInfoNV *")]
            OpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pFormatCount,
        OpticalFlowImageFormatPropertiesNV* pImageFormatProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                OpticalFlowImageFormatInfoNV*,
                uint*,
                OpticalFlowImageFormatPropertiesNV*,
                Result>)(
                _slots[561] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[561] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceOpticalFlowImageFormatsNV",
                        "vulkan"
                    )
            )
        )(physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount, pImageFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceOpticalFlowImageFormatsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceOpticalFlowImageFormatsNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkOpticalFlowImageFormatInfoNV *")]
            OpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pFormatCount,
        OpticalFlowImageFormatPropertiesNV* pImageFormatProperties
    ) =>
        ThisThread.GetPhysicalDeviceOpticalFlowImageFormatsNV(
            physicalDevice,
            pOpticalFlowImageFormatInfo,
            pFormatCount,
            pImageFormatProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceOpticalFlowImageFormatsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceOpticalFlowImageFormatsNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkOpticalFlowImageFormatInfoNV *")]
            Ref<OpticalFlowImageFormatInfoNV> pOpticalFlowImageFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pFormatCount,
        Ref<OpticalFlowImageFormatPropertiesNV> pImageFormatProperties
    )
    {
        fixed (
            OpticalFlowImageFormatPropertiesNV* __dsl_pImageFormatProperties =
                pImageFormatProperties
        )
        fixed (uint* __dsl_pFormatCount = pFormatCount)
        fixed (
            OpticalFlowImageFormatInfoNV* __dsl_pOpticalFlowImageFormatInfo =
                pOpticalFlowImageFormatInfo
        )
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceOpticalFlowImageFormatsNV(
                    physicalDevice,
                    __dsl_pOpticalFlowImageFormatInfo,
                    __dsl_pFormatCount,
                    __dsl_pImageFormatProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceOpticalFlowImageFormatsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceOpticalFlowImageFormatsNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkOpticalFlowImageFormatInfoNV *")]
            Ref<OpticalFlowImageFormatInfoNV> pOpticalFlowImageFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pFormatCount,
        Ref<OpticalFlowImageFormatPropertiesNV> pImageFormatProperties
    ) =>
        ThisThread.GetPhysicalDeviceOpticalFlowImageFormatsNV(
            physicalDevice,
            pOpticalFlowImageFormatInfo,
            pFormatCount,
            pImageFormatProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDevicePresentRectanglesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDevicePresentRectanglesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("uint32_t *")] uint* pRectCount,
        Rect2D* pRects
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, SurfaceKHRHandle, uint*, Rect2D*, Result>)(
                _slots[562] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[562] = nativeContext.LoadFunction(
                        "vkGetPhysicalDevicePresentRectanglesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, surface, pRectCount, pRects);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDevicePresentRectanglesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDevicePresentRectanglesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("uint32_t *")] uint* pRectCount,
        Rect2D* pRects
    ) =>
        ThisThread.GetPhysicalDevicePresentRectanglesKHR(
            physicalDevice,
            surface,
            pRectCount,
            pRects
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDevicePresentRectanglesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDevicePresentRectanglesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("uint32_t *")] Ref<uint> pRectCount,
        Ref<Rect2D> pRects
    )
    {
        fixed (Rect2D* __dsl_pRects = pRects)
        fixed (uint* __dsl_pRectCount = pRectCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDevicePresentRectanglesKHR(
                    physicalDevice,
                    surface,
                    __dsl_pRectCount,
                    __dsl_pRects
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDevicePresentRectanglesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDevicePresentRectanglesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("uint32_t *")] Ref<uint> pRectCount,
        Ref<Rect2D> pRects
    ) =>
        ThisThread.GetPhysicalDevicePresentRectanglesKHR(
            physicalDevice,
            surface,
            pRectCount,
            pRects
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceProperties* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, PhysicalDeviceProperties*, void>)(
                _slots[563] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[563] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceProperties* pProperties
    ) => ThisThread.GetPhysicalDeviceProperties(physicalDevice, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceProperties> pProperties
    )
    {
        fixed (PhysicalDeviceProperties* __dsl_pProperties = pProperties)
        {
            ((IVk)this).GetPhysicalDeviceProperties(physicalDevice, __dsl_pProperties);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceProperties> pProperties
    ) => ThisThread.GetPhysicalDeviceProperties(physicalDevice, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceProperties2* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, PhysicalDeviceProperties2*, void>)(
                _slots[564] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[564] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceProperties2",
                        "vulkan"
                    )
            )
        )(physicalDevice, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceProperties2* pProperties
    ) => ThisThread.GetPhysicalDeviceProperties2(physicalDevice, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceProperties2> pProperties
    )
    {
        fixed (PhysicalDeviceProperties2* __dsl_pProperties = pProperties)
        {
            ((IVk)this).GetPhysicalDeviceProperties2(physicalDevice, __dsl_pProperties);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceProperties2> pProperties
    ) => ThisThread.GetPhysicalDeviceProperties2(physicalDevice, pProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceProperties2* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, PhysicalDeviceProperties2*, void>)(
                _slots[565] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[565] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        PhysicalDeviceProperties2* pProperties
    ) => ThisThread.GetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceProperties2> pProperties
    )
    {
        fixed (PhysicalDeviceProperties2* __dsl_pProperties = pProperties)
        {
            ((IVk)this).GetPhysicalDeviceProperties2KHR(physicalDevice, __dsl_pProperties);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Ref<PhysicalDeviceProperties2> pProperties
    ) => ThisThread.GetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);

    [SupportedApiProfile("vulkan")]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM *")]
            PhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM* pQueueFamilyDataGraphProcessingEngineInfo,
        QueueFamilyDataGraphProcessingEnginePropertiesARM* pQueueFamilyDataGraphProcessingEngineProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM*,
                QueueFamilyDataGraphProcessingEnginePropertiesARM*,
                void>)(
                _slots[566] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[566] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM",
                        "vulkan"
                    )
            )
        )(
            physicalDevice,
            pQueueFamilyDataGraphProcessingEngineInfo,
            pQueueFamilyDataGraphProcessingEngineProperties
        );

    [SupportedApiProfile("vulkan")]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM *")]
            PhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM* pQueueFamilyDataGraphProcessingEngineInfo,
        QueueFamilyDataGraphProcessingEnginePropertiesARM* pQueueFamilyDataGraphProcessingEngineProperties
    ) =>
        ThisThread.GetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(
            physicalDevice,
            pQueueFamilyDataGraphProcessingEngineInfo,
            pQueueFamilyDataGraphProcessingEngineProperties
        );

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM *")]
            Ref<PhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM> pQueueFamilyDataGraphProcessingEngineInfo,
        Ref<QueueFamilyDataGraphProcessingEnginePropertiesARM> pQueueFamilyDataGraphProcessingEngineProperties
    )
    {
        fixed (
            QueueFamilyDataGraphProcessingEnginePropertiesARM* __dsl_pQueueFamilyDataGraphProcessingEngineProperties =
                pQueueFamilyDataGraphProcessingEngineProperties
        )
        fixed (
            PhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM* __dsl_pQueueFamilyDataGraphProcessingEngineInfo =
                pQueueFamilyDataGraphProcessingEngineInfo
        )
        {
            ((IVk)this).GetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(
                physicalDevice,
                __dsl_pQueueFamilyDataGraphProcessingEngineInfo,
                __dsl_pQueueFamilyDataGraphProcessingEngineProperties
            );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM *")]
            Ref<PhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM> pQueueFamilyDataGraphProcessingEngineInfo,
        Ref<QueueFamilyDataGraphProcessingEnginePropertiesARM> pQueueFamilyDataGraphProcessingEngineProperties
    ) =>
        ThisThread.GetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(
            physicalDevice,
            pQueueFamilyDataGraphProcessingEngineInfo,
            pQueueFamilyDataGraphProcessingEngineProperties
        );

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t *")] uint* pQueueFamilyDataGraphPropertyCount,
        QueueFamilyDataGraphPropertiesARM* pQueueFamilyDataGraphProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                uint,
                uint*,
                QueueFamilyDataGraphPropertiesARM*,
                Result>)(
                _slots[567] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[567] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM",
                        "vulkan"
                    )
            )
        )(
            physicalDevice,
            queueFamilyIndex,
            pQueueFamilyDataGraphPropertyCount,
            pQueueFamilyDataGraphProperties
        );

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t *")] uint* pQueueFamilyDataGraphPropertyCount,
        QueueFamilyDataGraphPropertiesARM* pQueueFamilyDataGraphProperties
    ) =>
        ThisThread.GetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(
            physicalDevice,
            queueFamilyIndex,
            pQueueFamilyDataGraphPropertyCount,
            pQueueFamilyDataGraphProperties
        );

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyDataGraphPropertyCount,
        Ref<QueueFamilyDataGraphPropertiesARM> pQueueFamilyDataGraphProperties
    )
    {
        fixed (
            QueueFamilyDataGraphPropertiesARM* __dsl_pQueueFamilyDataGraphProperties =
                pQueueFamilyDataGraphProperties
        )
        fixed (uint* __dsl_pQueueFamilyDataGraphPropertyCount = pQueueFamilyDataGraphPropertyCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(
                    physicalDevice,
                    queueFamilyIndex,
                    __dsl_pQueueFamilyDataGraphPropertyCount,
                    __dsl_pQueueFamilyDataGraphProperties
                );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyDataGraphPropertyCount,
        Ref<QueueFamilyDataGraphPropertiesARM> pQueueFamilyDataGraphProperties
    ) =>
        ThisThread.GetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(
            physicalDevice,
            queueFamilyIndex,
            pQueueFamilyDataGraphPropertyCount,
            pQueueFamilyDataGraphProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkQueryPoolPerformanceCreateInfoKHR *")]
            QueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo,
        [NativeTypeName("uint32_t *")] uint* pNumPasses
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                QueryPoolPerformanceCreateInfoKHR*,
                uint*,
                void>)(
                _slots[568] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[568] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkQueryPoolPerformanceCreateInfoKHR *")]
            QueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo,
        [NativeTypeName("uint32_t *")] uint* pNumPasses
    ) =>
        ThisThread.GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
            physicalDevice,
            pPerformanceQueryCreateInfo,
            pNumPasses
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkQueryPoolPerformanceCreateInfoKHR *")]
            Ref<QueryPoolPerformanceCreateInfoKHR> pPerformanceQueryCreateInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pNumPasses
    )
    {
        fixed (uint* __dsl_pNumPasses = pNumPasses)
        fixed (
            QueryPoolPerformanceCreateInfoKHR* __dsl_pPerformanceQueryCreateInfo =
                pPerformanceQueryCreateInfo
        )
        {
            ((IVk)this).GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
                physicalDevice,
                __dsl_pPerformanceQueryCreateInfo,
                __dsl_pNumPasses
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkQueryPoolPerformanceCreateInfoKHR *")]
            Ref<QueryPoolPerformanceCreateInfoKHR> pPerformanceQueryCreateInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pNumPasses
    ) =>
        ThisThread.GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
            physicalDevice,
            pPerformanceQueryCreateInfo,
            pNumPasses
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceQueueFamilyProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
        QueueFamilyProperties* pQueueFamilyProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, uint*, QueueFamilyProperties*, void>)(
                _slots[569] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[569] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceQueueFamilyProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
        QueueFamilyProperties* pQueueFamilyProperties
    ) =>
        ThisThread.GetPhysicalDeviceQueueFamilyProperties(
            physicalDevice,
            pQueueFamilyPropertyCount,
            pQueueFamilyProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceQueueFamilyProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
        Ref<QueueFamilyProperties> pQueueFamilyProperties
    )
    {
        fixed (QueueFamilyProperties* __dsl_pQueueFamilyProperties = pQueueFamilyProperties)
        fixed (uint* __dsl_pQueueFamilyPropertyCount = pQueueFamilyPropertyCount)
        {
            ((IVk)this).GetPhysicalDeviceQueueFamilyProperties(
                physicalDevice,
                __dsl_pQueueFamilyPropertyCount,
                __dsl_pQueueFamilyProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
        Ref<QueueFamilyProperties> pQueueFamilyProperties
    ) =>
        ThisThread.GetPhysicalDeviceQueueFamilyProperties(
            physicalDevice,
            pQueueFamilyPropertyCount,
            pQueueFamilyProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceQueueFamilyProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
        QueueFamilyProperties2* pQueueFamilyProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, uint*, QueueFamilyProperties2*, void>)(
                _slots[570] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[570] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceQueueFamilyProperties2",
                        "vulkan"
                    )
            )
        )(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
        QueueFamilyProperties2* pQueueFamilyProperties
    ) =>
        ThisThread.GetPhysicalDeviceQueueFamilyProperties2(
            physicalDevice,
            pQueueFamilyPropertyCount,
            pQueueFamilyProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceQueueFamilyProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
        Ref<QueueFamilyProperties2> pQueueFamilyProperties
    )
    {
        fixed (QueueFamilyProperties2* __dsl_pQueueFamilyProperties = pQueueFamilyProperties)
        fixed (uint* __dsl_pQueueFamilyPropertyCount = pQueueFamilyPropertyCount)
        {
            ((IVk)this).GetPhysicalDeviceQueueFamilyProperties2(
                physicalDevice,
                __dsl_pQueueFamilyPropertyCount,
                __dsl_pQueueFamilyProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
        Ref<QueueFamilyProperties2> pQueueFamilyProperties
    ) =>
        ThisThread.GetPhysicalDeviceQueueFamilyProperties2(
            physicalDevice,
            pQueueFamilyPropertyCount,
            pQueueFamilyProperties
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceQueueFamilyProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
        QueueFamilyProperties2* pQueueFamilyProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, uint*, QueueFamilyProperties2*, void>)(
                _slots[571] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[571] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceQueueFamilyProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
        QueueFamilyProperties2* pQueueFamilyProperties
    ) =>
        ThisThread.GetPhysicalDeviceQueueFamilyProperties2KHR(
            physicalDevice,
            pQueueFamilyPropertyCount,
            pQueueFamilyProperties
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceQueueFamilyProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
        Ref<QueueFamilyProperties2> pQueueFamilyProperties
    )
    {
        fixed (QueueFamilyProperties2* __dsl_pQueueFamilyProperties = pQueueFamilyProperties)
        fixed (uint* __dsl_pQueueFamilyPropertyCount = pQueueFamilyPropertyCount)
        {
            ((IVk)this).GetPhysicalDeviceQueueFamilyProperties2KHR(
                physicalDevice,
                __dsl_pQueueFamilyPropertyCount,
                __dsl_pQueueFamilyProperties
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
        Ref<QueueFamilyProperties2> pQueueFamilyProperties
    ) =>
        ThisThread.GetPhysicalDeviceQueueFamilyProperties2KHR(
            physicalDevice,
            pQueueFamilyPropertyCount,
            pQueueFamilyProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceSparseImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        ImageType type,
        SampleCountFlags samples,
        [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
        ImageTiling tiling,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        SparseImageFormatProperties* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                Format,
                ImageType,
                SampleCountFlags,
                ImageUsageFlags,
                ImageTiling,
                uint*,
                SparseImageFormatProperties*,
                void>)(
                _slots[572] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[572] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSparseImageFormatProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceSparseImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        ImageType type,
        SampleCountFlags samples,
        [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
        ImageTiling tiling,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        SparseImageFormatProperties* pProperties
    ) =>
        ThisThread.GetPhysicalDeviceSparseImageFormatProperties(
            physicalDevice,
            format,
            type,
            samples,
            usage,
            tiling,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceSparseImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        ImageType type,
        SampleCountFlags samples,
        [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
        ImageTiling tiling,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<SparseImageFormatProperties> pProperties
    )
    {
        fixed (SparseImageFormatProperties* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        {
            ((IVk)this).GetPhysicalDeviceSparseImageFormatProperties(
                physicalDevice,
                format,
                type,
                samples,
                usage,
                tiling,
                __dsl_pPropertyCount,
                __dsl_pProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceSparseImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        Format format,
        ImageType type,
        SampleCountFlags samples,
        [NativeTypeName("VkImageUsageFlags")] ImageUsageFlags usage,
        ImageTiling tiling,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<SparseImageFormatProperties> pProperties
    ) =>
        ThisThread.GetPhysicalDeviceSparseImageFormatProperties(
            physicalDevice,
            format,
            type,
            samples,
            usage,
            tiling,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceSparseImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            PhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        SparseImageFormatProperties2* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceSparseImageFormatInfo2*,
                uint*,
                SparseImageFormatProperties2*,
                void>)(
                _slots[573] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[573] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSparseImageFormatProperties2",
                        "vulkan"
                    )
            )
        )(physicalDevice, pFormatInfo, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceSparseImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            PhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        SparseImageFormatProperties2* pProperties
    ) =>
        ThisThread.GetPhysicalDeviceSparseImageFormatProperties2(
            physicalDevice,
            pFormatInfo,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceSparseImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            Ref<PhysicalDeviceSparseImageFormatInfo2> pFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<SparseImageFormatProperties2> pProperties
    )
    {
        fixed (SparseImageFormatProperties2* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (PhysicalDeviceSparseImageFormatInfo2* __dsl_pFormatInfo = pFormatInfo)
        {
            ((IVk)this).GetPhysicalDeviceSparseImageFormatProperties2(
                physicalDevice,
                __dsl_pFormatInfo,
                __dsl_pPropertyCount,
                __dsl_pProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceSparseImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            Ref<PhysicalDeviceSparseImageFormatInfo2> pFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<SparseImageFormatProperties2> pProperties
    ) =>
        ThisThread.GetPhysicalDeviceSparseImageFormatProperties2(
            physicalDevice,
            pFormatInfo,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceSparseImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            PhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        SparseImageFormatProperties2* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceSparseImageFormatInfo2*,
                uint*,
                SparseImageFormatProperties2*,
                void>)(
                _slots[574] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[574] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSparseImageFormatProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pFormatInfo, pPropertyCount, pProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            PhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        SparseImageFormatProperties2* pProperties
    ) =>
        ThisThread.GetPhysicalDeviceSparseImageFormatProperties2KHR(
            physicalDevice,
            pFormatInfo,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPhysicalDeviceSparseImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            Ref<PhysicalDeviceSparseImageFormatInfo2> pFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<SparseImageFormatProperties2> pProperties
    )
    {
        fixed (SparseImageFormatProperties2* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (PhysicalDeviceSparseImageFormatInfo2* __dsl_pFormatInfo = pFormatInfo)
        {
            ((IVk)this).GetPhysicalDeviceSparseImageFormatProperties2KHR(
                physicalDevice,
                __dsl_pFormatInfo,
                __dsl_pPropertyCount,
                __dsl_pProperties
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            Ref<PhysicalDeviceSparseImageFormatInfo2> pFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<SparseImageFormatProperties2> pProperties
    ) =>
        ThisThread.GetPhysicalDeviceSparseImageFormatProperties2KHR(
            physicalDevice,
            pFormatInfo,
            pPropertyCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_coverage_reduction_mode"],
        ImpliesSets = [
            "VK_NV_framebuffer_mixed_samples+VK_KHR_get_physical_device_properties2",
            "VK_NV_framebuffer_mixed_samples+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pCombinationCount,
        FramebufferMixedSamplesCombinationNV* pCombinations
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                uint*,
                FramebufferMixedSamplesCombinationNV*,
                Result>)(
                _slots[575] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[575] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV",
                        "vulkan"
                    )
            )
        )(physicalDevice, pCombinationCount, pCombinations);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_coverage_reduction_mode"],
        ImpliesSets = [
            "VK_NV_framebuffer_mixed_samples+VK_KHR_get_physical_device_properties2",
            "VK_NV_framebuffer_mixed_samples+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pCombinationCount,
        FramebufferMixedSamplesCombinationNV* pCombinations
    ) =>
        ThisThread.GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
            physicalDevice,
            pCombinationCount,
            pCombinations
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_coverage_reduction_mode"],
        ImpliesSets = [
            "VK_NV_framebuffer_mixed_samples+VK_KHR_get_physical_device_properties2",
            "VK_NV_framebuffer_mixed_samples+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pCombinationCount,
        Ref<FramebufferMixedSamplesCombinationNV> pCombinations
    )
    {
        fixed (FramebufferMixedSamplesCombinationNV* __dsl_pCombinations = pCombinations)
        fixed (uint* __dsl_pCombinationCount = pCombinationCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
                    physicalDevice,
                    __dsl_pCombinationCount,
                    __dsl_pCombinations
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_coverage_reduction_mode"],
        ImpliesSets = [
            "VK_NV_framebuffer_mixed_samples+VK_KHR_get_physical_device_properties2",
            "VK_NV_framebuffer_mixed_samples+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pCombinationCount,
        Ref<FramebufferMixedSamplesCombinationNV> pCombinations
    ) =>
        ThisThread.GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
            physicalDevice,
            pCombinationCount,
            pCombinations
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_surface_counter"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSurfaceCapabilities2EXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        SurfaceCapabilities2EXT* pSurfaceCapabilities
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                SurfaceKHRHandle,
                SurfaceCapabilities2EXT*,
                Result>)(
                _slots[576] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[576] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSurfaceCapabilities2EXT",
                        "vulkan"
                    )
            )
        )(physicalDevice, surface, pSurfaceCapabilities);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_surface_counter"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceCapabilities2EXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        SurfaceCapabilities2EXT* pSurfaceCapabilities
    ) =>
        ThisThread.GetPhysicalDeviceSurfaceCapabilities2EXT(
            physicalDevice,
            surface,
            pSurfaceCapabilities
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_surface_counter"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSurfaceCapabilities2EXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        Ref<SurfaceCapabilities2EXT> pSurfaceCapabilities
    )
    {
        fixed (SurfaceCapabilities2EXT* __dsl_pSurfaceCapabilities = pSurfaceCapabilities)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceSurfaceCapabilities2EXT(
                    physicalDevice,
                    surface,
                    __dsl_pSurfaceCapabilities
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_surface_counter"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceCapabilities2EXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        Ref<SurfaceCapabilities2EXT> pSurfaceCapabilities
    ) =>
        ThisThread.GetPhysicalDeviceSurfaceCapabilities2EXT(
            physicalDevice,
            surface,
            pSurfaceCapabilities
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSurfaceCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
        SurfaceCapabilities2KHR* pSurfaceCapabilities
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceSurfaceInfo2KHR*,
                SurfaceCapabilities2KHR*,
                Result>)(
                _slots[577] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[577] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSurfaceCapabilities2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
        SurfaceCapabilities2KHR* pSurfaceCapabilities
    ) =>
        ThisThread.GetPhysicalDeviceSurfaceCapabilities2KHR(
            physicalDevice,
            pSurfaceInfo,
            pSurfaceCapabilities
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSurfaceCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            Ref<PhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo,
        Ref<SurfaceCapabilities2KHR> pSurfaceCapabilities
    )
    {
        fixed (SurfaceCapabilities2KHR* __dsl_pSurfaceCapabilities = pSurfaceCapabilities)
        fixed (PhysicalDeviceSurfaceInfo2KHR* __dsl_pSurfaceInfo = pSurfaceInfo)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceSurfaceCapabilities2KHR(
                    physicalDevice,
                    __dsl_pSurfaceInfo,
                    __dsl_pSurfaceCapabilities
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            Ref<PhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo,
        Ref<SurfaceCapabilities2KHR> pSurfaceCapabilities
    ) =>
        ThisThread.GetPhysicalDeviceSurfaceCapabilities2KHR(
            physicalDevice,
            pSurfaceInfo,
            pSurfaceCapabilities
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSurfaceCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        SurfaceCapabilitiesKHR* pSurfaceCapabilities
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                SurfaceKHRHandle,
                SurfaceCapabilitiesKHR*,
                Result>)(
                _slots[578] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[578] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSurfaceCapabilitiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, surface, pSurfaceCapabilities);

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        SurfaceCapabilitiesKHR* pSurfaceCapabilities
    ) =>
        ThisThread.GetPhysicalDeviceSurfaceCapabilitiesKHR(
            physicalDevice,
            surface,
            pSurfaceCapabilities
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSurfaceCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        Ref<SurfaceCapabilitiesKHR> pSurfaceCapabilities
    )
    {
        fixed (SurfaceCapabilitiesKHR* __dsl_pSurfaceCapabilities = pSurfaceCapabilities)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceSurfaceCapabilitiesKHR(
                    physicalDevice,
                    surface,
                    __dsl_pSurfaceCapabilities
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        Ref<SurfaceCapabilitiesKHR> pSurfaceCapabilities
    ) =>
        ThisThread.GetPhysicalDeviceSurfaceCapabilitiesKHR(
            physicalDevice,
            surface,
            pSurfaceCapabilities
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormats2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSurfaceFormats2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
        [NativeTypeName("uint32_t *")] uint* pSurfaceFormatCount,
        SurfaceFormat2KHR* pSurfaceFormats
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceSurfaceInfo2KHR*,
                uint*,
                SurfaceFormat2KHR*,
                Result>)(
                _slots[579] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[579] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSurfaceFormats2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormats2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceFormats2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
        [NativeTypeName("uint32_t *")] uint* pSurfaceFormatCount,
        SurfaceFormat2KHR* pSurfaceFormats
    ) =>
        ThisThread.GetPhysicalDeviceSurfaceFormats2KHR(
            physicalDevice,
            pSurfaceInfo,
            pSurfaceFormatCount,
            pSurfaceFormats
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormats2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSurfaceFormats2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            Ref<PhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSurfaceFormatCount,
        Ref<SurfaceFormat2KHR> pSurfaceFormats
    )
    {
        fixed (SurfaceFormat2KHR* __dsl_pSurfaceFormats = pSurfaceFormats)
        fixed (uint* __dsl_pSurfaceFormatCount = pSurfaceFormatCount)
        fixed (PhysicalDeviceSurfaceInfo2KHR* __dsl_pSurfaceInfo = pSurfaceInfo)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceSurfaceFormats2KHR(
                    physicalDevice,
                    __dsl_pSurfaceInfo,
                    __dsl_pSurfaceFormatCount,
                    __dsl_pSurfaceFormats
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormats2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceFormats2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            Ref<PhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSurfaceFormatCount,
        Ref<SurfaceFormat2KHR> pSurfaceFormats
    ) =>
        ThisThread.GetPhysicalDeviceSurfaceFormats2KHR(
            physicalDevice,
            pSurfaceInfo,
            pSurfaceFormatCount,
            pSurfaceFormats
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormatsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSurfaceFormatsKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("uint32_t *")] uint* pSurfaceFormatCount,
        SurfaceFormatKHR* pSurfaceFormats
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                SurfaceKHRHandle,
                uint*,
                SurfaceFormatKHR*,
                Result>)(
                _slots[580] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[580] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSurfaceFormatsKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormatsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceFormatsKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("uint32_t *")] uint* pSurfaceFormatCount,
        SurfaceFormatKHR* pSurfaceFormats
    ) =>
        ThisThread.GetPhysicalDeviceSurfaceFormatsKHR(
            physicalDevice,
            surface,
            pSurfaceFormatCount,
            pSurfaceFormats
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormatsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSurfaceFormatsKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("uint32_t *")] Ref<uint> pSurfaceFormatCount,
        Ref<SurfaceFormatKHR> pSurfaceFormats
    )
    {
        fixed (SurfaceFormatKHR* __dsl_pSurfaceFormats = pSurfaceFormats)
        fixed (uint* __dsl_pSurfaceFormatCount = pSurfaceFormatCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceSurfaceFormatsKHR(
                    physicalDevice,
                    surface,
                    __dsl_pSurfaceFormatCount,
                    __dsl_pSurfaceFormats
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormatsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceFormatsKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("uint32_t *")] Ref<uint> pSurfaceFormatCount,
        Ref<SurfaceFormatKHR> pSurfaceFormats
    ) =>
        ThisThread.GetPhysicalDeviceSurfaceFormatsKHR(
            physicalDevice,
            surface,
            pSurfaceFormatCount,
            pSurfaceFormats
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfacePresentModesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSurfacePresentModesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("uint32_t *")] uint* pPresentModeCount,
        PresentModeKHR* pPresentModes
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                SurfaceKHRHandle,
                uint*,
                PresentModeKHR*,
                Result>)(
                _slots[581] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[581] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSurfacePresentModesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, surface, pPresentModeCount, pPresentModes);

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfacePresentModesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfacePresentModesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("uint32_t *")] uint* pPresentModeCount,
        PresentModeKHR* pPresentModes
    ) =>
        ThisThread.GetPhysicalDeviceSurfacePresentModesKHR(
            physicalDevice,
            surface,
            pPresentModeCount,
            pPresentModes
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfacePresentModesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSurfacePresentModesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("uint32_t *")] Ref<uint> pPresentModeCount,
        Ref<PresentModeKHR> pPresentModes
    )
    {
        fixed (PresentModeKHR* __dsl_pPresentModes = pPresentModes)
        fixed (uint* __dsl_pPresentModeCount = pPresentModeCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceSurfacePresentModesKHR(
                    physicalDevice,
                    surface,
                    __dsl_pPresentModeCount,
                    __dsl_pPresentModes
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfacePresentModesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfacePresentModesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("uint32_t *")] Ref<uint> pPresentModeCount,
        Ref<PresentModeKHR> pPresentModes
    ) =>
        ThisThread.GetPhysicalDeviceSurfacePresentModesKHR(
            physicalDevice,
            surface,
            pPresentModeCount,
            pPresentModes
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceSupportKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSurfaceSupportKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("VkBool32 *")] MaybeBool<uint>* pSupported
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                uint,
                SurfaceKHRHandle,
                MaybeBool<uint>*,
                Result>)(
                _slots[582] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[582] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSurfaceSupportKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, queueFamilyIndex, surface, pSupported);

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceSupportKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceSupportKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("VkBool32 *")] MaybeBool<uint>* pSupported
    ) =>
        ThisThread.GetPhysicalDeviceSurfaceSupportKHR(
            physicalDevice,
            queueFamilyIndex,
            surface,
            pSupported
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceSupportKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceSurfaceSupportKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("VkBool32 *")] Ref<MaybeBool<uint>> pSupported
    )
    {
        fixed (MaybeBool<uint>* __dsl_pSupported = pSupported)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceSurfaceSupportKHR(
                    physicalDevice,
                    queueFamilyIndex,
                    surface,
                    __dsl_pSupported
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceSupportKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceSupportKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle surface,
        [NativeTypeName("VkBool32 *")] Ref<MaybeBool<uint>> pSupported
    ) =>
        ThisThread.GetPhysicalDeviceSurfaceSupportKHR(
            physicalDevice,
            queueFamilyIndex,
            surface,
            pSupported
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceToolProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pToolCount,
        PhysicalDeviceToolProperties* pToolProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                uint*,
                PhysicalDeviceToolProperties*,
                Result>)(
                _slots[583] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[583] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceToolProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pToolCount, pToolProperties);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceToolProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pToolCount,
        PhysicalDeviceToolProperties* pToolProperties
    ) => ThisThread.GetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceToolProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pToolCount,
        Ref<PhysicalDeviceToolProperties> pToolProperties
    )
    {
        fixed (PhysicalDeviceToolProperties* __dsl_pToolProperties = pToolProperties)
        fixed (uint* __dsl_pToolCount = pToolCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceToolProperties(
                    physicalDevice,
                    __dsl_pToolCount,
                    __dsl_pToolProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceToolProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pToolCount,
        Ref<PhysicalDeviceToolProperties> pToolProperties
    ) => ThisThread.GetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties);

    [SupportedApiProfile("vulkan", ["VK_EXT_tooling_info"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceToolPropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pToolCount,
        PhysicalDeviceToolProperties* pToolProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                uint*,
                PhysicalDeviceToolProperties*,
                Result>)(
                _slots[584] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[584] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceToolPropertiesEXT",
                        "vulkan"
                    )
            )
        )(physicalDevice, pToolCount, pToolProperties);

    [SupportedApiProfile("vulkan", ["VK_EXT_tooling_info"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceToolPropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pToolCount,
        PhysicalDeviceToolProperties* pToolProperties
    ) => ThisThread.GetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);

    [SupportedApiProfile("vulkan", ["VK_EXT_tooling_info"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceToolPropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pToolCount,
        Ref<PhysicalDeviceToolProperties> pToolProperties
    )
    {
        fixed (PhysicalDeviceToolProperties* __dsl_pToolProperties = pToolProperties)
        fixed (uint* __dsl_pToolCount = pToolCount)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceToolPropertiesEXT(
                    physicalDevice,
                    __dsl_pToolCount,
                    __dsl_pToolProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_tooling_info"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceToolPropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pToolCount,
        Ref<PhysicalDeviceToolProperties> pToolProperties
    ) => ThisThread.GetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceVideoCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkVideoProfileInfoKHR *")] VideoProfileInfoKHR* pVideoProfile,
        VideoCapabilitiesKHR* pCapabilities
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                VideoProfileInfoKHR*,
                VideoCapabilitiesKHR*,
                Result>)(
                _slots[585] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[585] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceVideoCapabilitiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pVideoProfile, pCapabilities);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceVideoCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkVideoProfileInfoKHR *")] VideoProfileInfoKHR* pVideoProfile,
        VideoCapabilitiesKHR* pCapabilities
    ) =>
        ThisThread.GetPhysicalDeviceVideoCapabilitiesKHR(
            physicalDevice,
            pVideoProfile,
            pCapabilities
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceVideoCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkVideoProfileInfoKHR *")] Ref<VideoProfileInfoKHR> pVideoProfile,
        Ref<VideoCapabilitiesKHR> pCapabilities
    )
    {
        fixed (VideoCapabilitiesKHR* __dsl_pCapabilities = pCapabilities)
        fixed (VideoProfileInfoKHR* __dsl_pVideoProfile = pVideoProfile)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceVideoCapabilitiesKHR(
                    physicalDevice,
                    __dsl_pVideoProfile,
                    __dsl_pCapabilities
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceVideoCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkVideoProfileInfoKHR *")] Ref<VideoProfileInfoKHR> pVideoProfile,
        Ref<VideoCapabilitiesKHR> pCapabilities
    ) =>
        ThisThread.GetPhysicalDeviceVideoCapabilitiesKHR(
            physicalDevice,
            pVideoProfile,
            pCapabilities
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *")]
            PhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo,
        VideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceVideoEncodeQualityLevelInfoKHR*,
                VideoEncodeQualityLevelPropertiesKHR*,
                Result>)(
                _slots[586] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[586] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pQualityLevelInfo, pQualityLevelProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *")]
            PhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo,
        VideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties
    ) =>
        ThisThread.GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
            physicalDevice,
            pQualityLevelInfo,
            pQualityLevelProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *")]
            Ref<PhysicalDeviceVideoEncodeQualityLevelInfoKHR> pQualityLevelInfo,
        Ref<VideoEncodeQualityLevelPropertiesKHR> pQualityLevelProperties
    )
    {
        fixed (
            VideoEncodeQualityLevelPropertiesKHR* __dsl_pQualityLevelProperties =
                pQualityLevelProperties
        )
        fixed (
            PhysicalDeviceVideoEncodeQualityLevelInfoKHR* __dsl_pQualityLevelInfo =
                pQualityLevelInfo
        )
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
                    physicalDevice,
                    __dsl_pQualityLevelInfo,
                    __dsl_pQualityLevelProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *")]
            Ref<PhysicalDeviceVideoEncodeQualityLevelInfoKHR> pQualityLevelInfo,
        Ref<VideoEncodeQualityLevelPropertiesKHR> pQualityLevelProperties
    ) =>
        ThisThread.GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
            physicalDevice,
            pQualityLevelInfo,
            pQualityLevelProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoFormatPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceVideoFormatPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoFormatInfoKHR *")]
            PhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pVideoFormatPropertyCount,
        VideoFormatPropertiesKHR* pVideoFormatProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle,
                PhysicalDeviceVideoFormatInfoKHR*,
                uint*,
                VideoFormatPropertiesKHR*,
                Result>)(
                _slots[587] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[587] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceVideoFormatPropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoFormatPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceVideoFormatPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoFormatInfoKHR *")]
            PhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pVideoFormatPropertyCount,
        VideoFormatPropertiesKHR* pVideoFormatProperties
    ) =>
        ThisThread.GetPhysicalDeviceVideoFormatPropertiesKHR(
            physicalDevice,
            pVideoFormatInfo,
            pVideoFormatPropertyCount,
            pVideoFormatProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoFormatPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPhysicalDeviceVideoFormatPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoFormatInfoKHR *")]
            Ref<PhysicalDeviceVideoFormatInfoKHR> pVideoFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pVideoFormatPropertyCount,
        Ref<VideoFormatPropertiesKHR> pVideoFormatProperties
    )
    {
        fixed (VideoFormatPropertiesKHR* __dsl_pVideoFormatProperties = pVideoFormatProperties)
        fixed (uint* __dsl_pVideoFormatPropertyCount = pVideoFormatPropertyCount)
        fixed (PhysicalDeviceVideoFormatInfoKHR* __dsl_pVideoFormatInfo = pVideoFormatInfo)
        {
            return (Result)
                ((IVk)this).GetPhysicalDeviceVideoFormatPropertiesKHR(
                    physicalDevice,
                    __dsl_pVideoFormatInfo,
                    __dsl_pVideoFormatPropertyCount,
                    __dsl_pVideoFormatProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoFormatPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceVideoFormatPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoFormatInfoKHR *")]
            Ref<PhysicalDeviceVideoFormatInfoKHR> pVideoFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pVideoFormatPropertyCount,
        Ref<VideoFormatPropertiesKHR> pVideoFormatProperties
    ) =>
        ThisThread.GetPhysicalDeviceVideoFormatPropertiesKHR(
            physicalDevice,
            pVideoFormatInfo,
            pVideoFormatPropertyCount,
            pVideoFormatProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineBinaryDataKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPipelineBinaryDataKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineBinaryDataInfoKHR *")] PipelineBinaryDataInfoKHR* pInfo,
        PipelineBinaryKeyKHR* pPipelineBinaryKey,
        [NativeTypeName("size_t *")] nuint* pPipelineBinaryDataSize,
        void* pPipelineBinaryData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PipelineBinaryDataInfoKHR*,
                PipelineBinaryKeyKHR*,
                nuint*,
                void*,
                Result>)(
                _slots[588] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[588] = nativeContext.LoadFunction(
                        "vkGetPipelineBinaryDataKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pPipelineBinaryKey, pPipelineBinaryDataSize, pPipelineBinaryData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineBinaryDataKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineBinaryDataKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineBinaryDataInfoKHR *")] PipelineBinaryDataInfoKHR* pInfo,
        PipelineBinaryKeyKHR* pPipelineBinaryKey,
        [NativeTypeName("size_t *")] nuint* pPipelineBinaryDataSize,
        void* pPipelineBinaryData
    ) =>
        ThisThread.GetPipelineBinaryDataKHR(
            device,
            pInfo,
            pPipelineBinaryKey,
            pPipelineBinaryDataSize,
            pPipelineBinaryData
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineBinaryDataKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPipelineBinaryDataKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineBinaryDataInfoKHR *")]
            Ref<PipelineBinaryDataInfoKHR> pInfo,
        Ref<PipelineBinaryKeyKHR> pPipelineBinaryKey,
        [NativeTypeName("size_t *")] Ref<nuint> pPipelineBinaryDataSize,
        Ref pPipelineBinaryData
    )
    {
        fixed (void* __dsl_pPipelineBinaryData = pPipelineBinaryData)
        fixed (nuint* __dsl_pPipelineBinaryDataSize = pPipelineBinaryDataSize)
        fixed (PipelineBinaryKeyKHR* __dsl_pPipelineBinaryKey = pPipelineBinaryKey)
        fixed (PipelineBinaryDataInfoKHR* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).GetPipelineBinaryDataKHR(
                    device,
                    __dsl_pInfo,
                    __dsl_pPipelineBinaryKey,
                    __dsl_pPipelineBinaryDataSize,
                    __dsl_pPipelineBinaryData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineBinaryDataKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineBinaryDataKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineBinaryDataInfoKHR *")]
            Ref<PipelineBinaryDataInfoKHR> pInfo,
        Ref<PipelineBinaryKeyKHR> pPipelineBinaryKey,
        [NativeTypeName("size_t *")] Ref<nuint> pPipelineBinaryDataSize,
        Ref pPipelineBinaryData
    ) =>
        ThisThread.GetPipelineBinaryDataKHR(
            device,
            pInfo,
            pPipelineBinaryKey,
            pPipelineBinaryDataSize,
            pPipelineBinaryData
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineCacheData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPipelineCacheData(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, PipelineCacheHandle, nuint*, void*, Result>)(
                _slots[589] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[589] = nativeContext.LoadFunction("vkGetPipelineCacheData", "vulkan")
            )
        )(device, pipelineCache, pDataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineCacheData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineCacheData(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) => ThisThread.GetPipelineCacheData(device, pipelineCache, pDataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineCacheData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPipelineCacheData(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (nuint* __dsl_pDataSize = pDataSize)
        {
            return (Result)
                ((IVk)this).GetPipelineCacheData(
                    device,
                    pipelineCache,
                    __dsl_pDataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineCacheData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineCacheData(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle pipelineCache,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    ) => ThisThread.GetPipelineCacheData(device, pipelineCache, pDataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableInternalRepresentationsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPipelineExecutableInternalRepresentationsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            PipelineExecutableInfoKHR* pExecutableInfo,
        [NativeTypeName("uint32_t *")] uint* pInternalRepresentationCount,
        PipelineExecutableInternalRepresentationKHR* pInternalRepresentations
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PipelineExecutableInfoKHR*,
                uint*,
                PipelineExecutableInternalRepresentationKHR*,
                Result>)(
                _slots[590] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[590] = nativeContext.LoadFunction(
                        "vkGetPipelineExecutableInternalRepresentationsKHR",
                        "vulkan"
                    )
            )
        )(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableInternalRepresentationsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineExecutableInternalRepresentationsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            PipelineExecutableInfoKHR* pExecutableInfo,
        [NativeTypeName("uint32_t *")] uint* pInternalRepresentationCount,
        PipelineExecutableInternalRepresentationKHR* pInternalRepresentations
    ) =>
        ThisThread.GetPipelineExecutableInternalRepresentationsKHR(
            device,
            pExecutableInfo,
            pInternalRepresentationCount,
            pInternalRepresentations
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableInternalRepresentationsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPipelineExecutableInternalRepresentationsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            Ref<PipelineExecutableInfoKHR> pExecutableInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pInternalRepresentationCount,
        Ref<PipelineExecutableInternalRepresentationKHR> pInternalRepresentations
    )
    {
        fixed (
            PipelineExecutableInternalRepresentationKHR* __dsl_pInternalRepresentations =
                pInternalRepresentations
        )
        fixed (uint* __dsl_pInternalRepresentationCount = pInternalRepresentationCount)
        fixed (PipelineExecutableInfoKHR* __dsl_pExecutableInfo = pExecutableInfo)
        {
            return (Result)
                ((IVk)this).GetPipelineExecutableInternalRepresentationsKHR(
                    device,
                    __dsl_pExecutableInfo,
                    __dsl_pInternalRepresentationCount,
                    __dsl_pInternalRepresentations
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableInternalRepresentationsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineExecutableInternalRepresentationsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            Ref<PipelineExecutableInfoKHR> pExecutableInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pInternalRepresentationCount,
        Ref<PipelineExecutableInternalRepresentationKHR> pInternalRepresentations
    ) =>
        ThisThread.GetPipelineExecutableInternalRepresentationsKHR(
            device,
            pExecutableInfo,
            pInternalRepresentationCount,
            pInternalRepresentations
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutablePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPipelineExecutablePropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineInfoKHR *")] PipelineInfoKHR* pPipelineInfo,
        [NativeTypeName("uint32_t *")] uint* pExecutableCount,
        PipelineExecutablePropertiesKHR* pProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PipelineInfoKHR*,
                uint*,
                PipelineExecutablePropertiesKHR*,
                Result>)(
                _slots[591] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[591] = nativeContext.LoadFunction(
                        "vkGetPipelineExecutablePropertiesKHR",
                        "vulkan"
                    )
            )
        )(device, pPipelineInfo, pExecutableCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutablePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineExecutablePropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineInfoKHR *")] PipelineInfoKHR* pPipelineInfo,
        [NativeTypeName("uint32_t *")] uint* pExecutableCount,
        PipelineExecutablePropertiesKHR* pProperties
    ) =>
        ThisThread.GetPipelineExecutablePropertiesKHR(
            device,
            pPipelineInfo,
            pExecutableCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutablePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPipelineExecutablePropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineInfoKHR *")] Ref<PipelineInfoKHR> pPipelineInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pExecutableCount,
        Ref<PipelineExecutablePropertiesKHR> pProperties
    )
    {
        fixed (PipelineExecutablePropertiesKHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pExecutableCount = pExecutableCount)
        fixed (PipelineInfoKHR* __dsl_pPipelineInfo = pPipelineInfo)
        {
            return (Result)
                ((IVk)this).GetPipelineExecutablePropertiesKHR(
                    device,
                    __dsl_pPipelineInfo,
                    __dsl_pExecutableCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutablePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineExecutablePropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineInfoKHR *")] Ref<PipelineInfoKHR> pPipelineInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pExecutableCount,
        Ref<PipelineExecutablePropertiesKHR> pProperties
    ) =>
        ThisThread.GetPipelineExecutablePropertiesKHR(
            device,
            pPipelineInfo,
            pExecutableCount,
            pProperties
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableStatisticsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPipelineExecutableStatisticsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            PipelineExecutableInfoKHR* pExecutableInfo,
        [NativeTypeName("uint32_t *")] uint* pStatisticCount,
        PipelineExecutableStatisticKHR* pStatistics
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PipelineExecutableInfoKHR*,
                uint*,
                PipelineExecutableStatisticKHR*,
                Result>)(
                _slots[592] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[592] = nativeContext.LoadFunction(
                        "vkGetPipelineExecutableStatisticsKHR",
                        "vulkan"
                    )
            )
        )(device, pExecutableInfo, pStatisticCount, pStatistics);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableStatisticsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineExecutableStatisticsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            PipelineExecutableInfoKHR* pExecutableInfo,
        [NativeTypeName("uint32_t *")] uint* pStatisticCount,
        PipelineExecutableStatisticKHR* pStatistics
    ) =>
        ThisThread.GetPipelineExecutableStatisticsKHR(
            device,
            pExecutableInfo,
            pStatisticCount,
            pStatistics
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableStatisticsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPipelineExecutableStatisticsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            Ref<PipelineExecutableInfoKHR> pExecutableInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pStatisticCount,
        Ref<PipelineExecutableStatisticKHR> pStatistics
    )
    {
        fixed (PipelineExecutableStatisticKHR* __dsl_pStatistics = pStatistics)
        fixed (uint* __dsl_pStatisticCount = pStatisticCount)
        fixed (PipelineExecutableInfoKHR* __dsl_pExecutableInfo = pExecutableInfo)
        {
            return (Result)
                ((IVk)this).GetPipelineExecutableStatisticsKHR(
                    device,
                    __dsl_pExecutableInfo,
                    __dsl_pStatisticCount,
                    __dsl_pStatistics
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableStatisticsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineExecutableStatisticsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            Ref<PipelineExecutableInfoKHR> pExecutableInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pStatisticCount,
        Ref<PipelineExecutableStatisticKHR> pStatistics
    ) =>
        ThisThread.GetPipelineExecutableStatisticsKHR(
            device,
            pExecutableInfo,
            pStatisticCount,
            pStatistics
        );

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectDeviceAddressNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetPipelineIndirectDeviceAddressNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineIndirectDeviceAddressInfoNV *")]
            PipelineIndirectDeviceAddressInfoNV* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, PipelineIndirectDeviceAddressInfoNV*, ulong>)(
                _slots[593] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[593] = nativeContext.LoadFunction(
                        "vkGetPipelineIndirectDeviceAddressNV",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectDeviceAddressNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetPipelineIndirectDeviceAddressNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineIndirectDeviceAddressInfoNV *")]
            PipelineIndirectDeviceAddressInfoNV* pInfo
    ) => ThisThread.GetPipelineIndirectDeviceAddressNV(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectDeviceAddressNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetPipelineIndirectDeviceAddressNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineIndirectDeviceAddressInfoNV *")]
            Ref<PipelineIndirectDeviceAddressInfoNV> pInfo
    )
    {
        fixed (PipelineIndirectDeviceAddressInfoNV* __dsl_pInfo = pInfo)
        {
            return (ulong)((IVk)this).GetPipelineIndirectDeviceAddressNV(device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectDeviceAddressNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetPipelineIndirectDeviceAddressNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineIndirectDeviceAddressInfoNV *")]
            Ref<PipelineIndirectDeviceAddressInfoNV> pInfo
    ) => ThisThread.GetPipelineIndirectDeviceAddressNV(device, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPipelineIndirectMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            ComputePipelineCreateInfo* pCreateInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ComputePipelineCreateInfo*,
                MemoryRequirements2*,
                void>)(
                _slots[594] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[594] = nativeContext.LoadFunction(
                        "vkGetPipelineIndirectMemoryRequirementsNV",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPipelineIndirectMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            ComputePipelineCreateInfo* pCreateInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        ThisThread.GetPipelineIndirectMemoryRequirementsNV(
            device,
            pCreateInfo,
            pMemoryRequirements
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPipelineIndirectMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            Ref<ComputePipelineCreateInfo> pCreateInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (ComputePipelineCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            ((IVk)this).GetPipelineIndirectMemoryRequirementsNV(
                device,
                __dsl_pCreateInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPipelineIndirectMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            Ref<ComputePipelineCreateInfo> pCreateInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) =>
        ThisThread.GetPipelineIndirectMemoryRequirementsNV(
            device,
            pCreateInfo,
            pMemoryRequirements
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineKeyKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPipelineKeyKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineCreateInfoKHR *")]
            PipelineCreateInfoKHR* pPipelineCreateInfo,
        PipelineBinaryKeyKHR* pPipelineKey
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PipelineCreateInfoKHR*,
                PipelineBinaryKeyKHR*,
                Result>)(
                _slots[595] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[595] = nativeContext.LoadFunction("vkGetPipelineKeyKHR", "vulkan")
            )
        )(device, pPipelineCreateInfo, pPipelineKey);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineKeyKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineKeyKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineCreateInfoKHR *")]
            PipelineCreateInfoKHR* pPipelineCreateInfo,
        PipelineBinaryKeyKHR* pPipelineKey
    ) => ThisThread.GetPipelineKeyKHR(device, pPipelineCreateInfo, pPipelineKey);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineKeyKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPipelineKeyKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineCreateInfoKHR *")]
            Ref<PipelineCreateInfoKHR> pPipelineCreateInfo,
        Ref<PipelineBinaryKeyKHR> pPipelineKey
    )
    {
        fixed (PipelineBinaryKeyKHR* __dsl_pPipelineKey = pPipelineKey)
        fixed (PipelineCreateInfoKHR* __dsl_pPipelineCreateInfo = pPipelineCreateInfo)
        {
            return (Result)
                ((IVk)this).GetPipelineKeyKHR(
                    device,
                    __dsl_pPipelineCreateInfo,
                    __dsl_pPipelineKey
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineKeyKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineKeyKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineCreateInfoKHR *")]
            Ref<PipelineCreateInfoKHR> pPipelineCreateInfo,
        Ref<PipelineBinaryKeyKHR> pPipelineKey
    ) => ThisThread.GetPipelineKeyKHR(device, pPipelineCreateInfo, pPipelineKey);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_properties"],
        ImpliesSets = [
            "VK_EXT_pipeline_properties+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelinePropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPipelinePropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineInfoEXT *")] PipelineInfoKHR* pPipelineInfo,
        BaseOutStructure* pPipelineProperties
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, PipelineInfoKHR*, BaseOutStructure*, Result>)(
                _slots[596] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[596] = nativeContext.LoadFunction(
                        "vkGetPipelinePropertiesEXT",
                        "vulkan"
                    )
            )
        )(device, pPipelineInfo, pPipelineProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_properties"],
        ImpliesSets = [
            "VK_EXT_pipeline_properties+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelinePropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelinePropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineInfoEXT *")] PipelineInfoKHR* pPipelineInfo,
        BaseOutStructure* pPipelineProperties
    ) => ThisThread.GetPipelinePropertiesEXT(device, pPipelineInfo, pPipelineProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_properties"],
        ImpliesSets = [
            "VK_EXT_pipeline_properties+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelinePropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetPipelinePropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineInfoEXT *")] Ref<PipelineInfoKHR> pPipelineInfo,
        Ref<BaseOutStructure> pPipelineProperties
    )
    {
        fixed (BaseOutStructure* __dsl_pPipelineProperties = pPipelineProperties)
        fixed (PipelineInfoKHR* __dsl_pPipelineInfo = pPipelineInfo)
        {
            return (Result)
                ((IVk)this).GetPipelinePropertiesEXT(
                    device,
                    __dsl_pPipelineInfo,
                    __dsl_pPipelineProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_properties"],
        ImpliesSets = [
            "VK_EXT_pipeline_properties+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelinePropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelinePropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkPipelineInfoEXT *")] Ref<PipelineInfoKHR> pPipelineInfo,
        Ref<BaseOutStructure> pPipelineProperties
    ) => ThisThread.GetPipelinePropertiesEXT(device, pPipelineInfo, pPipelineProperties);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetPrivateData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPrivateData(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("uint64_t *")] ulong* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ObjectType,
                ulong,
                PrivateDataSlotHandle,
                ulong*,
                void>)(
                _slots[597] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[597] = nativeContext.LoadFunction("vkGetPrivateData", "vulkan")
            )
        )(device, objectType, objectHandle, privateDataSlot, pData);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetPrivateData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPrivateData(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("uint64_t *")] ulong* pData
    ) => ThisThread.GetPrivateData(device, objectType, objectHandle, privateDataSlot, pData);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPrivateData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPrivateData(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("uint64_t *")] Ref<ulong> pData
    )
    {
        fixed (ulong* __dsl_pData = pData)
        {
            ((IVk)this).GetPrivateData(
                device,
                objectType,
                objectHandle,
                privateDataSlot,
                __dsl_pData
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPrivateData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPrivateData(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("uint64_t *")] Ref<ulong> pData
    ) => ThisThread.GetPrivateData(device, objectType, objectHandle, privateDataSlot, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPrivateDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPrivateDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("uint64_t *")] ulong* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ObjectType,
                ulong,
                PrivateDataSlotHandle,
                ulong*,
                void>)(
                _slots[598] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[598] = nativeContext.LoadFunction("vkGetPrivateDataEXT", "vulkan")
            )
        )(device, objectType, objectHandle, privateDataSlot, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPrivateDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPrivateDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("uint64_t *")] ulong* pData
    ) => ThisThread.GetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPrivateDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetPrivateDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("uint64_t *")] Ref<ulong> pData
    )
    {
        fixed (ulong* __dsl_pData = pData)
        {
            ((IVk)this).GetPrivateDataEXT(
                device,
                objectType,
                objectHandle,
                privateDataSlot,
                __dsl_pData
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPrivateDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPrivateDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("uint64_t *")] Ref<ulong> pData
    ) => ThisThread.GetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueryPoolResults")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetQueryPoolResults(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData,
        [NativeTypeName("VkDeviceSize")] ulong stride,
        [NativeTypeName("VkQueryResultFlags")] QueryResultFlags flags
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                QueryPoolHandle,
                uint,
                uint,
                nuint,
                void*,
                ulong,
                QueryResultFlags,
                Result>)(
                _slots[599] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[599] = nativeContext.LoadFunction("vkGetQueryPoolResults", "vulkan")
            )
        )(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueryPoolResults")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetQueryPoolResults(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData,
        [NativeTypeName("VkDeviceSize")] ulong stride,
        [NativeTypeName("VkQueryResultFlags")] QueryResultFlags flags
    ) =>
        ThisThread.GetQueryPoolResults(
            device,
            queryPool,
            firstQuery,
            queryCount,
            dataSize,
            pData,
            stride,
            flags
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueryPoolResults")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetQueryPoolResults(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData,
        [NativeTypeName("VkDeviceSize")] ulong stride,
        [NativeTypeName("VkQueryResultFlags")] QueryResultFlags flags
    )
    {
        fixed (void* __dsl_pData = pData)
        {
            return (Result)
                ((IVk)this).GetQueryPoolResults(
                    device,
                    queryPool,
                    firstQuery,
                    queryCount,
                    dataSize,
                    __dsl_pData,
                    stride,
                    flags
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueryPoolResults")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetQueryPoolResults(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData,
        [NativeTypeName("VkDeviceSize")] ulong stride,
        [NativeTypeName("VkQueryResultFlags")] QueryResultFlags flags
    ) =>
        ThisThread.GetQueryPoolResults(
            device,
            queryPool,
            firstQuery,
            queryCount,
            dataSize,
            pData,
            stride,
            flags
        );

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_synchronization2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointData2NV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetQueueCheckpointData2NV(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t *")] uint* pCheckpointDataCount,
        CheckpointData2NV* pCheckpointData
    ) =>
        (
            (delegate* unmanaged<QueueHandle, uint*, CheckpointData2NV*, void>)(
                _slots[600] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[600] = nativeContext.LoadFunction(
                        "vkGetQueueCheckpointData2NV",
                        "vulkan"
                    )
            )
        )(queue, pCheckpointDataCount, pCheckpointData);

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_synchronization2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointData2NV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetQueueCheckpointData2NV(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t *")] uint* pCheckpointDataCount,
        CheckpointData2NV* pCheckpointData
    ) => ThisThread.GetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData);

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_synchronization2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointData2NV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetQueueCheckpointData2NV(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t *")] Ref<uint> pCheckpointDataCount,
        Ref<CheckpointData2NV> pCheckpointData
    )
    {
        fixed (CheckpointData2NV* __dsl_pCheckpointData = pCheckpointData)
        fixed (uint* __dsl_pCheckpointDataCount = pCheckpointDataCount)
        {
            ((IVk)this).GetQueueCheckpointData2NV(
                queue,
                __dsl_pCheckpointDataCount,
                __dsl_pCheckpointData
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_synchronization2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointData2NV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetQueueCheckpointData2NV(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t *")] Ref<uint> pCheckpointDataCount,
        Ref<CheckpointData2NV> pCheckpointData
    ) => ThisThread.GetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointDataNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetQueueCheckpointDataNV(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t *")] uint* pCheckpointDataCount,
        CheckpointDataNV* pCheckpointData
    ) =>
        (
            (delegate* unmanaged<QueueHandle, uint*, CheckpointDataNV*, void>)(
                _slots[601] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[601] = nativeContext.LoadFunction(
                        "vkGetQueueCheckpointDataNV",
                        "vulkan"
                    )
            )
        )(queue, pCheckpointDataCount, pCheckpointData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointDataNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetQueueCheckpointDataNV(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t *")] uint* pCheckpointDataCount,
        CheckpointDataNV* pCheckpointData
    ) => ThisThread.GetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointDataNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetQueueCheckpointDataNV(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t *")] Ref<uint> pCheckpointDataCount,
        Ref<CheckpointDataNV> pCheckpointData
    )
    {
        fixed (CheckpointDataNV* __dsl_pCheckpointData = pCheckpointData)
        fixed (uint* __dsl_pCheckpointDataCount = pCheckpointDataCount)
        {
            ((IVk)this).GetQueueCheckpointDataNV(
                queue,
                __dsl_pCheckpointDataCount,
                __dsl_pCheckpointData
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointDataNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetQueueCheckpointDataNV(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t *")] Ref<uint> pCheckpointDataCount,
        Ref<CheckpointDataNV> pCheckpointData
    ) => ThisThread.GetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetRayTracingCaptureReplayShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, PipelineHandle, uint, uint, nuint, void*, Result>)(
                _slots[602] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[602] = nativeContext.LoadFunction(
                        "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR",
                        "vulkan"
                    )
            )
        )(device, pipeline, firstGroup, groupCount, dataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRayTracingCaptureReplayShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        ThisThread.GetRayTracingCaptureReplayShaderGroupHandlesKHR(
            device,
            pipeline,
            firstGroup,
            groupCount,
            dataSize,
            pData
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetRayTracingCaptureReplayShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        {
            return (Result)
                ((IVk)this).GetRayTracingCaptureReplayShaderGroupHandlesKHR(
                    device,
                    pipeline,
                    firstGroup,
                    groupCount,
                    dataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRayTracingCaptureReplayShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    ) =>
        ThisThread.GetRayTracingCaptureReplayShaderGroupHandlesKHR(
            device,
            pipeline,
            firstGroup,
            groupCount,
            dataSize,
            pData
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetRayTracingShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, PipelineHandle, uint, uint, nuint, void*, Result>)(
                _slots[603] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[603] = nativeContext.LoadFunction(
                        "vkGetRayTracingShaderGroupHandlesKHR",
                        "vulkan"
                    )
            )
        )(device, pipeline, firstGroup, groupCount, dataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRayTracingShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        ThisThread.GetRayTracingShaderGroupHandlesKHR(
            device,
            pipeline,
            firstGroup,
            groupCount,
            dataSize,
            pData
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetRayTracingShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        {
            return (Result)
                ((IVk)this).GetRayTracingShaderGroupHandlesKHR(
                    device,
                    pipeline,
                    firstGroup,
                    groupCount,
                    dataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRayTracingShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    ) =>
        ThisThread.GetRayTracingShaderGroupHandlesKHR(
            device,
            pipeline,
            firstGroup,
            groupCount,
            dataSize,
            pData
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetRayTracingShaderGroupHandlesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, PipelineHandle, uint, uint, nuint, void*, Result>)(
                _slots[604] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[604] = nativeContext.LoadFunction(
                        "vkGetRayTracingShaderGroupHandlesNV",
                        "vulkan"
                    )
            )
        )(device, pipeline, firstGroup, groupCount, dataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRayTracingShaderGroupHandlesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        ThisThread.GetRayTracingShaderGroupHandlesNV(
            device,
            pipeline,
            firstGroup,
            groupCount,
            dataSize,
            pData
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetRayTracingShaderGroupHandlesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        {
            return (Result)
                ((IVk)this).GetRayTracingShaderGroupHandlesNV(
                    device,
                    pipeline,
                    firstGroup,
                    groupCount,
                    dataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRayTracingShaderGroupHandlesNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    ) =>
        ThisThread.GetRayTracingShaderGroupHandlesNV(
            device,
            pipeline,
            firstGroup,
            groupCount,
            dataSize,
            pData
        );

    [return: NativeTypeName("VkDeviceSize")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupStackSizeKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVk.GetRayTracingShaderGroupStackSizeKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint group,
        ShaderGroupShaderKHR groupShader
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, PipelineHandle, uint, ShaderGroupShaderKHR, ulong>)(
                _slots[605] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[605] = nativeContext.LoadFunction(
                        "vkGetRayTracingShaderGroupStackSizeKHR",
                        "vulkan"
                    )
            )
        )(device, pipeline, group, groupShader);

    [return: NativeTypeName("VkDeviceSize")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupStackSizeKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetRayTracingShaderGroupStackSizeKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        [NativeTypeName("uint32_t")] uint group,
        ShaderGroupShaderKHR groupShader
    ) => ThisThread.GetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);

    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRefreshCycleDurationGOOGLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetRefreshCycleDurationGoogle(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        RefreshCycleDurationGoogle* pDisplayTimingProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                SwapchainKHRHandle,
                RefreshCycleDurationGoogle*,
                Result>)(
                _slots[606] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[606] = nativeContext.LoadFunction(
                        "vkGetRefreshCycleDurationGOOGLE",
                        "vulkan"
                    )
            )
        )(device, swapchain, pDisplayTimingProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRefreshCycleDurationGOOGLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRefreshCycleDurationGoogle(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        RefreshCycleDurationGoogle* pDisplayTimingProperties
    ) => ThisThread.GetRefreshCycleDurationGoogle(device, swapchain, pDisplayTimingProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRefreshCycleDurationGOOGLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetRefreshCycleDurationGoogle(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        Ref<RefreshCycleDurationGoogle> pDisplayTimingProperties
    )
    {
        fixed (
            RefreshCycleDurationGoogle* __dsl_pDisplayTimingProperties = pDisplayTimingProperties
        )
        {
            return (Result)
                ((IVk)this).GetRefreshCycleDurationGoogle(
                    device,
                    swapchain,
                    __dsl_pDisplayTimingProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRefreshCycleDurationGOOGLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRefreshCycleDurationGoogle(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        Ref<RefreshCycleDurationGoogle> pDisplayTimingProperties
    ) => ThisThread.GetRefreshCycleDurationGoogle(device, swapchain, pDisplayTimingProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderAreaGranularity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetRenderAreaGranularity(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle renderPass,
        Extent2D* pGranularity
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, RenderPassHandle, Extent2D*, void>)(
                _slots[607] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[607] = nativeContext.LoadFunction(
                        "vkGetRenderAreaGranularity",
                        "vulkan"
                    )
            )
        )(device, renderPass, pGranularity);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderAreaGranularity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRenderAreaGranularity(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle renderPass,
        Extent2D* pGranularity
    ) => ThisThread.GetRenderAreaGranularity(device, renderPass, pGranularity);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderAreaGranularity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetRenderAreaGranularity(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle renderPass,
        Ref<Extent2D> pGranularity
    )
    {
        fixed (Extent2D* __dsl_pGranularity = pGranularity)
        {
            ((IVk)this).GetRenderAreaGranularity(device, renderPass, __dsl_pGranularity);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderAreaGranularity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRenderAreaGranularity(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle renderPass,
        Ref<Extent2D> pGranularity
    ) => ThisThread.GetRenderAreaGranularity(device, renderPass, pGranularity);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetRenderingAreaGranularity(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderingAreaInfo *")] RenderingAreaInfo* pRenderingAreaInfo,
        Extent2D* pGranularity
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, RenderingAreaInfo*, Extent2D*, void>)(
                _slots[608] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[608] = nativeContext.LoadFunction(
                        "vkGetRenderingAreaGranularity",
                        "vulkan"
                    )
            )
        )(device, pRenderingAreaInfo, pGranularity);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRenderingAreaGranularity(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderingAreaInfo *")] RenderingAreaInfo* pRenderingAreaInfo,
        Extent2D* pGranularity
    ) => ThisThread.GetRenderingAreaGranularity(device, pRenderingAreaInfo, pGranularity);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetRenderingAreaGranularity(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderingAreaInfo *")] Ref<RenderingAreaInfo> pRenderingAreaInfo,
        Ref<Extent2D> pGranularity
    )
    {
        fixed (Extent2D* __dsl_pGranularity = pGranularity)
        fixed (RenderingAreaInfo* __dsl_pRenderingAreaInfo = pRenderingAreaInfo)
        {
            ((IVk)this).GetRenderingAreaGranularity(
                device,
                __dsl_pRenderingAreaInfo,
                __dsl_pGranularity
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRenderingAreaGranularity(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderingAreaInfo *")] Ref<RenderingAreaInfo> pRenderingAreaInfo,
        Ref<Extent2D> pGranularity
    ) => ThisThread.GetRenderingAreaGranularity(device, pRenderingAreaInfo, pGranularity);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularityKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetRenderingAreaGranularityKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderingAreaInfo *")] RenderingAreaInfo* pRenderingAreaInfo,
        Extent2D* pGranularity
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, RenderingAreaInfo*, Extent2D*, void>)(
                _slots[609] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[609] = nativeContext.LoadFunction(
                        "vkGetRenderingAreaGranularityKHR",
                        "vulkan"
                    )
            )
        )(device, pRenderingAreaInfo, pGranularity);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularityKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRenderingAreaGranularityKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderingAreaInfo *")] RenderingAreaInfo* pRenderingAreaInfo,
        Extent2D* pGranularity
    ) => ThisThread.GetRenderingAreaGranularityKHR(device, pRenderingAreaInfo, pGranularity);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularityKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetRenderingAreaGranularityKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderingAreaInfo *")] Ref<RenderingAreaInfo> pRenderingAreaInfo,
        Ref<Extent2D> pGranularity
    )
    {
        fixed (Extent2D* __dsl_pGranularity = pGranularity)
        fixed (RenderingAreaInfo* __dsl_pRenderingAreaInfo = pRenderingAreaInfo)
        {
            ((IVk)this).GetRenderingAreaGranularityKHR(
                device,
                __dsl_pRenderingAreaInfo,
                __dsl_pGranularity
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularityKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRenderingAreaGranularityKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkRenderingAreaInfo *")] Ref<RenderingAreaInfo> pRenderingAreaInfo,
        Ref<Extent2D> pGranularity
    ) => ThisThread.GetRenderingAreaGranularityKHR(device, pRenderingAreaInfo, pGranularity);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSamplerOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetSamplerOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerCaptureDescriptorDataInfoEXT *")]
            SamplerCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                SamplerCaptureDescriptorDataInfoEXT*,
                void*,
                Result>)(
                _slots[610] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[610] = nativeContext.LoadFunction(
                        "vkGetSamplerOpaqueCaptureDescriptorDataEXT",
                        "vulkan"
                    )
            )
        )(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSamplerOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSamplerOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerCaptureDescriptorDataInfoEXT *")]
            SamplerCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) => ThisThread.GetSamplerOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSamplerOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetSamplerOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerCaptureDescriptorDataInfoEXT *")]
            Ref<SamplerCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (SamplerCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).GetSamplerOpaqueCaptureDescriptorDataEXT(
                    device,
                    __dsl_pInfo,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSamplerOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSamplerOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSamplerCaptureDescriptorDataInfoEXT *")]
            Ref<SamplerCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    ) => ThisThread.GetSamplerOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetSemaphoreCounterValue(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("uint64_t *")] ulong* pValue
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SemaphoreHandle, ulong*, Result>)(
                _slots[611] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[611] = nativeContext.LoadFunction(
                        "vkGetSemaphoreCounterValue",
                        "vulkan"
                    )
            )
        )(device, semaphore, pValue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSemaphoreCounterValue(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("uint64_t *")] ulong* pValue
    ) => ThisThread.GetSemaphoreCounterValue(device, semaphore, pValue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetSemaphoreCounterValue(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("uint64_t *")] Ref<ulong> pValue
    )
    {
        fixed (ulong* __dsl_pValue = pValue)
        {
            return (Result)((IVk)this).GetSemaphoreCounterValue(device, semaphore, __dsl_pValue);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSemaphoreCounterValue(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("uint64_t *")] Ref<ulong> pValue
    ) => ThisThread.GetSemaphoreCounterValue(device, semaphore, pValue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValueKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetSemaphoreCounterValueKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("uint64_t *")] ulong* pValue
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SemaphoreHandle, ulong*, Result>)(
                _slots[612] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[612] = nativeContext.LoadFunction(
                        "vkGetSemaphoreCounterValueKHR",
                        "vulkan"
                    )
            )
        )(device, semaphore, pValue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValueKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSemaphoreCounterValueKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("uint64_t *")] ulong* pValue
    ) => ThisThread.GetSemaphoreCounterValueKHR(device, semaphore, pValue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValueKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetSemaphoreCounterValueKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("uint64_t *")] Ref<ulong> pValue
    )
    {
        fixed (ulong* __dsl_pValue = pValue)
        {
            return (Result)((IVk)this).GetSemaphoreCounterValueKHR(device, semaphore, __dsl_pValue);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValueKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSemaphoreCounterValueKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle semaphore,
        [NativeTypeName("uint64_t *")] Ref<ulong> pValue
    ) => ThisThread.GetSemaphoreCounterValueKHR(device, semaphore, pValue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreGetFdInfoKHR *")] SemaphoreGetFdInfoKHR* pGetFdInfo,
        int* pFd
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SemaphoreGetFdInfoKHR*, int*, Result>)(
                _slots[613] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[613] = nativeContext.LoadFunction("vkGetSemaphoreFdKHR", "vulkan")
            )
        )(device, pGetFdInfo, pFd);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreGetFdInfoKHR *")] SemaphoreGetFdInfoKHR* pGetFdInfo,
        int* pFd
    ) => ThisThread.GetSemaphoreFdKHR(device, pGetFdInfo, pFd);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreGetFdInfoKHR *")] Ref<SemaphoreGetFdInfoKHR> pGetFdInfo,
        Ref<int> pFd
    )
    {
        fixed (int* __dsl_pFd = pFd)
        fixed (SemaphoreGetFdInfoKHR* __dsl_pGetFdInfo = pGetFdInfo)
        {
            return (Result)((IVk)this).GetSemaphoreFdKHR(device, __dsl_pGetFdInfo, __dsl_pFd);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreGetFdInfoKHR *")] Ref<SemaphoreGetFdInfoKHR> pGetFdInfo,
        Ref<int> pFd
    ) => ThisThread.GetSemaphoreFdKHR(device, pGetFdInfo, pFd);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderBinaryDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetShaderBinaryDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderEXT")] ShaderEXTHandle shader,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ShaderEXTHandle, nuint*, void*, Result>)(
                _slots[614] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[614] = nativeContext.LoadFunction("vkGetShaderBinaryDataEXT", "vulkan")
            )
        )(device, shader, pDataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderBinaryDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetShaderBinaryDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderEXT")] ShaderEXTHandle shader,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) => ThisThread.GetShaderBinaryDataEXT(device, shader, pDataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderBinaryDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetShaderBinaryDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderEXT")] ShaderEXTHandle shader,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (nuint* __dsl_pDataSize = pDataSize)
        {
            return (Result)
                ((IVk)this).GetShaderBinaryDataEXT(device, shader, __dsl_pDataSize, __dsl_pData);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderBinaryDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetShaderBinaryDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderEXT")] ShaderEXTHandle shader,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    ) => ThisThread.GetShaderBinaryDataEXT(device, shader, pDataSize, pData);

    [SupportedApiProfile("vulkan", ["VK_AMD_shader_info"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderInfoAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetShaderInfoAMD(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        ShaderStageFlags shaderStage,
        ShaderInfoTypeAMD infoType,
        [NativeTypeName("size_t *")] nuint* pInfoSize,
        void* pInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PipelineHandle,
                ShaderStageFlags,
                ShaderInfoTypeAMD,
                nuint*,
                void*,
                Result>)(
                _slots[615] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[615] = nativeContext.LoadFunction("vkGetShaderInfoAMD", "vulkan")
            )
        )(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);

    [SupportedApiProfile("vulkan", ["VK_AMD_shader_info"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderInfoAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetShaderInfoAMD(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        ShaderStageFlags shaderStage,
        ShaderInfoTypeAMD infoType,
        [NativeTypeName("size_t *")] nuint* pInfoSize,
        void* pInfo
    ) => ThisThread.GetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);

    [SupportedApiProfile("vulkan", ["VK_AMD_shader_info"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderInfoAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetShaderInfoAMD(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        ShaderStageFlags shaderStage,
        ShaderInfoTypeAMD infoType,
        [NativeTypeName("size_t *")] Ref<nuint> pInfoSize,
        Ref pInfo
    )
    {
        fixed (void* __dsl_pInfo = pInfo)
        fixed (nuint* __dsl_pInfoSize = pInfoSize)
        {
            return (Result)
                ((IVk)this).GetShaderInfoAMD(
                    device,
                    pipeline,
                    shaderStage,
                    infoType,
                    __dsl_pInfoSize,
                    __dsl_pInfo
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_AMD_shader_info"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderInfoAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetShaderInfoAMD(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipeline")] PipelineHandle pipeline,
        ShaderStageFlags shaderStage,
        ShaderInfoTypeAMD infoType,
        [NativeTypeName("size_t *")] Ref<nuint> pInfoSize,
        Ref pInfo
    ) => ThisThread.GetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleCreateInfoIdentifierEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetShaderModuleCreateInfoIdentifierEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")] ShaderModuleCreateInfo* pCreateInfo,
        ShaderModuleIdentifierEXT* pIdentifier
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ShaderModuleCreateInfo*,
                ShaderModuleIdentifierEXT*,
                void>)(
                _slots[616] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[616] = nativeContext.LoadFunction(
                        "vkGetShaderModuleCreateInfoIdentifierEXT",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pIdentifier);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleCreateInfoIdentifierEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetShaderModuleCreateInfoIdentifierEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")] ShaderModuleCreateInfo* pCreateInfo,
        ShaderModuleIdentifierEXT* pIdentifier
    ) => ThisThread.GetShaderModuleCreateInfoIdentifierEXT(device, pCreateInfo, pIdentifier);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleCreateInfoIdentifierEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetShaderModuleCreateInfoIdentifierEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")]
            Ref<ShaderModuleCreateInfo> pCreateInfo,
        Ref<ShaderModuleIdentifierEXT> pIdentifier
    )
    {
        fixed (ShaderModuleIdentifierEXT* __dsl_pIdentifier = pIdentifier)
        fixed (ShaderModuleCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            ((IVk)this).GetShaderModuleCreateInfoIdentifierEXT(
                device,
                __dsl_pCreateInfo,
                __dsl_pIdentifier
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleCreateInfoIdentifierEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetShaderModuleCreateInfoIdentifierEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")]
            Ref<ShaderModuleCreateInfo> pCreateInfo,
        Ref<ShaderModuleIdentifierEXT> pIdentifier
    ) => ThisThread.GetShaderModuleCreateInfoIdentifierEXT(device, pCreateInfo, pIdentifier);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleIdentifierEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetShaderModuleIdentifierEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderModule")] ShaderModuleHandle shaderModule,
        ShaderModuleIdentifierEXT* pIdentifier
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ShaderModuleHandle,
                ShaderModuleIdentifierEXT*,
                void>)(
                _slots[617] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[617] = nativeContext.LoadFunction(
                        "vkGetShaderModuleIdentifierEXT",
                        "vulkan"
                    )
            )
        )(device, shaderModule, pIdentifier);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleIdentifierEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetShaderModuleIdentifierEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderModule")] ShaderModuleHandle shaderModule,
        ShaderModuleIdentifierEXT* pIdentifier
    ) => ThisThread.GetShaderModuleIdentifierEXT(device, shaderModule, pIdentifier);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleIdentifierEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetShaderModuleIdentifierEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderModule")] ShaderModuleHandle shaderModule,
        Ref<ShaderModuleIdentifierEXT> pIdentifier
    )
    {
        fixed (ShaderModuleIdentifierEXT* __dsl_pIdentifier = pIdentifier)
        {
            ((IVk)this).GetShaderModuleIdentifierEXT(device, shaderModule, __dsl_pIdentifier);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleIdentifierEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetShaderModuleIdentifierEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkShaderModule")] ShaderModuleHandle shaderModule,
        Ref<ShaderModuleIdentifierEXT> pIdentifier
    ) => ThisThread.GetShaderModuleIdentifierEXT(device, shaderModule, pIdentifier);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainCounterEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetSwapchainCounterEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        SurfaceCounterFlagsEXT counter,
        [NativeTypeName("uint64_t *")] ulong* pCounterValue
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                SwapchainKHRHandle,
                SurfaceCounterFlagsEXT,
                ulong*,
                Result>)(
                _slots[618] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[618] = nativeContext.LoadFunction("vkGetSwapchainCounterEXT", "vulkan")
            )
        )(device, swapchain, counter, pCounterValue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainCounterEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSwapchainCounterEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        SurfaceCounterFlagsEXT counter,
        [NativeTypeName("uint64_t *")] ulong* pCounterValue
    ) => ThisThread.GetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainCounterEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetSwapchainCounterEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        SurfaceCounterFlagsEXT counter,
        [NativeTypeName("uint64_t *")] Ref<ulong> pCounterValue
    )
    {
        fixed (ulong* __dsl_pCounterValue = pCounterValue)
        {
            return (Result)
                ((IVk)this).GetSwapchainCounterEXT(device, swapchain, counter, __dsl_pCounterValue);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainCounterEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSwapchainCounterEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        SurfaceCounterFlagsEXT counter,
        [NativeTypeName("uint64_t *")] Ref<ulong> pCounterValue
    ) => ThisThread.GetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainImagesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetSwapchainImagesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("uint32_t *")] uint* pSwapchainImageCount,
        [NativeTypeName("VkImage *")] ImageHandle* pSwapchainImages
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SwapchainKHRHandle, uint*, ImageHandle*, Result>)(
                _slots[619] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[619] = nativeContext.LoadFunction("vkGetSwapchainImagesKHR", "vulkan")
            )
        )(device, swapchain, pSwapchainImageCount, pSwapchainImages);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainImagesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSwapchainImagesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("uint32_t *")] uint* pSwapchainImageCount,
        [NativeTypeName("VkImage *")] ImageHandle* pSwapchainImages
    ) =>
        ThisThread.GetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainImagesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetSwapchainImagesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("uint32_t *")] Ref<uint> pSwapchainImageCount,
        [NativeTypeName("VkImage *")] Ref<ImageHandle> pSwapchainImages
    )
    {
        fixed (ImageHandle* __dsl_pSwapchainImages = pSwapchainImages)
        fixed (uint* __dsl_pSwapchainImageCount = pSwapchainImageCount)
        {
            return (Result)
                ((IVk)this).GetSwapchainImagesKHR(
                    device,
                    swapchain,
                    __dsl_pSwapchainImageCount,
                    __dsl_pSwapchainImages
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainImagesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSwapchainImagesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("uint32_t *")] Ref<uint> pSwapchainImageCount,
        [NativeTypeName("VkImage *")] Ref<ImageHandle> pSwapchainImages
    ) =>
        ThisThread.GetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shared_presentable_image"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainStatusKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetSwapchainStatusKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SwapchainKHRHandle, Result>)(
                _slots[620] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[620] = nativeContext.LoadFunction("vkGetSwapchainStatusKHR", "vulkan")
            )
        )(device, swapchain);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shared_presentable_image"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainStatusKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSwapchainStatusKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain
    ) => ThisThread.GetSwapchainStatusKHR(device, swapchain);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetTensorMemoryRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetTensorMemoryRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorMemoryRequirementsInfoARM *")]
            TensorMemoryRequirementsInfoARM* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                TensorMemoryRequirementsInfoARM*,
                MemoryRequirements2*,
                void>)(
                _slots[621] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[621] = nativeContext.LoadFunction(
                        "vkGetTensorMemoryRequirementsARM",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetTensorMemoryRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetTensorMemoryRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorMemoryRequirementsInfoARM *")]
            TensorMemoryRequirementsInfoARM* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => ThisThread.GetTensorMemoryRequirementsARM(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetTensorMemoryRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.GetTensorMemoryRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorMemoryRequirementsInfoARM *")]
            Ref<TensorMemoryRequirementsInfoARM> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (TensorMemoryRequirementsInfoARM* __dsl_pInfo = pInfo)
        {
            ((IVk)this).GetTensorMemoryRequirementsARM(
                device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetTensorMemoryRequirementsARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetTensorMemoryRequirementsARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorMemoryRequirementsInfoARM *")]
            Ref<TensorMemoryRequirementsInfoARM> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => ThisThread.GetTensorMemoryRequirementsARM(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetTensorOpaqueCaptureDescriptorDataARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetTensorOpaqueCaptureDescriptorDataARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorCaptureDescriptorDataInfoARM *")]
            TensorCaptureDescriptorDataInfoARM* pInfo,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, TensorCaptureDescriptorDataInfoARM*, void*, Result>)(
                _slots[622] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[622] = nativeContext.LoadFunction(
                        "vkGetTensorOpaqueCaptureDescriptorDataARM",
                        "vulkan"
                    )
            )
        )(device, pInfo, pData);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetTensorOpaqueCaptureDescriptorDataARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetTensorOpaqueCaptureDescriptorDataARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorCaptureDescriptorDataInfoARM *")]
            TensorCaptureDescriptorDataInfoARM* pInfo,
        void* pData
    ) => ThisThread.GetTensorOpaqueCaptureDescriptorDataARM(device, pInfo, pData);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetTensorOpaqueCaptureDescriptorDataARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetTensorOpaqueCaptureDescriptorDataARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorCaptureDescriptorDataInfoARM *")]
            Ref<TensorCaptureDescriptorDataInfoARM> pInfo,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (TensorCaptureDescriptorDataInfoARM* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).GetTensorOpaqueCaptureDescriptorDataARM(
                    device,
                    __dsl_pInfo,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetTensorOpaqueCaptureDescriptorDataARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetTensorOpaqueCaptureDescriptorDataARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorCaptureDescriptorDataInfoARM *")]
            Ref<TensorCaptureDescriptorDataInfoARM> pInfo,
        Ref pData
    ) => ThisThread.GetTensorOpaqueCaptureDescriptorDataARM(device, pInfo, pData);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetTensorViewOpaqueCaptureDescriptorDataARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetTensorViewOpaqueCaptureDescriptorDataARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorViewCaptureDescriptorDataInfoARM *")]
            TensorViewCaptureDescriptorDataInfoARM* pInfo,
        void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                TensorViewCaptureDescriptorDataInfoARM*,
                void*,
                Result>)(
                _slots[623] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[623] = nativeContext.LoadFunction(
                        "vkGetTensorViewOpaqueCaptureDescriptorDataARM",
                        "vulkan"
                    )
            )
        )(device, pInfo, pData);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkGetTensorViewOpaqueCaptureDescriptorDataARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetTensorViewOpaqueCaptureDescriptorDataARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorViewCaptureDescriptorDataInfoARM *")]
            TensorViewCaptureDescriptorDataInfoARM* pInfo,
        void* pData
    ) => ThisThread.GetTensorViewOpaqueCaptureDescriptorDataARM(device, pInfo, pData);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetTensorViewOpaqueCaptureDescriptorDataARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetTensorViewOpaqueCaptureDescriptorDataARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorViewCaptureDescriptorDataInfoARM *")]
            Ref<TensorViewCaptureDescriptorDataInfoARM> pInfo,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (TensorViewCaptureDescriptorDataInfoARM* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).GetTensorViewOpaqueCaptureDescriptorDataARM(
                    device,
                    __dsl_pInfo,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetTensorViewOpaqueCaptureDescriptorDataARM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetTensorViewOpaqueCaptureDescriptorDataARM(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkTensorViewCaptureDescriptorDataInfoARM *")]
            Ref<TensorViewCaptureDescriptorDataInfoARM> pInfo,
        Ref pData
    ) => ThisThread.GetTensorViewOpaqueCaptureDescriptorDataARM(device, pInfo, pData);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetValidationCacheDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetValidationCacheDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle validationCache,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ValidationCacheEXTHandle, nuint*, void*, Result>)(
                _slots[624] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[624] = nativeContext.LoadFunction(
                        "vkGetValidationCacheDataEXT",
                        "vulkan"
                    )
            )
        )(device, validationCache, pDataSize, pData);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetValidationCacheDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetValidationCacheDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle validationCache,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) => ThisThread.GetValidationCacheDataEXT(device, validationCache, pDataSize, pData);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetValidationCacheDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetValidationCacheDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle validationCache,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (nuint* __dsl_pDataSize = pDataSize)
        {
            return (Result)
                ((IVk)this).GetValidationCacheDataEXT(
                    device,
                    validationCache,
                    __dsl_pDataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetValidationCacheDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetValidationCacheDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle validationCache,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    ) => ThisThread.GetValidationCacheDataEXT(device, validationCache, pDataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetVideoSessionMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetVideoSessionMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
        [NativeTypeName("uint32_t *")] uint* pMemoryRequirementsCount,
        VideoSessionMemoryRequirementsKHR* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                VideoSessionKHRHandle,
                uint*,
                VideoSessionMemoryRequirementsKHR*,
                Result>)(
                _slots[625] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[625] = nativeContext.LoadFunction(
                        "vkGetVideoSessionMemoryRequirementsKHR",
                        "vulkan"
                    )
            )
        )(device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetVideoSessionMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetVideoSessionMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
        [NativeTypeName("uint32_t *")] uint* pMemoryRequirementsCount,
        VideoSessionMemoryRequirementsKHR* pMemoryRequirements
    ) =>
        ThisThread.GetVideoSessionMemoryRequirementsKHR(
            device,
            videoSession,
            pMemoryRequirementsCount,
            pMemoryRequirements
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetVideoSessionMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.GetVideoSessionMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
        [NativeTypeName("uint32_t *")] Ref<uint> pMemoryRequirementsCount,
        Ref<VideoSessionMemoryRequirementsKHR> pMemoryRequirements
    )
    {
        fixed (VideoSessionMemoryRequirementsKHR* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (uint* __dsl_pMemoryRequirementsCount = pMemoryRequirementsCount)
        {
            return (Result)
                ((IVk)this).GetVideoSessionMemoryRequirementsKHR(
                    device,
                    videoSession,
                    __dsl_pMemoryRequirementsCount,
                    __dsl_pMemoryRequirements
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetVideoSessionMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetVideoSessionMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle videoSession,
        [NativeTypeName("uint32_t *")] Ref<uint> pMemoryRequirementsCount,
        Ref<VideoSessionMemoryRequirementsKHR> pMemoryRequirements
    ) =>
        ThisThread.GetVideoSessionMemoryRequirementsKHR(
            device,
            videoSession,
            pMemoryRequirementsCount,
            pMemoryRequirements
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkImportFenceFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ImportFenceFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImportFenceFdInfoKHR *")] ImportFenceFdInfoKHR* pImportFenceFdInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ImportFenceFdInfoKHR*, Result>)(
                _slots[626] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[626] = nativeContext.LoadFunction("vkImportFenceFdKHR", "vulkan")
            )
        )(device, pImportFenceFdInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkImportFenceFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ImportFenceFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImportFenceFdInfoKHR *")] ImportFenceFdInfoKHR* pImportFenceFdInfo
    ) => ThisThread.ImportFenceFdKHR(device, pImportFenceFdInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkImportFenceFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ImportFenceFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImportFenceFdInfoKHR *")]
            Ref<ImportFenceFdInfoKHR> pImportFenceFdInfo
    )
    {
        fixed (ImportFenceFdInfoKHR* __dsl_pImportFenceFdInfo = pImportFenceFdInfo)
        {
            return (Result)((IVk)this).ImportFenceFdKHR(device, __dsl_pImportFenceFdInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkImportFenceFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ImportFenceFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImportFenceFdInfoKHR *")]
            Ref<ImportFenceFdInfoKHR> pImportFenceFdInfo
    ) => ThisThread.ImportFenceFdKHR(device, pImportFenceFdInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkImportSemaphoreFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ImportSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImportSemaphoreFdInfoKHR *")]
            ImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ImportSemaphoreFdInfoKHR*, Result>)(
                _slots[627] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[627] = nativeContext.LoadFunction("vkImportSemaphoreFdKHR", "vulkan")
            )
        )(device, pImportSemaphoreFdInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkImportSemaphoreFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ImportSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImportSemaphoreFdInfoKHR *")]
            ImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo
    ) => ThisThread.ImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkImportSemaphoreFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ImportSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImportSemaphoreFdInfoKHR *")]
            Ref<ImportSemaphoreFdInfoKHR> pImportSemaphoreFdInfo
    )
    {
        fixed (ImportSemaphoreFdInfoKHR* __dsl_pImportSemaphoreFdInfo = pImportSemaphoreFdInfo)
        {
            return (Result)((IVk)this).ImportSemaphoreFdKHR(device, __dsl_pImportSemaphoreFdInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkImportSemaphoreFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ImportSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkImportSemaphoreFdInfoKHR *")]
            Ref<ImportSemaphoreFdInfoKHR> pImportSemaphoreFdInfo
    ) => ThisThread.ImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkInitializePerformanceApiINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.InitializePerformanceApiIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkInitializePerformanceApiInfoINTEL *")]
            InitializePerformanceApiInfoIntel* pInitializeInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, InitializePerformanceApiInfoIntel*, Result>)(
                _slots[628] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[628] = nativeContext.LoadFunction(
                        "vkInitializePerformanceApiINTEL",
                        "vulkan"
                    )
            )
        )(device, pInitializeInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkInitializePerformanceApiINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result InitializePerformanceApiIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkInitializePerformanceApiInfoINTEL *")]
            InitializePerformanceApiInfoIntel* pInitializeInfo
    ) => ThisThread.InitializePerformanceApiIntel(device, pInitializeInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkInitializePerformanceApiINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.InitializePerformanceApiIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkInitializePerformanceApiInfoINTEL *")]
            Ref<InitializePerformanceApiInfoIntel> pInitializeInfo
    )
    {
        fixed (InitializePerformanceApiInfoIntel* __dsl_pInitializeInfo = pInitializeInfo)
        {
            return (Result)((IVk)this).InitializePerformanceApiIntel(device, __dsl_pInitializeInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkInitializePerformanceApiINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result InitializePerformanceApiIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkInitializePerformanceApiInfoINTEL *")]
            Ref<InitializePerformanceApiInfoIntel> pInitializeInfo
    ) => ThisThread.InitializePerformanceApiIntel(device, pInitializeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkInvalidateMappedMemoryRanges")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.InvalidateMappedMemoryRanges(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] MappedMemoryRange* pMemoryRanges
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, MappedMemoryRange*, Result>)(
                _slots[629] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[629] = nativeContext.LoadFunction(
                        "vkInvalidateMappedMemoryRanges",
                        "vulkan"
                    )
            )
        )(device, memoryRangeCount, pMemoryRanges);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkInvalidateMappedMemoryRanges")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result InvalidateMappedMemoryRanges(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] MappedMemoryRange* pMemoryRanges
    ) => ThisThread.InvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkInvalidateMappedMemoryRanges")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.InvalidateMappedMemoryRanges(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] Ref<MappedMemoryRange> pMemoryRanges
    )
    {
        fixed (MappedMemoryRange* __dsl_pMemoryRanges = pMemoryRanges)
        {
            return (Result)
                ((IVk)this).InvalidateMappedMemoryRanges(
                    device,
                    memoryRangeCount,
                    __dsl_pMemoryRanges
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkInvalidateMappedMemoryRanges")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result InvalidateMappedMemoryRanges(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] Ref<MappedMemoryRange> pMemoryRanges
    ) => ThisThread.InvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkLatencySleepNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.LatencySleepNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkLatencySleepInfoNV *")] LatencySleepInfoNV* pSleepInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SwapchainKHRHandle, LatencySleepInfoNV*, Result>)(
                _slots[630] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[630] = nativeContext.LoadFunction("vkLatencySleepNV", "vulkan")
            )
        )(device, swapchain, pSleepInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkLatencySleepNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result LatencySleepNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkLatencySleepInfoNV *")] LatencySleepInfoNV* pSleepInfo
    ) => ThisThread.LatencySleepNV(device, swapchain, pSleepInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkLatencySleepNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.LatencySleepNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkLatencySleepInfoNV *")] Ref<LatencySleepInfoNV> pSleepInfo
    )
    {
        fixed (LatencySleepInfoNV* __dsl_pSleepInfo = pSleepInfo)
        {
            return (Result)((IVk)this).LatencySleepNV(device, swapchain, __dsl_pSleepInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkLatencySleepNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result LatencySleepNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkLatencySleepInfoNV *")] Ref<LatencySleepInfoNV> pSleepInfo
    ) => ThisThread.LatencySleepNV(device, swapchain, pSleepInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.MapMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        [NativeTypeName("VkMemoryMapFlags")] MemoryMapFlags flags,
        void** ppData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeviceMemoryHandle,
                ulong,
                ulong,
                MemoryMapFlags,
                void**,
                Result>)(
                _slots[631] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[631] = nativeContext.LoadFunction("vkMapMemory", "vulkan")
            )
        )(device, memory, offset, size, flags, ppData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MapMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        [NativeTypeName("VkMemoryMapFlags")] MemoryMapFlags flags,
        void** ppData
    ) => ThisThread.MapMemory(device, memory, offset, size, flags, ppData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.MapMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        [NativeTypeName("VkMemoryMapFlags")] MemoryMapFlags flags,
        Ref2D ppData
    )
    {
        fixed (void** __dsl_ppData = ppData)
        {
            return (Result)((IVk)this).MapMemory(device, memory, offset, size, flags, __dsl_ppData);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MapMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        [NativeTypeName("VkMemoryMapFlags")] MemoryMapFlags flags,
        Ref2D ppData
    ) => ThisThread.MapMemory(device, memory, offset, size, flags, ppData);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.MapMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryMapInfo *")] MemoryMapInfo* pMemoryMapInfo,
        void** ppData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, MemoryMapInfo*, void**, Result>)(
                _slots[632] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[632] = nativeContext.LoadFunction("vkMapMemory2", "vulkan")
            )
        )(device, pMemoryMapInfo, ppData);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MapMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryMapInfo *")] MemoryMapInfo* pMemoryMapInfo,
        void** ppData
    ) => ThisThread.MapMemory2(device, pMemoryMapInfo, ppData);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.MapMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryMapInfo *")] Ref<MemoryMapInfo> pMemoryMapInfo,
        Ref2D ppData
    )
    {
        fixed (void** __dsl_ppData = ppData)
        fixed (MemoryMapInfo* __dsl_pMemoryMapInfo = pMemoryMapInfo)
        {
            return (Result)((IVk)this).MapMemory2(device, __dsl_pMemoryMapInfo, __dsl_ppData);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MapMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryMapInfo *")] Ref<MemoryMapInfo> pMemoryMapInfo,
        Ref2D ppData
    ) => ThisThread.MapMemory2(device, pMemoryMapInfo, ppData);

    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.MapMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryMapInfo *")] MemoryMapInfo* pMemoryMapInfo,
        void** ppData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, MemoryMapInfo*, void**, Result>)(
                _slots[633] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[633] = nativeContext.LoadFunction("vkMapMemory2KHR", "vulkan")
            )
        )(device, pMemoryMapInfo, ppData);

    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MapMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryMapInfo *")] MemoryMapInfo* pMemoryMapInfo,
        void** ppData
    ) => ThisThread.MapMemory2KHR(device, pMemoryMapInfo, ppData);

    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.MapMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryMapInfo *")] Ref<MemoryMapInfo> pMemoryMapInfo,
        Ref2D ppData
    )
    {
        fixed (void** __dsl_ppData = ppData)
        fixed (MemoryMapInfo* __dsl_pMemoryMapInfo = pMemoryMapInfo)
        {
            return (Result)((IVk)this).MapMemory2KHR(device, __dsl_pMemoryMapInfo, __dsl_ppData);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MapMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryMapInfo *")] Ref<MemoryMapInfo> pMemoryMapInfo,
        Ref2D ppData
    ) => ThisThread.MapMemory2KHR(device, pMemoryMapInfo, ppData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkMergePipelineCaches")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.MergePipelineCaches(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkPipelineCache *")] PipelineCacheHandle* pSrcCaches
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                PipelineCacheHandle,
                uint,
                PipelineCacheHandle*,
                Result>)(
                _slots[634] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[634] = nativeContext.LoadFunction("vkMergePipelineCaches", "vulkan")
            )
        )(device, dstCache, srcCacheCount, pSrcCaches);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkMergePipelineCaches")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MergePipelineCaches(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkPipelineCache *")] PipelineCacheHandle* pSrcCaches
    ) => ThisThread.MergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMergePipelineCaches")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.MergePipelineCaches(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkPipelineCache *")] Ref<PipelineCacheHandle> pSrcCaches
    )
    {
        fixed (PipelineCacheHandle* __dsl_pSrcCaches = pSrcCaches)
        {
            return (Result)
                ((IVk)this).MergePipelineCaches(device, dstCache, srcCacheCount, __dsl_pSrcCaches);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMergePipelineCaches")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MergePipelineCaches(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkPipelineCache *")] Ref<PipelineCacheHandle> pSrcCaches
    ) => ThisThread.MergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [NativeFunction("vulkan", EntryPoint = "vkMergeValidationCachesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.MergeValidationCachesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkValidationCacheEXT *")] ValidationCacheEXTHandle* pSrcCaches
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ValidationCacheEXTHandle,
                uint,
                ValidationCacheEXTHandle*,
                Result>)(
                _slots[635] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[635] = nativeContext.LoadFunction(
                        "vkMergeValidationCachesEXT",
                        "vulkan"
                    )
            )
        )(device, dstCache, srcCacheCount, pSrcCaches);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [NativeFunction("vulkan", EntryPoint = "vkMergeValidationCachesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MergeValidationCachesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkValidationCacheEXT *")] ValidationCacheEXTHandle* pSrcCaches
    ) => ThisThread.MergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMergeValidationCachesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.MergeValidationCachesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkValidationCacheEXT *")] Ref<ValidationCacheEXTHandle> pSrcCaches
    )
    {
        fixed (ValidationCacheEXTHandle* __dsl_pSrcCaches = pSrcCaches)
        {
            return (Result)
                ((IVk)this).MergeValidationCachesEXT(
                    device,
                    dstCache,
                    srcCacheCount,
                    __dsl_pSrcCaches
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMergeValidationCachesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MergeValidationCachesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkValidationCacheEXT *")] Ref<ValidationCacheEXTHandle> pSrcCaches
    ) => ThisThread.MergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueueBeginDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.QueueBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) =>
        (
            (delegate* unmanaged<QueueHandle, DebugUtilsLabelEXT*, void>)(
                _slots[636] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[636] = nativeContext.LoadFunction(
                        "vkQueueBeginDebugUtilsLabelEXT",
                        "vulkan"
                    )
            )
        )(queue, pLabelInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueueBeginDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) => ThisThread.QueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueBeginDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.QueueBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    )
    {
        fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
        {
            ((IVk)this).QueueBeginDebugUtilsLabelEXT(queue, __dsl_pLabelInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueBeginDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    ) => ThisThread.QueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueBindSparse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.QueueBindSparse(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindSparseInfo *")] BindSparseInfo* pBindInfo,
        [NativeTypeName("VkFence")] FenceHandle fence
    ) =>
        (
            (delegate* unmanaged<QueueHandle, uint, BindSparseInfo*, FenceHandle, Result>)(
                _slots[637] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[637] = nativeContext.LoadFunction("vkQueueBindSparse", "vulkan")
            )
        )(queue, bindInfoCount, pBindInfo, fence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueBindSparse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueBindSparse(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindSparseInfo *")] BindSparseInfo* pBindInfo,
        [NativeTypeName("VkFence")] FenceHandle fence
    ) => ThisThread.QueueBindSparse(queue, bindInfoCount, pBindInfo, fence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueBindSparse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.QueueBindSparse(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindSparseInfo *")] Ref<BindSparseInfo> pBindInfo,
        [NativeTypeName("VkFence")] FenceHandle fence
    )
    {
        fixed (BindSparseInfo* __dsl_pBindInfo = pBindInfo)
        {
            return (Result)
                ((IVk)this).QueueBindSparse(queue, bindInfoCount, __dsl_pBindInfo, fence);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueBindSparse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueBindSparse(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindSparseInfo *")] Ref<BindSparseInfo> pBindInfo,
        [NativeTypeName("VkFence")] FenceHandle fence
    ) => ThisThread.QueueBindSparse(queue, bindInfoCount, pBindInfo, fence);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueueEndDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.QueueEndDebugUtilsLabelEXT([NativeTypeName("VkQueue")] QueueHandle queue) =>
        (
            (delegate* unmanaged<QueueHandle, void>)(
                _slots[638] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[638] = nativeContext.LoadFunction(
                        "vkQueueEndDebugUtilsLabelEXT",
                        "vulkan"
                    )
            )
        )(queue);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueueEndDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueEndDebugUtilsLabelEXT([NativeTypeName("VkQueue")] QueueHandle queue) =>
        ThisThread.QueueEndDebugUtilsLabelEXT(queue);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueueInsertDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.QueueInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) =>
        (
            (delegate* unmanaged<QueueHandle, DebugUtilsLabelEXT*, void>)(
                _slots[639] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[639] = nativeContext.LoadFunction(
                        "vkQueueInsertDebugUtilsLabelEXT",
                        "vulkan"
                    )
            )
        )(queue, pLabelInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueueInsertDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) => ThisThread.QueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueInsertDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.QueueInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    )
    {
        fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
        {
            ((IVk)this).QueueInsertDebugUtilsLabelEXT(queue, __dsl_pLabelInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueInsertDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    ) => ThisThread.QueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueNotifyOutOfBandNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.QueueNotifyOutOfBandNV(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkOutOfBandQueueTypeInfoNV *")]
            OutOfBandQueueTypeInfoNV* pQueueTypeInfo
    ) =>
        (
            (delegate* unmanaged<QueueHandle, OutOfBandQueueTypeInfoNV*, void>)(
                _slots[640] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[640] = nativeContext.LoadFunction("vkQueueNotifyOutOfBandNV", "vulkan")
            )
        )(queue, pQueueTypeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueNotifyOutOfBandNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueNotifyOutOfBandNV(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkOutOfBandQueueTypeInfoNV *")]
            OutOfBandQueueTypeInfoNV* pQueueTypeInfo
    ) => ThisThread.QueueNotifyOutOfBandNV(queue, pQueueTypeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueNotifyOutOfBandNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.QueueNotifyOutOfBandNV(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkOutOfBandQueueTypeInfoNV *")]
            Ref<OutOfBandQueueTypeInfoNV> pQueueTypeInfo
    )
    {
        fixed (OutOfBandQueueTypeInfoNV* __dsl_pQueueTypeInfo = pQueueTypeInfo)
        {
            ((IVk)this).QueueNotifyOutOfBandNV(queue, __dsl_pQueueTypeInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueNotifyOutOfBandNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueNotifyOutOfBandNV(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkOutOfBandQueueTypeInfoNV *")]
            Ref<OutOfBandQueueTypeInfoNV> pQueueTypeInfo
    ) => ThisThread.QueueNotifyOutOfBandNV(queue, pQueueTypeInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueuePresentKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.QueuePresentKHR(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkPresentInfoKHR *")] PresentInfoKHR* pPresentInfo
    ) =>
        (
            (delegate* unmanaged<QueueHandle, PresentInfoKHR*, Result>)(
                _slots[641] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[641] = nativeContext.LoadFunction("vkQueuePresentKHR", "vulkan")
            )
        )(queue, pPresentInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueuePresentKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueuePresentKHR(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkPresentInfoKHR *")] PresentInfoKHR* pPresentInfo
    ) => ThisThread.QueuePresentKHR(queue, pPresentInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueuePresentKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.QueuePresentKHR(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkPresentInfoKHR *")] Ref<PresentInfoKHR> pPresentInfo
    )
    {
        fixed (PresentInfoKHR* __dsl_pPresentInfo = pPresentInfo)
        {
            return (Result)((IVk)this).QueuePresentKHR(queue, __dsl_pPresentInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueuePresentKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueuePresentKHR(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("const VkPresentInfoKHR *")] Ref<PresentInfoKHR> pPresentInfo
    ) => ThisThread.QueuePresentKHR(queue, pPresentInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSetPerformanceConfigurationINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.QueueSetPerformanceConfigurationIntel(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("VkPerformanceConfigurationINTEL")]
            PerformanceConfigurationIntelHandle configuration
    ) =>
        (
            (delegate* unmanaged<QueueHandle, PerformanceConfigurationIntelHandle, Result>)(
                _slots[642] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[642] = nativeContext.LoadFunction(
                        "vkQueueSetPerformanceConfigurationINTEL",
                        "vulkan"
                    )
            )
        )(queue, configuration);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSetPerformanceConfigurationINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSetPerformanceConfigurationIntel(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("VkPerformanceConfigurationINTEL")]
            PerformanceConfigurationIntelHandle configuration
    ) => ThisThread.QueueSetPerformanceConfigurationIntel(queue, configuration);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.QueueSubmit(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo *")] SubmitInfo* pSubmits,
        [NativeTypeName("VkFence")] FenceHandle fence
    ) =>
        (
            (delegate* unmanaged<QueueHandle, uint, SubmitInfo*, FenceHandle, Result>)(
                _slots[643] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[643] = nativeContext.LoadFunction("vkQueueSubmit", "vulkan")
            )
        )(queue, submitCount, pSubmits, fence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSubmit(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo *")] SubmitInfo* pSubmits,
        [NativeTypeName("VkFence")] FenceHandle fence
    ) => ThisThread.QueueSubmit(queue, submitCount, pSubmits, fence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.QueueSubmit(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo *")] Ref<SubmitInfo> pSubmits,
        [NativeTypeName("VkFence")] FenceHandle fence
    )
    {
        fixed (SubmitInfo* __dsl_pSubmits = pSubmits)
        {
            return (Result)((IVk)this).QueueSubmit(queue, submitCount, __dsl_pSubmits, fence);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSubmit(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo *")] Ref<SubmitInfo> pSubmits,
        [NativeTypeName("VkFence")] FenceHandle fence
    ) => ThisThread.QueueSubmit(queue, submitCount, pSubmits, fence);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.QueueSubmit2(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] SubmitInfo2* pSubmits,
        [NativeTypeName("VkFence")] FenceHandle fence
    ) =>
        (
            (delegate* unmanaged<QueueHandle, uint, SubmitInfo2*, FenceHandle, Result>)(
                _slots[644] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[644] = nativeContext.LoadFunction("vkQueueSubmit2", "vulkan")
            )
        )(queue, submitCount, pSubmits, fence);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSubmit2(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] SubmitInfo2* pSubmits,
        [NativeTypeName("VkFence")] FenceHandle fence
    ) => ThisThread.QueueSubmit2(queue, submitCount, pSubmits, fence);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.QueueSubmit2(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] Ref<SubmitInfo2> pSubmits,
        [NativeTypeName("VkFence")] FenceHandle fence
    )
    {
        fixed (SubmitInfo2* __dsl_pSubmits = pSubmits)
        {
            return (Result)((IVk)this).QueueSubmit2(queue, submitCount, __dsl_pSubmits, fence);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSubmit2(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] Ref<SubmitInfo2> pSubmits,
        [NativeTypeName("VkFence")] FenceHandle fence
    ) => ThisThread.QueueSubmit2(queue, submitCount, pSubmits, fence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.QueueSubmit2KHR(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] SubmitInfo2* pSubmits,
        [NativeTypeName("VkFence")] FenceHandle fence
    ) =>
        (
            (delegate* unmanaged<QueueHandle, uint, SubmitInfo2*, FenceHandle, Result>)(
                _slots[645] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[645] = nativeContext.LoadFunction("vkQueueSubmit2KHR", "vulkan")
            )
        )(queue, submitCount, pSubmits, fence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSubmit2KHR(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] SubmitInfo2* pSubmits,
        [NativeTypeName("VkFence")] FenceHandle fence
    ) => ThisThread.QueueSubmit2KHR(queue, submitCount, pSubmits, fence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.QueueSubmit2KHR(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] Ref<SubmitInfo2> pSubmits,
        [NativeTypeName("VkFence")] FenceHandle fence
    )
    {
        fixed (SubmitInfo2* __dsl_pSubmits = pSubmits)
        {
            return (Result)((IVk)this).QueueSubmit2KHR(queue, submitCount, __dsl_pSubmits, fence);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSubmit2KHR(
        [NativeTypeName("VkQueue")] QueueHandle queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] Ref<SubmitInfo2> pSubmits,
        [NativeTypeName("VkFence")] FenceHandle fence
    ) => ThisThread.QueueSubmit2KHR(queue, submitCount, pSubmits, fence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueWaitIdle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.QueueWaitIdle([NativeTypeName("VkQueue")] QueueHandle queue) =>
        (
            (delegate* unmanaged<QueueHandle, Result>)(
                _slots[646] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[646] = nativeContext.LoadFunction("vkQueueWaitIdle", "vulkan")
            )
        )(queue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueWaitIdle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueWaitIdle([NativeTypeName("VkQueue")] QueueHandle queue) =>
        ThisThread.QueueWaitIdle(queue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkRegisterDeviceEventEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.RegisterDeviceEventEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceEventInfoEXT *")] DeviceEventInfoEXT* pDeviceEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFence *")] FenceHandle* pFence
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DeviceEventInfoEXT*,
                AllocationCallbacks*,
                FenceHandle*,
                Result>)(
                _slots[647] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[647] = nativeContext.LoadFunction("vkRegisterDeviceEventEXT", "vulkan")
            )
        )(device, pDeviceEventInfo, pAllocator, pFence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkRegisterDeviceEventEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result RegisterDeviceEventEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceEventInfoEXT *")] DeviceEventInfoEXT* pDeviceEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFence *")] FenceHandle* pFence
    ) => ThisThread.RegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkRegisterDeviceEventEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.RegisterDeviceEventEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceEventInfoEXT *")] Ref<DeviceEventInfoEXT> pDeviceEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFence *")] Ref<FenceHandle> pFence
    )
    {
        fixed (FenceHandle* __dsl_pFence = pFence)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DeviceEventInfoEXT* __dsl_pDeviceEventInfo = pDeviceEventInfo)
        {
            return (Result)
                ((IVk)this).RegisterDeviceEventEXT(
                    device,
                    __dsl_pDeviceEventInfo,
                    __dsl_pAllocator,
                    __dsl_pFence
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkRegisterDeviceEventEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result RegisterDeviceEventEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDeviceEventInfoEXT *")] Ref<DeviceEventInfoEXT> pDeviceEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFence *")] Ref<FenceHandle> pFence
    ) => ThisThread.RegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkRegisterDisplayEventEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.RegisterDisplayEventEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("const VkDisplayEventInfoEXT *")] DisplayEventInfoEXT* pDisplayEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFence *")] FenceHandle* pFence
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DisplayKHRHandle,
                DisplayEventInfoEXT*,
                AllocationCallbacks*,
                FenceHandle*,
                Result>)(
                _slots[648] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[648] = nativeContext.LoadFunction(
                        "vkRegisterDisplayEventEXT",
                        "vulkan"
                    )
            )
        )(device, display, pDisplayEventInfo, pAllocator, pFence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkRegisterDisplayEventEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result RegisterDisplayEventEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("const VkDisplayEventInfoEXT *")] DisplayEventInfoEXT* pDisplayEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFence *")] FenceHandle* pFence
    ) => ThisThread.RegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkRegisterDisplayEventEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.RegisterDisplayEventEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("const VkDisplayEventInfoEXT *")]
            Ref<DisplayEventInfoEXT> pDisplayEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFence *")] Ref<FenceHandle> pFence
    )
    {
        fixed (FenceHandle* __dsl_pFence = pFence)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DisplayEventInfoEXT* __dsl_pDisplayEventInfo = pDisplayEventInfo)
        {
            return (Result)
                ((IVk)this).RegisterDisplayEventEXT(
                    device,
                    display,
                    __dsl_pDisplayEventInfo,
                    __dsl_pAllocator,
                    __dsl_pFence
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkRegisterDisplayEventEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result RegisterDisplayEventEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display,
        [NativeTypeName("const VkDisplayEventInfoEXT *")]
            Ref<DisplayEventInfoEXT> pDisplayEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFence *")] Ref<FenceHandle> pFence
    ) => ThisThread.RegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseCapturedPipelineDataKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ReleaseCapturedPipelineDataKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkReleaseCapturedPipelineDataInfoKHR *")]
            ReleaseCapturedPipelineDataInfoKHR* pInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ReleaseCapturedPipelineDataInfoKHR*,
                AllocationCallbacks*,
                Result>)(
                _slots[649] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[649] = nativeContext.LoadFunction(
                        "vkReleaseCapturedPipelineDataKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseCapturedPipelineDataKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleaseCapturedPipelineDataKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkReleaseCapturedPipelineDataInfoKHR *")]
            ReleaseCapturedPipelineDataInfoKHR* pInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => ThisThread.ReleaseCapturedPipelineDataKHR(device, pInfo, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseCapturedPipelineDataKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ReleaseCapturedPipelineDataKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkReleaseCapturedPipelineDataInfoKHR *")]
            Ref<ReleaseCapturedPipelineDataInfoKHR> pInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ReleaseCapturedPipelineDataInfoKHR* __dsl_pInfo = pInfo)
        {
            return (Result)
                ((IVk)this).ReleaseCapturedPipelineDataKHR(device, __dsl_pInfo, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseCapturedPipelineDataKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleaseCapturedPipelineDataKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkReleaseCapturedPipelineDataInfoKHR *")]
            Ref<ReleaseCapturedPipelineDataInfoKHR> pInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => ThisThread.ReleaseCapturedPipelineDataKHR(device, pInfo, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_direct_mode_display"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseDisplayEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ReleaseDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle, DisplayKHRHandle, Result>)(
                _slots[650] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[650] = nativeContext.LoadFunction("vkReleaseDisplayEXT", "vulkan")
            )
        )(physicalDevice, display);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_direct_mode_display"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseDisplayEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleaseDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle display
    ) => ThisThread.ReleaseDisplayEXT(physicalDevice, display);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkReleasePerformanceConfigurationINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ReleasePerformanceConfigurationIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPerformanceConfigurationINTEL")]
            PerformanceConfigurationIntelHandle configuration
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, PerformanceConfigurationIntelHandle, Result>)(
                _slots[651] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[651] = nativeContext.LoadFunction(
                        "vkReleasePerformanceConfigurationINTEL",
                        "vulkan"
                    )
            )
        )(device, configuration);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkReleasePerformanceConfigurationINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleasePerformanceConfigurationIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkPerformanceConfigurationINTEL")]
            PerformanceConfigurationIntelHandle configuration
    ) => ThisThread.ReleasePerformanceConfigurationIntel(device, configuration);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseProfilingLockKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.ReleaseProfilingLockKHR([NativeTypeName("VkDevice")] DeviceHandle device) =>
        (
            (delegate* unmanaged<DeviceHandle, void>)(
                _slots[652] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[652] = nativeContext.LoadFunction(
                        "vkReleaseProfilingLockKHR",
                        "vulkan"
                    )
            )
        )(device);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseProfilingLockKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ReleaseProfilingLockKHR([NativeTypeName("VkDevice")] DeviceHandle device) =>
        ThisThread.ReleaseProfilingLockKHR(device);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_swapchain_maintenance1"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ReleaseSwapchainImagesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkReleaseSwapchainImagesInfoKHR *")]
            ReleaseSwapchainImagesInfoKHR* pReleaseInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ReleaseSwapchainImagesInfoKHR*, Result>)(
                _slots[653] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[653] = nativeContext.LoadFunction(
                        "vkReleaseSwapchainImagesEXT",
                        "vulkan"
                    )
            )
        )(device, pReleaseInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_swapchain_maintenance1"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleaseSwapchainImagesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkReleaseSwapchainImagesInfoKHR *")]
            ReleaseSwapchainImagesInfoKHR* pReleaseInfo
    ) => ThisThread.ReleaseSwapchainImagesEXT(device, pReleaseInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_swapchain_maintenance1"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ReleaseSwapchainImagesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkReleaseSwapchainImagesInfoKHR *")]
            Ref<ReleaseSwapchainImagesInfoKHR> pReleaseInfo
    )
    {
        fixed (ReleaseSwapchainImagesInfoKHR* __dsl_pReleaseInfo = pReleaseInfo)
        {
            return (Result)((IVk)this).ReleaseSwapchainImagesEXT(device, __dsl_pReleaseInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_swapchain_maintenance1"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleaseSwapchainImagesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkReleaseSwapchainImagesInfoKHR *")]
            Ref<ReleaseSwapchainImagesInfoKHR> pReleaseInfo
    ) => ThisThread.ReleaseSwapchainImagesEXT(device, pReleaseInfo);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ReleaseSwapchainImagesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkReleaseSwapchainImagesInfoKHR *")]
            ReleaseSwapchainImagesInfoKHR* pReleaseInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, ReleaseSwapchainImagesInfoKHR*, Result>)(
                _slots[654] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[654] = nativeContext.LoadFunction(
                        "vkReleaseSwapchainImagesKHR",
                        "vulkan"
                    )
            )
        )(device, pReleaseInfo);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleaseSwapchainImagesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkReleaseSwapchainImagesInfoKHR *")]
            ReleaseSwapchainImagesInfoKHR* pReleaseInfo
    ) => ThisThread.ReleaseSwapchainImagesKHR(device, pReleaseInfo);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ReleaseSwapchainImagesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkReleaseSwapchainImagesInfoKHR *")]
            Ref<ReleaseSwapchainImagesInfoKHR> pReleaseInfo
    )
    {
        fixed (ReleaseSwapchainImagesInfoKHR* __dsl_pReleaseInfo = pReleaseInfo)
        {
            return (Result)((IVk)this).ReleaseSwapchainImagesKHR(device, __dsl_pReleaseInfo);
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleaseSwapchainImagesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkReleaseSwapchainImagesInfoKHR *")]
            Ref<ReleaseSwapchainImagesInfoKHR> pReleaseInfo
    ) => ThisThread.ReleaseSwapchainImagesKHR(device, pReleaseInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetCommandBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ResetCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkCommandBufferResetFlags")] CommandBufferResetFlags flags
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle, CommandBufferResetFlags, Result>)(
                _slots[655] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[655] = nativeContext.LoadFunction("vkResetCommandBuffer", "vulkan")
            )
        )(commandBuffer, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetCommandBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle commandBuffer,
        [NativeTypeName("VkCommandBufferResetFlags")] CommandBufferResetFlags flags
    ) => ThisThread.ResetCommandBuffer(commandBuffer, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ResetCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("VkCommandPoolResetFlags")] CommandPoolResetFlags flags
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, CommandPoolHandle, CommandPoolResetFlags, Result>)(
                _slots[656] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[656] = nativeContext.LoadFunction("vkResetCommandPool", "vulkan")
            )
        )(device, commandPool, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("VkCommandPoolResetFlags")] CommandPoolResetFlags flags
    ) => ThisThread.ResetCommandPool(device, commandPool, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ResetDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
        [NativeTypeName("VkDescriptorPoolResetFlags")] uint flags
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DescriptorPoolHandle, uint, Result>)(
                _slots[657] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[657] = nativeContext.LoadFunction("vkResetDescriptorPool", "vulkan")
            )
        )(device, descriptorPool, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle descriptorPool,
        [NativeTypeName("VkDescriptorPoolResetFlags")] uint flags
    ) => ThisThread.ResetDescriptorPool(device, descriptorPool, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ResetEvent(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkEvent")] EventHandle @event
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, EventHandle, Result>)(
                _slots[658] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[658] = nativeContext.LoadFunction("vkResetEvent", "vulkan")
            )
        )(device, @event);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetEvent(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkEvent")] EventHandle @event
    ) => ThisThread.ResetEvent(device, @event);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetFences")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ResetFences(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] FenceHandle* pFences
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, FenceHandle*, Result>)(
                _slots[659] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[659] = nativeContext.LoadFunction("vkResetFences", "vulkan")
            )
        )(device, fenceCount, pFences);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetFences")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetFences(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] FenceHandle* pFences
    ) => ThisThread.ResetFences(device, fenceCount, pFences);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkResetFences")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.ResetFences(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] Ref<FenceHandle> pFences
    )
    {
        fixed (FenceHandle* __dsl_pFences = pFences)
        {
            return (Result)((IVk)this).ResetFences(device, fenceCount, __dsl_pFences);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkResetFences")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetFences(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] Ref<FenceHandle> pFences
    ) => ThisThread.ResetFences(device, fenceCount, pFences);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.ResetQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, QueryPoolHandle, uint, uint, void>)(
                _slots[660] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[660] = nativeContext.LoadFunction("vkResetQueryPool", "vulkan")
            )
        )(device, queryPool, firstQuery, queryCount);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ResetQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) => ThisThread.ResetQueryPool(device, queryPool, firstQuery, queryCount);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_query_reset"],
        ImpliesSets = [
            "VK_EXT_host_query_reset+VK_KHR_get_physical_device_properties2",
            "VK_EXT_host_query_reset+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetQueryPoolEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.ResetQueryPoolEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, QueryPoolHandle, uint, uint, void>)(
                _slots[661] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[661] = nativeContext.LoadFunction("vkResetQueryPoolEXT", "vulkan")
            )
        )(device, queryPool, firstQuery, queryCount);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_query_reset"],
        ImpliesSets = [
            "VK_EXT_host_query_reset+VK_KHR_get_physical_device_properties2",
            "VK_EXT_host_query_reset+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetQueryPoolEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ResetQueryPoolEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) => ThisThread.ResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectNameEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.SetDebugUtilsObjectNameEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugUtilsObjectNameInfoEXT *")]
            DebugUtilsObjectNameInfoEXT* pNameInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DebugUtilsObjectNameInfoEXT*, Result>)(
                _slots[662] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[662] = nativeContext.LoadFunction(
                        "vkSetDebugUtilsObjectNameEXT",
                        "vulkan"
                    )
            )
        )(device, pNameInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectNameEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetDebugUtilsObjectNameEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugUtilsObjectNameInfoEXT *")]
            DebugUtilsObjectNameInfoEXT* pNameInfo
    ) => ThisThread.SetDebugUtilsObjectNameEXT(device, pNameInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectNameEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.SetDebugUtilsObjectNameEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugUtilsObjectNameInfoEXT *")]
            Ref<DebugUtilsObjectNameInfoEXT> pNameInfo
    )
    {
        fixed (DebugUtilsObjectNameInfoEXT* __dsl_pNameInfo = pNameInfo)
        {
            return (Result)((IVk)this).SetDebugUtilsObjectNameEXT(device, __dsl_pNameInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectNameEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetDebugUtilsObjectNameEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugUtilsObjectNameInfoEXT *")]
            Ref<DebugUtilsObjectNameInfoEXT> pNameInfo
    ) => ThisThread.SetDebugUtilsObjectNameEXT(device, pNameInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectTagEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.SetDebugUtilsObjectTagEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugUtilsObjectTagInfoEXT *")]
            DebugUtilsObjectTagInfoEXT* pTagInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DebugUtilsObjectTagInfoEXT*, Result>)(
                _slots[663] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[663] = nativeContext.LoadFunction(
                        "vkSetDebugUtilsObjectTagEXT",
                        "vulkan"
                    )
            )
        )(device, pTagInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectTagEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetDebugUtilsObjectTagEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugUtilsObjectTagInfoEXT *")]
            DebugUtilsObjectTagInfoEXT* pTagInfo
    ) => ThisThread.SetDebugUtilsObjectTagEXT(device, pTagInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectTagEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.SetDebugUtilsObjectTagEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugUtilsObjectTagInfoEXT *")]
            Ref<DebugUtilsObjectTagInfoEXT> pTagInfo
    )
    {
        fixed (DebugUtilsObjectTagInfoEXT* __dsl_pTagInfo = pTagInfo)
        {
            return (Result)((IVk)this).SetDebugUtilsObjectTagEXT(device, __dsl_pTagInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectTagEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetDebugUtilsObjectTagEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkDebugUtilsObjectTagInfoEXT *")]
            Ref<DebugUtilsObjectTagInfoEXT> pTagInfo
    ) => ThisThread.SetDebugUtilsObjectTagEXT(device, pTagInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pageable_device_local_memory"],
        ImpliesSets = ["VK_EXT_memory_priority"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetDeviceMemoryPriorityEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.SetDeviceMemoryPriorityEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        float priority
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DeviceMemoryHandle, float, void>)(
                _slots[664] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[664] = nativeContext.LoadFunction(
                        "vkSetDeviceMemoryPriorityEXT",
                        "vulkan"
                    )
            )
        )(device, memory, priority);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pageable_device_local_memory"],
        ImpliesSets = ["VK_EXT_memory_priority"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetDeviceMemoryPriorityEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetDeviceMemoryPriorityEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory,
        float priority
    ) => ThisThread.SetDeviceMemoryPriorityEXT(device, memory, priority);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.SetEvent(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkEvent")] EventHandle @event
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, EventHandle, Result>)(
                _slots[665] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[665] = nativeContext.LoadFunction("vkSetEvent", "vulkan")
            )
        )(device, @event);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetEvent(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkEvent")] EventHandle @event
    ) => ThisThread.SetEvent(device, @event);

    [SupportedApiProfile("vulkan", ["VK_EXT_hdr_metadata"], ImpliesSets = ["VK_KHR_swapchain"])]
    [NativeFunction("vulkan", EntryPoint = "vkSetHdrMetadataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.SetHdrMetadataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainKHR *")] SwapchainKHRHandle* pSwapchains,
        [NativeTypeName("const VkHdrMetadataEXT *")] HdrMetadataEXT* pMetadata
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, SwapchainKHRHandle*, HdrMetadataEXT*, void>)(
                _slots[666] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[666] = nativeContext.LoadFunction("vkSetHdrMetadataEXT", "vulkan")
            )
        )(device, swapchainCount, pSwapchains, pMetadata);

    [SupportedApiProfile("vulkan", ["VK_EXT_hdr_metadata"], ImpliesSets = ["VK_KHR_swapchain"])]
    [NativeFunction("vulkan", EntryPoint = "vkSetHdrMetadataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetHdrMetadataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainKHR *")] SwapchainKHRHandle* pSwapchains,
        [NativeTypeName("const VkHdrMetadataEXT *")] HdrMetadataEXT* pMetadata
    ) => ThisThread.SetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);

    [SupportedApiProfile("vulkan", ["VK_EXT_hdr_metadata"], ImpliesSets = ["VK_KHR_swapchain"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetHdrMetadataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.SetHdrMetadataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainKHR *")] Ref<SwapchainKHRHandle> pSwapchains,
        [NativeTypeName("const VkHdrMetadataEXT *")] Ref<HdrMetadataEXT> pMetadata
    )
    {
        fixed (HdrMetadataEXT* __dsl_pMetadata = pMetadata)
        fixed (SwapchainKHRHandle* __dsl_pSwapchains = pSwapchains)
        {
            ((IVk)this).SetHdrMetadataEXT(
                device,
                swapchainCount,
                __dsl_pSwapchains,
                __dsl_pMetadata
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_hdr_metadata"], ImpliesSets = ["VK_KHR_swapchain"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetHdrMetadataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetHdrMetadataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainKHR *")] Ref<SwapchainKHRHandle> pSwapchains,
        [NativeTypeName("const VkHdrMetadataEXT *")] Ref<HdrMetadataEXT> pMetadata
    ) => ThisThread.SetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetLatencyMarkerNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.SetLatencyMarkerNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkSetLatencyMarkerInfoNV *")]
            SetLatencyMarkerInfoNV* pLatencyMarkerInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SwapchainKHRHandle, SetLatencyMarkerInfoNV*, void>)(
                _slots[667] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[667] = nativeContext.LoadFunction("vkSetLatencyMarkerNV", "vulkan")
            )
        )(device, swapchain, pLatencyMarkerInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetLatencyMarkerNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetLatencyMarkerNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkSetLatencyMarkerInfoNV *")]
            SetLatencyMarkerInfoNV* pLatencyMarkerInfo
    ) => ThisThread.SetLatencyMarkerNV(device, swapchain, pLatencyMarkerInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetLatencyMarkerNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.SetLatencyMarkerNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkSetLatencyMarkerInfoNV *")]
            Ref<SetLatencyMarkerInfoNV> pLatencyMarkerInfo
    )
    {
        fixed (SetLatencyMarkerInfoNV* __dsl_pLatencyMarkerInfo = pLatencyMarkerInfo)
        {
            ((IVk)this).SetLatencyMarkerNV(device, swapchain, __dsl_pLatencyMarkerInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetLatencyMarkerNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetLatencyMarkerNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkSetLatencyMarkerInfoNV *")]
            Ref<SetLatencyMarkerInfoNV> pLatencyMarkerInfo
    ) => ThisThread.SetLatencyMarkerNV(device, swapchain, pLatencyMarkerInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetLatencySleepModeNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.SetLatencySleepModeNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkLatencySleepModeInfoNV *")] LatencySleepModeInfoNV* pSleepModeInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                SwapchainKHRHandle,
                LatencySleepModeInfoNV*,
                Result>)(
                _slots[668] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[668] = nativeContext.LoadFunction("vkSetLatencySleepModeNV", "vulkan")
            )
        )(device, swapchain, pSleepModeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetLatencySleepModeNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetLatencySleepModeNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkLatencySleepModeInfoNV *")] LatencySleepModeInfoNV* pSleepModeInfo
    ) => ThisThread.SetLatencySleepModeNV(device, swapchain, pSleepModeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetLatencySleepModeNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.SetLatencySleepModeNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkLatencySleepModeInfoNV *")]
            Ref<LatencySleepModeInfoNV> pSleepModeInfo
    )
    {
        fixed (LatencySleepModeInfoNV* __dsl_pSleepModeInfo = pSleepModeInfo)
        {
            return (Result)
                ((IVk)this).SetLatencySleepModeNV(device, swapchain, __dsl_pSleepModeInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetLatencySleepModeNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetLatencySleepModeNV(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkLatencySleepModeInfoNV *")]
            Ref<LatencySleepModeInfoNV> pSleepModeInfo
    ) => ThisThread.SetLatencySleepModeNV(device, swapchain, pSleepModeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_display_native_hdr"],
        ImpliesSets = [
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetLocalDimmingAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.SetLocalDimmingAMD(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapChain,
        [NativeTypeName("VkBool32")] MaybeBool<uint> localDimmingEnable
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SwapchainKHRHandle, MaybeBool<uint>, void>)(
                _slots[669] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[669] = nativeContext.LoadFunction("vkSetLocalDimmingAMD", "vulkan")
            )
        )(device, swapChain, localDimmingEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_display_native_hdr"],
        ImpliesSets = [
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetLocalDimmingAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetLocalDimmingAMD(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapChain,
        [NativeTypeName("VkBool32")] MaybeBool<uint> localDimmingEnable
    ) => ThisThread.SetLocalDimmingAMD(device, swapChain, localDimmingEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkSetPrivateData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.SetPrivateData(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("uint64_t")] ulong data
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ObjectType,
                ulong,
                PrivateDataSlotHandle,
                ulong,
                Result>)(
                _slots[670] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[670] = nativeContext.LoadFunction("vkSetPrivateData", "vulkan")
            )
        )(device, objectType, objectHandle, privateDataSlot, data);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkSetPrivateData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetPrivateData(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("uint64_t")] ulong data
    ) => ThisThread.SetPrivateData(device, objectType, objectHandle, privateDataSlot, data);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetPrivateDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.SetPrivateDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("uint64_t")] ulong data
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                ObjectType,
                ulong,
                PrivateDataSlotHandle,
                ulong,
                Result>)(
                _slots[671] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[671] = nativeContext.LoadFunction("vkSetPrivateDataEXT", "vulkan")
            )
        )(device, objectType, objectHandle, privateDataSlot, data);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetPrivateDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetPrivateDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle privateDataSlot,
        [NativeTypeName("uint64_t")] ulong data
    ) => ThisThread.SetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.SignalSemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] SemaphoreSignalInfo* pSignalInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SemaphoreSignalInfo*, Result>)(
                _slots[672] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[672] = nativeContext.LoadFunction("vkSignalSemaphore", "vulkan")
            )
        )(device, pSignalInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SignalSemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] SemaphoreSignalInfo* pSignalInfo
    ) => ThisThread.SignalSemaphore(device, pSignalInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.SignalSemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] Ref<SemaphoreSignalInfo> pSignalInfo
    )
    {
        fixed (SemaphoreSignalInfo* __dsl_pSignalInfo = pSignalInfo)
        {
            return (Result)((IVk)this).SignalSemaphore(device, __dsl_pSignalInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SignalSemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] Ref<SemaphoreSignalInfo> pSignalInfo
    ) => ThisThread.SignalSemaphore(device, pSignalInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphoreKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.SignalSemaphoreKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] SemaphoreSignalInfo* pSignalInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SemaphoreSignalInfo*, Result>)(
                _slots[673] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[673] = nativeContext.LoadFunction("vkSignalSemaphoreKHR", "vulkan")
            )
        )(device, pSignalInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphoreKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SignalSemaphoreKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] SemaphoreSignalInfo* pSignalInfo
    ) => ThisThread.SignalSemaphoreKHR(device, pSignalInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphoreKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.SignalSemaphoreKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] Ref<SemaphoreSignalInfo> pSignalInfo
    )
    {
        fixed (SemaphoreSignalInfo* __dsl_pSignalInfo = pSignalInfo)
        {
            return (Result)((IVk)this).SignalSemaphoreKHR(device, __dsl_pSignalInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphoreKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SignalSemaphoreKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] Ref<SemaphoreSignalInfo> pSignalInfo
    ) => ThisThread.SignalSemaphoreKHR(device, pSignalInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkSubmitDebugUtilsMessageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.SubmitDebugUtilsMessageEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        DebugUtilsMessageSeverityFlagsEXT messageSeverity,
        [NativeTypeName("VkDebugUtilsMessageTypeFlagsEXT")]
            DebugUtilsMessageTypeFlagsEXT messageTypes,
        [NativeTypeName("const VkDebugUtilsMessengerCallbackDataEXT *")]
            DebugUtilsMessengerCallbackDataEXT* pCallbackData
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle,
                DebugUtilsMessageSeverityFlagsEXT,
                DebugUtilsMessageTypeFlagsEXT,
                DebugUtilsMessengerCallbackDataEXT*,
                void>)(
                _slots[674] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[674] = nativeContext.LoadFunction(
                        "vkSubmitDebugUtilsMessageEXT",
                        "vulkan"
                    )
            )
        )(instance, messageSeverity, messageTypes, pCallbackData);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkSubmitDebugUtilsMessageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SubmitDebugUtilsMessageEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        DebugUtilsMessageSeverityFlagsEXT messageSeverity,
        [NativeTypeName("VkDebugUtilsMessageTypeFlagsEXT")]
            DebugUtilsMessageTypeFlagsEXT messageTypes,
        [NativeTypeName("const VkDebugUtilsMessengerCallbackDataEXT *")]
            DebugUtilsMessengerCallbackDataEXT* pCallbackData
    ) =>
        ThisThread.SubmitDebugUtilsMessageEXT(
            instance,
            messageSeverity,
            messageTypes,
            pCallbackData
        );

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSubmitDebugUtilsMessageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.SubmitDebugUtilsMessageEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        DebugUtilsMessageSeverityFlagsEXT messageSeverity,
        [NativeTypeName("VkDebugUtilsMessageTypeFlagsEXT")]
            DebugUtilsMessageTypeFlagsEXT messageTypes,
        [NativeTypeName("const VkDebugUtilsMessengerCallbackDataEXT *")]
            Ref<DebugUtilsMessengerCallbackDataEXT> pCallbackData
    )
    {
        fixed (DebugUtilsMessengerCallbackDataEXT* __dsl_pCallbackData = pCallbackData)
        {
            ((IVk)this).SubmitDebugUtilsMessageEXT(
                instance,
                messageSeverity,
                messageTypes,
                __dsl_pCallbackData
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSubmitDebugUtilsMessageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SubmitDebugUtilsMessageEXT(
        [NativeTypeName("VkInstance")] InstanceHandle instance,
        DebugUtilsMessageSeverityFlagsEXT messageSeverity,
        [NativeTypeName("VkDebugUtilsMessageTypeFlagsEXT")]
            DebugUtilsMessageTypeFlagsEXT messageTypes,
        [NativeTypeName("const VkDebugUtilsMessengerCallbackDataEXT *")]
            Ref<DebugUtilsMessengerCallbackDataEXT> pCallbackData
    ) =>
        ThisThread.SubmitDebugUtilsMessageEXT(
            instance,
            messageSeverity,
            messageTypes,
            pCallbackData
        );

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.TransitionImageLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            HostImageLayoutTransitionInfo* pTransitions
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, HostImageLayoutTransitionInfo*, Result>)(
                _slots[675] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[675] = nativeContext.LoadFunction("vkTransitionImageLayout", "vulkan")
            )
        )(device, transitionCount, pTransitions);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result TransitionImageLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            HostImageLayoutTransitionInfo* pTransitions
    ) => ThisThread.TransitionImageLayout(device, transitionCount, pTransitions);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.TransitionImageLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            Ref<HostImageLayoutTransitionInfo> pTransitions
    )
    {
        fixed (HostImageLayoutTransitionInfo* __dsl_pTransitions = pTransitions)
        {
            return (Result)
                ((IVk)this).TransitionImageLayout(device, transitionCount, __dsl_pTransitions);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result TransitionImageLayout(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            Ref<HostImageLayoutTransitionInfo> pTransitions
    ) => ThisThread.TransitionImageLayout(device, transitionCount, pTransitions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.TransitionImageLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            HostImageLayoutTransitionInfo* pTransitions
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, HostImageLayoutTransitionInfo*, Result>)(
                _slots[676] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[676] = nativeContext.LoadFunction(
                        "vkTransitionImageLayoutEXT",
                        "vulkan"
                    )
            )
        )(device, transitionCount, pTransitions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result TransitionImageLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            HostImageLayoutTransitionInfo* pTransitions
    ) => ThisThread.TransitionImageLayoutEXT(device, transitionCount, pTransitions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.TransitionImageLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            Ref<HostImageLayoutTransitionInfo> pTransitions
    )
    {
        fixed (HostImageLayoutTransitionInfo* __dsl_pTransitions = pTransitions)
        {
            return (Result)
                ((IVk)this).TransitionImageLayoutEXT(device, transitionCount, __dsl_pTransitions);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result TransitionImageLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            Ref<HostImageLayoutTransitionInfo> pTransitions
    ) => ThisThread.TransitionImageLayoutEXT(device, transitionCount, pTransitions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkTrimCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.TrimCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, CommandPoolHandle, uint, void>)(
                _slots[677] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[677] = nativeContext.LoadFunction("vkTrimCommandPool", "vulkan")
            )
        )(device, commandPool, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkTrimCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void TrimCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
    ) => ThisThread.TrimCommandPool(device, commandPool, flags);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance1"])]
    [NativeFunction("vulkan", EntryPoint = "vkTrimCommandPoolKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.TrimCommandPoolKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, CommandPoolHandle, uint, void>)(
                _slots[678] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[678] = nativeContext.LoadFunction("vkTrimCommandPoolKHR", "vulkan")
            )
        )(device, commandPool, flags);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance1"])]
    [NativeFunction("vulkan", EntryPoint = "vkTrimCommandPoolKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void TrimCommandPoolKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle commandPool,
        [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
    ) => ThisThread.TrimCommandPoolKHR(device, commandPool, flags);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkUninitializePerformanceApiINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.UninitializePerformanceApiIntel([NativeTypeName("VkDevice")] DeviceHandle device) =>
        (
            (delegate* unmanaged<DeviceHandle, void>)(
                _slots[679] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[679] = nativeContext.LoadFunction(
                        "vkUninitializePerformanceApiINTEL",
                        "vulkan"
                    )
            )
        )(device);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkUninitializePerformanceApiINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UninitializePerformanceApiIntel(
        [NativeTypeName("VkDevice")] DeviceHandle device
    ) => ThisThread.UninitializePerformanceApiIntel(device);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.UnmapMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, DeviceMemoryHandle, void>)(
                _slots[680] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[680] = nativeContext.LoadFunction("vkUnmapMemory", "vulkan")
            )
        )(device, memory);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnmapMemory(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle memory
    ) => ThisThread.UnmapMemory(device, memory);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.UnmapMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] MemoryUnmapInfo* pMemoryUnmapInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, MemoryUnmapInfo*, Result>)(
                _slots[681] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[681] = nativeContext.LoadFunction("vkUnmapMemory2", "vulkan")
            )
        )(device, pMemoryUnmapInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result UnmapMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] MemoryUnmapInfo* pMemoryUnmapInfo
    ) => ThisThread.UnmapMemory2(device, pMemoryUnmapInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.UnmapMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] Ref<MemoryUnmapInfo> pMemoryUnmapInfo
    )
    {
        fixed (MemoryUnmapInfo* __dsl_pMemoryUnmapInfo = pMemoryUnmapInfo)
        {
            return (Result)((IVk)this).UnmapMemory2(device, __dsl_pMemoryUnmapInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result UnmapMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] Ref<MemoryUnmapInfo> pMemoryUnmapInfo
    ) => ThisThread.UnmapMemory2(device, pMemoryUnmapInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.UnmapMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] MemoryUnmapInfo* pMemoryUnmapInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, MemoryUnmapInfo*, Result>)(
                _slots[682] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[682] = nativeContext.LoadFunction("vkUnmapMemory2KHR", "vulkan")
            )
        )(device, pMemoryUnmapInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result UnmapMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] MemoryUnmapInfo* pMemoryUnmapInfo
    ) => ThisThread.UnmapMemory2KHR(device, pMemoryUnmapInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.UnmapMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] Ref<MemoryUnmapInfo> pMemoryUnmapInfo
    )
    {
        fixed (MemoryUnmapInfo* __dsl_pMemoryUnmapInfo = pMemoryUnmapInfo)
        {
            return (Result)((IVk)this).UnmapMemory2KHR(device, __dsl_pMemoryUnmapInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result UnmapMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] Ref<MemoryUnmapInfo> pMemoryUnmapInfo
    ) => ThisThread.UnmapMemory2KHR(device, pMemoryUnmapInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.UpdateDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites,
        [NativeTypeName("uint32_t")] uint descriptorCopyCount,
        [NativeTypeName("const VkCopyDescriptorSet *")] CopyDescriptorSet* pDescriptorCopies
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                uint,
                WriteDescriptorSet*,
                uint,
                CopyDescriptorSet*,
                void>)(
                _slots[683] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[683] = nativeContext.LoadFunction("vkUpdateDescriptorSets", "vulkan")
            )
        )(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites,
        [NativeTypeName("uint32_t")] uint descriptorCopyCount,
        [NativeTypeName("const VkCopyDescriptorSet *")] CopyDescriptorSet* pDescriptorCopies
    ) =>
        ThisThread.UpdateDescriptorSets(
            device,
            descriptorWriteCount,
            pDescriptorWrites,
            descriptorCopyCount,
            pDescriptorCopies
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.UpdateDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] Ref<WriteDescriptorSet> pDescriptorWrites,
        [NativeTypeName("uint32_t")] uint descriptorCopyCount,
        [NativeTypeName("const VkCopyDescriptorSet *")] Ref<CopyDescriptorSet> pDescriptorCopies
    )
    {
        fixed (CopyDescriptorSet* __dsl_pDescriptorCopies = pDescriptorCopies)
        fixed (WriteDescriptorSet* __dsl_pDescriptorWrites = pDescriptorWrites)
        {
            ((IVk)this).UpdateDescriptorSets(
                device,
                descriptorWriteCount,
                __dsl_pDescriptorWrites,
                descriptorCopyCount,
                __dsl_pDescriptorCopies
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] Ref<WriteDescriptorSet> pDescriptorWrites,
        [NativeTypeName("uint32_t")] uint descriptorCopyCount,
        [NativeTypeName("const VkCopyDescriptorSet *")] Ref<CopyDescriptorSet> pDescriptorCopies
    ) =>
        ThisThread.UpdateDescriptorSets(
            device,
            descriptorWriteCount,
            pDescriptorWrites,
            descriptorCopyCount,
            pDescriptorCopies
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.UpdateDescriptorSetWithTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const void *")] void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DescriptorSetHandle,
                DescriptorUpdateTemplateHandle,
                void*,
                void>)(
                _slots[684] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[684] = nativeContext.LoadFunction(
                        "vkUpdateDescriptorSetWithTemplate",
                        "vulkan"
                    )
            )
        )(device, descriptorSet, descriptorUpdateTemplate, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateDescriptorSetWithTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const void *")] void* pData
    ) =>
        ThisThread.UpdateDescriptorSetWithTemplate(
            device,
            descriptorSet,
            descriptorUpdateTemplate,
            pData
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.UpdateDescriptorSetWithTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const void *")] Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        {
            ((IVk)this).UpdateDescriptorSetWithTemplate(
                device,
                descriptorSet,
                descriptorUpdateTemplate,
                __dsl_pData
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateDescriptorSetWithTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const void *")] Ref pData
    ) =>
        ThisThread.UpdateDescriptorSetWithTemplate(
            device,
            descriptorSet,
            descriptorUpdateTemplate,
            pData
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.UpdateDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const void *")] void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                DescriptorSetHandle,
                DescriptorUpdateTemplateHandle,
                void*,
                void>)(
                _slots[685] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[685] = nativeContext.LoadFunction(
                        "vkUpdateDescriptorSetWithTemplateKHR",
                        "vulkan"
                    )
            )
        )(device, descriptorSet, descriptorUpdateTemplate, pData);

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const void *")] void* pData
    ) =>
        ThisThread.UpdateDescriptorSetWithTemplateKHR(
            device,
            descriptorSet,
            descriptorUpdateTemplate,
            pData
        );

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.UpdateDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const void *")] Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        {
            ((IVk)this).UpdateDescriptorSetWithTemplateKHR(
                device,
                descriptorSet,
                descriptorUpdateTemplate,
                __dsl_pData
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle descriptorUpdateTemplate,
        [NativeTypeName("const void *")] Ref pData
    ) =>
        ThisThread.UpdateDescriptorSetWithTemplateKHR(
            device,
            descriptorSet,
            descriptorUpdateTemplate,
            pData
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.UpdateIndirectExecutionSetPipelineEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
            WriteIndirectExecutionSetPipelineEXT* pExecutionSetWrites
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                IndirectExecutionSetEXTHandle,
                uint,
                WriteIndirectExecutionSetPipelineEXT*,
                void>)(
                _slots[686] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[686] = nativeContext.LoadFunction(
                        "vkUpdateIndirectExecutionSetPipelineEXT",
                        "vulkan"
                    )
            )
        )(device, indirectExecutionSet, executionSetWriteCount, pExecutionSetWrites);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateIndirectExecutionSetPipelineEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
            WriteIndirectExecutionSetPipelineEXT* pExecutionSetWrites
    ) =>
        ThisThread.UpdateIndirectExecutionSetPipelineEXT(
            device,
            indirectExecutionSet,
            executionSetWriteCount,
            pExecutionSetWrites
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.UpdateIndirectExecutionSetPipelineEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
            Ref<WriteIndirectExecutionSetPipelineEXT> pExecutionSetWrites
    )
    {
        fixed (
            WriteIndirectExecutionSetPipelineEXT* __dsl_pExecutionSetWrites = pExecutionSetWrites
        )
        {
            ((IVk)this).UpdateIndirectExecutionSetPipelineEXT(
                device,
                indirectExecutionSet,
                executionSetWriteCount,
                __dsl_pExecutionSetWrites
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateIndirectExecutionSetPipelineEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
            Ref<WriteIndirectExecutionSetPipelineEXT> pExecutionSetWrites
    ) =>
        ThisThread.UpdateIndirectExecutionSetPipelineEXT(
            device,
            indirectExecutionSet,
            executionSetWriteCount,
            pExecutionSetWrites
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.UpdateIndirectExecutionSetPipelineEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
            WriteIndirectExecutionSetPipelineEXT pExecutionSetWrites
    ) =>
        ((IVk)this).UpdateIndirectExecutionSetPipelineEXT(
            device,
            indirectExecutionSet,
            1,
            (WriteIndirectExecutionSetPipelineEXT*)&pExecutionSetWrites
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateIndirectExecutionSetPipelineEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
            WriteIndirectExecutionSetPipelineEXT pExecutionSetWrites
    ) =>
        ThisThread.UpdateIndirectExecutionSetPipelineEXT(
            device,
            indirectExecutionSet,
            pExecutionSetWrites
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.UpdateIndirectExecutionSetShaderEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
            WriteIndirectExecutionSetShaderEXT* pExecutionSetWrites
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                IndirectExecutionSetEXTHandle,
                uint,
                WriteIndirectExecutionSetShaderEXT*,
                void>)(
                _slots[687] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[687] = nativeContext.LoadFunction(
                        "vkUpdateIndirectExecutionSetShaderEXT",
                        "vulkan"
                    )
            )
        )(device, indirectExecutionSet, executionSetWriteCount, pExecutionSetWrites);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateIndirectExecutionSetShaderEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
            WriteIndirectExecutionSetShaderEXT* pExecutionSetWrites
    ) =>
        ThisThread.UpdateIndirectExecutionSetShaderEXT(
            device,
            indirectExecutionSet,
            executionSetWriteCount,
            pExecutionSetWrites
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.UpdateIndirectExecutionSetShaderEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
            Ref<WriteIndirectExecutionSetShaderEXT> pExecutionSetWrites
    )
    {
        fixed (WriteIndirectExecutionSetShaderEXT* __dsl_pExecutionSetWrites = pExecutionSetWrites)
        {
            ((IVk)this).UpdateIndirectExecutionSetShaderEXT(
                device,
                indirectExecutionSet,
                executionSetWriteCount,
                __dsl_pExecutionSetWrites
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateIndirectExecutionSetShaderEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
            Ref<WriteIndirectExecutionSetShaderEXT> pExecutionSetWrites
    ) =>
        ThisThread.UpdateIndirectExecutionSetShaderEXT(
            device,
            indirectExecutionSet,
            executionSetWriteCount,
            pExecutionSetWrites
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVk.UpdateIndirectExecutionSetShaderEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
            WriteIndirectExecutionSetShaderEXT pExecutionSetWrites
    ) =>
        ((IVk)this).UpdateIndirectExecutionSetShaderEXT(
            device,
            indirectExecutionSet,
            1,
            (WriteIndirectExecutionSetShaderEXT*)&pExecutionSetWrites
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateIndirectExecutionSetShaderEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle indirectExecutionSet,
        [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
            WriteIndirectExecutionSetShaderEXT pExecutionSetWrites
    ) =>
        ThisThread.UpdateIndirectExecutionSetShaderEXT(
            device,
            indirectExecutionSet,
            pExecutionSetWrites
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.UpdateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            VideoSessionParametersKHRHandle videoSessionParameters,
        [NativeTypeName("const VkVideoSessionParametersUpdateInfoKHR *")]
            VideoSessionParametersUpdateInfoKHR* pUpdateInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                VideoSessionParametersKHRHandle,
                VideoSessionParametersUpdateInfoKHR*,
                Result>)(
                _slots[688] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[688] = nativeContext.LoadFunction(
                        "vkUpdateVideoSessionParametersKHR",
                        "vulkan"
                    )
            )
        )(device, videoSessionParameters, pUpdateInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result UpdateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            VideoSessionParametersKHRHandle videoSessionParameters,
        [NativeTypeName("const VkVideoSessionParametersUpdateInfoKHR *")]
            VideoSessionParametersUpdateInfoKHR* pUpdateInfo
    ) => ThisThread.UpdateVideoSessionParametersKHR(device, videoSessionParameters, pUpdateInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.UpdateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            VideoSessionParametersKHRHandle videoSessionParameters,
        [NativeTypeName("const VkVideoSessionParametersUpdateInfoKHR *")]
            Ref<VideoSessionParametersUpdateInfoKHR> pUpdateInfo
    )
    {
        fixed (VideoSessionParametersUpdateInfoKHR* __dsl_pUpdateInfo = pUpdateInfo)
        {
            return (Result)
                ((IVk)this).UpdateVideoSessionParametersKHR(
                    device,
                    videoSessionParameters,
                    __dsl_pUpdateInfo
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result UpdateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            VideoSessionParametersKHRHandle videoSessionParameters,
        [NativeTypeName("const VkVideoSessionParametersUpdateInfoKHR *")]
            Ref<VideoSessionParametersUpdateInfoKHR> pUpdateInfo
    ) => ThisThread.UpdateVideoSessionParametersKHR(device, videoSessionParameters, pUpdateInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWaitForFences")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.WaitForFences(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] FenceHandle* pFences,
        [NativeTypeName("VkBool32")] MaybeBool<uint> waitAll,
        [NativeTypeName("uint64_t")] ulong timeout
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, uint, FenceHandle*, MaybeBool<uint>, ulong, Result>)(
                _slots[689] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[689] = nativeContext.LoadFunction("vkWaitForFences", "vulkan")
            )
        )(device, fenceCount, pFences, waitAll, timeout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWaitForFences")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitForFences(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] FenceHandle* pFences,
        [NativeTypeName("VkBool32")] MaybeBool<uint> waitAll,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => ThisThread.WaitForFences(device, fenceCount, pFences, waitAll, timeout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWaitForFences")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.WaitForFences(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] Ref<FenceHandle> pFences,
        [NativeTypeName("VkBool32")] MaybeBool<uint> waitAll,
        [NativeTypeName("uint64_t")] ulong timeout
    )
    {
        fixed (FenceHandle* __dsl_pFences = pFences)
        {
            return (Result)
                ((IVk)this).WaitForFences(device, fenceCount, __dsl_pFences, waitAll, timeout);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWaitForFences")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitForFences(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] Ref<FenceHandle> pFences,
        [NativeTypeName("VkBool32")] MaybeBool<uint> waitAll,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => ThisThread.WaitForFences(device, fenceCount, pFences, waitAll, timeout);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkWaitForPresent2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.WaitForPresent2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkPresentWait2InfoKHR *")] PresentWait2InfoKHR* pPresentWait2Info
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SwapchainKHRHandle, PresentWait2InfoKHR*, Result>)(
                _slots[690] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[690] = nativeContext.LoadFunction("vkWaitForPresent2KHR", "vulkan")
            )
        )(device, swapchain, pPresentWait2Info);

    [SupportedApiProfile("vulkan")]
    [NativeFunction("vulkan", EntryPoint = "vkWaitForPresent2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitForPresent2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkPresentWait2InfoKHR *")] PresentWait2InfoKHR* pPresentWait2Info
    ) => ThisThread.WaitForPresent2KHR(device, swapchain, pPresentWait2Info);

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWaitForPresent2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.WaitForPresent2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkPresentWait2InfoKHR *")] Ref<PresentWait2InfoKHR> pPresentWait2Info
    )
    {
        fixed (PresentWait2InfoKHR* __dsl_pPresentWait2Info = pPresentWait2Info)
        {
            return (Result)
                ((IVk)this).WaitForPresent2KHR(device, swapchain, __dsl_pPresentWait2Info);
        }
    }

    [SupportedApiProfile("vulkan")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWaitForPresent2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitForPresent2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("const VkPresentWait2InfoKHR *")] Ref<PresentWait2InfoKHR> pPresentWait2Info
    ) => ThisThread.WaitForPresent2KHR(device, swapchain, pPresentWait2Info);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_present_wait"],
        ImpliesSets = ["VK_KHR_present_id", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWaitForPresentKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.WaitForPresentKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("uint64_t")] ulong presentId,
        [NativeTypeName("uint64_t")] ulong timeout
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SwapchainKHRHandle, ulong, ulong, Result>)(
                _slots[691] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[691] = nativeContext.LoadFunction("vkWaitForPresentKHR", "vulkan")
            )
        )(device, swapchain, presentId, timeout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_present_wait"],
        ImpliesSets = ["VK_KHR_present_id", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWaitForPresentKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitForPresentKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle swapchain,
        [NativeTypeName("uint64_t")] ulong presentId,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => ThisThread.WaitForPresentKHR(device, swapchain, presentId, timeout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphores")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.WaitSemaphores(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] SemaphoreWaitInfo* pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SemaphoreWaitInfo*, ulong, Result>)(
                _slots[692] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[692] = nativeContext.LoadFunction("vkWaitSemaphores", "vulkan")
            )
        )(device, pWaitInfo, timeout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphores")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitSemaphores(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] SemaphoreWaitInfo* pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => ThisThread.WaitSemaphores(device, pWaitInfo, timeout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphores")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.WaitSemaphores(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] Ref<SemaphoreWaitInfo> pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    )
    {
        fixed (SemaphoreWaitInfo* __dsl_pWaitInfo = pWaitInfo)
        {
            return (Result)((IVk)this).WaitSemaphores(device, __dsl_pWaitInfo, timeout);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphores")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitSemaphores(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] Ref<SemaphoreWaitInfo> pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => ThisThread.WaitSemaphores(device, pWaitInfo, timeout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphoresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.WaitSemaphoresKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] SemaphoreWaitInfo* pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    ) =>
        (
            (delegate* unmanaged<DeviceHandle, SemaphoreWaitInfo*, ulong, Result>)(
                _slots[693] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[693] = nativeContext.LoadFunction("vkWaitSemaphoresKHR", "vulkan")
            )
        )(device, pWaitInfo, timeout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphoresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitSemaphoresKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] SemaphoreWaitInfo* pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => ThisThread.WaitSemaphoresKHR(device, pWaitInfo, timeout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphoresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.WaitSemaphoresKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] Ref<SemaphoreWaitInfo> pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    )
    {
        fixed (SemaphoreWaitInfo* __dsl_pWaitInfo = pWaitInfo)
        {
            return (Result)((IVk)this).WaitSemaphoresKHR(device, __dsl_pWaitInfo, timeout);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphoresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitSemaphoresKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] Ref<SemaphoreWaitInfo> pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => ThisThread.WaitSemaphoresKHR(device, pWaitInfo, timeout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.WriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            AccelerationStructureKHRHandle* pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData,
        [NativeTypeName("size_t")] nuint stride
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                uint,
                AccelerationStructureKHRHandle*,
                QueryType,
                nuint,
                void*,
                nuint,
                Result>)(
                _slots[694] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[694] = nativeContext.LoadFunction(
                        "vkWriteAccelerationStructuresPropertiesKHR",
                        "vulkan"
                    )
            )
        )(
            device,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            dataSize,
            pData,
            stride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            AccelerationStructureKHRHandle* pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData,
        [NativeTypeName("size_t")] nuint stride
    ) =>
        ThisThread.WriteAccelerationStructuresPropertiesKHR(
            device,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            dataSize,
            pData,
            stride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.WriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            Ref<AccelerationStructureKHRHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData,
        [NativeTypeName("size_t")] nuint stride
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (
            AccelerationStructureKHRHandle* __dsl_pAccelerationStructures = pAccelerationStructures
        )
        {
            return (Result)
                ((IVk)this).WriteAccelerationStructuresPropertiesKHR(
                    device,
                    accelerationStructureCount,
                    __dsl_pAccelerationStructures,
                    queryType,
                    dataSize,
                    __dsl_pData,
                    stride
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            Ref<AccelerationStructureKHRHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData,
        [NativeTypeName("size_t")] nuint stride
    ) =>
        ThisThread.WriteAccelerationStructuresPropertiesKHR(
            device,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            dataSize,
            pData,
            stride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.WriteMicromapsPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle* pMicromaps,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData,
        [NativeTypeName("size_t")] nuint stride
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle,
                uint,
                MicromapEXTHandle*,
                QueryType,
                nuint,
                void*,
                nuint,
                Result>)(
                _slots[695] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[695] = nativeContext.LoadFunction(
                        "vkWriteMicromapsPropertiesEXT",
                        "vulkan"
                    )
            )
        )(device, micromapCount, pMicromaps, queryType, dataSize, pData, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WriteMicromapsPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle* pMicromaps,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData,
        [NativeTypeName("size_t")] nuint stride
    ) =>
        ThisThread.WriteMicromapsPropertiesEXT(
            device,
            micromapCount,
            pMicromaps,
            queryType,
            dataSize,
            pData,
            stride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVk.WriteMicromapsPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] Ref<MicromapEXTHandle> pMicromaps,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData,
        [NativeTypeName("size_t")] nuint stride
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (MicromapEXTHandle* __dsl_pMicromaps = pMicromaps)
        {
            return (Result)
                ((IVk)this).WriteMicromapsPropertiesEXT(
                    device,
                    micromapCount,
                    __dsl_pMicromaps,
                    queryType,
                    dataSize,
                    __dsl_pData,
                    stride
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WriteMicromapsPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle device,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] Ref<MicromapEXTHandle> pMicromaps,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData,
        [NativeTypeName("size_t")] nuint stride
    ) =>
        ThisThread.WriteMicromapsPropertiesEXT(
            device,
            micromapCount,
            pMicromaps,
            queryType,
            dataSize,
            pData,
            stride
        );
}
