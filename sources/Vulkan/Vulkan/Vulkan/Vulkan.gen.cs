// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Ported from the Vulkan headers and corresponding dependencies.
// Original source is Copyright 2015-2023 The Khronos Group Inc. Licensed under the MIT license.
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using Silk.NET.Core;
global using static Silk.NET.Core.DSL;
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Silk.NET.Vulkan;

[SupportedApiProfile("vulkan")]
public unsafe partial class Vulkan : IVulkan, IVulkan.Static
{
    public partial class DllImport : IVulkan.Static
    {
        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkAcquireDrmDisplayEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_acquire_drm_display"],
            ImpliesSets = ["VK_EXT_direct_mode_display"]
        )]
        public static extern Result AcquireDrmDisplayEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("int32_t")] int drmFd,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_acquire_drm_display"],
            ImpliesSets = ["VK_EXT_direct_mode_display"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAcquireDrmDisplayEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AcquireDrmDisplayEXT(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("int32_t")] int drmFd,
            [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display
        )
        {
            fixed (DisplayKHRHandle* __dsl_display = display)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)AcquireDrmDisplayEXT(__dsl_physicalDevice, drmFd, __dsl_display);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkAcquireNextImage2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        public static extern Result AcquireNextImage2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkAcquireNextImageInfoKHR *")]
                AcquireNextImageInfoKHR* pAcquireInfo,
            [NativeTypeName("uint32_t *")] uint* pImageIndex
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AcquireNextImage2KHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkAcquireNextImageInfoKHR *")]
                Ref<AcquireNextImageInfoKHR> pAcquireInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pImageIndex
        )
        {
            fixed (uint* __dsl_pImageIndex = pImageIndex)
            fixed (AcquireNextImageInfoKHR* __dsl_pAcquireInfo = pAcquireInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)AcquireNextImage2KHR(
                    __dsl_device,
                    __dsl_pAcquireInfo,
                    __dsl_pImageIndex
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkAcquireNextImageKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        public static extern Result AcquireNextImageKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
            [NativeTypeName("uint64_t")] ulong timeout,
            [NativeTypeName("VkSemaphore")] SemaphoreHandle* semaphore,
            [NativeTypeName("VkFence")] FenceHandle* fence,
            [NativeTypeName("uint32_t *")] uint* pImageIndex
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImageKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AcquireNextImageKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
            [NativeTypeName("uint64_t")] ulong timeout,
            [NativeTypeName("VkSemaphore")] Ref<SemaphoreHandle> semaphore,
            [NativeTypeName("VkFence")] Ref<FenceHandle> fence,
            [NativeTypeName("uint32_t *")] Ref<uint> pImageIndex
        )
        {
            fixed (uint* __dsl_pImageIndex = pImageIndex)
            fixed (FenceHandle* __dsl_fence = fence)
            fixed (SemaphoreHandle* __dsl_semaphore = semaphore)
            fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)AcquireNextImageKHR(
                    __dsl_device,
                    __dsl_swapchain,
                    timeout,
                    __dsl_semaphore,
                    __dsl_fence,
                    __dsl_pImageIndex
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkAcquirePerformanceConfigurationINTEL"
        )]
        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        public static extern Result AcquirePerformanceConfigurationIntel(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkPerformanceConfigurationAcquireInfoINTEL *")]
                PerformanceConfigurationAcquireInfoIntel* pAcquireInfo,
            [NativeTypeName("VkPerformanceConfigurationINTEL *")]
                PerformanceConfigurationIntelHandle** pConfiguration
        );

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAcquirePerformanceConfigurationINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AcquirePerformanceConfigurationIntel(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkPerformanceConfigurationAcquireInfoINTEL *")]
                Ref<PerformanceConfigurationAcquireInfoIntel> pAcquireInfo,
            [NativeTypeName("VkPerformanceConfigurationINTEL *")]
                Ref2D<PerformanceConfigurationIntelHandle> pConfiguration
        )
        {
            fixed (PerformanceConfigurationIntelHandle** __dsl_pConfiguration = pConfiguration)
            fixed (PerformanceConfigurationAcquireInfoIntel* __dsl_pAcquireInfo = pAcquireInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)AcquirePerformanceConfigurationIntel(
                    __dsl_device,
                    __dsl_pAcquireInfo,
                    __dsl_pConfiguration
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkAcquireProfilingLockKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        public static extern Result AcquireProfilingLockKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkAcquireProfilingLockInfoKHR *")]
                AcquireProfilingLockInfoKHR* pInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAcquireProfilingLockKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AcquireProfilingLockKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkAcquireProfilingLockInfoKHR *")]
                Ref<AcquireProfilingLockInfoKHR> pInfo
        )
        {
            fixed (AcquireProfilingLockInfoKHR* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)AcquireProfilingLockKHR(__dsl_device, __dsl_pInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkAllocateCommandBuffers")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result AllocateCommandBuffers(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkCommandBufferAllocateInfo *")]
                CommandBufferAllocateInfo* pAllocateInfo,
            [NativeTypeName("VkCommandBuffer *")] CommandBufferHandle** pCommandBuffers
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAllocateCommandBuffers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AllocateCommandBuffers(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkCommandBufferAllocateInfo *")]
                Ref<CommandBufferAllocateInfo> pAllocateInfo,
            [NativeTypeName("VkCommandBuffer *")] Ref2D<CommandBufferHandle> pCommandBuffers
        )
        {
            fixed (CommandBufferHandle** __dsl_pCommandBuffers = pCommandBuffers)
            fixed (CommandBufferAllocateInfo* __dsl_pAllocateInfo = pAllocateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)AllocateCommandBuffers(
                    __dsl_device,
                    __dsl_pAllocateInfo,
                    __dsl_pCommandBuffers
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkAllocateDescriptorSets")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result AllocateDescriptorSets(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDescriptorSetAllocateInfo *")]
                DescriptorSetAllocateInfo* pAllocateInfo,
            [NativeTypeName("VkDescriptorSet *")] DescriptorSetHandle** pDescriptorSets
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAllocateDescriptorSets")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AllocateDescriptorSets(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDescriptorSetAllocateInfo *")]
                Ref<DescriptorSetAllocateInfo> pAllocateInfo,
            [NativeTypeName("VkDescriptorSet *")] Ref2D<DescriptorSetHandle> pDescriptorSets
        )
        {
            fixed (DescriptorSetHandle** __dsl_pDescriptorSets = pDescriptorSets)
            fixed (DescriptorSetAllocateInfo* __dsl_pAllocateInfo = pAllocateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)AllocateDescriptorSets(
                    __dsl_device,
                    __dsl_pAllocateInfo,
                    __dsl_pDescriptorSets
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkAllocateMemory")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result AllocateMemory(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkMemoryAllocateInfo *")] MemoryAllocateInfo* pAllocateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDeviceMemory *")] DeviceMemoryHandle** pMemory
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAllocateMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result AllocateMemory(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkMemoryAllocateInfo *")] Ref<MemoryAllocateInfo> pAllocateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDeviceMemory *")] Ref2D<DeviceMemoryHandle> pMemory
        )
        {
            fixed (DeviceMemoryHandle** __dsl_pMemory = pMemory)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (MemoryAllocateInfo* __dsl_pAllocateInfo = pAllocateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)AllocateMemory(
                    __dsl_device,
                    __dsl_pAllocateInfo,
                    __dsl_pAllocator,
                    __dsl_pMemory
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkAntiLagUpdateAMD")]
        [SupportedApiProfile("vulkan", ["VK_AMD_anti_lag"])]
        public static extern void AntiLagUpdateAMD(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkAntiLagDataAMD *")] AntiLagDataAMD* pData
        );

        [SupportedApiProfile("vulkan", ["VK_AMD_anti_lag"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkAntiLagUpdateAMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void AntiLagUpdateAMD(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkAntiLagDataAMD *")] Ref<AntiLagDataAMD> pData
        )
        {
            fixed (AntiLagDataAMD* __dsl_pData = pData)
            fixed (DeviceHandle* __dsl_device = device)
            {
                AntiLagUpdateAMD(__dsl_device, __dsl_pData);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkBeginCommandBuffer")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result BeginCommandBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCommandBufferBeginInfo *")] CommandBufferBeginInfo* pBeginInfo
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBeginCommandBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BeginCommandBuffer(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCommandBufferBeginInfo *")]
                Ref<CommandBufferBeginInfo> pBeginInfo
        )
        {
            fixed (CommandBufferBeginInfo* __dsl_pBeginInfo = pBeginInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                return (Result)BeginCommandBuffer(__dsl_commandBuffer, __dsl_pBeginInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkBindAccelerationStructureMemoryNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern Result BindAccelerationStructureMemoryNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindAccelerationStructureMemoryInfoNV *")]
                BindAccelerationStructureMemoryInfoNV* pBindInfos
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindAccelerationStructureMemoryNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindAccelerationStructureMemoryNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindAccelerationStructureMemoryInfoNV *")]
                Ref<BindAccelerationStructureMemoryInfoNV> pBindInfos
        )
        {
            fixed (BindAccelerationStructureMemoryInfoNV* __dsl_pBindInfos = pBindInfos)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)BindAccelerationStructureMemoryNV(
                    __dsl_device,
                    bindInfoCount,
                    __dsl_pBindInfos
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkBindBufferMemory")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result BindBufferMemory(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
            [NativeTypeName("VkDeviceSize")] ulong memoryOffset
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindBufferMemory(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
            [NativeTypeName("VkDeviceSize")] ulong memoryOffset
        )
        {
            fixed (DeviceMemoryHandle* __dsl_memory = memory)
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)BindBufferMemory(
                    __dsl_device,
                    __dsl_buffer,
                    __dsl_memory,
                    memoryOffset
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkBindBufferMemory2")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern Result BindBufferMemory2(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindBufferMemoryInfo *")] BindBufferMemoryInfo* pBindInfos
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindBufferMemory2(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindBufferMemoryInfo *")] Ref<BindBufferMemoryInfo> pBindInfos
        )
        {
            fixed (BindBufferMemoryInfo* __dsl_pBindInfos = pBindInfos)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)BindBufferMemory2(__dsl_device, bindInfoCount, __dsl_pBindInfos);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkBindBufferMemory2KHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
        public static extern Result BindBufferMemory2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindBufferMemoryInfo *")] BindBufferMemoryInfo* pBindInfos
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindBufferMemory2KHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindBufferMemoryInfo *")] Ref<BindBufferMemoryInfo> pBindInfos
        )
        {
            fixed (BindBufferMemoryInfo* __dsl_pBindInfos = pBindInfos)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)BindBufferMemory2KHR(__dsl_device, bindInfoCount, __dsl_pBindInfos);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkBindImageMemory")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result BindImageMemory(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkImage")] ImageHandle* image,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
            [NativeTypeName("VkDeviceSize")] ulong memoryOffset
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindImageMemory(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkImage")] Ref<ImageHandle> image,
            [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
            [NativeTypeName("VkDeviceSize")] ulong memoryOffset
        )
        {
            fixed (DeviceMemoryHandle* __dsl_memory = memory)
            fixed (ImageHandle* __dsl_image = image)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)BindImageMemory(
                    __dsl_device,
                    __dsl_image,
                    __dsl_memory,
                    memoryOffset
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkBindImageMemory2")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern Result BindImageMemory2(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindImageMemoryInfo *")] BindImageMemoryInfo* pBindInfos
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindImageMemory2(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindImageMemoryInfo *")] Ref<BindImageMemoryInfo> pBindInfos
        )
        {
            fixed (BindImageMemoryInfo* __dsl_pBindInfos = pBindInfos)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)BindImageMemory2(__dsl_device, bindInfoCount, __dsl_pBindInfos);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkBindImageMemory2KHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
        public static extern Result BindImageMemory2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindImageMemoryInfo *")] BindImageMemoryInfo* pBindInfos
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindImageMemory2KHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindImageMemoryInfo *")] Ref<BindImageMemoryInfo> pBindInfos
        )
        {
            fixed (BindImageMemoryInfo* __dsl_pBindInfos = pBindInfos)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)BindImageMemory2KHR(__dsl_device, bindInfoCount, __dsl_pBindInfos);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkBindOpticalFlowSessionImageNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result BindOpticalFlowSessionImageNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle* session,
            OpticalFlowSessionBindingPointNV bindingPoint,
            [NativeTypeName("VkImageView")] ImageViewHandle* view,
            ImageLayout layout
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindOpticalFlowSessionImageNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindOpticalFlowSessionImageNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkOpticalFlowSessionNV")] Ref<OpticalFlowSessionNVHandle> session,
            OpticalFlowSessionBindingPointNV bindingPoint,
            [NativeTypeName("VkImageView")] Ref<ImageViewHandle> view,
            ImageLayout layout
        )
        {
            fixed (ImageViewHandle* __dsl_view = view)
            fixed (OpticalFlowSessionNVHandle* __dsl_session = session)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)BindOpticalFlowSessionImageNV(
                    __dsl_device,
                    __dsl_session,
                    bindingPoint,
                    __dsl_view,
                    layout
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkBindVideoSessionMemoryKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        public static extern Result BindVideoSessionMemoryKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle* videoSession,
            [NativeTypeName("uint32_t")] uint bindSessionMemoryInfoCount,
            [NativeTypeName("const VkBindVideoSessionMemoryInfoKHR *")]
                BindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBindVideoSessionMemoryKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BindVideoSessionMemoryKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkVideoSessionKHR")] Ref<VideoSessionKHRHandle> videoSession,
            [NativeTypeName("uint32_t")] uint bindSessionMemoryInfoCount,
            [NativeTypeName("const VkBindVideoSessionMemoryInfoKHR *")]
                Ref<BindVideoSessionMemoryInfoKHR> pBindSessionMemoryInfos
        )
        {
            fixed (
                BindVideoSessionMemoryInfoKHR* __dsl_pBindSessionMemoryInfos =
                    pBindSessionMemoryInfos
            )
            fixed (VideoSessionKHRHandle* __dsl_videoSession = videoSession)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)BindVideoSessionMemoryKHR(
                    __dsl_device,
                    __dsl_videoSession,
                    bindSessionMemoryInfoCount,
                    __dsl_pBindSessionMemoryInfos
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkBuildAccelerationStructuresKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern Result BuildAccelerationStructuresKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeferredOperationKHR")]
                DeferredOperationKHRHandle* deferredOperation,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                AccelerationStructureBuildGeometryInfoKHR* pInfos,
            [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
                AccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBuildAccelerationStructuresKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BuildAccelerationStructuresKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeferredOperationKHR")]
                Ref<DeferredOperationKHRHandle> deferredOperation,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
            [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
                Ref2D<AccelerationStructureBuildRangeInfoKHR> ppBuildRangeInfos
        )
        {
            fixed (
                AccelerationStructureBuildRangeInfoKHR** __dsl_ppBuildRangeInfos = ppBuildRangeInfos
            )
            fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pInfos = pInfos)
            fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)BuildAccelerationStructuresKHR(
                    __dsl_device,
                    __dsl_deferredOperation,
                    infoCount,
                    __dsl_pInfos,
                    __dsl_ppBuildRangeInfos
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkBuildMicromapsEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        public static extern Result BuildMicromapsEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeferredOperationKHR")]
                DeferredOperationKHRHandle* deferredOperation,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pInfos
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkBuildMicromapsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result BuildMicromapsEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeferredOperationKHR")]
                Ref<DeferredOperationKHRHandle> deferredOperation,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pInfos
        )
        {
            fixed (MicromapBuildInfoEXT* __dsl_pInfos = pInfos)
            fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)BuildMicromapsEXT(
                    __dsl_device,
                    __dsl_deferredOperation,
                    infoCount,
                    __dsl_pInfos
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdBeginConditionalRenderingEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_conditional_rendering"],
            ImpliesSets = [
                "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
                "VK_EXT_conditional_rendering+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdBeginConditionalRenderingEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkConditionalRenderingBeginInfoEXT *")]
                ConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_conditional_rendering"],
            ImpliesSets = [
                "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
                "VK_EXT_conditional_rendering+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginConditionalRenderingEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginConditionalRenderingEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkConditionalRenderingBeginInfoEXT *")]
                Ref<ConditionalRenderingBeginInfoEXT> pConditionalRenderingBegin
        )
        {
            fixed (
                ConditionalRenderingBeginInfoEXT* __dsl_pConditionalRenderingBegin =
                    pConditionalRenderingBegin
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBeginConditionalRenderingEXT(
                    __dsl_commandBuffer,
                    __dsl_pConditionalRenderingBegin
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBeginDebugUtilsLabelEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        public static extern void CmdBeginDebugUtilsLabelEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginDebugUtilsLabelEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
        )
        {
            fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBeginDebugUtilsLabelEXT(__dsl_commandBuffer, __dsl_pLabelInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBeginPerTileExecutionQCOM")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_shading"],
            ImpliesSets = [
                "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
            ]
        )]
        public static extern void CmdBeginPerTileExecutionQCOM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkPerTileBeginInfoQCOM *")]
                PerTileBeginInfoQCOM* pPerTileBeginInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_shading"],
            ImpliesSets = [
                "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginPerTileExecutionQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginPerTileExecutionQCOM(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkPerTileBeginInfoQCOM *")]
                Ref<PerTileBeginInfoQCOM> pPerTileBeginInfo
        )
        {
            fixed (PerTileBeginInfoQCOM* __dsl_pPerTileBeginInfo = pPerTileBeginInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBeginPerTileExecutionQCOM(__dsl_commandBuffer, __dsl_pPerTileBeginInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBeginQuery")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdBeginQuery(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint query,
            [NativeTypeName("VkQueryControlFlags")] uint flags
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginQuery")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginQuery(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint query,
            [NativeTypeName("VkQueryControlFlags")] uint flags
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBeginQuery(__dsl_commandBuffer, __dsl_queryPool, query, flags);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBeginQueryIndexedEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdBeginQueryIndexedEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint query,
            [NativeTypeName("VkQueryControlFlags")] uint flags,
            [NativeTypeName("uint32_t")] uint index
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginQueryIndexedEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginQueryIndexedEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint query,
            [NativeTypeName("VkQueryControlFlags")] uint flags,
            [NativeTypeName("uint32_t")] uint index
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBeginQueryIndexedEXT(__dsl_commandBuffer, __dsl_queryPool, query, flags, index);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBeginRendering")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdBeginRendering(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRendering")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRendering(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo
        )
        {
            fixed (RenderingInfo* __dsl_pRenderingInfo = pRenderingInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBeginRendering(__dsl_commandBuffer, __dsl_pRenderingInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBeginRenderingKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering"],
            ImpliesSets = [
                "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
                "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdBeginRenderingKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering"],
            ImpliesSets = [
                "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
                "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderingKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRenderingKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo
        )
        {
            fixed (RenderingInfo* __dsl_pRenderingInfo = pRenderingInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBeginRenderingKHR(__dsl_commandBuffer, __dsl_pRenderingInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBeginRenderPass")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdBeginRenderPass(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
            SubpassContents contents
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRenderPass(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkRenderPassBeginInfo *")]
                Ref<RenderPassBeginInfo> pRenderPassBegin,
            SubpassContents contents
        )
        {
            fixed (RenderPassBeginInfo* __dsl_pRenderPassBegin = pRenderPassBegin)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBeginRenderPass(__dsl_commandBuffer, __dsl_pRenderPassBegin, contents);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBeginRenderPass2")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        public static extern void CmdBeginRenderPass2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
            [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRenderPass2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkRenderPassBeginInfo *")]
                Ref<RenderPassBeginInfo> pRenderPassBegin,
            [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo
        )
        {
            fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
            fixed (RenderPassBeginInfo* __dsl_pRenderPassBegin = pRenderPassBegin)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBeginRenderPass2(
                    __dsl_commandBuffer,
                    __dsl_pRenderPassBegin,
                    __dsl_pSubpassBeginInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBeginRenderPass2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        public static extern void CmdBeginRenderPass2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
            [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginRenderPass2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkRenderPassBeginInfo *")]
                Ref<RenderPassBeginInfo> pRenderPassBegin,
            [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo
        )
        {
            fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
            fixed (RenderPassBeginInfo* __dsl_pRenderPassBegin = pRenderPassBegin)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBeginRenderPass2KHR(
                    __dsl_commandBuffer,
                    __dsl_pRenderPassBegin,
                    __dsl_pSubpassBeginInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBeginTransformFeedbackEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdBeginTransformFeedbackEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstCounterBuffer,
            [NativeTypeName("uint32_t")] uint counterBufferCount,
            [NativeTypeName("const VkBuffer *")] BufferHandle** pCounterBuffers,
            [NativeTypeName("const VkDeviceSize *")] ulong* pCounterBufferOffsets
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginTransformFeedbackEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginTransformFeedbackEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstCounterBuffer,
            [NativeTypeName("uint32_t")] uint counterBufferCount,
            [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pCounterBuffers,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pCounterBufferOffsets
        )
        {
            fixed (ulong* __dsl_pCounterBufferOffsets = pCounterBufferOffsets)
            fixed (BufferHandle** __dsl_pCounterBuffers = pCounterBuffers)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBeginTransformFeedbackEXT(
                    __dsl_commandBuffer,
                    firstCounterBuffer,
                    counterBufferCount,
                    __dsl_pCounterBuffers,
                    __dsl_pCounterBufferOffsets
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBeginVideoCodingKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        public static extern void CmdBeginVideoCodingKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkVideoBeginCodingInfoKHR *")]
                VideoBeginCodingInfoKHR* pBeginInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBeginVideoCodingKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBeginVideoCodingKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkVideoBeginCodingInfoKHR *")]
                Ref<VideoBeginCodingInfoKHR> pBeginInfo
        )
        {
            fixed (VideoBeginCodingInfoKHR* __dsl_pBeginInfo = pBeginInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBeginVideoCodingKHR(__dsl_commandBuffer, __dsl_pBeginInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        public static extern void CmdBindDescriptorBufferEmbeddedSamplers2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *")]
                BindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorBufferEmbeddedSamplers2EXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *")]
                Ref<BindDescriptorBufferEmbeddedSamplersInfoEXT> pBindDescriptorBufferEmbeddedSamplersInfo
        )
        {
            fixed (
                BindDescriptorBufferEmbeddedSamplersInfoEXT* __dsl_pBindDescriptorBufferEmbeddedSamplersInfo =
                    pBindDescriptorBufferEmbeddedSamplersInfo
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindDescriptorBufferEmbeddedSamplers2EXT(
                    __dsl_commandBuffer,
                    __dsl_pBindDescriptorBufferEmbeddedSamplersInfo
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplersEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdBindDescriptorBufferEmbeddedSamplersEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
            [NativeTypeName("uint32_t")] uint set
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorBufferEmbeddedSamplersEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
            [NativeTypeName("uint32_t")] uint set
        )
        {
            fixed (PipelineLayoutHandle* __dsl_layout = layout)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindDescriptorBufferEmbeddedSamplersEXT(
                    __dsl_commandBuffer,
                    pipelineBindPoint,
                    __dsl_layout,
                    set
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdBindDescriptorBuffersEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint bufferCount,
            [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
                DescriptorBufferBindingInfoEXT* pBindingInfos
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorBuffersEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint bufferCount,
            [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
                Ref<DescriptorBufferBindingInfoEXT> pBindingInfos
        )
        {
            fixed (DescriptorBufferBindingInfoEXT* __dsl_pBindingInfos = pBindingInfos)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindDescriptorBuffersEXT(__dsl_commandBuffer, bufferCount, __dsl_pBindingInfos);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorBuffersEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
                DescriptorBufferBindingInfoEXT pBindingInfos
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindDescriptorBuffersEXT(
                    __dsl_commandBuffer,
                    1,
                    (DescriptorBufferBindingInfoEXT*)&pBindingInfos
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindDescriptorSets")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdBindDescriptorSets(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
            [NativeTypeName("uint32_t")] uint firstSet,
            [NativeTypeName("uint32_t")] uint descriptorSetCount,
            [NativeTypeName("const VkDescriptorSet *")] DescriptorSetHandle** pDescriptorSets,
            [NativeTypeName("uint32_t")] uint dynamicOffsetCount,
            [NativeTypeName("const uint32_t *")] uint* pDynamicOffsets
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorSets(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
            [NativeTypeName("uint32_t")] uint firstSet,
            [NativeTypeName("uint32_t")] uint descriptorSetCount,
            [NativeTypeName("const VkDescriptorSet *")] Ref2D<DescriptorSetHandle> pDescriptorSets,
            [NativeTypeName("uint32_t")] uint dynamicOffsetCount,
            [NativeTypeName("const uint32_t *")] Ref<uint> pDynamicOffsets
        )
        {
            fixed (uint* __dsl_pDynamicOffsets = pDynamicOffsets)
            fixed (DescriptorSetHandle** __dsl_pDescriptorSets = pDescriptorSets)
            fixed (PipelineLayoutHandle* __dsl_layout = layout)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindDescriptorSets(
                    __dsl_commandBuffer,
                    pipelineBindPoint,
                    __dsl_layout,
                    firstSet,
                    descriptorSetCount,
                    __dsl_pDescriptorSets,
                    dynamicOffsetCount,
                    __dsl_pDynamicOffsets
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindDescriptorSets2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern void CmdBindDescriptorSets2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkBindDescriptorSetsInfo *")]
                BindDescriptorSetsInfo* pBindDescriptorSetsInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorSets2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkBindDescriptorSetsInfo *")]
                Ref<BindDescriptorSetsInfo> pBindDescriptorSetsInfo
        )
        {
            fixed (BindDescriptorSetsInfo* __dsl_pBindDescriptorSetsInfo = pBindDescriptorSetsInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindDescriptorSets2(__dsl_commandBuffer, __dsl_pBindDescriptorSetsInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindDescriptorSets2KHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
        public static extern void CmdBindDescriptorSets2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkBindDescriptorSetsInfo *")]
                BindDescriptorSetsInfo* pBindDescriptorSetsInfo
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindDescriptorSets2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkBindDescriptorSetsInfo *")]
                Ref<BindDescriptorSetsInfo> pBindDescriptorSetsInfo
        )
        {
            fixed (BindDescriptorSetsInfo* __dsl_pBindDescriptorSetsInfo = pBindDescriptorSetsInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindDescriptorSets2KHR(__dsl_commandBuffer, __dsl_pBindDescriptorSetsInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindIndexBuffer")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdBindIndexBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            IndexType indexType
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindIndexBuffer(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            IndexType indexType
        )
        {
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindIndexBuffer(__dsl_commandBuffer, __dsl_buffer, offset, indexType);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindIndexBuffer2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern void CmdBindIndexBuffer2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkDeviceSize")] ulong size,
            IndexType indexType
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindIndexBuffer2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkDeviceSize")] ulong size,
            IndexType indexType
        )
        {
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindIndexBuffer2(__dsl_commandBuffer, __dsl_buffer, offset, size, indexType);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindIndexBuffer2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        public static extern void CmdBindIndexBuffer2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkDeviceSize")] ulong size,
            IndexType indexType
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindIndexBuffer2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkDeviceSize")] ulong size,
            IndexType indexType
        )
        {
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindIndexBuffer2KHR(__dsl_commandBuffer, __dsl_buffer, offset, size, indexType);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindInvocationMaskHUAWEI")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_invocation_mask"],
            ImpliesSets = [
                "VK_KHR_ray_tracing_pipeline+VK_KHR_synchronization2",
                "VK_KHR_ray_tracing_pipeline+VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdBindInvocationMaskHuawei(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkImageView")] ImageViewHandle* imageView,
            ImageLayout imageLayout
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_invocation_mask"],
            ImpliesSets = [
                "VK_KHR_ray_tracing_pipeline+VK_KHR_synchronization2",
                "VK_KHR_ray_tracing_pipeline+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindInvocationMaskHUAWEI")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindInvocationMaskHuawei(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImageView")] Ref<ImageViewHandle> imageView,
            ImageLayout imageLayout
        )
        {
            fixed (ImageViewHandle* __dsl_imageView = imageView)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindInvocationMaskHuawei(__dsl_commandBuffer, __dsl_imageView, imageLayout);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindPipeline")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdBindPipeline(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipeline")] PipelineHandle* pipeline
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindPipeline")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindPipeline(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline
        )
        {
            fixed (PipelineHandle* __dsl_pipeline = pipeline)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindPipeline(__dsl_commandBuffer, pipelineBindPoint, __dsl_pipeline);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindPipelineShaderGroupNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        public static extern void CmdBindPipelineShaderGroupNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
            [NativeTypeName("uint32_t")] uint groupIndex
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindPipelineShaderGroupNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindPipelineShaderGroupNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
            [NativeTypeName("uint32_t")] uint groupIndex
        )
        {
            fixed (PipelineHandle* __dsl_pipeline = pipeline)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindPipelineShaderGroupNV(
                    __dsl_commandBuffer,
                    pipelineBindPoint,
                    __dsl_pipeline,
                    groupIndex
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindShadersEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdBindShadersEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint stageCount,
            [NativeTypeName("const VkShaderStageFlagBits *")] ShaderStageFlags* pStages,
            [NativeTypeName("const VkShaderEXT *")] ShaderEXTHandle** pShaders
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindShadersEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint stageCount,
            [NativeTypeName("const VkShaderStageFlagBits *")] Ref<ShaderStageFlags> pStages,
            [NativeTypeName("const VkShaderEXT *")] Ref2D<ShaderEXTHandle> pShaders
        )
        {
            fixed (ShaderEXTHandle** __dsl_pShaders = pShaders)
            fixed (ShaderStageFlags* __dsl_pStages = pStages)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindShadersEXT(__dsl_commandBuffer, stageCount, __dsl_pStages, __dsl_pShaders);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindShadingRateImageNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdBindShadingRateImageNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkImageView")] ImageViewHandle* imageView,
            ImageLayout imageLayout
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadingRateImageNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindShadingRateImageNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImageView")] Ref<ImageViewHandle> imageView,
            ImageLayout imageLayout
        )
        {
            fixed (ImageViewHandle* __dsl_imageView = imageView)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindShadingRateImageNV(__dsl_commandBuffer, __dsl_imageView, imageLayout);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindTileMemoryQCOM")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_memory_heap"],
            ImpliesSets = [
                "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdBindTileMemoryQCOM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkTileMemoryBindInfoQCOM *")]
                TileMemoryBindInfoQCOM* pTileMemoryBindInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_memory_heap"],
            ImpliesSets = [
                "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindTileMemoryQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindTileMemoryQCOM(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkTileMemoryBindInfoQCOM *")]
                Ref<TileMemoryBindInfoQCOM> pTileMemoryBindInfo
        )
        {
            fixed (TileMemoryBindInfoQCOM* __dsl_pTileMemoryBindInfo = pTileMemoryBindInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindTileMemoryQCOM(__dsl_commandBuffer, __dsl_pTileMemoryBindInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdBindTransformFeedbackBuffersEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdBindTransformFeedbackBuffersEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] BufferHandle** pBuffers,
            [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
            [NativeTypeName("const VkDeviceSize *")] ulong* pSizes
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindTransformFeedbackBuffersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindTransformFeedbackBuffersEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pBuffers,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes
        )
        {
            fixed (ulong* __dsl_pSizes = pSizes)
            fixed (ulong* __dsl_pOffsets = pOffsets)
            fixed (BufferHandle** __dsl_pBuffers = pBuffers)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindTransformFeedbackBuffersEXT(
                    __dsl_commandBuffer,
                    firstBinding,
                    bindingCount,
                    __dsl_pBuffers,
                    __dsl_pOffsets,
                    __dsl_pSizes
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindVertexBuffers")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdBindVertexBuffers(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] BufferHandle** pBuffers,
            [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindVertexBuffers(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pBuffers,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets
        )
        {
            fixed (ulong* __dsl_pOffsets = pOffsets)
            fixed (BufferHandle** __dsl_pBuffers = pBuffers)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindVertexBuffers(
                    __dsl_commandBuffer,
                    firstBinding,
                    bindingCount,
                    __dsl_pBuffers,
                    __dsl_pOffsets
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindVertexBuffers2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdBindVertexBuffers2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] BufferHandle** pBuffers,
            [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
            [NativeTypeName("const VkDeviceSize *")] ulong* pSizes,
            [NativeTypeName("const VkDeviceSize *")] ulong* pStrides
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindVertexBuffers2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pBuffers,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pStrides
        )
        {
            fixed (ulong* __dsl_pStrides = pStrides)
            fixed (ulong* __dsl_pSizes = pSizes)
            fixed (ulong* __dsl_pOffsets = pOffsets)
            fixed (BufferHandle** __dsl_pBuffers = pBuffers)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindVertexBuffers2(
                    __dsl_commandBuffer,
                    firstBinding,
                    bindingCount,
                    __dsl_pBuffers,
                    __dsl_pOffsets,
                    __dsl_pSizes,
                    __dsl_pStrides
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBindVertexBuffers2EXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdBindVertexBuffers2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] BufferHandle** pBuffers,
            [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
            [NativeTypeName("const VkDeviceSize *")] ulong* pSizes,
            [NativeTypeName("const VkDeviceSize *")] ulong* pStrides
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBindVertexBuffers2EXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstBinding,
            [NativeTypeName("uint32_t")] uint bindingCount,
            [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pBuffers,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pStrides
        )
        {
            fixed (ulong* __dsl_pStrides = pStrides)
            fixed (ulong* __dsl_pSizes = pSizes)
            fixed (ulong* __dsl_pOffsets = pOffsets)
            fixed (BufferHandle** __dsl_pBuffers = pBuffers)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBindVertexBuffers2EXT(
                    __dsl_commandBuffer,
                    firstBinding,
                    bindingCount,
                    __dsl_pBuffers,
                    __dsl_pOffsets,
                    __dsl_pSizes,
                    __dsl_pStrides
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBlitImage")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdBlitImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle* srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] ImageHandle* dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkImageBlit *")] ImageBlit* pRegions,
            Filter filter
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBlitImage(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkImageBlit *")] Ref<ImageBlit> pRegions,
            Filter filter
        )
        {
            fixed (ImageBlit* __dsl_pRegions = pRegions)
            fixed (ImageHandle* __dsl_dstImage = dstImage)
            fixed (ImageHandle* __dsl_srcImage = srcImage)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBlitImage(
                    __dsl_commandBuffer,
                    __dsl_srcImage,
                    srcImageLayout,
                    __dsl_dstImage,
                    dstImageLayout,
                    regionCount,
                    __dsl_pRegions,
                    filter
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBlitImage(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("const VkImageBlit *")] ImageBlit pRegions,
            Filter filter
        )
        {
            fixed (ImageHandle* __dsl_dstImage = dstImage)
            fixed (ImageHandle* __dsl_srcImage = srcImage)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBlitImage(
                    __dsl_commandBuffer,
                    __dsl_srcImage,
                    srcImageLayout,
                    __dsl_dstImage,
                    dstImageLayout,
                    1,
                    (ImageBlit*)&pRegions,
                    filter
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBlitImage2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdBlitImage2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkBlitImageInfo2 *")] BlitImageInfo2* pBlitImageInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBlitImage2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkBlitImageInfo2 *")] Ref<BlitImageInfo2> pBlitImageInfo
        )
        {
            fixed (BlitImageInfo2* __dsl_pBlitImageInfo = pBlitImageInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBlitImage2(__dsl_commandBuffer, __dsl_pBlitImageInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBlitImage2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdBlitImage2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkBlitImageInfo2 *")] BlitImageInfo2* pBlitImageInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBlitImage2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkBlitImageInfo2 *")] Ref<BlitImageInfo2> pBlitImageInfo
        )
        {
            fixed (BlitImageInfo2* __dsl_pBlitImageInfo = pBlitImageInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBlitImage2KHR(__dsl_commandBuffer, __dsl_pBlitImageInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdBuildAccelerationStructureNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdBuildAccelerationStructureNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkAccelerationStructureInfoNV *")]
                AccelerationStructureInfoNV* pInfo,
            [NativeTypeName("VkBuffer")] BufferHandle* instanceData,
            [NativeTypeName("VkDeviceSize")] ulong instanceOffset,
            [NativeTypeName("VkBool32")] uint update,
            [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle* dst,
            [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle* src,
            [NativeTypeName("VkBuffer")] BufferHandle* scratch,
            [NativeTypeName("VkDeviceSize")] ulong scratchOffset
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructureNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildAccelerationStructureNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkAccelerationStructureInfoNV *")]
                Ref<AccelerationStructureInfoNV> pInfo,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> instanceData,
            [NativeTypeName("VkDeviceSize")] ulong instanceOffset,
            [NativeTypeName("VkBool32")] uint update,
            [NativeTypeName("VkAccelerationStructureNV")] Ref<AccelerationStructureNVHandle> dst,
            [NativeTypeName("VkAccelerationStructureNV")] Ref<AccelerationStructureNVHandle> src,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> scratch,
            [NativeTypeName("VkDeviceSize")] ulong scratchOffset
        )
        {
            fixed (BufferHandle* __dsl_scratch = scratch)
            fixed (AccelerationStructureNVHandle* __dsl_src = src)
            fixed (AccelerationStructureNVHandle* __dsl_dst = dst)
            fixed (BufferHandle* __dsl_instanceData = instanceData)
            fixed (AccelerationStructureInfoNV* __dsl_pInfo = pInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBuildAccelerationStructureNV(
                    __dsl_commandBuffer,
                    __dsl_pInfo,
                    __dsl_instanceData,
                    instanceOffset,
                    update,
                    __dsl_dst,
                    __dsl_src,
                    __dsl_scratch,
                    scratchOffset
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdBuildAccelerationStructuresIndirectKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdBuildAccelerationStructuresIndirectKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                AccelerationStructureBuildGeometryInfoKHR* pInfos,
            [NativeTypeName("const VkDeviceAddress *")] ulong* pIndirectDeviceAddresses,
            [NativeTypeName("const uint32_t *")] uint* pIndirectStrides,
            [NativeTypeName("const uint32_t *const *")] uint** ppMaxPrimitiveCounts
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresIndirectKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildAccelerationStructuresIndirectKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
            [NativeTypeName("const VkDeviceAddress *")] Ref<ulong> pIndirectDeviceAddresses,
            [NativeTypeName("const uint32_t *")] Ref<uint> pIndirectStrides,
            [NativeTypeName("const uint32_t *const *")] Ref2D<uint> ppMaxPrimitiveCounts
        )
        {
            fixed (uint** __dsl_ppMaxPrimitiveCounts = ppMaxPrimitiveCounts)
            fixed (uint* __dsl_pIndirectStrides = pIndirectStrides)
            fixed (ulong* __dsl_pIndirectDeviceAddresses = pIndirectDeviceAddresses)
            fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pInfos = pInfos)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBuildAccelerationStructuresIndirectKHR(
                    __dsl_commandBuffer,
                    infoCount,
                    __dsl_pInfos,
                    __dsl_pIndirectDeviceAddresses,
                    __dsl_pIndirectStrides,
                    __dsl_ppMaxPrimitiveCounts
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdBuildAccelerationStructuresKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdBuildAccelerationStructuresKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                AccelerationStructureBuildGeometryInfoKHR* pInfos,
            [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
                AccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildAccelerationStructuresKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
            [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
                Ref2D<AccelerationStructureBuildRangeInfoKHR> ppBuildRangeInfos
        )
        {
            fixed (
                AccelerationStructureBuildRangeInfoKHR** __dsl_ppBuildRangeInfos = ppBuildRangeInfos
            )
            fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pInfos = pInfos)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBuildAccelerationStructuresKHR(
                    __dsl_commandBuffer,
                    infoCount,
                    __dsl_pInfos,
                    __dsl_ppBuildRangeInfos
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdBuildClusterAccelerationStructureIndirectNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cluster_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        public static extern void CmdBuildClusterAccelerationStructureIndirectNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkClusterAccelerationStructureCommandsInfoNV *")]
                ClusterAccelerationStructureCommandsInfoNV* pCommandInfos
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cluster_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildClusterAccelerationStructureIndirectNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildClusterAccelerationStructureIndirectNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkClusterAccelerationStructureCommandsInfoNV *")]
                Ref<ClusterAccelerationStructureCommandsInfoNV> pCommandInfos
        )
        {
            fixed (ClusterAccelerationStructureCommandsInfoNV* __dsl_pCommandInfos = pCommandInfos)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBuildClusterAccelerationStructureIndirectNV(
                    __dsl_commandBuffer,
                    __dsl_pCommandInfos
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdBuildMicromapsEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdBuildMicromapsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pInfos
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildMicromapsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildMicromapsEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pInfos
        )
        {
            fixed (MicromapBuildInfoEXT* __dsl_pInfos = pInfos)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBuildMicromapsEXT(__dsl_commandBuffer, infoCount, __dsl_pInfos);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildMicromapsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildMicromapsEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT pInfos
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBuildMicromapsEXT(__dsl_commandBuffer, 1, (MicromapBuildInfoEXT*)&pInfos);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdBuildPartitionedAccelerationStructuresNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_partitioned_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        public static extern void CmdBuildPartitionedAccelerationStructuresNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkBuildPartitionedAccelerationStructureInfoNV *")]
                BuildPartitionedAccelerationStructureInfoNV* pBuildInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_partitioned_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdBuildPartitionedAccelerationStructuresNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdBuildPartitionedAccelerationStructuresNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkBuildPartitionedAccelerationStructureInfoNV *")]
                Ref<BuildPartitionedAccelerationStructureInfoNV> pBuildInfo
        )
        {
            fixed (BuildPartitionedAccelerationStructureInfoNV* __dsl_pBuildInfo = pBuildInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdBuildPartitionedAccelerationStructuresNV(__dsl_commandBuffer, __dsl_pBuildInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdClearAttachments")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdClearAttachments(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkClearAttachment *")] ClearAttachment* pAttachments,
            [NativeTypeName("uint32_t")] uint rectCount,
            [NativeTypeName("const VkClearRect *")] ClearRect* pRects
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdClearAttachments")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdClearAttachments(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkClearAttachment *")] Ref<ClearAttachment> pAttachments,
            [NativeTypeName("uint32_t")] uint rectCount,
            [NativeTypeName("const VkClearRect *")] Ref<ClearRect> pRects
        )
        {
            fixed (ClearRect* __dsl_pRects = pRects)
            fixed (ClearAttachment* __dsl_pAttachments = pAttachments)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdClearAttachments(
                    __dsl_commandBuffer,
                    attachmentCount,
                    __dsl_pAttachments,
                    rectCount,
                    __dsl_pRects
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdClearColorImage")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdClearColorImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle* image,
            ImageLayout imageLayout,
            [NativeTypeName("const VkClearColorValue *")] ClearColorValue* pColor,
            [NativeTypeName("uint32_t")] uint rangeCount,
            [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange* pRanges
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdClearColorImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdClearColorImage(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImage")] Ref<ImageHandle> image,
            ImageLayout imageLayout,
            [NativeTypeName("const VkClearColorValue *")] Ref<ClearColorValue> pColor,
            [NativeTypeName("uint32_t")] uint rangeCount,
            [NativeTypeName("const VkImageSubresourceRange *")] Ref<ImageSubresourceRange> pRanges
        )
        {
            fixed (ImageSubresourceRange* __dsl_pRanges = pRanges)
            fixed (ClearColorValue* __dsl_pColor = pColor)
            fixed (ImageHandle* __dsl_image = image)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdClearColorImage(
                    __dsl_commandBuffer,
                    __dsl_image,
                    imageLayout,
                    __dsl_pColor,
                    rangeCount,
                    __dsl_pRanges
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdClearColorImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdClearColorImage(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImage")] Ref<ImageHandle> image,
            ImageLayout imageLayout,
            [NativeTypeName("const VkClearColorValue *")] Ref<ClearColorValue> pColor,
            [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange pRanges
        )
        {
            fixed (ClearColorValue* __dsl_pColor = pColor)
            fixed (ImageHandle* __dsl_image = image)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdClearColorImage(
                    __dsl_commandBuffer,
                    __dsl_image,
                    imageLayout,
                    __dsl_pColor,
                    1,
                    (ImageSubresourceRange*)&pRanges
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdClearDepthStencilImage")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdClearDepthStencilImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle* image,
            ImageLayout imageLayout,
            [NativeTypeName("const VkClearDepthStencilValue *")]
                ClearDepthStencilValue* pDepthStencil,
            [NativeTypeName("uint32_t")] uint rangeCount,
            [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange* pRanges
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdClearDepthStencilImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdClearDepthStencilImage(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImage")] Ref<ImageHandle> image,
            ImageLayout imageLayout,
            [NativeTypeName("const VkClearDepthStencilValue *")]
                Ref<ClearDepthStencilValue> pDepthStencil,
            [NativeTypeName("uint32_t")] uint rangeCount,
            [NativeTypeName("const VkImageSubresourceRange *")] Ref<ImageSubresourceRange> pRanges
        )
        {
            fixed (ImageSubresourceRange* __dsl_pRanges = pRanges)
            fixed (ClearDepthStencilValue* __dsl_pDepthStencil = pDepthStencil)
            fixed (ImageHandle* __dsl_image = image)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdClearDepthStencilImage(
                    __dsl_commandBuffer,
                    __dsl_image,
                    imageLayout,
                    __dsl_pDepthStencil,
                    rangeCount,
                    __dsl_pRanges
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdClearDepthStencilImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdClearDepthStencilImage(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImage")] Ref<ImageHandle> image,
            ImageLayout imageLayout,
            [NativeTypeName("const VkClearDepthStencilValue *")]
                Ref<ClearDepthStencilValue> pDepthStencil,
            [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange pRanges
        )
        {
            fixed (ClearDepthStencilValue* __dsl_pDepthStencil = pDepthStencil)
            fixed (ImageHandle* __dsl_image = image)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdClearDepthStencilImage(
                    __dsl_commandBuffer,
                    __dsl_image,
                    imageLayout,
                    __dsl_pDepthStencil,
                    1,
                    (ImageSubresourceRange*)&pRanges
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdControlVideoCodingKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        public static extern void CmdControlVideoCodingKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkVideoCodingControlInfoKHR *")]
                VideoCodingControlInfoKHR* pCodingControlInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdControlVideoCodingKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdControlVideoCodingKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkVideoCodingControlInfoKHR *")]
                Ref<VideoCodingControlInfoKHR> pCodingControlInfo
        )
        {
            fixed (VideoCodingControlInfoKHR* __dsl_pCodingControlInfo = pCodingControlInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdControlVideoCodingKHR(__dsl_commandBuffer, __dsl_pCodingControlInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV"
        )]
        [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
        public static extern void CmdConvertCooperativeVectorMatrixNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
                ConvertCooperativeVectorMatrixInfoNV* pInfos
        );

        [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdConvertCooperativeVectorMatrixNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint infoCount,
            [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
                Ref<ConvertCooperativeVectorMatrixInfoNV> pInfos
        )
        {
            fixed (ConvertCooperativeVectorMatrixInfoNV* __dsl_pInfos = pInfos)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdConvertCooperativeVectorMatrixNV(__dsl_commandBuffer, infoCount, __dsl_pInfos);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdConvertCooperativeVectorMatrixNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
                ConvertCooperativeVectorMatrixInfoNV pInfos
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdConvertCooperativeVectorMatrixNV(
                    __dsl_commandBuffer,
                    1,
                    (ConvertCooperativeVectorMatrixInfoNV*)&pInfos
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdCopyAccelerationStructureKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdCopyAccelerationStructureKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
                CopyAccelerationStructureInfoKHR* pInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyAccelerationStructureKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
                Ref<CopyAccelerationStructureInfoKHR> pInfo
        )
        {
            fixed (CopyAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyAccelerationStructureKHR(__dsl_commandBuffer, __dsl_pInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyAccelerationStructureNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdCopyAccelerationStructureNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle* dst,
            [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle* src,
            CopyAccelerationStructureModeKHR mode
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyAccelerationStructureNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkAccelerationStructureNV")] Ref<AccelerationStructureNVHandle> dst,
            [NativeTypeName("VkAccelerationStructureNV")] Ref<AccelerationStructureNVHandle> src,
            CopyAccelerationStructureModeKHR mode
        )
        {
            fixed (AccelerationStructureNVHandle* __dsl_src = src)
            fixed (AccelerationStructureNVHandle* __dsl_dst = dst)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyAccelerationStructureNV(__dsl_commandBuffer, __dsl_dst, __dsl_src, mode);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdCopyAccelerationStructureToMemoryKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdCopyAccelerationStructureToMemoryKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
                CopyAccelerationStructureToMemoryInfoKHR* pInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureToMemoryKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyAccelerationStructureToMemoryKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
                Ref<CopyAccelerationStructureToMemoryInfoKHR> pInfo
        )
        {
            fixed (CopyAccelerationStructureToMemoryInfoKHR* __dsl_pInfo = pInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyAccelerationStructureToMemoryKHR(__dsl_commandBuffer, __dsl_pInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyBuffer")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdCopyBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* srcBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkBufferCopy *")] BufferCopy* pRegions
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBuffer(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> srcBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkBufferCopy *")] Ref<BufferCopy> pRegions
        )
        {
            fixed (BufferCopy* __dsl_pRegions = pRegions)
            fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
            fixed (BufferHandle* __dsl_srcBuffer = srcBuffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyBuffer(
                    __dsl_commandBuffer,
                    __dsl_srcBuffer,
                    __dsl_dstBuffer,
                    regionCount,
                    __dsl_pRegions
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBuffer(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> srcBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
            [NativeTypeName("const VkBufferCopy *")] BufferCopy pRegions
        )
        {
            fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
            fixed (BufferHandle* __dsl_srcBuffer = srcBuffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyBuffer(
                    __dsl_commandBuffer,
                    __dsl_srcBuffer,
                    __dsl_dstBuffer,
                    1,
                    (BufferCopy*)&pRegions
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyBuffer2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdCopyBuffer2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCopyBufferInfo2 *")] CopyBufferInfo2* pCopyBufferInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBuffer2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCopyBufferInfo2 *")] Ref<CopyBufferInfo2> pCopyBufferInfo
        )
        {
            fixed (CopyBufferInfo2* __dsl_pCopyBufferInfo = pCopyBufferInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyBuffer2(__dsl_commandBuffer, __dsl_pCopyBufferInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyBuffer2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdCopyBuffer2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCopyBufferInfo2 *")] CopyBufferInfo2* pCopyBufferInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBuffer2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCopyBufferInfo2 *")] Ref<CopyBufferInfo2> pCopyBufferInfo
        )
        {
            fixed (CopyBufferInfo2* __dsl_pCopyBufferInfo = pCopyBufferInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyBuffer2KHR(__dsl_commandBuffer, __dsl_pCopyBufferInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyBufferToImage")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdCopyBufferToImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* srcBuffer,
            [NativeTypeName("VkImage")] ImageHandle* dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy* pRegions
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBufferToImage(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> srcBuffer,
            [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkBufferImageCopy *")] Ref<BufferImageCopy> pRegions
        )
        {
            fixed (BufferImageCopy* __dsl_pRegions = pRegions)
            fixed (ImageHandle* __dsl_dstImage = dstImage)
            fixed (BufferHandle* __dsl_srcBuffer = srcBuffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyBufferToImage(
                    __dsl_commandBuffer,
                    __dsl_srcBuffer,
                    __dsl_dstImage,
                    dstImageLayout,
                    regionCount,
                    __dsl_pRegions
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBufferToImage(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> srcBuffer,
            [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy pRegions
        )
        {
            fixed (ImageHandle* __dsl_dstImage = dstImage)
            fixed (BufferHandle* __dsl_srcBuffer = srcBuffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyBufferToImage(
                    __dsl_commandBuffer,
                    __dsl_srcBuffer,
                    __dsl_dstImage,
                    dstImageLayout,
                    1,
                    (BufferImageCopy*)&pRegions
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyBufferToImage2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdCopyBufferToImage2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
                CopyBufferToImageInfo2* pCopyBufferToImageInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBufferToImage2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
                Ref<CopyBufferToImageInfo2> pCopyBufferToImageInfo
        )
        {
            fixed (CopyBufferToImageInfo2* __dsl_pCopyBufferToImageInfo = pCopyBufferToImageInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyBufferToImage2(__dsl_commandBuffer, __dsl_pCopyBufferToImageInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyBufferToImage2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdCopyBufferToImage2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
                CopyBufferToImageInfo2* pCopyBufferToImageInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyBufferToImage2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
                Ref<CopyBufferToImageInfo2> pCopyBufferToImageInfo
        )
        {
            fixed (CopyBufferToImageInfo2* __dsl_pCopyBufferToImageInfo = pCopyBufferToImageInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyBufferToImage2KHR(__dsl_commandBuffer, __dsl_pCopyBufferToImageInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyImage")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdCopyImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle* srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] ImageHandle* dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkImageCopy *")] ImageCopy* pRegions
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImage(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkImageCopy *")] Ref<ImageCopy> pRegions
        )
        {
            fixed (ImageCopy* __dsl_pRegions = pRegions)
            fixed (ImageHandle* __dsl_dstImage = dstImage)
            fixed (ImageHandle* __dsl_srcImage = srcImage)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyImage(
                    __dsl_commandBuffer,
                    __dsl_srcImage,
                    srcImageLayout,
                    __dsl_dstImage,
                    dstImageLayout,
                    regionCount,
                    __dsl_pRegions
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImage(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("const VkImageCopy *")] ImageCopy pRegions
        )
        {
            fixed (ImageHandle* __dsl_dstImage = dstImage)
            fixed (ImageHandle* __dsl_srcImage = srcImage)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyImage(
                    __dsl_commandBuffer,
                    __dsl_srcImage,
                    srcImageLayout,
                    __dsl_dstImage,
                    dstImageLayout,
                    1,
                    (ImageCopy*)&pRegions
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyImage2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdCopyImage2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCopyImageInfo2 *")] CopyImageInfo2* pCopyImageInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImage2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCopyImageInfo2 *")] Ref<CopyImageInfo2> pCopyImageInfo
        )
        {
            fixed (CopyImageInfo2* __dsl_pCopyImageInfo = pCopyImageInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyImage2(__dsl_commandBuffer, __dsl_pCopyImageInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyImage2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdCopyImage2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCopyImageInfo2 *")] CopyImageInfo2* pCopyImageInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImage2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCopyImageInfo2 *")] Ref<CopyImageInfo2> pCopyImageInfo
        )
        {
            fixed (CopyImageInfo2* __dsl_pCopyImageInfo = pCopyImageInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyImage2KHR(__dsl_commandBuffer, __dsl_pCopyImageInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyImageToBuffer")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdCopyImageToBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle* srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy* pRegions
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImageToBuffer(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkBufferImageCopy *")] Ref<BufferImageCopy> pRegions
        )
        {
            fixed (BufferImageCopy* __dsl_pRegions = pRegions)
            fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
            fixed (ImageHandle* __dsl_srcImage = srcImage)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyImageToBuffer(
                    __dsl_commandBuffer,
                    __dsl_srcImage,
                    srcImageLayout,
                    __dsl_dstBuffer,
                    regionCount,
                    __dsl_pRegions
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImageToBuffer(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
            [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy pRegions
        )
        {
            fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
            fixed (ImageHandle* __dsl_srcImage = srcImage)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyImageToBuffer(
                    __dsl_commandBuffer,
                    __dsl_srcImage,
                    srcImageLayout,
                    __dsl_dstBuffer,
                    1,
                    (BufferImageCopy*)&pRegions
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyImageToBuffer2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdCopyImageToBuffer2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
                CopyImageToBufferInfo2* pCopyImageToBufferInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImageToBuffer2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
                Ref<CopyImageToBufferInfo2> pCopyImageToBufferInfo
        )
        {
            fixed (CopyImageToBufferInfo2* __dsl_pCopyImageToBufferInfo = pCopyImageToBufferInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyImageToBuffer2(__dsl_commandBuffer, __dsl_pCopyImageToBufferInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyImageToBuffer2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdCopyImageToBuffer2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
                CopyImageToBufferInfo2* pCopyImageToBufferInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyImageToBuffer2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
                Ref<CopyImageToBufferInfo2> pCopyImageToBufferInfo
        )
        {
            fixed (CopyImageToBufferInfo2* __dsl_pCopyImageToBufferInfo = pCopyImageToBufferInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyImageToBuffer2KHR(__dsl_commandBuffer, __dsl_pCopyImageToBufferInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyMemoryIndirectNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_copy_memory_indirect"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdCopyMemoryIndirectNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
            [NativeTypeName("uint32_t")] uint copyCount,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_copy_memory_indirect"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryIndirectNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMemoryIndirectNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
            [NativeTypeName("uint32_t")] uint copyCount,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyMemoryIndirectNV(__dsl_commandBuffer, copyBufferAddress, copyCount, stride);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdCopyMemoryToAccelerationStructureKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdCopyMemoryToAccelerationStructureKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
                CopyMemoryToAccelerationStructureInfoKHR* pInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMemoryToAccelerationStructureKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
                Ref<CopyMemoryToAccelerationStructureInfoKHR> pInfo
        )
        {
            fixed (CopyMemoryToAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyMemoryToAccelerationStructureKHR(__dsl_commandBuffer, __dsl_pInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_copy_memory_indirect"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdCopyMemoryToImageIndirectNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
            [NativeTypeName("uint32_t")] uint copyCount,
            [NativeTypeName("uint32_t")] uint stride,
            [NativeTypeName("VkImage")] ImageHandle* dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("const VkImageSubresourceLayers *")]
                ImageSubresourceLayers* pImageSubresources
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_copy_memory_indirect"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMemoryToImageIndirectNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
            [NativeTypeName("uint32_t")] uint copyCount,
            [NativeTypeName("uint32_t")] uint stride,
            [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("const VkImageSubresourceLayers *")]
                Ref<ImageSubresourceLayers> pImageSubresources
        )
        {
            fixed (ImageSubresourceLayers* __dsl_pImageSubresources = pImageSubresources)
            fixed (ImageHandle* __dsl_dstImage = dstImage)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyMemoryToImageIndirectNV(
                    __dsl_commandBuffer,
                    copyBufferAddress,
                    copyCount,
                    stride,
                    __dsl_dstImage,
                    dstImageLayout,
                    __dsl_pImageSubresources
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_copy_memory_indirect"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMemoryToImageIndirectNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
            [NativeTypeName("uint32_t")] uint stride,
            [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("const VkImageSubresourceLayers *")]
                ImageSubresourceLayers pImageSubresources
        )
        {
            fixed (ImageHandle* __dsl_dstImage = dstImage)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyMemoryToImageIndirectNV(
                    __dsl_commandBuffer,
                    copyBufferAddress,
                    1,
                    stride,
                    __dsl_dstImage,
                    dstImageLayout,
                    (ImageSubresourceLayers*)&pImageSubresources
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyMemoryToMicromapEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdCopyMemoryToMicromapEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
                CopyMemoryToMicromapInfoEXT* pInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMemoryToMicromapEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
                Ref<CopyMemoryToMicromapInfoEXT> pInfo
        )
        {
            fixed (CopyMemoryToMicromapInfoEXT* __dsl_pInfo = pInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyMemoryToMicromapEXT(__dsl_commandBuffer, __dsl_pInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyMicromapEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdCopyMicromapEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCopyMicromapInfoEXT *")] CopyMicromapInfoEXT* pInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMicromapEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCopyMicromapInfoEXT *")] Ref<CopyMicromapInfoEXT> pInfo
        )
        {
            fixed (CopyMicromapInfoEXT* __dsl_pInfo = pInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyMicromapEXT(__dsl_commandBuffer, __dsl_pInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyMicromapToMemoryEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdCopyMicromapToMemoryEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
                CopyMicromapToMemoryInfoEXT* pInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapToMemoryEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyMicromapToMemoryEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
                Ref<CopyMicromapToMemoryInfoEXT> pInfo
        )
        {
            fixed (CopyMicromapToMemoryInfoEXT* __dsl_pInfo = pInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyMicromapToMemoryEXT(__dsl_commandBuffer, __dsl_pInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCopyQueryPoolResults")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdCopyQueryPoolResults(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount,
            [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("VkDeviceSize")] ulong stride,
            [NativeTypeName("VkQueryResultFlags")] uint flags
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCopyQueryPoolResults")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCopyQueryPoolResults(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("VkDeviceSize")] ulong stride,
            [NativeTypeName("VkQueryResultFlags")] uint flags
        )
        {
            fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCopyQueryPoolResults(
                    __dsl_commandBuffer,
                    __dsl_queryPool,
                    firstQuery,
                    queryCount,
                    __dsl_dstBuffer,
                    dstOffset,
                    stride,
                    flags
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCudaLaunchKernelNV")]
        [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
        public static extern void CmdCudaLaunchKernelNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCudaLaunchInfoNV *")] CudaLaunchInfoNV* pLaunchInfo
        );

        [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCudaLaunchKernelNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCudaLaunchKernelNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCudaLaunchInfoNV *")] Ref<CudaLaunchInfoNV> pLaunchInfo
        )
        {
            fixed (CudaLaunchInfoNV* __dsl_pLaunchInfo = pLaunchInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCudaLaunchKernelNV(__dsl_commandBuffer, __dsl_pLaunchInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdCuLaunchKernelNVX")]
        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        public static extern void CmdCuLaunchKernelNVX(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkCuLaunchInfoNVX *")] CuLaunchInfoNVX* pLaunchInfo
        );

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdCuLaunchKernelNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdCuLaunchKernelNVX(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCuLaunchInfoNVX *")] Ref<CuLaunchInfoNVX> pLaunchInfo
        )
        {
            fixed (CuLaunchInfoNVX* __dsl_pLaunchInfo = pLaunchInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdCuLaunchKernelNVX(__dsl_commandBuffer, __dsl_pLaunchInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDebugMarkerBeginEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        public static extern void CmdDebugMarkerBeginEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
                DebugMarkerMarkerInfoEXT* pMarkerInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerBeginEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDebugMarkerBeginEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
                Ref<DebugMarkerMarkerInfoEXT> pMarkerInfo
        )
        {
            fixed (DebugMarkerMarkerInfoEXT* __dsl_pMarkerInfo = pMarkerInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDebugMarkerBeginEXT(__dsl_commandBuffer, __dsl_pMarkerInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDebugMarkerEndEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        public static extern void CmdDebugMarkerEndEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerEndEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDebugMarkerEndEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDebugMarkerEndEXT(__dsl_commandBuffer);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDebugMarkerInsertEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        public static extern void CmdDebugMarkerInsertEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
                DebugMarkerMarkerInfoEXT* pMarkerInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerInsertEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDebugMarkerInsertEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
                Ref<DebugMarkerMarkerInfoEXT> pMarkerInfo
        )
        {
            fixed (DebugMarkerMarkerInfoEXT* __dsl_pMarkerInfo = pMarkerInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDebugMarkerInsertEXT(__dsl_commandBuffer, __dsl_pMarkerInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDecodeVideoKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_decode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdDecodeVideoKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkVideoDecodeInfoKHR *")] VideoDecodeInfoKHR* pDecodeInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_decode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDecodeVideoKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDecodeVideoKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkVideoDecodeInfoKHR *")] Ref<VideoDecodeInfoKHR> pDecodeInfo
        )
        {
            fixed (VideoDecodeInfoKHR* __dsl_pDecodeInfo = pDecodeInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDecodeVideoKHR(__dsl_commandBuffer, __dsl_pDecodeInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdDecompressMemoryIndirectCountNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_memory_decompression"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdDecompressMemoryIndirectCountNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsAddress,
            [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsCountAddress,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_memory_decompression"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryIndirectCountNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDecompressMemoryIndirectCountNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsAddress,
            [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsCountAddress,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDecompressMemoryIndirectCountNV(
                    __dsl_commandBuffer,
                    indirectCommandsAddress,
                    indirectCommandsCountAddress,
                    stride
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDecompressMemoryNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_memory_decompression"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdDecompressMemoryNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint decompressRegionCount,
            [NativeTypeName("const VkDecompressMemoryRegionNV *")]
                DecompressMemoryRegionNV* pDecompressMemoryRegions
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_memory_decompression"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDecompressMemoryNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint decompressRegionCount,
            [NativeTypeName("const VkDecompressMemoryRegionNV *")]
                Ref<DecompressMemoryRegionNV> pDecompressMemoryRegions
        )
        {
            fixed (
                DecompressMemoryRegionNV* __dsl_pDecompressMemoryRegions = pDecompressMemoryRegions
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDecompressMemoryNV(
                    __dsl_commandBuffer,
                    decompressRegionCount,
                    __dsl_pDecompressMemoryRegions
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_memory_decompression"],
            ImpliesSets = [
                "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_KHR_buffer_device_address+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDecompressMemoryNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkDecompressMemoryRegionNV *")]
                DecompressMemoryRegionNV pDecompressMemoryRegions
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDecompressMemoryNV(
                    __dsl_commandBuffer,
                    1,
                    (DecompressMemoryRegionNV*)&pDecompressMemoryRegions
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDispatch")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdDispatch(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDispatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDispatch(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDispatch(__dsl_commandBuffer, groupCountX, groupCountY, groupCountZ);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDispatchBase")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void CmdDispatchBase(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint baseGroupX,
            [NativeTypeName("uint32_t")] uint baseGroupY,
            [NativeTypeName("uint32_t")] uint baseGroupZ,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchBase")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDispatchBase(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint baseGroupX,
            [NativeTypeName("uint32_t")] uint baseGroupY,
            [NativeTypeName("uint32_t")] uint baseGroupZ,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDispatchBase(
                    __dsl_commandBuffer,
                    baseGroupX,
                    baseGroupY,
                    baseGroupZ,
                    groupCountX,
                    groupCountY,
                    groupCountZ
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDispatchBaseKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_device_group"],
            ImpliesSets = ["VK_KHR_device_group_creation"]
        )]
        public static extern void CmdDispatchBaseKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint baseGroupX,
            [NativeTypeName("uint32_t")] uint baseGroupY,
            [NativeTypeName("uint32_t")] uint baseGroupZ,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_device_group"],
            ImpliesSets = ["VK_KHR_device_group_creation"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchBaseKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDispatchBaseKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint baseGroupX,
            [NativeTypeName("uint32_t")] uint baseGroupY,
            [NativeTypeName("uint32_t")] uint baseGroupZ,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDispatchBaseKHR(
                    __dsl_commandBuffer,
                    baseGroupX,
                    baseGroupY,
                    baseGroupZ,
                    groupCountX,
                    groupCountY,
                    groupCountZ
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDispatchIndirect")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdDispatchIndirect(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchIndirect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDispatchIndirect(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset
        )
        {
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDispatchIndirect(__dsl_commandBuffer, __dsl_buffer, offset);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDispatchTileQCOM")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_shading"],
            ImpliesSets = [
                "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
            ]
        )]
        public static extern void CmdDispatchTileQCOM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_shading"],
            ImpliesSets = [
                "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchTileQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDispatchTileQCOM(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDispatchTileQCOM(__dsl_commandBuffer);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDraw")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdDraw(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint vertexCount,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstVertex,
            [NativeTypeName("uint32_t")] uint firstInstance
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDraw")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDraw(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint vertexCount,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstVertex,
            [NativeTypeName("uint32_t")] uint firstInstance
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDraw(
                    __dsl_commandBuffer,
                    vertexCount,
                    instanceCount,
                    firstVertex,
                    firstInstance
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawClusterHUAWEI")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_cluster_culling_shader"],
            ImpliesSets = [
                "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
                "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdDrawClusterHuawei(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_cluster_culling_shader"],
            ImpliesSets = [
                "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
                "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawClusterHUAWEI")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawClusterHuawei(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawClusterHuawei(__dsl_commandBuffer, groupCountX, groupCountY, groupCountZ);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawClusterIndirectHUAWEI")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_cluster_culling_shader"],
            ImpliesSets = [
                "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
                "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdDrawClusterIndirectHuawei(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_cluster_culling_shader"],
            ImpliesSets = [
                "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
                "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawClusterIndirectHUAWEI")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawClusterIndirectHuawei(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset
        )
        {
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawClusterIndirectHuawei(__dsl_commandBuffer, __dsl_buffer, offset);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawIndexed")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdDrawIndexed(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint indexCount,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstIndex,
            [NativeTypeName("int32_t")] int vertexOffset,
            [NativeTypeName("uint32_t")] uint firstInstance
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexed")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndexed(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint indexCount,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstIndex,
            [NativeTypeName("int32_t")] int vertexOffset,
            [NativeTypeName("uint32_t")] uint firstInstance
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawIndexed(
                    __dsl_commandBuffer,
                    indexCount,
                    instanceCount,
                    firstIndex,
                    vertexOffset,
                    firstInstance
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawIndexedIndirect")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdDrawIndexedIndirect(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndexedIndirect(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawIndexedIndirect(
                    __dsl_commandBuffer,
                    __dsl_buffer,
                    offset,
                    drawCount,
                    stride
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawIndexedIndirectCount")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        public static extern void CmdDrawIndexedIndirectCount(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndexedIndirectCount(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (BufferHandle* __dsl_countBuffer = countBuffer)
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawIndexedIndirectCount(
                    __dsl_commandBuffer,
                    __dsl_buffer,
                    offset,
                    __dsl_countBuffer,
                    countBufferOffset,
                    maxDrawCount,
                    stride
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawIndexedIndirectCountAMD")]
        [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
        public static extern void CmdDrawIndexedIndirectCountAMD(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCountAMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndexedIndirectCountAMD(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (BufferHandle* __dsl_countBuffer = countBuffer)
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawIndexedIndirectCountAMD(
                    __dsl_commandBuffer,
                    __dsl_buffer,
                    offset,
                    __dsl_countBuffer,
                    countBufferOffset,
                    maxDrawCount,
                    stride
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawIndexedIndirectCountKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
        public static extern void CmdDrawIndexedIndirectCountKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCountKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndexedIndirectCountKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (BufferHandle* __dsl_countBuffer = countBuffer)
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawIndexedIndirectCountKHR(
                    __dsl_commandBuffer,
                    __dsl_buffer,
                    offset,
                    __dsl_countBuffer,
                    countBufferOffset,
                    maxDrawCount,
                    stride
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawIndirect")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdDrawIndirect(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndirect(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawIndirect(__dsl_commandBuffer, __dsl_buffer, offset, drawCount, stride);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawIndirectByteCountEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdDrawIndirectByteCountEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("VkBuffer")] BufferHandle* counterBuffer,
            [NativeTypeName("VkDeviceSize")] ulong counterBufferOffset,
            [NativeTypeName("uint32_t")] uint counterOffset,
            [NativeTypeName("uint32_t")] uint vertexStride
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectByteCountEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndirectByteCountEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> counterBuffer,
            [NativeTypeName("VkDeviceSize")] ulong counterBufferOffset,
            [NativeTypeName("uint32_t")] uint counterOffset,
            [NativeTypeName("uint32_t")] uint vertexStride
        )
        {
            fixed (BufferHandle* __dsl_counterBuffer = counterBuffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawIndirectByteCountEXT(
                    __dsl_commandBuffer,
                    instanceCount,
                    firstInstance,
                    __dsl_counterBuffer,
                    counterBufferOffset,
                    counterOffset,
                    vertexStride
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawIndirectCount")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        public static extern void CmdDrawIndirectCount(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndirectCount(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (BufferHandle* __dsl_countBuffer = countBuffer)
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawIndirectCount(
                    __dsl_commandBuffer,
                    __dsl_buffer,
                    offset,
                    __dsl_countBuffer,
                    countBufferOffset,
                    maxDrawCount,
                    stride
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawIndirectCountAMD")]
        [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
        public static extern void CmdDrawIndirectCountAMD(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCountAMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndirectCountAMD(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (BufferHandle* __dsl_countBuffer = countBuffer)
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawIndirectCountAMD(
                    __dsl_commandBuffer,
                    __dsl_buffer,
                    offset,
                    __dsl_countBuffer,
                    countBufferOffset,
                    maxDrawCount,
                    stride
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawIndirectCountKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
        public static extern void CmdDrawIndirectCountKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCountKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawIndirectCountKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (BufferHandle* __dsl_countBuffer = countBuffer)
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawIndirectCountKHR(
                    __dsl_commandBuffer,
                    __dsl_buffer,
                    offset,
                    __dsl_countBuffer,
                    countBufferOffset,
                    maxDrawCount,
                    stride
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawMeshTasksEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_mesh_shader"],
            ImpliesSets = [
                "VK_EXT_mesh_shader+VK_KHR_spirv_1_4",
                "VK_EXT_mesh_shader+VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdDrawMeshTasksEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_mesh_shader"],
            ImpliesSets = [
                "VK_EXT_mesh_shader+VK_KHR_spirv_1_4",
                "VK_EXT_mesh_shader+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMeshTasksEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint groupCountX,
            [NativeTypeName("uint32_t")] uint groupCountY,
            [NativeTypeName("uint32_t")] uint groupCountZ
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawMeshTasksEXT(__dsl_commandBuffer, groupCountX, groupCountY, groupCountZ);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdDrawMeshTasksIndirectCountEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_mesh_shader+VK_KHR_draw_indirect_count", "VK_EXT_mesh_shader+VK_VERSION_1_2"],
            ImpliesSets = [
                "VK_EXT_mesh_shader+VK_KHR_spirv_1_4",
                "VK_EXT_mesh_shader+VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdDrawMeshTasksIndirectCountEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_mesh_shader+VK_KHR_draw_indirect_count", "VK_EXT_mesh_shader+VK_VERSION_1_2"],
            ImpliesSets = [
                "VK_EXT_mesh_shader+VK_KHR_spirv_1_4",
                "VK_EXT_mesh_shader+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectCountEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMeshTasksIndirectCountEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (BufferHandle* __dsl_countBuffer = countBuffer)
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawMeshTasksIndirectCountEXT(
                    __dsl_commandBuffer,
                    __dsl_buffer,
                    offset,
                    __dsl_countBuffer,
                    countBufferOffset,
                    maxDrawCount,
                    stride
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdDrawMeshTasksIndirectCountNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_mesh_shader+VK_KHR_draw_indirect_count", "VK_NV_mesh_shader+VK_VERSION_1_2"],
            ImpliesSets = [
                "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
                "VK_NV_mesh_shader+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdDrawMeshTasksIndirectCountNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_mesh_shader+VK_KHR_draw_indirect_count", "VK_NV_mesh_shader+VK_VERSION_1_2"],
            ImpliesSets = [
                "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
                "VK_NV_mesh_shader+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectCountNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMeshTasksIndirectCountNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
            [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
            [NativeTypeName("uint32_t")] uint maxDrawCount,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (BufferHandle* __dsl_countBuffer = countBuffer)
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawMeshTasksIndirectCountNV(
                    __dsl_commandBuffer,
                    __dsl_buffer,
                    offset,
                    __dsl_countBuffer,
                    countBufferOffset,
                    maxDrawCount,
                    stride
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawMeshTasksIndirectEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_mesh_shader"],
            ImpliesSets = [
                "VK_EXT_mesh_shader+VK_KHR_spirv_1_4",
                "VK_EXT_mesh_shader+VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdDrawMeshTasksIndirectEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_mesh_shader"],
            ImpliesSets = [
                "VK_EXT_mesh_shader+VK_KHR_spirv_1_4",
                "VK_EXT_mesh_shader+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMeshTasksIndirectEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawMeshTasksIndirectEXT(
                    __dsl_commandBuffer,
                    __dsl_buffer,
                    offset,
                    drawCount,
                    stride
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawMeshTasksIndirectNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_mesh_shader"],
            ImpliesSets = [
                "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
                "VK_NV_mesh_shader+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdDrawMeshTasksIndirectNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_mesh_shader"],
            ImpliesSets = [
                "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
                "VK_NV_mesh_shader+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMeshTasksIndirectNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawMeshTasksIndirectNV(
                    __dsl_commandBuffer,
                    __dsl_buffer,
                    offset,
                    drawCount,
                    stride
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawMeshTasksNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_mesh_shader"],
            ImpliesSets = [
                "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
                "VK_NV_mesh_shader+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdDrawMeshTasksNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint taskCount,
            [NativeTypeName("uint32_t")] uint firstTask
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_mesh_shader"],
            ImpliesSets = [
                "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
                "VK_NV_mesh_shader+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMeshTasksNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint taskCount,
            [NativeTypeName("uint32_t")] uint firstTask
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawMeshTasksNV(__dsl_commandBuffer, taskCount, firstTask);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawMultiEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_multi_draw"],
            ImpliesSets = [
                "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
                "VK_EXT_multi_draw+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdDrawMultiEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("const VkMultiDrawInfoEXT *")] MultiDrawInfoEXT* pVertexInfo,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("uint32_t")] uint stride
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_multi_draw"],
            ImpliesSets = [
                "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
                "VK_EXT_multi_draw+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMultiEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("const VkMultiDrawInfoEXT *")] Ref<MultiDrawInfoEXT> pVertexInfo,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (MultiDrawInfoEXT* __dsl_pVertexInfo = pVertexInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawMultiEXT(
                    __dsl_commandBuffer,
                    drawCount,
                    __dsl_pVertexInfo,
                    instanceCount,
                    firstInstance,
                    stride
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_multi_draw"],
            ImpliesSets = [
                "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
                "VK_EXT_multi_draw+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMultiEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkMultiDrawInfoEXT *")] MultiDrawInfoEXT pVertexInfo,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("uint32_t")] uint stride
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawMultiEXT(
                    __dsl_commandBuffer,
                    1,
                    (MultiDrawInfoEXT*)&pVertexInfo,
                    instanceCount,
                    firstInstance,
                    stride
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdDrawMultiIndexedEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_multi_draw"],
            ImpliesSets = [
                "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
                "VK_EXT_multi_draw+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdDrawMultiIndexedEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")]
                MultiDrawIndexedInfoEXT* pIndexInfo,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("uint32_t")] uint stride,
            [NativeTypeName("const int32_t *")] int* pVertexOffset
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_multi_draw"],
            ImpliesSets = [
                "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
                "VK_EXT_multi_draw+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiIndexedEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMultiIndexedEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint drawCount,
            [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")]
                Ref<MultiDrawIndexedInfoEXT> pIndexInfo,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("uint32_t")] uint stride,
            [NativeTypeName("const int32_t *")] Ref<int> pVertexOffset
        )
        {
            fixed (int* __dsl_pVertexOffset = pVertexOffset)
            fixed (MultiDrawIndexedInfoEXT* __dsl_pIndexInfo = pIndexInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawMultiIndexedEXT(
                    __dsl_commandBuffer,
                    drawCount,
                    __dsl_pIndexInfo,
                    instanceCount,
                    firstInstance,
                    stride,
                    __dsl_pVertexOffset
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_multi_draw"],
            ImpliesSets = [
                "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
                "VK_EXT_multi_draw+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiIndexedEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdDrawMultiIndexedEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")]
                MultiDrawIndexedInfoEXT pIndexInfo,
            [NativeTypeName("uint32_t")] uint instanceCount,
            [NativeTypeName("uint32_t")] uint firstInstance,
            [NativeTypeName("uint32_t")] uint stride,
            [NativeTypeName("const int32_t *")] Ref<int> pVertexOffset
        )
        {
            fixed (int* __dsl_pVertexOffset = pVertexOffset)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdDrawMultiIndexedEXT(
                    __dsl_commandBuffer,
                    1,
                    (MultiDrawIndexedInfoEXT*)&pIndexInfo,
                    instanceCount,
                    firstInstance,
                    stride,
                    __dsl_pVertexOffset
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdEncodeVideoKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_encode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdEncodeVideoKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkVideoEncodeInfoKHR *")] VideoEncodeInfoKHR* pEncodeInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_encode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEncodeVideoKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEncodeVideoKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkVideoEncodeInfoKHR *")] Ref<VideoEncodeInfoKHR> pEncodeInfo
        )
        {
            fixed (VideoEncodeInfoKHR* __dsl_pEncodeInfo = pEncodeInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdEncodeVideoKHR(__dsl_commandBuffer, __dsl_pEncodeInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdEndConditionalRenderingEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_conditional_rendering"],
            ImpliesSets = [
                "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
                "VK_EXT_conditional_rendering+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdEndConditionalRenderingEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_conditional_rendering"],
            ImpliesSets = [
                "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
                "VK_EXT_conditional_rendering+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndConditionalRenderingEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndConditionalRenderingEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdEndConditionalRenderingEXT(__dsl_commandBuffer);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdEndDebugUtilsLabelEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        public static extern void CmdEndDebugUtilsLabelEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndDebugUtilsLabelEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdEndDebugUtilsLabelEXT(__dsl_commandBuffer);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdEndPerTileExecutionQCOM")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_shading"],
            ImpliesSets = [
                "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
            ]
        )]
        public static extern void CmdEndPerTileExecutionQCOM(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkPerTileEndInfoQCOM *")] PerTileEndInfoQCOM* pPerTileEndInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_shading"],
            ImpliesSets = [
                "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndPerTileExecutionQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndPerTileExecutionQCOM(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkPerTileEndInfoQCOM *")] Ref<PerTileEndInfoQCOM> pPerTileEndInfo
        )
        {
            fixed (PerTileEndInfoQCOM* __dsl_pPerTileEndInfo = pPerTileEndInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdEndPerTileExecutionQCOM(__dsl_commandBuffer, __dsl_pPerTileEndInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdEndQuery")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdEndQuery(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint query
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndQuery")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndQuery(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint query
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdEndQuery(__dsl_commandBuffer, __dsl_queryPool, query);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdEndQueryIndexedEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdEndQueryIndexedEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint query,
            [NativeTypeName("uint32_t")] uint index
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndQueryIndexedEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndQueryIndexedEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint query,
            [NativeTypeName("uint32_t")] uint index
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdEndQueryIndexedEXT(__dsl_commandBuffer, __dsl_queryPool, query, index);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdEndRendering")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdEndRendering(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRendering(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdEndRendering(__dsl_commandBuffer);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdEndRendering2EXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_fragment_density_map_offset"],
            ImpliesSets = [
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_VERSION_1_3",
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_VERSION_1_3",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_VERSION_1_3",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdEndRendering2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkRenderingEndInfoEXT *")] RenderingEndInfoEXT* pRenderingEndInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_fragment_density_map_offset"],
            ImpliesSets = [
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_VERSION_1_3",
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_VERSION_1_3",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_VERSION_1_3",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
                "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRendering2EXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkRenderingEndInfoEXT *")]
                Ref<RenderingEndInfoEXT> pRenderingEndInfo
        )
        {
            fixed (RenderingEndInfoEXT* __dsl_pRenderingEndInfo = pRenderingEndInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdEndRendering2EXT(__dsl_commandBuffer, __dsl_pRenderingEndInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdEndRenderingKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering"],
            ImpliesSets = [
                "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
                "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdEndRenderingKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering"],
            ImpliesSets = [
                "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
                "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderingKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRenderingKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdEndRenderingKHR(__dsl_commandBuffer);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdEndRenderPass")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdEndRenderPass(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRenderPass(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdEndRenderPass(__dsl_commandBuffer);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdEndRenderPass2")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        public static extern void CmdEndRenderPass2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRenderPass2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
        )
        {
            fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdEndRenderPass2(__dsl_commandBuffer, __dsl_pSubpassEndInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdEndRenderPass2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        public static extern void CmdEndRenderPass2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndRenderPass2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
        )
        {
            fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdEndRenderPass2KHR(__dsl_commandBuffer, __dsl_pSubpassEndInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdEndTransformFeedbackEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdEndTransformFeedbackEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstCounterBuffer,
            [NativeTypeName("uint32_t")] uint counterBufferCount,
            [NativeTypeName("const VkBuffer *")] BufferHandle** pCounterBuffers,
            [NativeTypeName("const VkDeviceSize *")] ulong* pCounterBufferOffsets
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
                "VK_EXT_transform_feedback+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndTransformFeedbackEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndTransformFeedbackEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstCounterBuffer,
            [NativeTypeName("uint32_t")] uint counterBufferCount,
            [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pCounterBuffers,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pCounterBufferOffsets
        )
        {
            fixed (ulong* __dsl_pCounterBufferOffsets = pCounterBufferOffsets)
            fixed (BufferHandle** __dsl_pCounterBuffers = pCounterBuffers)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdEndTransformFeedbackEXT(
                    __dsl_commandBuffer,
                    firstCounterBuffer,
                    counterBufferCount,
                    __dsl_pCounterBuffers,
                    __dsl_pCounterBufferOffsets
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdEndVideoCodingKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        public static extern void CmdEndVideoCodingKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkVideoEndCodingInfoKHR *")]
                VideoEndCodingInfoKHR* pEndCodingInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdEndVideoCodingKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdEndVideoCodingKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkVideoEndCodingInfoKHR *")]
                Ref<VideoEndCodingInfoKHR> pEndCodingInfo
        )
        {
            fixed (VideoEndCodingInfoKHR* __dsl_pEndCodingInfo = pEndCodingInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdEndVideoCodingKHR(__dsl_commandBuffer, __dsl_pEndCodingInfo);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteCommands")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdExecuteCommand(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
        )
        {
            fixed (CommandBufferHandle* __dsl_pCommandBuffers = pCommandBuffers)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdExecuteCommands(
                    __dsl_commandBuffer,
                    1,
                    (CommandBufferHandle**)&__dsl_pCommandBuffers
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdExecuteCommands")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdExecuteCommands(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint commandBufferCount,
            [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle** pCommandBuffers
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteCommands")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdExecuteCommands(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint commandBufferCount,
            [NativeTypeName("const VkCommandBuffer *")] Ref2D<CommandBufferHandle> pCommandBuffers
        )
        {
            fixed (CommandBufferHandle** __dsl_pCommandBuffers = pCommandBuffers)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdExecuteCommands(__dsl_commandBuffer, commandBufferCount, __dsl_pCommandBuffers);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdExecuteGeneratedCommandsEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdExecuteGeneratedCommandsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint isPreprocessed,
            [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
                GeneratedCommandsInfoEXT* pGeneratedCommandsInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdExecuteGeneratedCommandsEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint isPreprocessed,
            [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
                Ref<GeneratedCommandsInfoEXT> pGeneratedCommandsInfo
        )
        {
            fixed (GeneratedCommandsInfoEXT* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdExecuteGeneratedCommandsEXT(
                    __dsl_commandBuffer,
                    isPreprocessed,
                    __dsl_pGeneratedCommandsInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdExecuteGeneratedCommandsNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        public static extern void CmdExecuteGeneratedCommandsNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint isPreprocessed,
            [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
                GeneratedCommandsInfoNV* pGeneratedCommandsInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdExecuteGeneratedCommandsNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint isPreprocessed,
            [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
                Ref<GeneratedCommandsInfoNV> pGeneratedCommandsInfo
        )
        {
            fixed (GeneratedCommandsInfoNV* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdExecuteGeneratedCommandsNV(
                    __dsl_commandBuffer,
                    isPreprocessed,
                    __dsl_pGeneratedCommandsInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdFillBuffer")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdFillBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("VkDeviceSize")] ulong size,
            [NativeTypeName("uint32_t")] uint data
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdFillBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdFillBuffer(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("VkDeviceSize")] ulong size,
            [NativeTypeName("uint32_t")] uint data
        )
        {
            fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdFillBuffer(__dsl_commandBuffer, __dsl_dstBuffer, dstOffset, size, data);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdInsertDebugUtilsLabelEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        public static extern void CmdInsertDebugUtilsLabelEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdInsertDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdInsertDebugUtilsLabelEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
        )
        {
            fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdInsertDebugUtilsLabelEXT(__dsl_commandBuffer, __dsl_pLabelInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdNextSubpass")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdNextSubpass(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            SubpassContents contents
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdNextSubpass(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            SubpassContents contents
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdNextSubpass(__dsl_commandBuffer, contents);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdNextSubpass2")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        public static extern void CmdNextSubpass2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo,
            [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdNextSubpass2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo,
            [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
        )
        {
            fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
            fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdNextSubpass2(
                    __dsl_commandBuffer,
                    __dsl_pSubpassBeginInfo,
                    __dsl_pSubpassEndInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdNextSubpass2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        public static extern void CmdNextSubpass2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo,
            [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdNextSubpass2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo,
            [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
        )
        {
            fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
            fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdNextSubpass2KHR(
                    __dsl_commandBuffer,
                    __dsl_pSubpassBeginInfo,
                    __dsl_pSubpassEndInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdOpticalFlowExecuteNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdOpticalFlowExecuteNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle* session,
            [NativeTypeName("const VkOpticalFlowExecuteInfoNV *")]
                OpticalFlowExecuteInfoNV* pExecuteInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdOpticalFlowExecuteNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdOpticalFlowExecuteNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkOpticalFlowSessionNV")] Ref<OpticalFlowSessionNVHandle> session,
            [NativeTypeName("const VkOpticalFlowExecuteInfoNV *")]
                Ref<OpticalFlowExecuteInfoNV> pExecuteInfo
        )
        {
            fixed (OpticalFlowExecuteInfoNV* __dsl_pExecuteInfo = pExecuteInfo)
            fixed (OpticalFlowSessionNVHandle* __dsl_session = session)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdOpticalFlowExecuteNV(__dsl_commandBuffer, __dsl_session, __dsl_pExecuteInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdPipelineBarrier")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdPipelineBarrier(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkPipelineStageFlags")] uint srcStageMask,
            [NativeTypeName("VkPipelineStageFlags")] uint dstStageMask,
            [NativeTypeName("VkDependencyFlags")] uint dependencyFlags,
            [NativeTypeName("uint32_t")] uint memoryBarrierCount,
            [NativeTypeName("const VkMemoryBarrier *")] MemoryBarrier* pMemoryBarriers,
            [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
            [NativeTypeName("const VkBufferMemoryBarrier *")]
                BufferMemoryBarrier* pBufferMemoryBarriers,
            [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
            [NativeTypeName("const VkImageMemoryBarrier *")]
                ImageMemoryBarrier* pImageMemoryBarriers
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPipelineBarrier(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkPipelineStageFlags")] uint srcStageMask,
            [NativeTypeName("VkPipelineStageFlags")] uint dstStageMask,
            [NativeTypeName("VkDependencyFlags")] uint dependencyFlags,
            [NativeTypeName("uint32_t")] uint memoryBarrierCount,
            [NativeTypeName("const VkMemoryBarrier *")] Ref<MemoryBarrier> pMemoryBarriers,
            [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
            [NativeTypeName("const VkBufferMemoryBarrier *")]
                Ref<BufferMemoryBarrier> pBufferMemoryBarriers,
            [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
            [NativeTypeName("const VkImageMemoryBarrier *")]
                Ref<ImageMemoryBarrier> pImageMemoryBarriers
        )
        {
            fixed (ImageMemoryBarrier* __dsl_pImageMemoryBarriers = pImageMemoryBarriers)
            fixed (BufferMemoryBarrier* __dsl_pBufferMemoryBarriers = pBufferMemoryBarriers)
            fixed (MemoryBarrier* __dsl_pMemoryBarriers = pMemoryBarriers)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPipelineBarrier(
                    __dsl_commandBuffer,
                    srcStageMask,
                    dstStageMask,
                    dependencyFlags,
                    memoryBarrierCount,
                    __dsl_pMemoryBarriers,
                    bufferMemoryBarrierCount,
                    __dsl_pBufferMemoryBarriers,
                    imageMemoryBarrierCount,
                    __dsl_pImageMemoryBarriers
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdPipelineBarrier2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdPipelineBarrier2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPipelineBarrier2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
        )
        {
            fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPipelineBarrier2(__dsl_commandBuffer, __dsl_pDependencyInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdPipelineBarrier2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdPipelineBarrier2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPipelineBarrier2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
        )
        {
            fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPipelineBarrier2KHR(__dsl_commandBuffer, __dsl_pDependencyInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdPreprocessGeneratedCommandsEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdPreprocessGeneratedCommandsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
                GeneratedCommandsInfoEXT* pGeneratedCommandsInfo,
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* stateCommandBuffer
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPreprocessGeneratedCommandsEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
                Ref<GeneratedCommandsInfoEXT> pGeneratedCommandsInfo,
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> stateCommandBuffer
        )
        {
            fixed (CommandBufferHandle* __dsl_stateCommandBuffer = stateCommandBuffer)
            fixed (GeneratedCommandsInfoEXT* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPreprocessGeneratedCommandsEXT(
                    __dsl_commandBuffer,
                    __dsl_pGeneratedCommandsInfo,
                    __dsl_stateCommandBuffer
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdPreprocessGeneratedCommandsNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        public static extern void CmdPreprocessGeneratedCommandsNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
                GeneratedCommandsInfoNV* pGeneratedCommandsInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPreprocessGeneratedCommandsNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
                Ref<GeneratedCommandsInfoNV> pGeneratedCommandsInfo
        )
        {
            fixed (GeneratedCommandsInfoNV* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPreprocessGeneratedCommandsNV(__dsl_commandBuffer, __dsl_pGeneratedCommandsInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdPushConstants")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdPushConstants(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
            [NativeTypeName("VkShaderStageFlags")] uint stageFlags,
            [NativeTypeName("uint32_t")] uint offset,
            [NativeTypeName("uint32_t")] uint size,
            [NativeTypeName("const void *")] void* pValues
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushConstants(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
            [NativeTypeName("VkShaderStageFlags")] uint stageFlags,
            [NativeTypeName("uint32_t")] uint offset,
            [NativeTypeName("uint32_t")] uint size,
            [NativeTypeName("const void *")] Ref pValues
        )
        {
            fixed (void* __dsl_pValues = pValues)
            fixed (PipelineLayoutHandle* __dsl_layout = layout)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPushConstants(
                    __dsl_commandBuffer,
                    __dsl_layout,
                    stageFlags,
                    offset,
                    size,
                    __dsl_pValues
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdPushConstants2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern void CmdPushConstants2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkPushConstantsInfo *")] PushConstantsInfo* pPushConstantsInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushConstants2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkPushConstantsInfo *")]
                Ref<PushConstantsInfo> pPushConstantsInfo
        )
        {
            fixed (PushConstantsInfo* __dsl_pPushConstantsInfo = pPushConstantsInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPushConstants2(__dsl_commandBuffer, __dsl_pPushConstantsInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdPushConstants2KHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
        public static extern void CmdPushConstants2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkPushConstantsInfo *")] PushConstantsInfo* pPushConstantsInfo
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushConstants2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkPushConstantsInfo *")]
                Ref<PushConstantsInfo> pPushConstantsInfo
        )
        {
            fixed (PushConstantsInfo* __dsl_pPushConstantsInfo = pPushConstantsInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPushConstants2KHR(__dsl_commandBuffer, __dsl_pPushConstantsInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdPushDescriptorSet")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern void CmdPushDescriptorSet(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("uint32_t")] uint descriptorWriteCount,
            [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSet(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("uint32_t")] uint descriptorWriteCount,
            [NativeTypeName("const VkWriteDescriptorSet *")]
                Ref<WriteDescriptorSet> pDescriptorWrites
        )
        {
            fixed (WriteDescriptorSet* __dsl_pDescriptorWrites = pDescriptorWrites)
            fixed (PipelineLayoutHandle* __dsl_layout = layout)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPushDescriptorSet(
                    __dsl_commandBuffer,
                    pipelineBindPoint,
                    __dsl_layout,
                    set,
                    descriptorWriteCount,
                    __dsl_pDescriptorWrites
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSet(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet pDescriptorWrites
        )
        {
            fixed (PipelineLayoutHandle* __dsl_layout = layout)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPushDescriptorSet(
                    __dsl_commandBuffer,
                    pipelineBindPoint,
                    __dsl_layout,
                    set,
                    1,
                    (WriteDescriptorSet*)&pDescriptorWrites
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdPushDescriptorSet2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern void CmdPushDescriptorSet2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetInfo *")]
                PushDescriptorSetInfo* pPushDescriptorSetInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSet2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetInfo *")]
                Ref<PushDescriptorSetInfo> pPushDescriptorSetInfo
        )
        {
            fixed (PushDescriptorSetInfo* __dsl_pPushDescriptorSetInfo = pPushDescriptorSetInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPushDescriptorSet2(__dsl_commandBuffer, __dsl_pPushDescriptorSetInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdPushDescriptorSet2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        public static extern void CmdPushDescriptorSet2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetInfo *")]
                PushDescriptorSetInfo* pPushDescriptorSetInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSet2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetInfo *")]
                Ref<PushDescriptorSetInfo> pPushDescriptorSetInfo
        )
        {
            fixed (PushDescriptorSetInfo* __dsl_pPushDescriptorSetInfo = pPushDescriptorSetInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPushDescriptorSet2KHR(__dsl_commandBuffer, __dsl_pPushDescriptorSetInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdPushDescriptorSetKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_push_descriptor"],
            ImpliesSets = [
                "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
                "VK_KHR_push_descriptor+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdPushDescriptorSetKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("uint32_t")] uint descriptorWriteCount,
            [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_push_descriptor"],
            ImpliesSets = [
                "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
                "VK_KHR_push_descriptor+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("uint32_t")] uint descriptorWriteCount,
            [NativeTypeName("const VkWriteDescriptorSet *")]
                Ref<WriteDescriptorSet> pDescriptorWrites
        )
        {
            fixed (WriteDescriptorSet* __dsl_pDescriptorWrites = pDescriptorWrites)
            fixed (PipelineLayoutHandle* __dsl_layout = layout)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPushDescriptorSetKHR(
                    __dsl_commandBuffer,
                    pipelineBindPoint,
                    __dsl_layout,
                    set,
                    descriptorWriteCount,
                    __dsl_pDescriptorWrites
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_push_descriptor"],
            ImpliesSets = [
                "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
                "VK_KHR_push_descriptor+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet pDescriptorWrites
        )
        {
            fixed (PipelineLayoutHandle* __dsl_layout = layout)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPushDescriptorSetKHR(
                    __dsl_commandBuffer,
                    pipelineBindPoint,
                    __dsl_layout,
                    set,
                    1,
                    (WriteDescriptorSet*)&pDescriptorWrites
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdPushDescriptorSetWithTemplate"
        )]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern void CmdPushDescriptorSetWithTemplate(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("const void *")] void* pData
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetWithTemplate(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
            [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("const void *")] Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (PipelineLayoutHandle* __dsl_layout = layout)
            fixed (
                DescriptorUpdateTemplateHandle* __dsl_descriptorUpdateTemplate =
                    descriptorUpdateTemplate
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPushDescriptorSetWithTemplate(
                    __dsl_commandBuffer,
                    __dsl_descriptorUpdateTemplate,
                    __dsl_layout,
                    set,
                    __dsl_pData
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdPushDescriptorSetWithTemplate2"
        )]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern void CmdPushDescriptorSetWithTemplate2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
                PushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetWithTemplate2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
                Ref<PushDescriptorSetWithTemplateInfo> pPushDescriptorSetWithTemplateInfo
        )
        {
            fixed (
                PushDescriptorSetWithTemplateInfo* __dsl_pPushDescriptorSetWithTemplateInfo =
                    pPushDescriptorSetWithTemplateInfo
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPushDescriptorSetWithTemplate2(
                    __dsl_commandBuffer,
                    __dsl_pPushDescriptorSetWithTemplateInfo
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdPushDescriptorSetWithTemplate2KHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        public static extern void CmdPushDescriptorSetWithTemplate2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
                PushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetWithTemplate2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
                Ref<PushDescriptorSetWithTemplateInfo> pPushDescriptorSetWithTemplateInfo
        )
        {
            fixed (
                PushDescriptorSetWithTemplateInfo* __dsl_pPushDescriptorSetWithTemplateInfo =
                    pPushDescriptorSetWithTemplateInfo
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPushDescriptorSetWithTemplate2KHR(
                    __dsl_commandBuffer,
                    __dsl_pPushDescriptorSetWithTemplateInfo
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdPushDescriptorSetWithTemplateKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_KHR_push_descriptor+VK_KHR_descriptor_update_template",
                "VK_KHR_push_descriptor+VK_VERSION_1_1",
            ],
            ImpliesSets = [
                "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
                "VK_KHR_push_descriptor+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdPushDescriptorSetWithTemplateKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("const void *")] void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_KHR_push_descriptor+VK_KHR_descriptor_update_template",
                "VK_KHR_push_descriptor+VK_VERSION_1_1",
            ],
            ImpliesSets = [
                "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
                "VK_KHR_push_descriptor+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdPushDescriptorSetWithTemplateKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
            [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
            [NativeTypeName("uint32_t")] uint set,
            [NativeTypeName("const void *")] Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (PipelineLayoutHandle* __dsl_layout = layout)
            fixed (
                DescriptorUpdateTemplateHandle* __dsl_descriptorUpdateTemplate =
                    descriptorUpdateTemplate
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdPushDescriptorSetWithTemplateKHR(
                    __dsl_commandBuffer,
                    __dsl_descriptorUpdateTemplate,
                    __dsl_layout,
                    set,
                    __dsl_pData
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdResetEvent")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdResetEvent(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkEvent")] EventHandle* @event,
            [NativeTypeName("VkPipelineStageFlags")] uint stageMask
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResetEvent(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
            [NativeTypeName("VkPipelineStageFlags")] uint stageMask
        )
        {
            fixed (EventHandle* __dsl_event = @event)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdResetEvent(__dsl_commandBuffer, __dsl_event, stageMask);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdResetEvent2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdResetEvent2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkEvent")] EventHandle* @event,
            [NativeTypeName("VkPipelineStageFlags2")] ulong stageMask
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResetEvent2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
            [NativeTypeName("VkPipelineStageFlags2")] ulong stageMask
        )
        {
            fixed (EventHandle* __dsl_event = @event)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdResetEvent2(__dsl_commandBuffer, __dsl_event, stageMask);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdResetEvent2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdResetEvent2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkEvent")] EventHandle* @event,
            [NativeTypeName("VkPipelineStageFlags2")] ulong stageMask
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResetEvent2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
            [NativeTypeName("VkPipelineStageFlags2")] ulong stageMask
        )
        {
            fixed (EventHandle* __dsl_event = @event)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdResetEvent2KHR(__dsl_commandBuffer, __dsl_event, stageMask);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdResetQueryPool")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdResetQueryPool(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResetQueryPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResetQueryPool(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdResetQueryPool(__dsl_commandBuffer, __dsl_queryPool, firstQuery, queryCount);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdResolveImage")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdResolveImage(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkImage")] ImageHandle* srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] ImageHandle* dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkImageResolve *")] ImageResolve* pRegions
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResolveImage(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("uint32_t")] uint regionCount,
            [NativeTypeName("const VkImageResolve *")] Ref<ImageResolve> pRegions
        )
        {
            fixed (ImageResolve* __dsl_pRegions = pRegions)
            fixed (ImageHandle* __dsl_dstImage = dstImage)
            fixed (ImageHandle* __dsl_srcImage = srcImage)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdResolveImage(
                    __dsl_commandBuffer,
                    __dsl_srcImage,
                    srcImageLayout,
                    __dsl_dstImage,
                    dstImageLayout,
                    regionCount,
                    __dsl_pRegions
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResolveImage(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
            ImageLayout srcImageLayout,
            [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
            ImageLayout dstImageLayout,
            [NativeTypeName("const VkImageResolve *")] ImageResolve pRegions
        )
        {
            fixed (ImageHandle* __dsl_dstImage = dstImage)
            fixed (ImageHandle* __dsl_srcImage = srcImage)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdResolveImage(
                    __dsl_commandBuffer,
                    __dsl_srcImage,
                    srcImageLayout,
                    __dsl_dstImage,
                    dstImageLayout,
                    1,
                    (ImageResolve*)&pRegions
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdResolveImage2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdResolveImage2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkResolveImageInfo2 *")] ResolveImageInfo2* pResolveImageInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResolveImage2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkResolveImageInfo2 *")] Ref<ResolveImageInfo2> pResolveImageInfo
        )
        {
            fixed (ResolveImageInfo2* __dsl_pResolveImageInfo = pResolveImageInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdResolveImage2(__dsl_commandBuffer, __dsl_pResolveImageInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdResolveImage2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdResolveImage2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkResolveImageInfo2 *")] ResolveImageInfo2* pResolveImageInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_copy_commands2"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdResolveImage2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkResolveImageInfo2 *")] Ref<ResolveImageInfo2> pResolveImageInfo
        )
        {
            fixed (ResolveImageInfo2* __dsl_pResolveImageInfo = pResolveImageInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdResolveImage2KHR(__dsl_commandBuffer, __dsl_pResolveImageInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetAlphaToCoverageEnableEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetAlphaToCoverageEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint alphaToCoverageEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetAlphaToCoverageEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetAlphaToCoverageEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint alphaToCoverageEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetAlphaToCoverageEnableEXT(__dsl_commandBuffer, alphaToCoverageEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetAlphaToOneEnableEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetAlphaToOneEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint alphaToOneEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetAlphaToOneEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetAlphaToOneEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint alphaToOneEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetAlphaToOneEnableEXT(__dsl_commandBuffer, alphaToOneEnable);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetAttachmentFeedbackLoopEnableEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_attachment_feedback_loop_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
                "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetAttachmentFeedbackLoopEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkImageAspectFlags")] uint aspectMask
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_attachment_feedback_loop_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
                "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetAttachmentFeedbackLoopEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetAttachmentFeedbackLoopEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkImageAspectFlags")] uint aspectMask
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetAttachmentFeedbackLoopEnableEXT(__dsl_commandBuffer, aspectMask);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetBlendConstants")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdSetBlendConstants(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const float[4]")] float* blendConstants
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetBlendConstants")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetBlendConstants(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const float[4]")] Ref<float> blendConstants
        )
        {
            fixed (float* __dsl_blendConstants = blendConstants)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetBlendConstants(__dsl_commandBuffer, __dsl_blendConstants);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetCheckpointNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_diagnostic_checkpoints"],
            ImpliesSets = [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetCheckpointNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const void *")] void* pCheckpointMarker
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_diagnostic_checkpoints"],
            ImpliesSets = [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCheckpointNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCheckpointNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const void *")] Ref pCheckpointMarker
        )
        {
            fixed (void* __dsl_pCheckpointMarker = pCheckpointMarker)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetCheckpointNV(__dsl_commandBuffer, __dsl_pCheckpointMarker);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetCoarseSampleOrderNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            CoarseSampleOrderTypeNV sampleOrderType,
            [NativeTypeName("uint32_t")] uint customSampleOrderCount,
            [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
                CoarseSampleOrderCustomNV* pCustomSampleOrders
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoarseSampleOrderNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            CoarseSampleOrderTypeNV sampleOrderType,
            [NativeTypeName("uint32_t")] uint customSampleOrderCount,
            [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
                Ref<CoarseSampleOrderCustomNV> pCustomSampleOrders
        )
        {
            fixed (CoarseSampleOrderCustomNV* __dsl_pCustomSampleOrders = pCustomSampleOrders)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetCoarseSampleOrderNV(
                    __dsl_commandBuffer,
                    sampleOrderType,
                    customSampleOrderCount,
                    __dsl_pCustomSampleOrders
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoarseSampleOrderNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            CoarseSampleOrderTypeNV sampleOrderType,
            [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
                CoarseSampleOrderCustomNV pCustomSampleOrders
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetCoarseSampleOrderNV(
                    __dsl_commandBuffer,
                    sampleOrderType,
                    1,
                    (CoarseSampleOrderCustomNV*)&pCustomSampleOrders
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetColorBlendAdvancedEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkColorBlendAdvancedEXT *")]
                ColorBlendAdvancedEXT* pColorBlendAdvanced
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendAdvancedEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkColorBlendAdvancedEXT *")]
                Ref<ColorBlendAdvancedEXT> pColorBlendAdvanced
        )
        {
            fixed (ColorBlendAdvancedEXT* __dsl_pColorBlendAdvanced = pColorBlendAdvanced)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetColorBlendAdvancedEXT(
                    __dsl_commandBuffer,
                    firstAttachment,
                    attachmentCount,
                    __dsl_pColorBlendAdvanced
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendAdvancedEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("const VkColorBlendAdvancedEXT *")]
                ColorBlendAdvancedEXT pColorBlendAdvanced
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetColorBlendAdvancedEXT(
                    __dsl_commandBuffer,
                    firstAttachment,
                    1,
                    (ColorBlendAdvancedEXT*)&pColorBlendAdvanced
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetColorBlendEnableEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetColorBlendEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkBool32 *")] uint* pColorBlendEnables
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkBool32 *")] Ref<uint> pColorBlendEnables
        )
        {
            fixed (uint* __dsl_pColorBlendEnables = pColorBlendEnables)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetColorBlendEnableEXT(
                    __dsl_commandBuffer,
                    firstAttachment,
                    attachmentCount,
                    __dsl_pColorBlendEnables
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("const VkBool32 *")] uint pColorBlendEnables
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetColorBlendEnableEXT(
                    __dsl_commandBuffer,
                    firstAttachment,
                    1,
                    (uint*)&pColorBlendEnables
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetColorBlendEquationEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetColorBlendEquationEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkColorBlendEquationEXT *")]
                ColorBlendEquationEXT* pColorBlendEquations
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEquationEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendEquationEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkColorBlendEquationEXT *")]
                Ref<ColorBlendEquationEXT> pColorBlendEquations
        )
        {
            fixed (ColorBlendEquationEXT* __dsl_pColorBlendEquations = pColorBlendEquations)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetColorBlendEquationEXT(
                    __dsl_commandBuffer,
                    firstAttachment,
                    attachmentCount,
                    __dsl_pColorBlendEquations
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEquationEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorBlendEquationEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("const VkColorBlendEquationEXT *")]
                ColorBlendEquationEXT pColorBlendEquations
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetColorBlendEquationEXT(
                    __dsl_commandBuffer,
                    firstAttachment,
                    1,
                    (ColorBlendEquationEXT*)&pColorBlendEquations
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetColorWriteEnableEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_color_write_enable"],
            ImpliesSets = [
                "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
                "VK_EXT_color_write_enable+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetColorWriteEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkBool32 *")] uint* pColorWriteEnables
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_color_write_enable"],
            ImpliesSets = [
                "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
                "VK_EXT_color_write_enable+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorWriteEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkBool32 *")] Ref<uint> pColorWriteEnables
        )
        {
            fixed (uint* __dsl_pColorWriteEnables = pColorWriteEnables)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetColorWriteEnableEXT(
                    __dsl_commandBuffer,
                    attachmentCount,
                    __dsl_pColorWriteEnables
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_color_write_enable"],
            ImpliesSets = [
                "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
                "VK_EXT_color_write_enable+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorWriteEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkBool32 *")] uint pColorWriteEnables
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetColorWriteEnableEXT(__dsl_commandBuffer, 1, (uint*)&pColorWriteEnables);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetColorWriteMaskEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetColorWriteMaskEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkColorComponentFlags *")] uint* pColorWriteMasks
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteMaskEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorWriteMaskEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("uint32_t")] uint attachmentCount,
            [NativeTypeName("const VkColorComponentFlags *")] Ref<uint> pColorWriteMasks
        )
        {
            fixed (uint* __dsl_pColorWriteMasks = pColorWriteMasks)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetColorWriteMaskEXT(
                    __dsl_commandBuffer,
                    firstAttachment,
                    attachmentCount,
                    __dsl_pColorWriteMasks
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteMaskEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetColorWriteMaskEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstAttachment,
            [NativeTypeName("const VkColorComponentFlags *")] uint pColorWriteMasks
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetColorWriteMaskEXT(
                    __dsl_commandBuffer,
                    firstAttachment,
                    1,
                    (uint*)&pColorWriteMasks
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetConservativeRasterizationModeEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_conservative_rasterization", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetConservativeRasterizationModeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            ConservativeRasterizationModeEXT conservativeRasterizationMode
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_conservative_rasterization", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetConservativeRasterizationModeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetConservativeRasterizationModeEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            ConservativeRasterizationModeEXT conservativeRasterizationMode
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetConservativeRasterizationModeEXT(
                    __dsl_commandBuffer,
                    conservativeRasterizationMode
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetCoverageModulationModeNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetCoverageModulationModeNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            CoverageModulationModeNV coverageModulationMode
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationModeNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageModulationModeNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            CoverageModulationModeNV coverageModulationMode
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetCoverageModulationModeNV(__dsl_commandBuffer, coverageModulationMode);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetCoverageModulationTableEnableNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetCoverageModulationTableEnableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint coverageModulationTableEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageModulationTableEnableNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint coverageModulationTableEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetCoverageModulationTableEnableNV(
                    __dsl_commandBuffer,
                    coverageModulationTableEnable
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetCoverageModulationTableNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetCoverageModulationTableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint coverageModulationTableCount,
            [NativeTypeName("const float *")] float* pCoverageModulationTable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageModulationTableNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint coverageModulationTableCount,
            [NativeTypeName("const float *")] Ref<float> pCoverageModulationTable
        )
        {
            fixed (float* __dsl_pCoverageModulationTable = pCoverageModulationTable)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetCoverageModulationTableNV(
                    __dsl_commandBuffer,
                    coverageModulationTableCount,
                    __dsl_pCoverageModulationTable
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageModulationTableNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const float *")] float pCoverageModulationTable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetCoverageModulationTableNV(
                    __dsl_commandBuffer,
                    1,
                    (float*)&pCoverageModulationTable
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetCoverageReductionModeNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_coverage_reduction_mode"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetCoverageReductionModeNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            CoverageReductionModeNV coverageReductionMode
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_coverage_reduction_mode"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageReductionModeNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageReductionModeNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            CoverageReductionModeNV coverageReductionMode
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetCoverageReductionModeNV(__dsl_commandBuffer, coverageReductionMode);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetCoverageToColorEnableNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_fragment_coverage_to_color"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetCoverageToColorEnableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint coverageToColorEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_fragment_coverage_to_color"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageToColorEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageToColorEnableNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint coverageToColorEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetCoverageToColorEnableNV(__dsl_commandBuffer, coverageToColorEnable);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetCoverageToColorLocationNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_fragment_coverage_to_color"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetCoverageToColorLocationNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint coverageToColorLocation
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_fragment_coverage_to_color"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageToColorLocationNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCoverageToColorLocationNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint coverageToColorLocation
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetCoverageToColorLocationNV(__dsl_commandBuffer, coverageToColorLocation);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetCullMode")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetCullMode(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkCullModeFlags")] uint cullMode
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCullMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCullMode(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkCullModeFlags")] uint cullMode
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetCullMode(__dsl_commandBuffer, cullMode);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetCullModeEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetCullModeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkCullModeFlags")] uint cullMode
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetCullModeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetCullModeEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkCullModeFlags")] uint cullMode
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetCullModeEXT(__dsl_commandBuffer, cullMode);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthBias")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdSetDepthBias(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            float depthBiasConstantFactor,
            float depthBiasClamp,
            float depthBiasSlopeFactor
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBias(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            float depthBiasConstantFactor,
            float depthBiasClamp,
            float depthBiasSlopeFactor
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthBias(
                    __dsl_commandBuffer,
                    depthBiasConstantFactor,
                    depthBiasClamp,
                    depthBiasSlopeFactor
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthBias2EXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_depth_bias_control"],
            ImpliesSets = [
                "VK_EXT_depth_bias_control+VK_KHR_get_physical_device_properties2",
                "VK_EXT_depth_bias_control+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetDepthBias2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkDepthBiasInfoEXT *")] DepthBiasInfoEXT* pDepthBiasInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_depth_bias_control"],
            ImpliesSets = [
                "VK_EXT_depth_bias_control+VK_KHR_get_physical_device_properties2",
                "VK_EXT_depth_bias_control+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBias2EXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkDepthBiasInfoEXT *")] Ref<DepthBiasInfoEXT> pDepthBiasInfo
        )
        {
            fixed (DepthBiasInfoEXT* __dsl_pDepthBiasInfo = pDepthBiasInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthBias2EXT(__dsl_commandBuffer, __dsl_pDepthBiasInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthBiasEnable")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetDepthBiasEnable(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint depthBiasEnable
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBiasEnable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBiasEnable(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint depthBiasEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthBiasEnable(__dsl_commandBuffer, depthBiasEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthBiasEnableEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetDepthBiasEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint depthBiasEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBiasEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBiasEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint depthBiasEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthBiasEnableEXT(__dsl_commandBuffer, depthBiasEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthBounds")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdSetDepthBounds(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            float minDepthBounds,
            float maxDepthBounds
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBounds(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            float minDepthBounds,
            float maxDepthBounds
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthBounds(__dsl_commandBuffer, minDepthBounds, maxDepthBounds);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthBoundsTestEnable")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetDepthBoundsTestEnable(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint depthBoundsTestEnable
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBoundsTestEnable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBoundsTestEnable(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint depthBoundsTestEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthBoundsTestEnable(__dsl_commandBuffer, depthBoundsTestEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthBoundsTestEnableEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetDepthBoundsTestEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint depthBoundsTestEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBoundsTestEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthBoundsTestEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint depthBoundsTestEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthBoundsTestEnableEXT(__dsl_commandBuffer, depthBoundsTestEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthClampEnableEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetDepthClampEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint depthClampEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthClampEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint depthClampEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthClampEnableEXT(__dsl_commandBuffer, depthClampEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthClampRangeEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_depth_clamp_control", "VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetDepthClampRangeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            DepthClampModeEXT depthClampMode,
            [NativeTypeName("const VkDepthClampRangeEXT *")] DepthClampRangeEXT* pDepthClampRange
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_depth_clamp_control", "VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampRangeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthClampRangeEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            DepthClampModeEXT depthClampMode,
            [NativeTypeName("const VkDepthClampRangeEXT *")]
                Ref<DepthClampRangeEXT> pDepthClampRange
        )
        {
            fixed (DepthClampRangeEXT* __dsl_pDepthClampRange = pDepthClampRange)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthClampRangeEXT(
                    __dsl_commandBuffer,
                    depthClampMode,
                    __dsl_pDepthClampRange
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthClipEnableEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_depth_clip_enable", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetDepthClipEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint depthClipEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_depth_clip_enable", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClipEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthClipEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint depthClipEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthClipEnableEXT(__dsl_commandBuffer, depthClipEnable);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetDepthClipNegativeOneToOneEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_depth_clip_control", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetDepthClipNegativeOneToOneEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint negativeOneToOne
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_depth_clip_control", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClipNegativeOneToOneEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthClipNegativeOneToOneEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint negativeOneToOne
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthClipNegativeOneToOneEXT(__dsl_commandBuffer, negativeOneToOne);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthCompareOp")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetDepthCompareOp(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            CompareOp depthCompareOp
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthCompareOp")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthCompareOp(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            CompareOp depthCompareOp
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthCompareOp(__dsl_commandBuffer, depthCompareOp);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthCompareOpEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetDepthCompareOpEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            CompareOp depthCompareOp
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthCompareOpEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthCompareOpEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            CompareOp depthCompareOp
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthCompareOpEXT(__dsl_commandBuffer, depthCompareOp);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthTestEnable")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetDepthTestEnable(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint depthTestEnable
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthTestEnable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthTestEnable(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint depthTestEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthTestEnable(__dsl_commandBuffer, depthTestEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthTestEnableEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetDepthTestEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint depthTestEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthTestEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthTestEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint depthTestEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthTestEnableEXT(__dsl_commandBuffer, depthTestEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthWriteEnable")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetDepthWriteEnable(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint depthWriteEnable
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthWriteEnable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthWriteEnable(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint depthWriteEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthWriteEnable(__dsl_commandBuffer, depthWriteEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDepthWriteEnableEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetDepthWriteEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint depthWriteEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthWriteEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDepthWriteEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint depthWriteEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDepthWriteEnableEXT(__dsl_commandBuffer, depthWriteEnable);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetDescriptorBufferOffsets2EXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        public static extern void CmdSetDescriptorBufferOffsets2EXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkSetDescriptorBufferOffsetsInfoEXT *")]
                SetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
            ImpliesSets = ["VK_VERSION_1_1"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsets2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDescriptorBufferOffsets2EXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkSetDescriptorBufferOffsetsInfoEXT *")]
                Ref<SetDescriptorBufferOffsetsInfoEXT> pSetDescriptorBufferOffsetsInfo
        )
        {
            fixed (
                SetDescriptorBufferOffsetsInfoEXT* __dsl_pSetDescriptorBufferOffsetsInfo =
                    pSetDescriptorBufferOffsetsInfo
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDescriptorBufferOffsets2EXT(
                    __dsl_commandBuffer,
                    __dsl_pSetDescriptorBufferOffsetsInfo
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetDescriptorBufferOffsetsEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdSetDescriptorBufferOffsetsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
            [NativeTypeName("uint32_t")] uint firstSet,
            [NativeTypeName("uint32_t")] uint setCount,
            [NativeTypeName("const uint32_t *")] uint* pBufferIndices,
            [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsetsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDescriptorBufferOffsetsEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
            [NativeTypeName("uint32_t")] uint firstSet,
            [NativeTypeName("uint32_t")] uint setCount,
            [NativeTypeName("const uint32_t *")] Ref<uint> pBufferIndices,
            [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets
        )
        {
            fixed (ulong* __dsl_pOffsets = pOffsets)
            fixed (uint* __dsl_pBufferIndices = pBufferIndices)
            fixed (PipelineLayoutHandle* __dsl_layout = layout)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDescriptorBufferOffsetsEXT(
                    __dsl_commandBuffer,
                    pipelineBindPoint,
                    __dsl_layout,
                    firstSet,
                    setCount,
                    __dsl_pBufferIndices,
                    __dsl_pOffsets
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDeviceMask")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void CmdSetDeviceMask(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint deviceMask
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDeviceMask")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDeviceMask(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint deviceMask
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDeviceMask(__dsl_commandBuffer, deviceMask);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDeviceMaskKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_device_group"],
            ImpliesSets = ["VK_KHR_device_group_creation"]
        )]
        public static extern void CmdSetDeviceMaskKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint deviceMask
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_device_group"],
            ImpliesSets = ["VK_KHR_device_group_creation"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDeviceMaskKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDeviceMaskKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint deviceMask
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDeviceMaskKHR(__dsl_commandBuffer, deviceMask);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetDiscardRectangleEnableEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_discard_rectangles"],
            ImpliesSets = [
                "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
                "VK_EXT_discard_rectangles+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetDiscardRectangleEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint discardRectangleEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_discard_rectangles"],
            ImpliesSets = [
                "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
                "VK_EXT_discard_rectangles+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDiscardRectangleEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint discardRectangleEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDiscardRectangleEnableEXT(__dsl_commandBuffer, discardRectangleEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDiscardRectangleEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_discard_rectangles"],
            ImpliesSets = [
                "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
                "VK_EXT_discard_rectangles+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetDiscardRectangleEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
            [NativeTypeName("uint32_t")] uint discardRectangleCount,
            [NativeTypeName("const VkRect2D *")] Rect2D* pDiscardRectangles
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_discard_rectangles"],
            ImpliesSets = [
                "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
                "VK_EXT_discard_rectangles+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDiscardRectangleEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
            [NativeTypeName("uint32_t")] uint discardRectangleCount,
            [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pDiscardRectangles
        )
        {
            fixed (Rect2D* __dsl_pDiscardRectangles = pDiscardRectangles)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDiscardRectangleEXT(
                    __dsl_commandBuffer,
                    firstDiscardRectangle,
                    discardRectangleCount,
                    __dsl_pDiscardRectangles
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_discard_rectangles"],
            ImpliesSets = [
                "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
                "VK_EXT_discard_rectangles+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDiscardRectangleEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
            [NativeTypeName("const VkRect2D *")] Rect2D pDiscardRectangles
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDiscardRectangleEXT(
                    __dsl_commandBuffer,
                    firstDiscardRectangle,
                    1,
                    (Rect2D*)&pDiscardRectangles
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetDiscardRectangleModeEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_discard_rectangles"],
            ImpliesSets = [
                "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
                "VK_EXT_discard_rectangles+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetDiscardRectangleModeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            DiscardRectangleModeEXT discardRectangleMode
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_discard_rectangles"],
            ImpliesSets = [
                "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
                "VK_EXT_discard_rectangles+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleModeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetDiscardRectangleModeEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            DiscardRectangleModeEXT discardRectangleMode
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetDiscardRectangleModeEXT(__dsl_commandBuffer, discardRectangleMode);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetEvent")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdSetEvent(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkEvent")] EventHandle* @event,
            [NativeTypeName("VkPipelineStageFlags")] uint stageMask
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetEvent(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
            [NativeTypeName("VkPipelineStageFlags")] uint stageMask
        )
        {
            fixed (EventHandle* __dsl_event = @event)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetEvent(__dsl_commandBuffer, __dsl_event, stageMask);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetEvent2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetEvent2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkEvent")] EventHandle* @event,
            [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetEvent2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
            [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
        )
        {
            fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
            fixed (EventHandle* __dsl_event = @event)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetEvent2(__dsl_commandBuffer, __dsl_event, __dsl_pDependencyInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetEvent2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetEvent2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkEvent")] EventHandle* @event,
            [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetEvent2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
            [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
        )
        {
            fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
            fixed (EventHandle* __dsl_event = @event)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetEvent2KHR(__dsl_commandBuffer, __dsl_event, __dsl_pDependencyInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_scissor_exclusive"],
            ImpliesSets = [
                "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
                "VK_NV_scissor_exclusive+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetExclusiveScissorEnableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
            [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
            [NativeTypeName("const VkBool32 *")] uint* pExclusiveScissorEnables
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_scissor_exclusive"],
            ImpliesSets = [
                "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
                "VK_NV_scissor_exclusive+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetExclusiveScissorEnableNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
            [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
            [NativeTypeName("const VkBool32 *")] Ref<uint> pExclusiveScissorEnables
        )
        {
            fixed (uint* __dsl_pExclusiveScissorEnables = pExclusiveScissorEnables)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetExclusiveScissorEnableNV(
                    __dsl_commandBuffer,
                    firstExclusiveScissor,
                    exclusiveScissorCount,
                    __dsl_pExclusiveScissorEnables
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_scissor_exclusive"],
            ImpliesSets = [
                "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
                "VK_NV_scissor_exclusive+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetExclusiveScissorEnableNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
            [NativeTypeName("const VkBool32 *")] uint pExclusiveScissorEnables
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetExclusiveScissorEnableNV(
                    __dsl_commandBuffer,
                    firstExclusiveScissor,
                    1,
                    (uint*)&pExclusiveScissorEnables
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetExclusiveScissorNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_scissor_exclusive"],
            ImpliesSets = [
                "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
                "VK_NV_scissor_exclusive+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetExclusiveScissorNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
            [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
            [NativeTypeName("const VkRect2D *")] Rect2D* pExclusiveScissors
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_scissor_exclusive"],
            ImpliesSets = [
                "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
                "VK_NV_scissor_exclusive+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetExclusiveScissorNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
            [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
            [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pExclusiveScissors
        )
        {
            fixed (Rect2D* __dsl_pExclusiveScissors = pExclusiveScissors)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetExclusiveScissorNV(
                    __dsl_commandBuffer,
                    firstExclusiveScissor,
                    exclusiveScissorCount,
                    __dsl_pExclusiveScissors
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_scissor_exclusive"],
            ImpliesSets = [
                "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
                "VK_NV_scissor_exclusive+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetExclusiveScissorNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
            [NativeTypeName("const VkRect2D *")] Rect2D pExclusiveScissors
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetExclusiveScissorNV(
                    __dsl_commandBuffer,
                    firstExclusiveScissor,
                    1,
                    (Rect2D*)&pExclusiveScissors
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetExtraPrimitiveOverestimationSizeEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_conservative_rasterization", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetExtraPrimitiveOverestimationSizeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            float extraPrimitiveOverestimationSize
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_conservative_rasterization", "VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetExtraPrimitiveOverestimationSizeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetExtraPrimitiveOverestimationSizeEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            float extraPrimitiveOverestimationSize
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetExtraPrimitiveOverestimationSizeEXT(
                    __dsl_commandBuffer,
                    extraPrimitiveOverestimationSize
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetFragmentShadingRateEnumNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_fragment_shading_rate_enums"],
            ImpliesSets = ["VK_KHR_fragment_shading_rate"]
        )]
        public static extern void CmdSetFragmentShadingRateEnumNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            FragmentShadingRateNV shadingRate,
            [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
                FragmentShadingRateCombinerOpKHR* combinerOps
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_fragment_shading_rate_enums"],
            ImpliesSets = ["VK_KHR_fragment_shading_rate"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateEnumNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetFragmentShadingRateEnumNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            FragmentShadingRateNV shadingRate,
            [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
                Ref<FragmentShadingRateCombinerOpKHR> combinerOps
        )
        {
            fixed (FragmentShadingRateCombinerOpKHR* __dsl_combinerOps = combinerOps)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetFragmentShadingRateEnumNV(
                    __dsl_commandBuffer,
                    shadingRate,
                    __dsl_combinerOps
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetFragmentShadingRateKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_fragment_shading_rate"],
            ImpliesSets = [
                "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_create_renderpass2+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdSetFragmentShadingRateKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkExtent2D *")] Extent2D* pFragmentSize,
            [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
                FragmentShadingRateCombinerOpKHR* combinerOps
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_fragment_shading_rate"],
            ImpliesSets = [
                "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_create_renderpass2+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetFragmentShadingRateKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkExtent2D *")] Ref<Extent2D> pFragmentSize,
            [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
                Ref<FragmentShadingRateCombinerOpKHR> combinerOps
        )
        {
            fixed (FragmentShadingRateCombinerOpKHR* __dsl_combinerOps = combinerOps)
            fixed (Extent2D* __dsl_pFragmentSize = pFragmentSize)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetFragmentShadingRateKHR(
                    __dsl_commandBuffer,
                    __dsl_pFragmentSize,
                    __dsl_combinerOps
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetFrontFace")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetFrontFace(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            FrontFace frontFace
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetFrontFace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetFrontFace(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            FrontFace frontFace
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetFrontFace(__dsl_commandBuffer, frontFace);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetFrontFaceEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetFrontFaceEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            FrontFace frontFace
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetFrontFaceEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetFrontFaceEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            FrontFace frontFace
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetFrontFaceEXT(__dsl_commandBuffer, frontFace);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetLineRasterizationModeEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_line_rasterization"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetLineRasterizationModeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkLineRasterizationModeEXT")]
                LineRasterizationMode lineRasterizationMode
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_line_rasterization"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineRasterizationModeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLineRasterizationModeEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkLineRasterizationModeEXT")]
                LineRasterizationMode lineRasterizationMode
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetLineRasterizationModeEXT(__dsl_commandBuffer, lineRasterizationMode);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetLineStipple")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern void CmdSetLineStipple(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint lineStippleFactor,
            [NativeTypeName("uint16_t")] ushort lineStipplePattern
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStipple")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLineStipple(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint lineStippleFactor,
            [NativeTypeName("uint16_t")] ushort lineStipplePattern
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetLineStipple(__dsl_commandBuffer, lineStippleFactor, lineStipplePattern);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetLineStippleEnableEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_line_rasterization"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetLineStippleEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint stippledLineEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_line_rasterization"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLineStippleEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint stippledLineEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetLineStippleEnableEXT(__dsl_commandBuffer, stippledLineEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetLineStippleEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_line_rasterization"],
            ImpliesSets = [
                "VK_EXT_line_rasterization+VK_KHR_get_physical_device_properties2",
                "VK_EXT_line_rasterization+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetLineStippleEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint lineStippleFactor,
            [NativeTypeName("uint16_t")] ushort lineStipplePattern
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_line_rasterization"],
            ImpliesSets = [
                "VK_EXT_line_rasterization+VK_KHR_get_physical_device_properties2",
                "VK_EXT_line_rasterization+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLineStippleEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint lineStippleFactor,
            [NativeTypeName("uint16_t")] ushort lineStipplePattern
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetLineStippleEXT(__dsl_commandBuffer, lineStippleFactor, lineStipplePattern);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetLineStippleKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_line_rasterization"],
            ImpliesSets = [
                "VK_KHR_line_rasterization+VK_KHR_get_physical_device_properties2",
                "VK_KHR_line_rasterization+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetLineStippleKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint lineStippleFactor,
            [NativeTypeName("uint16_t")] ushort lineStipplePattern
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_line_rasterization"],
            ImpliesSets = [
                "VK_KHR_line_rasterization+VK_KHR_get_physical_device_properties2",
                "VK_KHR_line_rasterization+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLineStippleKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint lineStippleFactor,
            [NativeTypeName("uint16_t")] ushort lineStipplePattern
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetLineStippleKHR(__dsl_commandBuffer, lineStippleFactor, lineStipplePattern);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetLineWidth")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdSetLineWidth(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            float lineWidth
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineWidth")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLineWidth(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            float lineWidth
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetLineWidth(__dsl_commandBuffer, lineWidth);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetLogicOpEnableEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetLogicOpEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint logicOpEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLogicOpEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLogicOpEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint logicOpEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetLogicOpEnableEXT(__dsl_commandBuffer, logicOpEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetLogicOpEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetLogicOpEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            LogicOp logicOp
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetLogicOpEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetLogicOpEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            LogicOp logicOp
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetLogicOpEXT(__dsl_commandBuffer, logicOp);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetPatchControlPointsEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetPatchControlPointsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint patchControlPoints
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPatchControlPointsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetPatchControlPointsEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint patchControlPoints
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetPatchControlPointsEXT(__dsl_commandBuffer, patchControlPoints);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetPerformanceMarkerINTEL")]
        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        public static extern Result CmdSetPerformanceMarkerIntel(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkPerformanceMarkerInfoINTEL *")]
                PerformanceMarkerInfoIntel* pMarkerInfo
        );

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceMarkerINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CmdSetPerformanceMarkerIntel(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkPerformanceMarkerInfoINTEL *")]
                Ref<PerformanceMarkerInfoIntel> pMarkerInfo
        )
        {
            fixed (PerformanceMarkerInfoIntel* __dsl_pMarkerInfo = pMarkerInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                return (Result)CmdSetPerformanceMarkerIntel(__dsl_commandBuffer, __dsl_pMarkerInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetPerformanceOverrideINTEL")]
        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        public static extern Result CmdSetPerformanceOverrideIntel(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkPerformanceOverrideInfoINTEL *")]
                PerformanceOverrideInfoIntel* pOverrideInfo
        );

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceOverrideINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CmdSetPerformanceOverrideIntel(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkPerformanceOverrideInfoINTEL *")]
                Ref<PerformanceOverrideInfoIntel> pOverrideInfo
        )
        {
            fixed (PerformanceOverrideInfoIntel* __dsl_pOverrideInfo = pOverrideInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                return (Result)CmdSetPerformanceOverrideIntel(
                    __dsl_commandBuffer,
                    __dsl_pOverrideInfo
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetPerformanceStreamMarkerINTEL"
        )]
        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        public static extern Result CmdSetPerformanceStreamMarkerIntel(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkPerformanceStreamMarkerInfoINTEL *")]
                PerformanceStreamMarkerInfoIntel* pMarkerInfo
        );

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceStreamMarkerINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CmdSetPerformanceStreamMarkerIntel(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkPerformanceStreamMarkerInfoINTEL *")]
                Ref<PerformanceStreamMarkerInfoIntel> pMarkerInfo
        )
        {
            fixed (PerformanceStreamMarkerInfoIntel* __dsl_pMarkerInfo = pMarkerInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                return (Result)CmdSetPerformanceStreamMarkerIntel(
                    __dsl_commandBuffer,
                    __dsl_pMarkerInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetPolygonModeEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetPolygonModeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            PolygonMode polygonMode
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPolygonModeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetPolygonModeEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            PolygonMode polygonMode
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetPolygonModeEXT(__dsl_commandBuffer, polygonMode);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetPrimitiveRestartEnable")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetPrimitiveRestartEnable(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint primitiveRestartEnable
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveRestartEnable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetPrimitiveRestartEnable(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint primitiveRestartEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetPrimitiveRestartEnable(__dsl_commandBuffer, primitiveRestartEnable);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetPrimitiveRestartEnableEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetPrimitiveRestartEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint primitiveRestartEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveRestartEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetPrimitiveRestartEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint primitiveRestartEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetPrimitiveRestartEnableEXT(__dsl_commandBuffer, primitiveRestartEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetPrimitiveTopology")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetPrimitiveTopology(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            PrimitiveTopology primitiveTopology
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveTopology")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetPrimitiveTopology(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            PrimitiveTopology primitiveTopology
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetPrimitiveTopology(__dsl_commandBuffer, primitiveTopology);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetPrimitiveTopologyEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetPrimitiveTopologyEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            PrimitiveTopology primitiveTopology
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveTopologyEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetPrimitiveTopologyEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            PrimitiveTopology primitiveTopology
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetPrimitiveTopologyEXT(__dsl_commandBuffer, primitiveTopology);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetProvokingVertexModeEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_provoking_vertex"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetProvokingVertexModeEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            ProvokingVertexModeEXT provokingVertexMode
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_provoking_vertex"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetProvokingVertexModeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetProvokingVertexModeEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            ProvokingVertexModeEXT provokingVertexMode
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetProvokingVertexModeEXT(__dsl_commandBuffer, provokingVertexMode);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetRasterizationSamplesEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetRasterizationSamplesEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags rasterizationSamples
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizationSamplesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRasterizationSamplesEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags rasterizationSamples
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetRasterizationSamplesEXT(__dsl_commandBuffer, rasterizationSamples);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetRasterizationStreamEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetRasterizationStreamEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint rasterizationStream
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_transform_feedback"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizationStreamEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRasterizationStreamEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint rasterizationStream
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetRasterizationStreamEXT(__dsl_commandBuffer, rasterizationStream);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetRasterizerDiscardEnable")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetRasterizerDiscardEnable(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint rasterizerDiscardEnable
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizerDiscardEnable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRasterizerDiscardEnable(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint rasterizerDiscardEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetRasterizerDiscardEnable(__dsl_commandBuffer, rasterizerDiscardEnable);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetRasterizerDiscardEnableEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetRasterizerDiscardEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint rasterizerDiscardEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state2"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizerDiscardEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRasterizerDiscardEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint rasterizerDiscardEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetRasterizerDiscardEnableEXT(__dsl_commandBuffer, rasterizerDiscardEnable);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetRayTracingPipelineStackSizeKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdSetRayTracingPipelineStackSizeKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint pipelineStackSize
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRayTracingPipelineStackSizeKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRayTracingPipelineStackSizeKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint pipelineStackSize
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetRayTracingPipelineStackSizeKHR(__dsl_commandBuffer, pipelineStackSize);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetRenderingAttachmentLocations"
        )]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern void CmdSetRenderingAttachmentLocations(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
                RenderingAttachmentLocationInfo* pLocationInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocations")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRenderingAttachmentLocations(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
                Ref<RenderingAttachmentLocationInfo> pLocationInfo
        )
        {
            fixed (RenderingAttachmentLocationInfo* __dsl_pLocationInfo = pLocationInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetRenderingAttachmentLocations(__dsl_commandBuffer, __dsl_pLocationInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetRenderingAttachmentLocationsKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering_local_read"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
                "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdSetRenderingAttachmentLocationsKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
                RenderingAttachmentLocationInfo* pLocationInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering_local_read"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
                "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocationsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRenderingAttachmentLocationsKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
                Ref<RenderingAttachmentLocationInfo> pLocationInfo
        )
        {
            fixed (RenderingAttachmentLocationInfo* __dsl_pLocationInfo = pLocationInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetRenderingAttachmentLocationsKHR(__dsl_commandBuffer, __dsl_pLocationInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetRenderingInputAttachmentIndices"
        )]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern void CmdSetRenderingInputAttachmentIndices(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
                RenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRenderingInputAttachmentIndices(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
                Ref<RenderingInputAttachmentIndexInfo> pInputAttachmentIndexInfo
        )
        {
            fixed (
                RenderingInputAttachmentIndexInfo* __dsl_pInputAttachmentIndexInfo =
                    pInputAttachmentIndexInfo
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetRenderingInputAttachmentIndices(
                    __dsl_commandBuffer,
                    __dsl_pInputAttachmentIndexInfo
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetRenderingInputAttachmentIndicesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering_local_read"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
                "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdSetRenderingInputAttachmentIndicesKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
                RenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_dynamic_rendering_local_read"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
                "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndicesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRenderingInputAttachmentIndicesKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
                Ref<RenderingInputAttachmentIndexInfo> pInputAttachmentIndexInfo
        )
        {
            fixed (
                RenderingInputAttachmentIndexInfo* __dsl_pInputAttachmentIndexInfo =
                    pInputAttachmentIndexInfo
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetRenderingInputAttachmentIndicesKHR(
                    __dsl_commandBuffer,
                    __dsl_pInputAttachmentIndexInfo
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetRepresentativeFragmentTestEnableNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_representative_fragment_test"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetRepresentativeFragmentTestEnableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint representativeFragmentTestEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_representative_fragment_test"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetRepresentativeFragmentTestEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetRepresentativeFragmentTestEnableNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint representativeFragmentTestEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetRepresentativeFragmentTestEnableNV(
                    __dsl_commandBuffer,
                    representativeFragmentTestEnable
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetSampleLocationsEnableEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_sample_locations"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetSampleLocationsEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint sampleLocationsEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_EXT_sample_locations"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetSampleLocationsEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint sampleLocationsEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetSampleLocationsEnableEXT(__dsl_commandBuffer, sampleLocationsEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetSampleLocationsEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_sample_locations"],
            ImpliesSets = [
                "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
                "VK_EXT_sample_locations+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetSampleLocationsEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkSampleLocationsInfoEXT *")]
                SampleLocationsInfoEXT* pSampleLocationsInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_sample_locations"],
            ImpliesSets = [
                "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
                "VK_EXT_sample_locations+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetSampleLocationsEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkSampleLocationsInfoEXT *")]
                Ref<SampleLocationsInfoEXT> pSampleLocationsInfo
        )
        {
            fixed (SampleLocationsInfoEXT* __dsl_pSampleLocationsInfo = pSampleLocationsInfo)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetSampleLocationsEXT(__dsl_commandBuffer, __dsl_pSampleLocationsInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetSampleMaskEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetSampleMaskEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
            [NativeTypeName("const VkSampleMask *")] uint* pSampleMask
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleMaskEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetSampleMaskEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
            [NativeTypeName("const VkSampleMask *")] Ref<uint> pSampleMask
        )
        {
            fixed (uint* __dsl_pSampleMask = pSampleMask)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetSampleMaskEXT(__dsl_commandBuffer, samples, __dsl_pSampleMask);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetScissor")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdSetScissor(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstScissor,
            [NativeTypeName("uint32_t")] uint scissorCount,
            [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissor(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstScissor,
            [NativeTypeName("uint32_t")] uint scissorCount,
            [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
        )
        {
            fixed (Rect2D* __dsl_pScissors = pScissors)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetScissor(__dsl_commandBuffer, firstScissor, scissorCount, __dsl_pScissors);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissor(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstScissor,
            [NativeTypeName("const VkRect2D *")] Rect2D pScissors
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetScissor(__dsl_commandBuffer, firstScissor, 1, (Rect2D*)&pScissors);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetScissorWithCount")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetScissorWithCount(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint scissorCount,
            [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissorWithCount(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint scissorCount,
            [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
        )
        {
            fixed (Rect2D* __dsl_pScissors = pScissors)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetScissorWithCount(__dsl_commandBuffer, scissorCount, __dsl_pScissors);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissorWithCount(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkRect2D *")] Rect2D pScissors
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetScissorWithCount(__dsl_commandBuffer, 1, (Rect2D*)&pScissors);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetScissorWithCountEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetScissorWithCountEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint scissorCount,
            [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCountEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissorWithCountEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint scissorCount,
            [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
        )
        {
            fixed (Rect2D* __dsl_pScissors = pScissors)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetScissorWithCountEXT(__dsl_commandBuffer, scissorCount, __dsl_pScissors);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCountEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetScissorWithCountEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkRect2D *")] Rect2D pScissors
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetScissorWithCountEXT(__dsl_commandBuffer, 1, (Rect2D*)&pScissors);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetShadingRateImageEnableNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetShadingRateImageEnableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint shadingRateImageEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetShadingRateImageEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetShadingRateImageEnableNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint shadingRateImageEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetShadingRateImageEnableNV(__dsl_commandBuffer, shadingRateImageEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetStencilCompareMask")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdSetStencilCompareMask(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
            [NativeTypeName("uint32_t")] uint compareMask
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilCompareMask")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetStencilCompareMask(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
            [NativeTypeName("uint32_t")] uint compareMask
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetStencilCompareMask(__dsl_commandBuffer, faceMask, compareMask);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetStencilOp")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetStencilOp(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
            StencilOp failOp,
            StencilOp passOp,
            StencilOp depthFailOp,
            CompareOp compareOp
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilOp")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetStencilOp(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
            StencilOp failOp,
            StencilOp passOp,
            StencilOp depthFailOp,
            CompareOp compareOp
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetStencilOp(
                    __dsl_commandBuffer,
                    faceMask,
                    failOp,
                    passOp,
                    depthFailOp,
                    compareOp
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetStencilOpEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetStencilOpEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
            StencilOp failOp,
            StencilOp passOp,
            StencilOp depthFailOp,
            CompareOp compareOp
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilOpEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetStencilOpEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
            StencilOp failOp,
            StencilOp passOp,
            StencilOp depthFailOp,
            CompareOp compareOp
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetStencilOpEXT(
                    __dsl_commandBuffer,
                    faceMask,
                    failOp,
                    passOp,
                    depthFailOp,
                    compareOp
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetStencilReference")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdSetStencilReference(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
            [NativeTypeName("uint32_t")] uint reference
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilReference")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetStencilReference(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
            [NativeTypeName("uint32_t")] uint reference
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetStencilReference(__dsl_commandBuffer, faceMask, reference);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetStencilTestEnable")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetStencilTestEnable(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint stencilTestEnable
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilTestEnable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetStencilTestEnable(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint stencilTestEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetStencilTestEnable(__dsl_commandBuffer, stencilTestEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetStencilTestEnableEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetStencilTestEnableEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint stencilTestEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilTestEnableEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetStencilTestEnableEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint stencilTestEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetStencilTestEnableEXT(__dsl_commandBuffer, stencilTestEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetStencilWriteMask")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdSetStencilWriteMask(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
            [NativeTypeName("uint32_t")] uint writeMask
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilWriteMask")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetStencilWriteMask(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
            [NativeTypeName("uint32_t")] uint writeMask
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetStencilWriteMask(__dsl_commandBuffer, faceMask, writeMask);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetTessellationDomainOriginEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_EXT_extended_dynamic_state3+VK_KHR_maintenance2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetTessellationDomainOriginEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            TessellationDomainOrigin domainOrigin
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_EXT_extended_dynamic_state3+VK_KHR_maintenance2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetTessellationDomainOriginEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetTessellationDomainOriginEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            TessellationDomainOrigin domainOrigin
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetTessellationDomainOriginEXT(__dsl_commandBuffer, domainOrigin);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetVertexInputEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_vertex_input_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_vertex_input_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_vertex_input_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetVertexInputEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint vertexBindingDescriptionCount,
            [NativeTypeName("const VkVertexInputBindingDescription2EXT *")]
                VertexInputBindingDescription2EXT* pVertexBindingDescriptions,
            [NativeTypeName("uint32_t")] uint vertexAttributeDescriptionCount,
            [NativeTypeName("const VkVertexInputAttributeDescription2EXT *")]
                VertexInputAttributeDescription2EXT* pVertexAttributeDescriptions
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_vertex_input_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_vertex_input_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_vertex_input_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetVertexInputEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetVertexInputEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint vertexBindingDescriptionCount,
            [NativeTypeName("const VkVertexInputBindingDescription2EXT *")]
                Ref<VertexInputBindingDescription2EXT> pVertexBindingDescriptions,
            [NativeTypeName("uint32_t")] uint vertexAttributeDescriptionCount,
            [NativeTypeName("const VkVertexInputAttributeDescription2EXT *")]
                Ref<VertexInputAttributeDescription2EXT> pVertexAttributeDescriptions
        )
        {
            fixed (
                VertexInputAttributeDescription2EXT* __dsl_pVertexAttributeDescriptions =
                    pVertexAttributeDescriptions
            )
            fixed (
                VertexInputBindingDescription2EXT* __dsl_pVertexBindingDescriptions =
                    pVertexBindingDescriptions
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetVertexInputEXT(
                    __dsl_commandBuffer,
                    vertexBindingDescriptionCount,
                    __dsl_pVertexBindingDescriptions,
                    vertexAttributeDescriptionCount,
                    __dsl_pVertexAttributeDescriptions
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetViewport")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdSetViewport(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewport *")] Viewport* pViewports
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewport(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
        )
        {
            fixed (Viewport* __dsl_pViewports = pViewports)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetViewport(__dsl_commandBuffer, firstViewport, viewportCount, __dsl_pViewports);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewport(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("const VkViewport *")] Viewport pViewports
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetViewport(__dsl_commandBuffer, firstViewport, 1, (Viewport*)&pViewports);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdSetViewportShadingRatePaletteNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetViewportShadingRatePaletteNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkShadingRatePaletteNV *")]
                ShadingRatePaletteNV* pShadingRatePalettes
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportShadingRatePaletteNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkShadingRatePaletteNV *")]
                Ref<ShadingRatePaletteNV> pShadingRatePalettes
        )
        {
            fixed (ShadingRatePaletteNV* __dsl_pShadingRatePalettes = pShadingRatePalettes)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetViewportShadingRatePaletteNV(
                    __dsl_commandBuffer,
                    firstViewport,
                    viewportCount,
                    __dsl_pShadingRatePalettes
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_shading_rate_image"],
            ImpliesSets = [
                "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
                "VK_NV_shading_rate_image+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportShadingRatePaletteNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("const VkShadingRatePaletteNV *")]
                ShadingRatePaletteNV pShadingRatePalettes
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetViewportShadingRatePaletteNV(
                    __dsl_commandBuffer,
                    firstViewport,
                    1,
                    (ShadingRatePaletteNV*)&pShadingRatePalettes
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetViewportSwizzleNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetViewportSwizzleNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewportSwizzleNV *")] ViewportSwizzleNV* pViewportSwizzles
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportSwizzleNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportSwizzleNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewportSwizzleNV *")] Ref<ViewportSwizzleNV> pViewportSwizzles
        )
        {
            fixed (ViewportSwizzleNV* __dsl_pViewportSwizzles = pViewportSwizzles)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetViewportSwizzleNV(
                    __dsl_commandBuffer,
                    firstViewport,
                    viewportCount,
                    __dsl_pViewportSwizzles
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportSwizzleNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportSwizzleNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("const VkViewportSwizzleNV *")] ViewportSwizzleNV pViewportSwizzles
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetViewportSwizzleNV(
                    __dsl_commandBuffer,
                    firstViewport,
                    1,
                    (ViewportSwizzleNV*)&pViewportSwizzles
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetViewportWithCount")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdSetViewportWithCount(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewport *")] Viewport* pViewports
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWithCount(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
        )
        {
            fixed (Viewport* __dsl_pViewports = pViewports)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetViewportWithCount(__dsl_commandBuffer, viewportCount, __dsl_pViewports);
            }
        }

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWithCount(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkViewport *")] Viewport pViewports
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetViewportWithCount(__dsl_commandBuffer, 1, (Viewport*)&pViewports);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetViewportWithCountEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdSetViewportWithCountEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewport *")] Viewport* pViewports
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCountEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWithCountEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
        )
        {
            fixed (Viewport* __dsl_pViewports = pViewports)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetViewportWithCountEXT(__dsl_commandBuffer, viewportCount, __dsl_pViewports);
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCountEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWithCountEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkViewport *")] Viewport pViewports
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetViewportWithCountEXT(__dsl_commandBuffer, 1, (Viewport*)&pViewports);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetViewportWScalingEnableNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_clip_space_w_scaling"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        public static extern void CmdSetViewportWScalingEnableNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBool32")] uint viewportWScalingEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_extended_dynamic_state3", "VK_NV_clip_space_w_scaling"],
            ImpliesSets = [
                "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
                "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
            ],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingEnableNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWScalingEnableNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBool32")] uint viewportWScalingEnable
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetViewportWScalingEnableNV(__dsl_commandBuffer, viewportWScalingEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSetViewportWScalingNV")]
        [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
        public static extern void CmdSetViewportWScalingNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewportWScalingNV *")] ViewportWScalingNV* pViewportWScalings
        );

        [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWScalingNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("uint32_t")] uint viewportCount,
            [NativeTypeName("const VkViewportWScalingNV *")]
                Ref<ViewportWScalingNV> pViewportWScalings
        )
        {
            fixed (ViewportWScalingNV* __dsl_pViewportWScalings = pViewportWScalings)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetViewportWScalingNV(
                    __dsl_commandBuffer,
                    firstViewport,
                    viewportCount,
                    __dsl_pViewportWScalings
                );
            }
        }

        [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSetViewportWScalingNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint firstViewport,
            [NativeTypeName("const VkViewportWScalingNV *")] ViewportWScalingNV pViewportWScalings
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSetViewportWScalingNV(
                    __dsl_commandBuffer,
                    firstViewport,
                    1,
                    (ViewportWScalingNV*)&pViewportWScalings
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdSubpassShadingHUAWEI")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_subpass_shading"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdSubpassShadingHuawei(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_subpass_shading"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdSubpassShadingHUAWEI")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdSubpassShadingHuawei(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdSubpassShadingHuawei(__dsl_commandBuffer);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdTraceRaysIndirect2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_maintenance1", "VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = ["VK_KHR_acceleration_structure"],
            RequireAll = true
        )]
        public static extern void CmdTraceRaysIndirect2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_maintenance1", "VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = ["VK_KHR_acceleration_structure"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirect2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdTraceRaysIndirect2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdTraceRaysIndirect2KHR(__dsl_commandBuffer, indirectDeviceAddress);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdTraceRaysIndirectKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdTraceRaysIndirectKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pMissShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pHitShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
            [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirectKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdTraceRaysIndirectKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pRaygenShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pMissShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pHitShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pCallableShaderBindingTable,
            [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
        )
        {
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pCallableShaderBindingTable =
                    pCallableShaderBindingTable
            )
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pHitShaderBindingTable = pHitShaderBindingTable
            )
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pMissShaderBindingTable =
                    pMissShaderBindingTable
            )
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pRaygenShaderBindingTable =
                    pRaygenShaderBindingTable
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdTraceRaysIndirectKHR(
                    __dsl_commandBuffer,
                    __dsl_pRaygenShaderBindingTable,
                    __dsl_pMissShaderBindingTable,
                    __dsl_pHitShaderBindingTable,
                    __dsl_pCallableShaderBindingTable,
                    indirectDeviceAddress
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdTraceRaysKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdTraceRaysKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pMissShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pHitShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                StridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
            [NativeTypeName("uint32_t")] uint width,
            [NativeTypeName("uint32_t")] uint height,
            [NativeTypeName("uint32_t")] uint depth
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdTraceRaysKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pRaygenShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pMissShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pHitShaderBindingTable,
            [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
                Ref<StridedDeviceAddressRegionKHR> pCallableShaderBindingTable,
            [NativeTypeName("uint32_t")] uint width,
            [NativeTypeName("uint32_t")] uint height,
            [NativeTypeName("uint32_t")] uint depth
        )
        {
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pCallableShaderBindingTable =
                    pCallableShaderBindingTable
            )
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pHitShaderBindingTable = pHitShaderBindingTable
            )
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pMissShaderBindingTable =
                    pMissShaderBindingTable
            )
            fixed (
                StridedDeviceAddressRegionKHR* __dsl_pRaygenShaderBindingTable =
                    pRaygenShaderBindingTable
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdTraceRaysKHR(
                    __dsl_commandBuffer,
                    __dsl_pRaygenShaderBindingTable,
                    __dsl_pMissShaderBindingTable,
                    __dsl_pHitShaderBindingTable,
                    __dsl_pCallableShaderBindingTable,
                    width,
                    height,
                    depth
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdTraceRaysNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdTraceRaysNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* raygenShaderBindingTableBuffer,
            [NativeTypeName("VkDeviceSize")] ulong raygenShaderBindingOffset,
            [NativeTypeName("VkBuffer")] BufferHandle* missShaderBindingTableBuffer,
            [NativeTypeName("VkDeviceSize")] ulong missShaderBindingOffset,
            [NativeTypeName("VkDeviceSize")] ulong missShaderBindingStride,
            [NativeTypeName("VkBuffer")] BufferHandle* hitShaderBindingTableBuffer,
            [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingOffset,
            [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingStride,
            [NativeTypeName("VkBuffer")] BufferHandle* callableShaderBindingTableBuffer,
            [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingOffset,
            [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingStride,
            [NativeTypeName("uint32_t")] uint width,
            [NativeTypeName("uint32_t")] uint height,
            [NativeTypeName("uint32_t")] uint depth
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdTraceRaysNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> raygenShaderBindingTableBuffer,
            [NativeTypeName("VkDeviceSize")] ulong raygenShaderBindingOffset,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> missShaderBindingTableBuffer,
            [NativeTypeName("VkDeviceSize")] ulong missShaderBindingOffset,
            [NativeTypeName("VkDeviceSize")] ulong missShaderBindingStride,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> hitShaderBindingTableBuffer,
            [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingOffset,
            [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingStride,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> callableShaderBindingTableBuffer,
            [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingOffset,
            [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingStride,
            [NativeTypeName("uint32_t")] uint width,
            [NativeTypeName("uint32_t")] uint height,
            [NativeTypeName("uint32_t")] uint depth
        )
        {
            fixed (
                BufferHandle* __dsl_callableShaderBindingTableBuffer =
                    callableShaderBindingTableBuffer
            )
            fixed (BufferHandle* __dsl_hitShaderBindingTableBuffer = hitShaderBindingTableBuffer)
            fixed (BufferHandle* __dsl_missShaderBindingTableBuffer = missShaderBindingTableBuffer)
            fixed (
                BufferHandle* __dsl_raygenShaderBindingTableBuffer = raygenShaderBindingTableBuffer
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdTraceRaysNV(
                    __dsl_commandBuffer,
                    __dsl_raygenShaderBindingTableBuffer,
                    raygenShaderBindingOffset,
                    __dsl_missShaderBindingTableBuffer,
                    missShaderBindingOffset,
                    missShaderBindingStride,
                    __dsl_hitShaderBindingTableBuffer,
                    hitShaderBindingOffset,
                    hitShaderBindingStride,
                    __dsl_callableShaderBindingTableBuffer,
                    callableShaderBindingOffset,
                    callableShaderBindingStride,
                    width,
                    height,
                    depth
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdUpdateBuffer")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdUpdateBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("VkDeviceSize")] ulong dataSize,
            [NativeTypeName("const void *")] void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdUpdateBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdUpdateBuffer(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("VkDeviceSize")] ulong dataSize,
            [NativeTypeName("const void *")] Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdUpdateBuffer(
                    __dsl_commandBuffer,
                    __dsl_dstBuffer,
                    dstOffset,
                    dataSize,
                    __dsl_pData
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdUpdatePipelineIndirectBufferNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands_compute"],
            ImpliesSets = ["VK_NV_device_generated_commands"]
        )]
        public static extern void CmdUpdatePipelineIndirectBufferNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipeline")] PipelineHandle* pipeline
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands_compute"],
            ImpliesSets = ["VK_NV_device_generated_commands"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdUpdatePipelineIndirectBufferNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdUpdatePipelineIndirectBufferNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            PipelineBindPoint pipelineBindPoint,
            [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline
        )
        {
            fixed (PipelineHandle* __dsl_pipeline = pipeline)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdUpdatePipelineIndirectBufferNV(
                    __dsl_commandBuffer,
                    pipelineBindPoint,
                    __dsl_pipeline
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdWaitEvents")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdWaitEvents(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint eventCount,
            [NativeTypeName("const VkEvent *")] EventHandle** pEvents,
            [NativeTypeName("VkPipelineStageFlags")] uint srcStageMask,
            [NativeTypeName("VkPipelineStageFlags")] uint dstStageMask,
            [NativeTypeName("uint32_t")] uint memoryBarrierCount,
            [NativeTypeName("const VkMemoryBarrier *")] MemoryBarrier* pMemoryBarriers,
            [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
            [NativeTypeName("const VkBufferMemoryBarrier *")]
                BufferMemoryBarrier* pBufferMemoryBarriers,
            [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
            [NativeTypeName("const VkImageMemoryBarrier *")]
                ImageMemoryBarrier* pImageMemoryBarriers
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWaitEvents(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint eventCount,
            [NativeTypeName("const VkEvent *")] Ref2D<EventHandle> pEvents,
            [NativeTypeName("VkPipelineStageFlags")] uint srcStageMask,
            [NativeTypeName("VkPipelineStageFlags")] uint dstStageMask,
            [NativeTypeName("uint32_t")] uint memoryBarrierCount,
            [NativeTypeName("const VkMemoryBarrier *")] Ref<MemoryBarrier> pMemoryBarriers,
            [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
            [NativeTypeName("const VkBufferMemoryBarrier *")]
                Ref<BufferMemoryBarrier> pBufferMemoryBarriers,
            [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
            [NativeTypeName("const VkImageMemoryBarrier *")]
                Ref<ImageMemoryBarrier> pImageMemoryBarriers
        )
        {
            fixed (ImageMemoryBarrier* __dsl_pImageMemoryBarriers = pImageMemoryBarriers)
            fixed (BufferMemoryBarrier* __dsl_pBufferMemoryBarriers = pBufferMemoryBarriers)
            fixed (MemoryBarrier* __dsl_pMemoryBarriers = pMemoryBarriers)
            fixed (EventHandle** __dsl_pEvents = pEvents)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdWaitEvents(
                    __dsl_commandBuffer,
                    eventCount,
                    __dsl_pEvents,
                    srcStageMask,
                    dstStageMask,
                    memoryBarrierCount,
                    __dsl_pMemoryBarriers,
                    bufferMemoryBarrierCount,
                    __dsl_pBufferMemoryBarriers,
                    imageMemoryBarrierCount,
                    __dsl_pImageMemoryBarriers
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdWaitEvents2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdWaitEvents2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint eventCount,
            [NativeTypeName("const VkEvent *")] EventHandle** pEvents,
            [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfos
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWaitEvents2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint eventCount,
            [NativeTypeName("const VkEvent *")] Ref2D<EventHandle> pEvents,
            [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfos
        )
        {
            fixed (DependencyInfo* __dsl_pDependencyInfos = pDependencyInfos)
            fixed (EventHandle** __dsl_pEvents = pEvents)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdWaitEvents2(
                    __dsl_commandBuffer,
                    eventCount,
                    __dsl_pEvents,
                    __dsl_pDependencyInfos
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdWaitEvents2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdWaitEvents2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint eventCount,
            [NativeTypeName("const VkEvent *")] EventHandle** pEvents,
            [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfos
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWaitEvents2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint eventCount,
            [NativeTypeName("const VkEvent *")] Ref2D<EventHandle> pEvents,
            [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfos
        )
        {
            fixed (DependencyInfo* __dsl_pDependencyInfos = pDependencyInfos)
            fixed (EventHandle** __dsl_pEvents = pEvents)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdWaitEvents2KHR(
                    __dsl_commandBuffer,
                    eventCount,
                    __dsl_pEvents,
                    __dsl_pDependencyInfos
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern void CmdWriteAccelerationStructuresPropertiesKHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint accelerationStructureCount,
            [NativeTypeName("const VkAccelerationStructureKHR *")]
                AccelerationStructureKHRHandle** pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteAccelerationStructuresPropertiesKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint accelerationStructureCount,
            [NativeTypeName("const VkAccelerationStructureKHR *")]
                Ref2D<AccelerationStructureKHRHandle> pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (
                AccelerationStructureKHRHandle** __dsl_pAccelerationStructures =
                    pAccelerationStructures
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdWriteAccelerationStructuresPropertiesKHR(
                    __dsl_commandBuffer,
                    accelerationStructureCount,
                    __dsl_pAccelerationStructures,
                    queryType,
                    __dsl_queryPool,
                    firstQuery
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteAccelerationStructuresPropertiesKHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkAccelerationStructureKHR *")]
                Ref<AccelerationStructureKHRHandle> pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (
                AccelerationStructureKHRHandle* __dsl_pAccelerationStructures =
                    pAccelerationStructures
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdWriteAccelerationStructuresPropertiesKHR(
                    __dsl_commandBuffer,
                    1,
                    (AccelerationStructureKHRHandle**)&__dsl_pAccelerationStructures,
                    queryType,
                    __dsl_queryPool,
                    firstQuery
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdWriteAccelerationStructuresPropertiesNV(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint accelerationStructureCount,
            [NativeTypeName("const VkAccelerationStructureNV *")]
                AccelerationStructureNVHandle** pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteAccelerationStructuresPropertiesNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint accelerationStructureCount,
            [NativeTypeName("const VkAccelerationStructureNV *")]
                Ref2D<AccelerationStructureNVHandle> pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (
                AccelerationStructureNVHandle** __dsl_pAccelerationStructures =
                    pAccelerationStructures
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdWriteAccelerationStructuresPropertiesNV(
                    __dsl_commandBuffer,
                    accelerationStructureCount,
                    __dsl_pAccelerationStructures,
                    queryType,
                    __dsl_queryPool,
                    firstQuery
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteAccelerationStructuresPropertiesNV(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkAccelerationStructureNV *")]
                Ref<AccelerationStructureNVHandle> pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (
                AccelerationStructureNVHandle* __dsl_pAccelerationStructures =
                    pAccelerationStructures
            )
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdWriteAccelerationStructuresPropertiesNV(
                    __dsl_commandBuffer,
                    1,
                    (AccelerationStructureNVHandle**)&__dsl_pAccelerationStructures,
                    queryType,
                    __dsl_queryPool,
                    firstQuery
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdWriteBufferMarker2AMD")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_AMD_buffer_marker+VK_KHR_synchronization2", "VK_AMD_buffer_marker+VK_VERSION_1_3"]
        )]
        public static extern void CmdWriteBufferMarker2AMD(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
            [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("uint32_t")] uint marker
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_AMD_buffer_marker+VK_KHR_synchronization2", "VK_AMD_buffer_marker+VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteBufferMarker2AMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteBufferMarker2AMD(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("uint32_t")] uint marker
        )
        {
            fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdWriteBufferMarker2AMD(
                    __dsl_commandBuffer,
                    stage,
                    __dsl_dstBuffer,
                    dstOffset,
                    marker
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdWriteBufferMarkerAMD")]
        [SupportedApiProfile("vulkan", ["VK_AMD_buffer_marker"])]
        public static extern void CmdWriteBufferMarkerAMD(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkPipelineStageFlagBits")] PipelineStageFlags pipelineStage,
            [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("uint32_t")] uint marker
        );

        [SupportedApiProfile("vulkan", ["VK_AMD_buffer_marker"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteBufferMarkerAMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteBufferMarkerAMD(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkPipelineStageFlagBits")] PipelineStageFlags pipelineStage,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
            [NativeTypeName("VkDeviceSize")] ulong dstOffset,
            [NativeTypeName("uint32_t")] uint marker
        )
        {
            fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdWriteBufferMarkerAMD(
                    __dsl_commandBuffer,
                    pipelineStage,
                    __dsl_dstBuffer,
                    dstOffset,
                    marker
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        public static extern void CmdWriteMicromapsPropertiesEXT(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("uint32_t")] uint micromapCount,
            [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle** pMicromaps,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteMicromapsPropertiesEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("uint32_t")] uint micromapCount,
            [NativeTypeName("const VkMicromapEXT *")] Ref2D<MicromapEXTHandle> pMicromaps,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (MicromapEXTHandle** __dsl_pMicromaps = pMicromaps)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdWriteMicromapsPropertiesEXT(
                    __dsl_commandBuffer,
                    micromapCount,
                    __dsl_pMicromaps,
                    queryType,
                    __dsl_queryPool,
                    firstQuery
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteMicromapsPropertiesEXT(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("const VkMicromapEXT *")] Ref<MicromapEXTHandle> pMicromaps,
            QueryType queryType,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (MicromapEXTHandle* __dsl_pMicromaps = pMicromaps)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdWriteMicromapsPropertiesEXT(
                    __dsl_commandBuffer,
                    1,
                    (MicromapEXTHandle**)&__dsl_pMicromaps,
                    queryType,
                    __dsl_queryPool,
                    firstQuery
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdWriteTimestamp")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void CmdWriteTimestamp(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkPipelineStageFlagBits")] PipelineStageFlags pipelineStage,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint query
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteTimestamp(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkPipelineStageFlagBits")] PipelineStageFlags pipelineStage,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint query
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdWriteTimestamp(__dsl_commandBuffer, pipelineStage, __dsl_queryPool, query);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdWriteTimestamp2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void CmdWriteTimestamp2(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint query
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteTimestamp2(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint query
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdWriteTimestamp2(__dsl_commandBuffer, stage, __dsl_queryPool, query);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCmdWriteTimestamp2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        public static extern void CmdWriteTimestamp2KHR(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint query
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CmdWriteTimestamp2KHR(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint query
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                CmdWriteTimestamp2KHR(__dsl_commandBuffer, stage, __dsl_queryPool, query);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCompileDeferredNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern Result CompileDeferredNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
            [NativeTypeName("uint32_t")] uint shader
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCompileDeferredNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CompileDeferredNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
            [NativeTypeName("uint32_t")] uint shader
        )
        {
            fixed (PipelineHandle* __dsl_pipeline = pipeline)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CompileDeferredNV(__dsl_device, __dsl_pipeline, shader);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkConvertCooperativeVectorMatrixNV"
        )]
        [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
        public static extern Result ConvertCooperativeVectorMatrixNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
                ConvertCooperativeVectorMatrixInfoNV* pInfo
        );

        [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkConvertCooperativeVectorMatrixNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ConvertCooperativeVectorMatrixNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
                Ref<ConvertCooperativeVectorMatrixInfoNV> pInfo
        )
        {
            fixed (ConvertCooperativeVectorMatrixInfoNV* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)ConvertCooperativeVectorMatrixNV(__dsl_device, __dsl_pInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCopyAccelerationStructureKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern Result CopyAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeferredOperationKHR")]
                DeferredOperationKHRHandle* deferredOperation,
            [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
                CopyAccelerationStructureInfoKHR* pInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeferredOperationKHR")]
                Ref<DeferredOperationKHRHandle> deferredOperation,
            [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
                Ref<CopyAccelerationStructureInfoKHR> pInfo
        )
        {
            fixed (CopyAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
            fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CopyAccelerationStructureKHR(
                    __dsl_device,
                    __dsl_deferredOperation,
                    __dsl_pInfo
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCopyAccelerationStructureToMemoryKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern Result CopyAccelerationStructureToMemoryKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeferredOperationKHR")]
                DeferredOperationKHRHandle* deferredOperation,
            [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
                CopyAccelerationStructureToMemoryInfoKHR* pInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureToMemoryKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyAccelerationStructureToMemoryKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeferredOperationKHR")]
                Ref<DeferredOperationKHRHandle> deferredOperation,
            [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
                Ref<CopyAccelerationStructureToMemoryInfoKHR> pInfo
        )
        {
            fixed (CopyAccelerationStructureToMemoryInfoKHR* __dsl_pInfo = pInfo)
            fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CopyAccelerationStructureToMemoryKHR(
                    __dsl_device,
                    __dsl_deferredOperation,
                    __dsl_pInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCopyImageToImage")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern Result CopyImageToImage(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkCopyImageToImageInfo *")]
                CopyImageToImageInfo* pCopyImageToImageInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyImageToImage(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkCopyImageToImageInfo *")]
                Ref<CopyImageToImageInfo> pCopyImageToImageInfo
        )
        {
            fixed (CopyImageToImageInfo* __dsl_pCopyImageToImageInfo = pCopyImageToImageInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CopyImageToImage(__dsl_device, __dsl_pCopyImageToImageInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCopyImageToImageEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result CopyImageToImageEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkCopyImageToImageInfo *")]
                CopyImageToImageInfo* pCopyImageToImageInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImageEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyImageToImageEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkCopyImageToImageInfo *")]
                Ref<CopyImageToImageInfo> pCopyImageToImageInfo
        )
        {
            fixed (CopyImageToImageInfo* __dsl_pCopyImageToImageInfo = pCopyImageToImageInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CopyImageToImageEXT(__dsl_device, __dsl_pCopyImageToImageInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCopyImageToMemory")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern Result CopyImageToMemory(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkCopyImageToMemoryInfo *")]
                CopyImageToMemoryInfo* pCopyImageToMemoryInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyImageToMemory(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkCopyImageToMemoryInfo *")]
                Ref<CopyImageToMemoryInfo> pCopyImageToMemoryInfo
        )
        {
            fixed (CopyImageToMemoryInfo* __dsl_pCopyImageToMemoryInfo = pCopyImageToMemoryInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CopyImageToMemory(__dsl_device, __dsl_pCopyImageToMemoryInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCopyImageToMemoryEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result CopyImageToMemoryEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkCopyImageToMemoryInfo *")]
                CopyImageToMemoryInfo* pCopyImageToMemoryInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemoryEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyImageToMemoryEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkCopyImageToMemoryInfo *")]
                Ref<CopyImageToMemoryInfo> pCopyImageToMemoryInfo
        )
        {
            fixed (CopyImageToMemoryInfo* __dsl_pCopyImageToMemoryInfo = pCopyImageToMemoryInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CopyImageToMemoryEXT(__dsl_device, __dsl_pCopyImageToMemoryInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCopyMemoryToAccelerationStructureKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern Result CopyMemoryToAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeferredOperationKHR")]
                DeferredOperationKHRHandle* deferredOperation,
            [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
                CopyMemoryToAccelerationStructureInfoKHR* pInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMemoryToAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeferredOperationKHR")]
                Ref<DeferredOperationKHRHandle> deferredOperation,
            [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
                Ref<CopyMemoryToAccelerationStructureInfoKHR> pInfo
        )
        {
            fixed (CopyMemoryToAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
            fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CopyMemoryToAccelerationStructureKHR(
                    __dsl_device,
                    __dsl_deferredOperation,
                    __dsl_pInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCopyMemoryToImage")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern Result CopyMemoryToImage(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkCopyMemoryToImageInfo *")]
                CopyMemoryToImageInfo* pCopyMemoryToImageInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMemoryToImage(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkCopyMemoryToImageInfo *")]
                Ref<CopyMemoryToImageInfo> pCopyMemoryToImageInfo
        )
        {
            fixed (CopyMemoryToImageInfo* __dsl_pCopyMemoryToImageInfo = pCopyMemoryToImageInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CopyMemoryToImage(__dsl_device, __dsl_pCopyMemoryToImageInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCopyMemoryToImageEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result CopyMemoryToImageEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkCopyMemoryToImageInfo *")]
                CopyMemoryToImageInfo* pCopyMemoryToImageInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImageEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMemoryToImageEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkCopyMemoryToImageInfo *")]
                Ref<CopyMemoryToImageInfo> pCopyMemoryToImageInfo
        )
        {
            fixed (CopyMemoryToImageInfo* __dsl_pCopyMemoryToImageInfo = pCopyMemoryToImageInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CopyMemoryToImageEXT(__dsl_device, __dsl_pCopyMemoryToImageInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCopyMemoryToMicromapEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        public static extern Result CopyMemoryToMicromapEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeferredOperationKHR")]
                DeferredOperationKHRHandle* deferredOperation,
            [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
                CopyMemoryToMicromapInfoEXT* pInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMemoryToMicromapEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeferredOperationKHR")]
                Ref<DeferredOperationKHRHandle> deferredOperation,
            [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
                Ref<CopyMemoryToMicromapInfoEXT> pInfo
        )
        {
            fixed (CopyMemoryToMicromapInfoEXT* __dsl_pInfo = pInfo)
            fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CopyMemoryToMicromapEXT(
                    __dsl_device,
                    __dsl_deferredOperation,
                    __dsl_pInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCopyMicromapEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        public static extern Result CopyMicromapEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeferredOperationKHR")]
                DeferredOperationKHRHandle* deferredOperation,
            [NativeTypeName("const VkCopyMicromapInfoEXT *")] CopyMicromapInfoEXT* pInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMicromapEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeferredOperationKHR")]
                Ref<DeferredOperationKHRHandle> deferredOperation,
            [NativeTypeName("const VkCopyMicromapInfoEXT *")] Ref<CopyMicromapInfoEXT> pInfo
        )
        {
            fixed (CopyMicromapInfoEXT* __dsl_pInfo = pInfo)
            fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CopyMicromapEXT(__dsl_device, __dsl_deferredOperation, __dsl_pInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCopyMicromapToMemoryEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        public static extern Result CopyMicromapToMemoryEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeferredOperationKHR")]
                DeferredOperationKHRHandle* deferredOperation,
            [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
                CopyMicromapToMemoryInfoEXT* pInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapToMemoryEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CopyMicromapToMemoryEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeferredOperationKHR")]
                Ref<DeferredOperationKHRHandle> deferredOperation,
            [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
                Ref<CopyMicromapToMemoryInfoEXT> pInfo
        )
        {
            fixed (CopyMicromapToMemoryInfoEXT* __dsl_pInfo = pInfo)
            fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CopyMicromapToMemoryEXT(
                    __dsl_device,
                    __dsl_deferredOperation,
                    __dsl_pInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateAccelerationStructureKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern Result CreateAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkAccelerationStructureCreateInfoKHR *")]
                AccelerationStructureCreateInfoKHR* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkAccelerationStructureKHR *")]
                AccelerationStructureKHRHandle** pAccelerationStructure
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkAccelerationStructureCreateInfoKHR *")]
                Ref<AccelerationStructureCreateInfoKHR> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkAccelerationStructureKHR *")]
                Ref2D<AccelerationStructureKHRHandle> pAccelerationStructure
        )
        {
            fixed (
                AccelerationStructureKHRHandle** __dsl_pAccelerationStructure =
                    pAccelerationStructure
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (AccelerationStructureCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateAccelerationStructureKHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pAccelerationStructure
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateAccelerationStructureNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern Result CreateAccelerationStructureNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkAccelerationStructureCreateInfoNV *")]
                AccelerationStructureCreateInfoNV* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkAccelerationStructureNV *")]
                AccelerationStructureNVHandle** pAccelerationStructure
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateAccelerationStructureNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkAccelerationStructureCreateInfoNV *")]
                Ref<AccelerationStructureCreateInfoNV> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkAccelerationStructureNV *")]
                Ref2D<AccelerationStructureNVHandle> pAccelerationStructure
        )
        {
            fixed (
                AccelerationStructureNVHandle** __dsl_pAccelerationStructure =
                    pAccelerationStructure
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (AccelerationStructureCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateAccelerationStructureNV(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pAccelerationStructure
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateBuffer")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateBuffer(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkBufferCreateInfo *")] BufferCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkBuffer *")] BufferHandle** pBuffer
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateBuffer(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkBufferCreateInfo *")] Ref<BufferCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkBuffer *")] Ref2D<BufferHandle> pBuffer
        )
        {
            fixed (BufferHandle** __dsl_pBuffer = pBuffer)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (BufferCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateBuffer(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pBuffer
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateBufferView")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateBufferView(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkBufferViewCreateInfo *")] BufferViewCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkBufferView *")] BufferViewHandle** pView
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateBufferView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateBufferView(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkBufferViewCreateInfo *")]
                Ref<BufferViewCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkBufferView *")] Ref2D<BufferViewHandle> pView
        )
        {
            fixed (BufferViewHandle** __dsl_pView = pView)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (BufferViewCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateBufferView(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pView
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateCommandPool")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateCommandPool(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkCommandPoolCreateInfo *")] CommandPoolCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkCommandPool *")] CommandPoolHandle** pCommandPool
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateCommandPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateCommandPool(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkCommandPoolCreateInfo *")]
                Ref<CommandPoolCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkCommandPool *")] Ref2D<CommandPoolHandle> pCommandPool
        )
        {
            fixed (CommandPoolHandle** __dsl_pCommandPool = pCommandPool)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (CommandPoolCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateCommandPool(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pCommandPool
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateComputePipelines")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateComputePipelines(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkComputePipelineCreateInfo *")]
                ComputePipelineCreateInfo* pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPipeline *")] PipelineHandle** pPipelines
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateComputePipelines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateComputePipelines(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkComputePipelineCreateInfo *")]
                Ref<ComputePipelineCreateInfo> pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPipeline *")] Ref2D<PipelineHandle> pPipelines
        )
        {
            fixed (PipelineHandle** __dsl_pPipelines = pPipelines)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ComputePipelineCreateInfo* __dsl_pCreateInfos = pCreateInfos)
            fixed (PipelineCacheHandle* __dsl_pipelineCache = pipelineCache)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateComputePipelines(
                    __dsl_device,
                    __dsl_pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateCudaFunctionNV")]
        [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
        public static extern Result CreateCudaFunctionNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkCudaFunctionCreateInfoNV *")]
                CudaFunctionCreateInfoNV* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkCudaFunctionNV *")] CudaFunctionNVHandle** pFunction
        );

        [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateCudaFunctionNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateCudaFunctionNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkCudaFunctionCreateInfoNV *")]
                Ref<CudaFunctionCreateInfoNV> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkCudaFunctionNV *")] Ref2D<CudaFunctionNVHandle> pFunction
        )
        {
            fixed (CudaFunctionNVHandle** __dsl_pFunction = pFunction)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (CudaFunctionCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateCudaFunctionNV(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pFunction
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateCudaModuleNV")]
        [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
        public static extern Result CreateCudaModuleNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkCudaModuleCreateInfoNV *")]
                CudaModuleCreateInfoNV* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkCudaModuleNV *")] CudaModuleNVHandle** pModule
        );

        [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateCudaModuleNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateCudaModuleNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkCudaModuleCreateInfoNV *")]
                Ref<CudaModuleCreateInfoNV> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkCudaModuleNV *")] Ref2D<CudaModuleNVHandle> pModule
        )
        {
            fixed (CudaModuleNVHandle** __dsl_pModule = pModule)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (CudaModuleCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateCudaModuleNV(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pModule
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateCuFunctionNVX")]
        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        public static extern Result CreateCuFunctionNVX(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkCuFunctionCreateInfoNVX *")]
                CuFunctionCreateInfoNVX* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkCuFunctionNVX *")] CuFunctionNVXHandle** pFunction
        );

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateCuFunctionNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateCuFunctionNVX(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkCuFunctionCreateInfoNVX *")]
                Ref<CuFunctionCreateInfoNVX> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkCuFunctionNVX *")] Ref2D<CuFunctionNVXHandle> pFunction
        )
        {
            fixed (CuFunctionNVXHandle** __dsl_pFunction = pFunction)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (CuFunctionCreateInfoNVX* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateCuFunctionNVX(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pFunction
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateCuModuleNVX")]
        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        public static extern Result CreateCuModuleNVX(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkCuModuleCreateInfoNVX *")] CuModuleCreateInfoNVX* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkCuModuleNVX *")] CuModuleNVXHandle** pModule
        );

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateCuModuleNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateCuModuleNVX(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkCuModuleCreateInfoNVX *")]
                Ref<CuModuleCreateInfoNVX> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkCuModuleNVX *")] Ref2D<CuModuleNVXHandle> pModule
        )
        {
            fixed (CuModuleNVXHandle** __dsl_pModule = pModule)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (CuModuleCreateInfoNVX* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateCuModuleNVX(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pModule
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateDebugReportCallbackEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
        public static extern Result CreateDebugReportCallbackEXT(
            [NativeTypeName("VkInstance")] InstanceHandle* instance,
            [NativeTypeName("const VkDebugReportCallbackCreateInfoEXT *")]
                DebugReportCallbackCreateInfoEXT* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDebugReportCallbackEXT *")] DebugReportCallbackEXTHandle** pCallback
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDebugReportCallbackEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDebugReportCallbackEXT(
            [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
            [NativeTypeName("const VkDebugReportCallbackCreateInfoEXT *")]
                Ref<DebugReportCallbackCreateInfoEXT> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDebugReportCallbackEXT *")]
                Ref2D<DebugReportCallbackEXTHandle> pCallback
        )
        {
            fixed (DebugReportCallbackEXTHandle** __dsl_pCallback = pCallback)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DebugReportCallbackCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
            fixed (InstanceHandle* __dsl_instance = instance)
            {
                return (Result)CreateDebugReportCallbackEXT(
                    __dsl_instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pCallback
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateDebugUtilsMessengerEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        public static extern Result CreateDebugUtilsMessengerEXT(
            [NativeTypeName("VkInstance")] InstanceHandle* instance,
            [NativeTypeName("const VkDebugUtilsMessengerCreateInfoEXT *")]
                DebugUtilsMessengerCreateInfoEXT* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDebugUtilsMessengerEXT *")] DebugUtilsMessengerEXTHandle** pMessenger
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDebugUtilsMessengerEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDebugUtilsMessengerEXT(
            [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
            [NativeTypeName("const VkDebugUtilsMessengerCreateInfoEXT *")]
                Ref<DebugUtilsMessengerCreateInfoEXT> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDebugUtilsMessengerEXT *")]
                Ref2D<DebugUtilsMessengerEXTHandle> pMessenger
        )
        {
            fixed (DebugUtilsMessengerEXTHandle** __dsl_pMessenger = pMessenger)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DebugUtilsMessengerCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
            fixed (InstanceHandle* __dsl_instance = instance)
            {
                return (Result)CreateDebugUtilsMessengerEXT(
                    __dsl_instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pMessenger
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateDeferredOperationKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        public static extern Result CreateDeferredOperationKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDeferredOperationKHR *")]
                DeferredOperationKHRHandle** pDeferredOperation
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDeferredOperationKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDeferredOperationKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDeferredOperationKHR *")]
                Ref2D<DeferredOperationKHRHandle> pDeferredOperation
        )
        {
            fixed (DeferredOperationKHRHandle** __dsl_pDeferredOperation = pDeferredOperation)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateDeferredOperationKHR(
                    __dsl_device,
                    __dsl_pAllocator,
                    __dsl_pDeferredOperation
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateDescriptorPool")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateDescriptorPool(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDescriptorPoolCreateInfo *")]
                DescriptorPoolCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDescriptorPool *")] DescriptorPoolHandle** pDescriptorPool
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDescriptorPool(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDescriptorPoolCreateInfo *")]
                Ref<DescriptorPoolCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDescriptorPool *")] Ref2D<DescriptorPoolHandle> pDescriptorPool
        )
        {
            fixed (DescriptorPoolHandle** __dsl_pDescriptorPool = pDescriptorPool)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DescriptorPoolCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateDescriptorPool(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDescriptorPool
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateDescriptorSetLayout")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateDescriptorSetLayout(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
                DescriptorSetLayoutCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDescriptorSetLayout *")] DescriptorSetLayoutHandle** pSetLayout
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorSetLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDescriptorSetLayout(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
                Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDescriptorSetLayout *")] Ref2D<DescriptorSetLayoutHandle> pSetLayout
        )
        {
            fixed (DescriptorSetLayoutHandle** __dsl_pSetLayout = pSetLayout)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DescriptorSetLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateDescriptorSetLayout(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSetLayout
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateDescriptorUpdateTemplate")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern Result CreateDescriptorUpdateTemplate(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
                DescriptorUpdateTemplateCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDescriptorUpdateTemplate *")]
                DescriptorUpdateTemplateHandle** pDescriptorUpdateTemplate
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDescriptorUpdateTemplate(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
                Ref<DescriptorUpdateTemplateCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDescriptorUpdateTemplate *")]
                Ref2D<DescriptorUpdateTemplateHandle> pDescriptorUpdateTemplate
        )
        {
            fixed (
                DescriptorUpdateTemplateHandle** __dsl_pDescriptorUpdateTemplate =
                    pDescriptorUpdateTemplate
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DescriptorUpdateTemplateCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateDescriptorUpdateTemplate(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDescriptorUpdateTemplate
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCreateDescriptorUpdateTemplateKHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
        public static extern Result CreateDescriptorUpdateTemplateKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
                DescriptorUpdateTemplateCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDescriptorUpdateTemplate *")]
                DescriptorUpdateTemplateHandle** pDescriptorUpdateTemplate
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDescriptorUpdateTemplateKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
                Ref<DescriptorUpdateTemplateCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDescriptorUpdateTemplate *")]
                Ref2D<DescriptorUpdateTemplateHandle> pDescriptorUpdateTemplate
        )
        {
            fixed (
                DescriptorUpdateTemplateHandle** __dsl_pDescriptorUpdateTemplate =
                    pDescriptorUpdateTemplate
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DescriptorUpdateTemplateCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateDescriptorUpdateTemplateKHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDescriptorUpdateTemplate
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateDevice")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateDevice(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkDeviceCreateInfo *")] DeviceCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDevice *")] DeviceHandle** pDevice
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDevice(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkDeviceCreateInfo *")] Ref<DeviceCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDevice *")] Ref2D<DeviceHandle> pDevice
        )
        {
            fixed (DeviceHandle** __dsl_pDevice = pDevice)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DeviceCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)CreateDevice(
                    __dsl_physicalDevice,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDevice
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateDisplayModeKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        public static extern Result CreateDisplayModeKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
            [NativeTypeName("const VkDisplayModeCreateInfoKHR *")]
                DisplayModeCreateInfoKHR* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkDisplayModeKHR *")] DisplayModeKHRHandle** pMode
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayModeKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDisplayModeKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
            [NativeTypeName("const VkDisplayModeCreateInfoKHR *")]
                Ref<DisplayModeCreateInfoKHR> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkDisplayModeKHR *")] Ref2D<DisplayModeKHRHandle> pMode
        )
        {
            fixed (DisplayModeKHRHandle** __dsl_pMode = pMode)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DisplayModeCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
            fixed (DisplayKHRHandle* __dsl_display = display)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)CreateDisplayModeKHR(
                    __dsl_physicalDevice,
                    __dsl_display,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pMode
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateDisplayPlaneSurfaceKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        public static extern Result CreateDisplayPlaneSurfaceKHR(
            [NativeTypeName("VkInstance")] InstanceHandle* instance,
            [NativeTypeName("const VkDisplaySurfaceCreateInfoKHR *")]
                DisplaySurfaceCreateInfoKHR* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSurfaceKHR *")] SurfaceKHRHandle** pSurface
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayPlaneSurfaceKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateDisplayPlaneSurfaceKHR(
            [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
            [NativeTypeName("const VkDisplaySurfaceCreateInfoKHR *")]
                Ref<DisplaySurfaceCreateInfoKHR> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSurfaceKHR *")] Ref2D<SurfaceKHRHandle> pSurface
        )
        {
            fixed (SurfaceKHRHandle** __dsl_pSurface = pSurface)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DisplaySurfaceCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
            fixed (InstanceHandle* __dsl_instance = instance)
            {
                return (Result)CreateDisplayPlaneSurfaceKHR(
                    __dsl_instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSurface
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateEvent")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateEvent(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkEventCreateInfo *")] EventCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkEvent *")] EventHandle** pEvent
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateEvent(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkEventCreateInfo *")] Ref<EventCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkEvent *")] Ref2D<EventHandle> pEvent
        )
        {
            fixed (EventHandle** __dsl_pEvent = pEvent)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (EventCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateEvent(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pEvent
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateExternalComputeQueueNV")]
        [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
        public static extern Result CreateExternalComputeQueueNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkExternalComputeQueueCreateInfoNV *")]
                ExternalComputeQueueCreateInfoNV* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkExternalComputeQueueNV *")]
                ExternalComputeQueueNVHandle** pExternalQueue
        );

        [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateExternalComputeQueueNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateExternalComputeQueueNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkExternalComputeQueueCreateInfoNV *")]
                Ref<ExternalComputeQueueCreateInfoNV> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkExternalComputeQueueNV *")]
                Ref2D<ExternalComputeQueueNVHandle> pExternalQueue
        )
        {
            fixed (ExternalComputeQueueNVHandle** __dsl_pExternalQueue = pExternalQueue)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ExternalComputeQueueCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateExternalComputeQueueNV(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pExternalQueue
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateFence")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateFence(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkFenceCreateInfo *")] FenceCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkFence *")] FenceHandle** pFence
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateFence")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateFence(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkFenceCreateInfo *")] Ref<FenceCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkFence *")] Ref2D<FenceHandle> pFence
        )
        {
            fixed (FenceHandle** __dsl_pFence = pFence)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (FenceCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateFence(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pFence
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateFramebuffer")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateFramebuffer(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkFramebufferCreateInfo *")] FramebufferCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkFramebuffer *")] FramebufferHandle** pFramebuffer
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateFramebuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateFramebuffer(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkFramebufferCreateInfo *")]
                Ref<FramebufferCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkFramebuffer *")] Ref2D<FramebufferHandle> pFramebuffer
        )
        {
            fixed (FramebufferHandle** __dsl_pFramebuffer = pFramebuffer)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (FramebufferCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateFramebuffer(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pFramebuffer
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateGraphicsPipelines")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateGraphicsPipelines(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkGraphicsPipelineCreateInfo *")]
                GraphicsPipelineCreateInfo* pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPipeline *")] PipelineHandle** pPipelines
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateGraphicsPipelines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateGraphicsPipelines(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkGraphicsPipelineCreateInfo *")]
                Ref<GraphicsPipelineCreateInfo> pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPipeline *")] Ref2D<PipelineHandle> pPipelines
        )
        {
            fixed (PipelineHandle** __dsl_pPipelines = pPipelines)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (GraphicsPipelineCreateInfo* __dsl_pCreateInfos = pCreateInfos)
            fixed (PipelineCacheHandle* __dsl_pipelineCache = pipelineCache)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateGraphicsPipelines(
                    __dsl_device,
                    __dsl_pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateHeadlessSurfaceEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_headless_surface"],
            ImpliesSets = ["VK_KHR_surface"]
        )]
        public static extern Result CreateHeadlessSurfaceEXT(
            [NativeTypeName("VkInstance")] InstanceHandle* instance,
            [NativeTypeName("const VkHeadlessSurfaceCreateInfoEXT *")]
                HeadlessSurfaceCreateInfoEXT* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSurfaceKHR *")] SurfaceKHRHandle** pSurface
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_headless_surface"],
            ImpliesSets = ["VK_KHR_surface"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateHeadlessSurfaceEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateHeadlessSurfaceEXT(
            [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
            [NativeTypeName("const VkHeadlessSurfaceCreateInfoEXT *")]
                Ref<HeadlessSurfaceCreateInfoEXT> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSurfaceKHR *")] Ref2D<SurfaceKHRHandle> pSurface
        )
        {
            fixed (SurfaceKHRHandle** __dsl_pSurface = pSurface)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (HeadlessSurfaceCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
            fixed (InstanceHandle* __dsl_instance = instance)
            {
                return (Result)CreateHeadlessSurfaceEXT(
                    __dsl_instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSurface
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateImage")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateImage(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkImageCreateInfo *")] ImageCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkImage *")] ImageHandle** pImage
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateImage(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkImageCreateInfo *")] Ref<ImageCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkImage *")] Ref2D<ImageHandle> pImage
        )
        {
            fixed (ImageHandle** __dsl_pImage = pImage)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ImageCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateImage(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pImage
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateImageView")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateImageView(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkImageViewCreateInfo *")] ImageViewCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkImageView *")] ImageViewHandle** pView
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateImageView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateImageView(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkImageViewCreateInfo *")] Ref<ImageViewCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkImageView *")] Ref2D<ImageViewHandle> pView
        )
        {
            fixed (ImageViewHandle** __dsl_pView = pView)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ImageViewCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateImageView(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pView
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCreateIndirectCommandsLayoutEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result CreateIndirectCommandsLayoutEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoEXT *")]
                IndirectCommandsLayoutCreateInfoEXT* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkIndirectCommandsLayoutEXT *")]
                IndirectCommandsLayoutEXTHandle** pIndirectCommandsLayout
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateIndirectCommandsLayoutEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoEXT *")]
                Ref<IndirectCommandsLayoutCreateInfoEXT> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkIndirectCommandsLayoutEXT *")]
                Ref2D<IndirectCommandsLayoutEXTHandle> pIndirectCommandsLayout
        )
        {
            fixed (
                IndirectCommandsLayoutEXTHandle** __dsl_pIndirectCommandsLayout =
                    pIndirectCommandsLayout
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (IndirectCommandsLayoutCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateIndirectCommandsLayoutEXT(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pIndirectCommandsLayout
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateIndirectCommandsLayoutNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        public static extern Result CreateIndirectCommandsLayoutNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoNV *")]
                IndirectCommandsLayoutCreateInfoNV* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkIndirectCommandsLayoutNV *")]
                IndirectCommandsLayoutNVHandle** pIndirectCommandsLayout
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateIndirectCommandsLayoutNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoNV *")]
                Ref<IndirectCommandsLayoutCreateInfoNV> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkIndirectCommandsLayoutNV *")]
                Ref2D<IndirectCommandsLayoutNVHandle> pIndirectCommandsLayout
        )
        {
            fixed (
                IndirectCommandsLayoutNVHandle** __dsl_pIndirectCommandsLayout =
                    pIndirectCommandsLayout
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (IndirectCommandsLayoutCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateIndirectCommandsLayoutNV(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pIndirectCommandsLayout
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateIndirectExecutionSetEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result CreateIndirectExecutionSetEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkIndirectExecutionSetCreateInfoEXT *")]
                IndirectExecutionSetCreateInfoEXT* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkIndirectExecutionSetEXT *")]
                IndirectExecutionSetEXTHandle** pIndirectExecutionSet
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectExecutionSetEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateIndirectExecutionSetEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkIndirectExecutionSetCreateInfoEXT *")]
                Ref<IndirectExecutionSetCreateInfoEXT> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkIndirectExecutionSetEXT *")]
                Ref2D<IndirectExecutionSetEXTHandle> pIndirectExecutionSet
        )
        {
            fixed (
                IndirectExecutionSetEXTHandle** __dsl_pIndirectExecutionSet = pIndirectExecutionSet
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (IndirectExecutionSetCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateIndirectExecutionSetEXT(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pIndirectExecutionSet
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateInstance")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateInstance(
            [NativeTypeName("const VkInstanceCreateInfo *")] InstanceCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkInstance *")] InstanceHandle** pInstance
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateInstance")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateInstance(
            [NativeTypeName("const VkInstanceCreateInfo *")] Ref<InstanceCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkInstance *")] Ref2D<InstanceHandle> pInstance
        )
        {
            fixed (InstanceHandle** __dsl_pInstance = pInstance)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (InstanceCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            {
                return (Result)CreateInstance(__dsl_pCreateInfo, __dsl_pAllocator, __dsl_pInstance);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateMicromapEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        public static extern Result CreateMicromapEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkMicromapCreateInfoEXT *")] MicromapCreateInfoEXT* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkMicromapEXT *")] MicromapEXTHandle** pMicromap
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateMicromapEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkMicromapCreateInfoEXT *")]
                Ref<MicromapCreateInfoEXT> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkMicromapEXT *")] Ref2D<MicromapEXTHandle> pMicromap
        )
        {
            fixed (MicromapEXTHandle** __dsl_pMicromap = pMicromap)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (MicromapCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateMicromapEXT(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pMicromap
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateOpticalFlowSessionNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result CreateOpticalFlowSessionNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkOpticalFlowSessionCreateInfoNV *")]
                OpticalFlowSessionCreateInfoNV* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkOpticalFlowSessionNV *")] OpticalFlowSessionNVHandle** pSession
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateOpticalFlowSessionNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateOpticalFlowSessionNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkOpticalFlowSessionCreateInfoNV *")]
                Ref<OpticalFlowSessionCreateInfoNV> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkOpticalFlowSessionNV *")] Ref2D<OpticalFlowSessionNVHandle> pSession
        )
        {
            fixed (OpticalFlowSessionNVHandle** __dsl_pSession = pSession)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (OpticalFlowSessionCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateOpticalFlowSessionNV(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSession
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreatePipelineBinariesKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        public static extern Result CreatePipelineBinariesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkPipelineBinaryCreateInfoKHR *")]
                PipelineBinaryCreateInfoKHR* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            PipelineBinaryHandlesInfoKHR* pBinaries
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineBinariesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePipelineBinariesKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkPipelineBinaryCreateInfoKHR *")]
                Ref<PipelineBinaryCreateInfoKHR> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            Ref<PipelineBinaryHandlesInfoKHR> pBinaries
        )
        {
            fixed (PipelineBinaryHandlesInfoKHR* __dsl_pBinaries = pBinaries)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PipelineBinaryCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreatePipelineBinariesKHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pBinaries
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreatePipelineCache")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreatePipelineCache(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkPipelineCacheCreateInfo *")]
                PipelineCacheCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPipelineCache *")] PipelineCacheHandle** pPipelineCache
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineCache")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePipelineCache(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkPipelineCacheCreateInfo *")]
                Ref<PipelineCacheCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPipelineCache *")] Ref2D<PipelineCacheHandle> pPipelineCache
        )
        {
            fixed (PipelineCacheHandle** __dsl_pPipelineCache = pPipelineCache)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PipelineCacheCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreatePipelineCache(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPipelineCache
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreatePipelineLayout")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreatePipelineLayout(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkPipelineLayoutCreateInfo *")]
                PipelineLayoutCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPipelineLayout *")] PipelineLayoutHandle** pPipelineLayout
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePipelineLayout(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkPipelineLayoutCreateInfo *")]
                Ref<PipelineLayoutCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPipelineLayout *")] Ref2D<PipelineLayoutHandle> pPipelineLayout
        )
        {
            fixed (PipelineLayoutHandle** __dsl_pPipelineLayout = pPipelineLayout)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PipelineLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreatePipelineLayout(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPipelineLayout
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreatePrivateDataSlot")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern Result CreatePrivateDataSlot(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
                PrivateDataSlotCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPrivateDataSlot *")] PrivateDataSlotHandle** pPrivateDataSlot
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlot")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePrivateDataSlot(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
                Ref<PrivateDataSlotCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPrivateDataSlot *")] Ref2D<PrivateDataSlotHandle> pPrivateDataSlot
        )
        {
            fixed (PrivateDataSlotHandle** __dsl_pPrivateDataSlot = pPrivateDataSlot)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PrivateDataSlotCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreatePrivateDataSlot(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPrivateDataSlot
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreatePrivateDataSlotEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        public static extern Result CreatePrivateDataSlotEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
                PrivateDataSlotCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPrivateDataSlot *")] PrivateDataSlotHandle** pPrivateDataSlot
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlotEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreatePrivateDataSlotEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
                Ref<PrivateDataSlotCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPrivateDataSlot *")] Ref2D<PrivateDataSlotHandle> pPrivateDataSlot
        )
        {
            fixed (PrivateDataSlotHandle** __dsl_pPrivateDataSlot = pPrivateDataSlot)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PrivateDataSlotCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreatePrivateDataSlotEXT(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPrivateDataSlot
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateQueryPool")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateQueryPool(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkQueryPoolCreateInfo *")] QueryPoolCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkQueryPool *")] QueryPoolHandle** pQueryPool
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateQueryPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateQueryPool(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkQueryPoolCreateInfo *")] Ref<QueryPoolCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkQueryPool *")] Ref2D<QueryPoolHandle> pQueryPool
        )
        {
            fixed (QueryPoolHandle** __dsl_pQueryPool = pQueryPool)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (QueryPoolCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateQueryPool(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pQueryPool
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateRayTracingPipelinesKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        public static extern Result CreateRayTracingPipelinesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeferredOperationKHR")]
                DeferredOperationKHRHandle* deferredOperation,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkRayTracingPipelineCreateInfoKHR *")]
                RayTracingPipelineCreateInfoKHR* pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPipeline *")] PipelineHandle** pPipelines
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRayTracingPipelinesKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeferredOperationKHR")]
                Ref<DeferredOperationKHRHandle> deferredOperation,
            [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkRayTracingPipelineCreateInfoKHR *")]
                Ref<RayTracingPipelineCreateInfoKHR> pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPipeline *")] Ref2D<PipelineHandle> pPipelines
        )
        {
            fixed (PipelineHandle** __dsl_pPipelines = pPipelines)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (RayTracingPipelineCreateInfoKHR* __dsl_pCreateInfos = pCreateInfos)
            fixed (PipelineCacheHandle* __dsl_pipelineCache = pipelineCache)
            fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateRayTracingPipelinesKHR(
                    __dsl_device,
                    __dsl_deferredOperation,
                    __dsl_pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateRayTracingPipelinesNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern Result CreateRayTracingPipelinesNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkRayTracingPipelineCreateInfoNV *")]
                RayTracingPipelineCreateInfoNV* pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkPipeline *")] PipelineHandle** pPipelines
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRayTracingPipelinesNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkRayTracingPipelineCreateInfoNV *")]
                Ref<RayTracingPipelineCreateInfoNV> pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkPipeline *")] Ref2D<PipelineHandle> pPipelines
        )
        {
            fixed (PipelineHandle** __dsl_pPipelines = pPipelines)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (RayTracingPipelineCreateInfoNV* __dsl_pCreateInfos = pCreateInfos)
            fixed (PipelineCacheHandle* __dsl_pipelineCache = pipelineCache)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateRayTracingPipelinesNV(
                    __dsl_device,
                    __dsl_pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateRenderPass")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateRenderPass(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkRenderPassCreateInfo *")] RenderPassCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkRenderPass *")] RenderPassHandle** pRenderPass
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRenderPass(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkRenderPassCreateInfo *")]
                Ref<RenderPassCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkRenderPass *")] Ref2D<RenderPassHandle> pRenderPass
        )
        {
            fixed (RenderPassHandle** __dsl_pRenderPass = pRenderPass)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (RenderPassCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateRenderPass(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pRenderPass
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateRenderPass2")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        public static extern Result CreateRenderPass2(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkRenderPassCreateInfo2 *")] RenderPassCreateInfo2* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkRenderPass *")] RenderPassHandle** pRenderPass
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRenderPass2(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkRenderPassCreateInfo2 *")]
                Ref<RenderPassCreateInfo2> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkRenderPass *")] Ref2D<RenderPassHandle> pRenderPass
        )
        {
            fixed (RenderPassHandle** __dsl_pRenderPass = pRenderPass)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (RenderPassCreateInfo2* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateRenderPass2(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pRenderPass
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateRenderPass2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        public static extern Result CreateRenderPass2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkRenderPassCreateInfo2 *")] RenderPassCreateInfo2* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkRenderPass *")] RenderPassHandle** pRenderPass
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_create_renderpass2"],
            ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateRenderPass2KHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkRenderPassCreateInfo2 *")]
                Ref<RenderPassCreateInfo2> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkRenderPass *")] Ref2D<RenderPassHandle> pRenderPass
        )
        {
            fixed (RenderPassHandle** __dsl_pRenderPass = pRenderPass)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (RenderPassCreateInfo2* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateRenderPass2KHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pRenderPass
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateSampler")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateSampler(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkSamplerCreateInfo *")] SamplerCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSampler *")] SamplerHandle** pSampler
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSampler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSampler(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkSamplerCreateInfo *")] Ref<SamplerCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSampler *")] Ref2D<SamplerHandle> pSampler
        )
        {
            fixed (SamplerHandle** __dsl_pSampler = pSampler)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SamplerCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateSampler(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSampler
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateSamplerYcbcrConversion")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern Result CreateSamplerYcbcrConversion(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
                SamplerYcbcrConversionCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSamplerYcbcrConversion *")]
                SamplerYcbcrConversionHandle** pYcbcrConversion
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSamplerYcbcrConversion(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
                Ref<SamplerYcbcrConversionCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSamplerYcbcrConversion *")]
                Ref2D<SamplerYcbcrConversionHandle> pYcbcrConversion
        )
        {
            fixed (SamplerYcbcrConversionHandle** __dsl_pYcbcrConversion = pYcbcrConversion)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SamplerYcbcrConversionCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateSamplerYcbcrConversion(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pYcbcrConversion
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCreateSamplerYcbcrConversionKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_sampler_ycbcr_conversion"],
            ImpliesSets = [
                "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern Result CreateSamplerYcbcrConversionKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
                SamplerYcbcrConversionCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSamplerYcbcrConversion *")]
                SamplerYcbcrConversionHandle** pYcbcrConversion
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_sampler_ycbcr_conversion"],
            ImpliesSets = [
                "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversionKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSamplerYcbcrConversionKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
                Ref<SamplerYcbcrConversionCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSamplerYcbcrConversion *")]
                Ref2D<SamplerYcbcrConversionHandle> pYcbcrConversion
        )
        {
            fixed (SamplerYcbcrConversionHandle** __dsl_pYcbcrConversion = pYcbcrConversion)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SamplerYcbcrConversionCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateSamplerYcbcrConversionKHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pYcbcrConversion
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateSemaphore")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateSemaphore(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkSemaphoreCreateInfo *")] SemaphoreCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSemaphore *")] SemaphoreHandle** pSemaphore
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSemaphore(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkSemaphoreCreateInfo *")] Ref<SemaphoreCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSemaphore *")] Ref2D<SemaphoreHandle> pSemaphore
        )
        {
            fixed (SemaphoreHandle** __dsl_pSemaphore = pSemaphore)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SemaphoreCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateSemaphore(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSemaphore
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateShaderModule")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result CreateShaderModule(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkShaderModuleCreateInfo *")]
                ShaderModuleCreateInfo* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkShaderModule *")] ShaderModuleHandle** pShaderModule
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateShaderModule")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateShaderModule(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkShaderModuleCreateInfo *")]
                Ref<ShaderModuleCreateInfo> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkShaderModule *")] Ref2D<ShaderModuleHandle> pShaderModule
        )
        {
            fixed (ShaderModuleHandle** __dsl_pShaderModule = pShaderModule)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ShaderModuleCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateShaderModule(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pShaderModule
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateShadersEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result CreateShadersEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkShaderCreateInfoEXT *")] ShaderCreateInfoEXT* pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkShaderEXT *")] ShaderEXTHandle** pShaders
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateShadersEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateShadersEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint createInfoCount,
            [NativeTypeName("const VkShaderCreateInfoEXT *")] Ref<ShaderCreateInfoEXT> pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkShaderEXT *")] Ref2D<ShaderEXTHandle> pShaders
        )
        {
            fixed (ShaderEXTHandle** __dsl_pShaders = pShaders)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ShaderCreateInfoEXT* __dsl_pCreateInfos = pCreateInfos)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateShadersEXT(
                    __dsl_device,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pShaders
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateSharedSwapchainsKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_display_swapchain"],
            ImpliesSets = ["VK_KHR_display", "VK_KHR_swapchain"]
        )]
        public static extern Result CreateSharedSwapchainsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint swapchainCount,
            [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
                SwapchainCreateInfoKHR* pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSwapchainKHR *")] SwapchainKHRHandle** pSwapchains
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_display_swapchain"],
            ImpliesSets = ["VK_KHR_display", "VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSharedSwapchainsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSharedSwapchainsKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint swapchainCount,
            [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
                Ref<SwapchainCreateInfoKHR> pCreateInfos,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSwapchainKHR *")] Ref2D<SwapchainKHRHandle> pSwapchains
        )
        {
            fixed (SwapchainKHRHandle** __dsl_pSwapchains = pSwapchains)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SwapchainCreateInfoKHR* __dsl_pCreateInfos = pCreateInfos)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateSharedSwapchainsKHR(
                    __dsl_device,
                    swapchainCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pSwapchains
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateSwapchainKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        public static extern Result CreateSwapchainKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
                SwapchainCreateInfoKHR* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkSwapchainKHR *")] SwapchainKHRHandle** pSwapchain
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateSwapchainKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateSwapchainKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
                Ref<SwapchainCreateInfoKHR> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkSwapchainKHR *")] Ref2D<SwapchainKHRHandle> pSwapchain
        )
        {
            fixed (SwapchainKHRHandle** __dsl_pSwapchain = pSwapchain)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SwapchainCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateSwapchainKHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSwapchain
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateValidationCacheEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        public static extern Result CreateValidationCacheEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkValidationCacheCreateInfoEXT *")]
                ValidationCacheCreateInfoEXT* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkValidationCacheEXT *")] ValidationCacheEXTHandle** pValidationCache
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateValidationCacheEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateValidationCacheEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkValidationCacheCreateInfoEXT *")]
                Ref<ValidationCacheCreateInfoEXT> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkValidationCacheEXT *")]
                Ref2D<ValidationCacheEXTHandle> pValidationCache
        )
        {
            fixed (ValidationCacheEXTHandle** __dsl_pValidationCache = pValidationCache)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ValidationCacheCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateValidationCacheEXT(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pValidationCache
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkCreateVideoSessionKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        public static extern Result CreateVideoSessionKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkVideoSessionCreateInfoKHR *")]
                VideoSessionCreateInfoKHR* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkVideoSessionKHR *")] VideoSessionKHRHandle** pVideoSession
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateVideoSessionKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkVideoSessionCreateInfoKHR *")]
                Ref<VideoSessionCreateInfoKHR> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkVideoSessionKHR *")] Ref2D<VideoSessionKHRHandle> pVideoSession
        )
        {
            fixed (VideoSessionKHRHandle** __dsl_pVideoSession = pVideoSession)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (VideoSessionCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateVideoSessionKHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pVideoSession
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkCreateVideoSessionParametersKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        public static extern Result CreateVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkVideoSessionParametersCreateInfoKHR *")]
                VideoSessionParametersCreateInfoKHR* pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkVideoSessionParametersKHR *")]
                VideoSessionParametersKHRHandle** pVideoSessionParameters
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionParametersKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result CreateVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkVideoSessionParametersCreateInfoKHR *")]
                Ref<VideoSessionParametersCreateInfoKHR> pCreateInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkVideoSessionParametersKHR *")]
                Ref2D<VideoSessionParametersKHRHandle> pVideoSessionParameters
        )
        {
            fixed (
                VideoSessionParametersKHRHandle** __dsl_pVideoSessionParameters =
                    pVideoSessionParameters
            )
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (VideoSessionParametersCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)CreateVideoSessionParametersKHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pVideoSessionParameters
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDebugMarkerSetObjectNameEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        public static extern Result DebugMarkerSetObjectNameEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDebugMarkerObjectNameInfoEXT *")]
                DebugMarkerObjectNameInfoEXT* pNameInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectNameEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result DebugMarkerSetObjectNameEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDebugMarkerObjectNameInfoEXT *")]
                Ref<DebugMarkerObjectNameInfoEXT> pNameInfo
        )
        {
            fixed (DebugMarkerObjectNameInfoEXT* __dsl_pNameInfo = pNameInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)DebugMarkerSetObjectNameEXT(__dsl_device, __dsl_pNameInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDebugMarkerSetObjectTagEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        public static extern Result DebugMarkerSetObjectTagEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDebugMarkerObjectTagInfoEXT *")]
                DebugMarkerObjectTagInfoEXT* pTagInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_debug_marker"],
            ImpliesSets = ["VK_EXT_debug_report"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectTagEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result DebugMarkerSetObjectTagEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDebugMarkerObjectTagInfoEXT *")]
                Ref<DebugMarkerObjectTagInfoEXT> pTagInfo
        )
        {
            fixed (DebugMarkerObjectTagInfoEXT* __dsl_pTagInfo = pTagInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)DebugMarkerSetObjectTagEXT(__dsl_device, __dsl_pTagInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDebugReportMessageEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
        public static extern void DebugReportMessageEXT(
            [NativeTypeName("VkInstance")] InstanceHandle* instance,
            [NativeTypeName("VkDebugReportFlagsEXT")] uint flags,
            DebugReportObjectTypeEXT objectType,
            [NativeTypeName("uint64_t")] ulong @object,
            [NativeTypeName("size_t")] nuint location,
            [NativeTypeName("int32_t")] int messageCode,
            [NativeTypeName("const char *")] sbyte* pLayerPrefix,
            [NativeTypeName("const char *")] sbyte* pMessage
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDebugReportMessageEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DebugReportMessageEXT(
            [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
            [NativeTypeName("VkDebugReportFlagsEXT")] uint flags,
            DebugReportObjectTypeEXT objectType,
            [NativeTypeName("uint64_t")] ulong @object,
            [NativeTypeName("size_t")] nuint location,
            [NativeTypeName("int32_t")] int messageCode,
            [NativeTypeName("const char *")] Ref<sbyte> pLayerPrefix,
            [NativeTypeName("const char *")] Ref<sbyte> pMessage
        )
        {
            fixed (sbyte* __dsl_pMessage = pMessage)
            fixed (sbyte* __dsl_pLayerPrefix = pLayerPrefix)
            fixed (InstanceHandle* __dsl_instance = instance)
            {
                DebugReportMessageEXT(
                    __dsl_instance,
                    flags,
                    objectType,
                    @object,
                    location,
                    messageCode,
                    __dsl_pLayerPrefix,
                    __dsl_pMessage
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDeferredOperationJoinKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        public static extern Result DeferredOperationJoinKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* operation
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDeferredOperationJoinKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result DeferredOperationJoinKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeferredOperationKHR")] Ref<DeferredOperationKHRHandle> operation
        )
        {
            fixed (DeferredOperationKHRHandle* __dsl_operation = operation)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)DeferredOperationJoinKHR(__dsl_device, __dsl_operation);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkDestroyAccelerationStructureKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern void DestroyAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkAccelerationStructureKHR")]
                AccelerationStructureKHRHandle* accelerationStructure,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyAccelerationStructureKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkAccelerationStructureKHR")]
                Ref<AccelerationStructureKHRHandle> accelerationStructure,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (
                AccelerationStructureKHRHandle* __dsl_accelerationStructure = accelerationStructure
            )
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyAccelerationStructureKHR(
                    __dsl_device,
                    __dsl_accelerationStructure,
                    __dsl_pAllocator
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyAccelerationStructureNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern void DestroyAccelerationStructureNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkAccelerationStructureNV")]
                AccelerationStructureNVHandle* accelerationStructure,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyAccelerationStructureNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkAccelerationStructureNV")]
                Ref<AccelerationStructureNVHandle> accelerationStructure,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (
                AccelerationStructureNVHandle* __dsl_accelerationStructure = accelerationStructure
            )
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyAccelerationStructureNV(
                    __dsl_device,
                    __dsl_accelerationStructure,
                    __dsl_pAllocator
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyBuffer")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyBuffer(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyBuffer(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyBuffer(__dsl_device, __dsl_buffer, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyBufferView")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyBufferView(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkBufferView")] BufferViewHandle* bufferView,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyBufferView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyBufferView(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkBufferView")] Ref<BufferViewHandle> bufferView,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (BufferViewHandle* __dsl_bufferView = bufferView)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyBufferView(__dsl_device, __dsl_bufferView, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyCommandPool")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyCommandPool(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyCommandPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCommandPool(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (CommandPoolHandle* __dsl_commandPool = commandPool)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyCommandPool(__dsl_device, __dsl_commandPool, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyCudaFunctionNV")]
        [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
        public static extern void DestroyCudaFunctionNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkCudaFunctionNV")] CudaFunctionNVHandle* function,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyCudaFunctionNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCudaFunctionNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkCudaFunctionNV")] Ref<CudaFunctionNVHandle> function,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (CudaFunctionNVHandle* __dsl_function = function)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyCudaFunctionNV(__dsl_device, __dsl_function, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyCudaModuleNV")]
        [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
        public static extern void DestroyCudaModuleNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkCudaModuleNV")] CudaModuleNVHandle* module,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyCudaModuleNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCudaModuleNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkCudaModuleNV")] Ref<CudaModuleNVHandle> module,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (CudaModuleNVHandle* __dsl_module = module)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyCudaModuleNV(__dsl_device, __dsl_module, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyCuFunctionNVX")]
        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        public static extern void DestroyCuFunctionNVX(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkCuFunctionNVX")] CuFunctionNVXHandle* function,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyCuFunctionNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCuFunctionNVX(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkCuFunctionNVX")] Ref<CuFunctionNVXHandle> function,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (CuFunctionNVXHandle* __dsl_function = function)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyCuFunctionNVX(__dsl_device, __dsl_function, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyCuModuleNVX")]
        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        public static extern void DestroyCuModuleNVX(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkCuModuleNVX")] CuModuleNVXHandle* module,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyCuModuleNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCuModuleNVX(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkCuModuleNVX")] Ref<CuModuleNVXHandle> module,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (CuModuleNVXHandle* __dsl_module = module)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyCuModuleNVX(__dsl_device, __dsl_module, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyDebugReportCallbackEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
        public static extern void DestroyDebugReportCallbackEXT(
            [NativeTypeName("VkInstance")] InstanceHandle* instance,
            [NativeTypeName("VkDebugReportCallbackEXT")] DebugReportCallbackEXTHandle* callback,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugReportCallbackEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDebugReportCallbackEXT(
            [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
            [NativeTypeName("VkDebugReportCallbackEXT")] Ref<DebugReportCallbackEXTHandle> callback,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DebugReportCallbackEXTHandle* __dsl_callback = callback)
            fixed (InstanceHandle* __dsl_instance = instance)
            {
                DestroyDebugReportCallbackEXT(__dsl_instance, __dsl_callback, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyDebugUtilsMessengerEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        public static extern void DestroyDebugUtilsMessengerEXT(
            [NativeTypeName("VkInstance")] InstanceHandle* instance,
            [NativeTypeName("VkDebugUtilsMessengerEXT")] DebugUtilsMessengerEXTHandle* messenger,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugUtilsMessengerEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDebugUtilsMessengerEXT(
            [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
            [NativeTypeName("VkDebugUtilsMessengerEXT")]
                Ref<DebugUtilsMessengerEXTHandle> messenger,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DebugUtilsMessengerEXTHandle* __dsl_messenger = messenger)
            fixed (InstanceHandle* __dsl_instance = instance)
            {
                DestroyDebugUtilsMessengerEXT(__dsl_instance, __dsl_messenger, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyDeferredOperationKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        public static extern void DestroyDeferredOperationKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* operation,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDeferredOperationKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDeferredOperationKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeferredOperationKHR")] Ref<DeferredOperationKHRHandle> operation,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DeferredOperationKHRHandle* __dsl_operation = operation)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyDeferredOperationKHR(__dsl_device, __dsl_operation, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyDescriptorPool")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyDescriptorPool(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle* descriptorPool,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDescriptorPool(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDescriptorPool")] Ref<DescriptorPoolHandle> descriptorPool,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DescriptorPoolHandle* __dsl_descriptorPool = descriptorPool)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyDescriptorPool(__dsl_device, __dsl_descriptorPool, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyDescriptorSetLayout")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyDescriptorSetLayout(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDescriptorSetLayout")]
                DescriptorSetLayoutHandle* descriptorSetLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorSetLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDescriptorSetLayout(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDescriptorSetLayout")]
                Ref<DescriptorSetLayoutHandle> descriptorSetLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DescriptorSetLayoutHandle* __dsl_descriptorSetLayout = descriptorSetLayout)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyDescriptorSetLayout(
                    __dsl_device,
                    __dsl_descriptorSetLayout,
                    __dsl_pAllocator
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkDestroyDescriptorUpdateTemplate"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void DestroyDescriptorUpdateTemplate(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDescriptorUpdateTemplate(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (
                DescriptorUpdateTemplateHandle* __dsl_descriptorUpdateTemplate =
                    descriptorUpdateTemplate
            )
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyDescriptorUpdateTemplate(
                    __dsl_device,
                    __dsl_descriptorUpdateTemplate,
                    __dsl_pAllocator
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkDestroyDescriptorUpdateTemplateKHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
        public static extern void DestroyDescriptorUpdateTemplateKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDescriptorUpdateTemplateKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (
                DescriptorUpdateTemplateHandle* __dsl_descriptorUpdateTemplate =
                    descriptorUpdateTemplate
            )
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyDescriptorUpdateTemplateKHR(
                    __dsl_device,
                    __dsl_descriptorUpdateTemplate,
                    __dsl_pAllocator
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyDevice")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyDevice(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyDevice(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyDevice(__dsl_device, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyEvent")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyEvent(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkEvent")] EventHandle* @event,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyEvent(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (EventHandle* __dsl_event = @event)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyEvent(__dsl_device, __dsl_event, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyExternalComputeQueueNV")]
        [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
        public static extern void DestroyExternalComputeQueueNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkExternalComputeQueueNV")]
                ExternalComputeQueueNVHandle* externalQueue,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyExternalComputeQueueNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyExternalComputeQueueNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkExternalComputeQueueNV")]
                Ref<ExternalComputeQueueNVHandle> externalQueue,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ExternalComputeQueueNVHandle* __dsl_externalQueue = externalQueue)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyExternalComputeQueueNV(__dsl_device, __dsl_externalQueue, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyFence")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyFence(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkFence")] FenceHandle* fence,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyFence")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyFence(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkFence")] Ref<FenceHandle> fence,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (FenceHandle* __dsl_fence = fence)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyFence(__dsl_device, __dsl_fence, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyFramebuffer")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyFramebuffer(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkFramebuffer")] FramebufferHandle* framebuffer,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyFramebuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyFramebuffer(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkFramebuffer")] Ref<FramebufferHandle> framebuffer,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (FramebufferHandle* __dsl_framebuffer = framebuffer)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyFramebuffer(__dsl_device, __dsl_framebuffer, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyImage")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyImage(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkImage")] ImageHandle* image,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyImage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyImage(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkImage")] Ref<ImageHandle> image,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ImageHandle* __dsl_image = image)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyImage(__dsl_device, __dsl_image, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyImageView")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyImageView(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkImageView")] ImageViewHandle* imageView,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyImageView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyImageView(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkImageView")] Ref<ImageViewHandle> imageView,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ImageViewHandle* __dsl_imageView = imageView)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyImageView(__dsl_device, __dsl_imageView, __dsl_pAllocator);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkDestroyIndirectCommandsLayoutEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void DestroyIndirectCommandsLayoutEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkIndirectCommandsLayoutEXT")]
                IndirectCommandsLayoutEXTHandle* indirectCommandsLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyIndirectCommandsLayoutEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkIndirectCommandsLayoutEXT")]
                Ref<IndirectCommandsLayoutEXTHandle> indirectCommandsLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (
                IndirectCommandsLayoutEXTHandle* __dsl_indirectCommandsLayout =
                    indirectCommandsLayout
            )
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyIndirectCommandsLayoutEXT(
                    __dsl_device,
                    __dsl_indirectCommandsLayout,
                    __dsl_pAllocator
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkDestroyIndirectCommandsLayoutNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        public static extern void DestroyIndirectCommandsLayoutNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkIndirectCommandsLayoutNV")]
                IndirectCommandsLayoutNVHandle* indirectCommandsLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyIndirectCommandsLayoutNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkIndirectCommandsLayoutNV")]
                Ref<IndirectCommandsLayoutNVHandle> indirectCommandsLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (
                IndirectCommandsLayoutNVHandle* __dsl_indirectCommandsLayout =
                    indirectCommandsLayout
            )
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyIndirectCommandsLayoutNV(
                    __dsl_device,
                    __dsl_indirectCommandsLayout,
                    __dsl_pAllocator
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyIndirectExecutionSetEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void DestroyIndirectExecutionSetEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                IndirectExecutionSetEXTHandle* indirectExecutionSet,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectExecutionSetEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyIndirectExecutionSetEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (IndirectExecutionSetEXTHandle* __dsl_indirectExecutionSet = indirectExecutionSet)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyIndirectExecutionSetEXT(
                    __dsl_device,
                    __dsl_indirectExecutionSet,
                    __dsl_pAllocator
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyInstance")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyInstance(
            [NativeTypeName("VkInstance")] InstanceHandle* instance,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyInstance")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyInstance(
            [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (InstanceHandle* __dsl_instance = instance)
            {
                DestroyInstance(__dsl_instance, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyMicromapEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        public static extern void DestroyMicromapEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkMicromapEXT")] MicromapEXTHandle* micromap,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyMicromapEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyMicromapEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkMicromapEXT")] Ref<MicromapEXTHandle> micromap,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (MicromapEXTHandle* __dsl_micromap = micromap)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyMicromapEXT(__dsl_device, __dsl_micromap, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyOpticalFlowSessionNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void DestroyOpticalFlowSessionNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle* session,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyOpticalFlowSessionNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyOpticalFlowSessionNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkOpticalFlowSessionNV")] Ref<OpticalFlowSessionNVHandle> session,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (OpticalFlowSessionNVHandle* __dsl_session = session)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyOpticalFlowSessionNV(__dsl_device, __dsl_session, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyPipeline")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyPipeline(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPipeline")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPipeline(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PipelineHandle* __dsl_pipeline = pipeline)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyPipeline(__dsl_device, __dsl_pipeline, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyPipelineBinaryKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        public static extern void DestroyPipelineBinaryKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipelineBinaryKHR")] PipelineBinaryKHRHandle pipelineBinary,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineBinaryKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPipelineBinaryKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipelineBinaryKHR")] PipelineBinaryKHRHandle pipelineBinary,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyPipelineBinaryKHR(__dsl_device, pipelineBinary, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyPipelineCache")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyPipelineCache(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineCache")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPipelineCache(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PipelineCacheHandle* __dsl_pipelineCache = pipelineCache)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyPipelineCache(__dsl_device, __dsl_pipelineCache, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyPipelineLayout")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyPipelineLayout(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* pipelineLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPipelineLayout(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> pipelineLayout,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PipelineLayoutHandle* __dsl_pipelineLayout = pipelineLayout)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyPipelineLayout(__dsl_device, __dsl_pipelineLayout, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyPrivateDataSlot")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void DestroyPrivateDataSlot(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlot")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPrivateDataSlot(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PrivateDataSlotHandle* __dsl_privateDataSlot = privateDataSlot)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyPrivateDataSlot(__dsl_device, __dsl_privateDataSlot, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyPrivateDataSlotEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        public static extern void DestroyPrivateDataSlotEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlotEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPrivateDataSlotEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (PrivateDataSlotHandle* __dsl_privateDataSlot = privateDataSlot)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyPrivateDataSlotEXT(__dsl_device, __dsl_privateDataSlot, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyQueryPool")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyQueryPool(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyQueryPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyQueryPool(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyQueryPool(__dsl_device, __dsl_queryPool, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyRenderPass")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyRenderPass(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkRenderPass")] RenderPassHandle* renderPass,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyRenderPass")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyRenderPass(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkRenderPass")] Ref<RenderPassHandle> renderPass,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (RenderPassHandle* __dsl_renderPass = renderPass)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyRenderPass(__dsl_device, __dsl_renderPass, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroySampler")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroySampler(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSampler")] SamplerHandle* sampler,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySampler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySampler(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSampler")] Ref<SamplerHandle> sampler,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SamplerHandle* __dsl_sampler = sampler)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroySampler(__dsl_device, __dsl_sampler, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroySamplerYcbcrConversion")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void DestroySamplerYcbcrConversion(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSamplerYcbcrConversion")]
                SamplerYcbcrConversionHandle* ycbcrConversion,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySamplerYcbcrConversion(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSamplerYcbcrConversion")]
                Ref<SamplerYcbcrConversionHandle> ycbcrConversion,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SamplerYcbcrConversionHandle* __dsl_ycbcrConversion = ycbcrConversion)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroySamplerYcbcrConversion(
                    __dsl_device,
                    __dsl_ycbcrConversion,
                    __dsl_pAllocator
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkDestroySamplerYcbcrConversionKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_sampler_ycbcr_conversion"],
            ImpliesSets = [
                "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern void DestroySamplerYcbcrConversionKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSamplerYcbcrConversion")]
                SamplerYcbcrConversionHandle* ycbcrConversion,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_sampler_ycbcr_conversion"],
            ImpliesSets = [
                "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversionKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySamplerYcbcrConversionKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSamplerYcbcrConversion")]
                Ref<SamplerYcbcrConversionHandle> ycbcrConversion,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SamplerYcbcrConversionHandle* __dsl_ycbcrConversion = ycbcrConversion)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroySamplerYcbcrConversionKHR(
                    __dsl_device,
                    __dsl_ycbcrConversion,
                    __dsl_pAllocator
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroySemaphore")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroySemaphore(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSemaphore")] SemaphoreHandle* semaphore,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySemaphore(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSemaphore")] Ref<SemaphoreHandle> semaphore,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SemaphoreHandle* __dsl_semaphore = semaphore)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroySemaphore(__dsl_device, __dsl_semaphore, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyShaderEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void DestroyShaderEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkShaderEXT")] ShaderEXTHandle* shader,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyShaderEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkShaderEXT")] Ref<ShaderEXTHandle> shader,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ShaderEXTHandle* __dsl_shader = shader)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyShaderEXT(__dsl_device, __dsl_shader, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyShaderModule")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void DestroyShaderModule(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkShaderModule")] ShaderModuleHandle* shaderModule,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderModule")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyShaderModule(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkShaderModule")] Ref<ShaderModuleHandle> shaderModule,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ShaderModuleHandle* __dsl_shaderModule = shaderModule)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyShaderModule(__dsl_device, __dsl_shaderModule, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroySurfaceKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        public static extern void DestroySurfaceKHR(
            [NativeTypeName("VkInstance")] InstanceHandle* instance,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySurfaceKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySurfaceKHR(
            [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
            [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SurfaceKHRHandle* __dsl_surface = surface)
            fixed (InstanceHandle* __dsl_instance = instance)
            {
                DestroySurfaceKHR(__dsl_instance, __dsl_surface, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroySwapchainKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        public static extern void DestroySwapchainKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroySwapchainKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySwapchainKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroySwapchainKHR(__dsl_device, __dsl_swapchain, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyValidationCacheEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        public static extern void DestroyValidationCacheEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle* validationCache,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyValidationCacheEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyValidationCacheEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkValidationCacheEXT")] Ref<ValidationCacheEXTHandle> validationCache,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ValidationCacheEXTHandle* __dsl_validationCache = validationCache)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyValidationCacheEXT(__dsl_device, __dsl_validationCache, __dsl_pAllocator);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDestroyVideoSessionKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        public static extern void DestroyVideoSessionKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle* videoSession,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyVideoSessionKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkVideoSessionKHR")] Ref<VideoSessionKHRHandle> videoSession,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (VideoSessionKHRHandle* __dsl_videoSession = videoSession)
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyVideoSessionKHR(__dsl_device, __dsl_videoSession, __dsl_pAllocator);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkDestroyVideoSessionParametersKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        public static extern void DestroyVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkVideoSessionParametersKHR")]
                VideoSessionParametersKHRHandle* videoSessionParameters,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionParametersKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkVideoSessionParametersKHR")]
                Ref<VideoSessionParametersKHRHandle> videoSessionParameters,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (
                VideoSessionParametersKHRHandle* __dsl_videoSessionParameters =
                    videoSessionParameters
            )
            fixed (DeviceHandle* __dsl_device = device)
            {
                DestroyVideoSessionParametersKHR(
                    __dsl_device,
                    __dsl_videoSessionParameters,
                    __dsl_pAllocator
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDeviceWaitIdle")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result DeviceWaitIdle(
            [NativeTypeName("VkDevice")] DeviceHandle* device
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDeviceWaitIdle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result DeviceWaitIdle([NativeTypeName("VkDevice")] Ref<DeviceHandle> device)
        {
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)DeviceWaitIdle(__dsl_device);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkDisplayPowerControlEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        public static extern Result DisplayPowerControlEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
            [NativeTypeName("const VkDisplayPowerInfoEXT *")] DisplayPowerInfoEXT* pDisplayPowerInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkDisplayPowerControlEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result DisplayPowerControlEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
            [NativeTypeName("const VkDisplayPowerInfoEXT *")]
                Ref<DisplayPowerInfoEXT> pDisplayPowerInfo
        )
        {
            fixed (DisplayPowerInfoEXT* __dsl_pDisplayPowerInfo = pDisplayPowerInfo)
            fixed (DisplayKHRHandle* __dsl_display = display)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)DisplayPowerControlEXT(
                    __dsl_device,
                    __dsl_display,
                    __dsl_pDisplayPowerInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkEndCommandBuffer")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result EndCommandBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEndCommandBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EndCommandBuffer(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                return (Result)EndCommandBuffer(__dsl_commandBuffer);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkEnumerateDeviceExtensionProperties"
        )]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result EnumerateDeviceExtensionProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const char *")] sbyte* pLayerName,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            ExtensionProperties* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceExtensionProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateDeviceExtensionProperties(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const char *")] Ref<sbyte> pLayerName,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<ExtensionProperties> pProperties
        )
        {
            fixed (ExtensionProperties* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (sbyte* __dsl_pLayerName = pLayerName)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)EnumerateDeviceExtensionProperties(
                    __dsl_physicalDevice,
                    __dsl_pLayerName,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkEnumerateDeviceLayerProperties")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result EnumerateDeviceLayerProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            LayerProperties* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceLayerProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateDeviceLayerProperties(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<LayerProperties> pProperties
        )
        {
            fixed (LayerProperties* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)EnumerateDeviceLayerProperties(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkEnumerateInstanceExtensionProperties"
        )]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result EnumerateInstanceExtensionProperties(
            [NativeTypeName("const char *")] sbyte* pLayerName,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            ExtensionProperties* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceExtensionProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateInstanceExtensionProperties(
            [NativeTypeName("const char *")] Ref<sbyte> pLayerName,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<ExtensionProperties> pProperties
        )
        {
            fixed (ExtensionProperties* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (sbyte* __dsl_pLayerName = pLayerName)
            {
                return (Result)EnumerateInstanceExtensionProperties(
                    __dsl_pLayerName,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkEnumerateInstanceLayerProperties"
        )]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result EnumerateInstanceLayerProperties(
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            LayerProperties* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceLayerProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateInstanceLayerProperties(
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<LayerProperties> pProperties
        )
        {
            fixed (LayerProperties* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            {
                return (Result)EnumerateInstanceLayerProperties(
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkEnumerateInstanceVersion")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern Result EnumerateInstanceVersion(
            [NativeTypeName("uint32_t *")] uint* pApiVersion
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumerateInstanceVersion(
            [NativeTypeName("uint32_t *")] Ref<uint> pApiVersion
        )
        {
            fixed (uint* __dsl_pApiVersion = pApiVersion)
            {
                return (Result)EnumerateInstanceVersion(__dsl_pApiVersion);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkEnumeratePhysicalDeviceGroups")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern Result EnumeratePhysicalDeviceGroups(
            [NativeTypeName("VkInstance")] InstanceHandle* instance,
            [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceGroupCount,
            PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroups")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumeratePhysicalDeviceGroups(
            [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
            [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceGroupCount,
            Ref<PhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties
        )
        {
            fixed (
                PhysicalDeviceGroupProperties* __dsl_pPhysicalDeviceGroupProperties =
                    pPhysicalDeviceGroupProperties
            )
            fixed (uint* __dsl_pPhysicalDeviceGroupCount = pPhysicalDeviceGroupCount)
            fixed (InstanceHandle* __dsl_instance = instance)
            {
                return (Result)EnumeratePhysicalDeviceGroups(
                    __dsl_instance,
                    __dsl_pPhysicalDeviceGroupCount,
                    __dsl_pPhysicalDeviceGroupProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkEnumeratePhysicalDeviceGroupsKHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
        public static extern Result EnumeratePhysicalDeviceGroupsKHR(
            [NativeTypeName("VkInstance")] InstanceHandle* instance,
            [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceGroupCount,
            PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroupsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumeratePhysicalDeviceGroupsKHR(
            [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
            [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceGroupCount,
            Ref<PhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties
        )
        {
            fixed (
                PhysicalDeviceGroupProperties* __dsl_pPhysicalDeviceGroupProperties =
                    pPhysicalDeviceGroupProperties
            )
            fixed (uint* __dsl_pPhysicalDeviceGroupCount = pPhysicalDeviceGroupCount)
            fixed (InstanceHandle* __dsl_instance = instance)
            {
                return (Result)EnumeratePhysicalDeviceGroupsKHR(
                    __dsl_instance,
                    __dsl_pPhysicalDeviceGroupCount,
                    __dsl_pPhysicalDeviceGroupProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        public static extern Result EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t")] uint queueFamilyIndex,
            [NativeTypeName("uint32_t *")] uint* pCounterCount,
            PerformanceCounterKHR* pCounters,
            PerformanceCounterDescriptionKHR* pCounterDescriptions
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t")] uint queueFamilyIndex,
            [NativeTypeName("uint32_t *")] Ref<uint> pCounterCount,
            Ref<PerformanceCounterKHR> pCounters,
            Ref<PerformanceCounterDescriptionKHR> pCounterDescriptions
        )
        {
            fixed (
                PerformanceCounterDescriptionKHR* __dsl_pCounterDescriptions = pCounterDescriptions
            )
            fixed (PerformanceCounterKHR* __dsl_pCounters = pCounters)
            fixed (uint* __dsl_pCounterCount = pCounterCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
                    __dsl_physicalDevice,
                    queueFamilyIndex,
                    __dsl_pCounterCount,
                    __dsl_pCounters,
                    __dsl_pCounterDescriptions
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkEnumeratePhysicalDevices")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result EnumeratePhysicalDevices(
            [NativeTypeName("VkInstance")] InstanceHandle* instance,
            [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceCount,
            [NativeTypeName("VkPhysicalDevice *")] PhysicalDeviceHandle** pPhysicalDevices
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result EnumeratePhysicalDevices(
            [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
            [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceCount,
            [NativeTypeName("VkPhysicalDevice *")] Ref2D<PhysicalDeviceHandle> pPhysicalDevices
        )
        {
            fixed (PhysicalDeviceHandle** __dsl_pPhysicalDevices = pPhysicalDevices)
            fixed (uint* __dsl_pPhysicalDeviceCount = pPhysicalDeviceCount)
            fixed (InstanceHandle* __dsl_instance = instance)
            {
                return (Result)EnumeratePhysicalDevices(
                    __dsl_instance,
                    __dsl_pPhysicalDeviceCount,
                    __dsl_pPhysicalDevices
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkFlushMappedMemoryRanges")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result FlushMappedMemoryRanges(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint memoryRangeCount,
            [NativeTypeName("const VkMappedMemoryRange *")] MappedMemoryRange* pMemoryRanges
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkFlushMappedMemoryRanges")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result FlushMappedMemoryRanges(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint memoryRangeCount,
            [NativeTypeName("const VkMappedMemoryRange *")] Ref<MappedMemoryRange> pMemoryRanges
        )
        {
            fixed (MappedMemoryRange* __dsl_pMemoryRanges = pMemoryRanges)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)FlushMappedMemoryRanges(
                    __dsl_device,
                    memoryRangeCount,
                    __dsl_pMemoryRanges
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkFreeCommandBuffers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FreeCommandBuffer(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
            [NativeTypeName("const VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
        )
        {
            fixed (CommandBufferHandle* __dsl_pCommandBuffers = pCommandBuffers)
            fixed (CommandPoolHandle* __dsl_commandPool = commandPool)
            fixed (DeviceHandle* __dsl_device = device)
            {
                FreeCommandBuffers(
                    __dsl_device,
                    __dsl_commandPool,
                    1,
                    (CommandBufferHandle**)&__dsl_pCommandBuffers
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkFreeCommandBuffers")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void FreeCommandBuffers(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
            [NativeTypeName("uint32_t")] uint commandBufferCount,
            [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle** pCommandBuffers
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkFreeCommandBuffers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FreeCommandBuffers(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
            [NativeTypeName("uint32_t")] uint commandBufferCount,
            [NativeTypeName("const VkCommandBuffer *")] Ref2D<CommandBufferHandle> pCommandBuffers
        )
        {
            fixed (CommandBufferHandle** __dsl_pCommandBuffers = pCommandBuffers)
            fixed (CommandPoolHandle* __dsl_commandPool = commandPool)
            fixed (DeviceHandle* __dsl_device = device)
            {
                FreeCommandBuffers(
                    __dsl_device,
                    __dsl_commandPool,
                    commandBufferCount,
                    __dsl_pCommandBuffers
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkFreeDescriptorSets")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result FreeDescriptorSets(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle* descriptorPool,
            [NativeTypeName("uint32_t")] uint descriptorSetCount,
            [NativeTypeName("const VkDescriptorSet *")] DescriptorSetHandle** pDescriptorSets
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkFreeDescriptorSets")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result FreeDescriptorSets(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDescriptorPool")] Ref<DescriptorPoolHandle> descriptorPool,
            [NativeTypeName("uint32_t")] uint descriptorSetCount,
            [NativeTypeName("const VkDescriptorSet *")] Ref2D<DescriptorSetHandle> pDescriptorSets
        )
        {
            fixed (DescriptorSetHandle** __dsl_pDescriptorSets = pDescriptorSets)
            fixed (DescriptorPoolHandle* __dsl_descriptorPool = descriptorPool)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)FreeDescriptorSets(
                    __dsl_device,
                    __dsl_descriptorPool,
                    descriptorSetCount,
                    __dsl_pDescriptorSets
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkFreeMemory")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void FreeMemory(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkFreeMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FreeMemory(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DeviceMemoryHandle* __dsl_memory = memory)
            fixed (DeviceHandle* __dsl_device = device)
            {
                FreeMemory(__dsl_device, __dsl_memory, __dsl_pAllocator);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetAccelerationStructureBuildSizesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern void GetAccelerationStructureBuildSizesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            AccelerationStructureBuildTypeKHR buildType,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                AccelerationStructureBuildGeometryInfoKHR* pBuildInfo,
            [NativeTypeName("const uint32_t *")] uint* pMaxPrimitiveCounts,
            AccelerationStructureBuildSizesInfoKHR* pSizeInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureBuildSizesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetAccelerationStructureBuildSizesKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            AccelerationStructureBuildTypeKHR buildType,
            [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
                Ref<AccelerationStructureBuildGeometryInfoKHR> pBuildInfo,
            [NativeTypeName("const uint32_t *")] Ref<uint> pMaxPrimitiveCounts,
            Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
        )
        {
            fixed (AccelerationStructureBuildSizesInfoKHR* __dsl_pSizeInfo = pSizeInfo)
            fixed (uint* __dsl_pMaxPrimitiveCounts = pMaxPrimitiveCounts)
            fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pBuildInfo = pBuildInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetAccelerationStructureBuildSizesKHR(
                    __dsl_device,
                    buildType,
                    __dsl_pBuildInfo,
                    __dsl_pMaxPrimitiveCounts,
                    __dsl_pSizeInfo
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetAccelerationStructureDeviceAddressKHR"
        )]
        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern ulong GetAccelerationStructureDeviceAddressKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkAccelerationStructureDeviceAddressInfoKHR *")]
                AccelerationStructureDeviceAddressInfoKHR* pInfo
        );

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureDeviceAddressKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetAccelerationStructureDeviceAddressKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkAccelerationStructureDeviceAddressInfoKHR *")]
                Ref<AccelerationStructureDeviceAddressInfoKHR> pInfo
        )
        {
            fixed (AccelerationStructureDeviceAddressInfoKHR* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (ulong)GetAccelerationStructureDeviceAddressKHR(__dsl_device, __dsl_pInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetAccelerationStructureHandleNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetAccelerationStructureHandleNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkAccelerationStructureNV")]
                AccelerationStructureNVHandle* accelerationStructure,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureHandleNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetAccelerationStructureHandleNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkAccelerationStructureNV")]
                Ref<AccelerationStructureNVHandle> accelerationStructure,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (
                AccelerationStructureNVHandle* __dsl_accelerationStructure = accelerationStructure
            )
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetAccelerationStructureHandleNV(
                    __dsl_device,
                    __dsl_accelerationStructure,
                    dataSize,
                    __dsl_pData
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetAccelerationStructureMemoryRequirementsNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern void GetAccelerationStructureMemoryRequirementsNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkAccelerationStructureMemoryRequirementsInfoNV *")]
                AccelerationStructureMemoryRequirementsInfoNV* pInfo,
            [NativeTypeName("VkMemoryRequirements2KHR *")] MemoryRequirements2* pMemoryRequirements
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureMemoryRequirementsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetAccelerationStructureMemoryRequirementsNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkAccelerationStructureMemoryRequirementsInfoNV *")]
                Ref<AccelerationStructureMemoryRequirementsInfoNV> pInfo,
            [NativeTypeName("VkMemoryRequirements2KHR *")]
                Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (AccelerationStructureMemoryRequirementsInfoNV* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetAccelerationStructureMemoryRequirementsNV(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_EXT_descriptor_buffer+VK_KHR_acceleration_structure",
                "VK_EXT_descriptor_buffer+VK_NV_ray_tracing",
            ],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkAccelerationStructureCaptureDescriptorDataInfoEXT *")]
                AccelerationStructureCaptureDescriptorDataInfoEXT* pInfo,
            void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_EXT_descriptor_buffer+VK_KHR_acceleration_structure",
                "VK_EXT_descriptor_buffer+VK_NV_ray_tracing",
            ],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkAccelerationStructureCaptureDescriptorDataInfoEXT *")]
                Ref<AccelerationStructureCaptureDescriptorDataInfoEXT> pInfo,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (AccelerationStructureCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pData
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetBufferDeviceAddress")]
        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        public static extern ulong GetBufferDeviceAddress(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
        );

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferDeviceAddress(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
        )
        {
            fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (ulong)GetBufferDeviceAddress(__dsl_device, __dsl_pInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetBufferDeviceAddressEXT")]
        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_buffer_device_address"],
            ImpliesSets = [
                "VK_EXT_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_EXT_buffer_device_address+VK_VERSION_1_1",
            ]
        )]
        public static extern ulong GetBufferDeviceAddressEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
        );

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_buffer_device_address"],
            ImpliesSets = [
                "VK_EXT_buffer_device_address+VK_KHR_get_physical_device_properties2",
                "VK_EXT_buffer_device_address+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferDeviceAddressEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
        )
        {
            fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (ulong)GetBufferDeviceAddressEXT(__dsl_device, __dsl_pInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetBufferDeviceAddressKHR")]
        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_buffer_device_address"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern ulong GetBufferDeviceAddressKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
        );

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_buffer_device_address"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferDeviceAddressKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
        )
        {
            fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (ulong)GetBufferDeviceAddressKHR(__dsl_device, __dsl_pInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetBufferMemoryRequirements")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void GetBufferMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkBuffer")] BufferHandle* buffer,
            MemoryRequirements* pMemoryRequirements
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetBufferMemoryRequirements(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
            Ref<MemoryRequirements> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (BufferHandle* __dsl_buffer = buffer)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetBufferMemoryRequirements(__dsl_device, __dsl_buffer, __dsl_pMemoryRequirements);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetBufferMemoryRequirements2")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetBufferMemoryRequirements2(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
                BufferMemoryRequirementsInfo2* pInfo,
            MemoryRequirements2* pMemoryRequirements
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetBufferMemoryRequirements2(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
                Ref<BufferMemoryRequirementsInfo2> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (BufferMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetBufferMemoryRequirements2(__dsl_device, __dsl_pInfo, __dsl_pMemoryRequirements);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetBufferMemoryRequirements2KHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
        public static extern void GetBufferMemoryRequirements2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
                BufferMemoryRequirementsInfo2* pInfo,
            MemoryRequirements2* pMemoryRequirements
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetBufferMemoryRequirements2KHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
                Ref<BufferMemoryRequirementsInfo2> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (BufferMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetBufferMemoryRequirements2KHR(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetBufferOpaqueCaptureAddress")]
        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        public static extern ulong GetBufferOpaqueCaptureAddress(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
        );

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferOpaqueCaptureAddress(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
        )
        {
            fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (ulong)GetBufferOpaqueCaptureAddress(__dsl_device, __dsl_pInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetBufferOpaqueCaptureAddressKHR"
        )]
        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_buffer_device_address"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern ulong GetBufferOpaqueCaptureAddressKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
        );

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_buffer_device_address"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddressKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetBufferOpaqueCaptureAddressKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
        )
        {
            fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (ulong)GetBufferOpaqueCaptureAddressKHR(__dsl_device, __dsl_pInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetBufferOpaqueCaptureDescriptorDataEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result GetBufferOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkBufferCaptureDescriptorDataInfoEXT *")]
                BufferCaptureDescriptorDataInfoEXT* pInfo,
            void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureDescriptorDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetBufferOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkBufferCaptureDescriptorDataInfoEXT *")]
                Ref<BufferCaptureDescriptorDataInfoEXT> pInfo,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (BufferCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetBufferOpaqueCaptureDescriptorDataEXT(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pData
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetCalibratedTimestampsEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_calibrated_timestamps"],
            ImpliesSets = [
                "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetCalibratedTimestampsEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint timestampCount,
            [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
                CalibratedTimestampInfoKHR* pTimestampInfos,
            [NativeTypeName("uint64_t *")] ulong* pTimestamps,
            [NativeTypeName("uint64_t *")] ulong* pMaxDeviation
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_calibrated_timestamps"],
            ImpliesSets = [
                "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetCalibratedTimestampsEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint timestampCount,
            [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
                Ref<CalibratedTimestampInfoKHR> pTimestampInfos,
            [NativeTypeName("uint64_t *")] Ref<ulong> pTimestamps,
            [NativeTypeName("uint64_t *")] Ref<ulong> pMaxDeviation
        )
        {
            fixed (ulong* __dsl_pMaxDeviation = pMaxDeviation)
            fixed (ulong* __dsl_pTimestamps = pTimestamps)
            fixed (CalibratedTimestampInfoKHR* __dsl_pTimestampInfos = pTimestampInfos)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetCalibratedTimestampsEXT(
                    __dsl_device,
                    timestampCount,
                    __dsl_pTimestampInfos,
                    __dsl_pTimestamps,
                    __dsl_pMaxDeviation
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetCalibratedTimestampsKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_calibrated_timestamps"],
            ImpliesSets = [
                "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetCalibratedTimestampsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint timestampCount,
            [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
                CalibratedTimestampInfoKHR* pTimestampInfos,
            [NativeTypeName("uint64_t *")] ulong* pTimestamps,
            [NativeTypeName("uint64_t *")] ulong* pMaxDeviation
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_calibrated_timestamps"],
            ImpliesSets = [
                "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetCalibratedTimestampsKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint timestampCount,
            [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
                Ref<CalibratedTimestampInfoKHR> pTimestampInfos,
            [NativeTypeName("uint64_t *")] Ref<ulong> pTimestamps,
            [NativeTypeName("uint64_t *")] Ref<ulong> pMaxDeviation
        )
        {
            fixed (ulong* __dsl_pMaxDeviation = pMaxDeviation)
            fixed (ulong* __dsl_pTimestamps = pTimestamps)
            fixed (CalibratedTimestampInfoKHR* __dsl_pTimestampInfos = pTimestampInfos)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetCalibratedTimestampsKHR(
                    __dsl_device,
                    timestampCount,
                    __dsl_pTimestampInfos,
                    __dsl_pTimestamps,
                    __dsl_pMaxDeviation
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetClusterAccelerationStructureBuildSizesNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cluster_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        public static extern void GetClusterAccelerationStructureBuildSizesNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkClusterAccelerationStructureInputInfoNV *")]
                ClusterAccelerationStructureInputInfoNV* pInfo,
            AccelerationStructureBuildSizesInfoKHR* pSizeInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cluster_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetClusterAccelerationStructureBuildSizesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetClusterAccelerationStructureBuildSizesNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkClusterAccelerationStructureInputInfoNV *")]
                Ref<ClusterAccelerationStructureInputInfoNV> pInfo,
            Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
        )
        {
            fixed (AccelerationStructureBuildSizesInfoKHR* __dsl_pSizeInfo = pSizeInfo)
            fixed (ClusterAccelerationStructureInputInfoNV* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetClusterAccelerationStructureBuildSizesNV(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pSizeInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetCudaModuleCacheNV")]
        [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
        public static extern Result GetCudaModuleCacheNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkCudaModuleNV")] CudaModuleNVHandle* module,
            [NativeTypeName("size_t *")] nuint* pCacheSize,
            void* pCacheData
        );

        [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetCudaModuleCacheNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetCudaModuleCacheNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkCudaModuleNV")] Ref<CudaModuleNVHandle> module,
            [NativeTypeName("size_t *")] Ref<nuint> pCacheSize,
            Ref pCacheData
        )
        {
            fixed (void* __dsl_pCacheData = pCacheData)
            fixed (nuint* __dsl_pCacheSize = pCacheSize)
            fixed (CudaModuleNVHandle* __dsl_module = module)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetCudaModuleCacheNV(
                    __dsl_device,
                    __dsl_module,
                    __dsl_pCacheSize,
                    __dsl_pCacheData
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeferredOperationMaxConcurrencyKHR"
        )]
        [return: NativeTypeName("uint32_t")]
        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        public static extern uint GetDeferredOperationMaxConcurrencyKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* operation
        );

        [return: NativeTypeName("uint32_t")]
        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeferredOperationMaxConcurrencyKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDeferredOperationMaxConcurrencyKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeferredOperationKHR")] Ref<DeferredOperationKHRHandle> operation
        )
        {
            fixed (DeferredOperationKHRHandle* __dsl_operation = operation)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (uint)GetDeferredOperationMaxConcurrencyKHR(__dsl_device, __dsl_operation);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetDeferredOperationResultKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        public static extern Result GetDeferredOperationResultKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* operation
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeferredOperationResultKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDeferredOperationResultKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeferredOperationKHR")] Ref<DeferredOperationKHRHandle> operation
        )
        {
            fixed (DeferredOperationKHRHandle* __dsl_operation = operation)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetDeferredOperationResultKHR(__dsl_device, __dsl_operation);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetDescriptorEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void GetDescriptorEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDescriptorGetInfoEXT *")]
                DescriptorGetInfoEXT* pDescriptorInfo,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pDescriptor
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDescriptorGetInfoEXT *")]
                Ref<DescriptorGetInfoEXT> pDescriptorInfo,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pDescriptor
        )
        {
            fixed (void* __dsl_pDescriptor = pDescriptor)
            fixed (DescriptorGetInfoEXT* __dsl_pDescriptorInfo = pDescriptorInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDescriptorEXT(__dsl_device, __dsl_pDescriptorInfo, dataSize, __dsl_pDescriptor);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDescriptorSetHostMappingVALVE"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VALVE_descriptor_set_host_mapping"],
            ImpliesSets = [
                "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
                "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
            ]
        )]
        public static extern void GetDescriptorSetHostMappingValve(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle* descriptorSet,
            void** ppData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VALVE_descriptor_set_host_mapping"],
            ImpliesSets = [
                "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
                "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetHostMappingVALVE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetHostMappingValve(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDescriptorSet")] Ref<DescriptorSetHandle> descriptorSet,
            Ref2D ppData
        )
        {
            fixed (void** __dsl_ppData = ppData)
            fixed (DescriptorSetHandle* __dsl_descriptorSet = descriptorSet)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDescriptorSetHostMappingValve(__dsl_device, __dsl_descriptorSet, __dsl_ppData);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDescriptorSetLayoutBindingOffsetEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void GetDescriptorSetLayoutBindingOffsetEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle* layout,
            [NativeTypeName("uint32_t")] uint binding,
            [NativeTypeName("VkDeviceSize *")] ulong* pOffset
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutBindingOffsetEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutBindingOffsetEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDescriptorSetLayout")] Ref<DescriptorSetLayoutHandle> layout,
            [NativeTypeName("uint32_t")] uint binding,
            [NativeTypeName("VkDeviceSize *")] Ref<ulong> pOffset
        )
        {
            fixed (ulong* __dsl_pOffset = pOffset)
            fixed (DescriptorSetLayoutHandle* __dsl_layout = layout)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDescriptorSetLayoutBindingOffsetEXT(
                    __dsl_device,
                    __dsl_layout,
                    binding,
                    __dsl_pOffset
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDescriptorSetLayoutHostMappingInfoVALVE"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VALVE_descriptor_set_host_mapping"],
            ImpliesSets = [
                "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
                "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
            ]
        )]
        public static extern void GetDescriptorSetLayoutHostMappingInfoValve(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDescriptorSetBindingReferenceVALVE *")]
                DescriptorSetBindingReferenceValve* pBindingReference,
            DescriptorSetLayoutHostMappingInfoValve* pHostMapping
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VALVE_descriptor_set_host_mapping"],
            ImpliesSets = [
                "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
                "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutHostMappingInfoVALVE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutHostMappingInfoValve(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDescriptorSetBindingReferenceVALVE *")]
                Ref<DescriptorSetBindingReferenceValve> pBindingReference,
            Ref<DescriptorSetLayoutHostMappingInfoValve> pHostMapping
        )
        {
            fixed (DescriptorSetLayoutHostMappingInfoValve* __dsl_pHostMapping = pHostMapping)
            fixed (DescriptorSetBindingReferenceValve* __dsl_pBindingReference = pBindingReference)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDescriptorSetLayoutHostMappingInfoValve(
                    __dsl_device,
                    __dsl_pBindingReference,
                    __dsl_pHostMapping
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetDescriptorSetLayoutSizeEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void GetDescriptorSetLayoutSizeEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle* layout,
            [NativeTypeName("VkDeviceSize *")] ulong* pLayoutSizeInBytes
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSizeEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutSizeEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDescriptorSetLayout")] Ref<DescriptorSetLayoutHandle> layout,
            [NativeTypeName("VkDeviceSize *")] Ref<ulong> pLayoutSizeInBytes
        )
        {
            fixed (ulong* __dsl_pLayoutSizeInBytes = pLayoutSizeInBytes)
            fixed (DescriptorSetLayoutHandle* __dsl_layout = layout)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDescriptorSetLayoutSizeEXT(__dsl_device, __dsl_layout, __dsl_pLayoutSizeInBytes);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetDescriptorSetLayoutSupport")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetDescriptorSetLayoutSupport(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
                DescriptorSetLayoutCreateInfo* pCreateInfo,
            DescriptorSetLayoutSupport* pSupport
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutSupport(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
                Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
            Ref<DescriptorSetLayoutSupport> pSupport
        )
        {
            fixed (DescriptorSetLayoutSupport* __dsl_pSupport = pSupport)
            fixed (DescriptorSetLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDescriptorSetLayoutSupport(__dsl_device, __dsl_pCreateInfo, __dsl_pSupport);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDescriptorSetLayoutSupportKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance3"],
            ImpliesSets = [
                "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
                "VK_KHR_maintenance3+VK_VERSION_1_1",
            ]
        )]
        public static extern void GetDescriptorSetLayoutSupportKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
                DescriptorSetLayoutCreateInfo* pCreateInfo,
            DescriptorSetLayoutSupport* pSupport
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance3"],
            ImpliesSets = [
                "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
                "VK_KHR_maintenance3+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupportKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDescriptorSetLayoutSupportKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
                Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
            Ref<DescriptorSetLayoutSupport> pSupport
        )
        {
            fixed (DescriptorSetLayoutSupport* __dsl_pSupport = pSupport)
            fixed (DescriptorSetLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDescriptorSetLayoutSupportKHR(__dsl_device, __dsl_pCreateInfo, __dsl_pSupport);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceAccelerationStructureCompatibilityKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern void GetDeviceAccelerationStructureCompatibilityKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkAccelerationStructureVersionInfoKHR *")]
                AccelerationStructureVersionInfoKHR* pVersionInfo,
            AccelerationStructureCompatibilityKHR* pCompatibility
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceAccelerationStructureCompatibilityKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceAccelerationStructureCompatibilityKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkAccelerationStructureVersionInfoKHR *")]
                Ref<AccelerationStructureVersionInfoKHR> pVersionInfo,
            Ref<AccelerationStructureCompatibilityKHR> pCompatibility
        )
        {
            fixed (AccelerationStructureCompatibilityKHR* __dsl_pCompatibility = pCompatibility)
            fixed (AccelerationStructureVersionInfoKHR* __dsl_pVersionInfo = pVersionInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceAccelerationStructureCompatibilityKHR(
                    __dsl_device,
                    __dsl_pVersionInfo,
                    __dsl_pCompatibility
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceBufferMemoryRequirements"
        )]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void GetDeviceBufferMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
                DeviceBufferMemoryRequirements* pInfo,
            MemoryRequirements2* pMemoryRequirements
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceBufferMemoryRequirements(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
                Ref<DeviceBufferMemoryRequirements> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (DeviceBufferMemoryRequirements* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceBufferMemoryRequirements(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceBufferMemoryRequirementsKHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
        public static extern void GetDeviceBufferMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
                DeviceBufferMemoryRequirements* pInfo,
            MemoryRequirements2* pMemoryRequirements
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirementsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceBufferMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
                Ref<DeviceBufferMemoryRequirements> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (DeviceBufferMemoryRequirements* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceBufferMemoryRequirementsKHR(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetDeviceFaultInfoEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_fault"],
            ImpliesSets = [
                "VK_EXT_device_fault+VK_KHR_get_physical_device_properties2",
                "VK_EXT_device_fault+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetDeviceFaultInfoEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            DeviceFaultCountsEXT* pFaultCounts,
            DeviceFaultInfoEXT* pFaultInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_fault"],
            ImpliesSets = [
                "VK_EXT_device_fault+VK_KHR_get_physical_device_properties2",
                "VK_EXT_device_fault+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceFaultInfoEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDeviceFaultInfoEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            Ref<DeviceFaultCountsEXT> pFaultCounts,
            Ref<DeviceFaultInfoEXT> pFaultInfo
        )
        {
            fixed (DeviceFaultInfoEXT* __dsl_pFaultInfo = pFaultInfo)
            fixed (DeviceFaultCountsEXT* __dsl_pFaultCounts = pFaultCounts)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetDeviceFaultInfoEXT(
                    __dsl_device,
                    __dsl_pFaultCounts,
                    __dsl_pFaultInfo
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceGroupPeerMemoryFeatures"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetDeviceGroupPeerMemoryFeatures(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint heapIndex,
            [NativeTypeName("uint32_t")] uint localDeviceIndex,
            [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
            [NativeTypeName("VkPeerMemoryFeatureFlags *")] uint* pPeerMemoryFeatures
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeatures")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceGroupPeerMemoryFeatures(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint heapIndex,
            [NativeTypeName("uint32_t")] uint localDeviceIndex,
            [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
            [NativeTypeName("VkPeerMemoryFeatureFlags *")] Ref<uint> pPeerMemoryFeatures
        )
        {
            fixed (uint* __dsl_pPeerMemoryFeatures = pPeerMemoryFeatures)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceGroupPeerMemoryFeatures(
                    __dsl_device,
                    heapIndex,
                    localDeviceIndex,
                    remoteDeviceIndex,
                    __dsl_pPeerMemoryFeatures
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceGroupPeerMemoryFeaturesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_device_group"],
            ImpliesSets = ["VK_KHR_device_group_creation"]
        )]
        public static extern void GetDeviceGroupPeerMemoryFeaturesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint heapIndex,
            [NativeTypeName("uint32_t")] uint localDeviceIndex,
            [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
            [NativeTypeName("VkPeerMemoryFeatureFlags *")] uint* pPeerMemoryFeatures
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_device_group"],
            ImpliesSets = ["VK_KHR_device_group_creation"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeaturesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceGroupPeerMemoryFeaturesKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint heapIndex,
            [NativeTypeName("uint32_t")] uint localDeviceIndex,
            [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
            [NativeTypeName("VkPeerMemoryFeatureFlags *")] Ref<uint> pPeerMemoryFeatures
        )
        {
            fixed (uint* __dsl_pPeerMemoryFeatures = pPeerMemoryFeatures)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceGroupPeerMemoryFeaturesKHR(
                    __dsl_device,
                    heapIndex,
                    localDeviceIndex,
                    remoteDeviceIndex,
                    __dsl_pPeerMemoryFeatures
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceGroupPresentCapabilitiesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        public static extern Result GetDeviceGroupPresentCapabilitiesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            DeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPresentCapabilitiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDeviceGroupPresentCapabilitiesKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            Ref<DeviceGroupPresentCapabilitiesKHR> pDeviceGroupPresentCapabilities
        )
        {
            fixed (
                DeviceGroupPresentCapabilitiesKHR* __dsl_pDeviceGroupPresentCapabilities =
                    pDeviceGroupPresentCapabilities
            )
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetDeviceGroupPresentCapabilitiesKHR(
                    __dsl_device,
                    __dsl_pDeviceGroupPresentCapabilities
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceGroupSurfacePresentModesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        public static extern Result GetDeviceGroupSurfacePresentModesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
            [NativeTypeName("VkDeviceGroupPresentModeFlagsKHR *")] uint* pModes
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupSurfacePresentModesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDeviceGroupSurfacePresentModesKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
            [NativeTypeName("VkDeviceGroupPresentModeFlagsKHR *")] Ref<uint> pModes
        )
        {
            fixed (uint* __dsl_pModes = pModes)
            fixed (SurfaceKHRHandle* __dsl_surface = surface)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetDeviceGroupSurfacePresentModesKHR(
                    __dsl_device,
                    __dsl_surface,
                    __dsl_pModes
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceImageMemoryRequirements"
        )]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void GetDeviceImageMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                DeviceImageMemoryRequirements* pInfo,
            MemoryRequirements2* pMemoryRequirements
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageMemoryRequirements(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                Ref<DeviceImageMemoryRequirements> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceImageMemoryRequirements(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceImageMemoryRequirementsKHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
        public static extern void GetDeviceImageMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                DeviceImageMemoryRequirements* pInfo,
            MemoryRequirements2* pMemoryRequirements
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirementsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                Ref<DeviceImageMemoryRequirements> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceImageMemoryRequirementsKHR(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceImageSparseMemoryRequirements"
        )]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void GetDeviceImageSparseMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                DeviceImageMemoryRequirements* pInfo,
            [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
            SparseImageMemoryRequirements2* pSparseMemoryRequirements
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageSparseMemoryRequirements(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                Ref<DeviceImageMemoryRequirements> pInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
            Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
        )
        {
            fixed (
                SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                    pSparseMemoryRequirements
            )
            fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
            fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceImageSparseMemoryRequirements(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pSparseMemoryRequirementCount,
                    __dsl_pSparseMemoryRequirements
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceImageSparseMemoryRequirementsKHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
        public static extern void GetDeviceImageSparseMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                DeviceImageMemoryRequirements* pInfo,
            [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
            SparseImageMemoryRequirements2* pSparseMemoryRequirements
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirementsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageSparseMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
                Ref<DeviceImageMemoryRequirements> pInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
            Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
        )
        {
            fixed (
                SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                    pSparseMemoryRequirements
            )
            fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
            fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceImageSparseMemoryRequirementsKHR(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pSparseMemoryRequirementCount,
                    __dsl_pSparseMemoryRequirements
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceImageSubresourceLayout"
        )]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern void GetDeviceImageSubresourceLayout(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
                DeviceImageSubresourceInfo* pInfo,
            SubresourceLayout2* pLayout
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageSubresourceLayout(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
                Ref<DeviceImageSubresourceInfo> pInfo,
            Ref<SubresourceLayout2> pLayout
        )
        {
            fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
            fixed (DeviceImageSubresourceInfo* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceImageSubresourceLayout(__dsl_device, __dsl_pInfo, __dsl_pLayout);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceImageSubresourceLayoutKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        public static extern void GetDeviceImageSubresourceLayoutKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
                DeviceImageSubresourceInfo* pInfo,
            SubresourceLayout2* pLayout
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayoutKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceImageSubresourceLayoutKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
                Ref<DeviceImageSubresourceInfo> pInfo,
            Ref<SubresourceLayout2> pLayout
        )
        {
            fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
            fixed (DeviceImageSubresourceInfo* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceImageSubresourceLayoutKHR(__dsl_device, __dsl_pInfo, __dsl_pLayout);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetDeviceMemoryCommitment")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void GetDeviceMemoryCommitment(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
            [NativeTypeName("VkDeviceSize *")] ulong* pCommittedMemoryInBytes
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryCommitment")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceMemoryCommitment(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
            [NativeTypeName("VkDeviceSize *")] Ref<ulong> pCommittedMemoryInBytes
        )
        {
            fixed (ulong* __dsl_pCommittedMemoryInBytes = pCommittedMemoryInBytes)
            fixed (DeviceMemoryHandle* __dsl_memory = memory)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceMemoryCommitment(
                    __dsl_device,
                    __dsl_memory,
                    __dsl_pCommittedMemoryInBytes
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddress"
        )]
        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        public static extern ulong GetDeviceMemoryOpaqueCaptureAddress(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
                DeviceMemoryOpaqueCaptureAddressInfo* pInfo
        );

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetDeviceMemoryOpaqueCaptureAddress(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
                Ref<DeviceMemoryOpaqueCaptureAddressInfo> pInfo
        )
        {
            fixed (DeviceMemoryOpaqueCaptureAddressInfo* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (ulong)GetDeviceMemoryOpaqueCaptureAddress(__dsl_device, __dsl_pInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddressKHR"
        )]
        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_buffer_device_address"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern ulong GetDeviceMemoryOpaqueCaptureAddressKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
                DeviceMemoryOpaqueCaptureAddressInfo* pInfo
        );

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_buffer_device_address"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddressKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetDeviceMemoryOpaqueCaptureAddressKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
                Ref<DeviceMemoryOpaqueCaptureAddressInfo> pInfo
        )
        {
            fixed (DeviceMemoryOpaqueCaptureAddressInfo* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (ulong)GetDeviceMemoryOpaqueCaptureAddressKHR(__dsl_device, __dsl_pInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceMicromapCompatibilityEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        public static extern void GetDeviceMicromapCompatibilityEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkMicromapVersionInfoEXT *")]
                MicromapVersionInfoEXT* pVersionInfo,
            AccelerationStructureCompatibilityKHR* pCompatibility
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMicromapCompatibilityEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceMicromapCompatibilityEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkMicromapVersionInfoEXT *")]
                Ref<MicromapVersionInfoEXT> pVersionInfo,
            Ref<AccelerationStructureCompatibilityKHR> pCompatibility
        )
        {
            fixed (AccelerationStructureCompatibilityKHR* __dsl_pCompatibility = pCompatibility)
            fixed (MicromapVersionInfoEXT* __dsl_pVersionInfo = pVersionInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceMicromapCompatibilityEXT(
                    __dsl_device,
                    __dsl_pVersionInfo,
                    __dsl_pCompatibility
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetDeviceProcAddr")]
        [return: NativeTypeName("PFN_vkVoidFunction")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern PFNVkVoidFunction GetDeviceProcAddr(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const char *")] sbyte* pName
        );

        [return: NativeTypeName("PFN_vkVoidFunction")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceProcAddr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PFNVkVoidFunction GetDeviceProcAddr(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const char *")] Ref<sbyte> pName
        )
        {
            fixed (sbyte* __dsl_pName = pName)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (PFNVkVoidFunction)GetDeviceProcAddr(__dsl_device, __dsl_pName);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetDeviceQueue")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void GetDeviceQueue(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint queueFamilyIndex,
            [NativeTypeName("uint32_t")] uint queueIndex,
            [NativeTypeName("VkQueue *")] QueueHandle** pQueue
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceQueue(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint queueFamilyIndex,
            [NativeTypeName("uint32_t")] uint queueIndex,
            [NativeTypeName("VkQueue *")] Ref2D<QueueHandle> pQueue
        )
        {
            fixed (QueueHandle** __dsl_pQueue = pQueue)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceQueue(__dsl_device, queueFamilyIndex, queueIndex, __dsl_pQueue);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetDeviceQueue2")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetDeviceQueue2(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDeviceQueueInfo2 *")] DeviceQueueInfo2* pQueueInfo,
            [NativeTypeName("VkQueue *")] QueueHandle** pQueue
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetDeviceQueue2(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDeviceQueueInfo2 *")] Ref<DeviceQueueInfo2> pQueueInfo,
            [NativeTypeName("VkQueue *")] Ref2D<QueueHandle> pQueue
        )
        {
            fixed (QueueHandle** __dsl_pQueue = pQueue)
            fixed (DeviceQueueInfo2* __dsl_pQueueInfo = pQueueInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetDeviceQueue2(__dsl_device, __dsl_pQueueInfo, __dsl_pQueue);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_subpass_shading"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkRenderPass")] RenderPassHandle* renderpass,
            Extent2D* pMaxWorkgroupSize
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_HUAWEI_subpass_shading"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkRenderPass")] Ref<RenderPassHandle> renderpass,
            Ref<Extent2D> pMaxWorkgroupSize
        )
        {
            fixed (Extent2D* __dsl_pMaxWorkgroupSize = pMaxWorkgroupSize)
            fixed (RenderPassHandle* __dsl_renderpass = renderpass)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
                    __dsl_device,
                    __dsl_renderpass,
                    __dsl_pMaxWorkgroupSize
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetDisplayModeProperties2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        public static extern Result GetDisplayModeProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            DisplayModeProperties2KHR* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModeProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayModeProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<DisplayModeProperties2KHR> pProperties
        )
        {
            fixed (DisplayModeProperties2KHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (DisplayKHRHandle* __dsl_display = display)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetDisplayModeProperties2KHR(
                    __dsl_physicalDevice,
                    __dsl_display,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetDisplayModePropertiesKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        public static extern Result GetDisplayModePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            DisplayModePropertiesKHR* pProperties
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayModePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<DisplayModePropertiesKHR> pProperties
        )
        {
            fixed (DisplayModePropertiesKHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (DisplayKHRHandle* __dsl_display = display)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetDisplayModePropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_display,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDisplayPlaneCapabilities2KHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        public static extern Result GetDisplayPlaneCapabilities2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkDisplayPlaneInfo2KHR *")]
                DisplayPlaneInfo2KHR* pDisplayPlaneInfo,
            DisplayPlaneCapabilities2KHR* pCapabilities
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilities2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayPlaneCapabilities2KHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkDisplayPlaneInfo2KHR *")]
                Ref<DisplayPlaneInfo2KHR> pDisplayPlaneInfo,
            Ref<DisplayPlaneCapabilities2KHR> pCapabilities
        )
        {
            fixed (DisplayPlaneCapabilities2KHR* __dsl_pCapabilities = pCapabilities)
            fixed (DisplayPlaneInfo2KHR* __dsl_pDisplayPlaneInfo = pDisplayPlaneInfo)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetDisplayPlaneCapabilities2KHR(
                    __dsl_physicalDevice,
                    __dsl_pDisplayPlaneInfo,
                    __dsl_pCapabilities
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetDisplayPlaneCapabilitiesKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        public static extern Result GetDisplayPlaneCapabilitiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("VkDisplayModeKHR")] DisplayModeKHRHandle* mode,
            [NativeTypeName("uint32_t")] uint planeIndex,
            DisplayPlaneCapabilitiesKHR* pCapabilities
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilitiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayPlaneCapabilitiesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("VkDisplayModeKHR")] Ref<DisplayModeKHRHandle> mode,
            [NativeTypeName("uint32_t")] uint planeIndex,
            Ref<DisplayPlaneCapabilitiesKHR> pCapabilities
        )
        {
            fixed (DisplayPlaneCapabilitiesKHR* __dsl_pCapabilities = pCapabilities)
            fixed (DisplayModeKHRHandle* __dsl_mode = mode)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetDisplayPlaneCapabilitiesKHR(
                    __dsl_physicalDevice,
                    __dsl_mode,
                    planeIndex,
                    __dsl_pCapabilities
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDisplayPlaneSupportedDisplaysKHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        public static extern Result GetDisplayPlaneSupportedDisplaysKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t")] uint planeIndex,
            [NativeTypeName("uint32_t *")] uint* pDisplayCount,
            [NativeTypeName("VkDisplayKHR *")] DisplayKHRHandle** pDisplays
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneSupportedDisplaysKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDisplayPlaneSupportedDisplaysKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t")] uint planeIndex,
            [NativeTypeName("uint32_t *")] Ref<uint> pDisplayCount,
            [NativeTypeName("VkDisplayKHR *")] Ref2D<DisplayKHRHandle> pDisplays
        )
        {
            fixed (DisplayKHRHandle** __dsl_pDisplays = pDisplays)
            fixed (uint* __dsl_pDisplayCount = pDisplayCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetDisplayPlaneSupportedDisplaysKHR(
                    __dsl_physicalDevice,
                    planeIndex,
                    __dsl_pDisplayCount,
                    __dsl_pDisplays
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetDrmDisplayEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_acquire_drm_display"],
            ImpliesSets = ["VK_EXT_direct_mode_display"]
        )]
        public static extern Result GetDrmDisplayEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("int32_t")] int drmFd,
            [NativeTypeName("uint32_t")] uint connectorId,
            [NativeTypeName("VkDisplayKHR *")] DisplayKHRHandle** display
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_acquire_drm_display"],
            ImpliesSets = ["VK_EXT_direct_mode_display"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDrmDisplayEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDrmDisplayEXT(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("int32_t")] int drmFd,
            [NativeTypeName("uint32_t")] uint connectorId,
            [NativeTypeName("VkDisplayKHR *")] Ref2D<DisplayKHRHandle> display
        )
        {
            fixed (DisplayKHRHandle** __dsl_display = display)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetDrmDisplayEXT(
                    __dsl_physicalDevice,
                    drmFd,
                    connectorId,
                    __dsl_display
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetDynamicRenderingTilePropertiesQCOM"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_properties"],
            ImpliesSets = [
                "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_properties+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetDynamicRenderingTilePropertiesQCOM(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo,
            TilePropertiesQCOM* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_properties"],
            ImpliesSets = [
                "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_properties+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetDynamicRenderingTilePropertiesQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetDynamicRenderingTilePropertiesQCOM(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo,
            Ref<TilePropertiesQCOM> pProperties
        )
        {
            fixed (TilePropertiesQCOM* __dsl_pProperties = pProperties)
            fixed (RenderingInfo* __dsl_pRenderingInfo = pRenderingInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetDynamicRenderingTilePropertiesQCOM(
                    __dsl_device,
                    __dsl_pRenderingInfo,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetEncodedVideoSessionParametersKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_encode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        public static extern Result GetEncodedVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkVideoEncodeSessionParametersGetInfoKHR *")]
                VideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo,
            VideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo,
            [NativeTypeName("size_t *")] nuint* pDataSize,
            void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_encode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetEncodedVideoSessionParametersKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetEncodedVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkVideoEncodeSessionParametersGetInfoKHR *")]
                Ref<VideoEncodeSessionParametersGetInfoKHR> pVideoSessionParametersInfo,
            Ref<VideoEncodeSessionParametersFeedbackInfoKHR> pFeedbackInfo,
            [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (nuint* __dsl_pDataSize = pDataSize)
            fixed (VideoEncodeSessionParametersFeedbackInfoKHR* __dsl_pFeedbackInfo = pFeedbackInfo)
            fixed (
                VideoEncodeSessionParametersGetInfoKHR* __dsl_pVideoSessionParametersInfo =
                    pVideoSessionParametersInfo
            )
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetEncodedVideoSessionParametersKHR(
                    __dsl_device,
                    __dsl_pVideoSessionParametersInfo,
                    __dsl_pFeedbackInfo,
                    __dsl_pDataSize,
                    __dsl_pData
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetEventStatus")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result GetEventStatus(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkEvent")] EventHandle* @event
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetEventStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetEventStatus(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkEvent")] Ref<EventHandle> @event
        )
        {
            fixed (EventHandle* __dsl_event = @event)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetEventStatus(__dsl_device, __dsl_event);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetExternalComputeQueueDataNV")]
        [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
        public static extern void GetExternalComputeQueueDataNV(
            [NativeTypeName("VkExternalComputeQueueNV")]
                ExternalComputeQueueNVHandle* externalQueue,
            ExternalComputeQueueDataParamsNV* @params,
            void* pData
        );

        [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetExternalComputeQueueDataNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetExternalComputeQueueDataNV(
            [NativeTypeName("VkExternalComputeQueueNV")]
                Ref<ExternalComputeQueueNVHandle> externalQueue,
            Ref<ExternalComputeQueueDataParamsNV> @params,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (ExternalComputeQueueDataParamsNV* __dsl_params = @params)
            fixed (ExternalComputeQueueNVHandle* __dsl_externalQueue = externalQueue)
            {
                GetExternalComputeQueueDataNV(__dsl_externalQueue, __dsl_params, __dsl_pData);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetFenceFdKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_fence_fd"],
            ImpliesSets = [
                "VK_KHR_external_fence_fd+VK_KHR_external_fence",
                "VK_KHR_external_fence_fd+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetFenceFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkFenceGetFdInfoKHR *")] FenceGetFdInfoKHR* pGetFdInfo,
            int* pFd
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_fence_fd"],
            ImpliesSets = [
                "VK_KHR_external_fence_fd+VK_KHR_external_fence",
                "VK_KHR_external_fence_fd+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetFenceFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetFenceFdKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkFenceGetFdInfoKHR *")] Ref<FenceGetFdInfoKHR> pGetFdInfo,
            Ref<int> pFd
        )
        {
            fixed (int* __dsl_pFd = pFd)
            fixed (FenceGetFdInfoKHR* __dsl_pGetFdInfo = pGetFdInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetFenceFdKHR(__dsl_device, __dsl_pGetFdInfo, __dsl_pFd);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetFenceStatus")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result GetFenceStatus(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkFence")] FenceHandle* fence
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetFenceStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetFenceStatus(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkFence")] Ref<FenceHandle> fence
        )
        {
            fixed (FenceHandle* __dsl_fence = fence)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetFenceStatus(__dsl_device, __dsl_fence);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetFramebufferTilePropertiesQCOM"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_properties"],
            ImpliesSets = [
                "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_properties+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetFramebufferTilePropertiesQCOM(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkFramebuffer")] FramebufferHandle* framebuffer,
            [NativeTypeName("uint32_t *")] uint* pPropertiesCount,
            TilePropertiesQCOM* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_QCOM_tile_properties"],
            ImpliesSets = [
                "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
                "VK_QCOM_tile_properties+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetFramebufferTilePropertiesQCOM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetFramebufferTilePropertiesQCOM(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkFramebuffer")] Ref<FramebufferHandle> framebuffer,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertiesCount,
            Ref<TilePropertiesQCOM> pProperties
        )
        {
            fixed (TilePropertiesQCOM* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertiesCount = pPropertiesCount)
            fixed (FramebufferHandle* __dsl_framebuffer = framebuffer)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetFramebufferTilePropertiesQCOM(
                    __dsl_device,
                    __dsl_framebuffer,
                    __dsl_pPropertiesCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void GetGeneratedCommandsMemoryRequirementsEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoEXT *")]
                GeneratedCommandsMemoryRequirementsInfoEXT* pInfo,
            MemoryRequirements2* pMemoryRequirements
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetGeneratedCommandsMemoryRequirementsEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoEXT *")]
                Ref<GeneratedCommandsMemoryRequirementsInfoEXT> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (GeneratedCommandsMemoryRequirementsInfoEXT* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetGeneratedCommandsMemoryRequirementsEXT(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        public static extern void GetGeneratedCommandsMemoryRequirementsNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoNV *")]
                GeneratedCommandsMemoryRequirementsInfoNV* pInfo,
            MemoryRequirements2* pMemoryRequirements
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetGeneratedCommandsMemoryRequirementsNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoNV *")]
                Ref<GeneratedCommandsMemoryRequirementsInfoNV> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (GeneratedCommandsMemoryRequirementsInfoNV* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetGeneratedCommandsMemoryRequirementsNV(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetImageDrmFormatModifierPropertiesEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_image_drm_format_modifier"],
            ImpliesSets = [
                "VK_KHR_image_format_list+VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion",
                "VK_KHR_image_format_list+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        public static extern Result GetImageDrmFormatModifierPropertiesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkImage")] ImageHandle* image,
            ImageDrmFormatModifierPropertiesEXT* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_image_drm_format_modifier"],
            ImpliesSets = [
                "VK_KHR_image_format_list+VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion",
                "VK_KHR_image_format_list+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageDrmFormatModifierPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetImageDrmFormatModifierPropertiesEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkImage")] Ref<ImageHandle> image,
            Ref<ImageDrmFormatModifierPropertiesEXT> pProperties
        )
        {
            fixed (ImageDrmFormatModifierPropertiesEXT* __dsl_pProperties = pProperties)
            fixed (ImageHandle* __dsl_image = image)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetImageDrmFormatModifierPropertiesEXT(
                    __dsl_device,
                    __dsl_image,
                    __dsl_pProperties
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetImageMemoryRequirements")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void GetImageMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkImage")] ImageHandle* image,
            MemoryRequirements* pMemoryRequirements
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageMemoryRequirements(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkImage")] Ref<ImageHandle> image,
            Ref<MemoryRequirements> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (ImageHandle* __dsl_image = image)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetImageMemoryRequirements(__dsl_device, __dsl_image, __dsl_pMemoryRequirements);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetImageMemoryRequirements2")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetImageMemoryRequirements2(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
                ImageMemoryRequirementsInfo2* pInfo,
            MemoryRequirements2* pMemoryRequirements
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageMemoryRequirements2(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
                Ref<ImageMemoryRequirementsInfo2> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (ImageMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetImageMemoryRequirements2(__dsl_device, __dsl_pInfo, __dsl_pMemoryRequirements);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetImageMemoryRequirements2KHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
        public static extern void GetImageMemoryRequirements2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
                ImageMemoryRequirementsInfo2* pInfo,
            MemoryRequirements2* pMemoryRequirements
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageMemoryRequirements2KHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
                Ref<ImageMemoryRequirementsInfo2> pInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (ImageMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetImageMemoryRequirements2KHR(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetImageOpaqueCaptureDescriptorDataEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result GetImageOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkImageCaptureDescriptorDataInfoEXT *")]
                ImageCaptureDescriptorDataInfoEXT* pInfo,
            void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageOpaqueCaptureDescriptorDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetImageOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkImageCaptureDescriptorDataInfoEXT *")]
                Ref<ImageCaptureDescriptorDataInfoEXT> pInfo,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (ImageCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetImageOpaqueCaptureDescriptorDataEXT(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pData
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetImageSparseMemoryRequirements"
        )]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void GetImageSparseMemoryRequirements(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkImage")] ImageHandle* image,
            [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
            SparseImageMemoryRequirements* pSparseMemoryRequirements
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSparseMemoryRequirements(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkImage")] Ref<ImageHandle> image,
            [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
            Ref<SparseImageMemoryRequirements> pSparseMemoryRequirements
        )
        {
            fixed (
                SparseImageMemoryRequirements* __dsl_pSparseMemoryRequirements =
                    pSparseMemoryRequirements
            )
            fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
            fixed (ImageHandle* __dsl_image = image)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetImageSparseMemoryRequirements(
                    __dsl_device,
                    __dsl_image,
                    __dsl_pSparseMemoryRequirementCount,
                    __dsl_pSparseMemoryRequirements
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetImageSparseMemoryRequirements2"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetImageSparseMemoryRequirements2(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
                ImageSparseMemoryRequirementsInfo2* pInfo,
            [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
            SparseImageMemoryRequirements2* pSparseMemoryRequirements
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSparseMemoryRequirements2(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
                Ref<ImageSparseMemoryRequirementsInfo2> pInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
            Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
        )
        {
            fixed (
                SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                    pSparseMemoryRequirements
            )
            fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
            fixed (ImageSparseMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetImageSparseMemoryRequirements2(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pSparseMemoryRequirementCount,
                    __dsl_pSparseMemoryRequirements
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetImageSparseMemoryRequirements2KHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
        public static extern void GetImageSparseMemoryRequirements2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
                ImageSparseMemoryRequirementsInfo2* pInfo,
            [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
            SparseImageMemoryRequirements2* pSparseMemoryRequirements
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSparseMemoryRequirements2KHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
                Ref<ImageSparseMemoryRequirementsInfo2> pInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
            Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
        )
        {
            fixed (
                SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                    pSparseMemoryRequirements
            )
            fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
            fixed (ImageSparseMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetImageSparseMemoryRequirements2KHR(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pSparseMemoryRequirementCount,
                    __dsl_pSparseMemoryRequirements
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetImageSubresourceLayout")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void GetImageSubresourceLayout(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkImage")] ImageHandle* image,
            [NativeTypeName("const VkImageSubresource *")] ImageSubresource* pSubresource,
            SubresourceLayout* pLayout
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSubresourceLayout(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkImage")] Ref<ImageHandle> image,
            [NativeTypeName("const VkImageSubresource *")] Ref<ImageSubresource> pSubresource,
            Ref<SubresourceLayout> pLayout
        )
        {
            fixed (SubresourceLayout* __dsl_pLayout = pLayout)
            fixed (ImageSubresource* __dsl_pSubresource = pSubresource)
            fixed (ImageHandle* __dsl_image = image)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetImageSubresourceLayout(
                    __dsl_device,
                    __dsl_image,
                    __dsl_pSubresource,
                    __dsl_pLayout
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetImageSubresourceLayout2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern void GetImageSubresourceLayout2(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkImage")] ImageHandle* image,
            [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
            SubresourceLayout2* pLayout
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSubresourceLayout2(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkImage")] Ref<ImageHandle> image,
            [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
            Ref<SubresourceLayout2> pLayout
        )
        {
            fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
            fixed (ImageSubresource2* __dsl_pSubresource = pSubresource)
            fixed (ImageHandle* __dsl_image = image)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetImageSubresourceLayout2(
                    __dsl_device,
                    __dsl_image,
                    __dsl_pSubresource,
                    __dsl_pLayout
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetImageSubresourceLayout2EXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void GetImageSubresourceLayout2EXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkImage")] ImageHandle* image,
            [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
            SubresourceLayout2* pLayout
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSubresourceLayout2EXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkImage")] Ref<ImageHandle> image,
            [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
            Ref<SubresourceLayout2> pLayout
        )
        {
            fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
            fixed (ImageSubresource2* __dsl_pSubresource = pSubresource)
            fixed (ImageHandle* __dsl_image = image)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetImageSubresourceLayout2EXT(
                    __dsl_device,
                    __dsl_image,
                    __dsl_pSubresource,
                    __dsl_pLayout
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetImageSubresourceLayout2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        public static extern void GetImageSubresourceLayout2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkImage")] ImageHandle* image,
            [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
            SubresourceLayout2* pLayout
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetImageSubresourceLayout2KHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkImage")] Ref<ImageHandle> image,
            [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
            Ref<SubresourceLayout2> pLayout
        )
        {
            fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
            fixed (ImageSubresource2* __dsl_pSubresource = pSubresource)
            fixed (ImageHandle* __dsl_image = image)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetImageSubresourceLayout2KHR(
                    __dsl_device,
                    __dsl_image,
                    __dsl_pSubresource,
                    __dsl_pLayout
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetImageViewAddressNVX")]
        [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
        public static extern Result GetImageViewAddressNVX(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkImageView")] ImageViewHandle* imageView,
            ImageViewAddressPropertiesNVX* pProperties
        );

        [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageViewAddressNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetImageViewAddressNVX(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkImageView")] Ref<ImageViewHandle> imageView,
            Ref<ImageViewAddressPropertiesNVX> pProperties
        )
        {
            fixed (ImageViewAddressPropertiesNVX* __dsl_pProperties = pProperties)
            fixed (ImageViewHandle* __dsl_imageView = imageView)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetImageViewAddressNVX(
                    __dsl_device,
                    __dsl_imageView,
                    __dsl_pProperties
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetImageViewHandle64NVX")]
        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
        public static extern ulong GetImageViewHandle64NVX(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkImageViewHandleInfoNVX *")] ImageViewHandleInfoNVX* pInfo
        );

        [return: NativeTypeName("uint64_t")]
        [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandle64NVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetImageViewHandle64NVX(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkImageViewHandleInfoNVX *")] Ref<ImageViewHandleInfoNVX> pInfo
        )
        {
            fixed (ImageViewHandleInfoNVX* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (ulong)GetImageViewHandle64NVX(__dsl_device, __dsl_pInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetImageViewHandleNVX")]
        [return: NativeTypeName("uint32_t")]
        [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
        public static extern uint GetImageViewHandleNVX(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkImageViewHandleInfoNVX *")] ImageViewHandleInfoNVX* pInfo
        );

        [return: NativeTypeName("uint32_t")]
        [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandleNVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetImageViewHandleNVX(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkImageViewHandleInfoNVX *")] Ref<ImageViewHandleInfoNVX> pInfo
        )
        {
            fixed (ImageViewHandleInfoNVX* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (uint)GetImageViewHandleNVX(__dsl_device, __dsl_pInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetImageViewOpaqueCaptureDescriptorDataEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result GetImageViewOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkImageViewCaptureDescriptorDataInfoEXT *")]
                ImageViewCaptureDescriptorDataInfoEXT* pInfo,
            void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetImageViewOpaqueCaptureDescriptorDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetImageViewOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkImageViewCaptureDescriptorDataInfoEXT *")]
                Ref<ImageViewCaptureDescriptorDataInfoEXT> pInfo,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (ImageViewCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetImageViewOpaqueCaptureDescriptorDataEXT(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pData
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetInstanceProcAddr")]
        [return: NativeTypeName("PFN_vkVoidFunction")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern PFNVkVoidFunction GetInstanceProcAddr(
            [NativeTypeName("VkInstance")] InstanceHandle* instance,
            [NativeTypeName("const char *")] sbyte* pName
        );

        [return: NativeTypeName("PFN_vkVoidFunction")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetInstanceProcAddr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PFNVkVoidFunction GetInstanceProcAddr(
            [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
            [NativeTypeName("const char *")] Ref<sbyte> pName
        )
        {
            fixed (sbyte* __dsl_pName = pName)
            fixed (InstanceHandle* __dsl_instance = instance)
            {
                return (PFNVkVoidFunction)GetInstanceProcAddr(__dsl_instance, __dsl_pName);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetLatencyTimingsNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        public static extern void GetLatencyTimingsNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
            GetLatencyMarkerInfoNV* pLatencyMarkerInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetLatencyTimingsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetLatencyTimingsNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
            Ref<GetLatencyMarkerInfoNV> pLatencyMarkerInfo
        )
        {
            fixed (GetLatencyMarkerInfoNV* __dsl_pLatencyMarkerInfo = pLatencyMarkerInfo)
            fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetLatencyTimingsNV(__dsl_device, __dsl_swapchain, __dsl_pLatencyMarkerInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetMemoryFdKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_memory_fd"],
            ImpliesSets = [
                "VK_KHR_external_memory_fd+VK_KHR_external_memory",
                "VK_KHR_external_memory_fd+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetMemoryFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkMemoryGetFdInfoKHR *")] MemoryGetFdInfoKHR* pGetFdInfo,
            int* pFd
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_memory_fd"],
            ImpliesSets = [
                "VK_KHR_external_memory_fd+VK_KHR_external_memory",
                "VK_KHR_external_memory_fd+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetMemoryFdKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkMemoryGetFdInfoKHR *")] Ref<MemoryGetFdInfoKHR> pGetFdInfo,
            Ref<int> pFd
        )
        {
            fixed (int* __dsl_pFd = pFd)
            fixed (MemoryGetFdInfoKHR* __dsl_pGetFdInfo = pGetFdInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetMemoryFdKHR(__dsl_device, __dsl_pGetFdInfo, __dsl_pFd);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetMemoryFdPropertiesKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_memory_fd"],
            ImpliesSets = [
                "VK_KHR_external_memory_fd+VK_KHR_external_memory",
                "VK_KHR_external_memory_fd+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetMemoryFdPropertiesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkExternalMemoryHandleTypeFlagBits")]
                ExternalMemoryHandleTypeFlags handleType,
            int fd,
            MemoryFdPropertiesKHR* pMemoryFdProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_memory_fd"],
            ImpliesSets = [
                "VK_KHR_external_memory_fd+VK_KHR_external_memory",
                "VK_KHR_external_memory_fd+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetMemoryFdPropertiesKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkExternalMemoryHandleTypeFlagBits")]
                ExternalMemoryHandleTypeFlags handleType,
            int fd,
            Ref<MemoryFdPropertiesKHR> pMemoryFdProperties
        )
        {
            fixed (MemoryFdPropertiesKHR* __dsl_pMemoryFdProperties = pMemoryFdProperties)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetMemoryFdPropertiesKHR(
                    __dsl_device,
                    handleType,
                    fd,
                    __dsl_pMemoryFdProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetMemoryHostPointerPropertiesEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_external_memory_host"],
            ImpliesSets = [
                "VK_EXT_external_memory_host+VK_KHR_external_memory",
                "VK_EXT_external_memory_host+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetMemoryHostPointerPropertiesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkExternalMemoryHandleTypeFlagBits")]
                ExternalMemoryHandleTypeFlags handleType,
            [NativeTypeName("const void *")] void* pHostPointer,
            MemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_external_memory_host"],
            ImpliesSets = [
                "VK_EXT_external_memory_host+VK_KHR_external_memory",
                "VK_EXT_external_memory_host+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetMemoryHostPointerPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetMemoryHostPointerPropertiesEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkExternalMemoryHandleTypeFlagBits")]
                ExternalMemoryHandleTypeFlags handleType,
            [NativeTypeName("const void *")] Ref pHostPointer,
            Ref<MemoryHostPointerPropertiesEXT> pMemoryHostPointerProperties
        )
        {
            fixed (
                MemoryHostPointerPropertiesEXT* __dsl_pMemoryHostPointerProperties =
                    pMemoryHostPointerProperties
            )
            fixed (void* __dsl_pHostPointer = pHostPointer)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetMemoryHostPointerPropertiesEXT(
                    __dsl_device,
                    handleType,
                    __dsl_pHostPointer,
                    __dsl_pMemoryHostPointerProperties
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetMemoryRemoteAddressNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_external_memory_rdma"],
            ImpliesSets = [
                "VK_NV_external_memory_rdma+VK_KHR_external_memory",
                "VK_NV_external_memory_rdma+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetMemoryRemoteAddressNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkMemoryGetRemoteAddressInfoNV *")]
                MemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo,
            [NativeTypeName("VkRemoteAddressNV *")] void** pAddress
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_external_memory_rdma"],
            ImpliesSets = [
                "VK_NV_external_memory_rdma+VK_KHR_external_memory",
                "VK_NV_external_memory_rdma+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetMemoryRemoteAddressNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetMemoryRemoteAddressNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkMemoryGetRemoteAddressInfoNV *")]
                Ref<MemoryGetRemoteAddressInfoNV> pMemoryGetRemoteAddressInfo,
            [NativeTypeName("VkRemoteAddressNV *")] Ref2D pAddress
        )
        {
            fixed (void** __dsl_pAddress = pAddress)
            fixed (
                MemoryGetRemoteAddressInfoNV* __dsl_pMemoryGetRemoteAddressInfo =
                    pMemoryGetRemoteAddressInfo
            )
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetMemoryRemoteAddressNV(
                    __dsl_device,
                    __dsl_pMemoryGetRemoteAddressInfo,
                    __dsl_pAddress
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetMicromapBuildSizesEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        public static extern void GetMicromapBuildSizesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            AccelerationStructureBuildTypeKHR buildType,
            [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pBuildInfo,
            MicromapBuildSizesInfoEXT* pSizeInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetMicromapBuildSizesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetMicromapBuildSizesEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            AccelerationStructureBuildTypeKHR buildType,
            [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pBuildInfo,
            Ref<MicromapBuildSizesInfoEXT> pSizeInfo
        )
        {
            fixed (MicromapBuildSizesInfoEXT* __dsl_pSizeInfo = pSizeInfo)
            fixed (MicromapBuildInfoEXT* __dsl_pBuildInfo = pBuildInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetMicromapBuildSizesEXT(
                    __dsl_device,
                    buildType,
                    __dsl_pBuildInfo,
                    __dsl_pSizeInfo
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPartitionedAccelerationStructuresBuildSizesNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_partitioned_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        public static extern void GetPartitionedAccelerationStructuresBuildSizesNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkPartitionedAccelerationStructureInstancesInputNV *")]
                PartitionedAccelerationStructureInstancesInputNV* pInfo,
            AccelerationStructureBuildSizesInfoKHR* pSizeInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_partitioned_acceleration_structure"],
            ImpliesSets = ["VK_KHR_acceleration_structure"]
        )]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPartitionedAccelerationStructuresBuildSizesNV"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPartitionedAccelerationStructuresBuildSizesNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkPartitionedAccelerationStructureInstancesInputNV *")]
                Ref<PartitionedAccelerationStructureInstancesInputNV> pInfo,
            Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
        )
        {
            fixed (AccelerationStructureBuildSizesInfoKHR* __dsl_pSizeInfo = pSizeInfo)
            fixed (PartitionedAccelerationStructureInstancesInputNV* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetPartitionedAccelerationStructuresBuildSizesNV(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pSizeInfo
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPastPresentationTimingGOOGLE"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_GOOGLE_display_timing"],
            ImpliesSets = ["VK_KHR_swapchain"]
        )]
        public static extern Result GetPastPresentationTimingGoogle(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
            [NativeTypeName("uint32_t *")] uint* pPresentationTimingCount,
            PastPresentationTimingGoogle* pPresentationTimings
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_GOOGLE_display_timing"],
            ImpliesSets = ["VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPastPresentationTimingGOOGLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPastPresentationTimingGoogle(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
            [NativeTypeName("uint32_t *")] Ref<uint> pPresentationTimingCount,
            Ref<PastPresentationTimingGoogle> pPresentationTimings
        )
        {
            fixed (PastPresentationTimingGoogle* __dsl_pPresentationTimings = pPresentationTimings)
            fixed (uint* __dsl_pPresentationTimingCount = pPresentationTimingCount)
            fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetPastPresentationTimingGoogle(
                    __dsl_device,
                    __dsl_swapchain,
                    __dsl_pPresentationTimingCount,
                    __dsl_pPresentationTimings
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetPerformanceParameterINTEL")]
        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        public static extern Result GetPerformanceParameterIntel(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            PerformanceParameterTypeIntel parameter,
            PerformanceValueIntel* pValue
        );

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPerformanceParameterINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPerformanceParameterIntel(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            PerformanceParameterTypeIntel parameter,
            Ref<PerformanceValueIntel> pValue
        )
        {
            fixed (PerformanceValueIntel* __dsl_pValue = pValue)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetPerformanceParameterIntel(__dsl_device, parameter, __dsl_pValue);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_calibrated_timestamps"],
            ImpliesSets = [
                "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetPhysicalDeviceCalibrateableTimeDomainsEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pTimeDomainCount,
            TimeDomainKHR* pTimeDomains
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_calibrated_timestamps"],
            ImpliesSets = [
                "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCalibrateableTimeDomainsEXT(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pTimeDomainCount,
            Ref<TimeDomainKHR> pTimeDomains
        )
        {
            fixed (TimeDomainKHR* __dsl_pTimeDomains = pTimeDomains)
            fixed (uint* __dsl_pTimeDomainCount = pTimeDomainCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceCalibrateableTimeDomainsEXT(
                    __dsl_physicalDevice,
                    __dsl_pTimeDomainCount,
                    __dsl_pTimeDomains
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_calibrated_timestamps"],
            ImpliesSets = [
                "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetPhysicalDeviceCalibrateableTimeDomainsKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pTimeDomainCount,
            TimeDomainKHR* pTimeDomains
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_calibrated_timestamps"],
            ImpliesSets = [
                "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
                "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCalibrateableTimeDomainsKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pTimeDomainCount,
            Ref<TimeDomainKHR> pTimeDomains
        )
        {
            fixed (TimeDomainKHR* __dsl_pTimeDomains = pTimeDomains)
            fixed (uint* __dsl_pTimeDomainCount = pTimeDomainCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceCalibrateableTimeDomainsKHR(
                    __dsl_physicalDevice,
                    __dsl_pTimeDomainCount,
                    __dsl_pTimeDomains
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cooperative_matrix2"],
            ImpliesSets = ["VK_KHR_cooperative_matrix"]
        )]
        public static extern Result GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            CooperativeMatrixFlexibleDimensionsPropertiesNV* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cooperative_matrix2"],
            ImpliesSets = ["VK_KHR_cooperative_matrix"]
        )]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<CooperativeMatrixFlexibleDimensionsPropertiesNV> pProperties
        )
        {
            fixed (CooperativeMatrixFlexibleDimensionsPropertiesNV* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_cooperative_matrix"],
            ImpliesSets = [
                "VK_KHR_cooperative_matrix+VK_KHR_get_physical_device_properties2",
                "VK_KHR_cooperative_matrix+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            CooperativeMatrixPropertiesKHR* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_cooperative_matrix"],
            ImpliesSets = [
                "VK_KHR_cooperative_matrix+VK_KHR_get_physical_device_properties2",
                "VK_KHR_cooperative_matrix+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<CooperativeMatrixPropertiesKHR> pProperties
        )
        {
            fixed (CooperativeMatrixPropertiesKHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cooperative_matrix"],
            ImpliesSets = [
                "VK_NV_cooperative_matrix+VK_KHR_get_physical_device_properties2",
                "VK_NV_cooperative_matrix+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetPhysicalDeviceCooperativeMatrixPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            CooperativeMatrixPropertiesNV* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_cooperative_matrix"],
            ImpliesSets = [
                "VK_NV_cooperative_matrix+VK_KHR_get_physical_device_properties2",
                "VK_NV_cooperative_matrix+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCooperativeMatrixPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<CooperativeMatrixPropertiesNV> pProperties
        )
        {
            fixed (CooperativeMatrixPropertiesNV* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceCooperativeMatrixPropertiesNV(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceCooperativeVectorPropertiesNV"
        )]
        [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
        public static extern Result GetPhysicalDeviceCooperativeVectorPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            CooperativeVectorPropertiesNV* pProperties
        );

        [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeVectorPropertiesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceCooperativeVectorPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<CooperativeVectorPropertiesNV> pProperties
        )
        {
            fixed (CooperativeVectorPropertiesNV* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceCooperativeVectorPropertiesNV(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceDisplayPlaneProperties2KHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        public static extern Result GetPhysicalDeviceDisplayPlaneProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            DisplayPlaneProperties2KHR* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlaneProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceDisplayPlaneProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<DisplayPlaneProperties2KHR> pProperties
        )
        {
            fixed (DisplayPlaneProperties2KHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceDisplayPlaneProperties2KHR(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceDisplayPlanePropertiesKHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        public static extern Result GetPhysicalDeviceDisplayPlanePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            DisplayPlanePropertiesKHR* pProperties
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlanePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceDisplayPlanePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<DisplayPlanePropertiesKHR> pProperties
        )
        {
            fixed (DisplayPlanePropertiesKHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceDisplayPlanePropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceDisplayProperties2KHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        public static extern Result GetPhysicalDeviceDisplayProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            DisplayProperties2KHR* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_display_properties2"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceDisplayProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<DisplayProperties2KHR> pProperties
        )
        {
            fixed (DisplayProperties2KHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceDisplayProperties2KHR(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceDisplayPropertiesKHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        public static extern Result GetPhysicalDeviceDisplayPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            DisplayPropertiesKHR* pProperties
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceDisplayPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<DisplayPropertiesKHR> pProperties
        )
        {
            fixed (DisplayPropertiesKHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceDisplayPropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceExternalBufferProperties"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetPhysicalDeviceExternalBufferProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
                PhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
            ExternalBufferProperties* pExternalBufferProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalBufferProperties(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
                Ref<PhysicalDeviceExternalBufferInfo> pExternalBufferInfo,
            Ref<ExternalBufferProperties> pExternalBufferProperties
        )
        {
            fixed (
                ExternalBufferProperties* __dsl_pExternalBufferProperties =
                    pExternalBufferProperties
            )
            fixed (
                PhysicalDeviceExternalBufferInfo* __dsl_pExternalBufferInfo = pExternalBufferInfo
            )
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceExternalBufferProperties(
                    __dsl_physicalDevice,
                    __dsl_pExternalBufferInfo,
                    __dsl_pExternalBufferProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceExternalBufferPropertiesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_memory_capabilities"],
            ImpliesSets = [
                "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
                "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
            ]
        )]
        public static extern void GetPhysicalDeviceExternalBufferPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
                PhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
            ExternalBufferProperties* pExternalBufferProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_memory_capabilities"],
            ImpliesSets = [
                "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
                "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalBufferPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
                Ref<PhysicalDeviceExternalBufferInfo> pExternalBufferInfo,
            Ref<ExternalBufferProperties> pExternalBufferProperties
        )
        {
            fixed (
                ExternalBufferProperties* __dsl_pExternalBufferProperties =
                    pExternalBufferProperties
            )
            fixed (
                PhysicalDeviceExternalBufferInfo* __dsl_pExternalBufferInfo = pExternalBufferInfo
            )
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceExternalBufferPropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pExternalBufferInfo,
                    __dsl_pExternalBufferProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceExternalFenceProperties"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetPhysicalDeviceExternalFenceProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
                PhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
            ExternalFenceProperties* pExternalFenceProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFenceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalFenceProperties(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
                Ref<PhysicalDeviceExternalFenceInfo> pExternalFenceInfo,
            Ref<ExternalFenceProperties> pExternalFenceProperties
        )
        {
            fixed (
                ExternalFenceProperties* __dsl_pExternalFenceProperties = pExternalFenceProperties
            )
            fixed (PhysicalDeviceExternalFenceInfo* __dsl_pExternalFenceInfo = pExternalFenceInfo)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceExternalFenceProperties(
                    __dsl_physicalDevice,
                    __dsl_pExternalFenceInfo,
                    __dsl_pExternalFenceProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceExternalFencePropertiesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_fence_capabilities"],
            ImpliesSets = [
                "VK_KHR_external_fence_capabilities+VK_KHR_get_physical_device_properties2",
                "VK_KHR_external_fence_capabilities+VK_VERSION_1_1",
            ]
        )]
        public static extern void GetPhysicalDeviceExternalFencePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
                PhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
            ExternalFenceProperties* pExternalFenceProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_fence_capabilities"],
            ImpliesSets = [
                "VK_KHR_external_fence_capabilities+VK_KHR_get_physical_device_properties2",
                "VK_KHR_external_fence_capabilities+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFencePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalFencePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
                Ref<PhysicalDeviceExternalFenceInfo> pExternalFenceInfo,
            Ref<ExternalFenceProperties> pExternalFenceProperties
        )
        {
            fixed (
                ExternalFenceProperties* __dsl_pExternalFenceProperties = pExternalFenceProperties
            )
            fixed (PhysicalDeviceExternalFenceInfo* __dsl_pExternalFenceInfo = pExternalFenceInfo)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceExternalFencePropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pExternalFenceInfo,
                    __dsl_pExternalFenceProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceExternalImageFormatPropertiesNV"
        )]
        [SupportedApiProfile("vulkan", ["VK_NV_external_memory_capabilities"])]
        public static extern Result GetPhysicalDeviceExternalImageFormatPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            Format format,
            ImageType type,
            ImageTiling tiling,
            [NativeTypeName("VkImageUsageFlags")] uint usage,
            [NativeTypeName("VkImageCreateFlags")] uint flags,
            [NativeTypeName("VkExternalMemoryHandleTypeFlagsNV")] uint externalHandleType,
            ExternalImageFormatPropertiesNV* pExternalImageFormatProperties
        );

        [SupportedApiProfile("vulkan", ["VK_NV_external_memory_capabilities"])]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceExternalImageFormatPropertiesNV"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceExternalImageFormatPropertiesNV(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Format format,
            ImageType type,
            ImageTiling tiling,
            [NativeTypeName("VkImageUsageFlags")] uint usage,
            [NativeTypeName("VkImageCreateFlags")] uint flags,
            [NativeTypeName("VkExternalMemoryHandleTypeFlagsNV")] uint externalHandleType,
            Ref<ExternalImageFormatPropertiesNV> pExternalImageFormatProperties
        )
        {
            fixed (
                ExternalImageFormatPropertiesNV* __dsl_pExternalImageFormatProperties =
                    pExternalImageFormatProperties
            )
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceExternalImageFormatPropertiesNV(
                    __dsl_physicalDevice,
                    format,
                    type,
                    tiling,
                    usage,
                    flags,
                    externalHandleType,
                    __dsl_pExternalImageFormatProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceExternalSemaphoreProperties"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetPhysicalDeviceExternalSemaphoreProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
                PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
            ExternalSemaphoreProperties* pExternalSemaphoreProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphoreProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalSemaphoreProperties(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
                Ref<PhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo,
            Ref<ExternalSemaphoreProperties> pExternalSemaphoreProperties
        )
        {
            fixed (
                ExternalSemaphoreProperties* __dsl_pExternalSemaphoreProperties =
                    pExternalSemaphoreProperties
            )
            fixed (
                PhysicalDeviceExternalSemaphoreInfo* __dsl_pExternalSemaphoreInfo =
                    pExternalSemaphoreInfo
            )
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceExternalSemaphoreProperties(
                    __dsl_physicalDevice,
                    __dsl_pExternalSemaphoreInfo,
                    __dsl_pExternalSemaphoreProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_semaphore_capabilities"],
            ImpliesSets = [
                "VK_KHR_external_semaphore_capabilities+VK_KHR_get_physical_device_properties2",
                "VK_KHR_external_semaphore_capabilities+VK_VERSION_1_1",
            ]
        )]
        public static extern void GetPhysicalDeviceExternalSemaphorePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
                PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
            ExternalSemaphoreProperties* pExternalSemaphoreProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_semaphore_capabilities"],
            ImpliesSets = [
                "VK_KHR_external_semaphore_capabilities+VK_KHR_get_physical_device_properties2",
                "VK_KHR_external_semaphore_capabilities+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceExternalSemaphorePropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
                Ref<PhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo,
            Ref<ExternalSemaphoreProperties> pExternalSemaphoreProperties
        )
        {
            fixed (
                ExternalSemaphoreProperties* __dsl_pExternalSemaphoreProperties =
                    pExternalSemaphoreProperties
            )
            fixed (
                PhysicalDeviceExternalSemaphoreInfo* __dsl_pExternalSemaphoreInfo =
                    pExternalSemaphoreInfo
            )
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceExternalSemaphorePropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pExternalSemaphoreInfo,
                    __dsl_pExternalSemaphoreProperties
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetPhysicalDeviceFeatures")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void GetPhysicalDeviceFeatures(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            PhysicalDeviceFeatures* pFeatures
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFeatures(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Ref<PhysicalDeviceFeatures> pFeatures
        )
        {
            fixed (PhysicalDeviceFeatures* __dsl_pFeatures = pFeatures)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceFeatures(__dsl_physicalDevice, __dsl_pFeatures);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetPhysicalDeviceFeatures2")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetPhysicalDeviceFeatures2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            PhysicalDeviceFeatures2* pFeatures
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFeatures2(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Ref<PhysicalDeviceFeatures2> pFeatures
        )
        {
            fixed (PhysicalDeviceFeatures2* __dsl_pFeatures = pFeatures)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceFeatures2(__dsl_physicalDevice, __dsl_pFeatures);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetPhysicalDeviceFeatures2KHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        public static extern void GetPhysicalDeviceFeatures2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            PhysicalDeviceFeatures2* pFeatures
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFeatures2KHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Ref<PhysicalDeviceFeatures2> pFeatures
        )
        {
            fixed (PhysicalDeviceFeatures2* __dsl_pFeatures = pFeatures)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceFeatures2KHR(__dsl_physicalDevice, __dsl_pFeatures);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceFormatProperties"
        )]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void GetPhysicalDeviceFormatProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            Format format,
            FormatProperties* pFormatProperties
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFormatProperties(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Format format,
            Ref<FormatProperties> pFormatProperties
        )
        {
            fixed (FormatProperties* __dsl_pFormatProperties = pFormatProperties)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceFormatProperties(
                    __dsl_physicalDevice,
                    format,
                    __dsl_pFormatProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceFormatProperties2"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetPhysicalDeviceFormatProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            Format format,
            FormatProperties2* pFormatProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFormatProperties2(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Format format,
            Ref<FormatProperties2> pFormatProperties
        )
        {
            fixed (FormatProperties2* __dsl_pFormatProperties = pFormatProperties)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceFormatProperties2(
                    __dsl_physicalDevice,
                    format,
                    __dsl_pFormatProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceFormatProperties2KHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        public static extern void GetPhysicalDeviceFormatProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            Format format,
            FormatProperties2* pFormatProperties
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceFormatProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Format format,
            Ref<FormatProperties2> pFormatProperties
        )
        {
            fixed (FormatProperties2* __dsl_pFormatProperties = pFormatProperties)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceFormatProperties2KHR(
                    __dsl_physicalDevice,
                    format,
                    __dsl_pFormatProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceFragmentShadingRatesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_fragment_shading_rate"],
            ImpliesSets = [
                "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_create_renderpass2+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        public static extern Result GetPhysicalDeviceFragmentShadingRatesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pFragmentShadingRateCount,
            PhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_fragment_shading_rate"],
            ImpliesSets = [
                "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_create_renderpass2+VK_VERSION_1_1",
                "VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFragmentShadingRatesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceFragmentShadingRatesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pFragmentShadingRateCount,
            Ref<PhysicalDeviceFragmentShadingRateKHR> pFragmentShadingRates
        )
        {
            fixed (
                PhysicalDeviceFragmentShadingRateKHR* __dsl_pFragmentShadingRates =
                    pFragmentShadingRates
            )
            fixed (uint* __dsl_pFragmentShadingRateCount = pFragmentShadingRateCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceFragmentShadingRatesKHR(
                    __dsl_physicalDevice,
                    __dsl_pFragmentShadingRateCount,
                    __dsl_pFragmentShadingRates
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceImageFormatProperties"
        )]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result GetPhysicalDeviceImageFormatProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            Format format,
            ImageType type,
            ImageTiling tiling,
            [NativeTypeName("VkImageUsageFlags")] uint usage,
            [NativeTypeName("VkImageCreateFlags")] uint flags,
            ImageFormatProperties* pImageFormatProperties
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceImageFormatProperties(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Format format,
            ImageType type,
            ImageTiling tiling,
            [NativeTypeName("VkImageUsageFlags")] uint usage,
            [NativeTypeName("VkImageCreateFlags")] uint flags,
            Ref<ImageFormatProperties> pImageFormatProperties
        )
        {
            fixed (ImageFormatProperties* __dsl_pImageFormatProperties = pImageFormatProperties)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceImageFormatProperties(
                    __dsl_physicalDevice,
                    format,
                    type,
                    tiling,
                    usage,
                    flags,
                    __dsl_pImageFormatProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern Result GetPhysicalDeviceImageFormatProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
                PhysicalDeviceImageFormatInfo2* pImageFormatInfo,
            ImageFormatProperties2* pImageFormatProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceImageFormatProperties2(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
                Ref<PhysicalDeviceImageFormatInfo2> pImageFormatInfo,
            Ref<ImageFormatProperties2> pImageFormatProperties
        )
        {
            fixed (ImageFormatProperties2* __dsl_pImageFormatProperties = pImageFormatProperties)
            fixed (PhysicalDeviceImageFormatInfo2* __dsl_pImageFormatInfo = pImageFormatInfo)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceImageFormatProperties2(
                    __dsl_physicalDevice,
                    __dsl_pImageFormatInfo,
                    __dsl_pImageFormatProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2KHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        public static extern Result GetPhysicalDeviceImageFormatProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
                PhysicalDeviceImageFormatInfo2* pImageFormatInfo,
            ImageFormatProperties2* pImageFormatProperties
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceImageFormatProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
                Ref<PhysicalDeviceImageFormatInfo2> pImageFormatInfo,
            Ref<ImageFormatProperties2> pImageFormatProperties
        )
        {
            fixed (ImageFormatProperties2* __dsl_pImageFormatProperties = pImageFormatProperties)
            fixed (PhysicalDeviceImageFormatInfo2* __dsl_pImageFormatInfo = pImageFormatInfo)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceImageFormatProperties2KHR(
                    __dsl_physicalDevice,
                    __dsl_pImageFormatInfo,
                    __dsl_pImageFormatProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceMemoryProperties"
        )]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void GetPhysicalDeviceMemoryProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            PhysicalDeviceMemoryProperties* pMemoryProperties
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceMemoryProperties(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Ref<PhysicalDeviceMemoryProperties> pMemoryProperties
        )
        {
            fixed (PhysicalDeviceMemoryProperties* __dsl_pMemoryProperties = pMemoryProperties)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceMemoryProperties(__dsl_physicalDevice, __dsl_pMemoryProperties);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceMemoryProperties2"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetPhysicalDeviceMemoryProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            PhysicalDeviceMemoryProperties2* pMemoryProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceMemoryProperties2(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Ref<PhysicalDeviceMemoryProperties2> pMemoryProperties
        )
        {
            fixed (PhysicalDeviceMemoryProperties2* __dsl_pMemoryProperties = pMemoryProperties)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceMemoryProperties2(__dsl_physicalDevice, __dsl_pMemoryProperties);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceMemoryProperties2KHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        public static extern void GetPhysicalDeviceMemoryProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            PhysicalDeviceMemoryProperties2* pMemoryProperties
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceMemoryProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Ref<PhysicalDeviceMemoryProperties2> pMemoryProperties
        )
        {
            fixed (PhysicalDeviceMemoryProperties2* __dsl_pMemoryProperties = pMemoryProperties)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceMemoryProperties2KHR(
                    __dsl_physicalDevice,
                    __dsl_pMemoryProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceMultisamplePropertiesEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_sample_locations"],
            ImpliesSets = [
                "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
                "VK_EXT_sample_locations+VK_VERSION_1_1",
            ]
        )]
        public static extern void GetPhysicalDeviceMultisamplePropertiesEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
            MultisamplePropertiesEXT* pMultisampleProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_sample_locations"],
            ImpliesSets = [
                "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
                "VK_EXT_sample_locations+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMultisamplePropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceMultisamplePropertiesEXT(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
            Ref<MultisamplePropertiesEXT> pMultisampleProperties
        )
        {
            fixed (MultisamplePropertiesEXT* __dsl_pMultisampleProperties = pMultisampleProperties)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceMultisamplePropertiesEXT(
                    __dsl_physicalDevice,
                    samples,
                    __dsl_pMultisampleProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceOpticalFlowImageFormatsNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result GetPhysicalDeviceOpticalFlowImageFormatsNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkOpticalFlowImageFormatInfoNV *")]
                OpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo,
            [NativeTypeName("uint32_t *")] uint* pFormatCount,
            OpticalFlowImageFormatPropertiesNV* pImageFormatProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_optical_flow"],
            ImpliesSets = [
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceOpticalFlowImageFormatsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceOpticalFlowImageFormatsNV(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkOpticalFlowImageFormatInfoNV *")]
                Ref<OpticalFlowImageFormatInfoNV> pOpticalFlowImageFormatInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pFormatCount,
            Ref<OpticalFlowImageFormatPropertiesNV> pImageFormatProperties
        )
        {
            fixed (
                OpticalFlowImageFormatPropertiesNV* __dsl_pImageFormatProperties =
                    pImageFormatProperties
            )
            fixed (uint* __dsl_pFormatCount = pFormatCount)
            fixed (
                OpticalFlowImageFormatInfoNV* __dsl_pOpticalFlowImageFormatInfo =
                    pOpticalFlowImageFormatInfo
            )
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceOpticalFlowImageFormatsNV(
                    __dsl_physicalDevice,
                    __dsl_pOpticalFlowImageFormatInfo,
                    __dsl_pFormatCount,
                    __dsl_pImageFormatProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDevicePresentRectanglesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        public static extern Result GetPhysicalDevicePresentRectanglesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
            [NativeTypeName("uint32_t *")] uint* pRectCount,
            Rect2D* pRects
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_swapchain", "VK_VERSION_1_1"],
            ImpliesSets = ["VK_KHR_surface"],
            RequireAll = true
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDevicePresentRectanglesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDevicePresentRectanglesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
            [NativeTypeName("uint32_t *")] Ref<uint> pRectCount,
            Ref<Rect2D> pRects
        )
        {
            fixed (Rect2D* __dsl_pRects = pRects)
            fixed (uint* __dsl_pRectCount = pRectCount)
            fixed (SurfaceKHRHandle* __dsl_surface = surface)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDevicePresentRectanglesKHR(
                    __dsl_physicalDevice,
                    __dsl_surface,
                    __dsl_pRectCount,
                    __dsl_pRects
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetPhysicalDeviceProperties")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void GetPhysicalDeviceProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            PhysicalDeviceProperties* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceProperties(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Ref<PhysicalDeviceProperties> pProperties
        )
        {
            fixed (PhysicalDeviceProperties* __dsl_pProperties = pProperties)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceProperties(__dsl_physicalDevice, __dsl_pProperties);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetPhysicalDeviceProperties2")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetPhysicalDeviceProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            PhysicalDeviceProperties2* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceProperties2(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Ref<PhysicalDeviceProperties2> pProperties
        )
        {
            fixed (PhysicalDeviceProperties2* __dsl_pProperties = pProperties)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceProperties2(__dsl_physicalDevice, __dsl_pProperties);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceProperties2KHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        public static extern void GetPhysicalDeviceProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            PhysicalDeviceProperties2* pProperties
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Ref<PhysicalDeviceProperties2> pProperties
        )
        {
            fixed (PhysicalDeviceProperties2* __dsl_pProperties = pProperties)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceProperties2KHR(__dsl_physicalDevice, __dsl_pProperties);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        public static extern void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkQueryPoolPerformanceCreateInfoKHR *")]
                QueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo,
            [NativeTypeName("uint32_t *")] uint* pNumPasses
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkQueryPoolPerformanceCreateInfoKHR *")]
                Ref<QueryPoolPerformanceCreateInfoKHR> pPerformanceQueryCreateInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pNumPasses
        )
        {
            fixed (uint* __dsl_pNumPasses = pNumPasses)
            fixed (
                QueryPoolPerformanceCreateInfoKHR* __dsl_pPerformanceQueryCreateInfo =
                    pPerformanceQueryCreateInfo
            )
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
                    __dsl_physicalDevice,
                    __dsl_pPerformanceQueryCreateInfo,
                    __dsl_pNumPasses
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties"
        )]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void GetPhysicalDeviceQueueFamilyProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
            QueueFamilyProperties* pQueueFamilyProperties
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceQueueFamilyProperties(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
            Ref<QueueFamilyProperties> pQueueFamilyProperties
        )
        {
            fixed (QueueFamilyProperties* __dsl_pQueueFamilyProperties = pQueueFamilyProperties)
            fixed (uint* __dsl_pQueueFamilyPropertyCount = pQueueFamilyPropertyCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceQueueFamilyProperties(
                    __dsl_physicalDevice,
                    __dsl_pQueueFamilyPropertyCount,
                    __dsl_pQueueFamilyProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetPhysicalDeviceQueueFamilyProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
            QueueFamilyProperties2* pQueueFamilyProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceQueueFamilyProperties2(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
            Ref<QueueFamilyProperties2> pQueueFamilyProperties
        )
        {
            fixed (QueueFamilyProperties2* __dsl_pQueueFamilyProperties = pQueueFamilyProperties)
            fixed (uint* __dsl_pQueueFamilyPropertyCount = pQueueFamilyPropertyCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceQueueFamilyProperties2(
                    __dsl_physicalDevice,
                    __dsl_pQueueFamilyPropertyCount,
                    __dsl_pQueueFamilyProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2KHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        public static extern void GetPhysicalDeviceQueueFamilyProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
            QueueFamilyProperties2* pQueueFamilyProperties
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceQueueFamilyProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
            Ref<QueueFamilyProperties2> pQueueFamilyProperties
        )
        {
            fixed (QueueFamilyProperties2* __dsl_pQueueFamilyProperties = pQueueFamilyProperties)
            fixed (uint* __dsl_pQueueFamilyPropertyCount = pQueueFamilyPropertyCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceQueueFamilyProperties2KHR(
                    __dsl_physicalDevice,
                    __dsl_pQueueFamilyPropertyCount,
                    __dsl_pQueueFamilyProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties"
        )]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void GetPhysicalDeviceSparseImageFormatProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            Format format,
            ImageType type,
            [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
            [NativeTypeName("VkImageUsageFlags")] uint usage,
            ImageTiling tiling,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            SparseImageFormatProperties* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceSparseImageFormatProperties(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            Format format,
            ImageType type,
            [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
            [NativeTypeName("VkImageUsageFlags")] uint usage,
            ImageTiling tiling,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<SparseImageFormatProperties> pProperties
        )
        {
            fixed (SparseImageFormatProperties* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceSparseImageFormatProperties(
                    __dsl_physicalDevice,
                    format,
                    type,
                    samples,
                    usage,
                    tiling,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void GetPhysicalDeviceSparseImageFormatProperties2(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
                PhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            SparseImageFormatProperties2* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceSparseImageFormatProperties2(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
                Ref<PhysicalDeviceSparseImageFormatInfo2> pFormatInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<SparseImageFormatProperties2> pProperties
        )
        {
            fixed (SparseImageFormatProperties2* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (PhysicalDeviceSparseImageFormatInfo2* __dsl_pFormatInfo = pFormatInfo)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceSparseImageFormatProperties2(
                    __dsl_physicalDevice,
                    __dsl_pFormatInfo,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2KHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        public static extern void GetPhysicalDeviceSparseImageFormatProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
                PhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
            [NativeTypeName("uint32_t *")] uint* pPropertyCount,
            SparseImageFormatProperties2* pProperties
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2KHR"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
                Ref<PhysicalDeviceSparseImageFormatInfo2> pFormatInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
            Ref<SparseImageFormatProperties2> pProperties
        )
        {
            fixed (SparseImageFormatProperties2* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pPropertyCount = pPropertyCount)
            fixed (PhysicalDeviceSparseImageFormatInfo2* __dsl_pFormatInfo = pFormatInfo)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                GetPhysicalDeviceSparseImageFormatProperties2KHR(
                    __dsl_physicalDevice,
                    __dsl_pFormatInfo,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_coverage_reduction_mode"],
            ImpliesSets = [
                "VK_NV_framebuffer_mixed_samples+VK_KHR_get_physical_device_properties2",
                "VK_NV_framebuffer_mixed_samples+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pCombinationCount,
            FramebufferMixedSamplesCombinationNV* pCombinations
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_coverage_reduction_mode"],
            ImpliesSets = [
                "VK_NV_framebuffer_mixed_samples+VK_KHR_get_physical_device_properties2",
                "VK_NV_framebuffer_mixed_samples+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pCombinationCount,
            Ref<FramebufferMixedSamplesCombinationNV> pCombinations
        )
        {
            fixed (FramebufferMixedSamplesCombinationNV* __dsl_pCombinations = pCombinations)
            fixed (uint* __dsl_pCombinationCount = pCombinationCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
                    __dsl_physicalDevice,
                    __dsl_pCombinationCount,
                    __dsl_pCombinations
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2EXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_surface_counter"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        public static extern Result GetPhysicalDeviceSurfaceCapabilities2EXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
            SurfaceCapabilities2EXT* pSurfaceCapabilities
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_surface_counter"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2EXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceCapabilities2EXT(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
            Ref<SurfaceCapabilities2EXT> pSurfaceCapabilities
        )
        {
            fixed (SurfaceCapabilities2EXT* __dsl_pSurfaceCapabilities = pSurfaceCapabilities)
            fixed (SurfaceKHRHandle* __dsl_surface = surface)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceSurfaceCapabilities2EXT(
                    __dsl_physicalDevice,
                    __dsl_surface,
                    __dsl_pSurfaceCapabilities
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2KHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_surface_capabilities2"],
            ImpliesSets = ["VK_KHR_surface"]
        )]
        public static extern Result GetPhysicalDeviceSurfaceCapabilities2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
                PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
            SurfaceCapabilities2KHR* pSurfaceCapabilities
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_surface_capabilities2"],
            ImpliesSets = ["VK_KHR_surface"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceCapabilities2KHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
                Ref<PhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo,
            Ref<SurfaceCapabilities2KHR> pSurfaceCapabilities
        )
        {
            fixed (SurfaceCapabilities2KHR* __dsl_pSurfaceCapabilities = pSurfaceCapabilities)
            fixed (PhysicalDeviceSurfaceInfo2KHR* __dsl_pSurfaceInfo = pSurfaceInfo)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceSurfaceCapabilities2KHR(
                    __dsl_physicalDevice,
                    __dsl_pSurfaceInfo,
                    __dsl_pSurfaceCapabilities
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        public static extern Result GetPhysicalDeviceSurfaceCapabilitiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
            SurfaceCapabilitiesKHR* pSurfaceCapabilities
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilitiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceCapabilitiesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
            Ref<SurfaceCapabilitiesKHR> pSurfaceCapabilities
        )
        {
            fixed (SurfaceCapabilitiesKHR* __dsl_pSurfaceCapabilities = pSurfaceCapabilities)
            fixed (SurfaceKHRHandle* __dsl_surface = surface)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceSurfaceCapabilitiesKHR(
                    __dsl_physicalDevice,
                    __dsl_surface,
                    __dsl_pSurfaceCapabilities
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceSurfaceFormats2KHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_surface_capabilities2"],
            ImpliesSets = ["VK_KHR_surface"]
        )]
        public static extern Result GetPhysicalDeviceSurfaceFormats2KHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
                PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
            [NativeTypeName("uint32_t *")] uint* pSurfaceFormatCount,
            SurfaceFormat2KHR* pSurfaceFormats
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_get_surface_capabilities2"],
            ImpliesSets = ["VK_KHR_surface"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormats2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceFormats2KHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
                Ref<PhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pSurfaceFormatCount,
            Ref<SurfaceFormat2KHR> pSurfaceFormats
        )
        {
            fixed (SurfaceFormat2KHR* __dsl_pSurfaceFormats = pSurfaceFormats)
            fixed (uint* __dsl_pSurfaceFormatCount = pSurfaceFormatCount)
            fixed (PhysicalDeviceSurfaceInfo2KHR* __dsl_pSurfaceInfo = pSurfaceInfo)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceSurfaceFormats2KHR(
                    __dsl_physicalDevice,
                    __dsl_pSurfaceInfo,
                    __dsl_pSurfaceFormatCount,
                    __dsl_pSurfaceFormats
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceSurfaceFormatsKHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        public static extern Result GetPhysicalDeviceSurfaceFormatsKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
            [NativeTypeName("uint32_t *")] uint* pSurfaceFormatCount,
            SurfaceFormatKHR* pSurfaceFormats
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormatsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceFormatsKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
            [NativeTypeName("uint32_t *")] Ref<uint> pSurfaceFormatCount,
            Ref<SurfaceFormatKHR> pSurfaceFormats
        )
        {
            fixed (SurfaceFormatKHR* __dsl_pSurfaceFormats = pSurfaceFormats)
            fixed (uint* __dsl_pSurfaceFormatCount = pSurfaceFormatCount)
            fixed (SurfaceKHRHandle* __dsl_surface = surface)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceSurfaceFormatsKHR(
                    __dsl_physicalDevice,
                    __dsl_surface,
                    __dsl_pSurfaceFormatCount,
                    __dsl_pSurfaceFormats
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceSurfacePresentModesKHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        public static extern Result GetPhysicalDeviceSurfacePresentModesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
            [NativeTypeName("uint32_t *")] uint* pPresentModeCount,
            PresentModeKHR* pPresentModes
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfacePresentModesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfacePresentModesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
            [NativeTypeName("uint32_t *")] Ref<uint> pPresentModeCount,
            Ref<PresentModeKHR> pPresentModes
        )
        {
            fixed (PresentModeKHR* __dsl_pPresentModes = pPresentModes)
            fixed (uint* __dsl_pPresentModeCount = pPresentModeCount)
            fixed (SurfaceKHRHandle* __dsl_surface = surface)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceSurfacePresentModesKHR(
                    __dsl_physicalDevice,
                    __dsl_surface,
                    __dsl_pPresentModeCount,
                    __dsl_pPresentModes
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceSurfaceSupportKHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        public static extern Result GetPhysicalDeviceSurfaceSupportKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t")] uint queueFamilyIndex,
            [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
            [NativeTypeName("VkBool32 *")] uint* pSupported
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceSupportKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceSurfaceSupportKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t")] uint queueFamilyIndex,
            [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
            [NativeTypeName("VkBool32 *")] Ref<uint> pSupported
        )
        {
            fixed (uint* __dsl_pSupported = pSupported)
            fixed (SurfaceKHRHandle* __dsl_surface = surface)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceSurfaceSupportKHR(
                    __dsl_physicalDevice,
                    queueFamilyIndex,
                    __dsl_surface,
                    __dsl_pSupported
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceToolProperties"
        )]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern Result GetPhysicalDeviceToolProperties(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pToolCount,
            PhysicalDeviceToolProperties* pToolProperties
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceToolProperties(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pToolCount,
            Ref<PhysicalDeviceToolProperties> pToolProperties
        )
        {
            fixed (PhysicalDeviceToolProperties* __dsl_pToolProperties = pToolProperties)
            fixed (uint* __dsl_pToolCount = pToolCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceToolProperties(
                    __dsl_physicalDevice,
                    __dsl_pToolCount,
                    __dsl_pToolProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceToolPropertiesEXT"
        )]
        [SupportedApiProfile("vulkan", ["VK_EXT_tooling_info"])]
        public static extern Result GetPhysicalDeviceToolPropertiesEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("uint32_t *")] uint* pToolCount,
            PhysicalDeviceToolProperties* pToolProperties
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_tooling_info"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceToolPropertiesEXT(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("uint32_t *")] Ref<uint> pToolCount,
            Ref<PhysicalDeviceToolProperties> pToolProperties
        )
        {
            fixed (PhysicalDeviceToolProperties* __dsl_pToolProperties = pToolProperties)
            fixed (uint* __dsl_pToolCount = pToolCount)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceToolPropertiesEXT(
                    __dsl_physicalDevice,
                    __dsl_pToolCount,
                    __dsl_pToolProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceVideoCapabilitiesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        public static extern Result GetPhysicalDeviceVideoCapabilitiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkVideoProfileInfoKHR *")] VideoProfileInfoKHR* pVideoProfile,
            VideoCapabilitiesKHR* pCapabilities
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoCapabilitiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceVideoCapabilitiesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkVideoProfileInfoKHR *")]
                Ref<VideoProfileInfoKHR> pVideoProfile,
            Ref<VideoCapabilitiesKHR> pCapabilities
        )
        {
            fixed (VideoCapabilitiesKHR* __dsl_pCapabilities = pCapabilities)
            fixed (VideoProfileInfoKHR* __dsl_pVideoProfile = pVideoProfile)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceVideoCapabilitiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pVideoProfile,
                    __dsl_pCapabilities
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_encode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        public static extern Result GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *")]
                PhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo,
            VideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_encode_queue"],
            ImpliesSets = [
                "VK_KHR_video_queue+VK_KHR_synchronization2",
                "VK_KHR_video_queue+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction(
            "vulkan",
            EntryPoint = "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"
        )]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *")]
                Ref<PhysicalDeviceVideoEncodeQualityLevelInfoKHR> pQualityLevelInfo,
            Ref<VideoEncodeQualityLevelPropertiesKHR> pQualityLevelProperties
        )
        {
            fixed (
                VideoEncodeQualityLevelPropertiesKHR* __dsl_pQualityLevelProperties =
                    pQualityLevelProperties
            )
            fixed (
                PhysicalDeviceVideoEncodeQualityLevelInfoKHR* __dsl_pQualityLevelInfo =
                    pQualityLevelInfo
            )
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pQualityLevelInfo,
                    __dsl_pQualityLevelProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPhysicalDeviceVideoFormatPropertiesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        public static extern Result GetPhysicalDeviceVideoFormatPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceVideoFormatInfoKHR *")]
                PhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo,
            [NativeTypeName("uint32_t *")] uint* pVideoFormatPropertyCount,
            VideoFormatPropertiesKHR* pVideoFormatProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoFormatPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPhysicalDeviceVideoFormatPropertiesKHR(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("const VkPhysicalDeviceVideoFormatInfoKHR *")]
                Ref<PhysicalDeviceVideoFormatInfoKHR> pVideoFormatInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pVideoFormatPropertyCount,
            Ref<VideoFormatPropertiesKHR> pVideoFormatProperties
        )
        {
            fixed (VideoFormatPropertiesKHR* __dsl_pVideoFormatProperties = pVideoFormatProperties)
            fixed (uint* __dsl_pVideoFormatPropertyCount = pVideoFormatPropertyCount)
            fixed (PhysicalDeviceVideoFormatInfoKHR* __dsl_pVideoFormatInfo = pVideoFormatInfo)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)GetPhysicalDeviceVideoFormatPropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pVideoFormatInfo,
                    __dsl_pVideoFormatPropertyCount,
                    __dsl_pVideoFormatProperties
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetPipelineBinaryDataKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        public static extern Result GetPipelineBinaryDataKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkPipelineBinaryDataInfoKHR *")]
                PipelineBinaryDataInfoKHR* pInfo,
            PipelineBinaryKeyKHR* pPipelineBinaryKey,
            [NativeTypeName("size_t *")] nuint* pPipelineBinaryDataSize,
            void* pPipelineBinaryData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineBinaryDataKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineBinaryDataKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkPipelineBinaryDataInfoKHR *")]
                Ref<PipelineBinaryDataInfoKHR> pInfo,
            Ref<PipelineBinaryKeyKHR> pPipelineBinaryKey,
            [NativeTypeName("size_t *")] Ref<nuint> pPipelineBinaryDataSize,
            Ref pPipelineBinaryData
        )
        {
            fixed (void* __dsl_pPipelineBinaryData = pPipelineBinaryData)
            fixed (nuint* __dsl_pPipelineBinaryDataSize = pPipelineBinaryDataSize)
            fixed (PipelineBinaryKeyKHR* __dsl_pPipelineBinaryKey = pPipelineBinaryKey)
            fixed (PipelineBinaryDataInfoKHR* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetPipelineBinaryDataKHR(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pPipelineBinaryKey,
                    __dsl_pPipelineBinaryDataSize,
                    __dsl_pPipelineBinaryData
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetPipelineCacheData")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result GetPipelineCacheData(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
            [NativeTypeName("size_t *")] nuint* pDataSize,
            void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineCacheData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineCacheData(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
            [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (nuint* __dsl_pDataSize = pDataSize)
            fixed (PipelineCacheHandle* __dsl_pipelineCache = pipelineCache)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetPipelineCacheData(
                    __dsl_device,
                    __dsl_pipelineCache,
                    __dsl_pDataSize,
                    __dsl_pData
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPipelineExecutableInternalRepresentationsKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_executable_properties"],
            ImpliesSets = [
                "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
                "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetPipelineExecutableInternalRepresentationsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
                PipelineExecutableInfoKHR* pExecutableInfo,
            [NativeTypeName("uint32_t *")] uint* pInternalRepresentationCount,
            PipelineExecutableInternalRepresentationKHR* pInternalRepresentations
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_executable_properties"],
            ImpliesSets = [
                "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
                "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableInternalRepresentationsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineExecutableInternalRepresentationsKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
                Ref<PipelineExecutableInfoKHR> pExecutableInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pInternalRepresentationCount,
            Ref<PipelineExecutableInternalRepresentationKHR> pInternalRepresentations
        )
        {
            fixed (
                PipelineExecutableInternalRepresentationKHR* __dsl_pInternalRepresentations =
                    pInternalRepresentations
            )
            fixed (uint* __dsl_pInternalRepresentationCount = pInternalRepresentationCount)
            fixed (PipelineExecutableInfoKHR* __dsl_pExecutableInfo = pExecutableInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetPipelineExecutableInternalRepresentationsKHR(
                    __dsl_device,
                    __dsl_pExecutableInfo,
                    __dsl_pInternalRepresentationCount,
                    __dsl_pInternalRepresentations
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPipelineExecutablePropertiesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_executable_properties"],
            ImpliesSets = [
                "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
                "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetPipelineExecutablePropertiesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkPipelineInfoKHR *")] PipelineInfoKHR* pPipelineInfo,
            [NativeTypeName("uint32_t *")] uint* pExecutableCount,
            PipelineExecutablePropertiesKHR* pProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_executable_properties"],
            ImpliesSets = [
                "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
                "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutablePropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineExecutablePropertiesKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkPipelineInfoKHR *")] Ref<PipelineInfoKHR> pPipelineInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pExecutableCount,
            Ref<PipelineExecutablePropertiesKHR> pProperties
        )
        {
            fixed (PipelineExecutablePropertiesKHR* __dsl_pProperties = pProperties)
            fixed (uint* __dsl_pExecutableCount = pExecutableCount)
            fixed (PipelineInfoKHR* __dsl_pPipelineInfo = pPipelineInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetPipelineExecutablePropertiesKHR(
                    __dsl_device,
                    __dsl_pPipelineInfo,
                    __dsl_pExecutableCount,
                    __dsl_pProperties
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPipelineExecutableStatisticsKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_executable_properties"],
            ImpliesSets = [
                "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
                "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetPipelineExecutableStatisticsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
                PipelineExecutableInfoKHR* pExecutableInfo,
            [NativeTypeName("uint32_t *")] uint* pStatisticCount,
            PipelineExecutableStatisticKHR* pStatistics
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_executable_properties"],
            ImpliesSets = [
                "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
                "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableStatisticsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineExecutableStatisticsKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
                Ref<PipelineExecutableInfoKHR> pExecutableInfo,
            [NativeTypeName("uint32_t *")] Ref<uint> pStatisticCount,
            Ref<PipelineExecutableStatisticKHR> pStatistics
        )
        {
            fixed (PipelineExecutableStatisticKHR* __dsl_pStatistics = pStatistics)
            fixed (uint* __dsl_pStatisticCount = pStatisticCount)
            fixed (PipelineExecutableInfoKHR* __dsl_pExecutableInfo = pExecutableInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetPipelineExecutableStatisticsKHR(
                    __dsl_device,
                    __dsl_pExecutableInfo,
                    __dsl_pStatisticCount,
                    __dsl_pStatistics
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPipelineIndirectDeviceAddressNV"
        )]
        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands_compute"],
            ImpliesSets = ["VK_NV_device_generated_commands"]
        )]
        public static extern ulong GetPipelineIndirectDeviceAddressNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkPipelineIndirectDeviceAddressInfoNV *")]
                PipelineIndirectDeviceAddressInfoNV* pInfo
        );

        [return: NativeTypeName("VkDeviceAddress")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands_compute"],
            ImpliesSets = ["VK_NV_device_generated_commands"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectDeviceAddressNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetPipelineIndirectDeviceAddressNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkPipelineIndirectDeviceAddressInfoNV *")]
                Ref<PipelineIndirectDeviceAddressInfoNV> pInfo
        )
        {
            fixed (PipelineIndirectDeviceAddressInfoNV* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (ulong)GetPipelineIndirectDeviceAddressNV(__dsl_device, __dsl_pInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetPipelineIndirectMemoryRequirementsNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands_compute"],
            ImpliesSets = ["VK_NV_device_generated_commands"]
        )]
        public static extern void GetPipelineIndirectMemoryRequirementsNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkComputePipelineCreateInfo *")]
                ComputePipelineCreateInfo* pCreateInfo,
            MemoryRequirements2* pMemoryRequirements
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_generated_commands_compute"],
            ImpliesSets = ["VK_NV_device_generated_commands"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectMemoryRequirementsNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPipelineIndirectMemoryRequirementsNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkComputePipelineCreateInfo *")]
                Ref<ComputePipelineCreateInfo> pCreateInfo,
            Ref<MemoryRequirements2> pMemoryRequirements
        )
        {
            fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
            fixed (ComputePipelineCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetPipelineIndirectMemoryRequirementsNV(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetPipelineKeyKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        public static extern Result GetPipelineKeyKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkPipelineCreateInfoKHR *")]
                PipelineCreateInfoKHR* pPipelineCreateInfo,
            PipelineBinaryKeyKHR* pPipelineKey
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelineKeyKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelineKeyKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkPipelineCreateInfoKHR *")]
                Ref<PipelineCreateInfoKHR> pPipelineCreateInfo,
            Ref<PipelineBinaryKeyKHR> pPipelineKey
        )
        {
            fixed (PipelineBinaryKeyKHR* __dsl_pPipelineKey = pPipelineKey)
            fixed (PipelineCreateInfoKHR* __dsl_pPipelineCreateInfo = pPipelineCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetPipelineKeyKHR(
                    __dsl_device,
                    __dsl_pPipelineCreateInfo,
                    __dsl_pPipelineKey
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetPipelinePropertiesEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_pipeline_properties"],
            ImpliesSets = [
                "VK_EXT_pipeline_properties+VK_KHR_get_physical_device_properties2",
                "VK_EXT_pipeline_properties+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetPipelinePropertiesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkPipelineInfoEXT *")] PipelineInfoKHR* pPipelineInfo,
            BaseOutStructure* pPipelineProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_pipeline_properties"],
            ImpliesSets = [
                "VK_EXT_pipeline_properties+VK_KHR_get_physical_device_properties2",
                "VK_EXT_pipeline_properties+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPipelinePropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetPipelinePropertiesEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkPipelineInfoEXT *")] Ref<PipelineInfoKHR> pPipelineInfo,
            Ref<BaseOutStructure> pPipelineProperties
        )
        {
            fixed (BaseOutStructure* __dsl_pPipelineProperties = pPipelineProperties)
            fixed (PipelineInfoKHR* __dsl_pPipelineInfo = pPipelineInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetPipelinePropertiesEXT(
                    __dsl_device,
                    __dsl_pPipelineInfo,
                    __dsl_pPipelineProperties
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetPrivateData")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern void GetPrivateData(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            ObjectType objectType,
            [NativeTypeName("uint64_t")] ulong objectHandle,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
            [NativeTypeName("uint64_t *")] ulong* pData
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPrivateData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPrivateData(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            ObjectType objectType,
            [NativeTypeName("uint64_t")] ulong objectHandle,
            [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
            [NativeTypeName("uint64_t *")] Ref<ulong> pData
        )
        {
            fixed (ulong* __dsl_pData = pData)
            fixed (PrivateDataSlotHandle* __dsl_privateDataSlot = privateDataSlot)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetPrivateData(
                    __dsl_device,
                    objectType,
                    objectHandle,
                    __dsl_privateDataSlot,
                    __dsl_pData
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetPrivateDataEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        public static extern void GetPrivateDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            ObjectType objectType,
            [NativeTypeName("uint64_t")] ulong objectHandle,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
            [NativeTypeName("uint64_t *")] ulong* pData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetPrivateDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetPrivateDataEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            ObjectType objectType,
            [NativeTypeName("uint64_t")] ulong objectHandle,
            [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
            [NativeTypeName("uint64_t *")] Ref<ulong> pData
        )
        {
            fixed (ulong* __dsl_pData = pData)
            fixed (PrivateDataSlotHandle* __dsl_privateDataSlot = privateDataSlot)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetPrivateDataEXT(
                    __dsl_device,
                    objectType,
                    objectHandle,
                    __dsl_privateDataSlot,
                    __dsl_pData
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetQueryPoolResults")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result GetQueryPoolResults(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pData,
            [NativeTypeName("VkDeviceSize")] ulong stride,
            [NativeTypeName("VkQueryResultFlags")] uint flags
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetQueryPoolResults")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetQueryPoolResults(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pData,
            [NativeTypeName("VkDeviceSize")] ulong stride,
            [NativeTypeName("VkQueryResultFlags")] uint flags
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetQueryPoolResults(
                    __dsl_device,
                    __dsl_queryPool,
                    firstQuery,
                    queryCount,
                    dataSize,
                    __dsl_pData,
                    stride,
                    flags
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetQueueCheckpointData2NV")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_synchronization2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_3",
            ],
            ImpliesSets = [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
            ]
        )]
        public static extern void GetQueueCheckpointData2NV(
            [NativeTypeName("VkQueue")] QueueHandle* queue,
            [NativeTypeName("uint32_t *")] uint* pCheckpointDataCount,
            CheckpointData2NV* pCheckpointData
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_synchronization2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_3",
            ],
            ImpliesSets = [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointData2NV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetQueueCheckpointData2NV(
            [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
            [NativeTypeName("uint32_t *")] Ref<uint> pCheckpointDataCount,
            Ref<CheckpointData2NV> pCheckpointData
        )
        {
            fixed (CheckpointData2NV* __dsl_pCheckpointData = pCheckpointData)
            fixed (uint* __dsl_pCheckpointDataCount = pCheckpointDataCount)
            fixed (QueueHandle* __dsl_queue = queue)
            {
                GetQueueCheckpointData2NV(
                    __dsl_queue,
                    __dsl_pCheckpointDataCount,
                    __dsl_pCheckpointData
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetQueueCheckpointDataNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_diagnostic_checkpoints"],
            ImpliesSets = [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
            ]
        )]
        public static extern void GetQueueCheckpointDataNV(
            [NativeTypeName("VkQueue")] QueueHandle* queue,
            [NativeTypeName("uint32_t *")] uint* pCheckpointDataCount,
            CheckpointDataNV* pCheckpointData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_device_diagnostic_checkpoints"],
            ImpliesSets = [
                "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
                "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointDataNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetQueueCheckpointDataNV(
            [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
            [NativeTypeName("uint32_t *")] Ref<uint> pCheckpointDataCount,
            Ref<CheckpointDataNV> pCheckpointData
        )
        {
            fixed (CheckpointDataNV* __dsl_pCheckpointData = pCheckpointData)
            fixed (uint* __dsl_pCheckpointDataCount = pCheckpointDataCount)
            fixed (QueueHandle* __dsl_queue = queue)
            {
                GetQueueCheckpointDataNV(
                    __dsl_queue,
                    __dsl_pCheckpointDataCount,
                    __dsl_pCheckpointData
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        public static extern Result GetRayTracingCaptureReplayShaderGroupHandlesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
            [NativeTypeName("uint32_t")] uint firstGroup,
            [NativeTypeName("uint32_t")] uint groupCount,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetRayTracingCaptureReplayShaderGroupHandlesKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
            [NativeTypeName("uint32_t")] uint firstGroup,
            [NativeTypeName("uint32_t")] uint groupCount,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (PipelineHandle* __dsl_pipeline = pipeline)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetRayTracingCaptureReplayShaderGroupHandlesKHR(
                    __dsl_device,
                    __dsl_pipeline,
                    firstGroup,
                    groupCount,
                    dataSize,
                    __dsl_pData
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetRayTracingShaderGroupHandlesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        public static extern Result GetRayTracingShaderGroupHandlesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
            [NativeTypeName("uint32_t")] uint firstGroup,
            [NativeTypeName("uint32_t")] uint groupCount,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetRayTracingShaderGroupHandlesKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
            [NativeTypeName("uint32_t")] uint firstGroup,
            [NativeTypeName("uint32_t")] uint groupCount,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (PipelineHandle* __dsl_pipeline = pipeline)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetRayTracingShaderGroupHandlesKHR(
                    __dsl_device,
                    __dsl_pipeline,
                    firstGroup,
                    groupCount,
                    dataSize,
                    __dsl_pData
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetRayTracingShaderGroupHandlesNV"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetRayTracingShaderGroupHandlesNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
            [NativeTypeName("uint32_t")] uint firstGroup,
            [NativeTypeName("uint32_t")] uint groupCount,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_ray_tracing"],
            ImpliesSets = [
                "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
                "VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetRayTracingShaderGroupHandlesNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
            [NativeTypeName("uint32_t")] uint firstGroup,
            [NativeTypeName("uint32_t")] uint groupCount,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (PipelineHandle* __dsl_pipeline = pipeline)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetRayTracingShaderGroupHandlesNV(
                    __dsl_device,
                    __dsl_pipeline,
                    firstGroup,
                    groupCount,
                    dataSize,
                    __dsl_pData
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetRayTracingShaderGroupStackSizeKHR"
        )]
        [return: NativeTypeName("VkDeviceSize")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        public static extern ulong GetRayTracingShaderGroupStackSizeKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
            [NativeTypeName("uint32_t")] uint group,
            ShaderGroupShaderKHR groupShader
        );

        [return: NativeTypeName("VkDeviceSize")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_ray_tracing_pipeline"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
                "VK_KHR_acceleration_structure+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupStackSizeKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetRayTracingShaderGroupStackSizeKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
            [NativeTypeName("uint32_t")] uint group,
            ShaderGroupShaderKHR groupShader
        )
        {
            fixed (PipelineHandle* __dsl_pipeline = pipeline)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (ulong)GetRayTracingShaderGroupStackSizeKHR(
                    __dsl_device,
                    __dsl_pipeline,
                    group,
                    groupShader
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetRefreshCycleDurationGOOGLE")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_GOOGLE_display_timing"],
            ImpliesSets = ["VK_KHR_swapchain"]
        )]
        public static extern Result GetRefreshCycleDurationGoogle(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
            RefreshCycleDurationGoogle* pDisplayTimingProperties
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_GOOGLE_display_timing"],
            ImpliesSets = ["VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRefreshCycleDurationGOOGLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetRefreshCycleDurationGoogle(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
            Ref<RefreshCycleDurationGoogle> pDisplayTimingProperties
        )
        {
            fixed (
                RefreshCycleDurationGoogle* __dsl_pDisplayTimingProperties =
                    pDisplayTimingProperties
            )
            fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetRefreshCycleDurationGoogle(
                    __dsl_device,
                    __dsl_swapchain,
                    __dsl_pDisplayTimingProperties
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetRenderAreaGranularity")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void GetRenderAreaGranularity(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkRenderPass")] RenderPassHandle* renderPass,
            Extent2D* pGranularity
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRenderAreaGranularity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRenderAreaGranularity(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkRenderPass")] Ref<RenderPassHandle> renderPass,
            Ref<Extent2D> pGranularity
        )
        {
            fixed (Extent2D* __dsl_pGranularity = pGranularity)
            fixed (RenderPassHandle* __dsl_renderPass = renderPass)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetRenderAreaGranularity(__dsl_device, __dsl_renderPass, __dsl_pGranularity);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetRenderingAreaGranularity")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern void GetRenderingAreaGranularity(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkRenderingAreaInfo *")] RenderingAreaInfo* pRenderingAreaInfo,
            Extent2D* pGranularity
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRenderingAreaGranularity(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkRenderingAreaInfo *")]
                Ref<RenderingAreaInfo> pRenderingAreaInfo,
            Ref<Extent2D> pGranularity
        )
        {
            fixed (Extent2D* __dsl_pGranularity = pGranularity)
            fixed (RenderingAreaInfo* __dsl_pRenderingAreaInfo = pRenderingAreaInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetRenderingAreaGranularity(
                    __dsl_device,
                    __dsl_pRenderingAreaInfo,
                    __dsl_pGranularity
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetRenderingAreaGranularityKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        public static extern void GetRenderingAreaGranularityKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkRenderingAreaInfo *")] RenderingAreaInfo* pRenderingAreaInfo,
            Extent2D* pGranularity
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_maintenance5"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularityKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRenderingAreaGranularityKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkRenderingAreaInfo *")]
                Ref<RenderingAreaInfo> pRenderingAreaInfo,
            Ref<Extent2D> pGranularity
        )
        {
            fixed (Extent2D* __dsl_pGranularity = pGranularity)
            fixed (RenderingAreaInfo* __dsl_pRenderingAreaInfo = pRenderingAreaInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetRenderingAreaGranularityKHR(
                    __dsl_device,
                    __dsl_pRenderingAreaInfo,
                    __dsl_pGranularity
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetSamplerOpaqueCaptureDescriptorDataEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result GetSamplerOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkSamplerCaptureDescriptorDataInfoEXT *")]
                SamplerCaptureDescriptorDataInfoEXT* pInfo,
            void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_descriptor_buffer"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
                "VK_KHR_synchronization2+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetSamplerOpaqueCaptureDescriptorDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSamplerOpaqueCaptureDescriptorDataEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkSamplerCaptureDescriptorDataInfoEXT *")]
                Ref<SamplerCaptureDescriptorDataInfoEXT> pInfo,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (SamplerCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetSamplerOpaqueCaptureDescriptorDataEXT(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pData
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetSemaphoreCounterValue")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        public static extern Result GetSemaphoreCounterValue(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSemaphore")] SemaphoreHandle* semaphore,
            [NativeTypeName("uint64_t *")] ulong* pValue
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValue")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSemaphoreCounterValue(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSemaphore")] Ref<SemaphoreHandle> semaphore,
            [NativeTypeName("uint64_t *")] Ref<ulong> pValue
        )
        {
            fixed (ulong* __dsl_pValue = pValue)
            fixed (SemaphoreHandle* __dsl_semaphore = semaphore)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetSemaphoreCounterValue(
                    __dsl_device,
                    __dsl_semaphore,
                    __dsl_pValue
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetSemaphoreCounterValueKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_timeline_semaphore"],
            ImpliesSets = [
                "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
                "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetSemaphoreCounterValueKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSemaphore")] SemaphoreHandle* semaphore,
            [NativeTypeName("uint64_t *")] ulong* pValue
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_timeline_semaphore"],
            ImpliesSets = [
                "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
                "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValueKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSemaphoreCounterValueKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSemaphore")] Ref<SemaphoreHandle> semaphore,
            [NativeTypeName("uint64_t *")] Ref<ulong> pValue
        )
        {
            fixed (ulong* __dsl_pValue = pValue)
            fixed (SemaphoreHandle* __dsl_semaphore = semaphore)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetSemaphoreCounterValueKHR(
                    __dsl_device,
                    __dsl_semaphore,
                    __dsl_pValue
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetSemaphoreFdKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_semaphore_fd"],
            ImpliesSets = [
                "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
                "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetSemaphoreFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkSemaphoreGetFdInfoKHR *")] SemaphoreGetFdInfoKHR* pGetFdInfo,
            int* pFd
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_semaphore_fd"],
            ImpliesSets = [
                "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
                "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSemaphoreFdKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkSemaphoreGetFdInfoKHR *")]
                Ref<SemaphoreGetFdInfoKHR> pGetFdInfo,
            Ref<int> pFd
        )
        {
            fixed (int* __dsl_pFd = pFd)
            fixed (SemaphoreGetFdInfoKHR* __dsl_pGetFdInfo = pGetFdInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetSemaphoreFdKHR(__dsl_device, __dsl_pGetFdInfo, __dsl_pFd);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetShaderBinaryDataEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result GetShaderBinaryDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkShaderEXT")] ShaderEXTHandle* shader,
            [NativeTypeName("size_t *")] nuint* pDataSize,
            void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_object"],
            ImpliesSets = [
                "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
                "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetShaderBinaryDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetShaderBinaryDataEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkShaderEXT")] Ref<ShaderEXTHandle> shader,
            [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (nuint* __dsl_pDataSize = pDataSize)
            fixed (ShaderEXTHandle* __dsl_shader = shader)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetShaderBinaryDataEXT(
                    __dsl_device,
                    __dsl_shader,
                    __dsl_pDataSize,
                    __dsl_pData
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetShaderInfoAMD")]
        [SupportedApiProfile("vulkan", ["VK_AMD_shader_info"])]
        public static extern Result GetShaderInfoAMD(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
            [NativeTypeName("VkShaderStageFlagBits")] ShaderStageFlags shaderStage,
            ShaderInfoTypeAMD infoType,
            [NativeTypeName("size_t *")] nuint* pInfoSize,
            void* pInfo
        );

        [SupportedApiProfile("vulkan", ["VK_AMD_shader_info"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetShaderInfoAMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetShaderInfoAMD(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
            [NativeTypeName("VkShaderStageFlagBits")] ShaderStageFlags shaderStage,
            ShaderInfoTypeAMD infoType,
            [NativeTypeName("size_t *")] Ref<nuint> pInfoSize,
            Ref pInfo
        )
        {
            fixed (void* __dsl_pInfo = pInfo)
            fixed (nuint* __dsl_pInfoSize = pInfoSize)
            fixed (PipelineHandle* __dsl_pipeline = pipeline)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetShaderInfoAMD(
                    __dsl_device,
                    __dsl_pipeline,
                    shaderStage,
                    infoType,
                    __dsl_pInfoSize,
                    __dsl_pInfo
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetShaderModuleCreateInfoIdentifierEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_module_identifier"],
            ImpliesSets = [
                "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
                "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void GetShaderModuleCreateInfoIdentifierEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkShaderModuleCreateInfo *")]
                ShaderModuleCreateInfo* pCreateInfo,
            ShaderModuleIdentifierEXT* pIdentifier
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_module_identifier"],
            ImpliesSets = [
                "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
                "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleCreateInfoIdentifierEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetShaderModuleCreateInfoIdentifierEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkShaderModuleCreateInfo *")]
                Ref<ShaderModuleCreateInfo> pCreateInfo,
            Ref<ShaderModuleIdentifierEXT> pIdentifier
        )
        {
            fixed (ShaderModuleIdentifierEXT* __dsl_pIdentifier = pIdentifier)
            fixed (ShaderModuleCreateInfo* __dsl_pCreateInfo = pCreateInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetShaderModuleCreateInfoIdentifierEXT(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pIdentifier
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetShaderModuleIdentifierEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_module_identifier"],
            ImpliesSets = [
                "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
                "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void GetShaderModuleIdentifierEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkShaderModule")] ShaderModuleHandle* shaderModule,
            ShaderModuleIdentifierEXT* pIdentifier
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_shader_module_identifier"],
            ImpliesSets = [
                "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
                "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleIdentifierEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetShaderModuleIdentifierEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkShaderModule")] Ref<ShaderModuleHandle> shaderModule,
            Ref<ShaderModuleIdentifierEXT> pIdentifier
        )
        {
            fixed (ShaderModuleIdentifierEXT* __dsl_pIdentifier = pIdentifier)
            fixed (ShaderModuleHandle* __dsl_shaderModule = shaderModule)
            fixed (DeviceHandle* __dsl_device = device)
            {
                GetShaderModuleIdentifierEXT(__dsl_device, __dsl_shaderModule, __dsl_pIdentifier);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetSwapchainCounterEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        public static extern Result GetSwapchainCounterEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
            [NativeTypeName("VkSurfaceCounterFlagBitsEXT")] SurfaceCounterFlagsEXT counter,
            [NativeTypeName("uint64_t *")] ulong* pCounterValue
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainCounterEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSwapchainCounterEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
            [NativeTypeName("VkSurfaceCounterFlagBitsEXT")] SurfaceCounterFlagsEXT counter,
            [NativeTypeName("uint64_t *")] Ref<ulong> pCounterValue
        )
        {
            fixed (ulong* __dsl_pCounterValue = pCounterValue)
            fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetSwapchainCounterEXT(
                    __dsl_device,
                    __dsl_swapchain,
                    counter,
                    __dsl_pCounterValue
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetSwapchainImagesKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        public static extern Result GetSwapchainImagesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
            [NativeTypeName("uint32_t *")] uint* pSwapchainImageCount,
            [NativeTypeName("VkImage *")] ImageHandle** pSwapchainImages
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainImagesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSwapchainImagesKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
            [NativeTypeName("uint32_t *")] Ref<uint> pSwapchainImageCount,
            [NativeTypeName("VkImage *")] Ref2D<ImageHandle> pSwapchainImages
        )
        {
            fixed (ImageHandle** __dsl_pSwapchainImages = pSwapchainImages)
            fixed (uint* __dsl_pSwapchainImageCount = pSwapchainImageCount)
            fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetSwapchainImagesKHR(
                    __dsl_device,
                    __dsl_swapchain,
                    __dsl_pSwapchainImageCount,
                    __dsl_pSwapchainImages
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetSwapchainStatusKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_shared_presentable_image"],
            ImpliesSets = [
                "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_VERSION_1_1",
            ]
        )]
        public static extern Result GetSwapchainStatusKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_shared_presentable_image"],
            ImpliesSets = [
                "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainStatusKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetSwapchainStatusKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain
        )
        {
            fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetSwapchainStatusKHR(__dsl_device, __dsl_swapchain);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkGetValidationCacheDataEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        public static extern Result GetValidationCacheDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle* validationCache,
            [NativeTypeName("size_t *")] nuint* pDataSize,
            void* pData
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetValidationCacheDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetValidationCacheDataEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkValidationCacheEXT")] Ref<ValidationCacheEXTHandle> validationCache,
            [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
            Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (nuint* __dsl_pDataSize = pDataSize)
            fixed (ValidationCacheEXTHandle* __dsl_validationCache = validationCache)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetValidationCacheDataEXT(
                    __dsl_device,
                    __dsl_validationCache,
                    __dsl_pDataSize,
                    __dsl_pData
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkGetVideoSessionMemoryRequirementsKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        public static extern Result GetVideoSessionMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle* videoSession,
            [NativeTypeName("uint32_t *")] uint* pMemoryRequirementsCount,
            VideoSessionMemoryRequirementsKHR* pMemoryRequirements
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkGetVideoSessionMemoryRequirementsKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result GetVideoSessionMemoryRequirementsKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkVideoSessionKHR")] Ref<VideoSessionKHRHandle> videoSession,
            [NativeTypeName("uint32_t *")] Ref<uint> pMemoryRequirementsCount,
            Ref<VideoSessionMemoryRequirementsKHR> pMemoryRequirements
        )
        {
            fixed (
                VideoSessionMemoryRequirementsKHR* __dsl_pMemoryRequirements = pMemoryRequirements
            )
            fixed (uint* __dsl_pMemoryRequirementsCount = pMemoryRequirementsCount)
            fixed (VideoSessionKHRHandle* __dsl_videoSession = videoSession)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)GetVideoSessionMemoryRequirementsKHR(
                    __dsl_device,
                    __dsl_videoSession,
                    __dsl_pMemoryRequirementsCount,
                    __dsl_pMemoryRequirements
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkImportFenceFdKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_fence_fd"],
            ImpliesSets = [
                "VK_KHR_external_fence_fd+VK_KHR_external_fence",
                "VK_KHR_external_fence_fd+VK_VERSION_1_1",
            ]
        )]
        public static extern Result ImportFenceFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkImportFenceFdInfoKHR *")]
                ImportFenceFdInfoKHR* pImportFenceFdInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_fence_fd"],
            ImpliesSets = [
                "VK_KHR_external_fence_fd+VK_KHR_external_fence",
                "VK_KHR_external_fence_fd+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkImportFenceFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ImportFenceFdKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkImportFenceFdInfoKHR *")]
                Ref<ImportFenceFdInfoKHR> pImportFenceFdInfo
        )
        {
            fixed (ImportFenceFdInfoKHR* __dsl_pImportFenceFdInfo = pImportFenceFdInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)ImportFenceFdKHR(__dsl_device, __dsl_pImportFenceFdInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkImportSemaphoreFdKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_semaphore_fd"],
            ImpliesSets = [
                "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
                "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
            ]
        )]
        public static extern Result ImportSemaphoreFdKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkImportSemaphoreFdInfoKHR *")]
                ImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_external_semaphore_fd"],
            ImpliesSets = [
                "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
                "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkImportSemaphoreFdKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ImportSemaphoreFdKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkImportSemaphoreFdInfoKHR *")]
                Ref<ImportSemaphoreFdInfoKHR> pImportSemaphoreFdInfo
        )
        {
            fixed (ImportSemaphoreFdInfoKHR* __dsl_pImportSemaphoreFdInfo = pImportSemaphoreFdInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)ImportSemaphoreFdKHR(__dsl_device, __dsl_pImportSemaphoreFdInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkInitializePerformanceApiINTEL")]
        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        public static extern Result InitializePerformanceApiIntel(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkInitializePerformanceApiInfoINTEL *")]
                InitializePerformanceApiInfoIntel* pInitializeInfo
        );

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkInitializePerformanceApiINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result InitializePerformanceApiIntel(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkInitializePerformanceApiInfoINTEL *")]
                Ref<InitializePerformanceApiInfoIntel> pInitializeInfo
        )
        {
            fixed (InitializePerformanceApiInfoIntel* __dsl_pInitializeInfo = pInitializeInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)InitializePerformanceApiIntel(__dsl_device, __dsl_pInitializeInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkInvalidateMappedMemoryRanges")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result InvalidateMappedMemoryRanges(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint memoryRangeCount,
            [NativeTypeName("const VkMappedMemoryRange *")] MappedMemoryRange* pMemoryRanges
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkInvalidateMappedMemoryRanges")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result InvalidateMappedMemoryRanges(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint memoryRangeCount,
            [NativeTypeName("const VkMappedMemoryRange *")] Ref<MappedMemoryRange> pMemoryRanges
        )
        {
            fixed (MappedMemoryRange* __dsl_pMemoryRanges = pMemoryRanges)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)InvalidateMappedMemoryRanges(
                    __dsl_device,
                    memoryRangeCount,
                    __dsl_pMemoryRanges
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkLatencySleepNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        public static extern Result LatencySleepNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
            [NativeTypeName("const VkLatencySleepInfoNV *")] LatencySleepInfoNV* pSleepInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkLatencySleepNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result LatencySleepNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
            [NativeTypeName("const VkLatencySleepInfoNV *")] Ref<LatencySleepInfoNV> pSleepInfo
        )
        {
            fixed (LatencySleepInfoNV* __dsl_pSleepInfo = pSleepInfo)
            fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)LatencySleepNV(__dsl_device, __dsl_swapchain, __dsl_pSleepInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkMapMemory")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result MapMemory(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkDeviceSize")] ulong size,
            [NativeTypeName("VkMemoryMapFlags")] uint flags,
            void** ppData
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkMapMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MapMemory(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
            [NativeTypeName("VkDeviceSize")] ulong offset,
            [NativeTypeName("VkDeviceSize")] ulong size,
            [NativeTypeName("VkMemoryMapFlags")] uint flags,
            Ref2D ppData
        )
        {
            fixed (void** __dsl_ppData = ppData)
            fixed (DeviceMemoryHandle* __dsl_memory = memory)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)MapMemory(
                    __dsl_device,
                    __dsl_memory,
                    offset,
                    size,
                    flags,
                    __dsl_ppData
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkMapMemory2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern Result MapMemory2(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkMemoryMapInfo *")] MemoryMapInfo* pMemoryMapInfo,
            void** ppData
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkMapMemory2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MapMemory2(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkMemoryMapInfo *")] Ref<MemoryMapInfo> pMemoryMapInfo,
            Ref2D ppData
        )
        {
            fixed (void** __dsl_ppData = ppData)
            fixed (MemoryMapInfo* __dsl_pMemoryMapInfo = pMemoryMapInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)MapMemory2(__dsl_device, __dsl_pMemoryMapInfo, __dsl_ppData);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkMapMemory2KHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
        public static extern Result MapMemory2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkMemoryMapInfo *")] MemoryMapInfo* pMemoryMapInfo,
            void** ppData
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkMapMemory2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MapMemory2KHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkMemoryMapInfo *")] Ref<MemoryMapInfo> pMemoryMapInfo,
            Ref2D ppData
        )
        {
            fixed (void** __dsl_ppData = ppData)
            fixed (MemoryMapInfo* __dsl_pMemoryMapInfo = pMemoryMapInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)MapMemory2KHR(__dsl_device, __dsl_pMemoryMapInfo, __dsl_ppData);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkMergePipelineCaches")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result MergePipelineCaches(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* dstCache,
            [NativeTypeName("uint32_t")] uint srcCacheCount,
            [NativeTypeName("const VkPipelineCache *")] PipelineCacheHandle** pSrcCaches
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkMergePipelineCaches")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MergePipelineCaches(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> dstCache,
            [NativeTypeName("uint32_t")] uint srcCacheCount,
            [NativeTypeName("const VkPipelineCache *")] Ref2D<PipelineCacheHandle> pSrcCaches
        )
        {
            fixed (PipelineCacheHandle** __dsl_pSrcCaches = pSrcCaches)
            fixed (PipelineCacheHandle* __dsl_dstCache = dstCache)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)MergePipelineCaches(
                    __dsl_device,
                    __dsl_dstCache,
                    srcCacheCount,
                    __dsl_pSrcCaches
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkMergeValidationCachesEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        public static extern Result MergeValidationCachesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle* dstCache,
            [NativeTypeName("uint32_t")] uint srcCacheCount,
            [NativeTypeName("const VkValidationCacheEXT *")] ValidationCacheEXTHandle** pSrcCaches
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkMergeValidationCachesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result MergeValidationCachesEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkValidationCacheEXT")] Ref<ValidationCacheEXTHandle> dstCache,
            [NativeTypeName("uint32_t")] uint srcCacheCount,
            [NativeTypeName("const VkValidationCacheEXT *")]
                Ref2D<ValidationCacheEXTHandle> pSrcCaches
        )
        {
            fixed (ValidationCacheEXTHandle** __dsl_pSrcCaches = pSrcCaches)
            fixed (ValidationCacheEXTHandle* __dsl_dstCache = dstCache)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)MergeValidationCachesEXT(
                    __dsl_device,
                    __dsl_dstCache,
                    srcCacheCount,
                    __dsl_pSrcCaches
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkQueueBeginDebugUtilsLabelEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        public static extern void QueueBeginDebugUtilsLabelEXT(
            [NativeTypeName("VkQueue")] QueueHandle* queue,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueBeginDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void QueueBeginDebugUtilsLabelEXT(
            [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
        )
        {
            fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
            fixed (QueueHandle* __dsl_queue = queue)
            {
                QueueBeginDebugUtilsLabelEXT(__dsl_queue, __dsl_pLabelInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkQueueBindSparse")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result QueueBindSparse(
            [NativeTypeName("VkQueue")] QueueHandle* queue,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindSparseInfo *")] BindSparseInfo* pBindInfo,
            [NativeTypeName("VkFence")] FenceHandle* fence
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueBindSparse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueBindSparse(
            [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
            [NativeTypeName("uint32_t")] uint bindInfoCount,
            [NativeTypeName("const VkBindSparseInfo *")] Ref<BindSparseInfo> pBindInfo,
            [NativeTypeName("VkFence")] Ref<FenceHandle> fence
        )
        {
            fixed (FenceHandle* __dsl_fence = fence)
            fixed (BindSparseInfo* __dsl_pBindInfo = pBindInfo)
            fixed (QueueHandle* __dsl_queue = queue)
            {
                return (Result)QueueBindSparse(
                    __dsl_queue,
                    bindInfoCount,
                    __dsl_pBindInfo,
                    __dsl_fence
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkQueueEndDebugUtilsLabelEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        public static extern void QueueEndDebugUtilsLabelEXT(
            [NativeTypeName("VkQueue")] QueueHandle* queue
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueEndDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void QueueEndDebugUtilsLabelEXT(
            [NativeTypeName("VkQueue")] Ref<QueueHandle> queue
        )
        {
            fixed (QueueHandle* __dsl_queue = queue)
            {
                QueueEndDebugUtilsLabelEXT(__dsl_queue);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkQueueInsertDebugUtilsLabelEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        public static extern void QueueInsertDebugUtilsLabelEXT(
            [NativeTypeName("VkQueue")] QueueHandle* queue,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueInsertDebugUtilsLabelEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void QueueInsertDebugUtilsLabelEXT(
            [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
            [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
        )
        {
            fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
            fixed (QueueHandle* __dsl_queue = queue)
            {
                QueueInsertDebugUtilsLabelEXT(__dsl_queue, __dsl_pLabelInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkQueueNotifyOutOfBandNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        public static extern void QueueNotifyOutOfBandNV(
            [NativeTypeName("VkQueue")] QueueHandle* queue,
            [NativeTypeName("const VkOutOfBandQueueTypeInfoNV *")]
                OutOfBandQueueTypeInfoNV* pQueueTypeInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueNotifyOutOfBandNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void QueueNotifyOutOfBandNV(
            [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
            [NativeTypeName("const VkOutOfBandQueueTypeInfoNV *")]
                Ref<OutOfBandQueueTypeInfoNV> pQueueTypeInfo
        )
        {
            fixed (OutOfBandQueueTypeInfoNV* __dsl_pQueueTypeInfo = pQueueTypeInfo)
            fixed (QueueHandle* __dsl_queue = queue)
            {
                QueueNotifyOutOfBandNV(__dsl_queue, __dsl_pQueueTypeInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkQueuePresentKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        public static extern Result QueuePresentKHR(
            [NativeTypeName("VkQueue")] QueueHandle* queue,
            [NativeTypeName("const VkPresentInfoKHR *")] PresentInfoKHR* pPresentInfo
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueuePresentKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueuePresentKHR(
            [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
            [NativeTypeName("const VkPresentInfoKHR *")] Ref<PresentInfoKHR> pPresentInfo
        )
        {
            fixed (PresentInfoKHR* __dsl_pPresentInfo = pPresentInfo)
            fixed (QueueHandle* __dsl_queue = queue)
            {
                return (Result)QueuePresentKHR(__dsl_queue, __dsl_pPresentInfo);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkQueueSetPerformanceConfigurationINTEL"
        )]
        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        public static extern Result QueueSetPerformanceConfigurationIntel(
            [NativeTypeName("VkQueue")] QueueHandle* queue,
            [NativeTypeName("VkPerformanceConfigurationINTEL")]
                PerformanceConfigurationIntelHandle* configuration
        );

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueSetPerformanceConfigurationINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueSetPerformanceConfigurationIntel(
            [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
            [NativeTypeName("VkPerformanceConfigurationINTEL")]
                Ref<PerformanceConfigurationIntelHandle> configuration
        )
        {
            fixed (PerformanceConfigurationIntelHandle* __dsl_configuration = configuration)
            fixed (QueueHandle* __dsl_queue = queue)
            {
                return (Result)QueueSetPerformanceConfigurationIntel(
                    __dsl_queue,
                    __dsl_configuration
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkQueueSubmit")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result QueueSubmit(
            [NativeTypeName("VkQueue")] QueueHandle* queue,
            [NativeTypeName("uint32_t")] uint submitCount,
            [NativeTypeName("const VkSubmitInfo *")] SubmitInfo* pSubmits,
            [NativeTypeName("VkFence")] FenceHandle* fence
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueSubmit(
            [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
            [NativeTypeName("uint32_t")] uint submitCount,
            [NativeTypeName("const VkSubmitInfo *")] Ref<SubmitInfo> pSubmits,
            [NativeTypeName("VkFence")] Ref<FenceHandle> fence
        )
        {
            fixed (FenceHandle* __dsl_fence = fence)
            fixed (SubmitInfo* __dsl_pSubmits = pSubmits)
            fixed (QueueHandle* __dsl_queue = queue)
            {
                return (Result)QueueSubmit(__dsl_queue, submitCount, __dsl_pSubmits, __dsl_fence);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkQueueSubmit2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern Result QueueSubmit2(
            [NativeTypeName("VkQueue")] QueueHandle* queue,
            [NativeTypeName("uint32_t")] uint submitCount,
            [NativeTypeName("const VkSubmitInfo2 *")] SubmitInfo2* pSubmits,
            [NativeTypeName("VkFence")] FenceHandle* fence
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueSubmit2(
            [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
            [NativeTypeName("uint32_t")] uint submitCount,
            [NativeTypeName("const VkSubmitInfo2 *")] Ref<SubmitInfo2> pSubmits,
            [NativeTypeName("VkFence")] Ref<FenceHandle> fence
        )
        {
            fixed (FenceHandle* __dsl_fence = fence)
            fixed (SubmitInfo2* __dsl_pSubmits = pSubmits)
            fixed (QueueHandle* __dsl_queue = queue)
            {
                return (Result)QueueSubmit2(__dsl_queue, submitCount, __dsl_pSubmits, __dsl_fence);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkQueueSubmit2KHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        public static extern Result QueueSubmit2KHR(
            [NativeTypeName("VkQueue")] QueueHandle* queue,
            [NativeTypeName("uint32_t")] uint submitCount,
            [NativeTypeName("const VkSubmitInfo2 *")] SubmitInfo2* pSubmits,
            [NativeTypeName("VkFence")] FenceHandle* fence
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_synchronization2"],
            ImpliesSets = [
                "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_synchronization2+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueSubmit2KHR(
            [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
            [NativeTypeName("uint32_t")] uint submitCount,
            [NativeTypeName("const VkSubmitInfo2 *")] Ref<SubmitInfo2> pSubmits,
            [NativeTypeName("VkFence")] Ref<FenceHandle> fence
        )
        {
            fixed (FenceHandle* __dsl_fence = fence)
            fixed (SubmitInfo2* __dsl_pSubmits = pSubmits)
            fixed (QueueHandle* __dsl_queue = queue)
            {
                return (Result)QueueSubmit2KHR(
                    __dsl_queue,
                    submitCount,
                    __dsl_pSubmits,
                    __dsl_fence
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkQueueWaitIdle")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result QueueWaitIdle([NativeTypeName("VkQueue")] QueueHandle* queue);

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkQueueWaitIdle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result QueueWaitIdle([NativeTypeName("VkQueue")] Ref<QueueHandle> queue)
        {
            fixed (QueueHandle* __dsl_queue = queue)
            {
                return (Result)QueueWaitIdle(__dsl_queue);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkRegisterDeviceEventEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        public static extern Result RegisterDeviceEventEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDeviceEventInfoEXT *")] DeviceEventInfoEXT* pDeviceEventInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkFence *")] FenceHandle** pFence
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkRegisterDeviceEventEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result RegisterDeviceEventEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDeviceEventInfoEXT *")]
                Ref<DeviceEventInfoEXT> pDeviceEventInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkFence *")] Ref2D<FenceHandle> pFence
        )
        {
            fixed (FenceHandle** __dsl_pFence = pFence)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DeviceEventInfoEXT* __dsl_pDeviceEventInfo = pDeviceEventInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)RegisterDeviceEventEXT(
                    __dsl_device,
                    __dsl_pDeviceEventInfo,
                    __dsl_pAllocator,
                    __dsl_pFence
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkRegisterDisplayEventEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        public static extern Result RegisterDisplayEventEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
            [NativeTypeName("const VkDisplayEventInfoEXT *")]
                DisplayEventInfoEXT* pDisplayEventInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
            [NativeTypeName("VkFence *")] FenceHandle** pFence
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_display_control"],
            ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkRegisterDisplayEventEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result RegisterDisplayEventEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
            [NativeTypeName("const VkDisplayEventInfoEXT *")]
                Ref<DisplayEventInfoEXT> pDisplayEventInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
            [NativeTypeName("VkFence *")] Ref2D<FenceHandle> pFence
        )
        {
            fixed (FenceHandle** __dsl_pFence = pFence)
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (DisplayEventInfoEXT* __dsl_pDisplayEventInfo = pDisplayEventInfo)
            fixed (DisplayKHRHandle* __dsl_display = display)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)RegisterDisplayEventEXT(
                    __dsl_device,
                    __dsl_display,
                    __dsl_pDisplayEventInfo,
                    __dsl_pAllocator,
                    __dsl_pFence
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkReleaseCapturedPipelineDataKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        public static extern Result ReleaseCapturedPipelineDataKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkReleaseCapturedPipelineDataInfoKHR *")]
                ReleaseCapturedPipelineDataInfoKHR* pInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_pipeline_binary"],
            ImpliesSets = [
                "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
                "VK_KHR_pipeline_binary+VK_VERSION_1_4",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkReleaseCapturedPipelineDataKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ReleaseCapturedPipelineDataKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkReleaseCapturedPipelineDataInfoKHR *")]
                Ref<ReleaseCapturedPipelineDataInfoKHR> pInfo,
            [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
        )
        {
            fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
            fixed (ReleaseCapturedPipelineDataInfoKHR* __dsl_pInfo = pInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)ReleaseCapturedPipelineDataKHR(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pAllocator
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkReleaseDisplayEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_direct_mode_display"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        public static extern Result ReleaseDisplayEXT(
            [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
            [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_direct_mode_display"],
            ImpliesSets = ["VK_KHR_display"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkReleaseDisplayEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ReleaseDisplayEXT(
            [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
            [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display
        )
        {
            fixed (DisplayKHRHandle* __dsl_display = display)
            fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
            {
                return (Result)ReleaseDisplayEXT(__dsl_physicalDevice, __dsl_display);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkReleasePerformanceConfigurationINTEL"
        )]
        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        public static extern Result ReleasePerformanceConfigurationIntel(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkPerformanceConfigurationINTEL")]
                PerformanceConfigurationIntelHandle* configuration
        );

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkReleasePerformanceConfigurationINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ReleasePerformanceConfigurationIntel(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkPerformanceConfigurationINTEL")]
                Ref<PerformanceConfigurationIntelHandle> configuration
        )
        {
            fixed (PerformanceConfigurationIntelHandle* __dsl_configuration = configuration)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)ReleasePerformanceConfigurationIntel(
                    __dsl_device,
                    __dsl_configuration
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkReleaseProfilingLockKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        public static extern void ReleaseProfilingLockKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_performance_query"],
            ImpliesSets = [
                "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
                "VK_KHR_performance_query+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkReleaseProfilingLockKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ReleaseProfilingLockKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device
        )
        {
            fixed (DeviceHandle* __dsl_device = device)
            {
                ReleaseProfilingLockKHR(__dsl_device);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkReleaseSwapchainImagesEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_swapchain_maintenance1"],
            ImpliesSets = [
                "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_KHR_get_physical_device_properties2",
                "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_VERSION_1_1",
            ]
        )]
        public static extern Result ReleaseSwapchainImagesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkReleaseSwapchainImagesInfoEXT *")]
                ReleaseSwapchainImagesInfoEXT* pReleaseInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_swapchain_maintenance1"],
            ImpliesSets = [
                "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_KHR_get_physical_device_properties2",
                "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ReleaseSwapchainImagesEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkReleaseSwapchainImagesInfoEXT *")]
                Ref<ReleaseSwapchainImagesInfoEXT> pReleaseInfo
        )
        {
            fixed (ReleaseSwapchainImagesInfoEXT* __dsl_pReleaseInfo = pReleaseInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)ReleaseSwapchainImagesEXT(__dsl_device, __dsl_pReleaseInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkResetCommandBuffer")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result ResetCommandBuffer(
            [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
            [NativeTypeName("VkCommandBufferResetFlags")] uint flags
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkResetCommandBuffer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ResetCommandBuffer(
            [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
            [NativeTypeName("VkCommandBufferResetFlags")] uint flags
        )
        {
            fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
            {
                return (Result)ResetCommandBuffer(__dsl_commandBuffer, flags);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkResetCommandPool")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result ResetCommandPool(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
            [NativeTypeName("VkCommandPoolResetFlags")] uint flags
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkResetCommandPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ResetCommandPool(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
            [NativeTypeName("VkCommandPoolResetFlags")] uint flags
        )
        {
            fixed (CommandPoolHandle* __dsl_commandPool = commandPool)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)ResetCommandPool(__dsl_device, __dsl_commandPool, flags);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkResetDescriptorPool")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result ResetDescriptorPool(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle* descriptorPool,
            [NativeTypeName("VkDescriptorPoolResetFlags")] uint flags
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkResetDescriptorPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ResetDescriptorPool(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDescriptorPool")] Ref<DescriptorPoolHandle> descriptorPool,
            [NativeTypeName("VkDescriptorPoolResetFlags")] uint flags
        )
        {
            fixed (DescriptorPoolHandle* __dsl_descriptorPool = descriptorPool)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)ResetDescriptorPool(__dsl_device, __dsl_descriptorPool, flags);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkResetEvent")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result ResetEvent(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkEvent")] EventHandle* @event
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkResetEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ResetEvent(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkEvent")] Ref<EventHandle> @event
        )
        {
            fixed (EventHandle* __dsl_event = @event)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)ResetEvent(__dsl_device, __dsl_event);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkResetFences")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result ResetFences(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint fenceCount,
            [NativeTypeName("const VkFence *")] FenceHandle** pFences
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkResetFences")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result ResetFences(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint fenceCount,
            [NativeTypeName("const VkFence *")] Ref2D<FenceHandle> pFences
        )
        {
            fixed (FenceHandle** __dsl_pFences = pFences)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)ResetFences(__dsl_device, fenceCount, __dsl_pFences);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkResetQueryPool")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        public static extern void ResetQueryPool(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkResetQueryPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ResetQueryPool(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (DeviceHandle* __dsl_device = device)
            {
                ResetQueryPool(__dsl_device, __dsl_queryPool, firstQuery, queryCount);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkResetQueryPoolEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_query_reset"],
            ImpliesSets = [
                "VK_EXT_host_query_reset+VK_KHR_get_physical_device_properties2",
                "VK_EXT_host_query_reset+VK_VERSION_1_1",
            ]
        )]
        public static extern void ResetQueryPoolEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_query_reset"],
            ImpliesSets = [
                "VK_EXT_host_query_reset+VK_KHR_get_physical_device_properties2",
                "VK_EXT_host_query_reset+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkResetQueryPoolEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ResetQueryPoolEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
            [NativeTypeName("uint32_t")] uint firstQuery,
            [NativeTypeName("uint32_t")] uint queryCount
        )
        {
            fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
            fixed (DeviceHandle* __dsl_device = device)
            {
                ResetQueryPoolEXT(__dsl_device, __dsl_queryPool, firstQuery, queryCount);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkSetDebugUtilsObjectNameEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        public static extern Result SetDebugUtilsObjectNameEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDebugUtilsObjectNameInfoEXT *")]
                DebugUtilsObjectNameInfoEXT* pNameInfo
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectNameEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetDebugUtilsObjectNameEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDebugUtilsObjectNameInfoEXT *")]
                Ref<DebugUtilsObjectNameInfoEXT> pNameInfo
        )
        {
            fixed (DebugUtilsObjectNameInfoEXT* __dsl_pNameInfo = pNameInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)SetDebugUtilsObjectNameEXT(__dsl_device, __dsl_pNameInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkSetDebugUtilsObjectTagEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        public static extern Result SetDebugUtilsObjectTagEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkDebugUtilsObjectTagInfoEXT *")]
                DebugUtilsObjectTagInfoEXT* pTagInfo
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectTagEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetDebugUtilsObjectTagEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkDebugUtilsObjectTagInfoEXT *")]
                Ref<DebugUtilsObjectTagInfoEXT> pTagInfo
        )
        {
            fixed (DebugUtilsObjectTagInfoEXT* __dsl_pTagInfo = pTagInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)SetDebugUtilsObjectTagEXT(__dsl_device, __dsl_pTagInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkSetDeviceMemoryPriorityEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_pageable_device_local_memory"],
            ImpliesSets = ["VK_EXT_memory_priority"]
        )]
        public static extern void SetDeviceMemoryPriorityEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
            float priority
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_pageable_device_local_memory"],
            ImpliesSets = ["VK_EXT_memory_priority"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetDeviceMemoryPriorityEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetDeviceMemoryPriorityEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
            float priority
        )
        {
            fixed (DeviceMemoryHandle* __dsl_memory = memory)
            fixed (DeviceHandle* __dsl_device = device)
            {
                SetDeviceMemoryPriorityEXT(__dsl_device, __dsl_memory, priority);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkSetEvent")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result SetEvent(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkEvent")] EventHandle* @event
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetEvent(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkEvent")] Ref<EventHandle> @event
        )
        {
            fixed (EventHandle* __dsl_event = @event)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)SetEvent(__dsl_device, __dsl_event);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkSetHdrMetadataEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_hdr_metadata"], ImpliesSets = ["VK_KHR_swapchain"])]
        public static extern void SetHdrMetadataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint swapchainCount,
            [NativeTypeName("const VkSwapchainKHR *")] SwapchainKHRHandle** pSwapchains,
            [NativeTypeName("const VkHdrMetadataEXT *")] HdrMetadataEXT* pMetadata
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_hdr_metadata"], ImpliesSets = ["VK_KHR_swapchain"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetHdrMetadataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetHdrMetadataEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint swapchainCount,
            [NativeTypeName("const VkSwapchainKHR *")] Ref2D<SwapchainKHRHandle> pSwapchains,
            [NativeTypeName("const VkHdrMetadataEXT *")] Ref<HdrMetadataEXT> pMetadata
        )
        {
            fixed (HdrMetadataEXT* __dsl_pMetadata = pMetadata)
            fixed (SwapchainKHRHandle** __dsl_pSwapchains = pSwapchains)
            fixed (DeviceHandle* __dsl_device = device)
            {
                SetHdrMetadataEXT(__dsl_device, swapchainCount, __dsl_pSwapchains, __dsl_pMetadata);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkSetLatencyMarkerNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        public static extern void SetLatencyMarkerNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
            [NativeTypeName("const VkSetLatencyMarkerInfoNV *")]
                SetLatencyMarkerInfoNV* pLatencyMarkerInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetLatencyMarkerNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetLatencyMarkerNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
            [NativeTypeName("const VkSetLatencyMarkerInfoNV *")]
                Ref<SetLatencyMarkerInfoNV> pLatencyMarkerInfo
        )
        {
            fixed (SetLatencyMarkerInfoNV* __dsl_pLatencyMarkerInfo = pLatencyMarkerInfo)
            fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
            fixed (DeviceHandle* __dsl_device = device)
            {
                SetLatencyMarkerNV(__dsl_device, __dsl_swapchain, __dsl_pLatencyMarkerInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkSetLatencySleepModeNV")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        public static extern Result SetLatencySleepModeNV(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
            [NativeTypeName("const VkLatencySleepModeInfoNV *")]
                LatencySleepModeInfoNV* pSleepModeInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_NV_low_latency2"],
            ImpliesSets = [
                "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
                "VK_NV_low_latency2+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetLatencySleepModeNV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetLatencySleepModeNV(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
            [NativeTypeName("const VkLatencySleepModeInfoNV *")]
                Ref<LatencySleepModeInfoNV> pSleepModeInfo
        )
        {
            fixed (LatencySleepModeInfoNV* __dsl_pSleepModeInfo = pSleepModeInfo)
            fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)SetLatencySleepModeNV(
                    __dsl_device,
                    __dsl_swapchain,
                    __dsl_pSleepModeInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkSetLocalDimmingAMD")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_AMD_display_native_hdr"],
            ImpliesSets = [
                "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
                "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
            ]
        )]
        public static extern void SetLocalDimmingAMD(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapChain,
            [NativeTypeName("VkBool32")] uint localDimmingEnable
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_AMD_display_native_hdr"],
            ImpliesSets = [
                "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
                "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetLocalDimmingAMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetLocalDimmingAMD(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapChain,
            [NativeTypeName("VkBool32")] uint localDimmingEnable
        )
        {
            fixed (SwapchainKHRHandle* __dsl_swapChain = swapChain)
            fixed (DeviceHandle* __dsl_device = device)
            {
                SetLocalDimmingAMD(__dsl_device, __dsl_swapChain, localDimmingEnable);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkSetPrivateData")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        public static extern Result SetPrivateData(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            ObjectType objectType,
            [NativeTypeName("uint64_t")] ulong objectHandle,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
            [NativeTypeName("uint64_t")] ulong data
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetPrivateData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetPrivateData(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            ObjectType objectType,
            [NativeTypeName("uint64_t")] ulong objectHandle,
            [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
            [NativeTypeName("uint64_t")] ulong data
        )
        {
            fixed (PrivateDataSlotHandle* __dsl_privateDataSlot = privateDataSlot)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)SetPrivateData(
                    __dsl_device,
                    objectType,
                    objectHandle,
                    __dsl_privateDataSlot,
                    data
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkSetPrivateDataEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        public static extern Result SetPrivateDataEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            ObjectType objectType,
            [NativeTypeName("uint64_t")] ulong objectHandle,
            [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
            [NativeTypeName("uint64_t")] ulong data
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_private_data"],
            ImpliesSets = [
                "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
                "VK_EXT_private_data+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSetPrivateDataEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SetPrivateDataEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            ObjectType objectType,
            [NativeTypeName("uint64_t")] ulong objectHandle,
            [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
            [NativeTypeName("uint64_t")] ulong data
        )
        {
            fixed (PrivateDataSlotHandle* __dsl_privateDataSlot = privateDataSlot)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)SetPrivateDataEXT(
                    __dsl_device,
                    objectType,
                    objectHandle,
                    __dsl_privateDataSlot,
                    data
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkSignalSemaphore")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        public static extern Result SignalSemaphore(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkSemaphoreSignalInfo *")] SemaphoreSignalInfo* pSignalInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SignalSemaphore(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkSemaphoreSignalInfo *")] Ref<SemaphoreSignalInfo> pSignalInfo
        )
        {
            fixed (SemaphoreSignalInfo* __dsl_pSignalInfo = pSignalInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)SignalSemaphore(__dsl_device, __dsl_pSignalInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkSignalSemaphoreKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_timeline_semaphore"],
            ImpliesSets = [
                "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
                "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
            ]
        )]
        public static extern Result SignalSemaphoreKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkSemaphoreSignalInfo *")] SemaphoreSignalInfo* pSignalInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_timeline_semaphore"],
            ImpliesSets = [
                "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
                "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphoreKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result SignalSemaphoreKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkSemaphoreSignalInfo *")] Ref<SemaphoreSignalInfo> pSignalInfo
        )
        {
            fixed (SemaphoreSignalInfo* __dsl_pSignalInfo = pSignalInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)SignalSemaphoreKHR(__dsl_device, __dsl_pSignalInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkSubmitDebugUtilsMessageEXT")]
        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        public static extern void SubmitDebugUtilsMessageEXT(
            [NativeTypeName("VkInstance")] InstanceHandle* instance,
            [NativeTypeName("VkDebugUtilsMessageSeverityFlagBitsEXT")]
                DebugUtilsMessageSeverityFlagsEXT messageSeverity,
            [NativeTypeName("VkDebugUtilsMessageTypeFlagsEXT")] uint messageTypes,
            [NativeTypeName("const VkDebugUtilsMessengerCallbackDataEXT *")]
                DebugUtilsMessengerCallbackDataEXT* pCallbackData
        );

        [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkSubmitDebugUtilsMessageEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SubmitDebugUtilsMessageEXT(
            [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
            [NativeTypeName("VkDebugUtilsMessageSeverityFlagBitsEXT")]
                DebugUtilsMessageSeverityFlagsEXT messageSeverity,
            [NativeTypeName("VkDebugUtilsMessageTypeFlagsEXT")] uint messageTypes,
            [NativeTypeName("const VkDebugUtilsMessengerCallbackDataEXT *")]
                Ref<DebugUtilsMessengerCallbackDataEXT> pCallbackData
        )
        {
            fixed (DebugUtilsMessengerCallbackDataEXT* __dsl_pCallbackData = pCallbackData)
            fixed (InstanceHandle* __dsl_instance = instance)
            {
                SubmitDebugUtilsMessageEXT(
                    __dsl_instance,
                    messageSeverity,
                    messageTypes,
                    __dsl_pCallbackData
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkTransitionImageLayout")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern Result TransitionImageLayout(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint transitionCount,
            [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
                HostImageLayoutTransitionInfo* pTransitions
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result TransitionImageLayout(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint transitionCount,
            [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
                Ref<HostImageLayoutTransitionInfo> pTransitions
        )
        {
            fixed (HostImageLayoutTransitionInfo* __dsl_pTransitions = pTransitions)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)TransitionImageLayout(
                    __dsl_device,
                    transitionCount,
                    __dsl_pTransitions
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkTransitionImageLayoutEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern Result TransitionImageLayoutEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint transitionCount,
            [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
                HostImageLayoutTransitionInfo* pTransitions
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_host_image_copy"],
            ImpliesSets = [
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
                "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayoutEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result TransitionImageLayoutEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint transitionCount,
            [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
                Ref<HostImageLayoutTransitionInfo> pTransitions
        )
        {
            fixed (HostImageLayoutTransitionInfo* __dsl_pTransitions = pTransitions)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)TransitionImageLayoutEXT(
                    __dsl_device,
                    transitionCount,
                    __dsl_pTransitions
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkTrimCommandPool")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void TrimCommandPool(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
            [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkTrimCommandPool")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void TrimCommandPool(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
            [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
        )
        {
            fixed (CommandPoolHandle* __dsl_commandPool = commandPool)
            fixed (DeviceHandle* __dsl_device = device)
            {
                TrimCommandPool(__dsl_device, __dsl_commandPool, flags);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkTrimCommandPoolKHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance1"])]
        public static extern void TrimCommandPoolKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
            [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_maintenance1"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkTrimCommandPoolKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void TrimCommandPoolKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
            [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
        )
        {
            fixed (CommandPoolHandle* __dsl_commandPool = commandPool)
            fixed (DeviceHandle* __dsl_device = device)
            {
                TrimCommandPoolKHR(__dsl_device, __dsl_commandPool, flags);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkUninitializePerformanceApiINTEL"
        )]
        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        public static extern void UninitializePerformanceApiIntel(
            [NativeTypeName("VkDevice")] DeviceHandle* device
        );

        [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUninitializePerformanceApiINTEL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UninitializePerformanceApiIntel(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device
        )
        {
            fixed (DeviceHandle* __dsl_device = device)
            {
                UninitializePerformanceApiIntel(__dsl_device);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkUnmapMemory")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void UnmapMemory(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnmapMemory(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory
        )
        {
            fixed (DeviceMemoryHandle* __dsl_memory = memory)
            fixed (DeviceHandle* __dsl_device = device)
            {
                UnmapMemory(__dsl_device, __dsl_memory);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkUnmapMemory2")]
        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        public static extern Result UnmapMemory2(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkMemoryUnmapInfo *")] MemoryUnmapInfo* pMemoryUnmapInfo
        );

        [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result UnmapMemory2(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkMemoryUnmapInfo *")] Ref<MemoryUnmapInfo> pMemoryUnmapInfo
        )
        {
            fixed (MemoryUnmapInfo* __dsl_pMemoryUnmapInfo = pMemoryUnmapInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)UnmapMemory2(__dsl_device, __dsl_pMemoryUnmapInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkUnmapMemory2KHR")]
        [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
        public static extern Result UnmapMemory2KHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkMemoryUnmapInfo *")] MemoryUnmapInfo* pMemoryUnmapInfo
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2KHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result UnmapMemory2KHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkMemoryUnmapInfo *")] Ref<MemoryUnmapInfo> pMemoryUnmapInfo
        )
        {
            fixed (MemoryUnmapInfo* __dsl_pMemoryUnmapInfo = pMemoryUnmapInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)UnmapMemory2KHR(__dsl_device, __dsl_pMemoryUnmapInfo);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkUpdateDescriptorSets")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern void UpdateDescriptorSets(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint descriptorWriteCount,
            [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites,
            [NativeTypeName("uint32_t")] uint descriptorCopyCount,
            [NativeTypeName("const VkCopyDescriptorSet *")] CopyDescriptorSet* pDescriptorCopies
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSets")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateDescriptorSets(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint descriptorWriteCount,
            [NativeTypeName("const VkWriteDescriptorSet *")]
                Ref<WriteDescriptorSet> pDescriptorWrites,
            [NativeTypeName("uint32_t")] uint descriptorCopyCount,
            [NativeTypeName("const VkCopyDescriptorSet *")] Ref<CopyDescriptorSet> pDescriptorCopies
        )
        {
            fixed (CopyDescriptorSet* __dsl_pDescriptorCopies = pDescriptorCopies)
            fixed (WriteDescriptorSet* __dsl_pDescriptorWrites = pDescriptorWrites)
            fixed (DeviceHandle* __dsl_device = device)
            {
                UpdateDescriptorSets(
                    __dsl_device,
                    descriptorWriteCount,
                    __dsl_pDescriptorWrites,
                    descriptorCopyCount,
                    __dsl_pDescriptorCopies
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkUpdateDescriptorSetWithTemplate"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        public static extern void UpdateDescriptorSetWithTemplate(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle* descriptorSet,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
            [NativeTypeName("const void *")] void* pData
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.1"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateDescriptorSetWithTemplate(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDescriptorSet")] Ref<DescriptorSetHandle> descriptorSet,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
            [NativeTypeName("const void *")] Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (
                DescriptorUpdateTemplateHandle* __dsl_descriptorUpdateTemplate =
                    descriptorUpdateTemplate
            )
            fixed (DescriptorSetHandle* __dsl_descriptorSet = descriptorSet)
            fixed (DeviceHandle* __dsl_device = device)
            {
                UpdateDescriptorSetWithTemplate(
                    __dsl_device,
                    __dsl_descriptorSet,
                    __dsl_descriptorUpdateTemplate,
                    __dsl_pData
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkUpdateDescriptorSetWithTemplateKHR"
        )]
        [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
        public static extern void UpdateDescriptorSetWithTemplateKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle* descriptorSet,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
            [NativeTypeName("const void *")] void* pData
        );

        [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplateKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateDescriptorSetWithTemplateKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkDescriptorSet")] Ref<DescriptorSetHandle> descriptorSet,
            [NativeTypeName("VkDescriptorUpdateTemplate")]
                Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
            [NativeTypeName("const void *")] Ref pData
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (
                DescriptorUpdateTemplateHandle* __dsl_descriptorUpdateTemplate =
                    descriptorUpdateTemplate
            )
            fixed (DescriptorSetHandle* __dsl_descriptorSet = descriptorSet)
            fixed (DeviceHandle* __dsl_device = device)
            {
                UpdateDescriptorSetWithTemplateKHR(
                    __dsl_device,
                    __dsl_descriptorSet,
                    __dsl_descriptorUpdateTemplate,
                    __dsl_pData
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void UpdateIndirectExecutionSetPipelineEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                IndirectExecutionSetEXTHandle* indirectExecutionSet,
            [NativeTypeName("uint32_t")] uint executionSetWriteCount,
            [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
                WriteIndirectExecutionSetPipelineEXT* pExecutionSetWrites
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateIndirectExecutionSetPipelineEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
            [NativeTypeName("uint32_t")] uint executionSetWriteCount,
            [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
                Ref<WriteIndirectExecutionSetPipelineEXT> pExecutionSetWrites
        )
        {
            fixed (
                WriteIndirectExecutionSetPipelineEXT* __dsl_pExecutionSetWrites =
                    pExecutionSetWrites
            )
            fixed (IndirectExecutionSetEXTHandle* __dsl_indirectExecutionSet = indirectExecutionSet)
            fixed (DeviceHandle* __dsl_device = device)
            {
                UpdateIndirectExecutionSetPipelineEXT(
                    __dsl_device,
                    __dsl_indirectExecutionSet,
                    executionSetWriteCount,
                    __dsl_pExecutionSetWrites
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateIndirectExecutionSetPipelineEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
            [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
                WriteIndirectExecutionSetPipelineEXT pExecutionSetWrites
        )
        {
            fixed (IndirectExecutionSetEXTHandle* __dsl_indirectExecutionSet = indirectExecutionSet)
            fixed (DeviceHandle* __dsl_device = device)
            {
                UpdateIndirectExecutionSetPipelineEXT(
                    __dsl_device,
                    __dsl_indirectExecutionSet,
                    1,
                    (WriteIndirectExecutionSetPipelineEXT*)&pExecutionSetWrites
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        public static extern void UpdateIndirectExecutionSetShaderEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                IndirectExecutionSetEXTHandle* indirectExecutionSet,
            [NativeTypeName("uint32_t")] uint executionSetWriteCount,
            [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
                WriteIndirectExecutionSetShaderEXT* pExecutionSetWrites
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateIndirectExecutionSetShaderEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
            [NativeTypeName("uint32_t")] uint executionSetWriteCount,
            [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
                Ref<WriteIndirectExecutionSetShaderEXT> pExecutionSetWrites
        )
        {
            fixed (
                WriteIndirectExecutionSetShaderEXT* __dsl_pExecutionSetWrites = pExecutionSetWrites
            )
            fixed (IndirectExecutionSetEXTHandle* __dsl_indirectExecutionSet = indirectExecutionSet)
            fixed (DeviceHandle* __dsl_device = device)
            {
                UpdateIndirectExecutionSetShaderEXT(
                    __dsl_device,
                    __dsl_indirectExecutionSet,
                    executionSetWriteCount,
                    __dsl_pExecutionSetWrites
                );
            }
        }

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_device_generated_commands"],
            ImpliesSets = [
                "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
                "VK_KHR_maintenance5+VK_VERSION_1_2",
                "VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateIndirectExecutionSetShaderEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkIndirectExecutionSetEXT")]
                Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
            [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
                WriteIndirectExecutionSetShaderEXT pExecutionSetWrites
        )
        {
            fixed (IndirectExecutionSetEXTHandle* __dsl_indirectExecutionSet = indirectExecutionSet)
            fixed (DeviceHandle* __dsl_device = device)
            {
                UpdateIndirectExecutionSetShaderEXT(
                    __dsl_device,
                    __dsl_indirectExecutionSet,
                    1,
                    (WriteIndirectExecutionSetShaderEXT*)&pExecutionSetWrites
                );
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkUpdateVideoSessionParametersKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        public static extern Result UpdateVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkVideoSessionParametersKHR")]
                VideoSessionParametersKHRHandle* videoSessionParameters,
            [NativeTypeName("const VkVideoSessionParametersUpdateInfoKHR *")]
                VideoSessionParametersUpdateInfoKHR* pUpdateInfo
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_video_queue"],
            ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkUpdateVideoSessionParametersKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result UpdateVideoSessionParametersKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkVideoSessionParametersKHR")]
                Ref<VideoSessionParametersKHRHandle> videoSessionParameters,
            [NativeTypeName("const VkVideoSessionParametersUpdateInfoKHR *")]
                Ref<VideoSessionParametersUpdateInfoKHR> pUpdateInfo
        )
        {
            fixed (VideoSessionParametersUpdateInfoKHR* __dsl_pUpdateInfo = pUpdateInfo)
            fixed (
                VideoSessionParametersKHRHandle* __dsl_videoSessionParameters =
                    videoSessionParameters
            )
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)UpdateVideoSessionParametersKHR(
                    __dsl_device,
                    __dsl_videoSessionParameters,
                    __dsl_pUpdateInfo
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkWaitForFences")]
        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        public static extern Result WaitForFences(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint fenceCount,
            [NativeTypeName("const VkFence *")] FenceHandle** pFences,
            [NativeTypeName("VkBool32")] uint waitAll,
            [NativeTypeName("uint64_t")] ulong timeout
        );

        [SupportedApiProfile(
            "vulkan",
            [
                "VK_VERSION_1_0",
                "VK_VERSION_1_1",
                "VK_VERSION_1_2",
                "VK_VERSION_1_3",
                "VK_VERSION_1_4",
            ],
            MinVersion = "1.0"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkWaitForFences")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WaitForFences(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint fenceCount,
            [NativeTypeName("const VkFence *")] Ref2D<FenceHandle> pFences,
            [NativeTypeName("VkBool32")] uint waitAll,
            [NativeTypeName("uint64_t")] ulong timeout
        )
        {
            fixed (FenceHandle** __dsl_pFences = pFences)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)WaitForFences(
                    __dsl_device,
                    fenceCount,
                    __dsl_pFences,
                    waitAll,
                    timeout
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkWaitForPresentKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_present_wait"],
            ImpliesSets = ["VK_KHR_present_id", "VK_KHR_swapchain"]
        )]
        public static extern Result WaitForPresentKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
            [NativeTypeName("uint64_t")] ulong presentId,
            [NativeTypeName("uint64_t")] ulong timeout
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_present_wait"],
            ImpliesSets = ["VK_KHR_present_id", "VK_KHR_swapchain"]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkWaitForPresentKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WaitForPresentKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
            [NativeTypeName("uint64_t")] ulong presentId,
            [NativeTypeName("uint64_t")] ulong timeout
        )
        {
            fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)WaitForPresentKHR(__dsl_device, __dsl_swapchain, presentId, timeout);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkWaitSemaphores")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        public static extern Result WaitSemaphores(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkSemaphoreWaitInfo *")] SemaphoreWaitInfo* pWaitInfo,
            [NativeTypeName("uint64_t")] ulong timeout
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
            MinVersion = "1.2"
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphores")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WaitSemaphores(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkSemaphoreWaitInfo *")] Ref<SemaphoreWaitInfo> pWaitInfo,
            [NativeTypeName("uint64_t")] ulong timeout
        )
        {
            fixed (SemaphoreWaitInfo* __dsl_pWaitInfo = pWaitInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)WaitSemaphores(__dsl_device, __dsl_pWaitInfo, timeout);
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkWaitSemaphoresKHR")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_timeline_semaphore"],
            ImpliesSets = [
                "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
                "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
            ]
        )]
        public static extern Result WaitSemaphoresKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("const VkSemaphoreWaitInfo *")] SemaphoreWaitInfo* pWaitInfo,
            [NativeTypeName("uint64_t")] ulong timeout
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_timeline_semaphore"],
            ImpliesSets = [
                "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
                "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphoresKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WaitSemaphoresKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("const VkSemaphoreWaitInfo *")] Ref<SemaphoreWaitInfo> pWaitInfo,
            [NativeTypeName("uint64_t")] ulong timeout
        )
        {
            fixed (SemaphoreWaitInfo* __dsl_pWaitInfo = pWaitInfo)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)WaitSemaphoresKHR(__dsl_device, __dsl_pWaitInfo, timeout);
            }
        }

        [DllImport(
            "vulkan",
            ExactSpelling = true,
            EntryPoint = "vkWriteAccelerationStructuresPropertiesKHR"
        )]
        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        public static extern Result WriteAccelerationStructuresPropertiesKHR(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint accelerationStructureCount,
            [NativeTypeName("const VkAccelerationStructureKHR *")]
                AccelerationStructureKHRHandle** pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pData,
            [NativeTypeName("size_t")] nuint stride
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_KHR_acceleration_structure"],
            ImpliesSets = [
                "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
                "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkWriteAccelerationStructuresPropertiesKHR")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WriteAccelerationStructuresPropertiesKHR(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint accelerationStructureCount,
            [NativeTypeName("const VkAccelerationStructureKHR *")]
                Ref2D<AccelerationStructureKHRHandle> pAccelerationStructures,
            QueryType queryType,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pData,
            [NativeTypeName("size_t")] nuint stride
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (
                AccelerationStructureKHRHandle** __dsl_pAccelerationStructures =
                    pAccelerationStructures
            )
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)WriteAccelerationStructuresPropertiesKHR(
                    __dsl_device,
                    accelerationStructureCount,
                    __dsl_pAccelerationStructures,
                    queryType,
                    dataSize,
                    __dsl_pData,
                    stride
                );
            }
        }

        [DllImport("vulkan", ExactSpelling = true, EntryPoint = "vkWriteMicromapsPropertiesEXT")]
        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        public static extern Result WriteMicromapsPropertiesEXT(
            [NativeTypeName("VkDevice")] DeviceHandle* device,
            [NativeTypeName("uint32_t")] uint micromapCount,
            [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle** pMicromaps,
            QueryType queryType,
            [NativeTypeName("size_t")] nuint dataSize,
            void* pData,
            [NativeTypeName("size_t")] nuint stride
        );

        [SupportedApiProfile(
            "vulkan",
            ["VK_EXT_opacity_micromap"],
            ImpliesSets = [
                "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
                "VK_KHR_acceleration_structure+VK_VERSION_1_3",
            ]
        )]
        [Transformed]
        [NativeFunction("vulkan", EntryPoint = "vkWriteMicromapsPropertiesEXT")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Result WriteMicromapsPropertiesEXT(
            [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
            [NativeTypeName("uint32_t")] uint micromapCount,
            [NativeTypeName("const VkMicromapEXT *")] Ref2D<MicromapEXTHandle> pMicromaps,
            QueryType queryType,
            [NativeTypeName("size_t")] nuint dataSize,
            Ref pData,
            [NativeTypeName("size_t")] nuint stride
        )
        {
            fixed (void* __dsl_pData = pData)
            fixed (MicromapEXTHandle** __dsl_pMicromaps = pMicromaps)
            fixed (DeviceHandle* __dsl_device = device)
            {
                return (Result)WriteMicromapsPropertiesEXT(
                    __dsl_device,
                    micromapCount,
                    __dsl_pMicromaps,
                    queryType,
                    dataSize,
                    __dsl_pData,
                    stride
                );
            }
        }
    }

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2None = 0UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2TopOfPipeBit = 0x00000001UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2DrawIndirectBit = 0x00000002UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2VertexInputBit = 0x00000004UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2VertexShaderBit = 0x00000008UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2TessellationControlShaderBit = 0x00000010UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2TessellationEvaluationShaderBit = 0x00000020UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2GeometryShaderBit = 0x00000040UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2FragmentShaderBit = 0x00000080UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2EarlyFragmentTestsBit = 0x00000100UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2LateFragmentTestsBit = 0x00000200UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2ColorAttachmentOutputBit = 0x00000400UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2ComputeShaderBit = 0x00000800UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2AllTransferBit = 0x00001000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2TransferBit = 0x00001000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2BottomOfPipeBit = 0x00002000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2HostBit = 0x00004000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2AllGraphicsBit = 0x00008000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2AllCommandsBit = 0x00010000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2CopyBit = 0x100000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2ResolveBit = 0x200000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2BlitBit = 0x400000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2ClearBit = 0x800000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2IndexInputBit = 0x1000000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2VertexAttributeInputBit = 0x2000000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineStage2PreRasterizationShadersBit = 0x4000000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public const ulong PipelineStage2VideoDecodeBitKHR = 0x04000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public const ulong PipelineStage2VideoEncodeBitKHR = 0x08000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2NoneKHR = 0UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2TopOfPipeBitKHR = 0x00000001UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2DrawIndirectBitKHR = 0x00000002UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2VertexInputBitKHR = 0x00000004UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2VertexShaderBitKHR = 0x00000008UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2TessellationControlShaderBitKHR = 0x00000010UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2TessellationEvaluationShaderBitKHR = 0x00000020UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2GeometryShaderBitKHR = 0x00000040UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2FragmentShaderBitKHR = 0x00000080UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2EarlyFragmentTestsBitKHR = 0x00000100UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2LateFragmentTestsBitKHR = 0x00000200UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2ColorAttachmentOutputBitKHR = 0x00000400UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2ComputeShaderBitKHR = 0x00000800UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2AllTransferBitKHR = 0x00001000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2TransferBitKHR = 0x00001000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2BottomOfPipeBitKHR = 0x00002000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2HostBitKHR = 0x00004000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2AllGraphicsBitKHR = 0x00008000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2AllCommandsBitKHR = 0x00010000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2CopyBitKHR = 0x100000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2ResolveBitKHR = 0x200000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2BlitBitKHR = 0x400000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2ClearBitKHR = 0x800000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2IndexInputBitKHR = 0x1000000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2VertexAttributeInputBitKHR = 0x2000000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2PreRasterizationShadersBitKHR = 0x4000000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2TransformFeedbackBitEXT = 0x01000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2ConditionalRenderingBitEXT = 0x00040000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2", "VK_NV_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2CommandPreprocessBitNV = 0x00020000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2CommandPreprocessBitEXT = 0x00020000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2FragmentShadingRateAttachmentBitKHR = 0x00400000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2", "VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2ShadingRateImageBitNV = 0x00400000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2AccelerationStructureBuildBitKHR = 0x02000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2RayTracingShaderBitKHR = 0x00200000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2", "VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2RayTracingShaderBitNV = 0x00200000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2", "VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2AccelerationStructureBuildBitNV = 0x02000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2FragmentDensityProcessBitEXT = 0x00800000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2", "VK_NV_mesh_shader"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2TaskShaderBitNV = 0x00080000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2", "VK_NV_mesh_shader"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2MeshShaderBitNV = 0x00100000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2TaskShaderBitEXT = 0x00080000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong PipelineStage2MeshShaderBitEXT = 0x00100000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public const ulong PipelineStage2SubpassShaderBitHuawei = 0x8000000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public const ulong PipelineStage2SubpassShadingBitHuawei = 0x8000000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_invocation_mask"],
        ImpliesSets = [
            "VK_KHR_ray_tracing_pipeline+VK_KHR_synchronization2",
            "VK_KHR_ray_tracing_pipeline+VK_VERSION_1_3",
        ]
    )]
    public const ulong PipelineStage2InvocationMaskBitHuawei = 0x10000000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_ray_tracing_maintenance1+VK_KHR_synchronization2",
            "VK_KHR_ray_tracing_maintenance1+VK_VERSION_1_3",
        ],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public const ulong PipelineStage2AccelerationStructureCopyBitKHR = 0x10000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    public const ulong PipelineStage2MicromapBuildBitEXT = 0x40000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_cluster_culling_shader"],
        ImpliesSets = [
            "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
            "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineStage2ClusterCullingShaderBitHuawei = 0x20000000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const ulong PipelineStage2OpticalFlowBitNV = 0x20000000UL;

    [NativeTypeName("const VkPipelineStageFlagBits2")]
    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    public const ulong PipelineStage2ConvertCooperativeVectorMatrixBitNV = 0x100000000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2None = 0UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2IndirectCommandReadBit = 0x00000001UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2IndexReadBit = 0x00000002UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2VertexAttributeReadBit = 0x00000004UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2UniformReadBit = 0x00000008UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2InputAttachmentReadBit = 0x00000010UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2ShaderReadBit = 0x00000020UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2ShaderWriteBit = 0x00000040UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2ColorAttachmentReadBit = 0x00000080UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2ColorAttachmentWriteBit = 0x00000100UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2DepthStencilAttachmentReadBit = 0x00000200UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2DepthStencilAttachmentWriteBit = 0x00000400UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2TransferReadBit = 0x00000800UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2TransferWriteBit = 0x00001000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2HostReadBit = 0x00002000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2HostWriteBit = 0x00004000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2MemoryReadBit = 0x00008000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2MemoryWriteBit = 0x00010000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2ShaderSampledReadBit = 0x100000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2ShaderStorageReadBit = 0x200000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access2ShaderStorageWriteBit = 0x400000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public const ulong Access2VideoDecodeReadBitKHR = 0x800000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public const ulong Access2VideoDecodeWriteBitKHR = 0x1000000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public const ulong Access2VideoEncodeReadBitKHR = 0x2000000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public const ulong Access2VideoEncodeWriteBitKHR = 0x4000000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    public const ulong Access2ShaderTileAttachmentReadBitQCOM = 0x8000000000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    public const ulong Access2ShaderTileAttachmentWriteBitQCOM = 0x10000000000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2NoneKHR = 0UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2IndirectCommandReadBitKHR = 0x00000001UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2IndexReadBitKHR = 0x00000002UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2VertexAttributeReadBitKHR = 0x00000004UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2UniformReadBitKHR = 0x00000008UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2InputAttachmentReadBitKHR = 0x00000010UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2ShaderReadBitKHR = 0x00000020UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2ShaderWriteBitKHR = 0x00000040UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2ColorAttachmentReadBitKHR = 0x00000080UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2ColorAttachmentWriteBitKHR = 0x00000100UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2DepthStencilAttachmentReadBitKHR = 0x00000200UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2DepthStencilAttachmentWriteBitKHR = 0x00000400UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2TransferReadBitKHR = 0x00000800UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2TransferWriteBitKHR = 0x00001000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2HostReadBitKHR = 0x00002000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2HostWriteBitKHR = 0x00004000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2MemoryReadBitKHR = 0x00008000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2MemoryWriteBitKHR = 0x00010000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2ShaderSampledReadBitKHR = 0x100000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2ShaderStorageReadBitKHR = 0x200000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const ulong Access2ShaderStorageWriteBitKHR = 0x400000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2TransformFeedbackWriteBitEXT = 0x02000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2TransformFeedbackCounterReadBitEXT = 0x04000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2TransformFeedbackCounterWriteBitEXT = 0x08000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2ConditionalRenderingReadBitEXT = 0x00100000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2", "VK_NV_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2CommandPreprocessReadBitNV = 0x00020000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2", "VK_NV_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2CommandPreprocessWriteBitNV = 0x00040000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2CommandPreprocessReadBitEXT = 0x00020000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2CommandPreprocessWriteBitEXT = 0x00040000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2FragmentShadingRateAttachmentReadBitKHR = 0x00800000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2", "VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2ShadingRateImageReadBitNV = 0x00800000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2AccelerationStructureReadBitKHR = 0x00200000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2AccelerationStructureWriteBitKHR = 0x00400000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2", "VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2AccelerationStructureReadBitNV = 0x00200000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2", "VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2AccelerationStructureWriteBitNV = 0x00400000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2FragmentDensityMapReadBitEXT = 0x01000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_blend_operation_advanced", "VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    public const ulong Access2ColorAttachmentReadNoncoherentBitEXT = 0x00080000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public const ulong Access2DescriptorBufferReadBitEXT = 0x20000000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_invocation_mask"],
        ImpliesSets = [
            "VK_KHR_ray_tracing_pipeline+VK_KHR_synchronization2",
            "VK_KHR_ray_tracing_pipeline+VK_VERSION_1_3",
        ]
    )]
    public const ulong Access2InvocationMaskReadBitHuawei = 0x8000000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_ray_tracing_maintenance1+VK_KHR_ray_tracing_pipeline+VK_KHR_synchronization2",
            "VK_KHR_ray_tracing_maintenance1+VK_KHR_ray_tracing_pipeline+VK_VERSION_1_3",
        ],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public const ulong Access2ShaderBindingTableReadBitKHR = 0x10000000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    public const ulong Access2MicromapReadBitEXT = 0x100000000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    public const ulong Access2MicromapWriteBitEXT = 0x200000000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const ulong Access2OpticalFlowReadBitNV = 0x40000000000UL;

    [NativeTypeName("const VkAccessFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const ulong Access2OpticalFlowWriteBitNV = 0x80000000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2SampledImageBit = 0x00000001UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2StorageImageBit = 0x00000002UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2StorageImageAtomicBit = 0x00000004UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2UniformTexelBufferBit = 0x00000008UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2StorageTexelBufferBit = 0x00000010UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2StorageTexelBufferAtomicBit = 0x00000020UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2VertexBufferBit = 0x00000040UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2ColorAttachmentBit = 0x00000080UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2ColorAttachmentBlendBit = 0x00000100UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2DepthStencilAttachmentBit = 0x00000200UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2BlitSrcBit = 0x00000400UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2BlitDstBit = 0x00000800UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2SampledImageFilterLinearBit = 0x00001000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2TransferSrcBit = 0x00004000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2TransferDstBit = 0x00008000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2SampledImageFilterMinmaxBit = 0x00010000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2MidpointChromaSamplesBit = 0x00020000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2SampledImageYcbcrConversionLinearFilterBit = 0x00040000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2SampledImageYcbcrConversionSeparateReconstructionFilterBit =
        0x00080000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2SampledImageYcbcrConversionChromaReconstructionExplicitBit =
        0x00100000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2SampledImageYcbcrConversionChromaReconstructionExplicitForceableBit =
        0x00200000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2DisjointBit = 0x00400000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2CositedChromaSamplesBit = 0x00800000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2StorageReadWithoutFormatBit = 0x80000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2StorageWriteWithoutFormatBit = 0x100000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong FormatFeature2SampledImageDepthComparisonBit = 0x200000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    public const ulong FormatFeature2SampledImageFilterCubicBit = 0x00002000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    public const ulong FormatFeature2HostImageTransferBit = 0x400000000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_video_decode_queue+VK_KHR_format_feature_flags2",
            "VK_KHR_video_decode_queue+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public const ulong FormatFeature2VideoDecodeOutputBitKHR = 0x02000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_video_decode_queue+VK_KHR_format_feature_flags2",
            "VK_KHR_video_decode_queue+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public const ulong FormatFeature2VideoDecodeDpbBitKHR = 0x04000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_acceleration_structure+VK_KHR_format_feature_flags2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    public const ulong FormatFeature2AccelerationStructureVertexBufferBitKHR = 0x20000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_EXT_fragment_density_map+VK_KHR_format_feature_flags2",
            "VK_EXT_fragment_density_map+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2FragmentDensityMapBitEXT = 0x01000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_fragment_shading_rate+VK_KHR_format_feature_flags2",
            "VK_KHR_fragment_shading_rate+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const ulong FormatFeature2FragmentShadingRateAttachmentBitKHR = 0x40000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const ulong FormatFeature2HostImageTransferBitEXT = 0x400000000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_video_encode_queue+VK_KHR_format_feature_flags2",
            "VK_KHR_video_encode_queue+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public const ulong FormatFeature2VideoEncodeInputBitKHR = 0x08000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_video_encode_queue+VK_KHR_format_feature_flags2",
            "VK_KHR_video_encode_queue+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public const ulong FormatFeature2VideoEncodeDpbBitKHR = 0x10000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2SampledImageBitKHR = 0x00000001UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2StorageImageBitKHR = 0x00000002UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2StorageImageAtomicBitKHR = 0x00000004UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2UniformTexelBufferBitKHR = 0x00000008UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2StorageTexelBufferBitKHR = 0x00000010UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2StorageTexelBufferAtomicBitKHR = 0x00000020UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2VertexBufferBitKHR = 0x00000040UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2ColorAttachmentBitKHR = 0x00000080UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2ColorAttachmentBlendBitKHR = 0x00000100UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2DepthStencilAttachmentBitKHR = 0x00000200UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2BlitSrcBitKHR = 0x00000400UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2BlitDstBitKHR = 0x00000800UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2SampledImageFilterLinearBitKHR = 0x00001000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2TransferSrcBitKHR = 0x00004000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2TransferDstBitKHR = 0x00008000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2MidpointChromaSamplesBitKHR = 0x00020000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2SampledImageYcbcrConversionLinearFilterBitKHR = 0x00040000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2SampledImageYcbcrConversionSeparateReconstructionFilterBitKHR =
        0x00080000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2SampledImageYcbcrConversionChromaReconstructionExplicitBitKHR =
        0x00100000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2SampledImageYcbcrConversionChromaReconstructionExplicitForceableBitKHR =
        0x00200000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2DisjointBitKHR = 0x00400000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2CositedChromaSamplesBitKHR = 0x00800000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2StorageReadWithoutFormatBitKHR = 0x80000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2StorageWriteWithoutFormatBitKHR = 0x100000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2SampledImageDepthComparisonBitKHR = 0x200000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_format_feature_flags2+VK_EXT_sampler_filter_minmax",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_2",
        ],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2SampledImageFilterMinmaxBitKHR = 0x00010000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_format_feature_flags2+VK_EXT_filter_cubic",
            "VK_KHR_format_feature_flags2+VK_IMG_filter_cubic",
        ],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2SampledImageFilterCubicBitEXT = 0x00002000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing_linear_swept_spheres"],
        ImpliesSets = ["VK_KHR_ray_tracing_pipeline"]
    )]
    public const ulong FormatFeature2AccelerationStructureRadiusBufferBitNV = 0x8000000000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_NV_linear_color_attachment+VK_KHR_format_feature_flags2",
            "VK_NV_linear_color_attachment+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_NV_linear_color_attachment+VK_KHR_get_physical_device_properties2",
            "VK_NV_linear_color_attachment+VK_VERSION_1_1",
        ]
    )]
    public const ulong FormatFeature2LinearColorAttachmentBitNV = 0x4000000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_QCOM_image_processing+VK_KHR_format_feature_flags2",
            "VK_QCOM_image_processing+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_QCOM_image_processing+VK_KHR_format_feature_flags2",
            "VK_QCOM_image_processing+VK_VERSION_1_3",
        ]
    )]
    public const ulong FormatFeature2WeightImageBitQCOM = 0x400000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_QCOM_image_processing+VK_KHR_format_feature_flags2",
            "VK_QCOM_image_processing+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_QCOM_image_processing+VK_KHR_format_feature_flags2",
            "VK_QCOM_image_processing+VK_VERSION_1_3",
        ]
    )]
    public const ulong FormatFeature2WeightSampledImageBitQCOM = 0x800000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_QCOM_image_processing+VK_KHR_format_feature_flags2",
            "VK_QCOM_image_processing+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_QCOM_image_processing+VK_KHR_format_feature_flags2",
            "VK_QCOM_image_processing+VK_VERSION_1_3",
        ]
    )]
    public const ulong FormatFeature2BlockMatchingBitQCOM = 0x1000000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_QCOM_image_processing+VK_KHR_format_feature_flags2",
            "VK_QCOM_image_processing+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_QCOM_image_processing+VK_KHR_format_feature_flags2",
            "VK_QCOM_image_processing+VK_VERSION_1_3",
        ]
    )]
    public const ulong FormatFeature2BoxFilterSampledBitQCOM = 0x2000000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const ulong FormatFeature2OpticalFlowImageBitNV = 0x10000000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const ulong FormatFeature2OpticalFlowVectorBitNV = 0x20000000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const ulong FormatFeature2OpticalFlowCostBitNV = 0x40000000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_quantization_map"],
        ImpliesSets = [
            "VK_KHR_video_encode_queue+VK_KHR_format_feature_flags2",
            "VK_KHR_video_encode_queue+VK_VERSION_1_3",
        ]
    )]
    public const ulong FormatFeature2VideoEncodeQuantizationDeltaMapBitKHR = 0x2000000000000UL;

    [NativeTypeName("const VkFormatFeatureFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_quantization_map"],
        ImpliesSets = [
            "VK_KHR_video_encode_queue+VK_KHR_format_feature_flags2",
            "VK_KHR_video_encode_queue+VK_VERSION_1_3",
        ]
    )]
    public const ulong FormatFeature2VideoEncodeEmphasisMapBitKHR = 0x4000000000000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineCreate2DisableOptimizationBit = 0x00000001UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineCreate2AllowDerivativesBit = 0x00000002UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineCreate2DerivativeBit = 0x00000004UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineCreate2ViewIndexFromDeviceIndexBit = 0x00000008UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineCreate2DispatchBaseBit = 0x00000010UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineCreate2FailOnPipelineCompileRequiredBit = 0x00000100UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineCreate2EarlyReturnOnFailureBit = 0x00000200UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineCreate2NoProtectedAccessBit = 0x08000000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong PipelineCreate2ProtectedAccessOnlyBit = 0x40000000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    public const ulong PipelineCreate2RayTracingSkipBuiltInPrimitivesBitKHR = 0x00001000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing_linear_swept_spheres"],
        ImpliesSets = ["VK_KHR_ray_tracing_pipeline"]
    )]
    public const ulong PipelineCreate2RayTracingAllowSpheresAndLinearSweptSpheresBitNV =
        0x200000000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_EXT_legacy_dithering+VK_KHR_dynamic_rendering+VK_KHR_maintenance5",
            "VK_EXT_legacy_dithering+VK_KHR_dynamic_rendering+VK_VERSION_1_4",
            "VK_EXT_legacy_dithering+VK_VERSION_1_3+VK_KHR_maintenance5",
            "VK_EXT_legacy_dithering+VK_VERSION_1_3+VK_VERSION_1_4",
        ],
        ImpliesSets = [
            "VK_EXT_legacy_dithering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_legacy_dithering+VK_VERSION_1_1",
        ]
    )]
    public const ulong PipelineCreate2EnableLegacyDitheringBitEXT = 0x400000000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong PipelineCreate2DisableOptimizationBitKHR = 0x00000001UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong PipelineCreate2AllowDerivativesBitKHR = 0x00000002UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong PipelineCreate2DerivativeBitKHR = 0x00000004UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong PipelineCreate2ViewIndexFromDeviceIndexBitKHR = 0x00000008UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong PipelineCreate2DispatchBaseBitKHR = 0x00000010UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_NV_ray_tracing"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2DeferCompileBitNV = 0x00000020UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_pipeline_executable_properties"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2CaptureStatisticsBitKHR = 0x00000040UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_pipeline_executable_properties"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2CaptureInternalRepresentationsBitKHR = 0x00000080UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_maintenance5+VK_EXT_pipeline_creation_cache_control",
            "VK_KHR_maintenance5+VK_VERSION_1_3",
        ],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong PipelineCreate2FailOnPipelineCompileRequiredBitKHR = 0x00000100UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_maintenance5+VK_EXT_pipeline_creation_cache_control",
            "VK_KHR_maintenance5+VK_VERSION_1_3",
        ],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong PipelineCreate2EarlyReturnOnFailureBitKHR = 0x00000200UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_graphics_pipeline_library", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2LinkTimeOptimizationBitEXT = 0x00000400UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_graphics_pipeline_library", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2RetainLinkTimeOptimizationInfoBitEXT = 0x00800000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_pipeline_library"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2LibraryBitKHR = 0x00000800UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2RayTracingSkipTrianglesBitKHR = 0x00001000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2RayTracingSkipAabbsBitKHR = 0x00002000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2RayTracingNoNullAnyHitShadersBitKHR = 0x00004000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2RayTracingNoNullClosestHitShadersBitKHR = 0x00008000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2RayTracingNoNullMissShadersBitKHR = 0x00010000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2RayTracingNoNullIntersectionShadersBitKHR = 0x00020000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2RayTracingShaderGroupHandleCaptureReplayBitKHR = 0x00080000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2IndirectBindableBitNV = 0x00040000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_NV_ray_tracing_motion_blur"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2RayTracingAllowMotionBitNV = 0x00100000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_maintenance5+VK_KHR_fragment_shading_rate+VK_KHR_dynamic_rendering",
            "VK_KHR_maintenance5+VK_KHR_fragment_shading_rate+VK_VERSION_1_3",
        ],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong PipelineCreate2RenderingFragmentShadingRateAttachmentBitKHR = 0x00200000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_maintenance5+VK_EXT_fragment_density_map+VK_KHR_dynamic_rendering",
            "VK_KHR_maintenance5+VK_EXT_fragment_density_map+VK_VERSION_1_3",
        ],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong PipelineCreate2RenderingFragmentDensityMapAttachmentBitEXT = 0x00400000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2RayTracingOpacityMicromapBitEXT = 0x01000000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_attachment_feedback_loop_layout", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2ColorAttachmentFeedbackLoopBitEXT = 0x02000000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_attachment_feedback_loop_layout", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2DepthStencilAttachmentFeedbackLoopBitEXT = 0x04000000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_maintenance5+VK_EXT_pipeline_protected_access",
            "VK_KHR_maintenance5+VK_VERSION_1_4",
        ],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong PipelineCreate2NoProtectedAccessBitEXT = 0x08000000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_maintenance5+VK_EXT_pipeline_protected_access",
            "VK_KHR_maintenance5+VK_VERSION_1_4",
        ],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong PipelineCreate2ProtectedAccessOnlyBitEXT = 0x40000000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_NV_displacement_micromap"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2RayTracingDisplacementMicromapBitNV = 0x10000000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2DescriptorBufferBitEXT = 0x20000000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_pipeline_opacity_micromap", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong PipelineCreate2DisallowOpacityMicromapBitARM = 0x2000000000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    public const ulong PipelineCreate2CaptureDataBitKHR = 0x80000000UL;

    [NativeTypeName("const VkPipelineCreateFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public const ulong PipelineCreate2IndirectBindableBitEXT = 0x4000000000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong BufferUsage2TransferSrcBit = 0x00000001UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong BufferUsage2TransferDstBit = 0x00000002UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong BufferUsage2UniformTexelBufferBit = 0x00000004UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong BufferUsage2StorageTexelBufferBit = 0x00000008UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong BufferUsage2UniformBufferBit = 0x00000010UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong BufferUsage2StorageBufferBit = 0x00000020UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong BufferUsage2IndexBufferBit = 0x00000040UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong BufferUsage2VertexBufferBit = 0x00000080UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile("vulkan")]
    public const ulong BufferUsage2IndirectBufferBit = 0x00000100UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    public const ulong BufferUsage2ShaderDeviceAddressBit = 0x00020000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong BufferUsage2TransferSrcBitKHR = 0x00000001UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong BufferUsage2TransferDstBitKHR = 0x00000002UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong BufferUsage2UniformTexelBufferBitKHR = 0x00000004UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong BufferUsage2StorageTexelBufferBitKHR = 0x00000008UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong BufferUsage2UniformBufferBitKHR = 0x00000010UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong BufferUsage2StorageBufferBitKHR = 0x00000020UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong BufferUsage2IndexBufferBitKHR = 0x00000040UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong BufferUsage2VertexBufferBitKHR = 0x00000080UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong BufferUsage2IndirectBufferBitKHR = 0x00000100UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2ConditionalRenderingBitEXT = 0x00000200UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2ShaderBindingTableBitKHR = 0x00000400UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_NV_ray_tracing"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2RayTracingBitNV = 0x00000400UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2TransformFeedbackBufferBitEXT = 0x00000800UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2TransformFeedbackCounterBufferBitEXT = 0x00001000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_video_decode_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2VideoDecodeSrcBitKHR = 0x00002000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_video_decode_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2VideoDecodeDstBitKHR = 0x00004000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_video_encode_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2VideoEncodeDstBitKHR = 0x00008000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5", "VK_KHR_video_encode_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2VideoEncodeSrcBitKHR = 0x00010000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_maintenance5+VK_EXT_buffer_device_address",
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
        ],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const ulong BufferUsage2ShaderDeviceAddressBitKHR = 0x00020000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2AccelerationStructureBuildInputReadOnlyBitKHR = 0x00080000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2AccelerationStructureStorageBitKHR = 0x00100000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2SamplerDescriptorBufferBitEXT = 0x00200000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2ResourceDescriptorBufferBitEXT = 0x00400000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2PushDescriptorsDescriptorBufferBitEXT = 0x04000000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2MicromapBuildInputReadOnlyBitEXT = 0x00800000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap", "VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"],
        RequireAll = true
    )]
    public const ulong BufferUsage2MicromapStorageBitEXT = 0x01000000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_memory_heap"],
        ImpliesSets = [
            "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public const ulong BufferUsage2TileMemoryBitQCOM = 0x08000000UL;

    [NativeTypeName("const VkBufferUsageFlagBits2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public const ulong BufferUsage2PreprocessBufferBitEXT = 0x80000000UL;

    [NativeTypeName("const VkAccessFlagBits3KHR")]
    [SupportedApiProfile("vulkan")]
    public const ulong Access3NoneKHR = 0UL;

    [NativeTypeName("const VkPhysicalDeviceSchedulingControlsFlagBitsARM")]
    [SupportedApiProfile("vulkan")]
    public const ulong PhysicalDeviceSchedulingControlsShaderCoreCountARM = 0x00000001UL;

    [NativeTypeName("const VkMemoryDecompressionMethodFlagBitsNV")]
    [SupportedApiProfile("vulkan")]
    public const ulong MemoryDecompressionMethodGdeflate1X0BitNV = 0x00000001UL;

    [NativeTypeName("#define VULKAN_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanH = 1;

    [NativeTypeName("#define VULKAN_CORE_H_ 1")]
    [SupportedApiProfile("vulkan")]
    public const int VulkanCoreH = 1;

    [NativeTypeName("#define VK_USE_64_BIT_PTR_DEFINES 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const int Use64BitPtrDefines = 1;

    [NativeTypeName("#define VK_API_VERSION_1_0 VK_MAKE_API_VERSION(0, 1, 0, 0)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint ApiVersion1X0 = (
        (((uint)(0)) << 29U) | (((uint)(1)) << 22U) | (((uint)(0)) << 12U) | ((uint)(0))
    );

    [NativeTypeName("#define VK_HEADER_VERSION 315")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const int HeaderVersion = 315;

    [NativeTypeName(
        "#define VK_HEADER_VERSION_COMPLETE VK_MAKE_API_VERSION(0, 1, 4, VK_HEADER_VERSION)"
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    public const uint HeaderVersionComplete = (
        (((uint)(0)) << 29U) | (((uint)(1)) << 22U) | (((uint)(4)) << 12U) | ((uint)(315))
    );

    [NativeTypeName("#define VK_API_VERSION_1_1 VK_MAKE_API_VERSION(0, 1, 1, 0)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    public const uint ApiVersion1X1 = (
        (((uint)(0)) << 29U) | (((uint)(1)) << 22U) | (((uint)(1)) << 12U) | ((uint)(0))
    );

    [NativeTypeName("#define VK_API_VERSION_1_2 VK_MAKE_API_VERSION(0, 1, 2, 0)")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    public const uint ApiVersion1X2 = (
        (((uint)(0)) << 29U) | (((uint)(1)) << 22U) | (((uint)(2)) << 12U) | ((uint)(0))
    );

    [NativeTypeName("#define VK_API_VERSION_1_3 VK_MAKE_API_VERSION(0, 1, 3, 0)")]
    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    public const uint ApiVersion1X3 = (
        (((uint)(0)) << 29U) | (((uint)(1)) << 22U) | (((uint)(3)) << 12U) | ((uint)(0))
    );

    [NativeTypeName("#define VK_API_VERSION_1_4 VK_MAKE_API_VERSION(0, 1, 4, 0)")]
    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    public const uint ApiVersion1X4 = (
        (((uint)(0)) << 29U) | (((uint)(1)) << 22U) | (((uint)(4)) << 12U) | ((uint)(0))
    );

    [NativeTypeName("#define VK_KHR_SURFACE_SPEC_VERSION 25")]
    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    public const int KhrSurfaceSpecVersion = 25;

    [NativeTypeName("#define VK_KHR_SURFACE_EXTENSION_NAME \"VK_KHR_surface\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    public static Utf8String KhrSurfaceExtensionName => "VK_KHR_surface"u8;

    [NativeTypeName("#define VK_KHR_SWAPCHAIN_SPEC_VERSION 70")]
    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    public const int KhrSwapchainSpecVersion = 70;

    [NativeTypeName("#define VK_KHR_SWAPCHAIN_EXTENSION_NAME \"VK_KHR_swapchain\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    public static Utf8String KhrSwapchainExtensionName => "VK_KHR_swapchain"u8;

    [NativeTypeName("#define VK_KHR_DISPLAY_SPEC_VERSION 23")]
    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    public const int KhrDisplaySpecVersion = 23;

    [NativeTypeName("#define VK_KHR_DISPLAY_EXTENSION_NAME \"VK_KHR_display\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    public static Utf8String KhrDisplayExtensionName => "VK_KHR_display"u8;

    [NativeTypeName("#define VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION 10")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_display_swapchain"],
        ImpliesSets = ["VK_KHR_display", "VK_KHR_swapchain"]
    )]
    public const int KhrDisplaySwapchainSpecVersion = 10;

    [NativeTypeName("#define VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME \"VK_KHR_display_swapchain\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_display_swapchain"],
        ImpliesSets = ["VK_KHR_display", "VK_KHR_swapchain"]
    )]
    public static Utf8String KhrDisplaySwapchainExtensionName => "VK_KHR_display_swapchain"u8;

    [NativeTypeName("#define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION 3")]
    [SupportedApiProfile("vulkan", ["VK_KHR_sampler_mirror_clamp_to_edge"])]
    public const int KhrSamplerMirrorClampToEdgeSpecVersion = 3;

    [NativeTypeName(
        "#define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME \"VK_KHR_sampler_mirror_clamp_to_edge\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_sampler_mirror_clamp_to_edge"])]
    public static Utf8String KhrSamplerMirrorClampToEdgeExtensionName =>
        "VK_KHR_sampler_mirror_clamp_to_edge"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_QUEUE_SPEC_VERSION 8")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    public const int KhrVideoQueueSpecVersion = 8;

    [NativeTypeName("#define VK_KHR_VIDEO_QUEUE_EXTENSION_NAME \"VK_KHR_video_queue\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    public static Utf8String KhrVideoQueueExtensionName => "VK_KHR_video_queue"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION 8")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public const int KhrVideoDecodeQueueSpecVersion = 8;

    [NativeTypeName(
        "#define VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME \"VK_KHR_video_decode_queue\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String KhrVideoDecodeQueueExtensionName => "VK_KHR_video_decode_queue"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_H264_SPEC_VERSION 14")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_h264"],
        ImpliesSets = ["VK_KHR_video_encode_queue"]
    )]
    public const int KhrVideoEncodeH264SpecVersion = 14;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_H264_EXTENSION_NAME \"VK_KHR_video_encode_h264\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_h264"],
        ImpliesSets = ["VK_KHR_video_encode_queue"]
    )]
    public static Utf8String KhrVideoEncodeH264ExtensionName => "VK_KHR_video_encode_h264"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_H265_SPEC_VERSION 14")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_h265"],
        ImpliesSets = ["VK_KHR_video_encode_queue"]
    )]
    public const int KhrVideoEncodeH265SpecVersion = 14;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_H265_EXTENSION_NAME \"VK_KHR_video_encode_h265\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_h265"],
        ImpliesSets = ["VK_KHR_video_encode_queue"]
    )]
    public static Utf8String KhrVideoEncodeH265ExtensionName => "VK_KHR_video_encode_h265"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION 9")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_h264"],
        ImpliesSets = ["VK_KHR_video_decode_queue"]
    )]
    public const int KhrVideoDecodeH264SpecVersion = 9;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME \"VK_KHR_video_decode_h264\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_h264"],
        ImpliesSets = ["VK_KHR_video_decode_queue"]
    )]
    public static Utf8String KhrVideoDecodeH264ExtensionName => "VK_KHR_video_decode_h264"u8;

    [NativeTypeName("#define VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const int KhrDynamicRenderingSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME \"VK_KHR_dynamic_rendering\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrDynamicRenderingExtensionName => "VK_KHR_dynamic_rendering"u8;

    [NativeTypeName("#define VK_KHR_MULTIVIEW_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_multiview"],
        ImpliesSets = [
            "VK_KHR_multiview+VK_KHR_get_physical_device_properties2",
            "VK_KHR_multiview+VK_VERSION_1_1",
        ]
    )]
    public const int KhrMultiviewSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MULTIVIEW_EXTENSION_NAME \"VK_KHR_multiview\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_multiview"],
        ImpliesSets = [
            "VK_KHR_multiview+VK_KHR_get_physical_device_properties2",
            "VK_KHR_multiview+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrMultiviewExtensionName => "VK_KHR_multiview"u8;

    [NativeTypeName("#define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    public const int KhrGetPhysicalDeviceProperties2SpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME \"VK_KHR_get_physical_device_properties2\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    public static Utf8String KhrGetPhysicalDeviceProperties2ExtensionName =>
        "VK_KHR_get_physical_device_properties2"u8;

    [NativeTypeName("#define VK_KHR_DEVICE_GROUP_SPEC_VERSION 4")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    public const int KhrDeviceGroupSpecVersion = 4;

    [NativeTypeName("#define VK_KHR_DEVICE_GROUP_EXTENSION_NAME \"VK_KHR_device_group\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    public static Utf8String KhrDeviceGroupExtensionName => "VK_KHR_device_group"u8;

    [NativeTypeName("#define VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_draw_parameters"])]
    public const int KhrShaderDrawParametersSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME \"VK_KHR_shader_draw_parameters\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_draw_parameters"])]
    public static Utf8String KhrShaderDrawParametersExtensionName =>
        "VK_KHR_shader_draw_parameters"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_1_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance1"])]
    public const int KhrMaintenance1SpecVersion = 2;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_1_EXTENSION_NAME \"VK_KHR_maintenance1\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance1"])]
    public static Utf8String KhrMaintenance1ExtensionName => "VK_KHR_maintenance1"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE1_SPEC_VERSION VK_KHR_MAINTENANCE_1_SPEC_VERSION")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance1"])]
    public const int KhrMaintenance1SpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_MAINTENANCE1_EXTENSION_NAME VK_KHR_MAINTENANCE_1_EXTENSION_NAME"
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance1"])]
    public static Utf8String KhrMaintenance1ExtensionName => "VK_KHR_maintenance1"u8;

    [NativeTypeName("#define VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
    public const int KhrDeviceGroupCreationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME \"VK_KHR_device_group_creation\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
    public static Utf8String KhrDeviceGroupCreationExtensionName =>
        "VK_KHR_device_group_creation"u8;

    [NativeTypeName("#define VK_MAX_DEVICE_GROUP_SIZE_KHR VK_MAX_DEVICE_GROUP_SIZE")]
    [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
    public const uint MaxDeviceGroupSizeKHR = 32U;

    [NativeTypeName("#define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
        ]
    )]
    public const int KhrExternalMemoryCapabilitiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME \"VK_KHR_external_memory_capabilities\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrExternalMemoryCapabilitiesExtensionName =>
        "VK_KHR_external_memory_capabilities"u8;

    [NativeTypeName("#define VK_LUID_SIZE_KHR VK_LUID_SIZE")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
        ]
    )]
    public const uint LuidSizeKHR = 8U;

    [NativeTypeName("#define VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory"],
        ImpliesSets = [
            "VK_KHR_external_memory+VK_KHR_external_memory_capabilities",
            "VK_KHR_external_memory+VK_VERSION_1_1",
        ]
    )]
    public const int KhrExternalMemorySpecVersion = 1;

    [NativeTypeName("#define VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME \"VK_KHR_external_memory\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory"],
        ImpliesSets = [
            "VK_KHR_external_memory+VK_KHR_external_memory_capabilities",
            "VK_KHR_external_memory+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrExternalMemoryExtensionName => "VK_KHR_external_memory"u8;

    [NativeTypeName("#define VK_QUEUE_FAMILY_EXTERNAL_KHR VK_QUEUE_FAMILY_EXTERNAL")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory"],
        ImpliesSets = [
            "VK_KHR_external_memory+VK_KHR_external_memory_capabilities",
            "VK_KHR_external_memory+VK_VERSION_1_1",
        ]
    )]
    public const uint QueueFamilyExternalKHR = (~1U);

    [NativeTypeName("#define VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    public const int KhrExternalMemoryFdSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME \"VK_KHR_external_memory_fd\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrExternalMemoryFdExtensionName => "VK_KHR_external_memory_fd"u8;

    [NativeTypeName("#define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_semaphore_capabilities+VK_VERSION_1_1",
        ]
    )]
    public const int KhrExternalSemaphoreCapabilitiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME \"VK_KHR_external_semaphore_capabilities\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_semaphore_capabilities+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrExternalSemaphoreCapabilitiesExtensionName =>
        "VK_KHR_external_semaphore_capabilities"u8;

    [NativeTypeName("#define VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore"],
        ImpliesSets = ["VK_KHR_external_semaphore_capabilities"]
    )]
    public const int KhrExternalSemaphoreSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME \"VK_KHR_external_semaphore\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore"],
        ImpliesSets = ["VK_KHR_external_semaphore_capabilities"]
    )]
    public static Utf8String KhrExternalSemaphoreExtensionName => "VK_KHR_external_semaphore"u8;

    [NativeTypeName("#define VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    public const int KhrExternalSemaphoreFdSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME \"VK_KHR_external_semaphore_fd\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrExternalSemaphoreFdExtensionName =>
        "VK_KHR_external_semaphore_fd"u8;

    [NativeTypeName("#define VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_push_descriptor"],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    public const int KhrPushDescriptorSpecVersion = 2;

    [NativeTypeName("#define VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME \"VK_KHR_push_descriptor\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_push_descriptor"],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrPushDescriptorExtensionName => "VK_KHR_push_descriptor"u8;

    [NativeTypeName("#define VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_float16_int8"],
        ImpliesSets = [
            "VK_KHR_shader_float16_int8+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_float16_int8+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderFloat16Int8SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME \"VK_KHR_shader_float16_int8\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_float16_int8"],
        ImpliesSets = [
            "VK_KHR_shader_float16_int8+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_float16_int8+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderFloat16Int8ExtensionName => "VK_KHR_shader_float16_int8"u8;

    [NativeTypeName("#define VK_KHR_16BIT_STORAGE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_16bit_storage"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class",
            "VK_VERSION_1_1",
        ]
    )]
    public const int Khr16BitStorageSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_16BIT_STORAGE_EXTENSION_NAME \"VK_KHR_16bit_storage\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_16bit_storage"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String Khr16BitStorageExtensionName => "VK_KHR_16bit_storage"u8;

    [NativeTypeName("#define VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_incremental_present"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    public const int KhrIncrementalPresentSpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME \"VK_KHR_incremental_present\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_incremental_present"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    public static Utf8String KhrIncrementalPresentExtensionName => "VK_KHR_incremental_present"u8;

    [NativeTypeName("#define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    public const int KhrDescriptorUpdateTemplateSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME \"VK_KHR_descriptor_update_template\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    public static Utf8String KhrDescriptorUpdateTemplateExtensionName =>
        "VK_KHR_descriptor_update_template"u8;

    [NativeTypeName("#define VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_imageless_framebuffer"],
        ImpliesSets = [
            "VK_KHR_image_format_list+VK_KHR_get_physical_device_properties2+VK_KHR_maintenance2",
            "VK_KHR_image_format_list+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const int KhrImagelessFramebufferSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME \"VK_KHR_imageless_framebuffer\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_imageless_framebuffer"],
        ImpliesSets = [
            "VK_KHR_image_format_list+VK_KHR_get_physical_device_properties2+VK_KHR_maintenance2",
            "VK_KHR_image_format_list+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrImagelessFramebufferExtensionName =>
        "VK_KHR_imageless_framebuffer"u8;

    [NativeTypeName("#define VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    public const int KhrCreateRenderpass2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME \"VK_KHR_create_renderpass2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    public static Utf8String KhrCreateRenderpass2ExtensionName => "VK_KHR_create_renderpass2"u8;

    [NativeTypeName("#define VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shared_presentable_image"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_VERSION_1_1",
        ]
    )]
    public const int KhrSharedPresentableImageSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME \"VK_KHR_shared_presentable_image\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shared_presentable_image"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrSharedPresentableImageExtensionName =>
        "VK_KHR_shared_presentable_image"u8;

    [NativeTypeName("#define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_fence_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_fence_capabilities+VK_VERSION_1_1",
        ]
    )]
    public const int KhrExternalFenceCapabilitiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME \"VK_KHR_external_fence_capabilities\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_fence_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_fence_capabilities+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrExternalFenceCapabilitiesExtensionName =>
        "VK_KHR_external_fence_capabilities"u8;

    [NativeTypeName("#define VK_KHR_EXTERNAL_FENCE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence"],
        ImpliesSets = ["VK_KHR_external_fence_capabilities"]
    )]
    public const int KhrExternalFenceSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME \"VK_KHR_external_fence\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence"],
        ImpliesSets = ["VK_KHR_external_fence_capabilities"]
    )]
    public static Utf8String KhrExternalFenceExtensionName => "VK_KHR_external_fence"u8;

    [NativeTypeName("#define VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    public const int KhrExternalFenceFdSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME \"VK_KHR_external_fence_fd\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrExternalFenceFdExtensionName => "VK_KHR_external_fence_fd"u8;

    [NativeTypeName("#define VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    public const int KhrPerformanceQuerySpecVersion = 1;

    [NativeTypeName("#define VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME \"VK_KHR_performance_query\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrPerformanceQueryExtensionName => "VK_KHR_performance_query"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_2_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance2"])]
    public const int KhrMaintenance2SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_2_EXTENSION_NAME \"VK_KHR_maintenance2\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance2"])]
    public static Utf8String KhrMaintenance2ExtensionName => "VK_KHR_maintenance2"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE2_SPEC_VERSION VK_KHR_MAINTENANCE_2_SPEC_VERSION")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance2"])]
    public const int KhrMaintenance2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_MAINTENANCE2_EXTENSION_NAME VK_KHR_MAINTENANCE_2_EXTENSION_NAME"
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance2"])]
    public static Utf8String KhrMaintenance2ExtensionName => "VK_KHR_maintenance2"u8;

    [NativeTypeName("#define VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    public const int KhrGetSurfaceCapabilities2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME \"VK_KHR_get_surface_capabilities2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    public static Utf8String KhrGetSurfaceCapabilities2ExtensionName =>
        "VK_KHR_get_surface_capabilities2"u8;

    [NativeTypeName("#define VK_KHR_VARIABLE_POINTERS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_variable_pointers"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class",
            "VK_VERSION_1_1",
        ]
    )]
    public const int KhrVariablePointersSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME \"VK_KHR_variable_pointers\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_variable_pointers"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrVariablePointersExtensionName => "VK_KHR_variable_pointers"u8;

    [NativeTypeName("#define VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    public const int KhrGetDisplayProperties2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME \"VK_KHR_get_display_properties2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    public static Utf8String KhrGetDisplayProperties2ExtensionName =>
        "VK_KHR_get_display_properties2"u8;

    [NativeTypeName("#define VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dedicated_allocation"],
        ImpliesSets = [
            "VK_KHR_dedicated_allocation+VK_KHR_get_memory_requirements2",
            "VK_KHR_dedicated_allocation+VK_VERSION_1_1",
        ]
    )]
    public const int KhrDedicatedAllocationSpecVersion = 3;

    [NativeTypeName(
        "#define VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME \"VK_KHR_dedicated_allocation\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dedicated_allocation"],
        ImpliesSets = [
            "VK_KHR_dedicated_allocation+VK_KHR_get_memory_requirements2",
            "VK_KHR_dedicated_allocation+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrDedicatedAllocationExtensionName => "VK_KHR_dedicated_allocation"u8;

    [NativeTypeName("#define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_storage_buffer_storage_class"])]
    public const int KhrStorageBufferStorageClassSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME \"VK_KHR_storage_buffer_storage_class\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_storage_buffer_storage_class"])]
    public static Utf8String KhrStorageBufferStorageClassExtensionName =>
        "VK_KHR_storage_buffer_storage_class"u8;

    [NativeTypeName("#define VK_KHR_SHADER_BFLOAT16_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_bfloat16"],
        ImpliesSets = [
            "VK_KHR_shader_bfloat16+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_bfloat16+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderBfloat16SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_SHADER_BFLOAT16_EXTENSION_NAME \"VK_KHR_shader_bfloat16\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_bfloat16"],
        ImpliesSets = [
            "VK_KHR_shader_bfloat16+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_bfloat16+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderBfloat16ExtensionName => "VK_KHR_shader_bfloat16"u8;

    [NativeTypeName("#define VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_relaxed_block_layout"])]
    public const int KhrRelaxedBlockLayoutSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME \"VK_KHR_relaxed_block_layout\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_relaxed_block_layout"])]
    public static Utf8String KhrRelaxedBlockLayoutExtensionName => "VK_KHR_relaxed_block_layout"u8;

    [NativeTypeName("#define VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    public const int KhrGetMemoryRequirements2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME \"VK_KHR_get_memory_requirements2\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    public static Utf8String KhrGetMemoryRequirements2ExtensionName =>
        "VK_KHR_get_memory_requirements2"u8;

    [NativeTypeName("#define VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_image_format_list"])]
    public const int KhrImageFormatListSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME \"VK_KHR_image_format_list\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_image_format_list"])]
    public static Utf8String KhrImageFormatListExtensionName => "VK_KHR_image_format_list"u8;

    [NativeTypeName("#define VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION 14")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public const int KhrSamplerYcbcrConversionSpecVersion = 14;

    [NativeTypeName(
        "#define VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME \"VK_KHR_sampler_ycbcr_conversion\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrSamplerYcbcrConversionExtensionName =>
        "VK_KHR_sampler_ycbcr_conversion"u8;

    [NativeTypeName("#define VK_KHR_BIND_MEMORY_2_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    public const int KhrBindMemory2SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_BIND_MEMORY_2_EXTENSION_NAME \"VK_KHR_bind_memory2\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    public static Utf8String KhrBindMemory2ExtensionName => "VK_KHR_bind_memory2"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_3_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance3"],
        ImpliesSets = [
            "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
            "VK_KHR_maintenance3+VK_VERSION_1_1",
        ]
    )]
    public const int KhrMaintenance3SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_3_EXTENSION_NAME \"VK_KHR_maintenance3\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance3"],
        ImpliesSets = [
            "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
            "VK_KHR_maintenance3+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrMaintenance3ExtensionName => "VK_KHR_maintenance3"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE3_SPEC_VERSION VK_KHR_MAINTENANCE_3_SPEC_VERSION")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance3"],
        ImpliesSets = [
            "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
            "VK_KHR_maintenance3+VK_VERSION_1_1",
        ]
    )]
    public const int KhrMaintenance3SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_MAINTENANCE3_EXTENSION_NAME VK_KHR_MAINTENANCE_3_EXTENSION_NAME"
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance3"],
        ImpliesSets = [
            "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
            "VK_KHR_maintenance3+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrMaintenance3ExtensionName => "VK_KHR_maintenance3"u8;

    [NativeTypeName("#define VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
    public const int KhrDrawIndirectCountSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME \"VK_KHR_draw_indirect_count\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
    public static Utf8String KhrDrawIndirectCountExtensionName => "VK_KHR_draw_indirect_count"u8;

    [NativeTypeName("#define VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_subgroup_extended_types"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public const int KhrShaderSubgroupExtendedTypesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME \"VK_KHR_shader_subgroup_extended_types\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_subgroup_extended_types"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public static Utf8String KhrShaderSubgroupExtendedTypesExtensionName =>
        "VK_KHR_shader_subgroup_extended_types"u8;

    [NativeTypeName("#define VK_KHR_8BIT_STORAGE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_8bit_storage"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class",
            "VK_VERSION_1_1",
        ]
    )]
    public const int Khr8BitStorageSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_8BIT_STORAGE_EXTENSION_NAME \"VK_KHR_8bit_storage\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_8bit_storage"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String Khr8BitStorageExtensionName => "VK_KHR_8bit_storage"u8;

    [NativeTypeName("#define VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_atomic_int64"],
        ImpliesSets = [
            "VK_KHR_shader_atomic_int64+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_atomic_int64+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderAtomicInt64SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME \"VK_KHR_shader_atomic_int64\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_atomic_int64"],
        ImpliesSets = [
            "VK_KHR_shader_atomic_int64+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_atomic_int64+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderAtomicInt64ExtensionName => "VK_KHR_shader_atomic_int64"u8;

    [NativeTypeName("#define VK_KHR_SHADER_CLOCK_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_clock"],
        ImpliesSets = [
            "VK_KHR_shader_clock+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_clock+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderClockSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_SHADER_CLOCK_EXTENSION_NAME \"VK_KHR_shader_clock\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_clock"],
        ImpliesSets = [
            "VK_KHR_shader_clock+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_clock+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderClockExtensionName => "VK_KHR_shader_clock"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION 8")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_h265"],
        ImpliesSets = ["VK_KHR_video_decode_queue"]
    )]
    public const int KhrVideoDecodeH265SpecVersion = 8;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME \"VK_KHR_video_decode_h265\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_h265"],
        ImpliesSets = ["VK_KHR_video_decode_queue"]
    )]
    public static Utf8String KhrVideoDecodeH265ExtensionName => "VK_KHR_video_decode_h265"u8;

    [NativeTypeName("#define VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_global_priority"],
        ImpliesSets = [
            "VK_KHR_global_priority+VK_KHR_get_physical_device_properties2",
            "VK_KHR_global_priority+VK_VERSION_1_1",
        ]
    )]
    public const int KhrGlobalPrioritySpecVersion = 1;

    [NativeTypeName("#define VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME \"VK_KHR_global_priority\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_global_priority"],
        ImpliesSets = [
            "VK_KHR_global_priority+VK_KHR_get_physical_device_properties2",
            "VK_KHR_global_priority+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrGlobalPriorityExtensionName => "VK_KHR_global_priority"u8;

    [NativeTypeName("#define VK_MAX_GLOBAL_PRIORITY_SIZE_KHR VK_MAX_GLOBAL_PRIORITY_SIZE")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_global_priority"],
        ImpliesSets = [
            "VK_KHR_global_priority+VK_KHR_get_physical_device_properties2",
            "VK_KHR_global_priority+VK_VERSION_1_1",
        ]
    )]
    public const uint MaxGlobalPrioritySizeKHR = 16U;

    [NativeTypeName("#define VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_driver_properties"],
        ImpliesSets = [
            "VK_KHR_driver_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_driver_properties+VK_VERSION_1_1",
        ]
    )]
    public const int KhrDriverPropertiesSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME \"VK_KHR_driver_properties\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_driver_properties"],
        ImpliesSets = [
            "VK_KHR_driver_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_driver_properties+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrDriverPropertiesExtensionName => "VK_KHR_driver_properties"u8;

    [NativeTypeName("#define VK_MAX_DRIVER_NAME_SIZE_KHR VK_MAX_DRIVER_NAME_SIZE")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_driver_properties"],
        ImpliesSets = [
            "VK_KHR_driver_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_driver_properties+VK_VERSION_1_1",
        ]
    )]
    public const uint MaxDriverNameSizeKHR = 256U;

    [NativeTypeName("#define VK_MAX_DRIVER_INFO_SIZE_KHR VK_MAX_DRIVER_INFO_SIZE")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_driver_properties"],
        ImpliesSets = [
            "VK_KHR_driver_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_driver_properties+VK_VERSION_1_1",
        ]
    )]
    public const uint MaxDriverInfoSizeKHR = 256U;

    [NativeTypeName("#define VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION 4")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_float_controls"],
        ImpliesSets = [
            "VK_KHR_shader_float_controls+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_float_controls+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderFloatControlsSpecVersion = 4;

    [NativeTypeName(
        "#define VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME \"VK_KHR_shader_float_controls\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_float_controls"],
        ImpliesSets = [
            "VK_KHR_shader_float_controls+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_float_controls+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderFloatControlsExtensionName =>
        "VK_KHR_shader_float_controls"u8;

    [NativeTypeName("#define VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_depth_stencil_resolve"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_create_renderpass2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_2",
        ]
    )]
    public const int KhrDepthStencilResolveSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME \"VK_KHR_depth_stencil_resolve\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_depth_stencil_resolve"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_create_renderpass2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrDepthStencilResolveExtensionName =>
        "VK_KHR_depth_stencil_resolve"u8;

    [NativeTypeName("#define VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain_mutable_format"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_maintenance2+VK_KHR_image_format_list",
            "VK_KHR_swapchain+VK_KHR_maintenance2+VK_VERSION_1_2",
            "VK_KHR_swapchain+VK_VERSION_1_1+VK_KHR_image_format_list",
            "VK_KHR_swapchain+VK_VERSION_1_1+VK_VERSION_1_2",
        ]
    )]
    public const int KhrSwapchainMutableFormatSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME \"VK_KHR_swapchain_mutable_format\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain_mutable_format"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_maintenance2+VK_KHR_image_format_list",
            "VK_KHR_swapchain+VK_KHR_maintenance2+VK_VERSION_1_2",
            "VK_KHR_swapchain+VK_VERSION_1_1+VK_KHR_image_format_list",
            "VK_KHR_swapchain+VK_VERSION_1_1+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrSwapchainMutableFormatExtensionName =>
        "VK_KHR_swapchain_mutable_format"u8;

    [NativeTypeName("#define VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    public const int KhrTimelineSemaphoreSpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME \"VK_KHR_timeline_semaphore\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrTimelineSemaphoreExtensionName => "VK_KHR_timeline_semaphore"u8;

    [NativeTypeName("#define VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_vulkan_memory_model"],
        ImpliesSets = [
            "VK_KHR_vulkan_memory_model+VK_KHR_get_physical_device_properties2",
            "VK_KHR_vulkan_memory_model+VK_VERSION_1_1",
        ]
    )]
    public const int KhrVulkanMemoryModelSpecVersion = 3;

    [NativeTypeName(
        "#define VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME \"VK_KHR_vulkan_memory_model\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_vulkan_memory_model"],
        ImpliesSets = [
            "VK_KHR_vulkan_memory_model+VK_KHR_get_physical_device_properties2",
            "VK_KHR_vulkan_memory_model+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrVulkanMemoryModelExtensionName => "VK_KHR_vulkan_memory_model"u8;

    [NativeTypeName("#define VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_terminate_invocation"],
        ImpliesSets = [
            "VK_KHR_shader_terminate_invocation+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_terminate_invocation+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderTerminateInvocationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME \"VK_KHR_shader_terminate_invocation\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_terminate_invocation"],
        ImpliesSets = [
            "VK_KHR_shader_terminate_invocation+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_terminate_invocation+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderTerminateInvocationExtensionName =>
        "VK_KHR_shader_terminate_invocation"u8;

    [NativeTypeName("#define VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const int KhrFragmentShadingRateSpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME \"VK_KHR_fragment_shading_rate\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrFragmentShadingRateExtensionName =>
        "VK_KHR_fragment_shading_rate"u8;

    [NativeTypeName("#define VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    public const int KhrDynamicRenderingLocalReadSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_EXTENSION_NAME \"VK_KHR_dynamic_rendering_local_read\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String KhrDynamicRenderingLocalReadExtensionName =>
        "VK_KHR_dynamic_rendering_local_read"u8;

    [NativeTypeName("#define VK_KHR_SHADER_QUAD_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_quad_control"],
        ImpliesSets = [
            "VK_KHR_shader_maximal_reconvergence+VK_VERSION_1_1+VK_KHR_vulkan_memory_model",
            "VK_KHR_shader_maximal_reconvergence+VK_VERSION_1_2",
        ]
    )]
    public const int KhrShaderQuadControlSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_QUAD_CONTROL_EXTENSION_NAME \"VK_KHR_shader_quad_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_quad_control"],
        ImpliesSets = [
            "VK_KHR_shader_maximal_reconvergence+VK_VERSION_1_1+VK_KHR_vulkan_memory_model",
            "VK_KHR_shader_maximal_reconvergence+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrShaderQuadControlExtensionName => "VK_KHR_shader_quad_control"u8;

    [NativeTypeName("#define VK_KHR_SPIRV_1_4_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_spirv_1_4"],
        ImpliesSets = ["VK_KHR_shader_float_controls", "VK_VERSION_1_1"]
    )]
    public const int KhrSpirv1X4SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_SPIRV_1_4_EXTENSION_NAME \"VK_KHR_spirv_1_4\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_spirv_1_4"],
        ImpliesSets = ["VK_KHR_shader_float_controls", "VK_VERSION_1_1"]
    )]
    public static Utf8String KhrSpirv1X4ExtensionName => "VK_KHR_spirv_1_4"u8;

    [NativeTypeName("#define VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_surface_protected_capabilities"],
        ImpliesSets = ["VK_KHR_get_surface_capabilities2", "VK_VERSION_1_1"]
    )]
    public const int KhrSurfaceProtectedCapabilitiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME \"VK_KHR_surface_protected_capabilities\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_surface_protected_capabilities"],
        ImpliesSets = ["VK_KHR_get_surface_capabilities2", "VK_VERSION_1_1"]
    )]
    public static Utf8String KhrSurfaceProtectedCapabilitiesExtensionName =>
        "VK_KHR_surface_protected_capabilities"u8;

    [NativeTypeName("#define VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_separate_depth_stencil_layouts"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const int KhrSeparateDepthStencilLayoutsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME \"VK_KHR_separate_depth_stencil_layouts\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_separate_depth_stencil_layouts"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrSeparateDepthStencilLayoutsExtensionName =>
        "VK_KHR_separate_depth_stencil_layouts"u8;

    [NativeTypeName("#define VK_KHR_PRESENT_WAIT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_present_wait"],
        ImpliesSets = ["VK_KHR_present_id", "VK_KHR_swapchain"]
    )]
    public const int KhrPresentWaitSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_PRESENT_WAIT_EXTENSION_NAME \"VK_KHR_present_wait\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_present_wait"],
        ImpliesSets = ["VK_KHR_present_id", "VK_KHR_swapchain"]
    )]
    public static Utf8String KhrPresentWaitExtensionName => "VK_KHR_present_wait"u8;

    [NativeTypeName("#define VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_uniform_buffer_standard_layout"],
        ImpliesSets = [
            "VK_KHR_uniform_buffer_standard_layout+VK_KHR_get_physical_device_properties2",
            "VK_KHR_uniform_buffer_standard_layout+VK_VERSION_1_1",
        ]
    )]
    public const int KhrUniformBufferStandardLayoutSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME \"VK_KHR_uniform_buffer_standard_layout\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_uniform_buffer_standard_layout"],
        ImpliesSets = [
            "VK_KHR_uniform_buffer_standard_layout+VK_KHR_get_physical_device_properties2",
            "VK_KHR_uniform_buffer_standard_layout+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrUniformBufferStandardLayoutExtensionName =>
        "VK_KHR_uniform_buffer_standard_layout"u8;

    [NativeTypeName("#define VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    public const int KhrBufferDeviceAddressSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME \"VK_KHR_buffer_device_address\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrBufferDeviceAddressExtensionName =>
        "VK_KHR_buffer_device_address"u8;

    [NativeTypeName("#define VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION 4")]
    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    public const int KhrDeferredHostOperationsSpecVersion = 4;

    [NativeTypeName(
        "#define VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME \"VK_KHR_deferred_host_operations\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    public static Utf8String KhrDeferredHostOperationsExtensionName =>
        "VK_KHR_deferred_host_operations"u8;

    [NativeTypeName("#define VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    public const int KhrPipelineExecutablePropertiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME \"VK_KHR_pipeline_executable_properties\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrPipelineExecutablePropertiesExtensionName =>
        "VK_KHR_pipeline_executable_properties"u8;

    [NativeTypeName("#define VK_KHR_MAP_MEMORY_2_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    public const int KhrMapMemory2SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAP_MEMORY_2_EXTENSION_NAME \"VK_KHR_map_memory2\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    public static Utf8String KhrMapMemory2ExtensionName => "VK_KHR_map_memory2"u8;

    [NativeTypeName("#define VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_integer_dot_product"],
        ImpliesSets = [
            "VK_KHR_shader_integer_dot_product+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_integer_dot_product+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderIntegerDotProductSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME \"VK_KHR_shader_integer_dot_product\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_integer_dot_product"],
        ImpliesSets = [
            "VK_KHR_shader_integer_dot_product+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_integer_dot_product+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderIntegerDotProductExtensionName =>
        "VK_KHR_shader_integer_dot_product"u8;

    [NativeTypeName("#define VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_pipeline_library"])]
    public const int KhrPipelineLibrarySpecVersion = 1;

    [NativeTypeName("#define VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME \"VK_KHR_pipeline_library\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_pipeline_library"])]
    public static Utf8String KhrPipelineLibraryExtensionName => "VK_KHR_pipeline_library"u8;

    [NativeTypeName("#define VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_non_semantic_info"])]
    public const int KhrShaderNonSemanticInfoSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME \"VK_KHR_shader_non_semantic_info\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_non_semantic_info"])]
    public static Utf8String KhrShaderNonSemanticInfoExtensionName =>
        "VK_KHR_shader_non_semantic_info"u8;

    [NativeTypeName("#define VK_KHR_PRESENT_ID_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_present_id"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    public const int KhrPresentIdSpecVersion = 1;

    [NativeTypeName("#define VK_KHR_PRESENT_ID_EXTENSION_NAME \"VK_KHR_present_id\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_present_id"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrPresentIdExtensionName => "VK_KHR_present_id"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION 12")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public const int KhrVideoEncodeQueueSpecVersion = 12;

    [NativeTypeName(
        "#define VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME \"VK_KHR_video_encode_queue\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String KhrVideoEncodeQueueExtensionName => "VK_KHR_video_encode_queue"u8;

    [NativeTypeName("#define VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public const int KhrSynchronization2SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME \"VK_KHR_synchronization2\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrSynchronization2ExtensionName => "VK_KHR_synchronization2"u8;

    [NativeTypeName("#define VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shader_barycentric"],
        ImpliesSets = [
            "VK_KHR_fragment_shader_barycentric+VK_KHR_get_physical_device_properties2",
            "VK_KHR_fragment_shader_barycentric+VK_VERSION_1_1",
        ]
    )]
    public const int KhrFragmentShaderBarycentricSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME \"VK_KHR_fragment_shader_barycentric\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shader_barycentric"],
        ImpliesSets = [
            "VK_KHR_fragment_shader_barycentric+VK_KHR_get_physical_device_properties2",
            "VK_KHR_fragment_shader_barycentric+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrFragmentShaderBarycentricExtensionName =>
        "VK_KHR_fragment_shader_barycentric"u8;

    [NativeTypeName("#define VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_subgroup_uniform_control_flow"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public const int KhrShaderSubgroupUniformControlFlowSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME \"VK_KHR_shader_subgroup_uniform_control_flow\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_subgroup_uniform_control_flow"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public static Utf8String KhrShaderSubgroupUniformControlFlowExtensionName =>
        "VK_KHR_shader_subgroup_uniform_control_flow"u8;

    [NativeTypeName("#define VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_zero_initialize_workgroup_memory"],
        ImpliesSets = [
            "VK_KHR_zero_initialize_workgroup_memory+VK_KHR_get_physical_device_properties2",
            "VK_KHR_zero_initialize_workgroup_memory+VK_VERSION_1_1",
        ]
    )]
    public const int KhrZeroInitializeWorkgroupMemorySpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME \"VK_KHR_zero_initialize_workgroup_memory\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_zero_initialize_workgroup_memory"],
        ImpliesSets = [
            "VK_KHR_zero_initialize_workgroup_memory+VK_KHR_get_physical_device_properties2",
            "VK_KHR_zero_initialize_workgroup_memory+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrZeroInitializeWorkgroupMemoryExtensionName =>
        "VK_KHR_zero_initialize_workgroup_memory"u8;

    [NativeTypeName("#define VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_workgroup_memory_explicit_layout"],
        ImpliesSets = [
            "VK_KHR_workgroup_memory_explicit_layout+VK_KHR_get_physical_device_properties2",
            "VK_KHR_workgroup_memory_explicit_layout+VK_VERSION_1_1",
        ]
    )]
    public const int KhrWorkgroupMemoryExplicitLayoutSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME \"VK_KHR_workgroup_memory_explicit_layout\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_workgroup_memory_explicit_layout"],
        ImpliesSets = [
            "VK_KHR_workgroup_memory_explicit_layout+VK_KHR_get_physical_device_properties2",
            "VK_KHR_workgroup_memory_explicit_layout+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrWorkgroupMemoryExplicitLayoutExtensionName =>
        "VK_KHR_workgroup_memory_explicit_layout"u8;

    [NativeTypeName("#define VK_KHR_COPY_COMMANDS_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    public const int KhrCopyCommands2SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME \"VK_KHR_copy_commands2\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrCopyCommands2ExtensionName => "VK_KHR_copy_commands2"u8;

    [NativeTypeName("#define VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public const int KhrFormatFeatureFlags2SpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME \"VK_KHR_format_feature_flags2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_format_feature_flags2"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrFormatFeatureFlags2ExtensionName =>
        "VK_KHR_format_feature_flags2"u8;

    [NativeTypeName("#define VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_maintenance1"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public const int KhrRayTracingMaintenance1SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME \"VK_KHR_ray_tracing_maintenance1\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_maintenance1"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public static Utf8String KhrRayTracingMaintenance1ExtensionName =>
        "VK_KHR_ray_tracing_maintenance1"u8;

    [NativeTypeName("#define VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_portability_enumeration"])]
    public const int KhrPortabilityEnumerationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME \"VK_KHR_portability_enumeration\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_portability_enumeration"])]
    public static Utf8String KhrPortabilityEnumerationExtensionName =>
        "VK_KHR_portability_enumeration"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_4_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    public const int KhrMaintenance4SpecVersion = 2;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_4_EXTENSION_NAME \"VK_KHR_maintenance4\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    public static Utf8String KhrMaintenance4ExtensionName => "VK_KHR_maintenance4"u8;

    [NativeTypeName("#define VK_KHR_SHADER_SUBGROUP_ROTATE_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_subgroup_rotate"])]
    public const int KhrShaderSubgroupRotateSpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_SHADER_SUBGROUP_ROTATE_EXTENSION_NAME \"VK_KHR_shader_subgroup_rotate\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_subgroup_rotate"])]
    public static Utf8String KhrShaderSubgroupRotateExtensionName =>
        "VK_KHR_shader_subgroup_rotate"u8;

    [NativeTypeName("#define VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_maximal_reconvergence"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public const int KhrShaderMaximalReconvergenceSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_EXTENSION_NAME \"VK_KHR_shader_maximal_reconvergence\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_maximal_reconvergence"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public static Utf8String KhrShaderMaximalReconvergenceExtensionName =>
        "VK_KHR_shader_maximal_reconvergence"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_5_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public const int KhrMaintenance5SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_5_EXTENSION_NAME \"VK_KHR_maintenance5\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    public static Utf8String KhrMaintenance5ExtensionName => "VK_KHR_maintenance5"u8;

    [NativeTypeName("#define VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_position_fetch"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public const int KhrRayTracingPositionFetchSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME \"VK_KHR_ray_tracing_position_fetch\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_position_fetch"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public static Utf8String KhrRayTracingPositionFetchExtensionName =>
        "VK_KHR_ray_tracing_position_fetch"u8;

    [NativeTypeName("#define VK_KHR_PIPELINE_BINARY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    public const int KhrPipelineBinarySpecVersion = 1;

    [NativeTypeName("#define VK_KHR_PIPELINE_BINARY_EXTENSION_NAME \"VK_KHR_pipeline_binary\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    public static Utf8String KhrPipelineBinaryExtensionName => "VK_KHR_pipeline_binary"u8;

    [NativeTypeName("#define VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_cooperative_matrix"],
        ImpliesSets = [
            "VK_KHR_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_KHR_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    public const int KhrCooperativeMatrixSpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME \"VK_KHR_cooperative_matrix\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_cooperative_matrix"],
        ImpliesSets = [
            "VK_KHR_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_KHR_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrCooperativeMatrixExtensionName => "VK_KHR_cooperative_matrix"u8;

    [NativeTypeName("#define VK_KHR_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_compute_shader_derivatives"],
        ImpliesSets = [
            "VK_KHR_compute_shader_derivatives+VK_KHR_get_physical_device_properties2",
            "VK_KHR_compute_shader_derivatives+VK_VERSION_1_1",
        ]
    )]
    public const int KhrComputeShaderDerivativesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME \"VK_KHR_compute_shader_derivatives\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_compute_shader_derivatives"],
        ImpliesSets = [
            "VK_KHR_compute_shader_derivatives+VK_KHR_get_physical_device_properties2",
            "VK_KHR_compute_shader_derivatives+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrComputeShaderDerivativesExtensionName =>
        "VK_KHR_compute_shader_derivatives"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_AV1_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_av1"],
        ImpliesSets = ["VK_KHR_video_decode_queue"]
    )]
    public const int KhrVideoDecodeAv1SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_VIDEO_DECODE_AV1_EXTENSION_NAME \"VK_KHR_video_decode_av1\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_av1"],
        ImpliesSets = ["VK_KHR_video_decode_queue"]
    )]
    public static Utf8String KhrVideoDecodeAv1ExtensionName => "VK_KHR_video_decode_av1"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_AV1_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_av1"],
        ImpliesSets = ["VK_KHR_video_encode_queue"]
    )]
    public const int KhrVideoEncodeAv1SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_AV1_EXTENSION_NAME \"VK_KHR_video_encode_av1\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_av1"],
        ImpliesSets = ["VK_KHR_video_encode_queue"]
    )]
    public static Utf8String KhrVideoEncodeAv1ExtensionName => "VK_KHR_video_encode_av1"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_MAINTENANCE_1_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_maintenance1"],
        ImpliesSets = ["VK_KHR_video_queue"]
    )]
    public const int KhrVideoMaintenance1SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_VIDEO_MAINTENANCE_1_EXTENSION_NAME \"VK_KHR_video_maintenance1\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_maintenance1"],
        ImpliesSets = ["VK_KHR_video_queue"]
    )]
    public static Utf8String KhrVideoMaintenance1ExtensionName => "VK_KHR_video_maintenance1"u8;

    [NativeTypeName("#define VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_vertex_attribute_divisor"],
        ImpliesSets = [
            "VK_KHR_vertex_attribute_divisor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_vertex_attribute_divisor+VK_VERSION_1_1",
        ]
    )]
    public const int KhrVertexAttributeDivisorSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME \"VK_KHR_vertex_attribute_divisor\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_vertex_attribute_divisor"],
        ImpliesSets = [
            "VK_KHR_vertex_attribute_divisor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_vertex_attribute_divisor+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrVertexAttributeDivisorExtensionName =>
        "VK_KHR_vertex_attribute_divisor"u8;

    [NativeTypeName("#define VK_KHR_LOAD_STORE_OP_NONE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_load_store_op_none"])]
    public const int KhrLoadStoreOpNoneSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_LOAD_STORE_OP_NONE_EXTENSION_NAME \"VK_KHR_load_store_op_none\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_load_store_op_none"])]
    public static Utf8String KhrLoadStoreOpNoneExtensionName => "VK_KHR_load_store_op_none"u8;

    [NativeTypeName("#define VK_KHR_SHADER_FLOAT_CONTROLS_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_float_controls2"],
        ImpliesSets = ["VK_KHR_shader_float_controls", "VK_VERSION_1_1"]
    )]
    public const int KhrShaderFloatControls2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_FLOAT_CONTROLS_2_EXTENSION_NAME \"VK_KHR_shader_float_controls2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_float_controls2"],
        ImpliesSets = ["VK_KHR_shader_float_controls", "VK_VERSION_1_1"]
    )]
    public static Utf8String KhrShaderFloatControls2ExtensionName =>
        "VK_KHR_shader_float_controls2"u8;

    [NativeTypeName("#define VK_KHR_INDEX_TYPE_UINT8_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_index_type_uint8"],
        ImpliesSets = [
            "VK_KHR_index_type_uint8+VK_KHR_get_physical_device_properties2",
            "VK_KHR_index_type_uint8+VK_VERSION_1_1",
        ]
    )]
    public const int KhrIndexTypeUint8SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_INDEX_TYPE_UINT8_EXTENSION_NAME \"VK_KHR_index_type_uint8\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_index_type_uint8"],
        ImpliesSets = [
            "VK_KHR_index_type_uint8+VK_KHR_get_physical_device_properties2",
            "VK_KHR_index_type_uint8+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrIndexTypeUint8ExtensionName => "VK_KHR_index_type_uint8"u8;

    [NativeTypeName("#define VK_KHR_LINE_RASTERIZATION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_line_rasterization"],
        ImpliesSets = [
            "VK_KHR_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_KHR_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    public const int KhrLineRasterizationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME \"VK_KHR_line_rasterization\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_line_rasterization"],
        ImpliesSets = [
            "VK_KHR_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_KHR_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrLineRasterizationExtensionName => "VK_KHR_line_rasterization"u8;

    [NativeTypeName("#define VK_KHR_CALIBRATED_TIMESTAMPS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    public const int KhrCalibratedTimestampsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_CALIBRATED_TIMESTAMPS_EXTENSION_NAME \"VK_KHR_calibrated_timestamps\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrCalibratedTimestampsExtensionName =>
        "VK_KHR_calibrated_timestamps"u8;

    [NativeTypeName("#define VK_KHR_SHADER_EXPECT_ASSUME_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_expect_assume"],
        ImpliesSets = [
            "VK_KHR_shader_expect_assume+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_expect_assume+VK_VERSION_1_1",
        ]
    )]
    public const int KhrShaderExpectAssumeSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_EXPECT_ASSUME_EXTENSION_NAME \"VK_KHR_shader_expect_assume\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shader_expect_assume"],
        ImpliesSets = [
            "VK_KHR_shader_expect_assume+VK_KHR_get_physical_device_properties2",
            "VK_KHR_shader_expect_assume+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrShaderExpectAssumeExtensionName => "VK_KHR_shader_expect_assume"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_6_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    public const int KhrMaintenance6SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_6_EXTENSION_NAME \"VK_KHR_maintenance6\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    public static Utf8String KhrMaintenance6ExtensionName => "VK_KHR_maintenance6"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_quantization_map"],
        ImpliesSets = [
            "VK_KHR_video_encode_queue+VK_KHR_format_feature_flags2",
            "VK_KHR_video_encode_queue+VK_VERSION_1_3",
        ]
    )]
    public const int KhrVideoEncodeQuantizationMapSpecVersion = 2;

    [NativeTypeName(
        "#define VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_EXTENSION_NAME \"VK_KHR_video_encode_quantization_map\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_quantization_map"],
        ImpliesSets = [
            "VK_KHR_video_encode_queue+VK_KHR_format_feature_flags2",
            "VK_KHR_video_encode_queue+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String KhrVideoEncodeQuantizationMapExtensionName =>
        "VK_KHR_video_encode_quantization_map"u8;

    [NativeTypeName("#define VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_relaxed_extended_instruction"])]
    public const int KhrShaderRelaxedExtendedInstructionSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_EXTENSION_NAME \"VK_KHR_shader_relaxed_extended_instruction\""
    )]
    [SupportedApiProfile("vulkan", ["VK_KHR_shader_relaxed_extended_instruction"])]
    public static Utf8String KhrShaderRelaxedExtendedInstructionExtensionName =>
        "VK_KHR_shader_relaxed_extended_instruction"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_7_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance7"], ImpliesSets = ["VK_VERSION_1_1"])]
    public const int KhrMaintenance7SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_7_EXTENSION_NAME \"VK_KHR_maintenance7\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance7"], ImpliesSets = ["VK_VERSION_1_1"])]
    public static Utf8String KhrMaintenance7ExtensionName => "VK_KHR_maintenance7"u8;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_8_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance8"], ImpliesSets = ["VK_VERSION_1_1"])]
    public const int KhrMaintenance8SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_MAINTENANCE_8_EXTENSION_NAME \"VK_KHR_maintenance8\"")]
    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance8"], ImpliesSets = ["VK_VERSION_1_1"])]
    public static Utf8String KhrMaintenance8ExtensionName => "VK_KHR_maintenance8"u8;

    [NativeTypeName("#define VK_KHR_VIDEO_MAINTENANCE_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_maintenance2"],
        ImpliesSets = ["VK_KHR_video_queue"]
    )]
    public const int KhrVideoMaintenance2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_VIDEO_MAINTENANCE_2_EXTENSION_NAME \"VK_KHR_video_maintenance2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_maintenance2"],
        ImpliesSets = ["VK_KHR_video_queue"]
    )]
    public static Utf8String KhrVideoMaintenance2ExtensionName => "VK_KHR_video_maintenance2"u8;

    [NativeTypeName("#define VK_KHR_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_depth_clamp_zero_one"],
        ImpliesSets = [
            "VK_KHR_depth_clamp_zero_one+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_clamp_zero_one+VK_VERSION_1_1",
        ]
    )]
    public const int KhrDepthClampZeroOneSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME \"VK_KHR_depth_clamp_zero_one\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_depth_clamp_zero_one"],
        ImpliesSets = [
            "VK_KHR_depth_clamp_zero_one+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_clamp_zero_one+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrDepthClampZeroOneExtensionName => "VK_KHR_depth_clamp_zero_one"u8;

    [NativeTypeName("#define VK_KHR_ROBUSTNESS_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_robustness2"],
        ImpliesSets = [
            "VK_KHR_robustness2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_robustness2+VK_VERSION_1_1",
        ]
    )]
    public const int KhrRobustness2SpecVersion = 1;

    [NativeTypeName("#define VK_KHR_ROBUSTNESS_2_EXTENSION_NAME \"VK_KHR_robustness2\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_robustness2"],
        ImpliesSets = [
            "VK_KHR_robustness2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_robustness2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String KhrRobustness2ExtensionName => "VK_KHR_robustness2"u8;

    [NativeTypeName("#define VK_EXT_DEBUG_REPORT_SPEC_VERSION 10")]
    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    public const int ExtDebugReportSpecVersion = 10;

    [NativeTypeName("#define VK_EXT_DEBUG_REPORT_EXTENSION_NAME \"VK_EXT_debug_report\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    public static Utf8String ExtDebugReportExtensionName => "VK_EXT_debug_report"u8;

    [NativeTypeName("#define VK_NV_GLSL_SHADER_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_glsl_shader"])]
    public const int NvGlslShaderSpecVersion = 1;

    [NativeTypeName("#define VK_NV_GLSL_SHADER_EXTENSION_NAME \"VK_NV_glsl_shader\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_glsl_shader"])]
    public static Utf8String NvGlslShaderExtensionName => "VK_NV_glsl_shader"u8;

    [NativeTypeName("#define VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_depth_range_unrestricted"])]
    public const int ExtDepthRangeUnrestrictedSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME \"VK_EXT_depth_range_unrestricted\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_depth_range_unrestricted"])]
    public static Utf8String ExtDepthRangeUnrestrictedExtensionName =>
        "VK_EXT_depth_range_unrestricted"u8;

    [NativeTypeName("#define VK_IMG_FILTER_CUBIC_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_IMG_filter_cubic"])]
    public const int ImgFilterCubicSpecVersion = 1;

    [NativeTypeName("#define VK_IMG_FILTER_CUBIC_EXTENSION_NAME \"VK_IMG_filter_cubic\"")]
    [SupportedApiProfile("vulkan", ["VK_IMG_filter_cubic"])]
    public static Utf8String ImgFilterCubicExtensionName => "VK_IMG_filter_cubic"u8;

    [NativeTypeName("#define VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_rasterization_order"])]
    public const int AmdRasterizationOrderSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME \"VK_AMD_rasterization_order\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_rasterization_order"])]
    public static Utf8String AmdRasterizationOrderExtensionName => "VK_AMD_rasterization_order"u8;

    [NativeTypeName("#define VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_trinary_minmax"])]
    public const int AmdShaderTrinaryMinmaxSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME \"VK_AMD_shader_trinary_minmax\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_trinary_minmax"])]
    public static Utf8String AmdShaderTrinaryMinmaxExtensionName =>
        "VK_AMD_shader_trinary_minmax"u8;

    [NativeTypeName("#define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_explicit_vertex_parameter"])]
    public const int AmdShaderExplicitVertexParameterSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME \"VK_AMD_shader_explicit_vertex_parameter\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_explicit_vertex_parameter"])]
    public static Utf8String AmdShaderExplicitVertexParameterExtensionName =>
        "VK_AMD_shader_explicit_vertex_parameter"u8;

    [NativeTypeName("#define VK_EXT_DEBUG_MARKER_SPEC_VERSION 4")]
    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    public const int ExtDebugMarkerSpecVersion = 4;

    [NativeTypeName("#define VK_EXT_DEBUG_MARKER_EXTENSION_NAME \"VK_EXT_debug_marker\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    public static Utf8String ExtDebugMarkerExtensionName => "VK_EXT_debug_marker"u8;

    [NativeTypeName("#define VK_AMD_GCN_SHADER_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_gcn_shader"])]
    public const int AmdGcnShaderSpecVersion = 1;

    [NativeTypeName("#define VK_AMD_GCN_SHADER_EXTENSION_NAME \"VK_AMD_gcn_shader\"")]
    [SupportedApiProfile("vulkan", ["VK_AMD_gcn_shader"])]
    public static Utf8String AmdGcnShaderExtensionName => "VK_AMD_gcn_shader"u8;

    [NativeTypeName("#define VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_dedicated_allocation"])]
    public const int NvDedicatedAllocationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME \"VK_NV_dedicated_allocation\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_dedicated_allocation"])]
    public static Utf8String NvDedicatedAllocationExtensionName => "VK_NV_dedicated_allocation"u8;

    [NativeTypeName("#define VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    public const int ExtTransformFeedbackSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME \"VK_EXT_transform_feedback\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtTransformFeedbackExtensionName => "VK_EXT_transform_feedback"u8;

    [NativeTypeName("#define VK_NVX_BINARY_IMPORT_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    public const int NvxBinaryImportSpecVersion = 2;

    [NativeTypeName("#define VK_NVX_BINARY_IMPORT_EXTENSION_NAME \"VK_NVX_binary_import\"")]
    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    public static Utf8String NvxBinaryImportExtensionName => "VK_NVX_binary_import"u8;

    [NativeTypeName("#define VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION 3")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    public const int NvxImageViewHandleSpecVersion = 3;

    [NativeTypeName("#define VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME \"VK_NVX_image_view_handle\"")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    public static Utf8String NvxImageViewHandleExtensionName => "VK_NVX_image_view_handle"u8;

    [NativeTypeName("#define VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
    public const int AmdDrawIndirectCountSpecVersion = 2;

    [NativeTypeName(
        "#define VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME \"VK_AMD_draw_indirect_count\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
    public static Utf8String AmdDrawIndirectCountExtensionName => "VK_AMD_draw_indirect_count"u8;

    [NativeTypeName("#define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_negative_viewport_height"])]
    public const int AmdNegativeViewportHeightSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME \"VK_AMD_negative_viewport_height\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_negative_viewport_height"])]
    public static Utf8String AmdNegativeViewportHeightExtensionName =>
        "VK_AMD_negative_viewport_height"u8;

    [NativeTypeName("#define VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_AMD_gpu_shader_half_float"])]
    public const int AmdGpuShaderHalfFloatSpecVersion = 2;

    [NativeTypeName(
        "#define VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME \"VK_AMD_gpu_shader_half_float\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_gpu_shader_half_float"])]
    public static Utf8String AmdGpuShaderHalfFloatExtensionName => "VK_AMD_gpu_shader_half_float"u8;

    [NativeTypeName("#define VK_AMD_SHADER_BALLOT_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_ballot"])]
    public const int AmdShaderBallotSpecVersion = 1;

    [NativeTypeName("#define VK_AMD_SHADER_BALLOT_EXTENSION_NAME \"VK_AMD_shader_ballot\"")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_ballot"])]
    public static Utf8String AmdShaderBallotExtensionName => "VK_AMD_shader_ballot"u8;

    [NativeTypeName("#define VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_texture_gather_bias_lod"],
        ImpliesSets = [
            "VK_AMD_texture_gather_bias_lod+VK_KHR_get_physical_device_properties2",
            "VK_AMD_texture_gather_bias_lod+VK_VERSION_1_1",
        ]
    )]
    public const int AmdTextureGatherBiasLodSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME \"VK_AMD_texture_gather_bias_lod\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_texture_gather_bias_lod"],
        ImpliesSets = [
            "VK_AMD_texture_gather_bias_lod+VK_KHR_get_physical_device_properties2",
            "VK_AMD_texture_gather_bias_lod+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String AmdTextureGatherBiasLodExtensionName =>
        "VK_AMD_texture_gather_bias_lod"u8;

    [NativeTypeName("#define VK_AMD_SHADER_INFO_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_info"])]
    public const int AmdShaderInfoSpecVersion = 1;

    [NativeTypeName("#define VK_AMD_SHADER_INFO_EXTENSION_NAME \"VK_AMD_shader_info\"")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_info"])]
    public static Utf8String AmdShaderInfoExtensionName => "VK_AMD_shader_info"u8;

    [NativeTypeName("#define VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_image_load_store_lod"])]
    public const int AmdShaderImageLoadStoreLodSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME \"VK_AMD_shader_image_load_store_lod\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_image_load_store_lod"])]
    public static Utf8String AmdShaderImageLoadStoreLodExtensionName =>
        "VK_AMD_shader_image_load_store_lod"u8;

    [NativeTypeName("#define VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_corner_sampled_image"],
        ImpliesSets = [
            "VK_NV_corner_sampled_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_corner_sampled_image+VK_VERSION_1_1",
        ]
    )]
    public const int NvCornerSampledImageSpecVersion = 2;

    [NativeTypeName(
        "#define VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME \"VK_NV_corner_sampled_image\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_corner_sampled_image"],
        ImpliesSets = [
            "VK_NV_corner_sampled_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_corner_sampled_image+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvCornerSampledImageExtensionName => "VK_NV_corner_sampled_image"u8;

    [NativeTypeName("#define VK_IMG_FORMAT_PVRTC_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_IMG_format_pvrtc"])]
    public const int ImgFormatPvrtcSpecVersion = 1;

    [NativeTypeName("#define VK_IMG_FORMAT_PVRTC_EXTENSION_NAME \"VK_IMG_format_pvrtc\"")]
    [SupportedApiProfile("vulkan", ["VK_IMG_format_pvrtc"])]
    public static Utf8String ImgFormatPvrtcExtensionName => "VK_IMG_format_pvrtc"u8;

    [NativeTypeName("#define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_external_memory_capabilities"])]
    public const int NvExternalMemoryCapabilitiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME \"VK_NV_external_memory_capabilities\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_external_memory_capabilities"])]
    public static Utf8String NvExternalMemoryCapabilitiesExtensionName =>
        "VK_NV_external_memory_capabilities"u8;

    [NativeTypeName("#define VK_NV_EXTERNAL_MEMORY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_external_memory"],
        ImpliesSets = ["VK_NV_external_memory_capabilities"]
    )]
    public const int NvExternalMemorySpecVersion = 1;

    [NativeTypeName("#define VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME \"VK_NV_external_memory\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_external_memory"],
        ImpliesSets = ["VK_NV_external_memory_capabilities"]
    )]
    public static Utf8String NvExternalMemoryExtensionName => "VK_NV_external_memory"u8;

    [NativeTypeName("#define VK_EXT_VALIDATION_FLAGS_SPEC_VERSION 3")]
    [SupportedApiProfile("vulkan", ["VK_EXT_validation_flags"])]
    public const int ExtValidationFlagsSpecVersion = 3;

    [NativeTypeName("#define VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME \"VK_EXT_validation_flags\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_validation_flags"])]
    public static Utf8String ExtValidationFlagsExtensionName => "VK_EXT_validation_flags"u8;

    [NativeTypeName("#define VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_subgroup_ballot"])]
    public const int ExtShaderSubgroupBallotSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME \"VK_EXT_shader_subgroup_ballot\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_subgroup_ballot"])]
    public static Utf8String ExtShaderSubgroupBallotExtensionName =>
        "VK_EXT_shader_subgroup_ballot"u8;

    [NativeTypeName("#define VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_subgroup_vote"])]
    public const int ExtShaderSubgroupVoteSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME \"VK_EXT_shader_subgroup_vote\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_subgroup_vote"])]
    public static Utf8String ExtShaderSubgroupVoteExtensionName => "VK_EXT_shader_subgroup_vote"u8;

    [NativeTypeName("#define VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_texture_compression_astc_hdr"],
        ImpliesSets = [
            "VK_EXT_texture_compression_astc_hdr+VK_KHR_get_physical_device_properties2",
            "VK_EXT_texture_compression_astc_hdr+VK_VERSION_1_1",
        ]
    )]
    public const int ExtTextureCompressionAstcHdrSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME \"VK_EXT_texture_compression_astc_hdr\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_texture_compression_astc_hdr"],
        ImpliesSets = [
            "VK_EXT_texture_compression_astc_hdr+VK_KHR_get_physical_device_properties2",
            "VK_EXT_texture_compression_astc_hdr+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtTextureCompressionAstcHdrExtensionName =>
        "VK_EXT_texture_compression_astc_hdr"u8;

    [NativeTypeName("#define VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_astc_decode_mode"],
        ImpliesSets = [
            "VK_EXT_astc_decode_mode+VK_KHR_get_physical_device_properties2",
            "VK_EXT_astc_decode_mode+VK_VERSION_1_1",
        ]
    )]
    public const int ExtAstcDecodeModeSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME \"VK_EXT_astc_decode_mode\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_astc_decode_mode"],
        ImpliesSets = [
            "VK_EXT_astc_decode_mode+VK_KHR_get_physical_device_properties2",
            "VK_EXT_astc_decode_mode+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtAstcDecodeModeExtensionName => "VK_EXT_astc_decode_mode"u8;

    [NativeTypeName("#define VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_robustness"],
        ImpliesSets = [
            "VK_EXT_pipeline_robustness+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_robustness+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPipelineRobustnessSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME \"VK_EXT_pipeline_robustness\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_robustness"],
        ImpliesSets = [
            "VK_EXT_pipeline_robustness+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_robustness+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPipelineRobustnessExtensionName => "VK_EXT_pipeline_robustness"u8;

    [NativeTypeName("#define VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering"],
        ImpliesSets = [
            "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conditional_rendering+VK_VERSION_1_1",
        ]
    )]
    public const int ExtConditionalRenderingSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME \"VK_EXT_conditional_rendering\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering"],
        ImpliesSets = [
            "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conditional_rendering+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtConditionalRenderingExtensionName =>
        "VK_EXT_conditional_rendering"u8;

    [NativeTypeName("#define VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
    public const int NvClipSpaceWScalingSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME \"VK_NV_clip_space_w_scaling\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
    public static Utf8String NvClipSpaceWScalingExtensionName => "VK_NV_clip_space_w_scaling"u8;

    [NativeTypeName("#define VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_direct_mode_display"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    public const int ExtDirectModeDisplaySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME \"VK_EXT_direct_mode_display\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_direct_mode_display"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    public static Utf8String ExtDirectModeDisplayExtensionName => "VK_EXT_direct_mode_display"u8;

    [NativeTypeName("#define VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_surface_counter"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    public const int ExtDisplaySurfaceCounterSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME \"VK_EXT_display_surface_counter\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_surface_counter"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    public static Utf8String ExtDisplaySurfaceCounterExtensionName =>
        "VK_EXT_display_surface_counter"u8;

    [NativeTypeName("#define VK_EXT_DISPLAY_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    public const int ExtDisplayControlSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME \"VK_EXT_display_control\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    public static Utf8String ExtDisplayControlExtensionName => "VK_EXT_display_control"u8;

    [NativeTypeName("#define VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    public const int GoogleDisplayTimingSpecVersion = 1;

    [NativeTypeName("#define VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME \"VK_GOOGLE_display_timing\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    public static Utf8String GoogleDisplayTimingExtensionName => "VK_GOOGLE_display_timing"u8;

    [NativeTypeName("#define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_sample_mask_override_coverage"])]
    public const int NvSampleMaskOverrideCoverageSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME \"VK_NV_sample_mask_override_coverage\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_sample_mask_override_coverage"])]
    public static Utf8String NvSampleMaskOverrideCoverageExtensionName =>
        "VK_NV_sample_mask_override_coverage"u8;

    [NativeTypeName("#define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_geometry_shader_passthrough"])]
    public const int NvGeometryShaderPassthroughSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME \"VK_NV_geometry_shader_passthrough\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_geometry_shader_passthrough"])]
    public static Utf8String NvGeometryShaderPassthroughExtensionName =>
        "VK_NV_geometry_shader_passthrough"u8;

    [NativeTypeName("#define VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_viewport_array2"])]
    public const int NvViewportArray2SpecVersion = 1;

    [NativeTypeName("#define VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME \"VK_NV_viewport_array2\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_viewport_array2"])]
    public static Utf8String NvViewportArray2ExtensionName => "VK_NV_viewport_array2"u8;

    [NativeTypeName(
        "#define VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION"
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_viewport_array2"])]
    public const int NvViewportArray2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME"
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_viewport_array2"])]
    public static Utf8String NvViewportArray2ExtensionName => "VK_NV_viewport_array2"u8;

    [NativeTypeName("#define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NVX_multiview_per_view_attributes"],
        ImpliesSets = [
            "VK_NVX_multiview_per_view_attributes+VK_KHR_multiview",
            "VK_NVX_multiview_per_view_attributes+VK_VERSION_1_1",
        ]
    )]
    public const int NvxMultiviewPerViewAttributesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME \"VK_NVX_multiview_per_view_attributes\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NVX_multiview_per_view_attributes"],
        ImpliesSets = [
            "VK_NVX_multiview_per_view_attributes+VK_KHR_multiview",
            "VK_NVX_multiview_per_view_attributes+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvxMultiviewPerViewAttributesExtensionName =>
        "VK_NVX_multiview_per_view_attributes"u8;

    [NativeTypeName("#define VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_viewport_swizzle"])]
    public const int NvViewportSwizzleSpecVersion = 1;

    [NativeTypeName("#define VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME \"VK_NV_viewport_swizzle\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_viewport_swizzle"])]
    public static Utf8String NvViewportSwizzleExtensionName => "VK_NV_viewport_swizzle"u8;

    [NativeTypeName("#define VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDiscardRectanglesSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME \"VK_EXT_discard_rectangles\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDiscardRectanglesExtensionName => "VK_EXT_discard_rectangles"u8;

    [NativeTypeName("#define VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conservative_rasterization"],
        ImpliesSets = [
            "VK_EXT_conservative_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conservative_rasterization+VK_VERSION_1_1",
        ]
    )]
    public const int ExtConservativeRasterizationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME \"VK_EXT_conservative_rasterization\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conservative_rasterization"],
        ImpliesSets = [
            "VK_EXT_conservative_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conservative_rasterization+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtConservativeRasterizationExtensionName =>
        "VK_EXT_conservative_rasterization"u8;

    [NativeTypeName("#define VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_enable"],
        ImpliesSets = [
            "VK_EXT_depth_clip_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clip_enable+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDepthClipEnableSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME \"VK_EXT_depth_clip_enable\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_enable"],
        ImpliesSets = [
            "VK_EXT_depth_clip_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clip_enable+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDepthClipEnableExtensionName => "VK_EXT_depth_clip_enable"u8;

    [NativeTypeName("#define VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION 5")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_swapchain_colorspace"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    public const int ExtSwapchainColorSpaceSpecVersion = 5;

    [NativeTypeName(
        "#define VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME \"VK_EXT_swapchain_colorspace\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_swapchain_colorspace"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    public static Utf8String ExtSwapchainColorSpaceExtensionName => "VK_EXT_swapchain_colorspace"u8;

    [NativeTypeName("#define VK_EXT_HDR_METADATA_SPEC_VERSION 3")]
    [SupportedApiProfile("vulkan", ["VK_EXT_hdr_metadata"], ImpliesSets = ["VK_KHR_swapchain"])]
    public const int ExtHdrMetadataSpecVersion = 3;

    [NativeTypeName("#define VK_EXT_HDR_METADATA_EXTENSION_NAME \"VK_EXT_hdr_metadata\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_hdr_metadata"], ImpliesSets = ["VK_KHR_swapchain"])]
    public static Utf8String ExtHdrMetadataExtensionName => "VK_EXT_hdr_metadata"u8;

    [NativeTypeName("#define VK_IMG_RELAXED_LINE_RASTERIZATION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_IMG_relaxed_line_rasterization"],
        ImpliesSets = [
            "VK_IMG_relaxed_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_IMG_relaxed_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    public const int ImgRelaxedLineRasterizationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_IMG_RELAXED_LINE_RASTERIZATION_EXTENSION_NAME \"VK_IMG_relaxed_line_rasterization\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_IMG_relaxed_line_rasterization"],
        ImpliesSets = [
            "VK_IMG_relaxed_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_IMG_relaxed_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ImgRelaxedLineRasterizationExtensionName =>
        "VK_IMG_relaxed_line_rasterization"u8;

    [NativeTypeName("#define VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_dma_buf"],
        ImpliesSets = ["VK_KHR_external_memory_fd"]
    )]
    public const int ExtExternalMemoryDmaBufSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME \"VK_EXT_external_memory_dma_buf\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_dma_buf"],
        ImpliesSets = ["VK_KHR_external_memory_fd"]
    )]
    public static Utf8String ExtExternalMemoryDmaBufExtensionName =>
        "VK_EXT_external_memory_dma_buf"u8;

    [NativeTypeName("#define VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_queue_family_foreign"],
        ImpliesSets = [
            "VK_EXT_queue_family_foreign+VK_KHR_external_memory",
            "VK_EXT_queue_family_foreign+VK_VERSION_1_1",
        ]
    )]
    public const int ExtQueueFamilyForeignSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME \"VK_EXT_queue_family_foreign\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_queue_family_foreign"],
        ImpliesSets = [
            "VK_EXT_queue_family_foreign+VK_KHR_external_memory",
            "VK_EXT_queue_family_foreign+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtQueueFamilyForeignExtensionName => "VK_EXT_queue_family_foreign"u8;

    [NativeTypeName("#define VK_EXT_DEBUG_UTILS_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    public const int ExtDebugUtilsSpecVersion = 2;

    [NativeTypeName("#define VK_EXT_DEBUG_UTILS_EXTENSION_NAME \"VK_EXT_debug_utils\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    public static Utf8String ExtDebugUtilsExtensionName => "VK_EXT_debug_utils"u8;

    [NativeTypeName("#define VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sampler_filter_minmax"],
        ImpliesSets = [
            "VK_EXT_sampler_filter_minmax+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sampler_filter_minmax+VK_VERSION_1_1",
        ]
    )]
    public const int ExtSamplerFilterMinmaxSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME \"VK_EXT_sampler_filter_minmax\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sampler_filter_minmax"],
        ImpliesSets = [
            "VK_EXT_sampler_filter_minmax+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sampler_filter_minmax+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtSamplerFilterMinmaxExtensionName =>
        "VK_EXT_sampler_filter_minmax"u8;

    [NativeTypeName("#define VK_AMD_GPU_SHADER_INT16_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_AMD_gpu_shader_int16"])]
    public const int AmdGpuShaderInt16SpecVersion = 2;

    [NativeTypeName("#define VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME \"VK_AMD_gpu_shader_int16\"")]
    [SupportedApiProfile("vulkan", ["VK_AMD_gpu_shader_int16"])]
    public static Utf8String AmdGpuShaderInt16ExtensionName => "VK_AMD_gpu_shader_int16"u8;

    [NativeTypeName("#define VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_mixed_attachment_samples"])]
    public const int AmdMixedAttachmentSamplesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME \"VK_AMD_mixed_attachment_samples\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_mixed_attachment_samples"])]
    public static Utf8String AmdMixedAttachmentSamplesExtensionName =>
        "VK_AMD_mixed_attachment_samples"u8;

    [NativeTypeName("#define VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_fragment_mask"])]
    public const int AmdShaderFragmentMaskSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME \"VK_AMD_shader_fragment_mask\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_shader_fragment_mask"])]
    public static Utf8String AmdShaderFragmentMaskExtensionName => "VK_AMD_shader_fragment_mask"u8;

    [NativeTypeName("#define VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_inline_uniform_block"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_maintenance1",
            "VK_VERSION_1_1",
        ]
    )]
    public const int ExtInlineUniformBlockSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME \"VK_EXT_inline_uniform_block\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_inline_uniform_block"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_maintenance1",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtInlineUniformBlockExtensionName => "VK_EXT_inline_uniform_block"u8;

    [NativeTypeName("#define VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_stencil_export"])]
    public const int ExtShaderStencilExportSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME \"VK_EXT_shader_stencil_export\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_stencil_export"])]
    public static Utf8String ExtShaderStencilExportExtensionName =>
        "VK_EXT_shader_stencil_export"u8;

    [NativeTypeName("#define VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    public const int ExtSampleLocationsSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME \"VK_EXT_sample_locations\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtSampleLocationsExtensionName => "VK_EXT_sample_locations"u8;

    [NativeTypeName("#define VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_blend_operation_advanced"],
        ImpliesSets = [
            "VK_EXT_blend_operation_advanced+VK_KHR_get_physical_device_properties2",
            "VK_EXT_blend_operation_advanced+VK_VERSION_1_1",
        ]
    )]
    public const int ExtBlendOperationAdvancedSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME \"VK_EXT_blend_operation_advanced\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_blend_operation_advanced"],
        ImpliesSets = [
            "VK_EXT_blend_operation_advanced+VK_KHR_get_physical_device_properties2",
            "VK_EXT_blend_operation_advanced+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtBlendOperationAdvancedExtensionName =>
        "VK_EXT_blend_operation_advanced"u8;

    [NativeTypeName("#define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_fragment_coverage_to_color"])]
    public const int NvFragmentCoverageToColorSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME \"VK_NV_fragment_coverage_to_color\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_fragment_coverage_to_color"])]
    public static Utf8String NvFragmentCoverageToColorExtensionName =>
        "VK_NV_fragment_coverage_to_color"u8;

    [NativeTypeName("#define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_framebuffer_mixed_samples"])]
    public const int NvFramebufferMixedSamplesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME \"VK_NV_framebuffer_mixed_samples\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_framebuffer_mixed_samples"])]
    public static Utf8String NvFramebufferMixedSamplesExtensionName =>
        "VK_NV_framebuffer_mixed_samples"u8;

    [NativeTypeName("#define VK_NV_FILL_RECTANGLE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_fill_rectangle"])]
    public const int NvFillRectangleSpecVersion = 1;

    [NativeTypeName("#define VK_NV_FILL_RECTANGLE_EXTENSION_NAME \"VK_NV_fill_rectangle\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_fill_rectangle"])]
    public static Utf8String NvFillRectangleExtensionName => "VK_NV_fill_rectangle"u8;

    [NativeTypeName("#define VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_shader_sm_builtins"], ImpliesSets = ["VK_VERSION_1_1"])]
    public const int NvShaderSmBuiltinsSpecVersion = 1;

    [NativeTypeName("#define VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME \"VK_NV_shader_sm_builtins\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_shader_sm_builtins"], ImpliesSets = ["VK_VERSION_1_1"])]
    public static Utf8String NvShaderSmBuiltinsExtensionName => "VK_NV_shader_sm_builtins"u8;

    [NativeTypeName("#define VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_post_depth_coverage"])]
    public const int ExtPostDepthCoverageSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME \"VK_EXT_post_depth_coverage\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_post_depth_coverage"])]
    public static Utf8String ExtPostDepthCoverageExtensionName => "VK_EXT_post_depth_coverage"u8;

    [NativeTypeName("#define VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_drm_format_modifier"],
        ImpliesSets = [
            "VK_KHR_image_format_list+VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion",
            "VK_KHR_image_format_list+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const int ExtImageDrmFormatModifierSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME \"VK_EXT_image_drm_format_modifier\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_drm_format_modifier"],
        ImpliesSets = [
            "VK_KHR_image_format_list+VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion",
            "VK_KHR_image_format_list+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public static Utf8String ExtImageDrmFormatModifierExtensionName =>
        "VK_EXT_image_drm_format_modifier"u8;

    [NativeTypeName("#define VK_EXT_VALIDATION_CACHE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    public const int ExtValidationCacheSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_VALIDATION_CACHE_EXTENSION_NAME \"VK_EXT_validation_cache\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    public static Utf8String ExtValidationCacheExtensionName => "VK_EXT_validation_cache"u8;

    [NativeTypeName("#define VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_indexing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_maintenance3",
            "VK_VERSION_1_1",
        ]
    )]
    public const int ExtDescriptorIndexingSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME \"VK_EXT_descriptor_indexing\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_indexing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_maintenance3",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDescriptorIndexingExtensionName => "VK_EXT_descriptor_indexing"u8;

    [NativeTypeName("#define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_viewport_index_layer"])]
    public const int ExtShaderViewportIndexLayerSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME \"VK_EXT_shader_viewport_index_layer\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_viewport_index_layer"])]
    public static Utf8String ExtShaderViewportIndexLayerExtensionName =>
        "VK_EXT_shader_viewport_index_layer"u8;

    [NativeTypeName("#define VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    public const int NvShadingRateImageSpecVersion = 3;

    [NativeTypeName("#define VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME \"VK_NV_shading_rate_image\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvShadingRateImageExtensionName => "VK_NV_shading_rate_image"u8;

    [NativeTypeName("#define VK_NV_RAY_TRACING_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    public const int NvRayTracingSpecVersion = 3;

    [NativeTypeName("#define VK_NV_RAY_TRACING_EXTENSION_NAME \"VK_NV_ray_tracing\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvRayTracingExtensionName => "VK_NV_ray_tracing"u8;

    [NativeTypeName("#define VK_SHADER_UNUSED_NV VK_SHADER_UNUSED_KHR")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    public const uint ShaderUnusedNV = (~0U);

    [NativeTypeName("#define VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_representative_fragment_test"],
        ImpliesSets = [
            "VK_NV_representative_fragment_test+VK_KHR_get_physical_device_properties2",
            "VK_NV_representative_fragment_test+VK_VERSION_1_1",
        ]
    )]
    public const int NvRepresentativeFragmentTestSpecVersion = 2;

    [NativeTypeName(
        "#define VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME \"VK_NV_representative_fragment_test\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_representative_fragment_test"],
        ImpliesSets = [
            "VK_NV_representative_fragment_test+VK_KHR_get_physical_device_properties2",
            "VK_NV_representative_fragment_test+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvRepresentativeFragmentTestExtensionName =>
        "VK_NV_representative_fragment_test"u8;

    [NativeTypeName("#define VK_EXT_FILTER_CUBIC_SPEC_VERSION 3")]
    [SupportedApiProfile("vulkan", ["VK_EXT_filter_cubic"])]
    public const int ExtFilterCubicSpecVersion = 3;

    [NativeTypeName("#define VK_EXT_FILTER_CUBIC_EXTENSION_NAME \"VK_EXT_filter_cubic\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_filter_cubic"])]
    public static Utf8String ExtFilterCubicExtensionName => "VK_EXT_filter_cubic"u8;

    [NativeTypeName("#define VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION 4")]
    [SupportedApiProfile("vulkan", ["VK_QCOM_render_pass_shader_resolve"])]
    public const int QcomRenderPassShaderResolveSpecVersion = 4;

    [NativeTypeName(
        "#define VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME \"VK_QCOM_render_pass_shader_resolve\""
    )]
    [SupportedApiProfile("vulkan", ["VK_QCOM_render_pass_shader_resolve"])]
    public static Utf8String QcomRenderPassShaderResolveExtensionName =>
        "VK_QCOM_render_pass_shader_resolve"u8;

    [NativeTypeName("#define VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_EXT_global_priority"])]
    public const int ExtGlobalPrioritySpecVersion = 2;

    [NativeTypeName("#define VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME \"VK_EXT_global_priority\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_global_priority"])]
    public static Utf8String ExtGlobalPriorityExtensionName => "VK_EXT_global_priority"u8;

    [NativeTypeName("#define VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_host"],
        ImpliesSets = [
            "VK_EXT_external_memory_host+VK_KHR_external_memory",
            "VK_EXT_external_memory_host+VK_VERSION_1_1",
        ]
    )]
    public const int ExtExternalMemoryHostSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME \"VK_EXT_external_memory_host\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_host"],
        ImpliesSets = [
            "VK_EXT_external_memory_host+VK_KHR_external_memory",
            "VK_EXT_external_memory_host+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtExternalMemoryHostExtensionName => "VK_EXT_external_memory_host"u8;

    [NativeTypeName("#define VK_AMD_BUFFER_MARKER_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_buffer_marker"])]
    public const int AmdBufferMarkerSpecVersion = 1;

    [NativeTypeName("#define VK_AMD_BUFFER_MARKER_EXTENSION_NAME \"VK_AMD_buffer_marker\"")]
    [SupportedApiProfile("vulkan", ["VK_AMD_buffer_marker"])]
    public static Utf8String AmdBufferMarkerExtensionName => "VK_AMD_buffer_marker"u8;

    [NativeTypeName("#define VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_pipeline_compiler_control"])]
    public const int AmdPipelineCompilerControlSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME \"VK_AMD_pipeline_compiler_control\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_pipeline_compiler_control"])]
    public static Utf8String AmdPipelineCompilerControlExtensionName =>
        "VK_AMD_pipeline_compiler_control"u8;

    [NativeTypeName("#define VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    public const int ExtCalibratedTimestampsSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME \"VK_EXT_calibrated_timestamps\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtCalibratedTimestampsExtensionName =>
        "VK_EXT_calibrated_timestamps"u8;

    [NativeTypeName("#define VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_shader_core_properties"],
        ImpliesSets = [
            "VK_AMD_shader_core_properties+VK_KHR_get_physical_device_properties2",
            "VK_AMD_shader_core_properties+VK_VERSION_1_1",
        ]
    )]
    public const int AmdShaderCorePropertiesSpecVersion = 2;

    [NativeTypeName(
        "#define VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME \"VK_AMD_shader_core_properties\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_shader_core_properties"],
        ImpliesSets = [
            "VK_AMD_shader_core_properties+VK_KHR_get_physical_device_properties2",
            "VK_AMD_shader_core_properties+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String AmdShaderCorePropertiesExtensionName =>
        "VK_AMD_shader_core_properties"u8;

    [NativeTypeName("#define VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_memory_overallocation_behavior"])]
    public const int AmdMemoryOverallocationBehaviorSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME \"VK_AMD_memory_overallocation_behavior\""
    )]
    [SupportedApiProfile("vulkan", ["VK_AMD_memory_overallocation_behavior"])]
    public static Utf8String AmdMemoryOverallocationBehaviorExtensionName =>
        "VK_AMD_memory_overallocation_behavior"u8;

    [NativeTypeName("#define VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_attribute_divisor"],
        ImpliesSets = [
            "VK_EXT_vertex_attribute_divisor+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_attribute_divisor+VK_VERSION_1_1",
        ]
    )]
    public const int ExtVertexAttributeDivisorSpecVersion = 3;

    [NativeTypeName(
        "#define VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME \"VK_EXT_vertex_attribute_divisor\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_attribute_divisor"],
        ImpliesSets = [
            "VK_EXT_vertex_attribute_divisor+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_attribute_divisor+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtVertexAttributeDivisorExtensionName =>
        "VK_EXT_vertex_attribute_divisor"u8;

    [NativeTypeName("#define VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_pipeline_creation_feedback"])]
    public const int ExtPipelineCreationFeedbackSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME \"VK_EXT_pipeline_creation_feedback\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_pipeline_creation_feedback"])]
    public static Utf8String ExtPipelineCreationFeedbackExtensionName =>
        "VK_EXT_pipeline_creation_feedback"u8;

    [NativeTypeName("#define VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shader_subgroup_partitioned"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public const int NvShaderSubgroupPartitionedSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME \"VK_NV_shader_subgroup_partitioned\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shader_subgroup_partitioned"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public static Utf8String NvShaderSubgroupPartitionedExtensionName =>
        "VK_NV_shader_subgroup_partitioned"u8;

    [NativeTypeName("#define VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_compute_shader_derivatives"],
        ImpliesSets = [
            "VK_NV_compute_shader_derivatives+VK_KHR_get_physical_device_properties2",
            "VK_NV_compute_shader_derivatives+VK_VERSION_1_1",
        ]
    )]
    public const int NvComputeShaderDerivativesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME \"VK_NV_compute_shader_derivatives\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_compute_shader_derivatives"],
        ImpliesSets = [
            "VK_NV_compute_shader_derivatives+VK_KHR_get_physical_device_properties2",
            "VK_NV_compute_shader_derivatives+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvComputeShaderDerivativesExtensionName =>
        "VK_NV_compute_shader_derivatives"u8;

    [NativeTypeName("#define VK_NV_MESH_SHADER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    public const int NvMeshShaderSpecVersion = 1;

    [NativeTypeName("#define VK_NV_MESH_SHADER_EXTENSION_NAME \"VK_NV_mesh_shader\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvMeshShaderExtensionName => "VK_NV_mesh_shader"u8;

    [NativeTypeName("#define VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_fragment_shader_barycentric"],
        ImpliesSets = [
            "VK_NV_fragment_shader_barycentric+VK_KHR_get_physical_device_properties2",
            "VK_NV_fragment_shader_barycentric+VK_VERSION_1_1",
        ]
    )]
    public const int NvFragmentShaderBarycentricSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME \"VK_NV_fragment_shader_barycentric\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_fragment_shader_barycentric"],
        ImpliesSets = [
            "VK_NV_fragment_shader_barycentric+VK_KHR_get_physical_device_properties2",
            "VK_NV_fragment_shader_barycentric+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvFragmentShaderBarycentricExtensionName =>
        "VK_NV_fragment_shader_barycentric"u8;

    [NativeTypeName("#define VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shader_image_footprint"],
        ImpliesSets = [
            "VK_NV_shader_image_footprint+VK_KHR_get_physical_device_properties2",
            "VK_NV_shader_image_footprint+VK_VERSION_1_1",
        ]
    )]
    public const int NvShaderImageFootprintSpecVersion = 2;

    [NativeTypeName(
        "#define VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME \"VK_NV_shader_image_footprint\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shader_image_footprint"],
        ImpliesSets = [
            "VK_NV_shader_image_footprint+VK_KHR_get_physical_device_properties2",
            "VK_NV_shader_image_footprint+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvShaderImageFootprintExtensionName =>
        "VK_NV_shader_image_footprint"u8;

    [NativeTypeName("#define VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    public const int NvScissorExclusiveSpecVersion = 2;

    [NativeTypeName("#define VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME \"VK_NV_scissor_exclusive\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvScissorExclusiveExtensionName => "VK_NV_scissor_exclusive"u8;

    [NativeTypeName("#define VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    public const int NvDeviceDiagnosticCheckpointsSpecVersion = 2;

    [NativeTypeName(
        "#define VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME \"VK_NV_device_diagnostic_checkpoints\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvDeviceDiagnosticCheckpointsExtensionName =>
        "VK_NV_device_diagnostic_checkpoints"u8;

    [NativeTypeName("#define VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_INTEL_shader_integer_functions2"],
        ImpliesSets = [
            "VK_INTEL_shader_integer_functions2+VK_KHR_get_physical_device_properties2",
            "VK_INTEL_shader_integer_functions2+VK_VERSION_1_1",
        ]
    )]
    public const int IntelShaderIntegerFunctions2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME \"VK_INTEL_shader_integer_functions2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_INTEL_shader_integer_functions2"],
        ImpliesSets = [
            "VK_INTEL_shader_integer_functions2+VK_KHR_get_physical_device_properties2",
            "VK_INTEL_shader_integer_functions2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String IntelShaderIntegerFunctions2ExtensionName =>
        "VK_INTEL_shader_integer_functions2"u8;

    [NativeTypeName("#define VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    public const int IntelPerformanceQuerySpecVersion = 2;

    [NativeTypeName(
        "#define VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME \"VK_INTEL_performance_query\""
    )]
    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    public static Utf8String IntelPerformanceQueryExtensionName => "VK_INTEL_performance_query"u8;

    [NativeTypeName("#define VK_EXT_PCI_BUS_INFO_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pci_bus_info"],
        ImpliesSets = [
            "VK_EXT_pci_bus_info+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pci_bus_info+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPciBusInfoSpecVersion = 2;

    [NativeTypeName("#define VK_EXT_PCI_BUS_INFO_EXTENSION_NAME \"VK_EXT_pci_bus_info\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pci_bus_info"],
        ImpliesSets = [
            "VK_EXT_pci_bus_info+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pci_bus_info+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPciBusInfoExtensionName => "VK_EXT_pci_bus_info"u8;

    [NativeTypeName("#define VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_display_native_hdr"],
        ImpliesSets = [
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    public const int AmdDisplayNativeHdrSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME \"VK_AMD_display_native_hdr\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_display_native_hdr"],
        ImpliesSets = [
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String AmdDisplayNativeHdrExtensionName => "VK_AMD_display_native_hdr"u8;

    [NativeTypeName("#define VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1",
        ]
    )]
    public const int ExtFragmentDensityMapSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME \"VK_EXT_fragment_density_map\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtFragmentDensityMapExtensionName => "VK_EXT_fragment_density_map"u8;

    [NativeTypeName("#define VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_scalar_block_layout"],
        ImpliesSets = [
            "VK_EXT_scalar_block_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_scalar_block_layout+VK_VERSION_1_1",
        ]
    )]
    public const int ExtScalarBlockLayoutSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME \"VK_EXT_scalar_block_layout\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_scalar_block_layout"],
        ImpliesSets = [
            "VK_EXT_scalar_block_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_scalar_block_layout+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtScalarBlockLayoutExtensionName => "VK_EXT_scalar_block_layout"u8;

    [NativeTypeName("#define VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_GOOGLE_hlsl_functionality1"])]
    public const int GoogleHlslFunctionality1SpecVersion = 1;

    [NativeTypeName(
        "#define VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME \"VK_GOOGLE_hlsl_functionality1\""
    )]
    [SupportedApiProfile("vulkan", ["VK_GOOGLE_hlsl_functionality1"])]
    public static Utf8String GoogleHlslFunctionality1ExtensionName =>
        "VK_GOOGLE_hlsl_functionality1"u8;

    [NativeTypeName(
        "#define VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION"
    )]
    [SupportedApiProfile("vulkan", ["VK_GOOGLE_hlsl_functionality1"])]
    public const int GoogleHlslFunctionality1SpecVersion = 1;

    [NativeTypeName(
        "#define VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME"
    )]
    [SupportedApiProfile("vulkan", ["VK_GOOGLE_hlsl_functionality1"])]
    public static Utf8String GoogleHlslFunctionality1ExtensionName =>
        "VK_GOOGLE_hlsl_functionality1"u8;

    [NativeTypeName("#define VK_GOOGLE_DECORATE_STRING_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_GOOGLE_decorate_string"])]
    public const int GoogleDecorateStringSpecVersion = 1;

    [NativeTypeName(
        "#define VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME \"VK_GOOGLE_decorate_string\""
    )]
    [SupportedApiProfile("vulkan", ["VK_GOOGLE_decorate_string"])]
    public static Utf8String GoogleDecorateStringExtensionName => "VK_GOOGLE_decorate_string"u8;

    [NativeTypeName("#define VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_subgroup_size_control"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public const int ExtSubgroupSizeControlSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME \"VK_EXT_subgroup_size_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_subgroup_size_control"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public static Utf8String ExtSubgroupSizeControlExtensionName =>
        "VK_EXT_subgroup_size_control"u8;

    [NativeTypeName("#define VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_shader_core_properties2"],
        ImpliesSets = ["VK_AMD_shader_core_properties"]
    )]
    public const int AmdShaderCoreProperties2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME \"VK_AMD_shader_core_properties2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_shader_core_properties2"],
        ImpliesSets = ["VK_AMD_shader_core_properties"]
    )]
    public static Utf8String AmdShaderCoreProperties2ExtensionName =>
        "VK_AMD_shader_core_properties2"u8;

    [NativeTypeName("#define VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_device_coherent_memory"],
        ImpliesSets = [
            "VK_AMD_device_coherent_memory+VK_KHR_get_physical_device_properties2",
            "VK_AMD_device_coherent_memory+VK_VERSION_1_1",
        ]
    )]
    public const int AmdDeviceCoherentMemorySpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME \"VK_AMD_device_coherent_memory\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_device_coherent_memory"],
        ImpliesSets = [
            "VK_AMD_device_coherent_memory+VK_KHR_get_physical_device_properties2",
            "VK_AMD_device_coherent_memory+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String AmdDeviceCoherentMemoryExtensionName =>
        "VK_AMD_device_coherent_memory"u8;

    [NativeTypeName("#define VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_image_atomic_int64"],
        ImpliesSets = [
            "VK_EXT_shader_image_atomic_int64+VK_KHR_get_physical_device_properties2",
            "VK_EXT_shader_image_atomic_int64+VK_VERSION_1_1",
        ]
    )]
    public const int ExtShaderImageAtomicInt64SpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME \"VK_EXT_shader_image_atomic_int64\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_image_atomic_int64"],
        ImpliesSets = [
            "VK_EXT_shader_image_atomic_int64+VK_KHR_get_physical_device_properties2",
            "VK_EXT_shader_image_atomic_int64+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtShaderImageAtomicInt64ExtensionName =>
        "VK_EXT_shader_image_atomic_int64"u8;

    [NativeTypeName("#define VK_EXT_MEMORY_BUDGET_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_memory_budget"],
        ImpliesSets = [
            "VK_EXT_memory_budget+VK_KHR_get_physical_device_properties2",
            "VK_EXT_memory_budget+VK_VERSION_1_1",
        ]
    )]
    public const int ExtMemoryBudgetSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_MEMORY_BUDGET_EXTENSION_NAME \"VK_EXT_memory_budget\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_memory_budget"],
        ImpliesSets = [
            "VK_EXT_memory_budget+VK_KHR_get_physical_device_properties2",
            "VK_EXT_memory_budget+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtMemoryBudgetExtensionName => "VK_EXT_memory_budget"u8;

    [NativeTypeName("#define VK_EXT_MEMORY_PRIORITY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_memory_priority"],
        ImpliesSets = [
            "VK_EXT_memory_priority+VK_KHR_get_physical_device_properties2",
            "VK_EXT_memory_priority+VK_VERSION_1_1",
        ]
    )]
    public const int ExtMemoryPrioritySpecVersion = 1;

    [NativeTypeName("#define VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME \"VK_EXT_memory_priority\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_memory_priority"],
        ImpliesSets = [
            "VK_EXT_memory_priority+VK_KHR_get_physical_device_properties2",
            "VK_EXT_memory_priority+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtMemoryPriorityExtensionName => "VK_EXT_memory_priority"u8;

    [NativeTypeName("#define VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_dedicated_allocation_image_aliasing"],
        ImpliesSets = [
            "VK_KHR_dedicated_allocation+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public const int NvDedicatedAllocationImageAliasingSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME \"VK_NV_dedicated_allocation_image_aliasing\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_dedicated_allocation_image_aliasing"],
        ImpliesSets = [
            "VK_KHR_dedicated_allocation+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvDedicatedAllocationImageAliasingExtensionName =>
        "VK_NV_dedicated_allocation_image_aliasing"u8;

    [NativeTypeName("#define VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_buffer_device_address"],
        ImpliesSets = [
            "VK_EXT_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_EXT_buffer_device_address+VK_VERSION_1_1",
        ]
    )]
    public const int ExtBufferDeviceAddressSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME \"VK_EXT_buffer_device_address\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_buffer_device_address"],
        ImpliesSets = [
            "VK_EXT_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_EXT_buffer_device_address+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtBufferDeviceAddressExtensionName =>
        "VK_EXT_buffer_device_address"u8;

    [NativeTypeName("#define VK_EXT_TOOLING_INFO_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_tooling_info"])]
    public const int ExtToolingInfoSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_TOOLING_INFO_EXTENSION_NAME \"VK_EXT_tooling_info\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_tooling_info"])]
    public static Utf8String ExtToolingInfoExtensionName => "VK_EXT_tooling_info"u8;

    [NativeTypeName("#define VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_separate_stencil_usage"])]
    public const int ExtSeparateStencilUsageSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME \"VK_EXT_separate_stencil_usage\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_separate_stencil_usage"])]
    public static Utf8String ExtSeparateStencilUsageExtensionName =>
        "VK_EXT_separate_stencil_usage"u8;

    [NativeTypeName("#define VK_EXT_VALIDATION_FEATURES_SPEC_VERSION 6")]
    [SupportedApiProfile("vulkan", ["VK_EXT_validation_features"])]
    public const int ExtValidationFeaturesSpecVersion = 6;

    [NativeTypeName(
        "#define VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME \"VK_EXT_validation_features\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_validation_features"])]
    public static Utf8String ExtValidationFeaturesExtensionName => "VK_EXT_validation_features"u8;

    [NativeTypeName("#define VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix"],
        ImpliesSets = [
            "VK_NV_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_NV_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    public const int NvCooperativeMatrixSpecVersion = 1;

    [NativeTypeName("#define VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME \"VK_NV_cooperative_matrix\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix"],
        ImpliesSets = [
            "VK_NV_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_NV_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvCooperativeMatrixExtensionName => "VK_NV_cooperative_matrix"u8;

    [NativeTypeName("#define VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_coverage_reduction_mode"],
        ImpliesSets = [
            "VK_NV_framebuffer_mixed_samples+VK_KHR_get_physical_device_properties2",
            "VK_NV_framebuffer_mixed_samples+VK_VERSION_1_1",
        ]
    )]
    public const int NvCoverageReductionModeSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME \"VK_NV_coverage_reduction_mode\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_coverage_reduction_mode"],
        ImpliesSets = [
            "VK_NV_framebuffer_mixed_samples+VK_KHR_get_physical_device_properties2",
            "VK_NV_framebuffer_mixed_samples+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvCoverageReductionModeExtensionName =>
        "VK_NV_coverage_reduction_mode"u8;

    [NativeTypeName("#define VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_shader_interlock"],
        ImpliesSets = [
            "VK_EXT_fragment_shader_interlock+VK_KHR_get_physical_device_properties2",
            "VK_EXT_fragment_shader_interlock+VK_VERSION_1_1",
        ]
    )]
    public const int ExtFragmentShaderInterlockSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME \"VK_EXT_fragment_shader_interlock\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_shader_interlock"],
        ImpliesSets = [
            "VK_EXT_fragment_shader_interlock+VK_KHR_get_physical_device_properties2",
            "VK_EXT_fragment_shader_interlock+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtFragmentShaderInterlockExtensionName =>
        "VK_EXT_fragment_shader_interlock"u8;

    [NativeTypeName("#define VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_ycbcr_image_arrays"],
        ImpliesSets = [
            "VK_EXT_ycbcr_image_arrays+VK_KHR_sampler_ycbcr_conversion",
            "VK_EXT_ycbcr_image_arrays+VK_VERSION_1_1",
        ]
    )]
    public const int ExtYcbcrImageArraysSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME \"VK_EXT_ycbcr_image_arrays\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_ycbcr_image_arrays"],
        ImpliesSets = [
            "VK_EXT_ycbcr_image_arrays+VK_KHR_sampler_ycbcr_conversion",
            "VK_EXT_ycbcr_image_arrays+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtYcbcrImageArraysExtensionName => "VK_EXT_ycbcr_image_arrays"u8;

    [NativeTypeName("#define VK_EXT_PROVOKING_VERTEX_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_provoking_vertex"],
        ImpliesSets = [
            "VK_EXT_provoking_vertex+VK_KHR_get_physical_device_properties2",
            "VK_EXT_provoking_vertex+VK_VERSION_1_1",
        ]
    )]
    public const int ExtProvokingVertexSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME \"VK_EXT_provoking_vertex\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_provoking_vertex"],
        ImpliesSets = [
            "VK_EXT_provoking_vertex+VK_KHR_get_physical_device_properties2",
            "VK_EXT_provoking_vertex+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtProvokingVertexExtensionName => "VK_EXT_provoking_vertex"u8;

    [NativeTypeName("#define VK_EXT_HEADLESS_SURFACE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_headless_surface"], ImpliesSets = ["VK_KHR_surface"])]
    public const int ExtHeadlessSurfaceSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME \"VK_EXT_headless_surface\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_headless_surface"], ImpliesSets = ["VK_KHR_surface"])]
    public static Utf8String ExtHeadlessSurfaceExtensionName => "VK_EXT_headless_surface"u8;

    [NativeTypeName("#define VK_EXT_LINE_RASTERIZATION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_EXT_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    public const int ExtLineRasterizationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME \"VK_EXT_line_rasterization\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_EXT_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtLineRasterizationExtensionName => "VK_EXT_line_rasterization"u8;

    [NativeTypeName("#define VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_atomic_float"],
        ImpliesSets = [
            "VK_EXT_shader_atomic_float+VK_KHR_get_physical_device_properties2",
            "VK_EXT_shader_atomic_float+VK_VERSION_1_1",
        ]
    )]
    public const int ExtShaderAtomicFloatSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME \"VK_EXT_shader_atomic_float\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_atomic_float"],
        ImpliesSets = [
            "VK_EXT_shader_atomic_float+VK_KHR_get_physical_device_properties2",
            "VK_EXT_shader_atomic_float+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtShaderAtomicFloatExtensionName => "VK_EXT_shader_atomic_float"u8;

    [NativeTypeName("#define VK_EXT_HOST_QUERY_RESET_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_query_reset"],
        ImpliesSets = [
            "VK_EXT_host_query_reset+VK_KHR_get_physical_device_properties2",
            "VK_EXT_host_query_reset+VK_VERSION_1_1",
        ]
    )]
    public const int ExtHostQueryResetSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME \"VK_EXT_host_query_reset\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_query_reset"],
        ImpliesSets = [
            "VK_EXT_host_query_reset+VK_KHR_get_physical_device_properties2",
            "VK_EXT_host_query_reset+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtHostQueryResetExtensionName => "VK_EXT_host_query_reset"u8;

    [NativeTypeName("#define VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_index_type_uint8"],
        ImpliesSets = [
            "VK_EXT_index_type_uint8+VK_KHR_get_physical_device_properties2",
            "VK_EXT_index_type_uint8+VK_VERSION_1_1",
        ]
    )]
    public const int ExtIndexTypeUint8SpecVersion = 1;

    [NativeTypeName("#define VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME \"VK_EXT_index_type_uint8\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_index_type_uint8"],
        ImpliesSets = [
            "VK_EXT_index_type_uint8+VK_KHR_get_physical_device_properties2",
            "VK_EXT_index_type_uint8+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtIndexTypeUint8ExtensionName => "VK_EXT_index_type_uint8"u8;

    [NativeTypeName("#define VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    public const int ExtExtendedDynamicStateSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME \"VK_EXT_extended_dynamic_state\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtExtendedDynamicStateExtensionName =>
        "VK_EXT_extended_dynamic_state"u8;

    [NativeTypeName("#define VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const int ExtHostImageCopySpecVersion = 1;

    [NativeTypeName("#define VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME \"VK_EXT_host_image_copy\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtHostImageCopyExtensionName => "VK_EXT_host_image_copy"u8;

    [NativeTypeName("#define VK_EXT_MAP_MEMORY_PLACED_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_map_memory_placed"],
        ImpliesSets = [
            "VK_EXT_map_memory_placed+VK_KHR_map_memory2",
            "VK_EXT_map_memory_placed+VK_VERSION_1_4",
        ]
    )]
    public const int ExtMapMemoryPlacedSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_MAP_MEMORY_PLACED_EXTENSION_NAME \"VK_EXT_map_memory_placed\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_map_memory_placed"],
        ImpliesSets = [
            "VK_EXT_map_memory_placed+VK_KHR_map_memory2",
            "VK_EXT_map_memory_placed+VK_VERSION_1_4",
        ]
    )]
    public static Utf8String ExtMapMemoryPlacedExtensionName => "VK_EXT_map_memory_placed"u8;

    [NativeTypeName("#define VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_atomic_float2"],
        ImpliesSets = ["VK_EXT_shader_atomic_float"]
    )]
    public const int ExtShaderAtomicFloat2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME \"VK_EXT_shader_atomic_float2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_atomic_float2"],
        ImpliesSets = ["VK_EXT_shader_atomic_float"]
    )]
    public static Utf8String ExtShaderAtomicFloat2ExtensionName => "VK_EXT_shader_atomic_float2"u8;

    [NativeTypeName("#define VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_surface_maintenance1"],
        ImpliesSets = ["VK_KHR_get_surface_capabilities2", "VK_KHR_surface"]
    )]
    public const int ExtSurfaceMaintenance1SpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME \"VK_EXT_surface_maintenance1\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_surface_maintenance1"],
        ImpliesSets = ["VK_KHR_get_surface_capabilities2", "VK_KHR_surface"]
    )]
    public static Utf8String ExtSurfaceMaintenance1ExtensionName => "VK_EXT_surface_maintenance1"u8;

    [NativeTypeName("#define VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_swapchain_maintenance1"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_VERSION_1_1",
        ]
    )]
    public const int ExtSwapchainMaintenance1SpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME \"VK_EXT_swapchain_maintenance1\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_swapchain_maintenance1"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtSwapchainMaintenance1ExtensionName =>
        "VK_EXT_swapchain_maintenance1"u8;

    [NativeTypeName("#define VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_demote_to_helper_invocation"],
        ImpliesSets = [
            "VK_EXT_shader_demote_to_helper_invocation+VK_KHR_get_physical_device_properties2",
            "VK_EXT_shader_demote_to_helper_invocation+VK_VERSION_1_1",
        ]
    )]
    public const int ExtShaderDemoteToHelperInvocationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME \"VK_EXT_shader_demote_to_helper_invocation\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_demote_to_helper_invocation"],
        ImpliesSets = [
            "VK_EXT_shader_demote_to_helper_invocation+VK_KHR_get_physical_device_properties2",
            "VK_EXT_shader_demote_to_helper_invocation+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtShaderDemoteToHelperInvocationExtensionName =>
        "VK_EXT_shader_demote_to_helper_invocation"u8;

    [NativeTypeName("#define VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    public const int NvDeviceGeneratedCommandsSpecVersion = 3;

    [NativeTypeName(
        "#define VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME \"VK_NV_device_generated_commands\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    public static Utf8String NvDeviceGeneratedCommandsExtensionName =>
        "VK_NV_device_generated_commands"u8;

    [NativeTypeName("#define VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_inherited_viewport_scissor"],
        ImpliesSets = [
            "VK_NV_inherited_viewport_scissor+VK_KHR_get_physical_device_properties2",
            "VK_NV_inherited_viewport_scissor+VK_VERSION_1_1",
        ]
    )]
    public const int NvInheritedViewportScissorSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME \"VK_NV_inherited_viewport_scissor\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_inherited_viewport_scissor"],
        ImpliesSets = [
            "VK_NV_inherited_viewport_scissor+VK_KHR_get_physical_device_properties2",
            "VK_NV_inherited_viewport_scissor+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvInheritedViewportScissorExtensionName =>
        "VK_NV_inherited_viewport_scissor"u8;

    [NativeTypeName("#define VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_texel_buffer_alignment"],
        ImpliesSets = [
            "VK_EXT_texel_buffer_alignment+VK_KHR_get_physical_device_properties2",
            "VK_EXT_texel_buffer_alignment+VK_VERSION_1_1",
        ]
    )]
    public const int ExtTexelBufferAlignmentSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME \"VK_EXT_texel_buffer_alignment\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_texel_buffer_alignment"],
        ImpliesSets = [
            "VK_EXT_texel_buffer_alignment+VK_KHR_get_physical_device_properties2",
            "VK_EXT_texel_buffer_alignment+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtTexelBufferAlignmentExtensionName =>
        "VK_EXT_texel_buffer_alignment"u8;

    [NativeTypeName("#define VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION 4")]
    [SupportedApiProfile("vulkan", ["VK_QCOM_render_pass_transform"])]
    public const int QcomRenderPassTransformSpecVersion = 4;

    [NativeTypeName(
        "#define VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME \"VK_QCOM_render_pass_transform\""
    )]
    [SupportedApiProfile("vulkan", ["VK_QCOM_render_pass_transform"])]
    public static Utf8String QcomRenderPassTransformExtensionName =>
        "VK_QCOM_render_pass_transform"u8;

    [NativeTypeName("#define VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_bias_control"],
        ImpliesSets = [
            "VK_EXT_depth_bias_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_bias_control+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDepthBiasControlSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME \"VK_EXT_depth_bias_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_bias_control"],
        ImpliesSets = [
            "VK_EXT_depth_bias_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_bias_control+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDepthBiasControlExtensionName => "VK_EXT_depth_bias_control"u8;

    [NativeTypeName("#define VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_memory_report"],
        ImpliesSets = [
            "VK_EXT_device_memory_report+VK_KHR_get_physical_device_properties2",
            "VK_EXT_device_memory_report+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDeviceMemoryReportSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME \"VK_EXT_device_memory_report\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_memory_report"],
        ImpliesSets = [
            "VK_EXT_device_memory_report+VK_KHR_get_physical_device_properties2",
            "VK_EXT_device_memory_report+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDeviceMemoryReportExtensionName => "VK_EXT_device_memory_report"u8;

    [NativeTypeName("#define VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_acquire_drm_display"],
        ImpliesSets = ["VK_EXT_direct_mode_display"]
    )]
    public const int ExtAcquireDrmDisplaySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME \"VK_EXT_acquire_drm_display\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_acquire_drm_display"],
        ImpliesSets = ["VK_EXT_direct_mode_display"]
    )]
    public static Utf8String ExtAcquireDrmDisplayExtensionName => "VK_EXT_acquire_drm_display"u8;

    [NativeTypeName("#define VK_EXT_ROBUSTNESS_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_robustness2"],
        ImpliesSets = [
            "VK_EXT_robustness2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_robustness2+VK_VERSION_1_1",
        ]
    )]
    public const int ExtRobustness2SpecVersion = 1;

    [NativeTypeName("#define VK_EXT_ROBUSTNESS_2_EXTENSION_NAME \"VK_EXT_robustness2\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_robustness2"],
        ImpliesSets = [
            "VK_EXT_robustness2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_robustness2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtRobustness2ExtensionName => "VK_EXT_robustness2"u8;

    [NativeTypeName("#define VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION 12")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_custom_border_color"],
        ImpliesSets = [
            "VK_EXT_custom_border_color+VK_KHR_get_physical_device_properties2",
            "VK_EXT_custom_border_color+VK_VERSION_1_1",
        ]
    )]
    public const int ExtCustomBorderColorSpecVersion = 12;

    [NativeTypeName(
        "#define VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME \"VK_EXT_custom_border_color\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_custom_border_color"],
        ImpliesSets = [
            "VK_EXT_custom_border_color+VK_KHR_get_physical_device_properties2",
            "VK_EXT_custom_border_color+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtCustomBorderColorExtensionName => "VK_EXT_custom_border_color"u8;

    [NativeTypeName("#define VK_GOOGLE_USER_TYPE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_GOOGLE_user_type"])]
    public const int GoogleUserTypeSpecVersion = 1;

    [NativeTypeName("#define VK_GOOGLE_USER_TYPE_EXTENSION_NAME \"VK_GOOGLE_user_type\"")]
    [SupportedApiProfile("vulkan", ["VK_GOOGLE_user_type"])]
    public static Utf8String GoogleUserTypeExtensionName => "VK_GOOGLE_user_type"u8;

    [NativeTypeName("#define VK_NV_PRESENT_BARRIER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_present_barrier"],
        ImpliesSets = [
            "VK_KHR_surface+VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_surface+VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    public const int NvPresentBarrierSpecVersion = 1;

    [NativeTypeName("#define VK_NV_PRESENT_BARRIER_EXTENSION_NAME \"VK_NV_present_barrier\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_present_barrier"],
        ImpliesSets = [
            "VK_KHR_surface+VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_surface+VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvPresentBarrierExtensionName => "VK_NV_present_barrier"u8;

    [NativeTypeName("#define VK_EXT_PRIVATE_DATA_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPrivateDataSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_PRIVATE_DATA_EXTENSION_NAME \"VK_EXT_private_data\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPrivateDataExtensionName => "VK_EXT_private_data"u8;

    [NativeTypeName("#define VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_creation_cache_control"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPipelineCreationCacheControlSpecVersion = 3;

    [NativeTypeName(
        "#define VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME \"VK_EXT_pipeline_creation_cache_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_creation_cache_control"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPipelineCreationCacheControlExtensionName =>
        "VK_EXT_pipeline_creation_cache_control"u8;

    [NativeTypeName("#define VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostics_config"],
        ImpliesSets = [
            "VK_NV_device_diagnostics_config+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostics_config+VK_VERSION_1_1",
        ]
    )]
    public const int NvDeviceDiagnosticsConfigSpecVersion = 2;

    [NativeTypeName(
        "#define VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME \"VK_NV_device_diagnostics_config\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostics_config"],
        ImpliesSets = [
            "VK_NV_device_diagnostics_config+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostics_config+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvDeviceDiagnosticsConfigExtensionName =>
        "VK_NV_device_diagnostics_config"u8;

    [NativeTypeName("#define VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_QCOM_render_pass_store_ops"])]
    public const int QcomRenderPassStoreOpsSpecVersion = 2;

    [NativeTypeName(
        "#define VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME \"VK_QCOM_render_pass_store_ops\""
    )]
    [SupportedApiProfile("vulkan", ["VK_QCOM_render_pass_store_ops"])]
    public static Utf8String QcomRenderPassStoreOpsExtensionName =>
        "VK_QCOM_render_pass_store_ops"u8;

    [NativeTypeName("#define VK_NV_CUDA_KERNEL_LAUNCH_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
    public const int NvCudaKernelLaunchSpecVersion = 2;

    [NativeTypeName("#define VK_NV_CUDA_KERNEL_LAUNCH_EXTENSION_NAME \"VK_NV_cuda_kernel_launch\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
    public static Utf8String NvCudaKernelLaunchExtensionName => "VK_NV_cuda_kernel_launch"u8;

    [NativeTypeName("#define VK_QCOM_TILE_SHADING_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    public const int QcomTileShadingSpecVersion = 1;

    [NativeTypeName("#define VK_QCOM_TILE_SHADING_EXTENSION_NAME \"VK_QCOM_tile_shading\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    public static Utf8String QcomTileShadingExtensionName => "VK_QCOM_tile_shading"u8;

    [NativeTypeName("#define VK_NV_LOW_LATENCY_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_low_latency"])]
    public const int NvLowLatencySpecVersion = 1;

    [NativeTypeName("#define VK_NV_LOW_LATENCY_EXTENSION_NAME \"VK_NV_low_latency\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_low_latency"])]
    public static Utf8String NvLowLatencyExtensionName => "VK_NV_low_latency"u8;

    [NativeTypeName("#define VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public const int ExtDescriptorBufferSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME \"VK_EXT_descriptor_buffer\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtDescriptorBufferExtensionName => "VK_EXT_descriptor_buffer"u8;

    [NativeTypeName("#define VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_graphics_pipeline_library"],
        ImpliesSets = [
            "VK_KHR_pipeline_library+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_library+VK_VERSION_1_1",
        ]
    )]
    public const int ExtGraphicsPipelineLibrarySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME \"VK_EXT_graphics_pipeline_library\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_graphics_pipeline_library"],
        ImpliesSets = [
            "VK_KHR_pipeline_library+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_library+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtGraphicsPipelineLibraryExtensionName =>
        "VK_EXT_graphics_pipeline_library"u8;

    [NativeTypeName("#define VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_shader_early_and_late_fragment_tests"],
        ImpliesSets = [
            "VK_AMD_shader_early_and_late_fragment_tests+VK_KHR_get_physical_device_properties2",
            "VK_AMD_shader_early_and_late_fragment_tests+VK_VERSION_1_1",
        ]
    )]
    public const int AmdShaderEarlyAndLateFragmentTestsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME \"VK_AMD_shader_early_and_late_fragment_tests\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_shader_early_and_late_fragment_tests"],
        ImpliesSets = [
            "VK_AMD_shader_early_and_late_fragment_tests+VK_KHR_get_physical_device_properties2",
            "VK_AMD_shader_early_and_late_fragment_tests+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String AmdShaderEarlyAndLateFragmentTestsExtensionName =>
        "VK_AMD_shader_early_and_late_fragment_tests"u8;

    [NativeTypeName("#define VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_fragment_shading_rate_enums"],
        ImpliesSets = ["VK_KHR_fragment_shading_rate"]
    )]
    public const int NvFragmentShadingRateEnumsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME \"VK_NV_fragment_shading_rate_enums\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_fragment_shading_rate_enums"],
        ImpliesSets = ["VK_KHR_fragment_shading_rate"]
    )]
    public static Utf8String NvFragmentShadingRateEnumsExtensionName =>
        "VK_NV_fragment_shading_rate_enums"u8;

    [NativeTypeName("#define VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing_motion_blur"],
        ImpliesSets = ["VK_KHR_ray_tracing_pipeline"]
    )]
    public const int NvRayTracingMotionBlurSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME \"VK_NV_ray_tracing_motion_blur\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing_motion_blur"],
        ImpliesSets = ["VK_KHR_ray_tracing_pipeline"]
    )]
    public static Utf8String NvRayTracingMotionBlurExtensionName =>
        "VK_NV_ray_tracing_motion_blur"u8;

    [NativeTypeName("#define VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_ycbcr_2plane_444_formats"],
        ImpliesSets = [
            "VK_EXT_ycbcr_2plane_444_formats+VK_KHR_sampler_ycbcr_conversion",
            "VK_EXT_ycbcr_2plane_444_formats+VK_VERSION_1_1",
        ]
    )]
    public const int ExtYcbcr2Plane444FormatsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME \"VK_EXT_ycbcr_2plane_444_formats\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_ycbcr_2plane_444_formats"],
        ImpliesSets = [
            "VK_EXT_ycbcr_2plane_444_formats+VK_KHR_sampler_ycbcr_conversion",
            "VK_EXT_ycbcr_2plane_444_formats+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtYcbcr2Plane444FormatsExtensionName =>
        "VK_EXT_ycbcr_2plane_444_formats"u8;

    [NativeTypeName("#define VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map2"],
        ImpliesSets = ["VK_EXT_fragment_density_map"]
    )]
    public const int ExtFragmentDensityMap2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME \"VK_EXT_fragment_density_map2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map2"],
        ImpliesSets = ["VK_EXT_fragment_density_map"]
    )]
    public static Utf8String ExtFragmentDensityMap2ExtensionName =>
        "VK_EXT_fragment_density_map2"u8;

    [NativeTypeName("#define VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_rotated_copy_commands"],
        ImpliesSets = [
            "VK_QCOM_rotated_copy_commands+VK_KHR_copy_commands2",
            "VK_QCOM_rotated_copy_commands+VK_VERSION_1_3",
        ]
    )]
    public const int QcomRotatedCopyCommandsSpecVersion = 2;

    [NativeTypeName(
        "#define VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME \"VK_QCOM_rotated_copy_commands\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_rotated_copy_commands"],
        ImpliesSets = [
            "VK_QCOM_rotated_copy_commands+VK_KHR_copy_commands2",
            "VK_QCOM_rotated_copy_commands+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String QcomRotatedCopyCommandsExtensionName =>
        "VK_QCOM_rotated_copy_commands"u8;

    [NativeTypeName("#define VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_robustness"],
        ImpliesSets = [
            "VK_EXT_image_robustness+VK_KHR_get_physical_device_properties2",
            "VK_EXT_image_robustness+VK_VERSION_1_1",
        ]
    )]
    public const int ExtImageRobustnessSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME \"VK_EXT_image_robustness\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_robustness"],
        ImpliesSets = [
            "VK_EXT_image_robustness+VK_KHR_get_physical_device_properties2",
            "VK_EXT_image_robustness+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtImageRobustnessExtensionName => "VK_EXT_image_robustness"u8;

    [NativeTypeName("#define VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_compression_control"],
        ImpliesSets = [
            "VK_EXT_image_compression_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_image_compression_control+VK_VERSION_1_1",
        ]
    )]
    public const int ExtImageCompressionControlSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME \"VK_EXT_image_compression_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_compression_control"],
        ImpliesSets = [
            "VK_EXT_image_compression_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_image_compression_control+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtImageCompressionControlExtensionName =>
        "VK_EXT_image_compression_control"u8;

    [NativeTypeName("#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_attachment_feedback_loop_layout"],
        ImpliesSets = [
            "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
        ]
    )]
    public const int ExtAttachmentFeedbackLoopLayoutSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME \"VK_EXT_attachment_feedback_loop_layout\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_attachment_feedback_loop_layout"],
        ImpliesSets = [
            "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtAttachmentFeedbackLoopLayoutExtensionName =>
        "VK_EXT_attachment_feedback_loop_layout"u8;

    [NativeTypeName("#define VK_EXT_4444_FORMATS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_4444_formats"],
        ImpliesSets = [
            "VK_EXT_4444_formats+VK_KHR_get_physical_device_properties2",
            "VK_EXT_4444_formats+VK_VERSION_1_1",
        ]
    )]
    public const int Ext4444FormatsSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_4444_FORMATS_EXTENSION_NAME \"VK_EXT_4444_formats\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_4444_formats"],
        ImpliesSets = [
            "VK_EXT_4444_formats+VK_KHR_get_physical_device_properties2",
            "VK_EXT_4444_formats+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String Ext4444FormatsExtensionName => "VK_EXT_4444_formats"u8;

    [NativeTypeName("#define VK_EXT_DEVICE_FAULT_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_fault"],
        ImpliesSets = [
            "VK_EXT_device_fault+VK_KHR_get_physical_device_properties2",
            "VK_EXT_device_fault+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDeviceFaultSpecVersion = 2;

    [NativeTypeName("#define VK_EXT_DEVICE_FAULT_EXTENSION_NAME \"VK_EXT_device_fault\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_fault"],
        ImpliesSets = [
            "VK_EXT_device_fault+VK_KHR_get_physical_device_properties2",
            "VK_EXT_device_fault+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDeviceFaultExtensionName => "VK_EXT_device_fault"u8;

    [NativeTypeName("#define VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_rasterization_order_attachment_access"],
        ImpliesSets = [
            "VK_ARM_rasterization_order_attachment_access+VK_KHR_get_physical_device_properties2",
            "VK_ARM_rasterization_order_attachment_access+VK_VERSION_1_1",
        ]
    )]
    public const int ArmRasterizationOrderAttachmentAccessSpecVersion = 1;

    [NativeTypeName(
        "#define VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME \"VK_ARM_rasterization_order_attachment_access\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_rasterization_order_attachment_access"],
        ImpliesSets = [
            "VK_ARM_rasterization_order_attachment_access+VK_KHR_get_physical_device_properties2",
            "VK_ARM_rasterization_order_attachment_access+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ArmRasterizationOrderAttachmentAccessExtensionName =>
        "VK_ARM_rasterization_order_attachment_access"u8;

    [NativeTypeName("#define VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_rgba10x6_formats"],
        ImpliesSets = [
            "VK_EXT_rgba10x6_formats+VK_KHR_sampler_ycbcr_conversion",
            "VK_EXT_rgba10x6_formats+VK_VERSION_1_1",
        ]
    )]
    public const int ExtRgba10X6FormatsSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME \"VK_EXT_rgba10x6_formats\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_rgba10x6_formats"],
        ImpliesSets = [
            "VK_EXT_rgba10x6_formats+VK_KHR_sampler_ycbcr_conversion",
            "VK_EXT_rgba10x6_formats+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtRgba10X6FormatsExtensionName => "VK_EXT_rgba10x6_formats"u8;

    [NativeTypeName("#define VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_mutable_descriptor_type"],
        ImpliesSets = ["VK_KHR_maintenance3"]
    )]
    public const int ValveMutableDescriptorTypeSpecVersion = 1;

    [NativeTypeName(
        "#define VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME \"VK_VALVE_mutable_descriptor_type\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_mutable_descriptor_type"],
        ImpliesSets = ["VK_KHR_maintenance3"]
    )]
    public static Utf8String ValveMutableDescriptorTypeExtensionName =>
        "VK_VALVE_mutable_descriptor_type"u8;

    [NativeTypeName("#define VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_input_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_vertex_input_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_input_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    public const int ExtVertexInputDynamicStateSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME \"VK_EXT_vertex_input_dynamic_state\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_input_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_vertex_input_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_input_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtVertexInputDynamicStateExtensionName =>
        "VK_EXT_vertex_input_dynamic_state"u8;

    [NativeTypeName("#define VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_physical_device_drm"],
        ImpliesSets = [
            "VK_EXT_physical_device_drm+VK_KHR_get_physical_device_properties2",
            "VK_EXT_physical_device_drm+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPhysicalDeviceDrmSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME \"VK_EXT_physical_device_drm\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_physical_device_drm"],
        ImpliesSets = [
            "VK_EXT_physical_device_drm+VK_KHR_get_physical_device_properties2",
            "VK_EXT_physical_device_drm+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPhysicalDeviceDrmExtensionName => "VK_EXT_physical_device_drm"u8;

    [NativeTypeName("#define VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_address_binding_report"],
        ImpliesSets = [
            "VK_EXT_debug_utils+VK_KHR_get_physical_device_properties2",
            "VK_EXT_debug_utils+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDeviceAddressBindingReportSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME \"VK_EXT_device_address_binding_report\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_address_binding_report"],
        ImpliesSets = [
            "VK_EXT_debug_utils+VK_KHR_get_physical_device_properties2",
            "VK_EXT_debug_utils+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDeviceAddressBindingReportExtensionName =>
        "VK_EXT_device_address_binding_report"u8;

    [NativeTypeName("#define VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_control"],
        ImpliesSets = [
            "VK_EXT_depth_clip_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clip_control+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDepthClipControlSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME \"VK_EXT_depth_clip_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_control"],
        ImpliesSets = [
            "VK_EXT_depth_clip_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clip_control+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDepthClipControlExtensionName => "VK_EXT_depth_clip_control"u8;

    [NativeTypeName("#define VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_primitive_topology_list_restart"],
        ImpliesSets = [
            "VK_EXT_primitive_topology_list_restart+VK_KHR_get_physical_device_properties2",
            "VK_EXT_primitive_topology_list_restart+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPrimitiveTopologyListRestartSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME \"VK_EXT_primitive_topology_list_restart\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_primitive_topology_list_restart"],
        ImpliesSets = [
            "VK_EXT_primitive_topology_list_restart+VK_KHR_get_physical_device_properties2",
            "VK_EXT_primitive_topology_list_restart+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPrimitiveTopologyListRestartExtensionName =>
        "VK_EXT_primitive_topology_list_restart"u8;

    [NativeTypeName("#define VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_present_mode_fifo_latest_ready"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    public const int ExtPresentModeFifoLatestReadySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_EXTENSION_NAME \"VK_EXT_present_mode_fifo_latest_ready\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_present_mode_fifo_latest_ready"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    public static Utf8String ExtPresentModeFifoLatestReadyExtensionName =>
        "VK_EXT_present_mode_fifo_latest_ready"u8;

    [NativeTypeName("#define VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public const int HuaweiSubpassShadingSpecVersion = 3;

    [NativeTypeName(
        "#define VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME \"VK_HUAWEI_subpass_shading\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String HuaweiSubpassShadingExtensionName => "VK_HUAWEI_subpass_shading"u8;

    [NativeTypeName("#define VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_invocation_mask"],
        ImpliesSets = [
            "VK_KHR_ray_tracing_pipeline+VK_KHR_synchronization2",
            "VK_KHR_ray_tracing_pipeline+VK_VERSION_1_3",
        ]
    )]
    public const int HuaweiInvocationMaskSpecVersion = 1;

    [NativeTypeName(
        "#define VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME \"VK_HUAWEI_invocation_mask\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_invocation_mask"],
        ImpliesSets = [
            "VK_KHR_ray_tracing_pipeline+VK_KHR_synchronization2",
            "VK_KHR_ray_tracing_pipeline+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String HuaweiInvocationMaskExtensionName => "VK_HUAWEI_invocation_mask"u8;

    [NativeTypeName("#define VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_external_memory_rdma"],
        ImpliesSets = [
            "VK_NV_external_memory_rdma+VK_KHR_external_memory",
            "VK_NV_external_memory_rdma+VK_VERSION_1_1",
        ]
    )]
    public const int NvExternalMemoryRdmaSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME \"VK_NV_external_memory_rdma\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_external_memory_rdma"],
        ImpliesSets = [
            "VK_NV_external_memory_rdma+VK_KHR_external_memory",
            "VK_NV_external_memory_rdma+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvExternalMemoryRdmaExtensionName => "VK_NV_external_memory_rdma"u8;

    [NativeTypeName("#define VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_properties"],
        ImpliesSets = [
            "VK_EXT_pipeline_properties+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_properties+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPipelinePropertiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME \"VK_EXT_pipeline_properties\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_properties"],
        ImpliesSets = [
            "VK_EXT_pipeline_properties+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_properties+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPipelinePropertiesExtensionName => "VK_EXT_pipeline_properties"u8;

    [NativeTypeName("#define VK_EXT_FRAME_BOUNDARY_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_frame_boundary"])]
    public const int ExtFrameBoundarySpecVersion = 1;

    [NativeTypeName("#define VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME \"VK_EXT_frame_boundary\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_frame_boundary"])]
    public static Utf8String ExtFrameBoundaryExtensionName => "VK_EXT_frame_boundary"u8;

    [NativeTypeName("#define VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multisampled_render_to_single_sampled"],
        ImpliesSets = ["VK_KHR_create_renderpass2+VK_KHR_depth_stencil_resolve", "VK_VERSION_1_2"]
    )]
    public const int ExtMultisampledRenderToSingleSampledSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME \"VK_EXT_multisampled_render_to_single_sampled\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multisampled_render_to_single_sampled"],
        ImpliesSets = ["VK_KHR_create_renderpass2+VK_KHR_depth_stencil_resolve", "VK_VERSION_1_2"]
    )]
    public static Utf8String ExtMultisampledRenderToSingleSampledExtensionName =>
        "VK_EXT_multisampled_render_to_single_sampled"u8;

    [NativeTypeName("#define VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    public const int ExtExtendedDynamicState2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME \"VK_EXT_extended_dynamic_state2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtExtendedDynamicState2ExtensionName =>
        "VK_EXT_extended_dynamic_state2"u8;

    [NativeTypeName("#define VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_color_write_enable"],
        ImpliesSets = [
            "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_color_write_enable+VK_VERSION_1_1",
        ]
    )]
    public const int ExtColorWriteEnableSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME \"VK_EXT_color_write_enable\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_color_write_enable"],
        ImpliesSets = [
            "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_color_write_enable+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtColorWriteEnableExtensionName => "VK_EXT_color_write_enable"u8;

    [NativeTypeName("#define VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_primitives_generated_query"],
        ImpliesSets = ["VK_EXT_transform_feedback"]
    )]
    public const int ExtPrimitivesGeneratedQuerySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME \"VK_EXT_primitives_generated_query\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_primitives_generated_query"],
        ImpliesSets = ["VK_EXT_transform_feedback"]
    )]
    public static Utf8String ExtPrimitivesGeneratedQueryExtensionName =>
        "VK_EXT_primitives_generated_query"u8;

    [NativeTypeName("#define VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_global_priority_query"],
        ImpliesSets = [
            "VK_EXT_global_priority+VK_KHR_get_physical_device_properties2",
            "VK_EXT_global_priority+VK_VERSION_1_1",
        ]
    )]
    public const int ExtGlobalPriorityQuerySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME \"VK_EXT_global_priority_query\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_global_priority_query"],
        ImpliesSets = [
            "VK_EXT_global_priority+VK_KHR_get_physical_device_properties2",
            "VK_EXT_global_priority+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtGlobalPriorityQueryExtensionName =>
        "VK_EXT_global_priority_query"u8;

    [NativeTypeName("#define VK_MAX_GLOBAL_PRIORITY_SIZE_EXT VK_MAX_GLOBAL_PRIORITY_SIZE")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_global_priority_query"],
        ImpliesSets = [
            "VK_EXT_global_priority+VK_KHR_get_physical_device_properties2",
            "VK_EXT_global_priority+VK_VERSION_1_1",
        ]
    )]
    public const uint MaxGlobalPrioritySizeEXT = 16U;

    [NativeTypeName("#define VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_view_min_lod"],
        ImpliesSets = [
            "VK_EXT_image_view_min_lod+VK_KHR_get_physical_device_properties2",
            "VK_EXT_image_view_min_lod+VK_VERSION_1_1",
        ]
    )]
    public const int ExtImageViewMinLodSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME \"VK_EXT_image_view_min_lod\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_view_min_lod"],
        ImpliesSets = [
            "VK_EXT_image_view_min_lod+VK_KHR_get_physical_device_properties2",
            "VK_EXT_image_view_min_lod+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtImageViewMinLodExtensionName => "VK_EXT_image_view_min_lod"u8;

    [NativeTypeName("#define VK_EXT_MULTI_DRAW_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    public const int ExtMultiDrawSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_MULTI_DRAW_EXTENSION_NAME \"VK_EXT_multi_draw\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtMultiDrawExtensionName => "VK_EXT_multi_draw"u8;

    [NativeTypeName("#define VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_2d_view_of_3d"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public const int ExtImage2DViewOf3DSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME \"VK_EXT_image_2d_view_of_3d\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_2d_view_of_3d"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtImage2DViewOf3DExtensionName => "VK_EXT_image_2d_view_of_3d"u8;

    [NativeTypeName("#define VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_tile_image"], ImpliesSets = ["VK_VERSION_1_3"])]
    public const int ExtShaderTileImageSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME \"VK_EXT_shader_tile_image\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_tile_image"], ImpliesSets = ["VK_VERSION_1_3"])]
    public static Utf8String ExtShaderTileImageExtensionName => "VK_EXT_shader_tile_image"u8;

    [NativeTypeName("#define VK_EXT_OPACITY_MICROMAP_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    public const int ExtOpacityMicromapSpecVersion = 2;

    [NativeTypeName("#define VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME \"VK_EXT_opacity_micromap\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtOpacityMicromapExtensionName => "VK_EXT_opacity_micromap"u8;

    [NativeTypeName("#define VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_load_store_op_none"])]
    public const int ExtLoadStoreOpNoneSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME \"VK_EXT_load_store_op_none\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_load_store_op_none"])]
    public static Utf8String ExtLoadStoreOpNoneExtensionName => "VK_EXT_load_store_op_none"u8;

    [NativeTypeName("#define VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_cluster_culling_shader"],
        ImpliesSets = [
            "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
            "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
        ]
    )]
    public const int HuaweiClusterCullingShaderSpecVersion = 3;

    [NativeTypeName(
        "#define VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME \"VK_HUAWEI_cluster_culling_shader\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_cluster_culling_shader"],
        ImpliesSets = [
            "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
            "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String HuaweiClusterCullingShaderExtensionName =>
        "VK_HUAWEI_cluster_culling_shader"u8;

    [NativeTypeName("#define VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_border_color_swizzle"],
        ImpliesSets = ["VK_EXT_custom_border_color"]
    )]
    public const int ExtBorderColorSwizzleSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME \"VK_EXT_border_color_swizzle\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_border_color_swizzle"],
        ImpliesSets = ["VK_EXT_custom_border_color"]
    )]
    public static Utf8String ExtBorderColorSwizzleExtensionName => "VK_EXT_border_color_swizzle"u8;

    [NativeTypeName("#define VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pageable_device_local_memory"],
        ImpliesSets = ["VK_EXT_memory_priority"]
    )]
    public const int ExtPageableDeviceLocalMemorySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME \"VK_EXT_pageable_device_local_memory\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pageable_device_local_memory"],
        ImpliesSets = ["VK_EXT_memory_priority"]
    )]
    public static Utf8String ExtPageableDeviceLocalMemoryExtensionName =>
        "VK_EXT_pageable_device_local_memory"u8;

    [NativeTypeName("#define VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_shader_core_properties"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public const int ArmShaderCorePropertiesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME \"VK_ARM_shader_core_properties\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_shader_core_properties"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public static Utf8String ArmShaderCorePropertiesExtensionName =>
        "VK_ARM_shader_core_properties"u8;

    [NativeTypeName("#define VK_ARM_SCHEDULING_CONTROLS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_scheduling_controls"],
        ImpliesSets = ["VK_ARM_shader_core_builtins"]
    )]
    public const int ArmSchedulingControlsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME \"VK_ARM_scheduling_controls\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_scheduling_controls"],
        ImpliesSets = ["VK_ARM_shader_core_builtins"]
    )]
    public static Utf8String ArmSchedulingControlsExtensionName => "VK_ARM_scheduling_controls"u8;

    [NativeTypeName("#define VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_sliced_view_of_3d"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public const int ExtImageSlicedViewOf3DSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME \"VK_EXT_image_sliced_view_of_3d\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_sliced_view_of_3d"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtImageSlicedViewOf3DExtensionName =>
        "VK_EXT_image_sliced_view_of_3d"u8;

    [NativeTypeName("#define VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    public const int ValveDescriptorSetHostMappingSpecVersion = 1;

    [NativeTypeName(
        "#define VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME \"VK_VALVE_descriptor_set_host_mapping\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ValveDescriptorSetHostMappingExtensionName =>
        "VK_VALVE_descriptor_set_host_mapping"u8;

    [NativeTypeName("#define VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clamp_zero_one"],
        ImpliesSets = [
            "VK_EXT_depth_clamp_zero_one+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clamp_zero_one+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDepthClampZeroOneSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME \"VK_EXT_depth_clamp_zero_one\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clamp_zero_one"],
        ImpliesSets = [
            "VK_EXT_depth_clamp_zero_one+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clamp_zero_one+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDepthClampZeroOneExtensionName => "VK_EXT_depth_clamp_zero_one"u8;

    [NativeTypeName("#define VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_non_seamless_cube_map"],
        ImpliesSets = [
            "VK_EXT_non_seamless_cube_map+VK_KHR_get_physical_device_properties2",
            "VK_EXT_non_seamless_cube_map+VK_VERSION_1_1",
        ]
    )]
    public const int ExtNonSeamlessCubeMapSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME \"VK_EXT_non_seamless_cube_map\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_non_seamless_cube_map"],
        ImpliesSets = [
            "VK_EXT_non_seamless_cube_map+VK_KHR_get_physical_device_properties2",
            "VK_EXT_non_seamless_cube_map+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtNonSeamlessCubeMapExtensionName => "VK_EXT_non_seamless_cube_map"u8;

    [NativeTypeName("#define VK_ARM_RENDER_PASS_STRIPED_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_render_pass_striped"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const int ArmRenderPassStripedSpecVersion = 1;

    [NativeTypeName(
        "#define VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME \"VK_ARM_render_pass_striped\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_render_pass_striped"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ArmRenderPassStripedExtensionName => "VK_ARM_render_pass_striped"u8;

    [NativeTypeName("#define VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION 3")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_fragment_density_map_offset"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1",
        ]
    )]
    public const int QcomFragmentDensityMapOffsetSpecVersion = 3;

    [NativeTypeName(
        "#define VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME \"VK_QCOM_fragment_density_map_offset\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_fragment_density_map_offset"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String QcomFragmentDensityMapOffsetExtensionName =>
        "VK_QCOM_fragment_density_map_offset"u8;

    [NativeTypeName("#define VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const int NvCopyMemoryIndirectSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME \"VK_NV_copy_memory_indirect\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public static Utf8String NvCopyMemoryIndirectExtensionName => "VK_NV_copy_memory_indirect"u8;

    [NativeTypeName("#define VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public const int NvMemoryDecompressionSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME \"VK_NV_memory_decompression\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    public static Utf8String NvMemoryDecompressionExtensionName => "VK_NV_memory_decompression"u8;

    [NativeTypeName("#define VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    public const int NvDeviceGeneratedCommandsComputeSpecVersion = 2;

    [NativeTypeName(
        "#define VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME \"VK_NV_device_generated_commands_compute\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    public static Utf8String NvDeviceGeneratedCommandsComputeExtensionName =>
        "VK_NV_device_generated_commands_compute"u8;

    [NativeTypeName("#define VK_NV_RAY_TRACING_LINEAR_SWEPT_SPHERES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing_linear_swept_spheres"],
        ImpliesSets = ["VK_KHR_ray_tracing_pipeline"]
    )]
    public const int NvRayTracingLinearSweptSpheresSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_RAY_TRACING_LINEAR_SWEPT_SPHERES_EXTENSION_NAME \"VK_NV_ray_tracing_linear_swept_spheres\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing_linear_swept_spheres"],
        ImpliesSets = ["VK_KHR_ray_tracing_pipeline"]
    )]
    public static Utf8String NvRayTracingLinearSweptSpheresExtensionName =>
        "VK_NV_ray_tracing_linear_swept_spheres"u8;

    [NativeTypeName("#define VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_linear_color_attachment"],
        ImpliesSets = [
            "VK_NV_linear_color_attachment+VK_KHR_get_physical_device_properties2",
            "VK_NV_linear_color_attachment+VK_VERSION_1_1",
        ]
    )]
    public const int NvLinearColorAttachmentSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME \"VK_NV_linear_color_attachment\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_linear_color_attachment"],
        ImpliesSets = [
            "VK_NV_linear_color_attachment+VK_KHR_get_physical_device_properties2",
            "VK_NV_linear_color_attachment+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String NvLinearColorAttachmentExtensionName =>
        "VK_NV_linear_color_attachment"u8;

    [NativeTypeName("#define VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_surfaceless_query"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    public const int GoogleSurfacelessQuerySpecVersion = 2;

    [NativeTypeName(
        "#define VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME \"VK_GOOGLE_surfaceless_query\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_surfaceless_query"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    public static Utf8String GoogleSurfacelessQueryExtensionName => "VK_GOOGLE_surfaceless_query"u8;

    [NativeTypeName("#define VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_compression_control_swapchain"],
        ImpliesSets = ["VK_EXT_image_compression_control"]
    )]
    public const int ExtImageCompressionControlSwapchainSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME \"VK_EXT_image_compression_control_swapchain\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_compression_control_swapchain"],
        ImpliesSets = ["VK_EXT_image_compression_control"]
    )]
    public static Utf8String ExtImageCompressionControlSwapchainExtensionName =>
        "VK_EXT_image_compression_control_swapchain"u8;

    [NativeTypeName("#define VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_image_processing"],
        ImpliesSets = [
            "VK_QCOM_image_processing+VK_KHR_format_feature_flags2",
            "VK_QCOM_image_processing+VK_VERSION_1_3",
        ]
    )]
    public const int QcomImageProcessingSpecVersion = 1;

    [NativeTypeName("#define VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME \"VK_QCOM_image_processing\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_image_processing"],
        ImpliesSets = [
            "VK_QCOM_image_processing+VK_KHR_format_feature_flags2",
            "VK_QCOM_image_processing+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String QcomImageProcessingExtensionName => "VK_QCOM_image_processing"u8;

    [NativeTypeName("#define VK_EXT_NESTED_COMMAND_BUFFER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_nested_command_buffer"],
        ImpliesSets = [
            "VK_EXT_nested_command_buffer+VK_KHR_get_physical_device_properties2",
            "VK_EXT_nested_command_buffer+VK_VERSION_1_1",
        ]
    )]
    public const int ExtNestedCommandBufferSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME \"VK_EXT_nested_command_buffer\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_nested_command_buffer"],
        ImpliesSets = [
            "VK_EXT_nested_command_buffer+VK_KHR_get_physical_device_properties2",
            "VK_EXT_nested_command_buffer+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtNestedCommandBufferExtensionName =>
        "VK_EXT_nested_command_buffer"u8;

    [NativeTypeName("#define VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_acquire_unmodified"],
        ImpliesSets = [
            "VK_EXT_external_memory_acquire_unmodified+VK_KHR_external_memory",
            "VK_EXT_external_memory_acquire_unmodified+VK_VERSION_1_1",
        ]
    )]
    public const int ExtExternalMemoryAcquireUnmodifiedSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME \"VK_EXT_external_memory_acquire_unmodified\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_acquire_unmodified"],
        ImpliesSets = [
            "VK_EXT_external_memory_acquire_unmodified+VK_KHR_external_memory",
            "VK_EXT_external_memory_acquire_unmodified+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtExternalMemoryAcquireUnmodifiedExtensionName =>
        "VK_EXT_external_memory_acquire_unmodified"u8;

    [NativeTypeName("#define VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    public const int ExtExtendedDynamicState3SpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME \"VK_EXT_extended_dynamic_state3\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtExtendedDynamicState3ExtensionName =>
        "VK_EXT_extended_dynamic_state3"u8;

    [NativeTypeName("#define VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_subpass_merge_feedback"],
        ImpliesSets = [
            "VK_EXT_subpass_merge_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_subpass_merge_feedback+VK_VERSION_1_1",
        ]
    )]
    public const int ExtSubpassMergeFeedbackSpecVersion = 2;

    [NativeTypeName(
        "#define VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME \"VK_EXT_subpass_merge_feedback\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_subpass_merge_feedback"],
        ImpliesSets = [
            "VK_EXT_subpass_merge_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_subpass_merge_feedback+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtSubpassMergeFeedbackExtensionName =>
        "VK_EXT_subpass_merge_feedback"u8;

    [NativeTypeName("#define VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_LUNARG_direct_driver_loading"])]
    public const int LunargDirectDriverLoadingSpecVersion = 1;

    [NativeTypeName(
        "#define VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME \"VK_LUNARG_direct_driver_loading\""
    )]
    [SupportedApiProfile("vulkan", ["VK_LUNARG_direct_driver_loading"])]
    public static Utf8String LunargDirectDriverLoadingExtensionName =>
        "VK_LUNARG_direct_driver_loading"u8;

    [NativeTypeName("#define VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const int ExtShaderModuleIdentifierSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME \"VK_EXT_shader_module_identifier\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtShaderModuleIdentifierExtensionName =>
        "VK_EXT_shader_module_identifier"u8;

    [NativeTypeName("#define VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_rasterization_order_attachment_access"],
        ImpliesSets = [
            "VK_EXT_rasterization_order_attachment_access+VK_KHR_get_physical_device_properties2",
            "VK_EXT_rasterization_order_attachment_access+VK_VERSION_1_1",
        ]
    )]
    public const int ExtRasterizationOrderAttachmentAccessSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME \"VK_EXT_rasterization_order_attachment_access\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_rasterization_order_attachment_access"],
        ImpliesSets = [
            "VK_EXT_rasterization_order_attachment_access+VK_KHR_get_physical_device_properties2",
            "VK_EXT_rasterization_order_attachment_access+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtRasterizationOrderAttachmentAccessExtensionName =>
        "VK_EXT_rasterization_order_attachment_access"u8;

    [NativeTypeName("#define VK_NV_OPTICAL_FLOW_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const int NvOpticalFlowSpecVersion = 1;

    [NativeTypeName("#define VK_NV_OPTICAL_FLOW_EXTENSION_NAME \"VK_NV_optical_flow\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String NvOpticalFlowExtensionName => "VK_NV_optical_flow"u8;

    [NativeTypeName("#define VK_EXT_LEGACY_DITHERING_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_legacy_dithering"],
        ImpliesSets = [
            "VK_EXT_legacy_dithering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_legacy_dithering+VK_VERSION_1_1",
        ]
    )]
    public const int ExtLegacyDitheringSpecVersion = 2;

    [NativeTypeName("#define VK_EXT_LEGACY_DITHERING_EXTENSION_NAME \"VK_EXT_legacy_dithering\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_legacy_dithering"],
        ImpliesSets = [
            "VK_EXT_legacy_dithering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_legacy_dithering+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtLegacyDitheringExtensionName => "VK_EXT_legacy_dithering"u8;

    [NativeTypeName("#define VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_protected_access"],
        ImpliesSets = [
            "VK_EXT_pipeline_protected_access+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_protected_access+VK_VERSION_1_1",
        ]
    )]
    public const int ExtPipelineProtectedAccessSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME \"VK_EXT_pipeline_protected_access\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_protected_access"],
        ImpliesSets = [
            "VK_EXT_pipeline_protected_access+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_protected_access+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtPipelineProtectedAccessExtensionName =>
        "VK_EXT_pipeline_protected_access"u8;

    [NativeTypeName("#define VK_AMD_ANTI_LAG_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_AMD_anti_lag"])]
    public const int AmdAntiLagSpecVersion = 1;

    [NativeTypeName("#define VK_AMD_ANTI_LAG_EXTENSION_NAME \"VK_AMD_anti_lag\"")]
    [SupportedApiProfile("vulkan", ["VK_AMD_anti_lag"])]
    public static Utf8String AmdAntiLagExtensionName => "VK_AMD_anti_lag"u8;

    [NativeTypeName("#define VK_EXT_SHADER_OBJECT_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const int ExtShaderObjectSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_SHADER_OBJECT_EXTENSION_NAME \"VK_EXT_shader_object\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtShaderObjectExtensionName => "VK_EXT_shader_object"u8;

    [NativeTypeName("#define VK_QCOM_TILE_PROPERTIES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    public const int QcomTilePropertiesSpecVersion = 1;

    [NativeTypeName("#define VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME \"VK_QCOM_tile_properties\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String QcomTilePropertiesExtensionName => "VK_QCOM_tile_properties"u8;

    [NativeTypeName("#define VK_SEC_AMIGO_PROFILING_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_SEC_amigo_profiling"],
        ImpliesSets = [
            "VK_SEC_amigo_profiling+VK_KHR_get_physical_device_properties2",
            "VK_SEC_amigo_profiling+VK_VERSION_1_1",
        ]
    )]
    public const int SecAmigoProfilingSpecVersion = 1;

    [NativeTypeName("#define VK_SEC_AMIGO_PROFILING_EXTENSION_NAME \"VK_SEC_amigo_profiling\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_SEC_amigo_profiling"],
        ImpliesSets = [
            "VK_SEC_amigo_profiling+VK_KHR_get_physical_device_properties2",
            "VK_SEC_amigo_profiling+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String SecAmigoProfilingExtensionName => "VK_SEC_amigo_profiling"u8;

    [NativeTypeName("#define VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_multiview_per_view_viewports"],
        ImpliesSets = [
            "VK_QCOM_multiview_per_view_viewports+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_multiview_per_view_viewports+VK_VERSION_1_1",
        ]
    )]
    public const int QcomMultiviewPerViewViewportsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME \"VK_QCOM_multiview_per_view_viewports\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_multiview_per_view_viewports"],
        ImpliesSets = [
            "VK_QCOM_multiview_per_view_viewports+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_multiview_per_view_viewports+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String QcomMultiviewPerViewViewportsExtensionName =>
        "VK_QCOM_multiview_per_view_viewports"u8;

    [NativeTypeName("#define VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing_invocation_reorder"],
        ImpliesSets = ["VK_KHR_ray_tracing_pipeline"]
    )]
    public const int NvRayTracingInvocationReorderSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME \"VK_NV_ray_tracing_invocation_reorder\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing_invocation_reorder"],
        ImpliesSets = ["VK_KHR_ray_tracing_pipeline"]
    )]
    public static Utf8String NvRayTracingInvocationReorderExtensionName =>
        "VK_NV_ray_tracing_invocation_reorder"u8;

    [NativeTypeName("#define VK_NV_COOPERATIVE_VECTOR_SPEC_VERSION 4")]
    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    public const int NvCooperativeVectorSpecVersion = 4;

    [NativeTypeName("#define VK_NV_COOPERATIVE_VECTOR_EXTENSION_NAME \"VK_NV_cooperative_vector\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    public static Utf8String NvCooperativeVectorExtensionName => "VK_NV_cooperative_vector"u8;

    [NativeTypeName("#define VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_extended_sparse_address_space"])]
    public const int NvExtendedSparseAddressSpaceSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME \"VK_NV_extended_sparse_address_space\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_extended_sparse_address_space"])]
    public static Utf8String NvExtendedSparseAddressSpaceExtensionName =>
        "VK_NV_extended_sparse_address_space"u8;

    [NativeTypeName("#define VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mutable_descriptor_type"],
        ImpliesSets = [
            "VK_EXT_mutable_descriptor_type+VK_KHR_maintenance3",
            "VK_EXT_mutable_descriptor_type+VK_VERSION_1_1",
        ]
    )]
    public const int ExtMutableDescriptorTypeSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME \"VK_EXT_mutable_descriptor_type\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mutable_descriptor_type"],
        ImpliesSets = [
            "VK_EXT_mutable_descriptor_type+VK_KHR_maintenance3",
            "VK_EXT_mutable_descriptor_type+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtMutableDescriptorTypeExtensionName =>
        "VK_EXT_mutable_descriptor_type"u8;

    [NativeTypeName("#define VK_EXT_LEGACY_VERTEX_ATTRIBUTES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_legacy_vertex_attributes"],
        ImpliesSets = ["VK_EXT_vertex_input_dynamic_state"]
    )]
    public const int ExtLegacyVertexAttributesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_LEGACY_VERTEX_ATTRIBUTES_EXTENSION_NAME \"VK_EXT_legacy_vertex_attributes\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_legacy_vertex_attributes"],
        ImpliesSets = ["VK_EXT_vertex_input_dynamic_state"]
    )]
    public static Utf8String ExtLegacyVertexAttributesExtensionName =>
        "VK_EXT_legacy_vertex_attributes"u8;

    [NativeTypeName("#define VK_EXT_LAYER_SETTINGS_SPEC_VERSION 2")]
    [SupportedApiProfile("vulkan", ["VK_EXT_layer_settings"])]
    public const int ExtLayerSettingsSpecVersion = 2;

    [NativeTypeName("#define VK_EXT_LAYER_SETTINGS_EXTENSION_NAME \"VK_EXT_layer_settings\"")]
    [SupportedApiProfile("vulkan", ["VK_EXT_layer_settings"])]
    public static Utf8String ExtLayerSettingsExtensionName => "VK_EXT_layer_settings"u8;

    [NativeTypeName("#define VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_shader_core_builtins"],
        ImpliesSets = [
            "VK_ARM_shader_core_builtins+VK_KHR_get_physical_device_properties2",
            "VK_ARM_shader_core_builtins+VK_VERSION_1_1",
        ]
    )]
    public const int ArmShaderCoreBuiltinsSpecVersion = 2;

    [NativeTypeName(
        "#define VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME \"VK_ARM_shader_core_builtins\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_shader_core_builtins"],
        ImpliesSets = [
            "VK_ARM_shader_core_builtins+VK_KHR_get_physical_device_properties2",
            "VK_ARM_shader_core_builtins+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ArmShaderCoreBuiltinsExtensionName => "VK_ARM_shader_core_builtins"u8;

    [NativeTypeName("#define VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_library_group_handles"],
        ImpliesSets = ["VK_KHR_pipeline_library", "VK_KHR_ray_tracing_pipeline"]
    )]
    public const int ExtPipelineLibraryGroupHandlesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME \"VK_EXT_pipeline_library_group_handles\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_library_group_handles"],
        ImpliesSets = ["VK_KHR_pipeline_library", "VK_KHR_ray_tracing_pipeline"]
    )]
    public static Utf8String ExtPipelineLibraryGroupHandlesExtensionName =>
        "VK_EXT_pipeline_library_group_handles"u8;

    [NativeTypeName("#define VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_dynamic_rendering_unused_attachments"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public const int ExtDynamicRenderingUnusedAttachmentsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME \"VK_EXT_dynamic_rendering_unused_attachments\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_dynamic_rendering_unused_attachments"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtDynamicRenderingUnusedAttachmentsExtensionName =>
        "VK_EXT_dynamic_rendering_unused_attachments"u8;

    [NativeTypeName("#define VK_NV_LOW_LATENCY_2_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    public const int NvLowLatency2SpecVersion = 2;

    [NativeTypeName("#define VK_NV_LOW_LATENCY_2_EXTENSION_NAME \"VK_NV_low_latency2\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String NvLowLatency2ExtensionName => "VK_NV_low_latency2"u8;

    [NativeTypeName("#define VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_QCOM_multiview_per_view_render_areas"])]
    public const int QcomMultiviewPerViewRenderAreasSpecVersion = 1;

    [NativeTypeName(
        "#define VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME \"VK_QCOM_multiview_per_view_render_areas\""
    )]
    [SupportedApiProfile("vulkan", ["VK_QCOM_multiview_per_view_render_areas"])]
    public static Utf8String QcomMultiviewPerViewRenderAreasExtensionName =>
        "VK_QCOM_multiview_per_view_render_areas"u8;

    [NativeTypeName("#define VK_NV_PER_STAGE_DESCRIPTOR_SET_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_per_stage_descriptor_set"],
        ImpliesSets = [
            "VK_NV_per_stage_descriptor_set+VK_KHR_maintenance6",
            "VK_NV_per_stage_descriptor_set+VK_VERSION_1_4",
        ]
    )]
    public const int NvPerStageDescriptorSetSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_PER_STAGE_DESCRIPTOR_SET_EXTENSION_NAME \"VK_NV_per_stage_descriptor_set\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_per_stage_descriptor_set"],
        ImpliesSets = [
            "VK_NV_per_stage_descriptor_set+VK_KHR_maintenance6",
            "VK_NV_per_stage_descriptor_set+VK_VERSION_1_4",
        ]
    )]
    public static Utf8String NvPerStageDescriptorSetExtensionName =>
        "VK_NV_per_stage_descriptor_set"u8;

    [NativeTypeName("#define VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_image_processing2"],
        ImpliesSets = ["VK_QCOM_image_processing"]
    )]
    public const int QcomImageProcessing2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME \"VK_QCOM_image_processing2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_image_processing2"],
        ImpliesSets = ["VK_QCOM_image_processing"]
    )]
    public static Utf8String QcomImageProcessing2ExtensionName => "VK_QCOM_image_processing2"u8;

    [NativeTypeName("#define VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_filter_cubic_weights"],
        ImpliesSets = ["VK_EXT_filter_cubic"]
    )]
    public const int QcomFilterCubicWeightsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME \"VK_QCOM_filter_cubic_weights\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_filter_cubic_weights"],
        ImpliesSets = ["VK_EXT_filter_cubic"]
    )]
    public static Utf8String QcomFilterCubicWeightsExtensionName =>
        "VK_QCOM_filter_cubic_weights"u8;

    [NativeTypeName("#define VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_QCOM_ycbcr_degamma"])]
    public const int QcomYcbcrDegammaSpecVersion = 1;

    [NativeTypeName("#define VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME \"VK_QCOM_ycbcr_degamma\"")]
    [SupportedApiProfile("vulkan", ["VK_QCOM_ycbcr_degamma"])]
    public static Utf8String QcomYcbcrDegammaExtensionName => "VK_QCOM_ycbcr_degamma"u8;

    [NativeTypeName("#define VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_filter_cubic_clamp"],
        ImpliesSets = [
            "VK_EXT_filter_cubic+VK_EXT_sampler_filter_minmax",
            "VK_EXT_filter_cubic+VK_VERSION_1_2",
        ]
    )]
    public const int QcomFilterCubicClampSpecVersion = 1;

    [NativeTypeName(
        "#define VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME \"VK_QCOM_filter_cubic_clamp\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_filter_cubic_clamp"],
        ImpliesSets = [
            "VK_EXT_filter_cubic+VK_EXT_sampler_filter_minmax",
            "VK_EXT_filter_cubic+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String QcomFilterCubicClampExtensionName => "VK_QCOM_filter_cubic_clamp"u8;

    [NativeTypeName("#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_attachment_feedback_loop_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
        ]
    )]
    public const int ExtAttachmentFeedbackLoopDynamicStateSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME \"VK_EXT_attachment_feedback_loop_dynamic_state\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_attachment_feedback_loop_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtAttachmentFeedbackLoopDynamicStateExtensionName =>
        "VK_EXT_attachment_feedback_loop_dynamic_state"u8;

    [NativeTypeName("#define VK_MSFT_LAYERED_DRIVER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_MSFT_layered_driver"],
        ImpliesSets = [
            "VK_MSFT_layered_driver+VK_KHR_get_physical_device_properties2",
            "VK_MSFT_layered_driver+VK_VERSION_1_1",
        ]
    )]
    public const int MsftLayeredDriverSpecVersion = 1;

    [NativeTypeName("#define VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME \"VK_MSFT_layered_driver\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_MSFT_layered_driver"],
        ImpliesSets = [
            "VK_MSFT_layered_driver+VK_KHR_get_physical_device_properties2",
            "VK_MSFT_layered_driver+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String MsftLayeredDriverExtensionName => "VK_MSFT_layered_driver"u8;

    [NativeTypeName("#define VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_descriptor_pool_overallocation"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public const int NvDescriptorPoolOverallocationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME \"VK_NV_descriptor_pool_overallocation\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_descriptor_pool_overallocation"],
        ImpliesSets = ["VK_VERSION_1_1"]
    )]
    public static Utf8String NvDescriptorPoolOverallocationExtensionName =>
        "VK_NV_descriptor_pool_overallocation"u8;

    [NativeTypeName("#define VK_QCOM_TILE_MEMORY_HEAP_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_memory_heap"],
        ImpliesSets = [
            "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public const int QcomTileMemoryHeapSpecVersion = 1;

    [NativeTypeName("#define VK_QCOM_TILE_MEMORY_HEAP_EXTENSION_NAME \"VK_QCOM_tile_memory_heap\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_memory_heap"],
        ImpliesSets = [
            "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    public static Utf8String QcomTileMemoryHeapExtensionName => "VK_QCOM_tile_memory_heap"u8;

    [NativeTypeName("#define VK_NV_DISPLAY_STEREO_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_display_stereo"],
        ImpliesSets = ["VK_KHR_display", "VK_KHR_get_display_properties2"]
    )]
    public const int NvDisplayStereoSpecVersion = 1;

    [NativeTypeName("#define VK_NV_DISPLAY_STEREO_EXTENSION_NAME \"VK_NV_display_stereo\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_display_stereo"],
        ImpliesSets = ["VK_KHR_display", "VK_KHR_get_display_properties2"]
    )]
    public static Utf8String NvDisplayStereoExtensionName => "VK_NV_display_stereo"u8;

    [NativeTypeName("#define VK_NV_RAW_ACCESS_CHAINS_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_raw_access_chains"])]
    public const int NvRawAccessChainsSpecVersion = 1;

    [NativeTypeName("#define VK_NV_RAW_ACCESS_CHAINS_EXTENSION_NAME \"VK_NV_raw_access_chains\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_raw_access_chains"])]
    public static Utf8String NvRawAccessChainsExtensionName => "VK_NV_raw_access_chains"u8;

    [NativeTypeName("#define VK_NV_EXTERNAL_COMPUTE_QUEUE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    public const int NvExternalComputeQueueSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_EXTERNAL_COMPUTE_QUEUE_EXTENSION_NAME \"VK_NV_external_compute_queue\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    public static Utf8String NvExternalComputeQueueExtensionName =>
        "VK_NV_external_compute_queue"u8;

    [NativeTypeName("#define VK_NV_COMMAND_BUFFER_INHERITANCE_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_command_buffer_inheritance"])]
    public const int NvCommandBufferInheritanceSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_COMMAND_BUFFER_INHERITANCE_EXTENSION_NAME \"VK_NV_command_buffer_inheritance\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_command_buffer_inheritance"])]
    public static Utf8String NvCommandBufferInheritanceExtensionName =>
        "VK_NV_command_buffer_inheritance"u8;

    [NativeTypeName("#define VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_shader_atomic_float16_vector"])]
    public const int NvShaderAtomicFloat16VectorSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_EXTENSION_NAME \"VK_NV_shader_atomic_float16_vector\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_shader_atomic_float16_vector"])]
    public static Utf8String NvShaderAtomicFloat16VectorExtensionName =>
        "VK_NV_shader_atomic_float16_vector"u8;

    [NativeTypeName("#define VK_EXT_SHADER_REPLICATED_COMPOSITES_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_replicated_composites"])]
    public const int ExtShaderReplicatedCompositesSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_SHADER_REPLICATED_COMPOSITES_EXTENSION_NAME \"VK_EXT_shader_replicated_composites\""
    )]
    [SupportedApiProfile("vulkan", ["VK_EXT_shader_replicated_composites"])]
    public static Utf8String ExtShaderReplicatedCompositesExtensionName =>
        "VK_EXT_shader_replicated_composites"u8;

    [NativeTypeName("#define VK_NV_RAY_TRACING_VALIDATION_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_ray_tracing_validation"])]
    public const int NvRayTracingValidationSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_RAY_TRACING_VALIDATION_EXTENSION_NAME \"VK_NV_ray_tracing_validation\""
    )]
    [SupportedApiProfile("vulkan", ["VK_NV_ray_tracing_validation"])]
    public static Utf8String NvRayTracingValidationExtensionName =>
        "VK_NV_ray_tracing_validation"u8;

    [NativeTypeName("#define VK_NV_CLUSTER_ACCELERATION_STRUCTURE_SPEC_VERSION 2")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public const int NvClusterAccelerationStructureSpecVersion = 2;

    [NativeTypeName(
        "#define VK_NV_CLUSTER_ACCELERATION_STRUCTURE_EXTENSION_NAME \"VK_NV_cluster_acceleration_structure\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public static Utf8String NvClusterAccelerationStructureExtensionName =>
        "VK_NV_cluster_acceleration_structure"u8;

    [NativeTypeName("#define VK_NV_PARTITIONED_ACCELERATION_STRUCTURE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public const int NvPartitionedAccelerationStructureSpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_PARTITIONED_ACCELERATION_STRUCTURE_EXTENSION_NAME \"VK_NV_partitioned_acceleration_structure\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    public static Utf8String NvPartitionedAccelerationStructureExtensionName =>
        "VK_NV_partitioned_acceleration_structure"u8;

    [NativeTypeName("#define VK_EXT_DEVICE_GENERATED_COMMANDS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public const int ExtDeviceGeneratedCommandsSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME \"VK_EXT_device_generated_commands\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtDeviceGeneratedCommandsExtensionName =>
        "VK_EXT_device_generated_commands"u8;

    [NativeTypeName("#define VK_MESA_IMAGE_ALIGNMENT_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_MESA_image_alignment_control"],
        ImpliesSets = [
            "VK_MESA_image_alignment_control+VK_KHR_get_physical_device_properties2",
            "VK_MESA_image_alignment_control+VK_VERSION_1_1",
        ]
    )]
    public const int MesaImageAlignmentControlSpecVersion = 1;

    [NativeTypeName(
        "#define VK_MESA_IMAGE_ALIGNMENT_CONTROL_EXTENSION_NAME \"VK_MESA_image_alignment_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_MESA_image_alignment_control"],
        ImpliesSets = [
            "VK_MESA_image_alignment_control+VK_KHR_get_physical_device_properties2",
            "VK_MESA_image_alignment_control+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String MesaImageAlignmentControlExtensionName =>
        "VK_MESA_image_alignment_control"u8;

    [NativeTypeName("#define VK_EXT_DEPTH_CLAMP_CONTROL_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clamp_control"],
        ImpliesSets = [
            "VK_EXT_depth_clamp_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clamp_control+VK_VERSION_1_1",
        ]
    )]
    public const int ExtDepthClampControlSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_DEPTH_CLAMP_CONTROL_EXTENSION_NAME \"VK_EXT_depth_clamp_control\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clamp_control"],
        ImpliesSets = [
            "VK_EXT_depth_clamp_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_clamp_control+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtDepthClampControlExtensionName => "VK_EXT_depth_clamp_control"u8;

    [NativeTypeName("#define VK_HUAWEI_HDR_VIVID_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_hdr_vivid"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_EXT_hdr_metadata+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_EXT_hdr_metadata+VK_VERSION_1_1",
        ]
    )]
    public const int HuaweiHdrVividSpecVersion = 1;

    [NativeTypeName("#define VK_HUAWEI_HDR_VIVID_EXTENSION_NAME \"VK_HUAWEI_hdr_vivid\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_hdr_vivid"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_EXT_hdr_metadata+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_EXT_hdr_metadata+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String HuaweiHdrVividExtensionName => "VK_HUAWEI_hdr_vivid"u8;

    [NativeTypeName("#define VK_NV_COOPERATIVE_MATRIX_2_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix2"],
        ImpliesSets = ["VK_KHR_cooperative_matrix"]
    )]
    public const int NvCooperativeMatrix2SpecVersion = 1;

    [NativeTypeName(
        "#define VK_NV_COOPERATIVE_MATRIX_2_EXTENSION_NAME \"VK_NV_cooperative_matrix2\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix2"],
        ImpliesSets = ["VK_KHR_cooperative_matrix"]
    )]
    public static Utf8String NvCooperativeMatrix2ExtensionName => "VK_NV_cooperative_matrix2"u8;

    [NativeTypeName("#define VK_ARM_PIPELINE_OPACITY_MICROMAP_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_pipeline_opacity_micromap"],
        ImpliesSets = ["VK_EXT_opacity_micromap"]
    )]
    public const int ArmPipelineOpacityMicromapSpecVersion = 1;

    [NativeTypeName(
        "#define VK_ARM_PIPELINE_OPACITY_MICROMAP_EXTENSION_NAME \"VK_ARM_pipeline_opacity_micromap\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_ARM_pipeline_opacity_micromap"],
        ImpliesSets = ["VK_EXT_opacity_micromap"]
    )]
    public static Utf8String ArmPipelineOpacityMicromapExtensionName =>
        "VK_ARM_pipeline_opacity_micromap"u8;

    [NativeTypeName("#define VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_attribute_robustness"],
        ImpliesSets = [
            "VK_EXT_vertex_attribute_robustness+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_attribute_robustness+VK_VERSION_1_1",
        ]
    )]
    public const int ExtVertexAttributeRobustnessSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_EXTENSION_NAME \"VK_EXT_vertex_attribute_robustness\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_attribute_robustness"],
        ImpliesSets = [
            "VK_EXT_vertex_attribute_robustness+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_attribute_robustness+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtVertexAttributeRobustnessExtensionName =>
        "VK_EXT_vertex_attribute_robustness"u8;

    [NativeTypeName("#define VK_NV_PRESENT_METERING_SPEC_VERSION 1")]
    [SupportedApiProfile("vulkan", ["VK_NV_present_metering"])]
    public const int NvPresentMeteringSpecVersion = 1;

    [NativeTypeName("#define VK_NV_PRESENT_METERING_EXTENSION_NAME \"VK_NV_present_metering\"")]
    [SupportedApiProfile("vulkan", ["VK_NV_present_metering"])]
    public static Utf8String NvPresentMeteringExtensionName => "VK_NV_present_metering"u8;

    [NativeTypeName("#define VK_EXT_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map_offset"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_VERSION_1_3",
        ]
    )]
    public const int ExtFragmentDensityMapOffsetSpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME \"VK_EXT_fragment_density_map_offset\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map_offset"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_VERSION_1_3",
        ]
    )]
    public static Utf8String ExtFragmentDensityMapOffsetExtensionName =>
        "VK_EXT_fragment_density_map_offset"u8;

    [NativeTypeName("#define VK_EXT_ZERO_INITIALIZE_DEVICE_MEMORY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_zero_initialize_device_memory"],
        ImpliesSets = [
            "VK_EXT_zero_initialize_device_memory+VK_KHR_get_physical_device_properties2",
            "VK_EXT_zero_initialize_device_memory+VK_VERSION_1_1",
        ]
    )]
    public const int ExtZeroInitializeDeviceMemorySpecVersion = 1;

    [NativeTypeName(
        "#define VK_EXT_ZERO_INITIALIZE_DEVICE_MEMORY_EXTENSION_NAME \"VK_EXT_zero_initialize_device_memory\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_zero_initialize_device_memory"],
        ImpliesSets = [
            "VK_EXT_zero_initialize_device_memory+VK_KHR_get_physical_device_properties2",
            "VK_EXT_zero_initialize_device_memory+VK_VERSION_1_1",
        ]
    )]
    public static Utf8String ExtZeroInitializeDeviceMemoryExtensionName =>
        "VK_EXT_zero_initialize_device_memory"u8;

    [NativeTypeName("#define VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION 13")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    public const int KhrAccelerationStructureSpecVersion = 13;

    [NativeTypeName(
        "#define VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME \"VK_KHR_acceleration_structure\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrAccelerationStructureExtensionName =>
        "VK_KHR_acceleration_structure"u8;

    [NativeTypeName("#define VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    public const int KhrRayTracingPipelineSpecVersion = 1;

    [NativeTypeName(
        "#define VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME \"VK_KHR_ray_tracing_pipeline\""
    )]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrRayTracingPipelineExtensionName => "VK_KHR_ray_tracing_pipeline"u8;

    [NativeTypeName("#define VK_KHR_RAY_QUERY_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_query"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    public const int KhrRayQuerySpecVersion = 1;

    [NativeTypeName("#define VK_KHR_RAY_QUERY_EXTENSION_NAME \"VK_KHR_ray_query\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_query"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    public static Utf8String KhrRayQueryExtensionName => "VK_KHR_ray_query"u8;

    [NativeTypeName("#define VK_EXT_MESH_SHADER_SPEC_VERSION 1")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    public const int ExtMeshShaderSpecVersion = 1;

    [NativeTypeName("#define VK_EXT_MESH_SHADER_EXTENSION_NAME \"VK_EXT_mesh_shader\"")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    public static Utf8String ExtMeshShaderExtensionName => "VK_EXT_mesh_shader"u8;

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AcquireDrmDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("int32_t")] int drmFd,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, int, DisplayKHRHandle*, Result>)(
                _slots[0] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[0] = nativeContext.LoadFunction("vkAcquireDrmDisplayEXT", "vulkan")
            )
        )(physicalDevice, drmFd, display);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_acquire_drm_display"],
        ImpliesSets = ["VK_EXT_direct_mode_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireDrmDisplayEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireDrmDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("int32_t")] int drmFd,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display
    ) => DllImport.AcquireDrmDisplayEXT(physicalDevice, drmFd, display);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AcquireDrmDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("int32_t")] int drmFd,
        [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display
    )
    {
        fixed (DisplayKHRHandle* __dsl_display = display)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).AcquireDrmDisplayEXT(__dsl_physicalDevice, drmFd, __dsl_display);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_acquire_drm_display"],
        ImpliesSets = ["VK_EXT_direct_mode_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireDrmDisplayEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireDrmDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("int32_t")] int drmFd,
        [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display
    ) => DllImport.AcquireDrmDisplayEXT(physicalDevice, drmFd, display);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AcquireNextImage2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAcquireNextImageInfoKHR *")] AcquireNextImageInfoKHR* pAcquireInfo,
        [NativeTypeName("uint32_t *")] uint* pImageIndex
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, AcquireNextImageInfoKHR*, uint*, Result>)(
                _slots[1] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[1] = nativeContext.LoadFunction("vkAcquireNextImage2KHR", "vulkan")
            )
        )(device, pAcquireInfo, pImageIndex);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireNextImage2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAcquireNextImageInfoKHR *")] AcquireNextImageInfoKHR* pAcquireInfo,
        [NativeTypeName("uint32_t *")] uint* pImageIndex
    ) => DllImport.AcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AcquireNextImage2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAcquireNextImageInfoKHR *")]
            Ref<AcquireNextImageInfoKHR> pAcquireInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pImageIndex
    )
    {
        fixed (uint* __dsl_pImageIndex = pImageIndex)
        fixed (AcquireNextImageInfoKHR* __dsl_pAcquireInfo = pAcquireInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).AcquireNextImage2KHR(
                    __dsl_device,
                    __dsl_pAcquireInfo,
                    __dsl_pImageIndex
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireNextImage2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAcquireNextImageInfoKHR *")]
            Ref<AcquireNextImageInfoKHR> pAcquireInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pImageIndex
    ) => DllImport.AcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AcquireNextImageKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("uint64_t")] ulong timeout,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle* semaphore,
        [NativeTypeName("VkFence")] FenceHandle* fence,
        [NativeTypeName("uint32_t *")] uint* pImageIndex
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SwapchainKHRHandle*,
                ulong,
                SemaphoreHandle*,
                FenceHandle*,
                uint*,
                Result>)(
                _slots[2] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[2] = nativeContext.LoadFunction("vkAcquireNextImageKHR", "vulkan")
            )
        )(device, swapchain, timeout, semaphore, fence, pImageIndex);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImageKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireNextImageKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("uint64_t")] ulong timeout,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle* semaphore,
        [NativeTypeName("VkFence")] FenceHandle* fence,
        [NativeTypeName("uint32_t *")] uint* pImageIndex
    ) => DllImport.AcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AcquireNextImageKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("uint64_t")] ulong timeout,
        [NativeTypeName("VkSemaphore")] Ref<SemaphoreHandle> semaphore,
        [NativeTypeName("VkFence")] Ref<FenceHandle> fence,
        [NativeTypeName("uint32_t *")] Ref<uint> pImageIndex
    )
    {
        fixed (uint* __dsl_pImageIndex = pImageIndex)
        fixed (FenceHandle* __dsl_fence = fence)
        fixed (SemaphoreHandle* __dsl_semaphore = semaphore)
        fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).AcquireNextImageKHR(
                    __dsl_device,
                    __dsl_swapchain,
                    timeout,
                    __dsl_semaphore,
                    __dsl_fence,
                    __dsl_pImageIndex
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireNextImageKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireNextImageKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("uint64_t")] ulong timeout,
        [NativeTypeName("VkSemaphore")] Ref<SemaphoreHandle> semaphore,
        [NativeTypeName("VkFence")] Ref<FenceHandle> fence,
        [NativeTypeName("uint32_t *")] Ref<uint> pImageIndex
    ) => DllImport.AcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AcquirePerformanceConfigurationIntel(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPerformanceConfigurationAcquireInfoINTEL *")]
            PerformanceConfigurationAcquireInfoIntel* pAcquireInfo,
        [NativeTypeName("VkPerformanceConfigurationINTEL *")]
            PerformanceConfigurationIntelHandle** pConfiguration
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PerformanceConfigurationAcquireInfoIntel*,
                PerformanceConfigurationIntelHandle**,
                Result>)(
                _slots[3] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[3] = nativeContext.LoadFunction(
                        "vkAcquirePerformanceConfigurationINTEL",
                        "vulkan"
                    )
            )
        )(device, pAcquireInfo, pConfiguration);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkAcquirePerformanceConfigurationINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquirePerformanceConfigurationIntel(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPerformanceConfigurationAcquireInfoINTEL *")]
            PerformanceConfigurationAcquireInfoIntel* pAcquireInfo,
        [NativeTypeName("VkPerformanceConfigurationINTEL *")]
            PerformanceConfigurationIntelHandle** pConfiguration
    ) => DllImport.AcquirePerformanceConfigurationIntel(device, pAcquireInfo, pConfiguration);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AcquirePerformanceConfigurationIntel(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPerformanceConfigurationAcquireInfoINTEL *")]
            Ref<PerformanceConfigurationAcquireInfoIntel> pAcquireInfo,
        [NativeTypeName("VkPerformanceConfigurationINTEL *")]
            Ref2D<PerformanceConfigurationIntelHandle> pConfiguration
    )
    {
        fixed (PerformanceConfigurationIntelHandle** __dsl_pConfiguration = pConfiguration)
        fixed (PerformanceConfigurationAcquireInfoIntel* __dsl_pAcquireInfo = pAcquireInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).AcquirePerformanceConfigurationIntel(
                    __dsl_device,
                    __dsl_pAcquireInfo,
                    __dsl_pConfiguration
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAcquirePerformanceConfigurationINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquirePerformanceConfigurationIntel(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPerformanceConfigurationAcquireInfoINTEL *")]
            Ref<PerformanceConfigurationAcquireInfoIntel> pAcquireInfo,
        [NativeTypeName("VkPerformanceConfigurationINTEL *")]
            Ref2D<PerformanceConfigurationIntelHandle> pConfiguration
    ) => DllImport.AcquirePerformanceConfigurationIntel(device, pAcquireInfo, pConfiguration);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AcquireProfilingLockKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAcquireProfilingLockInfoKHR *")] AcquireProfilingLockInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, AcquireProfilingLockInfoKHR*, Result>)(
                _slots[4] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[4] = nativeContext.LoadFunction("vkAcquireProfilingLockKHR", "vulkan")
            )
        )(device, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireProfilingLockKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireProfilingLockKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAcquireProfilingLockInfoKHR *")] AcquireProfilingLockInfoKHR* pInfo
    ) => DllImport.AcquireProfilingLockKHR(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AcquireProfilingLockKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAcquireProfilingLockInfoKHR *")]
            Ref<AcquireProfilingLockInfoKHR> pInfo
    )
    {
        fixed (AcquireProfilingLockInfoKHR* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).AcquireProfilingLockKHR(__dsl_device, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAcquireProfilingLockKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AcquireProfilingLockKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAcquireProfilingLockInfoKHR *")]
            Ref<AcquireProfilingLockInfoKHR> pInfo
    ) => DllImport.AcquireProfilingLockKHR(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AllocateCommandBuffers(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCommandBufferAllocateInfo *")]
            CommandBufferAllocateInfo* pAllocateInfo,
        [NativeTypeName("VkCommandBuffer *")] CommandBufferHandle** pCommandBuffers
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                CommandBufferAllocateInfo*,
                CommandBufferHandle**,
                Result>)(
                _slots[5] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[5] = nativeContext.LoadFunction("vkAllocateCommandBuffers", "vulkan")
            )
        )(device, pAllocateInfo, pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AllocateCommandBuffers(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCommandBufferAllocateInfo *")]
            CommandBufferAllocateInfo* pAllocateInfo,
        [NativeTypeName("VkCommandBuffer *")] CommandBufferHandle** pCommandBuffers
    ) => DllImport.AllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AllocateCommandBuffers(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCommandBufferAllocateInfo *")]
            Ref<CommandBufferAllocateInfo> pAllocateInfo,
        [NativeTypeName("VkCommandBuffer *")] Ref2D<CommandBufferHandle> pCommandBuffers
    )
    {
        fixed (CommandBufferHandle** __dsl_pCommandBuffers = pCommandBuffers)
        fixed (CommandBufferAllocateInfo* __dsl_pAllocateInfo = pAllocateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).AllocateCommandBuffers(
                    __dsl_device,
                    __dsl_pAllocateInfo,
                    __dsl_pCommandBuffers
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AllocateCommandBuffers(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCommandBufferAllocateInfo *")]
            Ref<CommandBufferAllocateInfo> pAllocateInfo,
        [NativeTypeName("VkCommandBuffer *")] Ref2D<CommandBufferHandle> pCommandBuffers
    ) => DllImport.AllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AllocateDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorSetAllocateInfo *")]
            DescriptorSetAllocateInfo* pAllocateInfo,
        [NativeTypeName("VkDescriptorSet *")] DescriptorSetHandle** pDescriptorSets
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DescriptorSetAllocateInfo*,
                DescriptorSetHandle**,
                Result>)(
                _slots[6] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[6] = nativeContext.LoadFunction("vkAllocateDescriptorSets", "vulkan")
            )
        )(device, pAllocateInfo, pDescriptorSets);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AllocateDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorSetAllocateInfo *")]
            DescriptorSetAllocateInfo* pAllocateInfo,
        [NativeTypeName("VkDescriptorSet *")] DescriptorSetHandle** pDescriptorSets
    ) => DllImport.AllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AllocateDescriptorSets(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorSetAllocateInfo *")]
            Ref<DescriptorSetAllocateInfo> pAllocateInfo,
        [NativeTypeName("VkDescriptorSet *")] Ref2D<DescriptorSetHandle> pDescriptorSets
    )
    {
        fixed (DescriptorSetHandle** __dsl_pDescriptorSets = pDescriptorSets)
        fixed (DescriptorSetAllocateInfo* __dsl_pAllocateInfo = pAllocateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).AllocateDescriptorSets(
                    __dsl_device,
                    __dsl_pAllocateInfo,
                    __dsl_pDescriptorSets
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AllocateDescriptorSets(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorSetAllocateInfo *")]
            Ref<DescriptorSetAllocateInfo> pAllocateInfo,
        [NativeTypeName("VkDescriptorSet *")] Ref2D<DescriptorSetHandle> pDescriptorSets
    ) => DllImport.AllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AllocateMemory(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMemoryAllocateInfo *")] MemoryAllocateInfo* pAllocateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDeviceMemory *")] DeviceMemoryHandle** pMemory
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                MemoryAllocateInfo*,
                AllocationCallbacks*,
                DeviceMemoryHandle**,
                Result>)(
                _slots[7] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[7] = nativeContext.LoadFunction("vkAllocateMemory", "vulkan")
            )
        )(device, pAllocateInfo, pAllocator, pMemory);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AllocateMemory(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMemoryAllocateInfo *")] MemoryAllocateInfo* pAllocateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDeviceMemory *")] DeviceMemoryHandle** pMemory
    ) => DllImport.AllocateMemory(device, pAllocateInfo, pAllocator, pMemory);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.AllocateMemory(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMemoryAllocateInfo *")] Ref<MemoryAllocateInfo> pAllocateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDeviceMemory *")] Ref2D<DeviceMemoryHandle> pMemory
    )
    {
        fixed (DeviceMemoryHandle** __dsl_pMemory = pMemory)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (MemoryAllocateInfo* __dsl_pAllocateInfo = pAllocateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).AllocateMemory(
                    __dsl_device,
                    __dsl_pAllocateInfo,
                    __dsl_pAllocator,
                    __dsl_pMemory
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAllocateMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result AllocateMemory(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMemoryAllocateInfo *")] Ref<MemoryAllocateInfo> pAllocateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDeviceMemory *")] Ref2D<DeviceMemoryHandle> pMemory
    ) => DllImport.AllocateMemory(device, pAllocateInfo, pAllocator, pMemory);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.AntiLagUpdateAMD(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAntiLagDataAMD *")] AntiLagDataAMD* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, AntiLagDataAMD*, void>)(
                _slots[8] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[8] = nativeContext.LoadFunction("vkAntiLagUpdateAMD", "vulkan")
            )
        )(device, pData);

    [SupportedApiProfile("vulkan", ["VK_AMD_anti_lag"])]
    [NativeFunction("vulkan", EntryPoint = "vkAntiLagUpdateAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void AntiLagUpdateAMD(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAntiLagDataAMD *")] AntiLagDataAMD* pData
    ) => DllImport.AntiLagUpdateAMD(device, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.AntiLagUpdateAMD(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAntiLagDataAMD *")] Ref<AntiLagDataAMD> pData
    )
    {
        fixed (AntiLagDataAMD* __dsl_pData = pData)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).AntiLagUpdateAMD(__dsl_device, __dsl_pData);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_AMD_anti_lag"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkAntiLagUpdateAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void AntiLagUpdateAMD(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAntiLagDataAMD *")] Ref<AntiLagDataAMD> pData
    ) => DllImport.AntiLagUpdateAMD(device, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BeginCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCommandBufferBeginInfo *")] CommandBufferBeginInfo* pBeginInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CommandBufferBeginInfo*, Result>)(
                _slots[9] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[9] = nativeContext.LoadFunction("vkBeginCommandBuffer", "vulkan")
            )
        )(commandBuffer, pBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBeginCommandBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BeginCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCommandBufferBeginInfo *")] CommandBufferBeginInfo* pBeginInfo
    ) => DllImport.BeginCommandBuffer(commandBuffer, pBeginInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BeginCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCommandBufferBeginInfo *")] Ref<CommandBufferBeginInfo> pBeginInfo
    )
    {
        fixed (CommandBufferBeginInfo* __dsl_pBeginInfo = pBeginInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            return (Result)
                ((IVulkan)this).BeginCommandBuffer(__dsl_commandBuffer, __dsl_pBeginInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBeginCommandBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BeginCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCommandBufferBeginInfo *")] Ref<CommandBufferBeginInfo> pBeginInfo
    ) => DllImport.BeginCommandBuffer(commandBuffer, pBeginInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindAccelerationStructureMemoryNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindAccelerationStructureMemoryInfoNV *")]
            BindAccelerationStructureMemoryInfoNV* pBindInfos
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                uint,
                BindAccelerationStructureMemoryInfoNV*,
                Result>)(
                _slots[10] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[10] = nativeContext.LoadFunction(
                        "vkBindAccelerationStructureMemoryNV",
                        "vulkan"
                    )
            )
        )(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindAccelerationStructureMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindAccelerationStructureMemoryNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindAccelerationStructureMemoryInfoNV *")]
            BindAccelerationStructureMemoryInfoNV* pBindInfos
    ) => DllImport.BindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindAccelerationStructureMemoryNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindAccelerationStructureMemoryInfoNV *")]
            Ref<BindAccelerationStructureMemoryInfoNV> pBindInfos
    )
    {
        fixed (BindAccelerationStructureMemoryInfoNV* __dsl_pBindInfos = pBindInfos)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).BindAccelerationStructureMemoryNV(
                    __dsl_device,
                    bindInfoCount,
                    __dsl_pBindInfos
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindAccelerationStructureMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindAccelerationStructureMemoryNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindAccelerationStructureMemoryInfoNV *")]
            Ref<BindAccelerationStructureMemoryInfoNV> pBindInfos
    ) => DllImport.BindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindBufferMemory(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
        [NativeTypeName("VkDeviceSize")] ulong memoryOffset
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, BufferHandle*, DeviceMemoryHandle*, ulong, Result>)(
                _slots[11] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[11] = nativeContext.LoadFunction("vkBindBufferMemory", "vulkan")
            )
        )(device, buffer, memory, memoryOffset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindBufferMemory(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
        [NativeTypeName("VkDeviceSize")] ulong memoryOffset
    ) => DllImport.BindBufferMemory(device, buffer, memory, memoryOffset);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindBufferMemory(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
        [NativeTypeName("VkDeviceSize")] ulong memoryOffset
    )
    {
        fixed (DeviceMemoryHandle* __dsl_memory = memory)
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).BindBufferMemory(
                    __dsl_device,
                    __dsl_buffer,
                    __dsl_memory,
                    memoryOffset
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindBufferMemory(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
        [NativeTypeName("VkDeviceSize")] ulong memoryOffset
    ) => DllImport.BindBufferMemory(device, buffer, memory, memoryOffset);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindBufferMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] BindBufferMemoryInfo* pBindInfos
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, uint, BindBufferMemoryInfo*, Result>)(
                _slots[12] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[12] = nativeContext.LoadFunction("vkBindBufferMemory2", "vulkan")
            )
        )(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindBufferMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] BindBufferMemoryInfo* pBindInfos
    ) => DllImport.BindBufferMemory2(device, bindInfoCount, pBindInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindBufferMemory2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] Ref<BindBufferMemoryInfo> pBindInfos
    )
    {
        fixed (BindBufferMemoryInfo* __dsl_pBindInfos = pBindInfos)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).BindBufferMemory2(__dsl_device, bindInfoCount, __dsl_pBindInfos);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindBufferMemory2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] Ref<BindBufferMemoryInfo> pBindInfos
    ) => DllImport.BindBufferMemory2(device, bindInfoCount, pBindInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindBufferMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] BindBufferMemoryInfo* pBindInfos
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, uint, BindBufferMemoryInfo*, Result>)(
                _slots[13] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[13] = nativeContext.LoadFunction("vkBindBufferMemory2KHR", "vulkan")
            )
        )(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindBufferMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] BindBufferMemoryInfo* pBindInfos
    ) => DllImport.BindBufferMemory2KHR(device, bindInfoCount, pBindInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindBufferMemory2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] Ref<BindBufferMemoryInfo> pBindInfos
    )
    {
        fixed (BindBufferMemoryInfo* __dsl_pBindInfos = pBindInfos)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).BindBufferMemory2KHR(__dsl_device, bindInfoCount, __dsl_pBindInfos);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindBufferMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindBufferMemory2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindBufferMemoryInfo *")] Ref<BindBufferMemoryInfo> pBindInfos
    ) => DllImport.BindBufferMemory2KHR(device, bindInfoCount, pBindInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindImageMemory(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
        [NativeTypeName("VkDeviceSize")] ulong memoryOffset
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ImageHandle*, DeviceMemoryHandle*, ulong, Result>)(
                _slots[14] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[14] = nativeContext.LoadFunction("vkBindImageMemory", "vulkan")
            )
        )(device, image, memory, memoryOffset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindImageMemory(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
        [NativeTypeName("VkDeviceSize")] ulong memoryOffset
    ) => DllImport.BindImageMemory(device, image, memory, memoryOffset);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindImageMemory(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
        [NativeTypeName("VkDeviceSize")] ulong memoryOffset
    )
    {
        fixed (DeviceMemoryHandle* __dsl_memory = memory)
        fixed (ImageHandle* __dsl_image = image)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).BindImageMemory(
                    __dsl_device,
                    __dsl_image,
                    __dsl_memory,
                    memoryOffset
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindImageMemory(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
        [NativeTypeName("VkDeviceSize")] ulong memoryOffset
    ) => DllImport.BindImageMemory(device, image, memory, memoryOffset);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindImageMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] BindImageMemoryInfo* pBindInfos
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, uint, BindImageMemoryInfo*, Result>)(
                _slots[15] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[15] = nativeContext.LoadFunction("vkBindImageMemory2", "vulkan")
            )
        )(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindImageMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] BindImageMemoryInfo* pBindInfos
    ) => DllImport.BindImageMemory2(device, bindInfoCount, pBindInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindImageMemory2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] Ref<BindImageMemoryInfo> pBindInfos
    )
    {
        fixed (BindImageMemoryInfo* __dsl_pBindInfos = pBindInfos)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).BindImageMemory2(__dsl_device, bindInfoCount, __dsl_pBindInfos);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindImageMemory2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] Ref<BindImageMemoryInfo> pBindInfos
    ) => DllImport.BindImageMemory2(device, bindInfoCount, pBindInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindImageMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] BindImageMemoryInfo* pBindInfos
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, uint, BindImageMemoryInfo*, Result>)(
                _slots[16] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[16] = nativeContext.LoadFunction("vkBindImageMemory2KHR", "vulkan")
            )
        )(device, bindInfoCount, pBindInfos);

    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindImageMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] BindImageMemoryInfo* pBindInfos
    ) => DllImport.BindImageMemory2KHR(device, bindInfoCount, pBindInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindImageMemory2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] Ref<BindImageMemoryInfo> pBindInfos
    )
    {
        fixed (BindImageMemoryInfo* __dsl_pBindInfos = pBindInfos)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).BindImageMemory2KHR(__dsl_device, bindInfoCount, __dsl_pBindInfos);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_bind_memory2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindImageMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindImageMemory2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindImageMemoryInfo *")] Ref<BindImageMemoryInfo> pBindInfos
    ) => DllImport.BindImageMemory2KHR(device, bindInfoCount, pBindInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindOpticalFlowSessionImageNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle* session,
        OpticalFlowSessionBindingPointNV bindingPoint,
        [NativeTypeName("VkImageView")] ImageViewHandle* view,
        ImageLayout layout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                OpticalFlowSessionNVHandle*,
                OpticalFlowSessionBindingPointNV,
                ImageViewHandle*,
                ImageLayout,
                Result>)(
                _slots[17] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[17] = nativeContext.LoadFunction(
                        "vkBindOpticalFlowSessionImageNV",
                        "vulkan"
                    )
            )
        )(device, session, bindingPoint, view, layout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindOpticalFlowSessionImageNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindOpticalFlowSessionImageNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle* session,
        OpticalFlowSessionBindingPointNV bindingPoint,
        [NativeTypeName("VkImageView")] ImageViewHandle* view,
        ImageLayout layout
    ) => DllImport.BindOpticalFlowSessionImageNV(device, session, bindingPoint, view, layout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindOpticalFlowSessionImageNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkOpticalFlowSessionNV")] Ref<OpticalFlowSessionNVHandle> session,
        OpticalFlowSessionBindingPointNV bindingPoint,
        [NativeTypeName("VkImageView")] Ref<ImageViewHandle> view,
        ImageLayout layout
    )
    {
        fixed (ImageViewHandle* __dsl_view = view)
        fixed (OpticalFlowSessionNVHandle* __dsl_session = session)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).BindOpticalFlowSessionImageNV(
                    __dsl_device,
                    __dsl_session,
                    bindingPoint,
                    __dsl_view,
                    layout
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindOpticalFlowSessionImageNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindOpticalFlowSessionImageNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkOpticalFlowSessionNV")] Ref<OpticalFlowSessionNVHandle> session,
        OpticalFlowSessionBindingPointNV bindingPoint,
        [NativeTypeName("VkImageView")] Ref<ImageViewHandle> view,
        ImageLayout layout
    ) => DllImport.BindOpticalFlowSessionImageNV(device, session, bindingPoint, view, layout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindVideoSessionMemoryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle* videoSession,
        [NativeTypeName("uint32_t")] uint bindSessionMemoryInfoCount,
        [NativeTypeName("const VkBindVideoSessionMemoryInfoKHR *")]
            BindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                VideoSessionKHRHandle*,
                uint,
                BindVideoSessionMemoryInfoKHR*,
                Result>)(
                _slots[18] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[18] = nativeContext.LoadFunction(
                        "vkBindVideoSessionMemoryKHR",
                        "vulkan"
                    )
            )
        )(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBindVideoSessionMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindVideoSessionMemoryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle* videoSession,
        [NativeTypeName("uint32_t")] uint bindSessionMemoryInfoCount,
        [NativeTypeName("const VkBindVideoSessionMemoryInfoKHR *")]
            BindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos
    ) =>
        DllImport.BindVideoSessionMemoryKHR(
            device,
            videoSession,
            bindSessionMemoryInfoCount,
            pBindSessionMemoryInfos
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BindVideoSessionMemoryKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkVideoSessionKHR")] Ref<VideoSessionKHRHandle> videoSession,
        [NativeTypeName("uint32_t")] uint bindSessionMemoryInfoCount,
        [NativeTypeName("const VkBindVideoSessionMemoryInfoKHR *")]
            Ref<BindVideoSessionMemoryInfoKHR> pBindSessionMemoryInfos
    )
    {
        fixed (
            BindVideoSessionMemoryInfoKHR* __dsl_pBindSessionMemoryInfos = pBindSessionMemoryInfos
        )
        fixed (VideoSessionKHRHandle* __dsl_videoSession = videoSession)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).BindVideoSessionMemoryKHR(
                    __dsl_device,
                    __dsl_videoSession,
                    bindSessionMemoryInfoCount,
                    __dsl_pBindSessionMemoryInfos
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBindVideoSessionMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BindVideoSessionMemoryKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkVideoSessionKHR")] Ref<VideoSessionKHRHandle> videoSession,
        [NativeTypeName("uint32_t")] uint bindSessionMemoryInfoCount,
        [NativeTypeName("const VkBindVideoSessionMemoryInfoKHR *")]
            Ref<BindVideoSessionMemoryInfoKHR> pBindSessionMemoryInfos
    ) =>
        DllImport.BindVideoSessionMemoryKHR(
            device,
            videoSession,
            bindSessionMemoryInfoCount,
            pBindSessionMemoryInfos
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BuildAccelerationStructuresKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            AccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeferredOperationKHRHandle*,
                uint,
                AccelerationStructureBuildGeometryInfoKHR*,
                AccelerationStructureBuildRangeInfoKHR**,
                Result>)(
                _slots[19] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[19] = nativeContext.LoadFunction(
                        "vkBuildAccelerationStructuresKHR",
                        "vulkan"
                    )
            )
        )(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBuildAccelerationStructuresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BuildAccelerationStructuresKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            AccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos
    ) =>
        DllImport.BuildAccelerationStructuresKHR(
            device,
            deferredOperation,
            infoCount,
            pInfos,
            ppBuildRangeInfos
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BuildAccelerationStructuresKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            Ref2D<AccelerationStructureBuildRangeInfoKHR> ppBuildRangeInfos
    )
    {
        fixed (AccelerationStructureBuildRangeInfoKHR** __dsl_ppBuildRangeInfos = ppBuildRangeInfos)
        fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pInfos = pInfos)
        fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).BuildAccelerationStructuresKHR(
                    __dsl_device,
                    __dsl_deferredOperation,
                    infoCount,
                    __dsl_pInfos,
                    __dsl_ppBuildRangeInfos
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBuildAccelerationStructuresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BuildAccelerationStructuresKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            Ref2D<AccelerationStructureBuildRangeInfoKHR> ppBuildRangeInfos
    ) =>
        DllImport.BuildAccelerationStructuresKHR(
            device,
            deferredOperation,
            infoCount,
            pInfos,
            ppBuildRangeInfos
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BuildMicromapsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pInfos
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeferredOperationKHRHandle*,
                uint,
                MicromapBuildInfoEXT*,
                Result>)(
                _slots[20] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[20] = nativeContext.LoadFunction("vkBuildMicromapsEXT", "vulkan")
            )
        )(device, deferredOperation, infoCount, pInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BuildMicromapsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pInfos
    ) => DllImport.BuildMicromapsEXT(device, deferredOperation, infoCount, pInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.BuildMicromapsEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pInfos
    )
    {
        fixed (MicromapBuildInfoEXT* __dsl_pInfos = pInfos)
        fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).BuildMicromapsEXT(
                    __dsl_device,
                    __dsl_deferredOperation,
                    infoCount,
                    __dsl_pInfos
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result BuildMicromapsEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pInfos
    ) => DllImport.BuildMicromapsEXT(device, deferredOperation, infoCount, pInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginConditionalRenderingEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkConditionalRenderingBeginInfoEXT *")]
            ConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, ConditionalRenderingBeginInfoEXT*, void>)(
                _slots[21] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[21] = nativeContext.LoadFunction(
                        "vkCmdBeginConditionalRenderingEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pConditionalRenderingBegin);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering"],
        ImpliesSets = [
            "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conditional_rendering+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginConditionalRenderingEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginConditionalRenderingEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkConditionalRenderingBeginInfoEXT *")]
            ConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin
    ) => DllImport.CmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginConditionalRenderingEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkConditionalRenderingBeginInfoEXT *")]
            Ref<ConditionalRenderingBeginInfoEXT> pConditionalRenderingBegin
    )
    {
        fixed (
            ConditionalRenderingBeginInfoEXT* __dsl_pConditionalRenderingBegin =
                pConditionalRenderingBegin
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBeginConditionalRenderingEXT(
                __dsl_commandBuffer,
                __dsl_pConditionalRenderingBegin
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering"],
        ImpliesSets = [
            "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conditional_rendering+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginConditionalRenderingEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginConditionalRenderingEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkConditionalRenderingBeginInfoEXT *")]
            Ref<ConditionalRenderingBeginInfoEXT> pConditionalRenderingBegin
    ) => DllImport.CmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, DebugUtilsLabelEXT*, void>)(
                _slots[22] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[22] = nativeContext.LoadFunction(
                        "vkCmdBeginDebugUtilsLabelEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pLabelInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) => DllImport.CmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    )
    {
        fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBeginDebugUtilsLabelEXT(__dsl_commandBuffer, __dsl_pLabelInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    ) => DllImport.CmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPerTileBeginInfoQCOM *")] PerTileBeginInfoQCOM* pPerTileBeginInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PerTileBeginInfoQCOM*, void>)(
                _slots[23] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[23] = nativeContext.LoadFunction(
                        "vkCmdBeginPerTileExecutionQCOM",
                        "vulkan"
                    )
            )
        )(commandBuffer, pPerTileBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginPerTileExecutionQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPerTileBeginInfoQCOM *")] PerTileBeginInfoQCOM* pPerTileBeginInfo
    ) => DllImport.CmdBeginPerTileExecutionQCOM(commandBuffer, pPerTileBeginInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPerTileBeginInfoQCOM *")]
            Ref<PerTileBeginInfoQCOM> pPerTileBeginInfo
    )
    {
        fixed (PerTileBeginInfoQCOM* __dsl_pPerTileBeginInfo = pPerTileBeginInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBeginPerTileExecutionQCOM(
                __dsl_commandBuffer,
                __dsl_pPerTileBeginInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginPerTileExecutionQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPerTileBeginInfoQCOM *")]
            Ref<PerTileBeginInfoQCOM> pPerTileBeginInfo
    ) => DllImport.CmdBeginPerTileExecutionQCOM(commandBuffer, pPerTileBeginInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginQuery(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("VkQueryControlFlags")] uint flags
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, QueryPoolHandle*, uint, uint, void>)(
                _slots[24] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[24] = nativeContext.LoadFunction("vkCmdBeginQuery", "vulkan")
            )
        )(commandBuffer, queryPool, query, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginQuery")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginQuery(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("VkQueryControlFlags")] uint flags
    ) => DllImport.CmdBeginQuery(commandBuffer, queryPool, query, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginQuery(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("VkQueryControlFlags")] uint flags
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBeginQuery(__dsl_commandBuffer, __dsl_queryPool, query, flags);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginQuery")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginQuery(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("VkQueryControlFlags")] uint flags
    ) => DllImport.CmdBeginQuery(commandBuffer, queryPool, query, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginQueryIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("VkQueryControlFlags")] uint flags,
        [NativeTypeName("uint32_t")] uint index
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, QueryPoolHandle*, uint, uint, uint, void>)(
                _slots[25] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[25] = nativeContext.LoadFunction("vkCmdBeginQueryIndexedEXT", "vulkan")
            )
        )(commandBuffer, queryPool, query, flags, index);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginQueryIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginQueryIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("VkQueryControlFlags")] uint flags,
        [NativeTypeName("uint32_t")] uint index
    ) => DllImport.CmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginQueryIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("VkQueryControlFlags")] uint flags,
        [NativeTypeName("uint32_t")] uint index
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBeginQueryIndexedEXT(
                __dsl_commandBuffer,
                __dsl_queryPool,
                query,
                flags,
                index
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginQueryIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginQueryIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("VkQueryControlFlags")] uint flags,
        [NativeTypeName("uint32_t")] uint index
    ) => DllImport.CmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginRendering(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, RenderingInfo*, void>)(
                _slots[26] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[26] = nativeContext.LoadFunction("vkCmdBeginRendering", "vulkan")
            )
        )(commandBuffer, pRenderingInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRendering")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRendering(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo
    ) => DllImport.CmdBeginRendering(commandBuffer, pRenderingInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginRendering(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo
    )
    {
        fixed (RenderingInfo* __dsl_pRenderingInfo = pRenderingInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBeginRendering(__dsl_commandBuffer, __dsl_pRenderingInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRendering")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRendering(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo
    ) => DllImport.CmdBeginRendering(commandBuffer, pRenderingInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginRenderingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, RenderingInfo*, void>)(
                _slots[27] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[27] = nativeContext.LoadFunction("vkCmdBeginRenderingKHR", "vulkan")
            )
        )(commandBuffer, pRenderingInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo
    ) => DllImport.CmdBeginRenderingKHR(commandBuffer, pRenderingInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginRenderingKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo
    )
    {
        fixed (RenderingInfo* __dsl_pRenderingInfo = pRenderingInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBeginRenderingKHR(__dsl_commandBuffer, __dsl_pRenderingInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderingKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo
    ) => DllImport.CmdBeginRenderingKHR(commandBuffer, pRenderingInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginRenderPass(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
        SubpassContents contents
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                RenderPassBeginInfo*,
                SubpassContents,
                void>)(
                _slots[28] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[28] = nativeContext.LoadFunction("vkCmdBeginRenderPass", "vulkan")
            )
        )(commandBuffer, pRenderPassBegin, contents);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderPass(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
        SubpassContents contents
    ) => DllImport.CmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginRenderPass(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] Ref<RenderPassBeginInfo> pRenderPassBegin,
        SubpassContents contents
    )
    {
        fixed (RenderPassBeginInfo* __dsl_pRenderPassBegin = pRenderPassBegin)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBeginRenderPass(
                __dsl_commandBuffer,
                __dsl_pRenderPassBegin,
                contents
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderPass(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] Ref<RenderPassBeginInfo> pRenderPassBegin,
        SubpassContents contents
    ) => DllImport.CmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginRenderPass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                RenderPassBeginInfo*,
                SubpassBeginInfo*,
                void>)(
                _slots[29] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[29] = nativeContext.LoadFunction("vkCmdBeginRenderPass2", "vulkan")
            )
        )(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderPass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo
    ) => DllImport.CmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginRenderPass2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] Ref<RenderPassBeginInfo> pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo
    )
    {
        fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
        fixed (RenderPassBeginInfo* __dsl_pRenderPassBegin = pRenderPassBegin)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBeginRenderPass2(
                __dsl_commandBuffer,
                __dsl_pRenderPassBegin,
                __dsl_pSubpassBeginInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderPass2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] Ref<RenderPassBeginInfo> pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo
    ) => DllImport.CmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                RenderPassBeginInfo*,
                SubpassBeginInfo*,
                void>)(
                _slots[30] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[30] = nativeContext.LoadFunction("vkCmdBeginRenderPass2KHR", "vulkan")
            )
        )(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] RenderPassBeginInfo* pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo
    ) => DllImport.CmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] Ref<RenderPassBeginInfo> pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo
    )
    {
        fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
        fixed (RenderPassBeginInfo* __dsl_pRenderPassBegin = pRenderPassBegin)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBeginRenderPass2KHR(
                __dsl_commandBuffer,
                __dsl_pRenderPassBegin,
                __dsl_pSubpassBeginInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderPassBeginInfo *")] Ref<RenderPassBeginInfo> pRenderPassBegin,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo
    ) => DllImport.CmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle** pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pCounterBufferOffsets
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, BufferHandle**, ulong*, void>)(
                _slots[31] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[31] = nativeContext.LoadFunction(
                        "vkCmdBeginTransformFeedbackEXT",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            firstCounterBuffer,
            counterBufferCount,
            pCounterBuffers,
            pCounterBufferOffsets
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginTransformFeedbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle** pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pCounterBufferOffsets
    ) =>
        DllImport.CmdBeginTransformFeedbackEXT(
            commandBuffer,
            firstCounterBuffer,
            counterBufferCount,
            pCounterBuffers,
            pCounterBufferOffsets
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pCounterBufferOffsets
    )
    {
        fixed (ulong* __dsl_pCounterBufferOffsets = pCounterBufferOffsets)
        fixed (BufferHandle** __dsl_pCounterBuffers = pCounterBuffers)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBeginTransformFeedbackEXT(
                __dsl_commandBuffer,
                firstCounterBuffer,
                counterBufferCount,
                __dsl_pCounterBuffers,
                __dsl_pCounterBufferOffsets
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginTransformFeedbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pCounterBufferOffsets
    ) =>
        DllImport.CmdBeginTransformFeedbackEXT(
            commandBuffer,
            firstCounterBuffer,
            counterBufferCount,
            pCounterBuffers,
            pCounterBufferOffsets
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkVideoBeginCodingInfoKHR *")] VideoBeginCodingInfoKHR* pBeginInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, VideoBeginCodingInfoKHR*, void>)(
                _slots[32] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[32] = nativeContext.LoadFunction("vkCmdBeginVideoCodingKHR", "vulkan")
            )
        )(commandBuffer, pBeginInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkVideoBeginCodingInfoKHR *")] VideoBeginCodingInfoKHR* pBeginInfo
    ) => DllImport.CmdBeginVideoCodingKHR(commandBuffer, pBeginInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBeginVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkVideoBeginCodingInfoKHR *")]
            Ref<VideoBeginCodingInfoKHR> pBeginInfo
    )
    {
        fixed (VideoBeginCodingInfoKHR* __dsl_pBeginInfo = pBeginInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBeginVideoCodingKHR(__dsl_commandBuffer, __dsl_pBeginInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBeginVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBeginVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkVideoBeginCodingInfoKHR *")]
            Ref<VideoBeginCodingInfoKHR> pBeginInfo
    ) => DllImport.CmdBeginVideoCodingKHR(commandBuffer, pBeginInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindDescriptorBufferEmbeddedSamplers2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *")]
            BindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BindDescriptorBufferEmbeddedSamplersInfoEXT*,
                void>)(
                _slots[33] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[33] = nativeContext.LoadFunction(
                        "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorBufferEmbeddedSamplers2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *")]
            BindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo
    ) =>
        DllImport.CmdBindDescriptorBufferEmbeddedSamplers2EXT(
            commandBuffer,
            pBindDescriptorBufferEmbeddedSamplersInfo
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindDescriptorBufferEmbeddedSamplers2EXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *")]
            Ref<BindDescriptorBufferEmbeddedSamplersInfoEXT> pBindDescriptorBufferEmbeddedSamplersInfo
    )
    {
        fixed (
            BindDescriptorBufferEmbeddedSamplersInfoEXT* __dsl_pBindDescriptorBufferEmbeddedSamplersInfo =
                pBindDescriptorBufferEmbeddedSamplersInfo
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindDescriptorBufferEmbeddedSamplers2EXT(
                __dsl_commandBuffer,
                __dsl_pBindDescriptorBufferEmbeddedSamplersInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorBufferEmbeddedSamplers2EXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *")]
            Ref<BindDescriptorBufferEmbeddedSamplersInfoEXT> pBindDescriptorBufferEmbeddedSamplersInfo
    ) =>
        DllImport.CmdBindDescriptorBufferEmbeddedSamplers2EXT(
            commandBuffer,
            pBindDescriptorBufferEmbeddedSamplersInfo
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindDescriptorBufferEmbeddedSamplersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint set
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                PipelineBindPoint,
                PipelineLayoutHandle*,
                uint,
                void>)(
                _slots[34] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[34] = nativeContext.LoadFunction(
                        "vkCmdBindDescriptorBufferEmbeddedSamplersEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pipelineBindPoint, layout, set);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorBufferEmbeddedSamplersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint set
    ) =>
        DllImport.CmdBindDescriptorBufferEmbeddedSamplersEXT(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindDescriptorBufferEmbeddedSamplersEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint set
    )
    {
        fixed (PipelineLayoutHandle* __dsl_layout = layout)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindDescriptorBufferEmbeddedSamplersEXT(
                __dsl_commandBuffer,
                pipelineBindPoint,
                __dsl_layout,
                set
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorBufferEmbeddedSamplersEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint set
    ) =>
        DllImport.CmdBindDescriptorBufferEmbeddedSamplersEXT(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindDescriptorBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint bufferCount,
        [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
            DescriptorBufferBindingInfoEXT* pBindingInfos
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                DescriptorBufferBindingInfoEXT*,
                void>)(
                _slots[35] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[35] = nativeContext.LoadFunction(
                        "vkCmdBindDescriptorBuffersEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, bufferCount, pBindingInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint bufferCount,
        [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
            DescriptorBufferBindingInfoEXT* pBindingInfos
    ) => DllImport.CmdBindDescriptorBuffersEXT(commandBuffer, bufferCount, pBindingInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindDescriptorBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint bufferCount,
        [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
            Ref<DescriptorBufferBindingInfoEXT> pBindingInfos
    )
    {
        fixed (DescriptorBufferBindingInfoEXT* __dsl_pBindingInfos = pBindingInfos)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindDescriptorBuffersEXT(
                __dsl_commandBuffer,
                bufferCount,
                __dsl_pBindingInfos
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint bufferCount,
        [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
            Ref<DescriptorBufferBindingInfoEXT> pBindingInfos
    ) => DllImport.CmdBindDescriptorBuffersEXT(commandBuffer, bufferCount, pBindingInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindDescriptorBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
            DescriptorBufferBindingInfoEXT pBindingInfos
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindDescriptorBuffersEXT(
                __dsl_commandBuffer,
                1,
                (DescriptorBufferBindingInfoEXT*)&pBindingInfos
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDescriptorBufferBindingInfoEXT *")]
            DescriptorBufferBindingInfoEXT pBindingInfos
    ) => DllImport.CmdBindDescriptorBuffersEXT(commandBuffer, pBindingInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindDescriptorSets(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] DescriptorSetHandle** pDescriptorSets,
        [NativeTypeName("uint32_t")] uint dynamicOffsetCount,
        [NativeTypeName("const uint32_t *")] uint* pDynamicOffsets
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                PipelineBindPoint,
                PipelineLayoutHandle*,
                uint,
                uint,
                DescriptorSetHandle**,
                uint,
                uint*,
                void>)(
                _slots[36] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[36] = nativeContext.LoadFunction("vkCmdBindDescriptorSets", "vulkan")
            )
        )(
            commandBuffer,
            pipelineBindPoint,
            layout,
            firstSet,
            descriptorSetCount,
            pDescriptorSets,
            dynamicOffsetCount,
            pDynamicOffsets
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorSets(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] DescriptorSetHandle** pDescriptorSets,
        [NativeTypeName("uint32_t")] uint dynamicOffsetCount,
        [NativeTypeName("const uint32_t *")] uint* pDynamicOffsets
    ) =>
        DllImport.CmdBindDescriptorSets(
            commandBuffer,
            pipelineBindPoint,
            layout,
            firstSet,
            descriptorSetCount,
            pDescriptorSets,
            dynamicOffsetCount,
            pDynamicOffsets
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindDescriptorSets(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] Ref2D<DescriptorSetHandle> pDescriptorSets,
        [NativeTypeName("uint32_t")] uint dynamicOffsetCount,
        [NativeTypeName("const uint32_t *")] Ref<uint> pDynamicOffsets
    )
    {
        fixed (uint* __dsl_pDynamicOffsets = pDynamicOffsets)
        fixed (DescriptorSetHandle** __dsl_pDescriptorSets = pDescriptorSets)
        fixed (PipelineLayoutHandle* __dsl_layout = layout)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindDescriptorSets(
                __dsl_commandBuffer,
                pipelineBindPoint,
                __dsl_layout,
                firstSet,
                descriptorSetCount,
                __dsl_pDescriptorSets,
                dynamicOffsetCount,
                __dsl_pDynamicOffsets
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorSets(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] Ref2D<DescriptorSetHandle> pDescriptorSets,
        [NativeTypeName("uint32_t")] uint dynamicOffsetCount,
        [NativeTypeName("const uint32_t *")] Ref<uint> pDynamicOffsets
    ) =>
        DllImport.CmdBindDescriptorSets(
            commandBuffer,
            pipelineBindPoint,
            layout,
            firstSet,
            descriptorSetCount,
            pDescriptorSets,
            dynamicOffsetCount,
            pDynamicOffsets
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindDescriptorSets2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            BindDescriptorSetsInfo* pBindDescriptorSetsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, BindDescriptorSetsInfo*, void>)(
                _slots[37] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[37] = nativeContext.LoadFunction("vkCmdBindDescriptorSets2", "vulkan")
            )
        )(commandBuffer, pBindDescriptorSetsInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorSets2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            BindDescriptorSetsInfo* pBindDescriptorSetsInfo
    ) => DllImport.CmdBindDescriptorSets2(commandBuffer, pBindDescriptorSetsInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindDescriptorSets2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            Ref<BindDescriptorSetsInfo> pBindDescriptorSetsInfo
    )
    {
        fixed (BindDescriptorSetsInfo* __dsl_pBindDescriptorSetsInfo = pBindDescriptorSetsInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindDescriptorSets2(
                __dsl_commandBuffer,
                __dsl_pBindDescriptorSetsInfo
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorSets2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            Ref<BindDescriptorSetsInfo> pBindDescriptorSetsInfo
    ) => DllImport.CmdBindDescriptorSets2(commandBuffer, pBindDescriptorSetsInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindDescriptorSets2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            BindDescriptorSetsInfo* pBindDescriptorSetsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, BindDescriptorSetsInfo*, void>)(
                _slots[38] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[38] = nativeContext.LoadFunction(
                        "vkCmdBindDescriptorSets2KHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pBindDescriptorSetsInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorSets2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            BindDescriptorSetsInfo* pBindDescriptorSetsInfo
    ) => DllImport.CmdBindDescriptorSets2KHR(commandBuffer, pBindDescriptorSetsInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindDescriptorSets2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            Ref<BindDescriptorSetsInfo> pBindDescriptorSetsInfo
    )
    {
        fixed (BindDescriptorSetsInfo* __dsl_pBindDescriptorSetsInfo = pBindDescriptorSetsInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindDescriptorSets2KHR(
                __dsl_commandBuffer,
                __dsl_pBindDescriptorSetsInfo
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindDescriptorSets2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindDescriptorSets2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkBindDescriptorSetsInfo *")]
            Ref<BindDescriptorSetsInfo> pBindDescriptorSetsInfo
    ) => DllImport.CmdBindDescriptorSets2KHR(commandBuffer, pBindDescriptorSetsInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindIndexBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        IndexType indexType
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, BufferHandle*, ulong, IndexType, void>)(
                _slots[39] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[39] = nativeContext.LoadFunction("vkCmdBindIndexBuffer", "vulkan")
            )
        )(commandBuffer, buffer, offset, indexType);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindIndexBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        IndexType indexType
    ) => DllImport.CmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindIndexBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        IndexType indexType
    )
    {
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindIndexBuffer(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                indexType
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindIndexBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        IndexType indexType
    ) => DllImport.CmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindIndexBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        IndexType indexType
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BufferHandle*,
                ulong,
                ulong,
                IndexType,
                void>)(
                _slots[40] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[40] = nativeContext.LoadFunction("vkCmdBindIndexBuffer2", "vulkan")
            )
        )(commandBuffer, buffer, offset, size, indexType);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindIndexBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        IndexType indexType
    ) => DllImport.CmdBindIndexBuffer2(commandBuffer, buffer, offset, size, indexType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindIndexBuffer2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        IndexType indexType
    )
    {
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindIndexBuffer2(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                size,
                indexType
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindIndexBuffer2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        IndexType indexType
    ) => DllImport.CmdBindIndexBuffer2(commandBuffer, buffer, offset, size, indexType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindIndexBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        IndexType indexType
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BufferHandle*,
                ulong,
                ulong,
                IndexType,
                void>)(
                _slots[41] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[41] = nativeContext.LoadFunction("vkCmdBindIndexBuffer2KHR", "vulkan")
            )
        )(commandBuffer, buffer, offset, size, indexType);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindIndexBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        IndexType indexType
    ) => DllImport.CmdBindIndexBuffer2KHR(commandBuffer, buffer, offset, size, indexType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindIndexBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        IndexType indexType
    )
    {
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindIndexBuffer2KHR(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                size,
                indexType
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindIndexBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindIndexBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        IndexType indexType
    ) => DllImport.CmdBindIndexBuffer2KHR(commandBuffer, buffer, offset, size, indexType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindInvocationMaskHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImageView")] ImageViewHandle* imageView,
        ImageLayout imageLayout
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, ImageViewHandle*, ImageLayout, void>)(
                _slots[42] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[42] = nativeContext.LoadFunction(
                        "vkCmdBindInvocationMaskHUAWEI",
                        "vulkan"
                    )
            )
        )(commandBuffer, imageView, imageLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_invocation_mask"],
        ImpliesSets = [
            "VK_KHR_ray_tracing_pipeline+VK_KHR_synchronization2",
            "VK_KHR_ray_tracing_pipeline+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindInvocationMaskHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindInvocationMaskHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImageView")] ImageViewHandle* imageView,
        ImageLayout imageLayout
    ) => DllImport.CmdBindInvocationMaskHuawei(commandBuffer, imageView, imageLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindInvocationMaskHuawei(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImageView")] Ref<ImageViewHandle> imageView,
        ImageLayout imageLayout
    )
    {
        fixed (ImageViewHandle* __dsl_imageView = imageView)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindInvocationMaskHuawei(
                __dsl_commandBuffer,
                __dsl_imageView,
                imageLayout
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_invocation_mask"],
        ImpliesSets = [
            "VK_KHR_ray_tracing_pipeline+VK_KHR_synchronization2",
            "VK_KHR_ray_tracing_pipeline+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindInvocationMaskHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindInvocationMaskHuawei(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImageView")] Ref<ImageViewHandle> imageView,
        ImageLayout imageLayout
    ) => DllImport.CmdBindInvocationMaskHuawei(commandBuffer, imageView, imageLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindPipeline(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PipelineBindPoint, PipelineHandle*, void>)(
                _slots[43] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[43] = nativeContext.LoadFunction("vkCmdBindPipeline", "vulkan")
            )
        )(commandBuffer, pipelineBindPoint, pipeline);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindPipeline")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindPipeline(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline
    ) => DllImport.CmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindPipeline(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline
    )
    {
        fixed (PipelineHandle* __dsl_pipeline = pipeline)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindPipeline(__dsl_commandBuffer, pipelineBindPoint, __dsl_pipeline);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindPipeline")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindPipeline(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline
    ) => DllImport.CmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindPipelineShaderGroupNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("uint32_t")] uint groupIndex
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                PipelineBindPoint,
                PipelineHandle*,
                uint,
                void>)(
                _slots[44] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[44] = nativeContext.LoadFunction(
                        "vkCmdBindPipelineShaderGroupNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, pipelineBindPoint, pipeline, groupIndex);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindPipelineShaderGroupNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindPipelineShaderGroupNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("uint32_t")] uint groupIndex
    ) =>
        DllImport.CmdBindPipelineShaderGroupNV(
            commandBuffer,
            pipelineBindPoint,
            pipeline,
            groupIndex
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindPipelineShaderGroupNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("uint32_t")] uint groupIndex
    )
    {
        fixed (PipelineHandle* __dsl_pipeline = pipeline)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindPipelineShaderGroupNV(
                __dsl_commandBuffer,
                pipelineBindPoint,
                __dsl_pipeline,
                groupIndex
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindPipelineShaderGroupNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindPipelineShaderGroupNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("uint32_t")] uint groupIndex
    ) =>
        DllImport.CmdBindPipelineShaderGroupNV(
            commandBuffer,
            pipelineBindPoint,
            pipeline,
            groupIndex
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindShadersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint stageCount,
        [NativeTypeName("const VkShaderStageFlagBits *")] ShaderStageFlags* pStages,
        [NativeTypeName("const VkShaderEXT *")] ShaderEXTHandle** pShaders
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                ShaderStageFlags*,
                ShaderEXTHandle**,
                void>)(
                _slots[45] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[45] = nativeContext.LoadFunction("vkCmdBindShadersEXT", "vulkan")
            )
        )(commandBuffer, stageCount, pStages, pShaders);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindShadersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint stageCount,
        [NativeTypeName("const VkShaderStageFlagBits *")] ShaderStageFlags* pStages,
        [NativeTypeName("const VkShaderEXT *")] ShaderEXTHandle** pShaders
    ) => DllImport.CmdBindShadersEXT(commandBuffer, stageCount, pStages, pShaders);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindShadersEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint stageCount,
        [NativeTypeName("const VkShaderStageFlagBits *")] Ref<ShaderStageFlags> pStages,
        [NativeTypeName("const VkShaderEXT *")] Ref2D<ShaderEXTHandle> pShaders
    )
    {
        fixed (ShaderEXTHandle** __dsl_pShaders = pShaders)
        fixed (ShaderStageFlags* __dsl_pStages = pStages)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindShadersEXT(
                __dsl_commandBuffer,
                stageCount,
                __dsl_pStages,
                __dsl_pShaders
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindShadersEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint stageCount,
        [NativeTypeName("const VkShaderStageFlagBits *")] Ref<ShaderStageFlags> pStages,
        [NativeTypeName("const VkShaderEXT *")] Ref2D<ShaderEXTHandle> pShaders
    ) => DllImport.CmdBindShadersEXT(commandBuffer, stageCount, pStages, pShaders);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindShadingRateImageNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImageView")] ImageViewHandle* imageView,
        ImageLayout imageLayout
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, ImageViewHandle*, ImageLayout, void>)(
                _slots[46] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[46] = nativeContext.LoadFunction(
                        "vkCmdBindShadingRateImageNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, imageView, imageLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadingRateImageNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindShadingRateImageNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImageView")] ImageViewHandle* imageView,
        ImageLayout imageLayout
    ) => DllImport.CmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindShadingRateImageNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImageView")] Ref<ImageViewHandle> imageView,
        ImageLayout imageLayout
    )
    {
        fixed (ImageViewHandle* __dsl_imageView = imageView)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindShadingRateImageNV(
                __dsl_commandBuffer,
                __dsl_imageView,
                imageLayout
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindShadingRateImageNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindShadingRateImageNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImageView")] Ref<ImageViewHandle> imageView,
        ImageLayout imageLayout
    ) => DllImport.CmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindTileMemoryQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkTileMemoryBindInfoQCOM *")]
            TileMemoryBindInfoQCOM* pTileMemoryBindInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, TileMemoryBindInfoQCOM*, void>)(
                _slots[47] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[47] = nativeContext.LoadFunction("vkCmdBindTileMemoryQCOM", "vulkan")
            )
        )(commandBuffer, pTileMemoryBindInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_memory_heap"],
        ImpliesSets = [
            "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindTileMemoryQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindTileMemoryQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkTileMemoryBindInfoQCOM *")]
            TileMemoryBindInfoQCOM* pTileMemoryBindInfo
    ) => DllImport.CmdBindTileMemoryQCOM(commandBuffer, pTileMemoryBindInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindTileMemoryQCOM(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkTileMemoryBindInfoQCOM *")]
            Ref<TileMemoryBindInfoQCOM> pTileMemoryBindInfo
    )
    {
        fixed (TileMemoryBindInfoQCOM* __dsl_pTileMemoryBindInfo = pTileMemoryBindInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindTileMemoryQCOM(__dsl_commandBuffer, __dsl_pTileMemoryBindInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_memory_heap"],
        ImpliesSets = [
            "VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindTileMemoryQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindTileMemoryQCOM(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkTileMemoryBindInfoQCOM *")]
            Ref<TileMemoryBindInfoQCOM> pTileMemoryBindInfo
    ) => DllImport.CmdBindTileMemoryQCOM(commandBuffer, pTileMemoryBindInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindTransformFeedbackBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle** pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
        [NativeTypeName("const VkDeviceSize *")] ulong* pSizes
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                uint,
                BufferHandle**,
                ulong*,
                ulong*,
                void>)(
                _slots[48] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[48] = nativeContext.LoadFunction(
                        "vkCmdBindTransformFeedbackBuffersEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindTransformFeedbackBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindTransformFeedbackBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle** pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
        [NativeTypeName("const VkDeviceSize *")] ulong* pSizes
    ) =>
        DllImport.CmdBindTransformFeedbackBuffersEXT(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets,
            pSizes
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindTransformFeedbackBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes
    )
    {
        fixed (ulong* __dsl_pSizes = pSizes)
        fixed (ulong* __dsl_pOffsets = pOffsets)
        fixed (BufferHandle** __dsl_pBuffers = pBuffers)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindTransformFeedbackBuffersEXT(
                __dsl_commandBuffer,
                firstBinding,
                bindingCount,
                __dsl_pBuffers,
                __dsl_pOffsets,
                __dsl_pSizes
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindTransformFeedbackBuffersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindTransformFeedbackBuffersEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes
    ) =>
        DllImport.CmdBindTransformFeedbackBuffersEXT(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets,
            pSizes
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindVertexBuffers(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle** pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, BufferHandle**, ulong*, void>)(
                _slots[49] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[49] = nativeContext.LoadFunction("vkCmdBindVertexBuffers", "vulkan")
            )
        )(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindVertexBuffers(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle** pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets
    ) =>
        DllImport.CmdBindVertexBuffers(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindVertexBuffers(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets
    )
    {
        fixed (ulong* __dsl_pOffsets = pOffsets)
        fixed (BufferHandle** __dsl_pBuffers = pBuffers)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindVertexBuffers(
                __dsl_commandBuffer,
                firstBinding,
                bindingCount,
                __dsl_pBuffers,
                __dsl_pOffsets
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindVertexBuffers(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets
    ) =>
        DllImport.CmdBindVertexBuffers(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindVertexBuffers2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle** pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
        [NativeTypeName("const VkDeviceSize *")] ulong* pSizes,
        [NativeTypeName("const VkDeviceSize *")] ulong* pStrides
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                uint,
                BufferHandle**,
                ulong*,
                ulong*,
                ulong*,
                void>)(
                _slots[50] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[50] = nativeContext.LoadFunction("vkCmdBindVertexBuffers2", "vulkan")
            )
        )(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindVertexBuffers2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle** pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
        [NativeTypeName("const VkDeviceSize *")] ulong* pSizes,
        [NativeTypeName("const VkDeviceSize *")] ulong* pStrides
    ) =>
        DllImport.CmdBindVertexBuffers2(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets,
            pSizes,
            pStrides
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindVertexBuffers2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pStrides
    )
    {
        fixed (ulong* __dsl_pStrides = pStrides)
        fixed (ulong* __dsl_pSizes = pSizes)
        fixed (ulong* __dsl_pOffsets = pOffsets)
        fixed (BufferHandle** __dsl_pBuffers = pBuffers)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindVertexBuffers2(
                __dsl_commandBuffer,
                firstBinding,
                bindingCount,
                __dsl_pBuffers,
                __dsl_pOffsets,
                __dsl_pSizes,
                __dsl_pStrides
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindVertexBuffers2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pStrides
    ) =>
        DllImport.CmdBindVertexBuffers2(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets,
            pSizes,
            pStrides
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindVertexBuffers2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle** pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
        [NativeTypeName("const VkDeviceSize *")] ulong* pSizes,
        [NativeTypeName("const VkDeviceSize *")] ulong* pStrides
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                uint,
                BufferHandle**,
                ulong*,
                ulong*,
                ulong*,
                void>)(
                _slots[51] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[51] = nativeContext.LoadFunction(
                        "vkCmdBindVertexBuffers2EXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindVertexBuffers2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle** pBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets,
        [NativeTypeName("const VkDeviceSize *")] ulong* pSizes,
        [NativeTypeName("const VkDeviceSize *")] ulong* pStrides
    ) =>
        DllImport.CmdBindVertexBuffers2EXT(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets,
            pSizes,
            pStrides
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBindVertexBuffers2EXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pStrides
    )
    {
        fixed (ulong* __dsl_pStrides = pStrides)
        fixed (ulong* __dsl_pSizes = pSizes)
        fixed (ulong* __dsl_pOffsets = pOffsets)
        fixed (BufferHandle** __dsl_pBuffers = pBuffers)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBindVertexBuffers2EXT(
                __dsl_commandBuffer,
                firstBinding,
                bindingCount,
                __dsl_pBuffers,
                __dsl_pOffsets,
                __dsl_pSizes,
                __dsl_pStrides
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBindVertexBuffers2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBindVertexBuffers2EXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstBinding,
        [NativeTypeName("uint32_t")] uint bindingCount,
        [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pSizes,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pStrides
    ) =>
        DllImport.CmdBindVertexBuffers2EXT(
            commandBuffer,
            firstBinding,
            bindingCount,
            pBuffers,
            pOffsets,
            pSizes,
            pStrides
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBlitImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle* srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle* dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageBlit *")] ImageBlit* pRegions,
        Filter filter
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                ImageHandle*,
                ImageLayout,
                ImageHandle*,
                ImageLayout,
                uint,
                ImageBlit*,
                Filter,
                void>)(
                _slots[52] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[52] = nativeContext.LoadFunction("vkCmdBlitImage", "vulkan")
            )
        )(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions,
            filter
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBlitImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle* srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle* dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageBlit *")] ImageBlit* pRegions,
        Filter filter
    ) =>
        DllImport.CmdBlitImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions,
            filter
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBlitImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageBlit *")] Ref<ImageBlit> pRegions,
        Filter filter
    )
    {
        fixed (ImageBlit* __dsl_pRegions = pRegions)
        fixed (ImageHandle* __dsl_dstImage = dstImage)
        fixed (ImageHandle* __dsl_srcImage = srcImage)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBlitImage(
                __dsl_commandBuffer,
                __dsl_srcImage,
                srcImageLayout,
                __dsl_dstImage,
                dstImageLayout,
                regionCount,
                __dsl_pRegions,
                filter
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBlitImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageBlit *")] Ref<ImageBlit> pRegions,
        Filter filter
    ) =>
        DllImport.CmdBlitImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions,
            filter
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBlitImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageBlit *")] ImageBlit pRegions,
        Filter filter
    )
    {
        fixed (ImageHandle* __dsl_dstImage = dstImage)
        fixed (ImageHandle* __dsl_srcImage = srcImage)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBlitImage(
                __dsl_commandBuffer,
                __dsl_srcImage,
                srcImageLayout,
                __dsl_dstImage,
                dstImageLayout,
                1,
                (ImageBlit*)&pRegions,
                filter
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBlitImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageBlit *")] ImageBlit pRegions,
        Filter filter
    ) =>
        DllImport.CmdBlitImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            pRegions,
            filter
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBlitImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] BlitImageInfo2* pBlitImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, BlitImageInfo2*, void>)(
                _slots[53] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[53] = nativeContext.LoadFunction("vkCmdBlitImage2", "vulkan")
            )
        )(commandBuffer, pBlitImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBlitImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] BlitImageInfo2* pBlitImageInfo
    ) => DllImport.CmdBlitImage2(commandBuffer, pBlitImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBlitImage2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] Ref<BlitImageInfo2> pBlitImageInfo
    )
    {
        fixed (BlitImageInfo2* __dsl_pBlitImageInfo = pBlitImageInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBlitImage2(__dsl_commandBuffer, __dsl_pBlitImageInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBlitImage2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] Ref<BlitImageInfo2> pBlitImageInfo
    ) => DllImport.CmdBlitImage2(commandBuffer, pBlitImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBlitImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] BlitImageInfo2* pBlitImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, BlitImageInfo2*, void>)(
                _slots[54] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[54] = nativeContext.LoadFunction("vkCmdBlitImage2KHR", "vulkan")
            )
        )(commandBuffer, pBlitImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBlitImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] BlitImageInfo2* pBlitImageInfo
    ) => DllImport.CmdBlitImage2KHR(commandBuffer, pBlitImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBlitImage2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] Ref<BlitImageInfo2> pBlitImageInfo
    )
    {
        fixed (BlitImageInfo2* __dsl_pBlitImageInfo = pBlitImageInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBlitImage2KHR(__dsl_commandBuffer, __dsl_pBlitImageInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBlitImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBlitImage2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkBlitImageInfo2 *")] Ref<BlitImageInfo2> pBlitImageInfo
    ) => DllImport.CmdBlitImage2KHR(commandBuffer, pBlitImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBuildAccelerationStructureNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkAccelerationStructureInfoNV *")]
            AccelerationStructureInfoNV* pInfo,
        [NativeTypeName("VkBuffer")] BufferHandle* instanceData,
        [NativeTypeName("VkDeviceSize")] ulong instanceOffset,
        [NativeTypeName("VkBool32")] uint update,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle* dst,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle* src,
        [NativeTypeName("VkBuffer")] BufferHandle* scratch,
        [NativeTypeName("VkDeviceSize")] ulong scratchOffset
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                AccelerationStructureInfoNV*,
                BufferHandle*,
                ulong,
                uint,
                AccelerationStructureNVHandle*,
                AccelerationStructureNVHandle*,
                BufferHandle*,
                ulong,
                void>)(
                _slots[55] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[55] = nativeContext.LoadFunction(
                        "vkCmdBuildAccelerationStructureNV",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            pInfo,
            instanceData,
            instanceOffset,
            update,
            dst,
            src,
            scratch,
            scratchOffset
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildAccelerationStructureNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkAccelerationStructureInfoNV *")]
            AccelerationStructureInfoNV* pInfo,
        [NativeTypeName("VkBuffer")] BufferHandle* instanceData,
        [NativeTypeName("VkDeviceSize")] ulong instanceOffset,
        [NativeTypeName("VkBool32")] uint update,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle* dst,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle* src,
        [NativeTypeName("VkBuffer")] BufferHandle* scratch,
        [NativeTypeName("VkDeviceSize")] ulong scratchOffset
    ) =>
        DllImport.CmdBuildAccelerationStructureNV(
            commandBuffer,
            pInfo,
            instanceData,
            instanceOffset,
            update,
            dst,
            src,
            scratch,
            scratchOffset
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBuildAccelerationStructureNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkAccelerationStructureInfoNV *")]
            Ref<AccelerationStructureInfoNV> pInfo,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> instanceData,
        [NativeTypeName("VkDeviceSize")] ulong instanceOffset,
        [NativeTypeName("VkBool32")] uint update,
        [NativeTypeName("VkAccelerationStructureNV")] Ref<AccelerationStructureNVHandle> dst,
        [NativeTypeName("VkAccelerationStructureNV")] Ref<AccelerationStructureNVHandle> src,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> scratch,
        [NativeTypeName("VkDeviceSize")] ulong scratchOffset
    )
    {
        fixed (BufferHandle* __dsl_scratch = scratch)
        fixed (AccelerationStructureNVHandle* __dsl_src = src)
        fixed (AccelerationStructureNVHandle* __dsl_dst = dst)
        fixed (BufferHandle* __dsl_instanceData = instanceData)
        fixed (AccelerationStructureInfoNV* __dsl_pInfo = pInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBuildAccelerationStructureNV(
                __dsl_commandBuffer,
                __dsl_pInfo,
                __dsl_instanceData,
                instanceOffset,
                update,
                __dsl_dst,
                __dsl_src,
                __dsl_scratch,
                scratchOffset
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildAccelerationStructureNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkAccelerationStructureInfoNV *")]
            Ref<AccelerationStructureInfoNV> pInfo,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> instanceData,
        [NativeTypeName("VkDeviceSize")] ulong instanceOffset,
        [NativeTypeName("VkBool32")] uint update,
        [NativeTypeName("VkAccelerationStructureNV")] Ref<AccelerationStructureNVHandle> dst,
        [NativeTypeName("VkAccelerationStructureNV")] Ref<AccelerationStructureNVHandle> src,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> scratch,
        [NativeTypeName("VkDeviceSize")] ulong scratchOffset
    ) =>
        DllImport.CmdBuildAccelerationStructureNV(
            commandBuffer,
            pInfo,
            instanceData,
            instanceOffset,
            update,
            dst,
            src,
            scratch,
            scratchOffset
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBuildAccelerationStructuresIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pInfos,
        [NativeTypeName("const VkDeviceAddress *")] ulong* pIndirectDeviceAddresses,
        [NativeTypeName("const uint32_t *")] uint* pIndirectStrides,
        [NativeTypeName("const uint32_t *const *")] uint** ppMaxPrimitiveCounts
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                AccelerationStructureBuildGeometryInfoKHR*,
                ulong*,
                uint*,
                uint**,
                void>)(
                _slots[56] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[56] = nativeContext.LoadFunction(
                        "vkCmdBuildAccelerationStructuresIndirectKHR",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            infoCount,
            pInfos,
            pIndirectDeviceAddresses,
            pIndirectStrides,
            ppMaxPrimitiveCounts
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresIndirectKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildAccelerationStructuresIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pInfos,
        [NativeTypeName("const VkDeviceAddress *")] ulong* pIndirectDeviceAddresses,
        [NativeTypeName("const uint32_t *")] uint* pIndirectStrides,
        [NativeTypeName("const uint32_t *const *")] uint** ppMaxPrimitiveCounts
    ) =>
        DllImport.CmdBuildAccelerationStructuresIndirectKHR(
            commandBuffer,
            infoCount,
            pInfos,
            pIndirectDeviceAddresses,
            pIndirectStrides,
            ppMaxPrimitiveCounts
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBuildAccelerationStructuresIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
        [NativeTypeName("const VkDeviceAddress *")] Ref<ulong> pIndirectDeviceAddresses,
        [NativeTypeName("const uint32_t *")] Ref<uint> pIndirectStrides,
        [NativeTypeName("const uint32_t *const *")] Ref2D<uint> ppMaxPrimitiveCounts
    )
    {
        fixed (uint** __dsl_ppMaxPrimitiveCounts = ppMaxPrimitiveCounts)
        fixed (uint* __dsl_pIndirectStrides = pIndirectStrides)
        fixed (ulong* __dsl_pIndirectDeviceAddresses = pIndirectDeviceAddresses)
        fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pInfos = pInfos)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBuildAccelerationStructuresIndirectKHR(
                __dsl_commandBuffer,
                infoCount,
                __dsl_pInfos,
                __dsl_pIndirectDeviceAddresses,
                __dsl_pIndirectStrides,
                __dsl_ppMaxPrimitiveCounts
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresIndirectKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildAccelerationStructuresIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
        [NativeTypeName("const VkDeviceAddress *")] Ref<ulong> pIndirectDeviceAddresses,
        [NativeTypeName("const uint32_t *")] Ref<uint> pIndirectStrides,
        [NativeTypeName("const uint32_t *const *")] Ref2D<uint> ppMaxPrimitiveCounts
    ) =>
        DllImport.CmdBuildAccelerationStructuresIndirectKHR(
            commandBuffer,
            infoCount,
            pInfos,
            pIndirectDeviceAddresses,
            pIndirectStrides,
            ppMaxPrimitiveCounts
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBuildAccelerationStructuresKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            AccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                AccelerationStructureBuildGeometryInfoKHR*,
                AccelerationStructureBuildRangeInfoKHR**,
                void>)(
                _slots[57] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[57] = nativeContext.LoadFunction(
                        "vkCmdBuildAccelerationStructuresKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildAccelerationStructuresKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            AccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos
    ) =>
        DllImport.CmdBuildAccelerationStructuresKHR(
            commandBuffer,
            infoCount,
            pInfos,
            ppBuildRangeInfos
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBuildAccelerationStructuresKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            Ref2D<AccelerationStructureBuildRangeInfoKHR> ppBuildRangeInfos
    )
    {
        fixed (AccelerationStructureBuildRangeInfoKHR** __dsl_ppBuildRangeInfos = ppBuildRangeInfos)
        fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pInfos = pInfos)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBuildAccelerationStructuresKHR(
                __dsl_commandBuffer,
                infoCount,
                __dsl_pInfos,
                __dsl_ppBuildRangeInfos
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildAccelerationStructuresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildAccelerationStructuresKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pInfos,
        [NativeTypeName("const VkAccelerationStructureBuildRangeInfoKHR *const *")]
            Ref2D<AccelerationStructureBuildRangeInfoKHR> ppBuildRangeInfos
    ) =>
        DllImport.CmdBuildAccelerationStructuresKHR(
            commandBuffer,
            infoCount,
            pInfos,
            ppBuildRangeInfos
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBuildClusterAccelerationStructureIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkClusterAccelerationStructureCommandsInfoNV *")]
            ClusterAccelerationStructureCommandsInfoNV* pCommandInfos
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                ClusterAccelerationStructureCommandsInfoNV*,
                void>)(
                _slots[58] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[58] = nativeContext.LoadFunction(
                        "vkCmdBuildClusterAccelerationStructureIndirectNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, pCommandInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildClusterAccelerationStructureIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildClusterAccelerationStructureIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkClusterAccelerationStructureCommandsInfoNV *")]
            ClusterAccelerationStructureCommandsInfoNV* pCommandInfos
    ) => DllImport.CmdBuildClusterAccelerationStructureIndirectNV(commandBuffer, pCommandInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBuildClusterAccelerationStructureIndirectNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkClusterAccelerationStructureCommandsInfoNV *")]
            Ref<ClusterAccelerationStructureCommandsInfoNV> pCommandInfos
    )
    {
        fixed (ClusterAccelerationStructureCommandsInfoNV* __dsl_pCommandInfos = pCommandInfos)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBuildClusterAccelerationStructureIndirectNV(
                __dsl_commandBuffer,
                __dsl_pCommandInfos
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildClusterAccelerationStructureIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildClusterAccelerationStructureIndirectNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkClusterAccelerationStructureCommandsInfoNV *")]
            Ref<ClusterAccelerationStructureCommandsInfoNV> pCommandInfos
    ) => DllImport.CmdBuildClusterAccelerationStructureIndirectNV(commandBuffer, pCommandInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBuildMicromapsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pInfos
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, MicromapBuildInfoEXT*, void>)(
                _slots[59] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[59] = nativeContext.LoadFunction("vkCmdBuildMicromapsEXT", "vulkan")
            )
        )(commandBuffer, infoCount, pInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildMicromapsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pInfos
    ) => DllImport.CmdBuildMicromapsEXT(commandBuffer, infoCount, pInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBuildMicromapsEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pInfos
    )
    {
        fixed (MicromapBuildInfoEXT* __dsl_pInfos = pInfos)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBuildMicromapsEXT(__dsl_commandBuffer, infoCount, __dsl_pInfos);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildMicromapsEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pInfos
    ) => DllImport.CmdBuildMicromapsEXT(commandBuffer, infoCount, pInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBuildMicromapsEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT pInfos
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBuildMicromapsEXT(
                __dsl_commandBuffer,
                1,
                (MicromapBuildInfoEXT*)&pInfos
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildMicromapsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildMicromapsEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT pInfos
    ) => DllImport.CmdBuildMicromapsEXT(commandBuffer, pInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBuildPartitionedAccelerationStructuresNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkBuildPartitionedAccelerationStructureInfoNV *")]
            BuildPartitionedAccelerationStructureInfoNV* pBuildInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BuildPartitionedAccelerationStructureInfoNV*,
                void>)(
                _slots[60] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[60] = nativeContext.LoadFunction(
                        "vkCmdBuildPartitionedAccelerationStructuresNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, pBuildInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildPartitionedAccelerationStructuresNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildPartitionedAccelerationStructuresNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkBuildPartitionedAccelerationStructureInfoNV *")]
            BuildPartitionedAccelerationStructureInfoNV* pBuildInfo
    ) => DllImport.CmdBuildPartitionedAccelerationStructuresNV(commandBuffer, pBuildInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdBuildPartitionedAccelerationStructuresNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkBuildPartitionedAccelerationStructureInfoNV *")]
            Ref<BuildPartitionedAccelerationStructureInfoNV> pBuildInfo
    )
    {
        fixed (BuildPartitionedAccelerationStructureInfoNV* __dsl_pBuildInfo = pBuildInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdBuildPartitionedAccelerationStructuresNV(
                __dsl_commandBuffer,
                __dsl_pBuildInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdBuildPartitionedAccelerationStructuresNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdBuildPartitionedAccelerationStructuresNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkBuildPartitionedAccelerationStructureInfoNV *")]
            Ref<BuildPartitionedAccelerationStructureInfoNV> pBuildInfo
    ) => DllImport.CmdBuildPartitionedAccelerationStructuresNV(commandBuffer, pBuildInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdClearAttachments(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkClearAttachment *")] ClearAttachment* pAttachments,
        [NativeTypeName("uint32_t")] uint rectCount,
        [NativeTypeName("const VkClearRect *")] ClearRect* pRects
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                ClearAttachment*,
                uint,
                ClearRect*,
                void>)(
                _slots[61] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[61] = nativeContext.LoadFunction("vkCmdClearAttachments", "vulkan")
            )
        )(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearAttachments")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearAttachments(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkClearAttachment *")] ClearAttachment* pAttachments,
        [NativeTypeName("uint32_t")] uint rectCount,
        [NativeTypeName("const VkClearRect *")] ClearRect* pRects
    ) =>
        DllImport.CmdClearAttachments(
            commandBuffer,
            attachmentCount,
            pAttachments,
            rectCount,
            pRects
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdClearAttachments(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkClearAttachment *")] Ref<ClearAttachment> pAttachments,
        [NativeTypeName("uint32_t")] uint rectCount,
        [NativeTypeName("const VkClearRect *")] Ref<ClearRect> pRects
    )
    {
        fixed (ClearRect* __dsl_pRects = pRects)
        fixed (ClearAttachment* __dsl_pAttachments = pAttachments)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdClearAttachments(
                __dsl_commandBuffer,
                attachmentCount,
                __dsl_pAttachments,
                rectCount,
                __dsl_pRects
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearAttachments")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearAttachments(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkClearAttachment *")] Ref<ClearAttachment> pAttachments,
        [NativeTypeName("uint32_t")] uint rectCount,
        [NativeTypeName("const VkClearRect *")] Ref<ClearRect> pRects
    ) =>
        DllImport.CmdClearAttachments(
            commandBuffer,
            attachmentCount,
            pAttachments,
            rectCount,
            pRects
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdClearColorImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle* image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearColorValue *")] ClearColorValue* pColor,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange* pRanges
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                ImageHandle*,
                ImageLayout,
                ClearColorValue*,
                uint,
                ImageSubresourceRange*,
                void>)(
                _slots[62] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[62] = nativeContext.LoadFunction("vkCmdClearColorImage", "vulkan")
            )
        )(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearColorImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearColorImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle* image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearColorValue *")] ClearColorValue* pColor,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange* pRanges
    ) =>
        DllImport.CmdClearColorImage(
            commandBuffer,
            image,
            imageLayout,
            pColor,
            rangeCount,
            pRanges
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdClearColorImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearColorValue *")] Ref<ClearColorValue> pColor,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] Ref<ImageSubresourceRange> pRanges
    )
    {
        fixed (ImageSubresourceRange* __dsl_pRanges = pRanges)
        fixed (ClearColorValue* __dsl_pColor = pColor)
        fixed (ImageHandle* __dsl_image = image)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdClearColorImage(
                __dsl_commandBuffer,
                __dsl_image,
                imageLayout,
                __dsl_pColor,
                rangeCount,
                __dsl_pRanges
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearColorImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearColorImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearColorValue *")] Ref<ClearColorValue> pColor,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] Ref<ImageSubresourceRange> pRanges
    ) =>
        DllImport.CmdClearColorImage(
            commandBuffer,
            image,
            imageLayout,
            pColor,
            rangeCount,
            pRanges
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdClearColorImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearColorValue *")] Ref<ClearColorValue> pColor,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange pRanges
    )
    {
        fixed (ClearColorValue* __dsl_pColor = pColor)
        fixed (ImageHandle* __dsl_image = image)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdClearColorImage(
                __dsl_commandBuffer,
                __dsl_image,
                imageLayout,
                __dsl_pColor,
                1,
                (ImageSubresourceRange*)&pRanges
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearColorImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearColorImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearColorValue *")] Ref<ClearColorValue> pColor,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange pRanges
    ) => DllImport.CmdClearColorImage(commandBuffer, image, imageLayout, pColor, pRanges);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdClearDepthStencilImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle* image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearDepthStencilValue *")] ClearDepthStencilValue* pDepthStencil,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange* pRanges
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                ImageHandle*,
                ImageLayout,
                ClearDepthStencilValue*,
                uint,
                ImageSubresourceRange*,
                void>)(
                _slots[63] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[63] = nativeContext.LoadFunction(
                        "vkCmdClearDepthStencilImage",
                        "vulkan"
                    )
            )
        )(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearDepthStencilImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearDepthStencilImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle* image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearDepthStencilValue *")] ClearDepthStencilValue* pDepthStencil,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange* pRanges
    ) =>
        DllImport.CmdClearDepthStencilImage(
            commandBuffer,
            image,
            imageLayout,
            pDepthStencil,
            rangeCount,
            pRanges
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdClearDepthStencilImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearDepthStencilValue *")]
            Ref<ClearDepthStencilValue> pDepthStencil,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] Ref<ImageSubresourceRange> pRanges
    )
    {
        fixed (ImageSubresourceRange* __dsl_pRanges = pRanges)
        fixed (ClearDepthStencilValue* __dsl_pDepthStencil = pDepthStencil)
        fixed (ImageHandle* __dsl_image = image)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdClearDepthStencilImage(
                __dsl_commandBuffer,
                __dsl_image,
                imageLayout,
                __dsl_pDepthStencil,
                rangeCount,
                __dsl_pRanges
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearDepthStencilImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearDepthStencilImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearDepthStencilValue *")]
            Ref<ClearDepthStencilValue> pDepthStencil,
        [NativeTypeName("uint32_t")] uint rangeCount,
        [NativeTypeName("const VkImageSubresourceRange *")] Ref<ImageSubresourceRange> pRanges
    ) =>
        DllImport.CmdClearDepthStencilImage(
            commandBuffer,
            image,
            imageLayout,
            pDepthStencil,
            rangeCount,
            pRanges
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdClearDepthStencilImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearDepthStencilValue *")]
            Ref<ClearDepthStencilValue> pDepthStencil,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange pRanges
    )
    {
        fixed (ClearDepthStencilValue* __dsl_pDepthStencil = pDepthStencil)
        fixed (ImageHandle* __dsl_image = image)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdClearDepthStencilImage(
                __dsl_commandBuffer,
                __dsl_image,
                imageLayout,
                __dsl_pDepthStencil,
                1,
                (ImageSubresourceRange*)&pRanges
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdClearDepthStencilImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdClearDepthStencilImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        ImageLayout imageLayout,
        [NativeTypeName("const VkClearDepthStencilValue *")]
            Ref<ClearDepthStencilValue> pDepthStencil,
        [NativeTypeName("const VkImageSubresourceRange *")] ImageSubresourceRange pRanges
    ) =>
        DllImport.CmdClearDepthStencilImage(
            commandBuffer,
            image,
            imageLayout,
            pDepthStencil,
            pRanges
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdControlVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkVideoCodingControlInfoKHR *")]
            VideoCodingControlInfoKHR* pCodingControlInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, VideoCodingControlInfoKHR*, void>)(
                _slots[64] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[64] = nativeContext.LoadFunction(
                        "vkCmdControlVideoCodingKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pCodingControlInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdControlVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdControlVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkVideoCodingControlInfoKHR *")]
            VideoCodingControlInfoKHR* pCodingControlInfo
    ) => DllImport.CmdControlVideoCodingKHR(commandBuffer, pCodingControlInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdControlVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkVideoCodingControlInfoKHR *")]
            Ref<VideoCodingControlInfoKHR> pCodingControlInfo
    )
    {
        fixed (VideoCodingControlInfoKHR* __dsl_pCodingControlInfo = pCodingControlInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdControlVideoCodingKHR(__dsl_commandBuffer, __dsl_pCodingControlInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdControlVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdControlVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkVideoCodingControlInfoKHR *")]
            Ref<VideoCodingControlInfoKHR> pCodingControlInfo
    ) => DllImport.CmdControlVideoCodingKHR(commandBuffer, pCodingControlInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            ConvertCooperativeVectorMatrixInfoNV* pInfos
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                ConvertCooperativeVectorMatrixInfoNV*,
                void>)(
                _slots[65] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[65] = nativeContext.LoadFunction(
                        "vkCmdConvertCooperativeVectorMatrixNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, infoCount, pInfos);

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            ConvertCooperativeVectorMatrixInfoNV* pInfos
    ) => DllImport.CmdConvertCooperativeVectorMatrixNV(commandBuffer, infoCount, pInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            Ref<ConvertCooperativeVectorMatrixInfoNV> pInfos
    )
    {
        fixed (ConvertCooperativeVectorMatrixInfoNV* __dsl_pInfos = pInfos)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdConvertCooperativeVectorMatrixNV(
                __dsl_commandBuffer,
                infoCount,
                __dsl_pInfos
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint infoCount,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            Ref<ConvertCooperativeVectorMatrixInfoNV> pInfos
    ) => DllImport.CmdConvertCooperativeVectorMatrixNV(commandBuffer, infoCount, pInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            ConvertCooperativeVectorMatrixInfoNV pInfos
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdConvertCooperativeVectorMatrixNV(
                __dsl_commandBuffer,
                1,
                (ConvertCooperativeVectorMatrixInfoNV*)&pInfos
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            ConvertCooperativeVectorMatrixInfoNV pInfos
    ) => DllImport.CmdConvertCooperativeVectorMatrixNV(commandBuffer, pInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            CopyAccelerationStructureInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CopyAccelerationStructureInfoKHR*, void>)(
                _slots[66] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[66] = nativeContext.LoadFunction(
                        "vkCmdCopyAccelerationStructureKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            CopyAccelerationStructureInfoKHR* pInfo
    ) => DllImport.CmdCopyAccelerationStructureKHR(commandBuffer, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            Ref<CopyAccelerationStructureInfoKHR> pInfo
    )
    {
        fixed (CopyAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyAccelerationStructureKHR(__dsl_commandBuffer, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            Ref<CopyAccelerationStructureInfoKHR> pInfo
    ) => DllImport.CmdCopyAccelerationStructureKHR(commandBuffer, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyAccelerationStructureNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle* dst,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle* src,
        CopyAccelerationStructureModeKHR mode
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                AccelerationStructureNVHandle*,
                AccelerationStructureNVHandle*,
                CopyAccelerationStructureModeKHR,
                void>)(
                _slots[67] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[67] = nativeContext.LoadFunction(
                        "vkCmdCopyAccelerationStructureNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, dst, src, mode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyAccelerationStructureNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle* dst,
        [NativeTypeName("VkAccelerationStructureNV")] AccelerationStructureNVHandle* src,
        CopyAccelerationStructureModeKHR mode
    ) => DllImport.CmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyAccelerationStructureNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkAccelerationStructureNV")] Ref<AccelerationStructureNVHandle> dst,
        [NativeTypeName("VkAccelerationStructureNV")] Ref<AccelerationStructureNVHandle> src,
        CopyAccelerationStructureModeKHR mode
    )
    {
        fixed (AccelerationStructureNVHandle* __dsl_src = src)
        fixed (AccelerationStructureNVHandle* __dsl_dst = dst)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyAccelerationStructureNV(
                __dsl_commandBuffer,
                __dsl_dst,
                __dsl_src,
                mode
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyAccelerationStructureNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkAccelerationStructureNV")] Ref<AccelerationStructureNVHandle> dst,
        [NativeTypeName("VkAccelerationStructureNV")] Ref<AccelerationStructureNVHandle> src,
        CopyAccelerationStructureModeKHR mode
    ) => DllImport.CmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            CopyAccelerationStructureToMemoryInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                CopyAccelerationStructureToMemoryInfoKHR*,
                void>)(
                _slots[68] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[68] = nativeContext.LoadFunction(
                        "vkCmdCopyAccelerationStructureToMemoryKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureToMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            CopyAccelerationStructureToMemoryInfoKHR* pInfo
    ) => DllImport.CmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            Ref<CopyAccelerationStructureToMemoryInfoKHR> pInfo
    )
    {
        fixed (CopyAccelerationStructureToMemoryInfoKHR* __dsl_pInfo = pInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyAccelerationStructureToMemoryKHR(
                __dsl_commandBuffer,
                __dsl_pInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyAccelerationStructureToMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            Ref<CopyAccelerationStructureToMemoryInfoKHR> pInfo
    ) => DllImport.CmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* srcBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferCopy *")] BufferCopy* pRegions
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BufferHandle*,
                BufferHandle*,
                uint,
                BufferCopy*,
                void>)(
                _slots[69] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[69] = nativeContext.LoadFunction("vkCmdCopyBuffer", "vulkan")
            )
        )(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* srcBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferCopy *")] BufferCopy* pRegions
    ) => DllImport.CmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> srcBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferCopy *")] Ref<BufferCopy> pRegions
    )
    {
        fixed (BufferCopy* __dsl_pRegions = pRegions)
        fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
        fixed (BufferHandle* __dsl_srcBuffer = srcBuffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyBuffer(
                __dsl_commandBuffer,
                __dsl_srcBuffer,
                __dsl_dstBuffer,
                regionCount,
                __dsl_pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> srcBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferCopy *")] Ref<BufferCopy> pRegions
    ) => DllImport.CmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> srcBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("const VkBufferCopy *")] BufferCopy pRegions
    )
    {
        fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
        fixed (BufferHandle* __dsl_srcBuffer = srcBuffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyBuffer(
                __dsl_commandBuffer,
                __dsl_srcBuffer,
                __dsl_dstBuffer,
                1,
                (BufferCopy*)&pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> srcBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("const VkBufferCopy *")] BufferCopy pRegions
    ) => DllImport.CmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, pRegions);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] CopyBufferInfo2* pCopyBufferInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CopyBufferInfo2*, void>)(
                _slots[70] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[70] = nativeContext.LoadFunction("vkCmdCopyBuffer2", "vulkan")
            )
        )(commandBuffer, pCopyBufferInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] CopyBufferInfo2* pCopyBufferInfo
    ) => DllImport.CmdCopyBuffer2(commandBuffer, pCopyBufferInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyBuffer2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] Ref<CopyBufferInfo2> pCopyBufferInfo
    )
    {
        fixed (CopyBufferInfo2* __dsl_pCopyBufferInfo = pCopyBufferInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyBuffer2(__dsl_commandBuffer, __dsl_pCopyBufferInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBuffer2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] Ref<CopyBufferInfo2> pCopyBufferInfo
    ) => DllImport.CmdCopyBuffer2(commandBuffer, pCopyBufferInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] CopyBufferInfo2* pCopyBufferInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CopyBufferInfo2*, void>)(
                _slots[71] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[71] = nativeContext.LoadFunction("vkCmdCopyBuffer2KHR", "vulkan")
            )
        )(commandBuffer, pCopyBufferInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] CopyBufferInfo2* pCopyBufferInfo
    ) => DllImport.CmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] Ref<CopyBufferInfo2> pCopyBufferInfo
    )
    {
        fixed (CopyBufferInfo2* __dsl_pCopyBufferInfo = pCopyBufferInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyBuffer2KHR(__dsl_commandBuffer, __dsl_pCopyBufferInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyBufferInfo2 *")] Ref<CopyBufferInfo2> pCopyBufferInfo
    ) => DllImport.CmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyBufferToImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* srcBuffer,
        [NativeTypeName("VkImage")] ImageHandle* dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy* pRegions
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BufferHandle*,
                ImageHandle*,
                ImageLayout,
                uint,
                BufferImageCopy*,
                void>)(
                _slots[72] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[72] = nativeContext.LoadFunction("vkCmdCopyBufferToImage", "vulkan")
            )
        )(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBufferToImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* srcBuffer,
        [NativeTypeName("VkImage")] ImageHandle* dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy* pRegions
    ) =>
        DllImport.CmdCopyBufferToImage(
            commandBuffer,
            srcBuffer,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyBufferToImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> srcBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] Ref<BufferImageCopy> pRegions
    )
    {
        fixed (BufferImageCopy* __dsl_pRegions = pRegions)
        fixed (ImageHandle* __dsl_dstImage = dstImage)
        fixed (BufferHandle* __dsl_srcBuffer = srcBuffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyBufferToImage(
                __dsl_commandBuffer,
                __dsl_srcBuffer,
                __dsl_dstImage,
                dstImageLayout,
                regionCount,
                __dsl_pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBufferToImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> srcBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] Ref<BufferImageCopy> pRegions
    ) =>
        DllImport.CmdCopyBufferToImage(
            commandBuffer,
            srcBuffer,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyBufferToImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> srcBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy pRegions
    )
    {
        fixed (ImageHandle* __dsl_dstImage = dstImage)
        fixed (BufferHandle* __dsl_srcBuffer = srcBuffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyBufferToImage(
                __dsl_commandBuffer,
                __dsl_srcBuffer,
                __dsl_dstImage,
                dstImageLayout,
                1,
                (BufferImageCopy*)&pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBufferToImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> srcBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy pRegions
    ) =>
        DllImport.CmdCopyBufferToImage(
            commandBuffer,
            srcBuffer,
            dstImage,
            dstImageLayout,
            pRegions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyBufferToImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            CopyBufferToImageInfo2* pCopyBufferToImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CopyBufferToImageInfo2*, void>)(
                _slots[73] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[73] = nativeContext.LoadFunction("vkCmdCopyBufferToImage2", "vulkan")
            )
        )(commandBuffer, pCopyBufferToImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBufferToImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            CopyBufferToImageInfo2* pCopyBufferToImageInfo
    ) => DllImport.CmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyBufferToImage2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            Ref<CopyBufferToImageInfo2> pCopyBufferToImageInfo
    )
    {
        fixed (CopyBufferToImageInfo2* __dsl_pCopyBufferToImageInfo = pCopyBufferToImageInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyBufferToImage2(
                __dsl_commandBuffer,
                __dsl_pCopyBufferToImageInfo
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBufferToImage2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            Ref<CopyBufferToImageInfo2> pCopyBufferToImageInfo
    ) => DllImport.CmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyBufferToImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            CopyBufferToImageInfo2* pCopyBufferToImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CopyBufferToImageInfo2*, void>)(
                _slots[74] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[74] = nativeContext.LoadFunction(
                        "vkCmdCopyBufferToImage2KHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pCopyBufferToImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBufferToImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            CopyBufferToImageInfo2* pCopyBufferToImageInfo
    ) => DllImport.CmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyBufferToImage2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            Ref<CopyBufferToImageInfo2> pCopyBufferToImageInfo
    )
    {
        fixed (CopyBufferToImageInfo2* __dsl_pCopyBufferToImageInfo = pCopyBufferToImageInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyBufferToImage2KHR(
                __dsl_commandBuffer,
                __dsl_pCopyBufferToImageInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyBufferToImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyBufferToImage2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyBufferToImageInfo2 *")]
            Ref<CopyBufferToImageInfo2> pCopyBufferToImageInfo
    ) => DllImport.CmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle* srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle* dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageCopy *")] ImageCopy* pRegions
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                ImageHandle*,
                ImageLayout,
                ImageHandle*,
                ImageLayout,
                uint,
                ImageCopy*,
                void>)(
                _slots[75] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[75] = nativeContext.LoadFunction("vkCmdCopyImage", "vulkan")
            )
        )(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle* srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle* dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageCopy *")] ImageCopy* pRegions
    ) =>
        DllImport.CmdCopyImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageCopy *")] Ref<ImageCopy> pRegions
    )
    {
        fixed (ImageCopy* __dsl_pRegions = pRegions)
        fixed (ImageHandle* __dsl_dstImage = dstImage)
        fixed (ImageHandle* __dsl_srcImage = srcImage)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyImage(
                __dsl_commandBuffer,
                __dsl_srcImage,
                srcImageLayout,
                __dsl_dstImage,
                dstImageLayout,
                regionCount,
                __dsl_pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageCopy *")] Ref<ImageCopy> pRegions
    ) =>
        DllImport.CmdCopyImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageCopy *")] ImageCopy pRegions
    )
    {
        fixed (ImageHandle* __dsl_dstImage = dstImage)
        fixed (ImageHandle* __dsl_srcImage = srcImage)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyImage(
                __dsl_commandBuffer,
                __dsl_srcImage,
                srcImageLayout,
                __dsl_dstImage,
                dstImageLayout,
                1,
                (ImageCopy*)&pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageCopy *")] ImageCopy pRegions
    ) =>
        DllImport.CmdCopyImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            pRegions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] CopyImageInfo2* pCopyImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CopyImageInfo2*, void>)(
                _slots[76] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[76] = nativeContext.LoadFunction("vkCmdCopyImage2", "vulkan")
            )
        )(commandBuffer, pCopyImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] CopyImageInfo2* pCopyImageInfo
    ) => DllImport.CmdCopyImage2(commandBuffer, pCopyImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyImage2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] Ref<CopyImageInfo2> pCopyImageInfo
    )
    {
        fixed (CopyImageInfo2* __dsl_pCopyImageInfo = pCopyImageInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyImage2(__dsl_commandBuffer, __dsl_pCopyImageInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImage2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] Ref<CopyImageInfo2> pCopyImageInfo
    ) => DllImport.CmdCopyImage2(commandBuffer, pCopyImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] CopyImageInfo2* pCopyImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CopyImageInfo2*, void>)(
                _slots[77] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[77] = nativeContext.LoadFunction("vkCmdCopyImage2KHR", "vulkan")
            )
        )(commandBuffer, pCopyImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] CopyImageInfo2* pCopyImageInfo
    ) => DllImport.CmdCopyImage2KHR(commandBuffer, pCopyImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyImage2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] Ref<CopyImageInfo2> pCopyImageInfo
    )
    {
        fixed (CopyImageInfo2* __dsl_pCopyImageInfo = pCopyImageInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyImage2KHR(__dsl_commandBuffer, __dsl_pCopyImageInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImage2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyImageInfo2 *")] Ref<CopyImageInfo2> pCopyImageInfo
    ) => DllImport.CmdCopyImage2KHR(commandBuffer, pCopyImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyImageToBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle* srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy* pRegions
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                ImageHandle*,
                ImageLayout,
                BufferHandle*,
                uint,
                BufferImageCopy*,
                void>)(
                _slots[78] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[78] = nativeContext.LoadFunction("vkCmdCopyImageToBuffer", "vulkan")
            )
        )(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImageToBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle* srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy* pRegions
    ) =>
        DllImport.CmdCopyImageToBuffer(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstBuffer,
            regionCount,
            pRegions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyImageToBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] Ref<BufferImageCopy> pRegions
    )
    {
        fixed (BufferImageCopy* __dsl_pRegions = pRegions)
        fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
        fixed (ImageHandle* __dsl_srcImage = srcImage)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyImageToBuffer(
                __dsl_commandBuffer,
                __dsl_srcImage,
                srcImageLayout,
                __dsl_dstBuffer,
                regionCount,
                __dsl_pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImageToBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkBufferImageCopy *")] Ref<BufferImageCopy> pRegions
    ) =>
        DllImport.CmdCopyImageToBuffer(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstBuffer,
            regionCount,
            pRegions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyImageToBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy pRegions
    )
    {
        fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
        fixed (ImageHandle* __dsl_srcImage = srcImage)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyImageToBuffer(
                __dsl_commandBuffer,
                __dsl_srcImage,
                srcImageLayout,
                __dsl_dstBuffer,
                1,
                (BufferImageCopy*)&pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImageToBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("const VkBufferImageCopy *")] BufferImageCopy pRegions
    ) =>
        DllImport.CmdCopyImageToBuffer(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstBuffer,
            pRegions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyImageToBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            CopyImageToBufferInfo2* pCopyImageToBufferInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CopyImageToBufferInfo2*, void>)(
                _slots[79] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[79] = nativeContext.LoadFunction("vkCmdCopyImageToBuffer2", "vulkan")
            )
        )(commandBuffer, pCopyImageToBufferInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImageToBuffer2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            CopyImageToBufferInfo2* pCopyImageToBufferInfo
    ) => DllImport.CmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyImageToBuffer2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            Ref<CopyImageToBufferInfo2> pCopyImageToBufferInfo
    )
    {
        fixed (CopyImageToBufferInfo2* __dsl_pCopyImageToBufferInfo = pCopyImageToBufferInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyImageToBuffer2(
                __dsl_commandBuffer,
                __dsl_pCopyImageToBufferInfo
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImageToBuffer2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            Ref<CopyImageToBufferInfo2> pCopyImageToBufferInfo
    ) => DllImport.CmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyImageToBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            CopyImageToBufferInfo2* pCopyImageToBufferInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CopyImageToBufferInfo2*, void>)(
                _slots[80] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[80] = nativeContext.LoadFunction(
                        "vkCmdCopyImageToBuffer2KHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pCopyImageToBufferInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImageToBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            CopyImageToBufferInfo2* pCopyImageToBufferInfo
    ) => DllImport.CmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyImageToBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            Ref<CopyImageToBufferInfo2> pCopyImageToBufferInfo
    )
    {
        fixed (CopyImageToBufferInfo2* __dsl_pCopyImageToBufferInfo = pCopyImageToBufferInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyImageToBuffer2KHR(
                __dsl_commandBuffer,
                __dsl_pCopyImageToBufferInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyImageToBuffer2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyImageToBuffer2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyImageToBufferInfo2 *")]
            Ref<CopyImageToBufferInfo2> pCopyImageToBufferInfo
    ) => DllImport.CmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyMemoryIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint copyCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, ulong, uint, uint, void>)(
                _slots[81] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[81] = nativeContext.LoadFunction("vkCmdCopyMemoryIndirectNV", "vulkan")
            )
        )(commandBuffer, copyBufferAddress, copyCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint copyCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => DllImport.CmdCopyMemoryIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyMemoryIndirectNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint copyCount,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyMemoryIndirectNV(
                __dsl_commandBuffer,
                copyBufferAddress,
                copyCount,
                stride
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryIndirectNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint copyCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => DllImport.CmdCopyMemoryIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            CopyMemoryToAccelerationStructureInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                CopyMemoryToAccelerationStructureInfoKHR*,
                void>)(
                _slots[82] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[82] = nativeContext.LoadFunction(
                        "vkCmdCopyMemoryToAccelerationStructureKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            CopyMemoryToAccelerationStructureInfoKHR* pInfo
    ) => DllImport.CmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            Ref<CopyMemoryToAccelerationStructureInfoKHR> pInfo
    )
    {
        fixed (CopyMemoryToAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyMemoryToAccelerationStructureKHR(
                __dsl_commandBuffer,
                __dsl_pInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            Ref<CopyMemoryToAccelerationStructureInfoKHR> pInfo
    ) => DllImport.CmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyMemoryToImageIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint copyCount,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("VkImage")] ImageHandle* dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageSubresourceLayers *")]
            ImageSubresourceLayers* pImageSubresources
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                ulong,
                uint,
                uint,
                ImageHandle*,
                ImageLayout,
                ImageSubresourceLayers*,
                void>)(
                _slots[83] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[83] = nativeContext.LoadFunction(
                        "vkCmdCopyMemoryToImageIndirectNV",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            copyBufferAddress,
            copyCount,
            stride,
            dstImage,
            dstImageLayout,
            pImageSubresources
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryToImageIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint copyCount,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("VkImage")] ImageHandle* dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageSubresourceLayers *")]
            ImageSubresourceLayers* pImageSubresources
    ) =>
        DllImport.CmdCopyMemoryToImageIndirectNV(
            commandBuffer,
            copyBufferAddress,
            copyCount,
            stride,
            dstImage,
            dstImageLayout,
            pImageSubresources
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyMemoryToImageIndirectNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint copyCount,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageSubresourceLayers *")]
            Ref<ImageSubresourceLayers> pImageSubresources
    )
    {
        fixed (ImageSubresourceLayers* __dsl_pImageSubresources = pImageSubresources)
        fixed (ImageHandle* __dsl_dstImage = dstImage)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyMemoryToImageIndirectNV(
                __dsl_commandBuffer,
                copyBufferAddress,
                copyCount,
                stride,
                __dsl_dstImage,
                dstImageLayout,
                __dsl_pImageSubresources
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryToImageIndirectNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint copyCount,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageSubresourceLayers *")]
            Ref<ImageSubresourceLayers> pImageSubresources
    ) =>
        DllImport.CmdCopyMemoryToImageIndirectNV(
            commandBuffer,
            copyBufferAddress,
            copyCount,
            stride,
            dstImage,
            dstImageLayout,
            pImageSubresources
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyMemoryToImageIndirectNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageSubresourceLayers *")]
            ImageSubresourceLayers pImageSubresources
    )
    {
        fixed (ImageHandle* __dsl_dstImage = dstImage)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyMemoryToImageIndirectNV(
                __dsl_commandBuffer,
                copyBufferAddress,
                1,
                stride,
                __dsl_dstImage,
                dstImageLayout,
                (ImageSubresourceLayers*)&pImageSubresources
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_copy_memory_indirect"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryToImageIndirectNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong copyBufferAddress,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageSubresourceLayers *")]
            ImageSubresourceLayers pImageSubresources
    ) =>
        DllImport.CmdCopyMemoryToImageIndirectNV(
            commandBuffer,
            copyBufferAddress,
            stride,
            dstImage,
            dstImageLayout,
            pImageSubresources
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyMemoryToMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")] CopyMemoryToMicromapInfoEXT* pInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CopyMemoryToMicromapInfoEXT*, void>)(
                _slots[84] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[84] = nativeContext.LoadFunction(
                        "vkCmdCopyMemoryToMicromapEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryToMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")] CopyMemoryToMicromapInfoEXT* pInfo
    ) => DllImport.CmdCopyMemoryToMicromapEXT(commandBuffer, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyMemoryToMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
            Ref<CopyMemoryToMicromapInfoEXT> pInfo
    )
    {
        fixed (CopyMemoryToMicromapInfoEXT* __dsl_pInfo = pInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyMemoryToMicromapEXT(__dsl_commandBuffer, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMemoryToMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMemoryToMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
            Ref<CopyMemoryToMicromapInfoEXT> pInfo
    ) => DllImport.CmdCopyMemoryToMicromapEXT(commandBuffer, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] CopyMicromapInfoEXT* pInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CopyMicromapInfoEXT*, void>)(
                _slots[85] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[85] = nativeContext.LoadFunction("vkCmdCopyMicromapEXT", "vulkan")
            )
        )(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] CopyMicromapInfoEXT* pInfo
    ) => DllImport.CmdCopyMicromapEXT(commandBuffer, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] Ref<CopyMicromapInfoEXT> pInfo
    )
    {
        fixed (CopyMicromapInfoEXT* __dsl_pInfo = pInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyMicromapEXT(__dsl_commandBuffer, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMicromapEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] Ref<CopyMicromapInfoEXT> pInfo
    ) => DllImport.CmdCopyMicromapEXT(commandBuffer, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyMicromapToMemoryEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")] CopyMicromapToMemoryInfoEXT* pInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CopyMicromapToMemoryInfoEXT*, void>)(
                _slots[86] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[86] = nativeContext.LoadFunction(
                        "vkCmdCopyMicromapToMemoryEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMicromapToMemoryEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")] CopyMicromapToMemoryInfoEXT* pInfo
    ) => DllImport.CmdCopyMicromapToMemoryEXT(commandBuffer, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyMicromapToMemoryEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
            Ref<CopyMicromapToMemoryInfoEXT> pInfo
    )
    {
        fixed (CopyMicromapToMemoryInfoEXT* __dsl_pInfo = pInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyMicromapToMemoryEXT(__dsl_commandBuffer, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyMicromapToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyMicromapToMemoryEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
            Ref<CopyMicromapToMemoryInfoEXT> pInfo
    ) => DllImport.CmdCopyMicromapToMemoryEXT(commandBuffer, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyQueryPoolResults(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount,
        [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong stride,
        [NativeTypeName("VkQueryResultFlags")] uint flags
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                QueryPoolHandle*,
                uint,
                uint,
                BufferHandle*,
                ulong,
                ulong,
                uint,
                void>)(
                _slots[87] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[87] = nativeContext.LoadFunction("vkCmdCopyQueryPoolResults", "vulkan")
            )
        )(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyQueryPoolResults")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyQueryPoolResults(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount,
        [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong stride,
        [NativeTypeName("VkQueryResultFlags")] uint flags
    ) =>
        DllImport.CmdCopyQueryPoolResults(
            commandBuffer,
            queryPool,
            firstQuery,
            queryCount,
            dstBuffer,
            dstOffset,
            stride,
            flags
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCopyQueryPoolResults(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong stride,
        [NativeTypeName("VkQueryResultFlags")] uint flags
    )
    {
        fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCopyQueryPoolResults(
                __dsl_commandBuffer,
                __dsl_queryPool,
                firstQuery,
                queryCount,
                __dsl_dstBuffer,
                dstOffset,
                stride,
                flags
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCopyQueryPoolResults")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCopyQueryPoolResults(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong stride,
        [NativeTypeName("VkQueryResultFlags")] uint flags
    ) =>
        DllImport.CmdCopyQueryPoolResults(
            commandBuffer,
            queryPool,
            firstQuery,
            queryCount,
            dstBuffer,
            dstOffset,
            stride,
            flags
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCudaLaunchKernelNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCudaLaunchInfoNV *")] CudaLaunchInfoNV* pLaunchInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CudaLaunchInfoNV*, void>)(
                _slots[88] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[88] = nativeContext.LoadFunction("vkCmdCudaLaunchKernelNV", "vulkan")
            )
        )(commandBuffer, pLaunchInfo);

    [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCudaLaunchKernelNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCudaLaunchKernelNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCudaLaunchInfoNV *")] CudaLaunchInfoNV* pLaunchInfo
    ) => DllImport.CmdCudaLaunchKernelNV(commandBuffer, pLaunchInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCudaLaunchKernelNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCudaLaunchInfoNV *")] Ref<CudaLaunchInfoNV> pLaunchInfo
    )
    {
        fixed (CudaLaunchInfoNV* __dsl_pLaunchInfo = pLaunchInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCudaLaunchKernelNV(__dsl_commandBuffer, __dsl_pLaunchInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCudaLaunchKernelNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCudaLaunchKernelNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCudaLaunchInfoNV *")] Ref<CudaLaunchInfoNV> pLaunchInfo
    ) => DllImport.CmdCudaLaunchKernelNV(commandBuffer, pLaunchInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCuLaunchKernelNVX(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCuLaunchInfoNVX *")] CuLaunchInfoNVX* pLaunchInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CuLaunchInfoNVX*, void>)(
                _slots[89] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[89] = nativeContext.LoadFunction("vkCmdCuLaunchKernelNVX", "vulkan")
            )
        )(commandBuffer, pLaunchInfo);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCuLaunchKernelNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCuLaunchKernelNVX(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkCuLaunchInfoNVX *")] CuLaunchInfoNVX* pLaunchInfo
    ) => DllImport.CmdCuLaunchKernelNVX(commandBuffer, pLaunchInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdCuLaunchKernelNVX(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCuLaunchInfoNVX *")] Ref<CuLaunchInfoNVX> pLaunchInfo
    )
    {
        fixed (CuLaunchInfoNVX* __dsl_pLaunchInfo = pLaunchInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdCuLaunchKernelNVX(__dsl_commandBuffer, __dsl_pLaunchInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdCuLaunchKernelNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdCuLaunchKernelNVX(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCuLaunchInfoNVX *")] Ref<CuLaunchInfoNVX> pLaunchInfo
    ) => DllImport.CmdCuLaunchKernelNVX(commandBuffer, pLaunchInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDebugMarkerBeginEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")] DebugMarkerMarkerInfoEXT* pMarkerInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, DebugMarkerMarkerInfoEXT*, void>)(
                _slots[90] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[90] = nativeContext.LoadFunction("vkCmdDebugMarkerBeginEXT", "vulkan")
            )
        )(commandBuffer, pMarkerInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerBeginEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDebugMarkerBeginEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")] DebugMarkerMarkerInfoEXT* pMarkerInfo
    ) => DllImport.CmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDebugMarkerBeginEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
            Ref<DebugMarkerMarkerInfoEXT> pMarkerInfo
    )
    {
        fixed (DebugMarkerMarkerInfoEXT* __dsl_pMarkerInfo = pMarkerInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDebugMarkerBeginEXT(__dsl_commandBuffer, __dsl_pMarkerInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerBeginEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDebugMarkerBeginEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
            Ref<DebugMarkerMarkerInfoEXT> pMarkerInfo
    ) => DllImport.CmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDebugMarkerEndEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, void>)(
                _slots[91] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[91] = nativeContext.LoadFunction("vkCmdDebugMarkerEndEXT", "vulkan")
            )
        )(commandBuffer);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerEndEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDebugMarkerEndEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) => DllImport.CmdDebugMarkerEndEXT(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDebugMarkerEndEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDebugMarkerEndEXT(__dsl_commandBuffer);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerEndEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDebugMarkerEndEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    ) => DllImport.CmdDebugMarkerEndEXT(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDebugMarkerInsertEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")] DebugMarkerMarkerInfoEXT* pMarkerInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, DebugMarkerMarkerInfoEXT*, void>)(
                _slots[92] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[92] = nativeContext.LoadFunction("vkCmdDebugMarkerInsertEXT", "vulkan")
            )
        )(commandBuffer, pMarkerInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerInsertEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDebugMarkerInsertEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")] DebugMarkerMarkerInfoEXT* pMarkerInfo
    ) => DllImport.CmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDebugMarkerInsertEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
            Ref<DebugMarkerMarkerInfoEXT> pMarkerInfo
    )
    {
        fixed (DebugMarkerMarkerInfoEXT* __dsl_pMarkerInfo = pMarkerInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDebugMarkerInsertEXT(__dsl_commandBuffer, __dsl_pMarkerInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDebugMarkerInsertEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDebugMarkerInsertEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDebugMarkerMarkerInfoEXT *")]
            Ref<DebugMarkerMarkerInfoEXT> pMarkerInfo
    ) => DllImport.CmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDecodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkVideoDecodeInfoKHR *")] VideoDecodeInfoKHR* pDecodeInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, VideoDecodeInfoKHR*, void>)(
                _slots[93] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[93] = nativeContext.LoadFunction("vkCmdDecodeVideoKHR", "vulkan")
            )
        )(commandBuffer, pDecodeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecodeVideoKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDecodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkVideoDecodeInfoKHR *")] VideoDecodeInfoKHR* pDecodeInfo
    ) => DllImport.CmdDecodeVideoKHR(commandBuffer, pDecodeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDecodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkVideoDecodeInfoKHR *")] Ref<VideoDecodeInfoKHR> pDecodeInfo
    )
    {
        fixed (VideoDecodeInfoKHR* __dsl_pDecodeInfo = pDecodeInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDecodeVideoKHR(__dsl_commandBuffer, __dsl_pDecodeInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_decode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecodeVideoKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDecodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkVideoDecodeInfoKHR *")] Ref<VideoDecodeInfoKHR> pDecodeInfo
    ) => DllImport.CmdDecodeVideoKHR(commandBuffer, pDecodeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDecompressMemoryIndirectCountNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsAddress,
        [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsCountAddress,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, ulong, ulong, uint, void>)(
                _slots[94] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[94] = nativeContext.LoadFunction(
                        "vkCmdDecompressMemoryIndirectCountNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryIndirectCountNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDecompressMemoryIndirectCountNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsAddress,
        [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsCountAddress,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDecompressMemoryIndirectCountNV(
            commandBuffer,
            indirectCommandsAddress,
            indirectCommandsCountAddress,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDecompressMemoryIndirectCountNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsAddress,
        [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsCountAddress,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDecompressMemoryIndirectCountNV(
                __dsl_commandBuffer,
                indirectCommandsAddress,
                indirectCommandsCountAddress,
                stride
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryIndirectCountNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDecompressMemoryIndirectCountNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsAddress,
        [NativeTypeName("VkDeviceAddress")] ulong indirectCommandsCountAddress,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDecompressMemoryIndirectCountNV(
            commandBuffer,
            indirectCommandsAddress,
            indirectCommandsCountAddress,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDecompressMemoryNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint decompressRegionCount,
        [NativeTypeName("const VkDecompressMemoryRegionNV *")]
            DecompressMemoryRegionNV* pDecompressMemoryRegions
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, DecompressMemoryRegionNV*, void>)(
                _slots[95] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[95] = nativeContext.LoadFunction("vkCmdDecompressMemoryNV", "vulkan")
            )
        )(commandBuffer, decompressRegionCount, pDecompressMemoryRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDecompressMemoryNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint decompressRegionCount,
        [NativeTypeName("const VkDecompressMemoryRegionNV *")]
            DecompressMemoryRegionNV* pDecompressMemoryRegions
    ) =>
        DllImport.CmdDecompressMemoryNV(
            commandBuffer,
            decompressRegionCount,
            pDecompressMemoryRegions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDecompressMemoryNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint decompressRegionCount,
        [NativeTypeName("const VkDecompressMemoryRegionNV *")]
            Ref<DecompressMemoryRegionNV> pDecompressMemoryRegions
    )
    {
        fixed (DecompressMemoryRegionNV* __dsl_pDecompressMemoryRegions = pDecompressMemoryRegions)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDecompressMemoryNV(
                __dsl_commandBuffer,
                decompressRegionCount,
                __dsl_pDecompressMemoryRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDecompressMemoryNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint decompressRegionCount,
        [NativeTypeName("const VkDecompressMemoryRegionNV *")]
            Ref<DecompressMemoryRegionNV> pDecompressMemoryRegions
    ) =>
        DllImport.CmdDecompressMemoryNV(
            commandBuffer,
            decompressRegionCount,
            pDecompressMemoryRegions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDecompressMemoryNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDecompressMemoryRegionNV *")]
            DecompressMemoryRegionNV pDecompressMemoryRegions
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDecompressMemoryNV(
                __dsl_commandBuffer,
                1,
                (DecompressMemoryRegionNV*)&pDecompressMemoryRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_memory_decompression"],
        ImpliesSets = [
            "VK_KHR_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_KHR_buffer_device_address+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDecompressMemoryNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDecompressMemoryNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDecompressMemoryRegionNV *")]
            DecompressMemoryRegionNV pDecompressMemoryRegions
    ) => DllImport.CmdDecompressMemoryNV(commandBuffer, pDecompressMemoryRegions);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDispatch(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, uint, void>)(
                _slots[96] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[96] = nativeContext.LoadFunction("vkCmdDispatch", "vulkan")
            )
        )(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatch")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatch(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) => DllImport.CmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDispatch(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDispatch(__dsl_commandBuffer, groupCountX, groupCountY, groupCountZ);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatch")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatch(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) => DllImport.CmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDispatchBase(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint baseGroupX,
        [NativeTypeName("uint32_t")] uint baseGroupY,
        [NativeTypeName("uint32_t")] uint baseGroupZ,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, uint, uint, uint, uint, void>)(
                _slots[97] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[97] = nativeContext.LoadFunction("vkCmdDispatchBase", "vulkan")
            )
        )(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchBase")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchBase(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint baseGroupX,
        [NativeTypeName("uint32_t")] uint baseGroupY,
        [NativeTypeName("uint32_t")] uint baseGroupZ,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        DllImport.CmdDispatchBase(
            commandBuffer,
            baseGroupX,
            baseGroupY,
            baseGroupZ,
            groupCountX,
            groupCountY,
            groupCountZ
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDispatchBase(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint baseGroupX,
        [NativeTypeName("uint32_t")] uint baseGroupY,
        [NativeTypeName("uint32_t")] uint baseGroupZ,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDispatchBase(
                __dsl_commandBuffer,
                baseGroupX,
                baseGroupY,
                baseGroupZ,
                groupCountX,
                groupCountY,
                groupCountZ
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchBase")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchBase(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint baseGroupX,
        [NativeTypeName("uint32_t")] uint baseGroupY,
        [NativeTypeName("uint32_t")] uint baseGroupZ,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        DllImport.CmdDispatchBase(
            commandBuffer,
            baseGroupX,
            baseGroupY,
            baseGroupZ,
            groupCountX,
            groupCountY,
            groupCountZ
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDispatchBaseKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint baseGroupX,
        [NativeTypeName("uint32_t")] uint baseGroupY,
        [NativeTypeName("uint32_t")] uint baseGroupZ,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, uint, uint, uint, uint, void>)(
                _slots[98] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[98] = nativeContext.LoadFunction("vkCmdDispatchBaseKHR", "vulkan")
            )
        )(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchBaseKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchBaseKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint baseGroupX,
        [NativeTypeName("uint32_t")] uint baseGroupY,
        [NativeTypeName("uint32_t")] uint baseGroupZ,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        DllImport.CmdDispatchBaseKHR(
            commandBuffer,
            baseGroupX,
            baseGroupY,
            baseGroupZ,
            groupCountX,
            groupCountY,
            groupCountZ
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDispatchBaseKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint baseGroupX,
        [NativeTypeName("uint32_t")] uint baseGroupY,
        [NativeTypeName("uint32_t")] uint baseGroupZ,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDispatchBaseKHR(
                __dsl_commandBuffer,
                baseGroupX,
                baseGroupY,
                baseGroupZ,
                groupCountX,
                groupCountY,
                groupCountZ
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchBaseKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchBaseKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint baseGroupX,
        [NativeTypeName("uint32_t")] uint baseGroupY,
        [NativeTypeName("uint32_t")] uint baseGroupZ,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        DllImport.CmdDispatchBaseKHR(
            commandBuffer,
            baseGroupX,
            baseGroupY,
            baseGroupZ,
            groupCountX,
            groupCountY,
            groupCountZ
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDispatchIndirect(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, BufferHandle*, ulong, void>)(
                _slots[99] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[99] = nativeContext.LoadFunction("vkCmdDispatchIndirect", "vulkan")
            )
        )(commandBuffer, buffer, offset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchIndirect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchIndirect(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset
    ) => DllImport.CmdDispatchIndirect(commandBuffer, buffer, offset);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDispatchIndirect(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset
    )
    {
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDispatchIndirect(__dsl_commandBuffer, __dsl_buffer, offset);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchIndirect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchIndirect(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset
    ) => DllImport.CmdDispatchIndirect(commandBuffer, buffer, offset);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDispatchTileQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, void>)(
                _slots[100] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[100] = nativeContext.LoadFunction("vkCmdDispatchTileQCOM", "vulkan")
            )
        )(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchTileQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchTileQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) => DllImport.CmdDispatchTileQCOM(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDispatchTileQCOM(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDispatchTileQCOM(__dsl_commandBuffer);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDispatchTileQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDispatchTileQCOM(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    ) => DllImport.CmdDispatchTileQCOM(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDraw(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint vertexCount,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstVertex,
        [NativeTypeName("uint32_t")] uint firstInstance
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, uint, uint, void>)(
                _slots[101] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[101] = nativeContext.LoadFunction("vkCmdDraw", "vulkan")
            )
        )(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDraw")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDraw(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint vertexCount,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstVertex,
        [NativeTypeName("uint32_t")] uint firstInstance
    ) => DllImport.CmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDraw(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint vertexCount,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstVertex,
        [NativeTypeName("uint32_t")] uint firstInstance
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDraw(
                __dsl_commandBuffer,
                vertexCount,
                instanceCount,
                firstVertex,
                firstInstance
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDraw")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDraw(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint vertexCount,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstVertex,
        [NativeTypeName("uint32_t")] uint firstInstance
    ) => DllImport.CmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawClusterHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, uint, void>)(
                _slots[102] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[102] = nativeContext.LoadFunction("vkCmdDrawClusterHUAWEI", "vulkan")
            )
        )(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_cluster_culling_shader"],
        ImpliesSets = [
            "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
            "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawClusterHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawClusterHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) => DllImport.CmdDrawClusterHuawei(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawClusterHuawei(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawClusterHuawei(
                __dsl_commandBuffer,
                groupCountX,
                groupCountY,
                groupCountZ
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_cluster_culling_shader"],
        ImpliesSets = [
            "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
            "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawClusterHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawClusterHuawei(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) => DllImport.CmdDrawClusterHuawei(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawClusterIndirectHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, BufferHandle*, ulong, void>)(
                _slots[103] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[103] = nativeContext.LoadFunction(
                        "vkCmdDrawClusterIndirectHUAWEI",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_cluster_culling_shader"],
        ImpliesSets = [
            "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
            "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawClusterIndirectHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawClusterIndirectHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset
    ) => DllImport.CmdDrawClusterIndirectHuawei(commandBuffer, buffer, offset);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawClusterIndirectHuawei(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset
    )
    {
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawClusterIndirectHuawei(__dsl_commandBuffer, __dsl_buffer, offset);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_cluster_culling_shader"],
        ImpliesSets = [
            "VK_HUAWEI_cluster_culling_shader+VK_KHR_get_physical_device_properties2",
            "VK_HUAWEI_cluster_culling_shader+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawClusterIndirectHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawClusterIndirectHuawei(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset
    ) => DllImport.CmdDrawClusterIndirectHuawei(commandBuffer, buffer, offset);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndexed(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint indexCount,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstIndex,
        [NativeTypeName("int32_t")] int vertexOffset,
        [NativeTypeName("uint32_t")] uint firstInstance
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, uint, int, uint, void>)(
                _slots[104] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[104] = nativeContext.LoadFunction("vkCmdDrawIndexed", "vulkan")
            )
        )(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexed")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexed(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint indexCount,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstIndex,
        [NativeTypeName("int32_t")] int vertexOffset,
        [NativeTypeName("uint32_t")] uint firstInstance
    ) =>
        DllImport.CmdDrawIndexed(
            commandBuffer,
            indexCount,
            instanceCount,
            firstIndex,
            vertexOffset,
            firstInstance
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndexed(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint indexCount,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstIndex,
        [NativeTypeName("int32_t")] int vertexOffset,
        [NativeTypeName("uint32_t")] uint firstInstance
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawIndexed(
                __dsl_commandBuffer,
                indexCount,
                instanceCount,
                firstIndex,
                vertexOffset,
                firstInstance
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexed")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexed(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint indexCount,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstIndex,
        [NativeTypeName("int32_t")] int vertexOffset,
        [NativeTypeName("uint32_t")] uint firstInstance
    ) =>
        DllImport.CmdDrawIndexed(
            commandBuffer,
            indexCount,
            instanceCount,
            firstIndex,
            vertexOffset,
            firstInstance
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndexedIndirect(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, BufferHandle*, ulong, uint, uint, void>)(
                _slots[105] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[105] = nativeContext.LoadFunction("vkCmdDrawIndexedIndirect", "vulkan")
            )
        )(commandBuffer, buffer, offset, drawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexedIndirect(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => DllImport.CmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndexedIndirect(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawIndexedIndirect(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                drawCount,
                stride
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexedIndirect(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => DllImport.CmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndexedIndirectCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BufferHandle*,
                ulong,
                BufferHandle*,
                ulong,
                uint,
                uint,
                void>)(
                _slots[106] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[106] = nativeContext.LoadFunction(
                        "vkCmdDrawIndexedIndirectCount",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexedIndirectCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawIndexedIndirectCount(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndexedIndirectCount(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (BufferHandle* __dsl_countBuffer = countBuffer)
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawIndexedIndirectCount(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                __dsl_countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexedIndirectCount(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawIndexedIndirectCount(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndexedIndirectCountAMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BufferHandle*,
                ulong,
                BufferHandle*,
                ulong,
                uint,
                uint,
                void>)(
                _slots[107] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[107] = nativeContext.LoadFunction(
                        "vkCmdDrawIndexedIndirectCountAMD",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCountAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexedIndirectCountAMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawIndexedIndirectCountAMD(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndexedIndirectCountAMD(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (BufferHandle* __dsl_countBuffer = countBuffer)
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawIndexedIndirectCountAMD(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                __dsl_countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCountAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexedIndirectCountAMD(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawIndexedIndirectCountAMD(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndexedIndirectCountKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BufferHandle*,
                ulong,
                BufferHandle*,
                ulong,
                uint,
                uint,
                void>)(
                _slots[108] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[108] = nativeContext.LoadFunction(
                        "vkCmdDrawIndexedIndirectCountKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCountKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexedIndirectCountKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawIndexedIndirectCountKHR(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndexedIndirectCountKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (BufferHandle* __dsl_countBuffer = countBuffer)
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawIndexedIndirectCountKHR(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                __dsl_countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndexedIndirectCountKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndexedIndirectCountKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawIndexedIndirectCountKHR(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndirect(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, BufferHandle*, ulong, uint, uint, void>)(
                _slots[109] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[109] = nativeContext.LoadFunction("vkCmdDrawIndirect", "vulkan")
            )
        )(commandBuffer, buffer, offset, drawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirect(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => DllImport.CmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndirect(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawIndirect(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                drawCount,
                stride
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirect(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => DllImport.CmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndirectByteCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("VkBuffer")] BufferHandle* counterBuffer,
        [NativeTypeName("VkDeviceSize")] ulong counterBufferOffset,
        [NativeTypeName("uint32_t")] uint counterOffset,
        [NativeTypeName("uint32_t")] uint vertexStride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                uint,
                BufferHandle*,
                ulong,
                uint,
                uint,
                void>)(
                _slots[110] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[110] = nativeContext.LoadFunction(
                        "vkCmdDrawIndirectByteCountEXT",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            instanceCount,
            firstInstance,
            counterBuffer,
            counterBufferOffset,
            counterOffset,
            vertexStride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectByteCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirectByteCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("VkBuffer")] BufferHandle* counterBuffer,
        [NativeTypeName("VkDeviceSize")] ulong counterBufferOffset,
        [NativeTypeName("uint32_t")] uint counterOffset,
        [NativeTypeName("uint32_t")] uint vertexStride
    ) =>
        DllImport.CmdDrawIndirectByteCountEXT(
            commandBuffer,
            instanceCount,
            firstInstance,
            counterBuffer,
            counterBufferOffset,
            counterOffset,
            vertexStride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndirectByteCountEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> counterBuffer,
        [NativeTypeName("VkDeviceSize")] ulong counterBufferOffset,
        [NativeTypeName("uint32_t")] uint counterOffset,
        [NativeTypeName("uint32_t")] uint vertexStride
    )
    {
        fixed (BufferHandle* __dsl_counterBuffer = counterBuffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawIndirectByteCountEXT(
                __dsl_commandBuffer,
                instanceCount,
                firstInstance,
                __dsl_counterBuffer,
                counterBufferOffset,
                counterOffset,
                vertexStride
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectByteCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirectByteCountEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> counterBuffer,
        [NativeTypeName("VkDeviceSize")] ulong counterBufferOffset,
        [NativeTypeName("uint32_t")] uint counterOffset,
        [NativeTypeName("uint32_t")] uint vertexStride
    ) =>
        DllImport.CmdDrawIndirectByteCountEXT(
            commandBuffer,
            instanceCount,
            firstInstance,
            counterBuffer,
            counterBufferOffset,
            counterOffset,
            vertexStride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndirectCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BufferHandle*,
                ulong,
                BufferHandle*,
                ulong,
                uint,
                uint,
                void>)(
                _slots[111] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[111] = nativeContext.LoadFunction("vkCmdDrawIndirectCount", "vulkan")
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirectCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawIndirectCount(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndirectCount(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (BufferHandle* __dsl_countBuffer = countBuffer)
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawIndirectCount(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                __dsl_countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirectCount(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawIndirectCount(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndirectCountAMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BufferHandle*,
                ulong,
                BufferHandle*,
                ulong,
                uint,
                uint,
                void>)(
                _slots[112] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[112] = nativeContext.LoadFunction(
                        "vkCmdDrawIndirectCountAMD",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCountAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirectCountAMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawIndirectCountAMD(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndirectCountAMD(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (BufferHandle* __dsl_countBuffer = countBuffer)
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawIndirectCountAMD(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                __dsl_countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_AMD_draw_indirect_count"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCountAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirectCountAMD(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawIndirectCountAMD(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndirectCountKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BufferHandle*,
                ulong,
                BufferHandle*,
                ulong,
                uint,
                uint,
                void>)(
                _slots[113] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[113] = nativeContext.LoadFunction(
                        "vkCmdDrawIndirectCountKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCountKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirectCountKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawIndirectCountKHR(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawIndirectCountKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (BufferHandle* __dsl_countBuffer = countBuffer)
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawIndirectCountKHR(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                __dsl_countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_draw_indirect_count"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawIndirectCountKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawIndirectCountKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawIndirectCountKHR(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMeshTasksEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, uint, void>)(
                _slots[114] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[114] = nativeContext.LoadFunction("vkCmdDrawMeshTasksEXT", "vulkan")
            )
        )(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) => DllImport.CmdDrawMeshTasksEXT(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMeshTasksEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawMeshTasksEXT(
                __dsl_commandBuffer,
                groupCountX,
                groupCountY,
                groupCountZ
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint groupCountX,
        [NativeTypeName("uint32_t")] uint groupCountY,
        [NativeTypeName("uint32_t")] uint groupCountZ
    ) => DllImport.CmdDrawMeshTasksEXT(commandBuffer, groupCountX, groupCountY, groupCountZ);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMeshTasksIndirectCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BufferHandle*,
                ulong,
                BufferHandle*,
                ulong,
                uint,
                uint,
                void>)(
                _slots[115] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[115] = nativeContext.LoadFunction(
                        "vkCmdDrawMeshTasksIndirectCountEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader+VK_KHR_draw_indirect_count", "VK_EXT_mesh_shader+VK_VERSION_1_2"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksIndirectCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawMeshTasksIndirectCountEXT(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMeshTasksIndirectCountEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (BufferHandle* __dsl_countBuffer = countBuffer)
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawMeshTasksIndirectCountEXT(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                __dsl_countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader+VK_KHR_draw_indirect_count", "VK_EXT_mesh_shader+VK_VERSION_1_2"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksIndirectCountEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawMeshTasksIndirectCountEXT(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMeshTasksIndirectCountNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BufferHandle*,
                ulong,
                BufferHandle*,
                ulong,
                uint,
                uint,
                void>)(
                _slots[116] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[116] = nativeContext.LoadFunction(
                        "vkCmdDrawMeshTasksIndirectCountNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader+VK_KHR_draw_indirect_count", "VK_NV_mesh_shader+VK_VERSION_1_2"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectCountNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksIndirectCountNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] BufferHandle* countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawMeshTasksIndirectCountNV(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMeshTasksIndirectCountNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (BufferHandle* __dsl_countBuffer = countBuffer)
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawMeshTasksIndirectCountNV(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                __dsl_countBuffer,
                countBufferOffset,
                maxDrawCount,
                stride
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader+VK_KHR_draw_indirect_count", "VK_NV_mesh_shader+VK_VERSION_1_2"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectCountNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksIndirectCountNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> countBuffer,
        [NativeTypeName("VkDeviceSize")] ulong countBufferOffset,
        [NativeTypeName("uint32_t")] uint maxDrawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawMeshTasksIndirectCountNV(
            commandBuffer,
            buffer,
            offset,
            countBuffer,
            countBufferOffset,
            maxDrawCount,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMeshTasksIndirectEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, BufferHandle*, ulong, uint, uint, void>)(
                _slots[117] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[117] = nativeContext.LoadFunction(
                        "vkCmdDrawMeshTasksIndirectEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, drawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksIndirectEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => DllImport.CmdDrawMeshTasksIndirectEXT(commandBuffer, buffer, offset, drawCount, stride);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMeshTasksIndirectEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawMeshTasksIndirectEXT(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                drawCount,
                stride
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_mesh_shader"],
        ImpliesSets = ["VK_EXT_mesh_shader+VK_KHR_spirv_1_4", "VK_EXT_mesh_shader+VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksIndirectEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => DllImport.CmdDrawMeshTasksIndirectEXT(commandBuffer, buffer, offset, drawCount, stride);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMeshTasksIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, BufferHandle*, ulong, uint, uint, void>)(
                _slots[118] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[118] = nativeContext.LoadFunction(
                        "vkCmdDrawMeshTasksIndirectNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, buffer, offset, drawCount, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksIndirectNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => DllImport.CmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMeshTasksIndirectNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawMeshTasksIndirectNV(
                __dsl_commandBuffer,
                __dsl_buffer,
                offset,
                drawCount,
                stride
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksIndirectNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksIndirectNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("uint32_t")] uint stride
    ) => DllImport.CmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMeshTasksNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint taskCount,
        [NativeTypeName("uint32_t")] uint firstTask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, void>)(
                _slots[119] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[119] = nativeContext.LoadFunction("vkCmdDrawMeshTasksNV", "vulkan")
            )
        )(commandBuffer, taskCount, firstTask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint taskCount,
        [NativeTypeName("uint32_t")] uint firstTask
    ) => DllImport.CmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMeshTasksNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint taskCount,
        [NativeTypeName("uint32_t")] uint firstTask
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawMeshTasksNV(__dsl_commandBuffer, taskCount, firstTask);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_mesh_shader"],
        ImpliesSets = [
            "VK_NV_mesh_shader+VK_KHR_get_physical_device_properties2",
            "VK_NV_mesh_shader+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMeshTasksNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMeshTasksNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint taskCount,
        [NativeTypeName("uint32_t")] uint firstTask
    ) => DllImport.CmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMultiEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawInfoEXT *")] MultiDrawInfoEXT* pVertexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                MultiDrawInfoEXT*,
                uint,
                uint,
                uint,
                void>)(
                _slots[120] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[120] = nativeContext.LoadFunction("vkCmdDrawMultiEXT", "vulkan")
            )
        )(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMultiEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawInfoEXT *")] MultiDrawInfoEXT* pVertexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawMultiEXT(
            commandBuffer,
            drawCount,
            pVertexInfo,
            instanceCount,
            firstInstance,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMultiEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawInfoEXT *")] Ref<MultiDrawInfoEXT> pVertexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (MultiDrawInfoEXT* __dsl_pVertexInfo = pVertexInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawMultiEXT(
                __dsl_commandBuffer,
                drawCount,
                __dsl_pVertexInfo,
                instanceCount,
                firstInstance,
                stride
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMultiEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawInfoEXT *")] Ref<MultiDrawInfoEXT> pVertexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawMultiEXT(
            commandBuffer,
            drawCount,
            pVertexInfo,
            instanceCount,
            firstInstance,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMultiEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkMultiDrawInfoEXT *")] MultiDrawInfoEXT pVertexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawMultiEXT(
                __dsl_commandBuffer,
                1,
                (MultiDrawInfoEXT*)&pVertexInfo,
                instanceCount,
                firstInstance,
                stride
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMultiEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkMultiDrawInfoEXT *")] MultiDrawInfoEXT pVertexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride
    ) =>
        DllImport.CmdDrawMultiEXT(commandBuffer, pVertexInfo, instanceCount, firstInstance, stride);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMultiIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")] MultiDrawIndexedInfoEXT* pIndexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("const int32_t *")] int* pVertexOffset
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                MultiDrawIndexedInfoEXT*,
                uint,
                uint,
                uint,
                int*,
                void>)(
                _slots[121] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[121] = nativeContext.LoadFunction("vkCmdDrawMultiIndexedEXT", "vulkan")
            )
        )(
            commandBuffer,
            drawCount,
            pIndexInfo,
            instanceCount,
            firstInstance,
            stride,
            pVertexOffset
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMultiIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")] MultiDrawIndexedInfoEXT* pIndexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("const int32_t *")] int* pVertexOffset
    ) =>
        DllImport.CmdDrawMultiIndexedEXT(
            commandBuffer,
            drawCount,
            pIndexInfo,
            instanceCount,
            firstInstance,
            stride,
            pVertexOffset
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMultiIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")]
            Ref<MultiDrawIndexedInfoEXT> pIndexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("const int32_t *")] Ref<int> pVertexOffset
    )
    {
        fixed (int* __dsl_pVertexOffset = pVertexOffset)
        fixed (MultiDrawIndexedInfoEXT* __dsl_pIndexInfo = pIndexInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawMultiIndexedEXT(
                __dsl_commandBuffer,
                drawCount,
                __dsl_pIndexInfo,
                instanceCount,
                firstInstance,
                stride,
                __dsl_pVertexOffset
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMultiIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint drawCount,
        [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")]
            Ref<MultiDrawIndexedInfoEXT> pIndexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("const int32_t *")] Ref<int> pVertexOffset
    ) =>
        DllImport.CmdDrawMultiIndexedEXT(
            commandBuffer,
            drawCount,
            pIndexInfo,
            instanceCount,
            firstInstance,
            stride,
            pVertexOffset
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdDrawMultiIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")] MultiDrawIndexedInfoEXT pIndexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("const int32_t *")] Ref<int> pVertexOffset
    )
    {
        fixed (int* __dsl_pVertexOffset = pVertexOffset)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdDrawMultiIndexedEXT(
                __dsl_commandBuffer,
                1,
                (MultiDrawIndexedInfoEXT*)&pIndexInfo,
                instanceCount,
                firstInstance,
                stride,
                __dsl_pVertexOffset
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_multi_draw"],
        ImpliesSets = [
            "VK_EXT_multi_draw+VK_KHR_get_physical_device_properties2",
            "VK_EXT_multi_draw+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdDrawMultiIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdDrawMultiIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkMultiDrawIndexedInfoEXT *")] MultiDrawIndexedInfoEXT pIndexInfo,
        [NativeTypeName("uint32_t")] uint instanceCount,
        [NativeTypeName("uint32_t")] uint firstInstance,
        [NativeTypeName("uint32_t")] uint stride,
        [NativeTypeName("const int32_t *")] Ref<int> pVertexOffset
    ) =>
        DllImport.CmdDrawMultiIndexedEXT(
            commandBuffer,
            pIndexInfo,
            instanceCount,
            firstInstance,
            stride,
            pVertexOffset
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEncodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkVideoEncodeInfoKHR *")] VideoEncodeInfoKHR* pEncodeInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, VideoEncodeInfoKHR*, void>)(
                _slots[122] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[122] = nativeContext.LoadFunction("vkCmdEncodeVideoKHR", "vulkan")
            )
        )(commandBuffer, pEncodeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEncodeVideoKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEncodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkVideoEncodeInfoKHR *")] VideoEncodeInfoKHR* pEncodeInfo
    ) => DllImport.CmdEncodeVideoKHR(commandBuffer, pEncodeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEncodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkVideoEncodeInfoKHR *")] Ref<VideoEncodeInfoKHR> pEncodeInfo
    )
    {
        fixed (VideoEncodeInfoKHR* __dsl_pEncodeInfo = pEncodeInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdEncodeVideoKHR(__dsl_commandBuffer, __dsl_pEncodeInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEncodeVideoKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEncodeVideoKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkVideoEncodeInfoKHR *")] Ref<VideoEncodeInfoKHR> pEncodeInfo
    ) => DllImport.CmdEncodeVideoKHR(commandBuffer, pEncodeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndConditionalRenderingEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, void>)(
                _slots[123] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[123] = nativeContext.LoadFunction(
                        "vkCmdEndConditionalRenderingEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering"],
        ImpliesSets = [
            "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conditional_rendering+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndConditionalRenderingEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndConditionalRenderingEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) => DllImport.CmdEndConditionalRenderingEXT(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndConditionalRenderingEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdEndConditionalRenderingEXT(__dsl_commandBuffer);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conditional_rendering"],
        ImpliesSets = [
            "VK_EXT_conditional_rendering+VK_KHR_get_physical_device_properties2",
            "VK_EXT_conditional_rendering+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndConditionalRenderingEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndConditionalRenderingEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    ) => DllImport.CmdEndConditionalRenderingEXT(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, void>)(
                _slots[124] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[124] = nativeContext.LoadFunction(
                        "vkCmdEndDebugUtilsLabelEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) => DllImport.CmdEndDebugUtilsLabelEXT(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdEndDebugUtilsLabelEXT(__dsl_commandBuffer);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    ) => DllImport.CmdEndDebugUtilsLabelEXT(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPerTileEndInfoQCOM *")] PerTileEndInfoQCOM* pPerTileEndInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PerTileEndInfoQCOM*, void>)(
                _slots[125] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[125] = nativeContext.LoadFunction(
                        "vkCmdEndPerTileExecutionQCOM",
                        "vulkan"
                    )
            )
        )(commandBuffer, pPerTileEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndPerTileExecutionQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPerTileEndInfoQCOM *")] PerTileEndInfoQCOM* pPerTileEndInfo
    ) => DllImport.CmdEndPerTileExecutionQCOM(commandBuffer, pPerTileEndInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPerTileEndInfoQCOM *")] Ref<PerTileEndInfoQCOM> pPerTileEndInfo
    )
    {
        fixed (PerTileEndInfoQCOM* __dsl_pPerTileEndInfo = pPerTileEndInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdEndPerTileExecutionQCOM(__dsl_commandBuffer, __dsl_pPerTileEndInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_shading"],
        ImpliesSets = [
            "VK_QCOM_tile_shading+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_shading+VK_QCOM_tile_properties",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndPerTileExecutionQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndPerTileExecutionQCOM(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPerTileEndInfoQCOM *")] Ref<PerTileEndInfoQCOM> pPerTileEndInfo
    ) => DllImport.CmdEndPerTileExecutionQCOM(commandBuffer, pPerTileEndInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndQuery(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, QueryPoolHandle*, uint, void>)(
                _slots[126] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[126] = nativeContext.LoadFunction("vkCmdEndQuery", "vulkan")
            )
        )(commandBuffer, queryPool, query);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndQuery")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndQuery(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) => DllImport.CmdEndQuery(commandBuffer, queryPool, query);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndQuery(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint query
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdEndQuery(__dsl_commandBuffer, __dsl_queryPool, query);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndQuery")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndQuery(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) => DllImport.CmdEndQuery(commandBuffer, queryPool, query);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndQueryIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("uint32_t")] uint index
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, QueryPoolHandle*, uint, uint, void>)(
                _slots[127] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[127] = nativeContext.LoadFunction("vkCmdEndQueryIndexedEXT", "vulkan")
            )
        )(commandBuffer, queryPool, query, index);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndQueryIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndQueryIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("uint32_t")] uint index
    ) => DllImport.CmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndQueryIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("uint32_t")] uint index
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdEndQueryIndexedEXT(
                __dsl_commandBuffer,
                __dsl_queryPool,
                query,
                index
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndQueryIndexedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndQueryIndexedEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint query,
        [NativeTypeName("uint32_t")] uint index
    ) => DllImport.CmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndRendering(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, void>)(
                _slots[128] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[128] = nativeContext.LoadFunction("vkCmdEndRendering", "vulkan")
            )
        )(commandBuffer);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRendering(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) => DllImport.CmdEndRendering(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndRendering(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdEndRendering(__dsl_commandBuffer);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRendering(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    ) => DllImport.CmdEndRendering(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndRendering2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderingEndInfoEXT *")] RenderingEndInfoEXT* pRenderingEndInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, RenderingEndInfoEXT*, void>)(
                _slots[129] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[129] = nativeContext.LoadFunction("vkCmdEndRendering2EXT", "vulkan")
            )
        )(commandBuffer, pRenderingEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map_offset"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRendering2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderingEndInfoEXT *")] RenderingEndInfoEXT* pRenderingEndInfo
    ) => DllImport.CmdEndRendering2EXT(commandBuffer, pRenderingEndInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndRendering2EXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderingEndInfoEXT *")] Ref<RenderingEndInfoEXT> pRenderingEndInfo
    )
    {
        fixed (RenderingEndInfoEXT* __dsl_pRenderingEndInfo = pRenderingEndInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdEndRendering2EXT(__dsl_commandBuffer, __dsl_pRenderingEndInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_fragment_density_map_offset"],
        ImpliesSets = [
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_KHR_get_physical_device_properties2+VK_VERSION_1_2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_KHR_create_renderpass2+VK_VERSION_1_3",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_KHR_dynamic_rendering",
            "VK_EXT_fragment_density_map+VK_VERSION_1_1+VK_VERSION_1_2+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRendering2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRendering2EXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderingEndInfoEXT *")] Ref<RenderingEndInfoEXT> pRenderingEndInfo
    ) => DllImport.CmdEndRendering2EXT(commandBuffer, pRenderingEndInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndRenderingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, void>)(
                _slots[130] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[130] = nativeContext.LoadFunction("vkCmdEndRenderingKHR", "vulkan")
            )
        )(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRenderingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) => DllImport.CmdEndRenderingKHR(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndRenderingKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdEndRenderingKHR(__dsl_commandBuffer);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering"],
        ImpliesSets = [
            "VK_KHR_depth_stencil_resolve+VK_KHR_get_physical_device_properties2",
            "VK_KHR_depth_stencil_resolve+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRenderingKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    ) => DllImport.CmdEndRenderingKHR(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndRenderPass(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, void>)(
                _slots[131] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[131] = nativeContext.LoadFunction("vkCmdEndRenderPass", "vulkan")
            )
        )(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRenderPass(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) => DllImport.CmdEndRenderPass(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndRenderPass(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdEndRenderPass(__dsl_commandBuffer);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRenderPass(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    ) => DllImport.CmdEndRenderPass(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndRenderPass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, SubpassEndInfo*, void>)(
                _slots[132] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[132] = nativeContext.LoadFunction("vkCmdEndRenderPass2", "vulkan")
            )
        )(commandBuffer, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRenderPass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) => DllImport.CmdEndRenderPass2(commandBuffer, pSubpassEndInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndRenderPass2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    )
    {
        fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdEndRenderPass2(__dsl_commandBuffer, __dsl_pSubpassEndInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRenderPass2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    ) => DllImport.CmdEndRenderPass2(commandBuffer, pSubpassEndInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, SubpassEndInfo*, void>)(
                _slots[133] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[133] = nativeContext.LoadFunction("vkCmdEndRenderPass2KHR", "vulkan")
            )
        )(commandBuffer, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) => DllImport.CmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    )
    {
        fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdEndRenderPass2KHR(__dsl_commandBuffer, __dsl_pSubpassEndInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndRenderPass2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    ) => DllImport.CmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle** pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pCounterBufferOffsets
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, BufferHandle**, ulong*, void>)(
                _slots[134] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[134] = nativeContext.LoadFunction(
                        "vkCmdEndTransformFeedbackEXT",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            firstCounterBuffer,
            counterBufferCount,
            pCounterBuffers,
            pCounterBufferOffsets
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndTransformFeedbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] BufferHandle** pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] ulong* pCounterBufferOffsets
    ) =>
        DllImport.CmdEndTransformFeedbackEXT(
            commandBuffer,
            firstCounterBuffer,
            counterBufferCount,
            pCounterBuffers,
            pCounterBufferOffsets
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pCounterBufferOffsets
    )
    {
        fixed (ulong* __dsl_pCounterBufferOffsets = pCounterBufferOffsets)
        fixed (BufferHandle** __dsl_pCounterBuffers = pCounterBuffers)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdEndTransformFeedbackEXT(
                __dsl_commandBuffer,
                firstCounterBuffer,
                counterBufferCount,
                __dsl_pCounterBuffers,
                __dsl_pCounterBufferOffsets
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_transform_feedback+VK_KHR_get_physical_device_properties2",
            "VK_EXT_transform_feedback+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndTransformFeedbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndTransformFeedbackEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstCounterBuffer,
        [NativeTypeName("uint32_t")] uint counterBufferCount,
        [NativeTypeName("const VkBuffer *")] Ref2D<BufferHandle> pCounterBuffers,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pCounterBufferOffsets
    ) =>
        DllImport.CmdEndTransformFeedbackEXT(
            commandBuffer,
            firstCounterBuffer,
            counterBufferCount,
            pCounterBuffers,
            pCounterBufferOffsets
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkVideoEndCodingInfoKHR *")] VideoEndCodingInfoKHR* pEndCodingInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, VideoEndCodingInfoKHR*, void>)(
                _slots[135] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[135] = nativeContext.LoadFunction("vkCmdEndVideoCodingKHR", "vulkan")
            )
        )(commandBuffer, pEndCodingInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkVideoEndCodingInfoKHR *")] VideoEndCodingInfoKHR* pEndCodingInfo
    ) => DllImport.CmdEndVideoCodingKHR(commandBuffer, pEndCodingInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdEndVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkVideoEndCodingInfoKHR *")]
            Ref<VideoEndCodingInfoKHR> pEndCodingInfo
    )
    {
        fixed (VideoEndCodingInfoKHR* __dsl_pEndCodingInfo = pEndCodingInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdEndVideoCodingKHR(__dsl_commandBuffer, __dsl_pEndCodingInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdEndVideoCodingKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdEndVideoCodingKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkVideoEndCodingInfoKHR *")]
            Ref<VideoEndCodingInfoKHR> pEndCodingInfo
    ) => DllImport.CmdEndVideoCodingKHR(commandBuffer, pEndCodingInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdExecuteCommand(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
    )
    {
        fixed (CommandBufferHandle* __dsl_pCommandBuffers = pCommandBuffers)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdExecuteCommands(
                __dsl_commandBuffer,
                1,
                (CommandBufferHandle**)&__dsl_pCommandBuffers
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteCommands")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdExecuteCommand(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
    ) => DllImport.CmdExecuteCommand(commandBuffer, pCommandBuffers);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdExecuteCommands(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle** pCommandBuffers
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, CommandBufferHandle**, void>)(
                _slots[136] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[136] = nativeContext.LoadFunction("vkCmdExecuteCommands", "vulkan")
            )
        )(commandBuffer, commandBufferCount, pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteCommands")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdExecuteCommands(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle** pCommandBuffers
    ) => DllImport.CmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdExecuteCommands(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] Ref2D<CommandBufferHandle> pCommandBuffers
    )
    {
        fixed (CommandBufferHandle** __dsl_pCommandBuffers = pCommandBuffers)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdExecuteCommands(
                __dsl_commandBuffer,
                commandBufferCount,
                __dsl_pCommandBuffers
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteCommands")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdExecuteCommands(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] Ref2D<CommandBufferHandle> pCommandBuffers
    ) => DllImport.CmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdExecuteGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            GeneratedCommandsInfoEXT* pGeneratedCommandsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, GeneratedCommandsInfoEXT*, void>)(
                _slots[137] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[137] = nativeContext.LoadFunction(
                        "vkCmdExecuteGeneratedCommandsEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdExecuteGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            GeneratedCommandsInfoEXT* pGeneratedCommandsInfo
    ) =>
        DllImport.CmdExecuteGeneratedCommandsEXT(
            commandBuffer,
            isPreprocessed,
            pGeneratedCommandsInfo
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdExecuteGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            Ref<GeneratedCommandsInfoEXT> pGeneratedCommandsInfo
    )
    {
        fixed (GeneratedCommandsInfoEXT* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdExecuteGeneratedCommandsEXT(
                __dsl_commandBuffer,
                isPreprocessed,
                __dsl_pGeneratedCommandsInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdExecuteGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            Ref<GeneratedCommandsInfoEXT> pGeneratedCommandsInfo
    ) =>
        DllImport.CmdExecuteGeneratedCommandsEXT(
            commandBuffer,
            isPreprocessed,
            pGeneratedCommandsInfo
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdExecuteGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            GeneratedCommandsInfoNV* pGeneratedCommandsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, GeneratedCommandsInfoNV*, void>)(
                _slots[138] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[138] = nativeContext.LoadFunction(
                        "vkCmdExecuteGeneratedCommandsNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdExecuteGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            GeneratedCommandsInfoNV* pGeneratedCommandsInfo
    ) =>
        DllImport.CmdExecuteGeneratedCommandsNV(
            commandBuffer,
            isPreprocessed,
            pGeneratedCommandsInfo
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdExecuteGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            Ref<GeneratedCommandsInfoNV> pGeneratedCommandsInfo
    )
    {
        fixed (GeneratedCommandsInfoNV* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdExecuteGeneratedCommandsNV(
                __dsl_commandBuffer,
                isPreprocessed,
                __dsl_pGeneratedCommandsInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdExecuteGeneratedCommandsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdExecuteGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint isPreprocessed,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            Ref<GeneratedCommandsInfoNV> pGeneratedCommandsInfo
    ) =>
        DllImport.CmdExecuteGeneratedCommandsNV(
            commandBuffer,
            isPreprocessed,
            pGeneratedCommandsInfo
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdFillBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        [NativeTypeName("uint32_t")] uint data
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, BufferHandle*, ulong, ulong, uint, void>)(
                _slots[139] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[139] = nativeContext.LoadFunction("vkCmdFillBuffer", "vulkan")
            )
        )(commandBuffer, dstBuffer, dstOffset, size, data);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdFillBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdFillBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        [NativeTypeName("uint32_t")] uint data
    ) => DllImport.CmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdFillBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        [NativeTypeName("uint32_t")] uint data
    )
    {
        fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdFillBuffer(
                __dsl_commandBuffer,
                __dsl_dstBuffer,
                dstOffset,
                size,
                data
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdFillBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdFillBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        [NativeTypeName("uint32_t")] uint data
    ) => DllImport.CmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, DebugUtilsLabelEXT*, void>)(
                _slots[140] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[140] = nativeContext.LoadFunction(
                        "vkCmdInsertDebugUtilsLabelEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pLabelInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdInsertDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) => DllImport.CmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    )
    {
        fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdInsertDebugUtilsLabelEXT(__dsl_commandBuffer, __dsl_pLabelInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdInsertDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    ) => DllImport.CmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdNextSubpass(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        SubpassContents contents
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, SubpassContents, void>)(
                _slots[141] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[141] = nativeContext.LoadFunction("vkCmdNextSubpass", "vulkan")
            )
        )(commandBuffer, contents);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdNextSubpass(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        SubpassContents contents
    ) => DllImport.CmdNextSubpass(commandBuffer, contents);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdNextSubpass(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        SubpassContents contents
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdNextSubpass(__dsl_commandBuffer, contents);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdNextSubpass(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        SubpassContents contents
    ) => DllImport.CmdNextSubpass(commandBuffer, contents);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdNextSubpass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, SubpassBeginInfo*, SubpassEndInfo*, void>)(
                _slots[142] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[142] = nativeContext.LoadFunction("vkCmdNextSubpass2", "vulkan")
            )
        )(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdNextSubpass2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) => DllImport.CmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdNextSubpass2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    )
    {
        fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
        fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdNextSubpass2(
                __dsl_commandBuffer,
                __dsl_pSubpassBeginInfo,
                __dsl_pSubpassEndInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdNextSubpass2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    ) => DllImport.CmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdNextSubpass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, SubpassBeginInfo*, SubpassEndInfo*, void>)(
                _slots[143] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[143] = nativeContext.LoadFunction("vkCmdNextSubpass2KHR", "vulkan")
            )
        )(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdNextSubpass2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] SubpassBeginInfo* pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] SubpassEndInfo* pSubpassEndInfo
    ) => DllImport.CmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdNextSubpass2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    )
    {
        fixed (SubpassEndInfo* __dsl_pSubpassEndInfo = pSubpassEndInfo)
        fixed (SubpassBeginInfo* __dsl_pSubpassBeginInfo = pSubpassBeginInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdNextSubpass2KHR(
                __dsl_commandBuffer,
                __dsl_pSubpassBeginInfo,
                __dsl_pSubpassEndInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdNextSubpass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdNextSubpass2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkSubpassBeginInfo *")] Ref<SubpassBeginInfo> pSubpassBeginInfo,
        [NativeTypeName("const VkSubpassEndInfo *")] Ref<SubpassEndInfo> pSubpassEndInfo
    ) => DllImport.CmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdOpticalFlowExecuteNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle* session,
        [NativeTypeName("const VkOpticalFlowExecuteInfoNV *")]
            OpticalFlowExecuteInfoNV* pExecuteInfo
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                OpticalFlowSessionNVHandle*,
                OpticalFlowExecuteInfoNV*,
                void>)(
                _slots[144] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[144] = nativeContext.LoadFunction(
                        "vkCmdOpticalFlowExecuteNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, session, pExecuteInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdOpticalFlowExecuteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdOpticalFlowExecuteNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle* session,
        [NativeTypeName("const VkOpticalFlowExecuteInfoNV *")]
            OpticalFlowExecuteInfoNV* pExecuteInfo
    ) => DllImport.CmdOpticalFlowExecuteNV(commandBuffer, session, pExecuteInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdOpticalFlowExecuteNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkOpticalFlowSessionNV")] Ref<OpticalFlowSessionNVHandle> session,
        [NativeTypeName("const VkOpticalFlowExecuteInfoNV *")]
            Ref<OpticalFlowExecuteInfoNV> pExecuteInfo
    )
    {
        fixed (OpticalFlowExecuteInfoNV* __dsl_pExecuteInfo = pExecuteInfo)
        fixed (OpticalFlowSessionNVHandle* __dsl_session = session)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdOpticalFlowExecuteNV(
                __dsl_commandBuffer,
                __dsl_session,
                __dsl_pExecuteInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdOpticalFlowExecuteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdOpticalFlowExecuteNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkOpticalFlowSessionNV")] Ref<OpticalFlowSessionNVHandle> session,
        [NativeTypeName("const VkOpticalFlowExecuteInfoNV *")]
            Ref<OpticalFlowExecuteInfoNV> pExecuteInfo
    ) => DllImport.CmdOpticalFlowExecuteNV(commandBuffer, session, pExecuteInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPipelineBarrier(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkPipelineStageFlags")] uint srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] uint dstStageMask,
        [NativeTypeName("VkDependencyFlags")] uint dependencyFlags,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] MemoryBarrier* pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            BufferMemoryBarrier* pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")] ImageMemoryBarrier* pImageMemoryBarriers
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                uint,
                uint,
                uint,
                MemoryBarrier*,
                uint,
                BufferMemoryBarrier*,
                uint,
                ImageMemoryBarrier*,
                void>)(
                _slots[145] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[145] = nativeContext.LoadFunction("vkCmdPipelineBarrier", "vulkan")
            )
        )(
            commandBuffer,
            srcStageMask,
            dstStageMask,
            dependencyFlags,
            memoryBarrierCount,
            pMemoryBarriers,
            bufferMemoryBarrierCount,
            pBufferMemoryBarriers,
            imageMemoryBarrierCount,
            pImageMemoryBarriers
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPipelineBarrier(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkPipelineStageFlags")] uint srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] uint dstStageMask,
        [NativeTypeName("VkDependencyFlags")] uint dependencyFlags,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] MemoryBarrier* pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            BufferMemoryBarrier* pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")] ImageMemoryBarrier* pImageMemoryBarriers
    ) =>
        DllImport.CmdPipelineBarrier(
            commandBuffer,
            srcStageMask,
            dstStageMask,
            dependencyFlags,
            memoryBarrierCount,
            pMemoryBarriers,
            bufferMemoryBarrierCount,
            pBufferMemoryBarriers,
            imageMemoryBarrierCount,
            pImageMemoryBarriers
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPipelineBarrier(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkPipelineStageFlags")] uint srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] uint dstStageMask,
        [NativeTypeName("VkDependencyFlags")] uint dependencyFlags,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] Ref<MemoryBarrier> pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            Ref<BufferMemoryBarrier> pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")]
            Ref<ImageMemoryBarrier> pImageMemoryBarriers
    )
    {
        fixed (ImageMemoryBarrier* __dsl_pImageMemoryBarriers = pImageMemoryBarriers)
        fixed (BufferMemoryBarrier* __dsl_pBufferMemoryBarriers = pBufferMemoryBarriers)
        fixed (MemoryBarrier* __dsl_pMemoryBarriers = pMemoryBarriers)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPipelineBarrier(
                __dsl_commandBuffer,
                srcStageMask,
                dstStageMask,
                dependencyFlags,
                memoryBarrierCount,
                __dsl_pMemoryBarriers,
                bufferMemoryBarrierCount,
                __dsl_pBufferMemoryBarriers,
                imageMemoryBarrierCount,
                __dsl_pImageMemoryBarriers
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPipelineBarrier(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkPipelineStageFlags")] uint srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] uint dstStageMask,
        [NativeTypeName("VkDependencyFlags")] uint dependencyFlags,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] Ref<MemoryBarrier> pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            Ref<BufferMemoryBarrier> pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")]
            Ref<ImageMemoryBarrier> pImageMemoryBarriers
    ) =>
        DllImport.CmdPipelineBarrier(
            commandBuffer,
            srcStageMask,
            dstStageMask,
            dependencyFlags,
            memoryBarrierCount,
            pMemoryBarriers,
            bufferMemoryBarrierCount,
            pBufferMemoryBarriers,
            imageMemoryBarrierCount,
            pImageMemoryBarriers
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPipelineBarrier2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, DependencyInfo*, void>)(
                _slots[146] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[146] = nativeContext.LoadFunction("vkCmdPipelineBarrier2", "vulkan")
            )
        )(commandBuffer, pDependencyInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPipelineBarrier2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) => DllImport.CmdPipelineBarrier2(commandBuffer, pDependencyInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPipelineBarrier2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    )
    {
        fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPipelineBarrier2(__dsl_commandBuffer, __dsl_pDependencyInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPipelineBarrier2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    ) => DllImport.CmdPipelineBarrier2(commandBuffer, pDependencyInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPipelineBarrier2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, DependencyInfo*, void>)(
                _slots[147] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[147] = nativeContext.LoadFunction("vkCmdPipelineBarrier2KHR", "vulkan")
            )
        )(commandBuffer, pDependencyInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPipelineBarrier2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) => DllImport.CmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPipelineBarrier2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    )
    {
        fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPipelineBarrier2KHR(__dsl_commandBuffer, __dsl_pDependencyInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPipelineBarrier2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPipelineBarrier2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    ) => DllImport.CmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPreprocessGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            GeneratedCommandsInfoEXT* pGeneratedCommandsInfo,
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* stateCommandBuffer
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                GeneratedCommandsInfoEXT*,
                CommandBufferHandle*,
                void>)(
                _slots[148] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[148] = nativeContext.LoadFunction(
                        "vkCmdPreprocessGeneratedCommandsEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pGeneratedCommandsInfo, stateCommandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPreprocessGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            GeneratedCommandsInfoEXT* pGeneratedCommandsInfo,
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* stateCommandBuffer
    ) =>
        DllImport.CmdPreprocessGeneratedCommandsEXT(
            commandBuffer,
            pGeneratedCommandsInfo,
            stateCommandBuffer
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPreprocessGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            Ref<GeneratedCommandsInfoEXT> pGeneratedCommandsInfo,
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> stateCommandBuffer
    )
    {
        fixed (CommandBufferHandle* __dsl_stateCommandBuffer = stateCommandBuffer)
        fixed (GeneratedCommandsInfoEXT* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPreprocessGeneratedCommandsEXT(
                __dsl_commandBuffer,
                __dsl_pGeneratedCommandsInfo,
                __dsl_stateCommandBuffer
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPreprocessGeneratedCommandsEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoEXT *")]
            Ref<GeneratedCommandsInfoEXT> pGeneratedCommandsInfo,
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> stateCommandBuffer
    ) =>
        DllImport.CmdPreprocessGeneratedCommandsEXT(
            commandBuffer,
            pGeneratedCommandsInfo,
            stateCommandBuffer
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPreprocessGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            GeneratedCommandsInfoNV* pGeneratedCommandsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, GeneratedCommandsInfoNV*, void>)(
                _slots[149] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[149] = nativeContext.LoadFunction(
                        "vkCmdPreprocessGeneratedCommandsNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, pGeneratedCommandsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPreprocessGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            GeneratedCommandsInfoNV* pGeneratedCommandsInfo
    ) => DllImport.CmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPreprocessGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            Ref<GeneratedCommandsInfoNV> pGeneratedCommandsInfo
    )
    {
        fixed (GeneratedCommandsInfoNV* __dsl_pGeneratedCommandsInfo = pGeneratedCommandsInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPreprocessGeneratedCommandsNV(
                __dsl_commandBuffer,
                __dsl_pGeneratedCommandsInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPreprocessGeneratedCommandsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPreprocessGeneratedCommandsNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkGeneratedCommandsInfoNV *")]
            Ref<GeneratedCommandsInfoNV> pGeneratedCommandsInfo
    ) => DllImport.CmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushConstants(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("VkShaderStageFlags")] uint stageFlags,
        [NativeTypeName("uint32_t")] uint offset,
        [NativeTypeName("uint32_t")] uint size,
        [NativeTypeName("const void *")] void* pValues
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                PipelineLayoutHandle*,
                uint,
                uint,
                uint,
                void*,
                void>)(
                _slots[150] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[150] = nativeContext.LoadFunction("vkCmdPushConstants", "vulkan")
            )
        )(commandBuffer, layout, stageFlags, offset, size, pValues);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushConstants(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("VkShaderStageFlags")] uint stageFlags,
        [NativeTypeName("uint32_t")] uint offset,
        [NativeTypeName("uint32_t")] uint size,
        [NativeTypeName("const void *")] void* pValues
    ) => DllImport.CmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushConstants(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("VkShaderStageFlags")] uint stageFlags,
        [NativeTypeName("uint32_t")] uint offset,
        [NativeTypeName("uint32_t")] uint size,
        [NativeTypeName("const void *")] Ref pValues
    )
    {
        fixed (void* __dsl_pValues = pValues)
        fixed (PipelineLayoutHandle* __dsl_layout = layout)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPushConstants(
                __dsl_commandBuffer,
                __dsl_layout,
                stageFlags,
                offset,
                size,
                __dsl_pValues
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushConstants(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("VkShaderStageFlags")] uint stageFlags,
        [NativeTypeName("uint32_t")] uint offset,
        [NativeTypeName("uint32_t")] uint size,
        [NativeTypeName("const void *")] Ref pValues
    ) => DllImport.CmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushConstants2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] PushConstantsInfo* pPushConstantsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PushConstantsInfo*, void>)(
                _slots[151] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[151] = nativeContext.LoadFunction("vkCmdPushConstants2", "vulkan")
            )
        )(commandBuffer, pPushConstantsInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushConstants2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] PushConstantsInfo* pPushConstantsInfo
    ) => DllImport.CmdPushConstants2(commandBuffer, pPushConstantsInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushConstants2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] Ref<PushConstantsInfo> pPushConstantsInfo
    )
    {
        fixed (PushConstantsInfo* __dsl_pPushConstantsInfo = pPushConstantsInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPushConstants2(__dsl_commandBuffer, __dsl_pPushConstantsInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushConstants2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] Ref<PushConstantsInfo> pPushConstantsInfo
    ) => DllImport.CmdPushConstants2(commandBuffer, pPushConstantsInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushConstants2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] PushConstantsInfo* pPushConstantsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PushConstantsInfo*, void>)(
                _slots[152] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[152] = nativeContext.LoadFunction("vkCmdPushConstants2KHR", "vulkan")
            )
        )(commandBuffer, pPushConstantsInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushConstants2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] PushConstantsInfo* pPushConstantsInfo
    ) => DllImport.CmdPushConstants2KHR(commandBuffer, pPushConstantsInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushConstants2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] Ref<PushConstantsInfo> pPushConstantsInfo
    )
    {
        fixed (PushConstantsInfo* __dsl_pPushConstantsInfo = pPushConstantsInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPushConstants2KHR(__dsl_commandBuffer, __dsl_pPushConstantsInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance6"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushConstants2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushConstants2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPushConstantsInfo *")] Ref<PushConstantsInfo> pPushConstantsInfo
    ) => DllImport.CmdPushConstants2KHR(commandBuffer, pPushConstantsInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSet(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                PipelineBindPoint,
                PipelineLayoutHandle*,
                uint,
                uint,
                WriteDescriptorSet*,
                void>)(
                _slots[153] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[153] = nativeContext.LoadFunction("vkCmdPushDescriptorSet", "vulkan")
            )
        )(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSet(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites
    ) =>
        DllImport.CmdPushDescriptorSet(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set,
            descriptorWriteCount,
            pDescriptorWrites
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSet(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] Ref<WriteDescriptorSet> pDescriptorWrites
    )
    {
        fixed (WriteDescriptorSet* __dsl_pDescriptorWrites = pDescriptorWrites)
        fixed (PipelineLayoutHandle* __dsl_layout = layout)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPushDescriptorSet(
                __dsl_commandBuffer,
                pipelineBindPoint,
                __dsl_layout,
                set,
                descriptorWriteCount,
                __dsl_pDescriptorWrites
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSet(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] Ref<WriteDescriptorSet> pDescriptorWrites
    ) =>
        DllImport.CmdPushDescriptorSet(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set,
            descriptorWriteCount,
            pDescriptorWrites
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSet(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet pDescriptorWrites
    )
    {
        fixed (PipelineLayoutHandle* __dsl_layout = layout)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPushDescriptorSet(
                __dsl_commandBuffer,
                pipelineBindPoint,
                __dsl_layout,
                set,
                1,
                (WriteDescriptorSet*)&pDescriptorWrites
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSet(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet pDescriptorWrites
    ) =>
        DllImport.CmdPushDescriptorSet(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set,
            pDescriptorWrites
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSet2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            PushDescriptorSetInfo* pPushDescriptorSetInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PushDescriptorSetInfo*, void>)(
                _slots[154] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[154] = nativeContext.LoadFunction("vkCmdPushDescriptorSet2", "vulkan")
            )
        )(commandBuffer, pPushDescriptorSetInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSet2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            PushDescriptorSetInfo* pPushDescriptorSetInfo
    ) => DllImport.CmdPushDescriptorSet2(commandBuffer, pPushDescriptorSetInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSet2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            Ref<PushDescriptorSetInfo> pPushDescriptorSetInfo
    )
    {
        fixed (PushDescriptorSetInfo* __dsl_pPushDescriptorSetInfo = pPushDescriptorSetInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPushDescriptorSet2(
                __dsl_commandBuffer,
                __dsl_pPushDescriptorSetInfo
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSet2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            Ref<PushDescriptorSetInfo> pPushDescriptorSetInfo
    ) => DllImport.CmdPushDescriptorSet2(commandBuffer, pPushDescriptorSetInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSet2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            PushDescriptorSetInfo* pPushDescriptorSetInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PushDescriptorSetInfo*, void>)(
                _slots[155] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[155] = nativeContext.LoadFunction(
                        "vkCmdPushDescriptorSet2KHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pPushDescriptorSetInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSet2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            PushDescriptorSetInfo* pPushDescriptorSetInfo
    ) => DllImport.CmdPushDescriptorSet2KHR(commandBuffer, pPushDescriptorSetInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSet2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            Ref<PushDescriptorSetInfo> pPushDescriptorSetInfo
    )
    {
        fixed (PushDescriptorSetInfo* __dsl_pPushDescriptorSetInfo = pPushDescriptorSetInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPushDescriptorSet2KHR(
                __dsl_commandBuffer,
                __dsl_pPushDescriptorSetInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSet2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSet2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetInfo *")]
            Ref<PushDescriptorSetInfo> pPushDescriptorSetInfo
    ) => DllImport.CmdPushDescriptorSet2KHR(commandBuffer, pPushDescriptorSetInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSetKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                PipelineBindPoint,
                PipelineLayoutHandle*,
                uint,
                uint,
                WriteDescriptorSet*,
                void>)(
                _slots[156] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[156] = nativeContext.LoadFunction(
                        "vkCmdPushDescriptorSetKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_push_descriptor"],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites
    ) =>
        DllImport.CmdPushDescriptorSetKHR(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set,
            descriptorWriteCount,
            pDescriptorWrites
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSetKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] Ref<WriteDescriptorSet> pDescriptorWrites
    )
    {
        fixed (WriteDescriptorSet* __dsl_pDescriptorWrites = pDescriptorWrites)
        fixed (PipelineLayoutHandle* __dsl_layout = layout)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPushDescriptorSetKHR(
                __dsl_commandBuffer,
                pipelineBindPoint,
                __dsl_layout,
                set,
                descriptorWriteCount,
                __dsl_pDescriptorWrites
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_push_descriptor"],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] Ref<WriteDescriptorSet> pDescriptorWrites
    ) =>
        DllImport.CmdPushDescriptorSetKHR(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set,
            descriptorWriteCount,
            pDescriptorWrites
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSetKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet pDescriptorWrites
    )
    {
        fixed (PipelineLayoutHandle* __dsl_layout = layout)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPushDescriptorSetKHR(
                __dsl_commandBuffer,
                pipelineBindPoint,
                __dsl_layout,
                set,
                1,
                (WriteDescriptorSet*)&pDescriptorWrites
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_push_descriptor"],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet pDescriptorWrites
    ) =>
        DllImport.CmdPushDescriptorSetKHR(
            commandBuffer,
            pipelineBindPoint,
            layout,
            set,
            pDescriptorWrites
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSetWithTemplate(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] void* pData
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                DescriptorUpdateTemplateHandle*,
                PipelineLayoutHandle*,
                uint,
                void*,
                void>)(
                _slots[157] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[157] = nativeContext.LoadFunction(
                        "vkCmdPushDescriptorSetWithTemplate",
                        "vulkan"
                    )
            )
        )(commandBuffer, descriptorUpdateTemplate, layout, set, pData);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplate(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] void* pData
    ) =>
        DllImport.CmdPushDescriptorSetWithTemplate(
            commandBuffer,
            descriptorUpdateTemplate,
            layout,
            set,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSetWithTemplate(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (PipelineLayoutHandle* __dsl_layout = layout)
        fixed (
            DescriptorUpdateTemplateHandle* __dsl_descriptorUpdateTemplate =
                descriptorUpdateTemplate
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPushDescriptorSetWithTemplate(
                __dsl_commandBuffer,
                __dsl_descriptorUpdateTemplate,
                __dsl_layout,
                set,
                __dsl_pData
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplate(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] Ref pData
    ) =>
        DllImport.CmdPushDescriptorSetWithTemplate(
            commandBuffer,
            descriptorUpdateTemplate,
            layout,
            set,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSetWithTemplate2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            PushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PushDescriptorSetWithTemplateInfo*, void>)(
                _slots[158] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[158] = nativeContext.LoadFunction(
                        "vkCmdPushDescriptorSetWithTemplate2",
                        "vulkan"
                    )
            )
        )(commandBuffer, pPushDescriptorSetWithTemplateInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplate2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            PushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo
    ) =>
        DllImport.CmdPushDescriptorSetWithTemplate2(
            commandBuffer,
            pPushDescriptorSetWithTemplateInfo
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSetWithTemplate2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            Ref<PushDescriptorSetWithTemplateInfo> pPushDescriptorSetWithTemplateInfo
    )
    {
        fixed (
            PushDescriptorSetWithTemplateInfo* __dsl_pPushDescriptorSetWithTemplateInfo =
                pPushDescriptorSetWithTemplateInfo
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPushDescriptorSetWithTemplate2(
                __dsl_commandBuffer,
                __dsl_pPushDescriptorSetWithTemplateInfo
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplate2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            Ref<PushDescriptorSetWithTemplateInfo> pPushDescriptorSetWithTemplateInfo
    ) =>
        DllImport.CmdPushDescriptorSetWithTemplate2(
            commandBuffer,
            pPushDescriptorSetWithTemplateInfo
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSetWithTemplate2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            PushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PushDescriptorSetWithTemplateInfo*, void>)(
                _slots[159] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[159] = nativeContext.LoadFunction(
                        "vkCmdPushDescriptorSetWithTemplate2KHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pPushDescriptorSetWithTemplateInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplate2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            PushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo
    ) =>
        DllImport.CmdPushDescriptorSetWithTemplate2KHR(
            commandBuffer,
            pPushDescriptorSetWithTemplateInfo
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSetWithTemplate2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            Ref<PushDescriptorSetWithTemplateInfo> pPushDescriptorSetWithTemplateInfo
    )
    {
        fixed (
            PushDescriptorSetWithTemplateInfo* __dsl_pPushDescriptorSetWithTemplateInfo =
                pPushDescriptorSetWithTemplateInfo
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPushDescriptorSetWithTemplate2KHR(
                __dsl_commandBuffer,
                __dsl_pPushDescriptorSetWithTemplateInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance6", "VK_KHR_push_descriptor"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplate2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplate2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPushDescriptorSetWithTemplateInfo *")]
            Ref<PushDescriptorSetWithTemplateInfo> pPushDescriptorSetWithTemplateInfo
    ) =>
        DllImport.CmdPushDescriptorSetWithTemplate2KHR(
            commandBuffer,
            pPushDescriptorSetWithTemplateInfo
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] void* pData
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                DescriptorUpdateTemplateHandle*,
                PipelineLayoutHandle*,
                uint,
                void*,
                void>)(
                _slots[160] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[160] = nativeContext.LoadFunction(
                        "vkCmdPushDescriptorSetWithTemplateKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, descriptorUpdateTemplate, layout, set, pData);

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_push_descriptor+VK_KHR_descriptor_update_template",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] void* pData
    ) =>
        DllImport.CmdPushDescriptorSetWithTemplateKHR(
            commandBuffer,
            descriptorUpdateTemplate,
            layout,
            set,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdPushDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (PipelineLayoutHandle* __dsl_layout = layout)
        fixed (
            DescriptorUpdateTemplateHandle* __dsl_descriptorUpdateTemplate =
                descriptorUpdateTemplate
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdPushDescriptorSetWithTemplateKHR(
                __dsl_commandBuffer,
                __dsl_descriptorUpdateTemplate,
                __dsl_layout,
                set,
                __dsl_pData
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_KHR_push_descriptor+VK_KHR_descriptor_update_template",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ],
        ImpliesSets = [
            "VK_KHR_push_descriptor+VK_KHR_get_physical_device_properties2",
            "VK_KHR_push_descriptor+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdPushDescriptorSetWithTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdPushDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint set,
        [NativeTypeName("const void *")] Ref pData
    ) =>
        DllImport.CmdPushDescriptorSetWithTemplateKHR(
            commandBuffer,
            descriptorUpdateTemplate,
            layout,
            set,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResetEvent(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle* @event,
        [NativeTypeName("VkPipelineStageFlags")] uint stageMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, EventHandle*, uint, void>)(
                _slots[161] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[161] = nativeContext.LoadFunction("vkCmdResetEvent", "vulkan")
            )
        )(commandBuffer, @event, stageMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResetEvent(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle* @event,
        [NativeTypeName("VkPipelineStageFlags")] uint stageMask
    ) => DllImport.CmdResetEvent(commandBuffer, @event, stageMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResetEvent(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
        [NativeTypeName("VkPipelineStageFlags")] uint stageMask
    )
    {
        fixed (EventHandle* __dsl_event = @event)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdResetEvent(__dsl_commandBuffer, __dsl_event, stageMask);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResetEvent(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
        [NativeTypeName("VkPipelineStageFlags")] uint stageMask
    ) => DllImport.CmdResetEvent(commandBuffer, @event, stageMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResetEvent2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle* @event,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stageMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, EventHandle*, ulong, void>)(
                _slots[162] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[162] = nativeContext.LoadFunction("vkCmdResetEvent2", "vulkan")
            )
        )(commandBuffer, @event, stageMask);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResetEvent2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle* @event,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stageMask
    ) => DllImport.CmdResetEvent2(commandBuffer, @event, stageMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResetEvent2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stageMask
    )
    {
        fixed (EventHandle* __dsl_event = @event)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdResetEvent2(__dsl_commandBuffer, __dsl_event, stageMask);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResetEvent2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stageMask
    ) => DllImport.CmdResetEvent2(commandBuffer, @event, stageMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResetEvent2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle* @event,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stageMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, EventHandle*, ulong, void>)(
                _slots[163] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[163] = nativeContext.LoadFunction("vkCmdResetEvent2KHR", "vulkan")
            )
        )(commandBuffer, @event, stageMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResetEvent2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle* @event,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stageMask
    ) => DllImport.CmdResetEvent2KHR(commandBuffer, @event, stageMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResetEvent2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stageMask
    )
    {
        fixed (EventHandle* __dsl_event = @event)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdResetEvent2KHR(__dsl_commandBuffer, __dsl_event, stageMask);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetEvent2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResetEvent2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stageMask
    ) => DllImport.CmdResetEvent2KHR(commandBuffer, @event, stageMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResetQueryPool(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, QueryPoolHandle*, uint, uint, void>)(
                _slots[164] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[164] = nativeContext.LoadFunction("vkCmdResetQueryPool", "vulkan")
            )
        )(commandBuffer, queryPool, firstQuery, queryCount);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResetQueryPool(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) => DllImport.CmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResetQueryPool(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdResetQueryPool(
                __dsl_commandBuffer,
                __dsl_queryPool,
                firstQuery,
                queryCount
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResetQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResetQueryPool(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) => DllImport.CmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResolveImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle* srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle* dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageResolve *")] ImageResolve* pRegions
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                ImageHandle*,
                ImageLayout,
                ImageHandle*,
                ImageLayout,
                uint,
                ImageResolve*,
                void>)(
                _slots[165] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[165] = nativeContext.LoadFunction("vkCmdResolveImage", "vulkan")
            )
        )(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResolveImage(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImage")] ImageHandle* srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] ImageHandle* dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageResolve *")] ImageResolve* pRegions
    ) =>
        DllImport.CmdResolveImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResolveImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageResolve *")] Ref<ImageResolve> pRegions
    )
    {
        fixed (ImageResolve* __dsl_pRegions = pRegions)
        fixed (ImageHandle* __dsl_dstImage = dstImage)
        fixed (ImageHandle* __dsl_srcImage = srcImage)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdResolveImage(
                __dsl_commandBuffer,
                __dsl_srcImage,
                srcImageLayout,
                __dsl_dstImage,
                dstImageLayout,
                regionCount,
                __dsl_pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResolveImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("uint32_t")] uint regionCount,
        [NativeTypeName("const VkImageResolve *")] Ref<ImageResolve> pRegions
    ) =>
        DllImport.CmdResolveImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            regionCount,
            pRegions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResolveImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageResolve *")] ImageResolve pRegions
    )
    {
        fixed (ImageHandle* __dsl_dstImage = dstImage)
        fixed (ImageHandle* __dsl_srcImage = srcImage)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdResolveImage(
                __dsl_commandBuffer,
                __dsl_srcImage,
                srcImageLayout,
                __dsl_dstImage,
                dstImageLayout,
                1,
                (ImageResolve*)&pRegions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResolveImage(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImage")] Ref<ImageHandle> srcImage,
        ImageLayout srcImageLayout,
        [NativeTypeName("VkImage")] Ref<ImageHandle> dstImage,
        ImageLayout dstImageLayout,
        [NativeTypeName("const VkImageResolve *")] ImageResolve pRegions
    ) =>
        DllImport.CmdResolveImage(
            commandBuffer,
            srcImage,
            srcImageLayout,
            dstImage,
            dstImageLayout,
            pRegions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResolveImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] ResolveImageInfo2* pResolveImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, ResolveImageInfo2*, void>)(
                _slots[166] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[166] = nativeContext.LoadFunction("vkCmdResolveImage2", "vulkan")
            )
        )(commandBuffer, pResolveImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResolveImage2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] ResolveImageInfo2* pResolveImageInfo
    ) => DllImport.CmdResolveImage2(commandBuffer, pResolveImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResolveImage2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] Ref<ResolveImageInfo2> pResolveImageInfo
    )
    {
        fixed (ResolveImageInfo2* __dsl_pResolveImageInfo = pResolveImageInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdResolveImage2(__dsl_commandBuffer, __dsl_pResolveImageInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResolveImage2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] Ref<ResolveImageInfo2> pResolveImageInfo
    ) => DllImport.CmdResolveImage2(commandBuffer, pResolveImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResolveImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] ResolveImageInfo2* pResolveImageInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, ResolveImageInfo2*, void>)(
                _slots[167] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[167] = nativeContext.LoadFunction("vkCmdResolveImage2KHR", "vulkan")
            )
        )(commandBuffer, pResolveImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResolveImage2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] ResolveImageInfo2* pResolveImageInfo
    ) => DllImport.CmdResolveImage2KHR(commandBuffer, pResolveImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdResolveImage2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] Ref<ResolveImageInfo2> pResolveImageInfo
    )
    {
        fixed (ResolveImageInfo2* __dsl_pResolveImageInfo = pResolveImageInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdResolveImage2KHR(__dsl_commandBuffer, __dsl_pResolveImageInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_copy_commands2"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdResolveImage2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdResolveImage2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkResolveImageInfo2 *")] Ref<ResolveImageInfo2> pResolveImageInfo
    ) => DllImport.CmdResolveImage2KHR(commandBuffer, pResolveImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetAlphaToCoverageEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint alphaToCoverageEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[168] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[168] = nativeContext.LoadFunction(
                        "vkCmdSetAlphaToCoverageEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, alphaToCoverageEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetAlphaToCoverageEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetAlphaToCoverageEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint alphaToCoverageEnable
    ) => DllImport.CmdSetAlphaToCoverageEnableEXT(commandBuffer, alphaToCoverageEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetAlphaToCoverageEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint alphaToCoverageEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetAlphaToCoverageEnableEXT(
                __dsl_commandBuffer,
                alphaToCoverageEnable
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetAlphaToCoverageEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetAlphaToCoverageEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint alphaToCoverageEnable
    ) => DllImport.CmdSetAlphaToCoverageEnableEXT(commandBuffer, alphaToCoverageEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetAlphaToOneEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint alphaToOneEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[169] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[169] = nativeContext.LoadFunction(
                        "vkCmdSetAlphaToOneEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, alphaToOneEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetAlphaToOneEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetAlphaToOneEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint alphaToOneEnable
    ) => DllImport.CmdSetAlphaToOneEnableEXT(commandBuffer, alphaToOneEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetAlphaToOneEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint alphaToOneEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetAlphaToOneEnableEXT(__dsl_commandBuffer, alphaToOneEnable);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetAlphaToOneEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetAlphaToOneEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint alphaToOneEnable
    ) => DllImport.CmdSetAlphaToOneEnableEXT(commandBuffer, alphaToOneEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetAttachmentFeedbackLoopEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImageAspectFlags")] uint aspectMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[170] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[170] = nativeContext.LoadFunction(
                        "vkCmdSetAttachmentFeedbackLoopEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, aspectMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_attachment_feedback_loop_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetAttachmentFeedbackLoopEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetAttachmentFeedbackLoopEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkImageAspectFlags")] uint aspectMask
    ) => DllImport.CmdSetAttachmentFeedbackLoopEnableEXT(commandBuffer, aspectMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetAttachmentFeedbackLoopEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImageAspectFlags")] uint aspectMask
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetAttachmentFeedbackLoopEnableEXT(__dsl_commandBuffer, aspectMask);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_attachment_feedback_loop_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_attachment_feedback_loop_layout+VK_KHR_get_physical_device_properties2",
            "VK_EXT_attachment_feedback_loop_layout+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetAttachmentFeedbackLoopEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetAttachmentFeedbackLoopEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkImageAspectFlags")] uint aspectMask
    ) => DllImport.CmdSetAttachmentFeedbackLoopEnableEXT(commandBuffer, aspectMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetBlendConstants(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const float[4]")] float* blendConstants
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, float*, void>)(
                _slots[171] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[171] = nativeContext.LoadFunction("vkCmdSetBlendConstants", "vulkan")
            )
        )(commandBuffer, blendConstants);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetBlendConstants")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetBlendConstants(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const float[4]")] float* blendConstants
    ) => DllImport.CmdSetBlendConstants(commandBuffer, blendConstants);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetBlendConstants(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const float[4]")] Ref<float> blendConstants
    )
    {
        fixed (float* __dsl_blendConstants = blendConstants)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetBlendConstants(__dsl_commandBuffer, __dsl_blendConstants);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetBlendConstants")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetBlendConstants(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const float[4]")] Ref<float> blendConstants
    ) => DllImport.CmdSetBlendConstants(commandBuffer, blendConstants);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCheckpointNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const void *")] void* pCheckpointMarker
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, void*, void>)(
                _slots[172] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[172] = nativeContext.LoadFunction("vkCmdSetCheckpointNV", "vulkan")
            )
        )(commandBuffer, pCheckpointMarker);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCheckpointNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCheckpointNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const void *")] void* pCheckpointMarker
    ) => DllImport.CmdSetCheckpointNV(commandBuffer, pCheckpointMarker);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCheckpointNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const void *")] Ref pCheckpointMarker
    )
    {
        fixed (void* __dsl_pCheckpointMarker = pCheckpointMarker)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetCheckpointNV(__dsl_commandBuffer, __dsl_pCheckpointMarker);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCheckpointNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCheckpointNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const void *")] Ref pCheckpointMarker
    ) => DllImport.CmdSetCheckpointNV(commandBuffer, pCheckpointMarker);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoarseSampleOrderNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        CoarseSampleOrderTypeNV sampleOrderType,
        [NativeTypeName("uint32_t")] uint customSampleOrderCount,
        [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
            CoarseSampleOrderCustomNV* pCustomSampleOrders
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                CoarseSampleOrderTypeNV,
                uint,
                CoarseSampleOrderCustomNV*,
                void>)(
                _slots[173] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[173] = nativeContext.LoadFunction(
                        "vkCmdSetCoarseSampleOrderNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoarseSampleOrderNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        CoarseSampleOrderTypeNV sampleOrderType,
        [NativeTypeName("uint32_t")] uint customSampleOrderCount,
        [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
            CoarseSampleOrderCustomNV* pCustomSampleOrders
    ) =>
        DllImport.CmdSetCoarseSampleOrderNV(
            commandBuffer,
            sampleOrderType,
            customSampleOrderCount,
            pCustomSampleOrders
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoarseSampleOrderNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        CoarseSampleOrderTypeNV sampleOrderType,
        [NativeTypeName("uint32_t")] uint customSampleOrderCount,
        [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
            Ref<CoarseSampleOrderCustomNV> pCustomSampleOrders
    )
    {
        fixed (CoarseSampleOrderCustomNV* __dsl_pCustomSampleOrders = pCustomSampleOrders)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetCoarseSampleOrderNV(
                __dsl_commandBuffer,
                sampleOrderType,
                customSampleOrderCount,
                __dsl_pCustomSampleOrders
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoarseSampleOrderNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        CoarseSampleOrderTypeNV sampleOrderType,
        [NativeTypeName("uint32_t")] uint customSampleOrderCount,
        [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
            Ref<CoarseSampleOrderCustomNV> pCustomSampleOrders
    ) =>
        DllImport.CmdSetCoarseSampleOrderNV(
            commandBuffer,
            sampleOrderType,
            customSampleOrderCount,
            pCustomSampleOrders
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoarseSampleOrderNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        CoarseSampleOrderTypeNV sampleOrderType,
        [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
            CoarseSampleOrderCustomNV pCustomSampleOrders
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetCoarseSampleOrderNV(
                __dsl_commandBuffer,
                sampleOrderType,
                1,
                (CoarseSampleOrderCustomNV*)&pCustomSampleOrders
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoarseSampleOrderNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        CoarseSampleOrderTypeNV sampleOrderType,
        [NativeTypeName("const VkCoarseSampleOrderCustomNV *")]
            CoarseSampleOrderCustomNV pCustomSampleOrders
    ) => DllImport.CmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, pCustomSampleOrders);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorBlendAdvancedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendAdvancedEXT *")]
            ColorBlendAdvancedEXT* pColorBlendAdvanced
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, ColorBlendAdvancedEXT*, void>)(
                _slots[174] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[174] = nativeContext.LoadFunction(
                        "vkCmdSetColorBlendAdvancedEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendAdvancedEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendAdvancedEXT *")]
            ColorBlendAdvancedEXT* pColorBlendAdvanced
    ) =>
        DllImport.CmdSetColorBlendAdvancedEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorBlendAdvanced
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorBlendAdvancedEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendAdvancedEXT *")]
            Ref<ColorBlendAdvancedEXT> pColorBlendAdvanced
    )
    {
        fixed (ColorBlendAdvancedEXT* __dsl_pColorBlendAdvanced = pColorBlendAdvanced)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetColorBlendAdvancedEXT(
                __dsl_commandBuffer,
                firstAttachment,
                attachmentCount,
                __dsl_pColorBlendAdvanced
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendAdvancedEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendAdvancedEXT *")]
            Ref<ColorBlendAdvancedEXT> pColorBlendAdvanced
    ) =>
        DllImport.CmdSetColorBlendAdvancedEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorBlendAdvanced
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorBlendAdvancedEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkColorBlendAdvancedEXT *")]
            ColorBlendAdvancedEXT pColorBlendAdvanced
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetColorBlendAdvancedEXT(
                __dsl_commandBuffer,
                firstAttachment,
                1,
                (ColorBlendAdvancedEXT*)&pColorBlendAdvanced
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_blend_operation_advanced", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendAdvancedEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkColorBlendAdvancedEXT *")]
            ColorBlendAdvancedEXT pColorBlendAdvanced
    ) => DllImport.CmdSetColorBlendAdvancedEXT(commandBuffer, firstAttachment, pColorBlendAdvanced);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorBlendEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] uint* pColorBlendEnables
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, uint*, void>)(
                _slots[175] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[175] = nativeContext.LoadFunction(
                        "vkCmdSetColorBlendEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] uint* pColorBlendEnables
    ) =>
        DllImport.CmdSetColorBlendEnableEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorBlendEnables
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorBlendEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] Ref<uint> pColorBlendEnables
    )
    {
        fixed (uint* __dsl_pColorBlendEnables = pColorBlendEnables)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetColorBlendEnableEXT(
                __dsl_commandBuffer,
                firstAttachment,
                attachmentCount,
                __dsl_pColorBlendEnables
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] Ref<uint> pColorBlendEnables
    ) =>
        DllImport.CmdSetColorBlendEnableEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorBlendEnables
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorBlendEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkBool32 *")] uint pColorBlendEnables
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetColorBlendEnableEXT(
                __dsl_commandBuffer,
                firstAttachment,
                1,
                (uint*)&pColorBlendEnables
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkBool32 *")] uint pColorBlendEnables
    ) => DllImport.CmdSetColorBlendEnableEXT(commandBuffer, firstAttachment, pColorBlendEnables);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorBlendEquationEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendEquationEXT *")]
            ColorBlendEquationEXT* pColorBlendEquations
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, ColorBlendEquationEXT*, void>)(
                _slots[176] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[176] = nativeContext.LoadFunction(
                        "vkCmdSetColorBlendEquationEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEquationEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendEquationEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendEquationEXT *")]
            ColorBlendEquationEXT* pColorBlendEquations
    ) =>
        DllImport.CmdSetColorBlendEquationEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorBlendEquations
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorBlendEquationEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendEquationEXT *")]
            Ref<ColorBlendEquationEXT> pColorBlendEquations
    )
    {
        fixed (ColorBlendEquationEXT* __dsl_pColorBlendEquations = pColorBlendEquations)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetColorBlendEquationEXT(
                __dsl_commandBuffer,
                firstAttachment,
                attachmentCount,
                __dsl_pColorBlendEquations
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEquationEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendEquationEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorBlendEquationEXT *")]
            Ref<ColorBlendEquationEXT> pColorBlendEquations
    ) =>
        DllImport.CmdSetColorBlendEquationEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorBlendEquations
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorBlendEquationEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkColorBlendEquationEXT *")]
            ColorBlendEquationEXT pColorBlendEquations
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetColorBlendEquationEXT(
                __dsl_commandBuffer,
                firstAttachment,
                1,
                (ColorBlendEquationEXT*)&pColorBlendEquations
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorBlendEquationEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorBlendEquationEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkColorBlendEquationEXT *")]
            ColorBlendEquationEXT pColorBlendEquations
    ) =>
        DllImport.CmdSetColorBlendEquationEXT(commandBuffer, firstAttachment, pColorBlendEquations);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] uint* pColorWriteEnables
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint*, void>)(
                _slots[177] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[177] = nativeContext.LoadFunction(
                        "vkCmdSetColorWriteEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, attachmentCount, pColorWriteEnables);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_color_write_enable"],
        ImpliesSets = [
            "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_color_write_enable+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] uint* pColorWriteEnables
    ) => DllImport.CmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] Ref<uint> pColorWriteEnables
    )
    {
        fixed (uint* __dsl_pColorWriteEnables = pColorWriteEnables)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetColorWriteEnableEXT(
                __dsl_commandBuffer,
                attachmentCount,
                __dsl_pColorWriteEnables
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_color_write_enable"],
        ImpliesSets = [
            "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_color_write_enable+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkBool32 *")] Ref<uint> pColorWriteEnables
    ) => DllImport.CmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkBool32 *")] uint pColorWriteEnables
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetColorWriteEnableEXT(
                __dsl_commandBuffer,
                1,
                (uint*)&pColorWriteEnables
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_color_write_enable"],
        ImpliesSets = [
            "VK_EXT_color_write_enable+VK_KHR_get_physical_device_properties2",
            "VK_EXT_color_write_enable+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkBool32 *")] uint pColorWriteEnables
    ) => DllImport.CmdSetColorWriteEnableEXT(commandBuffer, pColorWriteEnables);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorWriteMaskEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorComponentFlags *")] uint* pColorWriteMasks
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, uint*, void>)(
                _slots[178] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[178] = nativeContext.LoadFunction(
                        "vkCmdSetColorWriteMaskEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorWriteMaskEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorComponentFlags *")] uint* pColorWriteMasks
    ) =>
        DllImport.CmdSetColorWriteMaskEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorWriteMasks
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorWriteMaskEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorComponentFlags *")] Ref<uint> pColorWriteMasks
    )
    {
        fixed (uint* __dsl_pColorWriteMasks = pColorWriteMasks)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetColorWriteMaskEXT(
                __dsl_commandBuffer,
                firstAttachment,
                attachmentCount,
                __dsl_pColorWriteMasks
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorWriteMaskEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("uint32_t")] uint attachmentCount,
        [NativeTypeName("const VkColorComponentFlags *")] Ref<uint> pColorWriteMasks
    ) =>
        DllImport.CmdSetColorWriteMaskEXT(
            commandBuffer,
            firstAttachment,
            attachmentCount,
            pColorWriteMasks
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetColorWriteMaskEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkColorComponentFlags *")] uint pColorWriteMasks
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetColorWriteMaskEXT(
                __dsl_commandBuffer,
                firstAttachment,
                1,
                (uint*)&pColorWriteMasks
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetColorWriteMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetColorWriteMaskEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstAttachment,
        [NativeTypeName("const VkColorComponentFlags *")] uint pColorWriteMasks
    ) => DllImport.CmdSetColorWriteMaskEXT(commandBuffer, firstAttachment, pColorWriteMasks);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetConservativeRasterizationModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        ConservativeRasterizationModeEXT conservativeRasterizationMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, ConservativeRasterizationModeEXT, void>)(
                _slots[179] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[179] = nativeContext.LoadFunction(
                        "vkCmdSetConservativeRasterizationModeEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, conservativeRasterizationMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conservative_rasterization", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetConservativeRasterizationModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetConservativeRasterizationModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        ConservativeRasterizationModeEXT conservativeRasterizationMode
    ) =>
        DllImport.CmdSetConservativeRasterizationModeEXT(
            commandBuffer,
            conservativeRasterizationMode
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetConservativeRasterizationModeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        ConservativeRasterizationModeEXT conservativeRasterizationMode
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetConservativeRasterizationModeEXT(
                __dsl_commandBuffer,
                conservativeRasterizationMode
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conservative_rasterization", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetConservativeRasterizationModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetConservativeRasterizationModeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        ConservativeRasterizationModeEXT conservativeRasterizationMode
    ) =>
        DllImport.CmdSetConservativeRasterizationModeEXT(
            commandBuffer,
            conservativeRasterizationMode
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoverageModulationModeNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        CoverageModulationModeNV coverageModulationMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CoverageModulationModeNV, void>)(
                _slots[180] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[180] = nativeContext.LoadFunction(
                        "vkCmdSetCoverageModulationModeNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, coverageModulationMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationModeNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageModulationModeNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        CoverageModulationModeNV coverageModulationMode
    ) => DllImport.CmdSetCoverageModulationModeNV(commandBuffer, coverageModulationMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoverageModulationModeNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        CoverageModulationModeNV coverageModulationMode
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetCoverageModulationModeNV(
                __dsl_commandBuffer,
                coverageModulationMode
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationModeNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageModulationModeNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        CoverageModulationModeNV coverageModulationMode
    ) => DllImport.CmdSetCoverageModulationModeNV(commandBuffer, coverageModulationMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoverageModulationTableEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint coverageModulationTableEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[181] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[181] = nativeContext.LoadFunction(
                        "vkCmdSetCoverageModulationTableEnableNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, coverageModulationTableEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageModulationTableEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint coverageModulationTableEnable
    ) =>
        DllImport.CmdSetCoverageModulationTableEnableNV(
            commandBuffer,
            coverageModulationTableEnable
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoverageModulationTableEnableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint coverageModulationTableEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetCoverageModulationTableEnableNV(
                __dsl_commandBuffer,
                coverageModulationTableEnable
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageModulationTableEnableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint coverageModulationTableEnable
    ) =>
        DllImport.CmdSetCoverageModulationTableEnableNV(
            commandBuffer,
            coverageModulationTableEnable
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoverageModulationTableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint coverageModulationTableCount,
        [NativeTypeName("const float *")] float* pCoverageModulationTable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, float*, void>)(
                _slots[182] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[182] = nativeContext.LoadFunction(
                        "vkCmdSetCoverageModulationTableNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, coverageModulationTableCount, pCoverageModulationTable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageModulationTableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint coverageModulationTableCount,
        [NativeTypeName("const float *")] float* pCoverageModulationTable
    ) =>
        DllImport.CmdSetCoverageModulationTableNV(
            commandBuffer,
            coverageModulationTableCount,
            pCoverageModulationTable
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoverageModulationTableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint coverageModulationTableCount,
        [NativeTypeName("const float *")] Ref<float> pCoverageModulationTable
    )
    {
        fixed (float* __dsl_pCoverageModulationTable = pCoverageModulationTable)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetCoverageModulationTableNV(
                __dsl_commandBuffer,
                coverageModulationTableCount,
                __dsl_pCoverageModulationTable
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageModulationTableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint coverageModulationTableCount,
        [NativeTypeName("const float *")] Ref<float> pCoverageModulationTable
    ) =>
        DllImport.CmdSetCoverageModulationTableNV(
            commandBuffer,
            coverageModulationTableCount,
            pCoverageModulationTable
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoverageModulationTableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const float *")] float pCoverageModulationTable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetCoverageModulationTableNV(
                __dsl_commandBuffer,
                1,
                (float*)&pCoverageModulationTable
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_framebuffer_mixed_samples"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageModulationTableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageModulationTableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const float *")] float pCoverageModulationTable
    ) => DllImport.CmdSetCoverageModulationTableNV(commandBuffer, pCoverageModulationTable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoverageReductionModeNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        CoverageReductionModeNV coverageReductionMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CoverageReductionModeNV, void>)(
                _slots[183] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[183] = nativeContext.LoadFunction(
                        "vkCmdSetCoverageReductionModeNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, coverageReductionMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_coverage_reduction_mode"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageReductionModeNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageReductionModeNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        CoverageReductionModeNV coverageReductionMode
    ) => DllImport.CmdSetCoverageReductionModeNV(commandBuffer, coverageReductionMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoverageReductionModeNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        CoverageReductionModeNV coverageReductionMode
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetCoverageReductionModeNV(
                __dsl_commandBuffer,
                coverageReductionMode
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_coverage_reduction_mode"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageReductionModeNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageReductionModeNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        CoverageReductionModeNV coverageReductionMode
    ) => DllImport.CmdSetCoverageReductionModeNV(commandBuffer, coverageReductionMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoverageToColorEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint coverageToColorEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[184] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[184] = nativeContext.LoadFunction(
                        "vkCmdSetCoverageToColorEnableNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, coverageToColorEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_fragment_coverage_to_color"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageToColorEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageToColorEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint coverageToColorEnable
    ) => DllImport.CmdSetCoverageToColorEnableNV(commandBuffer, coverageToColorEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoverageToColorEnableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint coverageToColorEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetCoverageToColorEnableNV(
                __dsl_commandBuffer,
                coverageToColorEnable
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_fragment_coverage_to_color"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageToColorEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageToColorEnableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint coverageToColorEnable
    ) => DllImport.CmdSetCoverageToColorEnableNV(commandBuffer, coverageToColorEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoverageToColorLocationNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint coverageToColorLocation
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[185] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[185] = nativeContext.LoadFunction(
                        "vkCmdSetCoverageToColorLocationNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, coverageToColorLocation);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_fragment_coverage_to_color"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageToColorLocationNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageToColorLocationNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint coverageToColorLocation
    ) => DllImport.CmdSetCoverageToColorLocationNV(commandBuffer, coverageToColorLocation);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCoverageToColorLocationNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint coverageToColorLocation
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetCoverageToColorLocationNV(
                __dsl_commandBuffer,
                coverageToColorLocation
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_fragment_coverage_to_color"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCoverageToColorLocationNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCoverageToColorLocationNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint coverageToColorLocation
    ) => DllImport.CmdSetCoverageToColorLocationNV(commandBuffer, coverageToColorLocation);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCullMode(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkCullModeFlags")] uint cullMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[186] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[186] = nativeContext.LoadFunction("vkCmdSetCullMode", "vulkan")
            )
        )(commandBuffer, cullMode);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCullMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCullMode(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkCullModeFlags")] uint cullMode
    ) => DllImport.CmdSetCullMode(commandBuffer, cullMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCullMode(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkCullModeFlags")] uint cullMode
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetCullMode(__dsl_commandBuffer, cullMode);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCullMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCullMode(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkCullModeFlags")] uint cullMode
    ) => DllImport.CmdSetCullMode(commandBuffer, cullMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCullModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkCullModeFlags")] uint cullMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[187] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[187] = nativeContext.LoadFunction("vkCmdSetCullModeEXT", "vulkan")
            )
        )(commandBuffer, cullMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCullModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCullModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkCullModeFlags")] uint cullMode
    ) => DllImport.CmdSetCullModeEXT(commandBuffer, cullMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetCullModeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkCullModeFlags")] uint cullMode
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetCullModeEXT(__dsl_commandBuffer, cullMode);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetCullModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetCullModeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkCullModeFlags")] uint cullMode
    ) => DllImport.CmdSetCullModeEXT(commandBuffer, cullMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthBias(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        float depthBiasConstantFactor,
        float depthBiasClamp,
        float depthBiasSlopeFactor
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, float, float, float, void>)(
                _slots[188] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[188] = nativeContext.LoadFunction("vkCmdSetDepthBias", "vulkan")
            )
        )(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBias(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        float depthBiasConstantFactor,
        float depthBiasClamp,
        float depthBiasSlopeFactor
    ) =>
        DllImport.CmdSetDepthBias(
            commandBuffer,
            depthBiasConstantFactor,
            depthBiasClamp,
            depthBiasSlopeFactor
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthBias(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        float depthBiasConstantFactor,
        float depthBiasClamp,
        float depthBiasSlopeFactor
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthBias(
                __dsl_commandBuffer,
                depthBiasConstantFactor,
                depthBiasClamp,
                depthBiasSlopeFactor
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBias(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        float depthBiasConstantFactor,
        float depthBiasClamp,
        float depthBiasSlopeFactor
    ) =>
        DllImport.CmdSetDepthBias(
            commandBuffer,
            depthBiasConstantFactor,
            depthBiasClamp,
            depthBiasSlopeFactor
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthBias2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkDepthBiasInfoEXT *")] DepthBiasInfoEXT* pDepthBiasInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, DepthBiasInfoEXT*, void>)(
                _slots[189] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[189] = nativeContext.LoadFunction("vkCmdSetDepthBias2EXT", "vulkan")
            )
        )(commandBuffer, pDepthBiasInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_bias_control"],
        ImpliesSets = [
            "VK_EXT_depth_bias_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_bias_control+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBias2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkDepthBiasInfoEXT *")] DepthBiasInfoEXT* pDepthBiasInfo
    ) => DllImport.CmdSetDepthBias2EXT(commandBuffer, pDepthBiasInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthBias2EXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDepthBiasInfoEXT *")] Ref<DepthBiasInfoEXT> pDepthBiasInfo
    )
    {
        fixed (DepthBiasInfoEXT* __dsl_pDepthBiasInfo = pDepthBiasInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthBias2EXT(__dsl_commandBuffer, __dsl_pDepthBiasInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_bias_control"],
        ImpliesSets = [
            "VK_EXT_depth_bias_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_depth_bias_control+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBias2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBias2EXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkDepthBiasInfoEXT *")] Ref<DepthBiasInfoEXT> pDepthBiasInfo
    ) => DllImport.CmdSetDepthBias2EXT(commandBuffer, pDepthBiasInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthBiasEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBiasEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[190] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[190] = nativeContext.LoadFunction("vkCmdSetDepthBiasEnable", "vulkan")
            )
        )(commandBuffer, depthBiasEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBiasEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBiasEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBiasEnable
    ) => DllImport.CmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthBiasEnable(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBiasEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthBiasEnable(__dsl_commandBuffer, depthBiasEnable);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBiasEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBiasEnable(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBiasEnable
    ) => DllImport.CmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthBiasEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBiasEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[191] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[191] = nativeContext.LoadFunction(
                        "vkCmdSetDepthBiasEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthBiasEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBiasEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBiasEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBiasEnable
    ) => DllImport.CmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthBiasEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBiasEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthBiasEnableEXT(__dsl_commandBuffer, depthBiasEnable);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBiasEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBiasEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBiasEnable
    ) => DllImport.CmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthBounds(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        float minDepthBounds,
        float maxDepthBounds
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, float, float, void>)(
                _slots[192] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[192] = nativeContext.LoadFunction("vkCmdSetDepthBounds", "vulkan")
            )
        )(commandBuffer, minDepthBounds, maxDepthBounds);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBounds")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBounds(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        float minDepthBounds,
        float maxDepthBounds
    ) => DllImport.CmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthBounds(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        float minDepthBounds,
        float maxDepthBounds
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthBounds(__dsl_commandBuffer, minDepthBounds, maxDepthBounds);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBounds")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBounds(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        float minDepthBounds,
        float maxDepthBounds
    ) => DllImport.CmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthBoundsTestEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBoundsTestEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[193] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[193] = nativeContext.LoadFunction(
                        "vkCmdSetDepthBoundsTestEnable",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthBoundsTestEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBoundsTestEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBoundsTestEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBoundsTestEnable
    ) => DllImport.CmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthBoundsTestEnable(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBoundsTestEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthBoundsTestEnable(__dsl_commandBuffer, depthBoundsTestEnable);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBoundsTestEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBoundsTestEnable(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBoundsTestEnable
    ) => DllImport.CmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthBoundsTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBoundsTestEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[194] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[194] = nativeContext.LoadFunction(
                        "vkCmdSetDepthBoundsTestEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthBoundsTestEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBoundsTestEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBoundsTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBoundsTestEnable
    ) => DllImport.CmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthBoundsTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBoundsTestEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthBoundsTestEnableEXT(
                __dsl_commandBuffer,
                depthBoundsTestEnable
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthBoundsTestEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthBoundsTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthBoundsTestEnable
    ) => DllImport.CmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthClampEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthClampEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[195] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[195] = nativeContext.LoadFunction(
                        "vkCmdSetDepthClampEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthClampEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthClampEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthClampEnable
    ) => DllImport.CmdSetDepthClampEnableEXT(commandBuffer, depthClampEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthClampEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthClampEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthClampEnableEXT(__dsl_commandBuffer, depthClampEnable);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthClampEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthClampEnable
    ) => DllImport.CmdSetDepthClampEnableEXT(commandBuffer, depthClampEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthClampRangeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        DepthClampModeEXT depthClampMode,
        [NativeTypeName("const VkDepthClampRangeEXT *")] DepthClampRangeEXT* pDepthClampRange
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                DepthClampModeEXT,
                DepthClampRangeEXT*,
                void>)(
                _slots[196] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[196] = nativeContext.LoadFunction(
                        "vkCmdSetDepthClampRangeEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthClampMode, pDepthClampRange);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clamp_control", "VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampRangeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthClampRangeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        DepthClampModeEXT depthClampMode,
        [NativeTypeName("const VkDepthClampRangeEXT *")] DepthClampRangeEXT* pDepthClampRange
    ) => DllImport.CmdSetDepthClampRangeEXT(commandBuffer, depthClampMode, pDepthClampRange);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthClampRangeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        DepthClampModeEXT depthClampMode,
        [NativeTypeName("const VkDepthClampRangeEXT *")] Ref<DepthClampRangeEXT> pDepthClampRange
    )
    {
        fixed (DepthClampRangeEXT* __dsl_pDepthClampRange = pDepthClampRange)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthClampRangeEXT(
                __dsl_commandBuffer,
                depthClampMode,
                __dsl_pDepthClampRange
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clamp_control", "VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClampRangeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthClampRangeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        DepthClampModeEXT depthClampMode,
        [NativeTypeName("const VkDepthClampRangeEXT *")] Ref<DepthClampRangeEXT> pDepthClampRange
    ) => DllImport.CmdSetDepthClampRangeEXT(commandBuffer, depthClampMode, pDepthClampRange);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthClipEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthClipEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[197] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[197] = nativeContext.LoadFunction(
                        "vkCmdSetDepthClipEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthClipEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_enable", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClipEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthClipEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthClipEnable
    ) => DllImport.CmdSetDepthClipEnableEXT(commandBuffer, depthClipEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthClipEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthClipEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthClipEnableEXT(__dsl_commandBuffer, depthClipEnable);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_enable", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClipEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthClipEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthClipEnable
    ) => DllImport.CmdSetDepthClipEnableEXT(commandBuffer, depthClipEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthClipNegativeOneToOneEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint negativeOneToOne
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[198] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[198] = nativeContext.LoadFunction(
                        "vkCmdSetDepthClipNegativeOneToOneEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, negativeOneToOne);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_control", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClipNegativeOneToOneEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthClipNegativeOneToOneEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint negativeOneToOne
    ) => DllImport.CmdSetDepthClipNegativeOneToOneEXT(commandBuffer, negativeOneToOne);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthClipNegativeOneToOneEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint negativeOneToOne
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthClipNegativeOneToOneEXT(
                __dsl_commandBuffer,
                negativeOneToOne
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_depth_clip_control", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthClipNegativeOneToOneEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthClipNegativeOneToOneEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint negativeOneToOne
    ) => DllImport.CmdSetDepthClipNegativeOneToOneEXT(commandBuffer, negativeOneToOne);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthCompareOp(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        CompareOp depthCompareOp
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CompareOp, void>)(
                _slots[199] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[199] = nativeContext.LoadFunction("vkCmdSetDepthCompareOp", "vulkan")
            )
        )(commandBuffer, depthCompareOp);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthCompareOp")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthCompareOp(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        CompareOp depthCompareOp
    ) => DllImport.CmdSetDepthCompareOp(commandBuffer, depthCompareOp);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthCompareOp(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        CompareOp depthCompareOp
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthCompareOp(__dsl_commandBuffer, depthCompareOp);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthCompareOp")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthCompareOp(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        CompareOp depthCompareOp
    ) => DllImport.CmdSetDepthCompareOp(commandBuffer, depthCompareOp);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthCompareOpEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        CompareOp depthCompareOp
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, CompareOp, void>)(
                _slots[200] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[200] = nativeContext.LoadFunction(
                        "vkCmdSetDepthCompareOpEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthCompareOp);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthCompareOpEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthCompareOpEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        CompareOp depthCompareOp
    ) => DllImport.CmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthCompareOpEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        CompareOp depthCompareOp
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthCompareOpEXT(__dsl_commandBuffer, depthCompareOp);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthCompareOpEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthCompareOpEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        CompareOp depthCompareOp
    ) => DllImport.CmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthTestEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthTestEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[201] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[201] = nativeContext.LoadFunction("vkCmdSetDepthTestEnable", "vulkan")
            )
        )(commandBuffer, depthTestEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthTestEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthTestEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthTestEnable
    ) => DllImport.CmdSetDepthTestEnable(commandBuffer, depthTestEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthTestEnable(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthTestEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthTestEnable(__dsl_commandBuffer, depthTestEnable);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthTestEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthTestEnable(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthTestEnable
    ) => DllImport.CmdSetDepthTestEnable(commandBuffer, depthTestEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthTestEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[202] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[202] = nativeContext.LoadFunction(
                        "vkCmdSetDepthTestEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthTestEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthTestEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthTestEnable
    ) => DllImport.CmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthTestEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthTestEnableEXT(__dsl_commandBuffer, depthTestEnable);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthTestEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthTestEnable
    ) => DllImport.CmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthWriteEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthWriteEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[203] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[203] = nativeContext.LoadFunction("vkCmdSetDepthWriteEnable", "vulkan")
            )
        )(commandBuffer, depthWriteEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthWriteEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthWriteEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthWriteEnable
    ) => DllImport.CmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthWriteEnable(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthWriteEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthWriteEnable(__dsl_commandBuffer, depthWriteEnable);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthWriteEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthWriteEnable(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthWriteEnable
    ) => DllImport.CmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthWriteEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[204] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[204] = nativeContext.LoadFunction(
                        "vkCmdSetDepthWriteEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, depthWriteEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthWriteEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint depthWriteEnable
    ) => DllImport.CmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDepthWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthWriteEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDepthWriteEnableEXT(__dsl_commandBuffer, depthWriteEnable);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDepthWriteEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDepthWriteEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint depthWriteEnable
    ) => DllImport.CmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDescriptorBufferOffsets2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkSetDescriptorBufferOffsetsInfoEXT *")]
            SetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, SetDescriptorBufferOffsetsInfoEXT*, void>)(
                _slots[205] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[205] = nativeContext.LoadFunction(
                        "vkCmdSetDescriptorBufferOffsets2EXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pSetDescriptorBufferOffsetsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsets2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDescriptorBufferOffsets2EXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkSetDescriptorBufferOffsetsInfoEXT *")]
            SetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo
    ) =>
        DllImport.CmdSetDescriptorBufferOffsets2EXT(commandBuffer, pSetDescriptorBufferOffsetsInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDescriptorBufferOffsets2EXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkSetDescriptorBufferOffsetsInfoEXT *")]
            Ref<SetDescriptorBufferOffsetsInfoEXT> pSetDescriptorBufferOffsetsInfo
    )
    {
        fixed (
            SetDescriptorBufferOffsetsInfoEXT* __dsl_pSetDescriptorBufferOffsetsInfo =
                pSetDescriptorBufferOffsetsInfo
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDescriptorBufferOffsets2EXT(
                __dsl_commandBuffer,
                __dsl_pSetDescriptorBufferOffsetsInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer", "VK_KHR_maintenance6"],
        ImpliesSets = ["VK_VERSION_1_1"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsets2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDescriptorBufferOffsets2EXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkSetDescriptorBufferOffsetsInfoEXT *")]
            Ref<SetDescriptorBufferOffsetsInfoEXT> pSetDescriptorBufferOffsetsInfo
    ) =>
        DllImport.CmdSetDescriptorBufferOffsets2EXT(commandBuffer, pSetDescriptorBufferOffsetsInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDescriptorBufferOffsetsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint setCount,
        [NativeTypeName("const uint32_t *")] uint* pBufferIndices,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                PipelineBindPoint,
                PipelineLayoutHandle*,
                uint,
                uint,
                uint*,
                ulong*,
                void>)(
                _slots[206] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[206] = nativeContext.LoadFunction(
                        "vkCmdSetDescriptorBufferOffsetsEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsetsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDescriptorBufferOffsetsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint setCount,
        [NativeTypeName("const uint32_t *")] uint* pBufferIndices,
        [NativeTypeName("const VkDeviceSize *")] ulong* pOffsets
    ) =>
        DllImport.CmdSetDescriptorBufferOffsetsEXT(
            commandBuffer,
            pipelineBindPoint,
            layout,
            firstSet,
            setCount,
            pBufferIndices,
            pOffsets
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDescriptorBufferOffsetsEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint setCount,
        [NativeTypeName("const uint32_t *")] Ref<uint> pBufferIndices,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets
    )
    {
        fixed (ulong* __dsl_pOffsets = pOffsets)
        fixed (uint* __dsl_pBufferIndices = pBufferIndices)
        fixed (PipelineLayoutHandle* __dsl_layout = layout)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDescriptorBufferOffsetsEXT(
                __dsl_commandBuffer,
                pipelineBindPoint,
                __dsl_layout,
                firstSet,
                setCount,
                __dsl_pBufferIndices,
                __dsl_pOffsets
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDescriptorBufferOffsetsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDescriptorBufferOffsetsEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint firstSet,
        [NativeTypeName("uint32_t")] uint setCount,
        [NativeTypeName("const uint32_t *")] Ref<uint> pBufferIndices,
        [NativeTypeName("const VkDeviceSize *")] Ref<ulong> pOffsets
    ) =>
        DllImport.CmdSetDescriptorBufferOffsetsEXT(
            commandBuffer,
            pipelineBindPoint,
            layout,
            firstSet,
            setCount,
            pBufferIndices,
            pOffsets
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDeviceMask(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint deviceMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[207] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[207] = nativeContext.LoadFunction("vkCmdSetDeviceMask", "vulkan")
            )
        )(commandBuffer, deviceMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDeviceMask")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDeviceMask(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint deviceMask
    ) => DllImport.CmdSetDeviceMask(commandBuffer, deviceMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDeviceMask(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint deviceMask
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDeviceMask(__dsl_commandBuffer, deviceMask);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDeviceMask")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDeviceMask(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint deviceMask
    ) => DllImport.CmdSetDeviceMask(commandBuffer, deviceMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDeviceMaskKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint deviceMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[208] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[208] = nativeContext.LoadFunction("vkCmdSetDeviceMaskKHR", "vulkan")
            )
        )(commandBuffer, deviceMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDeviceMaskKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDeviceMaskKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint deviceMask
    ) => DllImport.CmdSetDeviceMaskKHR(commandBuffer, deviceMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDeviceMaskKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint deviceMask
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDeviceMaskKHR(__dsl_commandBuffer, deviceMask);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDeviceMaskKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDeviceMaskKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint deviceMask
    ) => DllImport.CmdSetDeviceMaskKHR(commandBuffer, deviceMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDiscardRectangleEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint discardRectangleEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[209] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[209] = nativeContext.LoadFunction(
                        "vkCmdSetDiscardRectangleEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, discardRectangleEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDiscardRectangleEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint discardRectangleEnable
    ) => DllImport.CmdSetDiscardRectangleEnableEXT(commandBuffer, discardRectangleEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDiscardRectangleEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint discardRectangleEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDiscardRectangleEnableEXT(
                __dsl_commandBuffer,
                discardRectangleEnable
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDiscardRectangleEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint discardRectangleEnable
    ) => DllImport.CmdSetDiscardRectangleEnableEXT(commandBuffer, discardRectangleEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDiscardRectangleEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
        [NativeTypeName("uint32_t")] uint discardRectangleCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pDiscardRectangles
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, Rect2D*, void>)(
                _slots[210] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[210] = nativeContext.LoadFunction(
                        "vkCmdSetDiscardRectangleEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDiscardRectangleEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
        [NativeTypeName("uint32_t")] uint discardRectangleCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pDiscardRectangles
    ) =>
        DllImport.CmdSetDiscardRectangleEXT(
            commandBuffer,
            firstDiscardRectangle,
            discardRectangleCount,
            pDiscardRectangles
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDiscardRectangleEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
        [NativeTypeName("uint32_t")] uint discardRectangleCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pDiscardRectangles
    )
    {
        fixed (Rect2D* __dsl_pDiscardRectangles = pDiscardRectangles)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDiscardRectangleEXT(
                __dsl_commandBuffer,
                firstDiscardRectangle,
                discardRectangleCount,
                __dsl_pDiscardRectangles
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDiscardRectangleEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
        [NativeTypeName("uint32_t")] uint discardRectangleCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pDiscardRectangles
    ) =>
        DllImport.CmdSetDiscardRectangleEXT(
            commandBuffer,
            firstDiscardRectangle,
            discardRectangleCount,
            pDiscardRectangles
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDiscardRectangleEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
        [NativeTypeName("const VkRect2D *")] Rect2D pDiscardRectangles
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDiscardRectangleEXT(
                __dsl_commandBuffer,
                firstDiscardRectangle,
                1,
                (Rect2D*)&pDiscardRectangles
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDiscardRectangleEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstDiscardRectangle,
        [NativeTypeName("const VkRect2D *")] Rect2D pDiscardRectangles
    ) =>
        DllImport.CmdSetDiscardRectangleEXT(
            commandBuffer,
            firstDiscardRectangle,
            pDiscardRectangles
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDiscardRectangleModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        DiscardRectangleModeEXT discardRectangleMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, DiscardRectangleModeEXT, void>)(
                _slots[211] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[211] = nativeContext.LoadFunction(
                        "vkCmdSetDiscardRectangleModeEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, discardRectangleMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDiscardRectangleModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        DiscardRectangleModeEXT discardRectangleMode
    ) => DllImport.CmdSetDiscardRectangleModeEXT(commandBuffer, discardRectangleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetDiscardRectangleModeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        DiscardRectangleModeEXT discardRectangleMode
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetDiscardRectangleModeEXT(
                __dsl_commandBuffer,
                discardRectangleMode
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_discard_rectangles"],
        ImpliesSets = [
            "VK_EXT_discard_rectangles+VK_KHR_get_physical_device_properties2",
            "VK_EXT_discard_rectangles+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetDiscardRectangleModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetDiscardRectangleModeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        DiscardRectangleModeEXT discardRectangleMode
    ) => DllImport.CmdSetDiscardRectangleModeEXT(commandBuffer, discardRectangleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetEvent(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle* @event,
        [NativeTypeName("VkPipelineStageFlags")] uint stageMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, EventHandle*, uint, void>)(
                _slots[212] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[212] = nativeContext.LoadFunction("vkCmdSetEvent", "vulkan")
            )
        )(commandBuffer, @event, stageMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetEvent(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle* @event,
        [NativeTypeName("VkPipelineStageFlags")] uint stageMask
    ) => DllImport.CmdSetEvent(commandBuffer, @event, stageMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetEvent(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
        [NativeTypeName("VkPipelineStageFlags")] uint stageMask
    )
    {
        fixed (EventHandle* __dsl_event = @event)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetEvent(__dsl_commandBuffer, __dsl_event, stageMask);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetEvent(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
        [NativeTypeName("VkPipelineStageFlags")] uint stageMask
    ) => DllImport.CmdSetEvent(commandBuffer, @event, stageMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetEvent2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle* @event,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, EventHandle*, DependencyInfo*, void>)(
                _slots[213] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[213] = nativeContext.LoadFunction("vkCmdSetEvent2", "vulkan")
            )
        )(commandBuffer, @event, pDependencyInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetEvent2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle* @event,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) => DllImport.CmdSetEvent2(commandBuffer, @event, pDependencyInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetEvent2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    )
    {
        fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
        fixed (EventHandle* __dsl_event = @event)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetEvent2(__dsl_commandBuffer, __dsl_event, __dsl_pDependencyInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetEvent2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    ) => DllImport.CmdSetEvent2(commandBuffer, @event, pDependencyInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetEvent2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle* @event,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, EventHandle*, DependencyInfo*, void>)(
                _slots[214] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[214] = nativeContext.LoadFunction("vkCmdSetEvent2KHR", "vulkan")
            )
        )(commandBuffer, @event, pDependencyInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetEvent2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkEvent")] EventHandle* @event,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfo
    ) => DllImport.CmdSetEvent2KHR(commandBuffer, @event, pDependencyInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetEvent2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    )
    {
        fixed (DependencyInfo* __dsl_pDependencyInfo = pDependencyInfo)
        fixed (EventHandle* __dsl_event = @event)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetEvent2KHR(
                __dsl_commandBuffer,
                __dsl_event,
                __dsl_pDependencyInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetEvent2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetEvent2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfo
    ) => DllImport.CmdSetEvent2KHR(commandBuffer, @event, pDependencyInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetExclusiveScissorEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkBool32 *")] uint* pExclusiveScissorEnables
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, uint*, void>)(
                _slots[215] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[215] = nativeContext.LoadFunction(
                        "vkCmdSetExclusiveScissorEnableNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissorEnables);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExclusiveScissorEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkBool32 *")] uint* pExclusiveScissorEnables
    ) =>
        DllImport.CmdSetExclusiveScissorEnableNV(
            commandBuffer,
            firstExclusiveScissor,
            exclusiveScissorCount,
            pExclusiveScissorEnables
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetExclusiveScissorEnableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkBool32 *")] Ref<uint> pExclusiveScissorEnables
    )
    {
        fixed (uint* __dsl_pExclusiveScissorEnables = pExclusiveScissorEnables)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetExclusiveScissorEnableNV(
                __dsl_commandBuffer,
                firstExclusiveScissor,
                exclusiveScissorCount,
                __dsl_pExclusiveScissorEnables
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExclusiveScissorEnableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkBool32 *")] Ref<uint> pExclusiveScissorEnables
    ) =>
        DllImport.CmdSetExclusiveScissorEnableNV(
            commandBuffer,
            firstExclusiveScissor,
            exclusiveScissorCount,
            pExclusiveScissorEnables
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetExclusiveScissorEnableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("const VkBool32 *")] uint pExclusiveScissorEnables
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetExclusiveScissorEnableNV(
                __dsl_commandBuffer,
                firstExclusiveScissor,
                1,
                (uint*)&pExclusiveScissorEnables
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExclusiveScissorEnableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("const VkBool32 *")] uint pExclusiveScissorEnables
    ) =>
        DllImport.CmdSetExclusiveScissorEnableNV(
            commandBuffer,
            firstExclusiveScissor,
            pExclusiveScissorEnables
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetExclusiveScissorNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pExclusiveScissors
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, Rect2D*, void>)(
                _slots[216] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[216] = nativeContext.LoadFunction(
                        "vkCmdSetExclusiveScissorNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExclusiveScissorNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pExclusiveScissors
    ) =>
        DllImport.CmdSetExclusiveScissorNV(
            commandBuffer,
            firstExclusiveScissor,
            exclusiveScissorCount,
            pExclusiveScissors
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetExclusiveScissorNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pExclusiveScissors
    )
    {
        fixed (Rect2D* __dsl_pExclusiveScissors = pExclusiveScissors)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetExclusiveScissorNV(
                __dsl_commandBuffer,
                firstExclusiveScissor,
                exclusiveScissorCount,
                __dsl_pExclusiveScissors
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExclusiveScissorNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("uint32_t")] uint exclusiveScissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pExclusiveScissors
    ) =>
        DllImport.CmdSetExclusiveScissorNV(
            commandBuffer,
            firstExclusiveScissor,
            exclusiveScissorCount,
            pExclusiveScissors
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetExclusiveScissorNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("const VkRect2D *")] Rect2D pExclusiveScissors
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetExclusiveScissorNV(
                __dsl_commandBuffer,
                firstExclusiveScissor,
                1,
                (Rect2D*)&pExclusiveScissors
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_scissor_exclusive"],
        ImpliesSets = [
            "VK_NV_scissor_exclusive+VK_KHR_get_physical_device_properties2",
            "VK_NV_scissor_exclusive+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExclusiveScissorNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExclusiveScissorNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstExclusiveScissor,
        [NativeTypeName("const VkRect2D *")] Rect2D pExclusiveScissors
    ) =>
        DllImport.CmdSetExclusiveScissorNV(
            commandBuffer,
            firstExclusiveScissor,
            pExclusiveScissors
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetExtraPrimitiveOverestimationSizeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        float extraPrimitiveOverestimationSize
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, float, void>)(
                _slots[217] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[217] = nativeContext.LoadFunction(
                        "vkCmdSetExtraPrimitiveOverestimationSizeEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, extraPrimitiveOverestimationSize);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conservative_rasterization", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExtraPrimitiveOverestimationSizeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExtraPrimitiveOverestimationSizeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        float extraPrimitiveOverestimationSize
    ) =>
        DllImport.CmdSetExtraPrimitiveOverestimationSizeEXT(
            commandBuffer,
            extraPrimitiveOverestimationSize
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetExtraPrimitiveOverestimationSizeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        float extraPrimitiveOverestimationSize
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetExtraPrimitiveOverestimationSizeEXT(
                __dsl_commandBuffer,
                extraPrimitiveOverestimationSize
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_conservative_rasterization", "VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetExtraPrimitiveOverestimationSizeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetExtraPrimitiveOverestimationSizeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        float extraPrimitiveOverestimationSize
    ) =>
        DllImport.CmdSetExtraPrimitiveOverestimationSizeEXT(
            commandBuffer,
            extraPrimitiveOverestimationSize
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetFragmentShadingRateEnumNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        FragmentShadingRateNV shadingRate,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            FragmentShadingRateCombinerOpKHR* combinerOps
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                FragmentShadingRateNV,
                FragmentShadingRateCombinerOpKHR*,
                void>)(
                _slots[218] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[218] = nativeContext.LoadFunction(
                        "vkCmdSetFragmentShadingRateEnumNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, shadingRate, combinerOps);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_fragment_shading_rate_enums"],
        ImpliesSets = ["VK_KHR_fragment_shading_rate"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateEnumNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetFragmentShadingRateEnumNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        FragmentShadingRateNV shadingRate,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            FragmentShadingRateCombinerOpKHR* combinerOps
    ) => DllImport.CmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetFragmentShadingRateEnumNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        FragmentShadingRateNV shadingRate,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            Ref<FragmentShadingRateCombinerOpKHR> combinerOps
    )
    {
        fixed (FragmentShadingRateCombinerOpKHR* __dsl_combinerOps = combinerOps)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetFragmentShadingRateEnumNV(
                __dsl_commandBuffer,
                shadingRate,
                __dsl_combinerOps
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_fragment_shading_rate_enums"],
        ImpliesSets = ["VK_KHR_fragment_shading_rate"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateEnumNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetFragmentShadingRateEnumNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        FragmentShadingRateNV shadingRate,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            Ref<FragmentShadingRateCombinerOpKHR> combinerOps
    ) => DllImport.CmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetFragmentShadingRateKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkExtent2D *")] Extent2D* pFragmentSize,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            FragmentShadingRateCombinerOpKHR* combinerOps
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                Extent2D*,
                FragmentShadingRateCombinerOpKHR*,
                void>)(
                _slots[219] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[219] = nativeContext.LoadFunction(
                        "vkCmdSetFragmentShadingRateKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pFragmentSize, combinerOps);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetFragmentShadingRateKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkExtent2D *")] Extent2D* pFragmentSize,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            FragmentShadingRateCombinerOpKHR* combinerOps
    ) => DllImport.CmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetFragmentShadingRateKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkExtent2D *")] Ref<Extent2D> pFragmentSize,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            Ref<FragmentShadingRateCombinerOpKHR> combinerOps
    )
    {
        fixed (FragmentShadingRateCombinerOpKHR* __dsl_combinerOps = combinerOps)
        fixed (Extent2D* __dsl_pFragmentSize = pFragmentSize)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetFragmentShadingRateKHR(
                __dsl_commandBuffer,
                __dsl_pFragmentSize,
                __dsl_combinerOps
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFragmentShadingRateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetFragmentShadingRateKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkExtent2D *")] Ref<Extent2D> pFragmentSize,
        [NativeTypeName("const VkFragmentShadingRateCombinerOpKHR[2]")]
            Ref<FragmentShadingRateCombinerOpKHR> combinerOps
    ) => DllImport.CmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetFrontFace(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        FrontFace frontFace
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, FrontFace, void>)(
                _slots[220] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[220] = nativeContext.LoadFunction("vkCmdSetFrontFace", "vulkan")
            )
        )(commandBuffer, frontFace);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFrontFace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetFrontFace(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        FrontFace frontFace
    ) => DllImport.CmdSetFrontFace(commandBuffer, frontFace);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetFrontFace(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        FrontFace frontFace
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetFrontFace(__dsl_commandBuffer, frontFace);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFrontFace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetFrontFace(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        FrontFace frontFace
    ) => DllImport.CmdSetFrontFace(commandBuffer, frontFace);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetFrontFaceEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        FrontFace frontFace
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, FrontFace, void>)(
                _slots[221] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[221] = nativeContext.LoadFunction("vkCmdSetFrontFaceEXT", "vulkan")
            )
        )(commandBuffer, frontFace);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFrontFaceEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetFrontFaceEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        FrontFace frontFace
    ) => DllImport.CmdSetFrontFaceEXT(commandBuffer, frontFace);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetFrontFaceEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        FrontFace frontFace
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetFrontFaceEXT(__dsl_commandBuffer, frontFace);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetFrontFaceEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetFrontFaceEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        FrontFace frontFace
    ) => DllImport.CmdSetFrontFaceEXT(commandBuffer, frontFace);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLineRasterizationModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkLineRasterizationModeEXT")] LineRasterizationMode lineRasterizationMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, LineRasterizationMode, void>)(
                _slots[222] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[222] = nativeContext.LoadFunction(
                        "vkCmdSetLineRasterizationModeEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, lineRasterizationMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineRasterizationModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineRasterizationModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkLineRasterizationModeEXT")] LineRasterizationMode lineRasterizationMode
    ) => DllImport.CmdSetLineRasterizationModeEXT(commandBuffer, lineRasterizationMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLineRasterizationModeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkLineRasterizationModeEXT")] LineRasterizationMode lineRasterizationMode
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetLineRasterizationModeEXT(
                __dsl_commandBuffer,
                lineRasterizationMode
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineRasterizationModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineRasterizationModeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkLineRasterizationModeEXT")] LineRasterizationMode lineRasterizationMode
    ) => DllImport.CmdSetLineRasterizationModeEXT(commandBuffer, lineRasterizationMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLineStipple(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, ushort, void>)(
                _slots[223] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[223] = nativeContext.LoadFunction("vkCmdSetLineStipple", "vulkan")
            )
        )(commandBuffer, lineStippleFactor, lineStipplePattern);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStipple")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineStipple(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) => DllImport.CmdSetLineStipple(commandBuffer, lineStippleFactor, lineStipplePattern);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLineStipple(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetLineStipple(
                __dsl_commandBuffer,
                lineStippleFactor,
                lineStipplePattern
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStipple")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineStipple(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) => DllImport.CmdSetLineStipple(commandBuffer, lineStippleFactor, lineStipplePattern);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLineStippleEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint stippledLineEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[224] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[224] = nativeContext.LoadFunction(
                        "vkCmdSetLineStippleEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, stippledLineEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineStippleEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint stippledLineEnable
    ) => DllImport.CmdSetLineStippleEnableEXT(commandBuffer, stippledLineEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLineStippleEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint stippledLineEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetLineStippleEnableEXT(__dsl_commandBuffer, stippledLineEnable);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineStippleEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint stippledLineEnable
    ) => DllImport.CmdSetLineStippleEnableEXT(commandBuffer, stippledLineEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLineStippleEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, ushort, void>)(
                _slots[225] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[225] = nativeContext.LoadFunction("vkCmdSetLineStippleEXT", "vulkan")
            )
        )(commandBuffer, lineStippleFactor, lineStipplePattern);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_EXT_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineStippleEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) => DllImport.CmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLineStippleEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetLineStippleEXT(
                __dsl_commandBuffer,
                lineStippleFactor,
                lineStipplePattern
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_line_rasterization"],
        ImpliesSets = [
            "VK_EXT_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_EXT_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineStippleEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) => DllImport.CmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLineStippleKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, ushort, void>)(
                _slots[226] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[226] = nativeContext.LoadFunction("vkCmdSetLineStippleKHR", "vulkan")
            )
        )(commandBuffer, lineStippleFactor, lineStipplePattern);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_line_rasterization"],
        ImpliesSets = [
            "VK_KHR_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_KHR_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineStippleKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) => DllImport.CmdSetLineStippleKHR(commandBuffer, lineStippleFactor, lineStipplePattern);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLineStippleKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetLineStippleKHR(
                __dsl_commandBuffer,
                lineStippleFactor,
                lineStipplePattern
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_line_rasterization"],
        ImpliesSets = [
            "VK_KHR_line_rasterization+VK_KHR_get_physical_device_properties2",
            "VK_KHR_line_rasterization+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineStippleKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineStippleKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint lineStippleFactor,
        [NativeTypeName("uint16_t")] ushort lineStipplePattern
    ) => DllImport.CmdSetLineStippleKHR(commandBuffer, lineStippleFactor, lineStipplePattern);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLineWidth(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        float lineWidth
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, float, void>)(
                _slots[227] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[227] = nativeContext.LoadFunction("vkCmdSetLineWidth", "vulkan")
            )
        )(commandBuffer, lineWidth);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineWidth")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineWidth(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        float lineWidth
    ) => DllImport.CmdSetLineWidth(commandBuffer, lineWidth);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLineWidth(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        float lineWidth
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetLineWidth(__dsl_commandBuffer, lineWidth);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLineWidth")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLineWidth(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        float lineWidth
    ) => DllImport.CmdSetLineWidth(commandBuffer, lineWidth);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLogicOpEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint logicOpEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[228] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[228] = nativeContext.LoadFunction("vkCmdSetLogicOpEnableEXT", "vulkan")
            )
        )(commandBuffer, logicOpEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLogicOpEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLogicOpEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint logicOpEnable
    ) => DllImport.CmdSetLogicOpEnableEXT(commandBuffer, logicOpEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLogicOpEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint logicOpEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetLogicOpEnableEXT(__dsl_commandBuffer, logicOpEnable);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLogicOpEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLogicOpEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint logicOpEnable
    ) => DllImport.CmdSetLogicOpEnableEXT(commandBuffer, logicOpEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLogicOpEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        LogicOp logicOp
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, LogicOp, void>)(
                _slots[229] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[229] = nativeContext.LoadFunction("vkCmdSetLogicOpEXT", "vulkan")
            )
        )(commandBuffer, logicOp);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLogicOpEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLogicOpEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        LogicOp logicOp
    ) => DllImport.CmdSetLogicOpEXT(commandBuffer, logicOp);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetLogicOpEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        LogicOp logicOp
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetLogicOpEXT(__dsl_commandBuffer, logicOp);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetLogicOpEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetLogicOpEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        LogicOp logicOp
    ) => DllImport.CmdSetLogicOpEXT(commandBuffer, logicOp);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetPatchControlPointsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint patchControlPoints
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[230] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[230] = nativeContext.LoadFunction(
                        "vkCmdSetPatchControlPointsEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, patchControlPoints);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPatchControlPointsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPatchControlPointsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint patchControlPoints
    ) => DllImport.CmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetPatchControlPointsEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint patchControlPoints
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetPatchControlPointsEXT(__dsl_commandBuffer, patchControlPoints);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPatchControlPointsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPatchControlPointsEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint patchControlPoints
    ) => DllImport.CmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CmdSetPerformanceMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPerformanceMarkerInfoINTEL *")]
            PerformanceMarkerInfoIntel* pMarkerInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PerformanceMarkerInfoIntel*, Result>)(
                _slots[231] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[231] = nativeContext.LoadFunction(
                        "vkCmdSetPerformanceMarkerINTEL",
                        "vulkan"
                    )
            )
        )(commandBuffer, pMarkerInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceMarkerINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CmdSetPerformanceMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPerformanceMarkerInfoINTEL *")]
            PerformanceMarkerInfoIntel* pMarkerInfo
    ) => DllImport.CmdSetPerformanceMarkerIntel(commandBuffer, pMarkerInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CmdSetPerformanceMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPerformanceMarkerInfoINTEL *")]
            Ref<PerformanceMarkerInfoIntel> pMarkerInfo
    )
    {
        fixed (PerformanceMarkerInfoIntel* __dsl_pMarkerInfo = pMarkerInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            return (Result)
                ((IVulkan)this).CmdSetPerformanceMarkerIntel(
                    __dsl_commandBuffer,
                    __dsl_pMarkerInfo
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceMarkerINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CmdSetPerformanceMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPerformanceMarkerInfoINTEL *")]
            Ref<PerformanceMarkerInfoIntel> pMarkerInfo
    ) => DllImport.CmdSetPerformanceMarkerIntel(commandBuffer, pMarkerInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CmdSetPerformanceOverrideIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPerformanceOverrideInfoINTEL *")]
            PerformanceOverrideInfoIntel* pOverrideInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PerformanceOverrideInfoIntel*, Result>)(
                _slots[232] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[232] = nativeContext.LoadFunction(
                        "vkCmdSetPerformanceOverrideINTEL",
                        "vulkan"
                    )
            )
        )(commandBuffer, pOverrideInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceOverrideINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CmdSetPerformanceOverrideIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPerformanceOverrideInfoINTEL *")]
            PerformanceOverrideInfoIntel* pOverrideInfo
    ) => DllImport.CmdSetPerformanceOverrideIntel(commandBuffer, pOverrideInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CmdSetPerformanceOverrideIntel(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPerformanceOverrideInfoINTEL *")]
            Ref<PerformanceOverrideInfoIntel> pOverrideInfo
    )
    {
        fixed (PerformanceOverrideInfoIntel* __dsl_pOverrideInfo = pOverrideInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            return (Result)
                ((IVulkan)this).CmdSetPerformanceOverrideIntel(
                    __dsl_commandBuffer,
                    __dsl_pOverrideInfo
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceOverrideINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CmdSetPerformanceOverrideIntel(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPerformanceOverrideInfoINTEL *")]
            Ref<PerformanceOverrideInfoIntel> pOverrideInfo
    ) => DllImport.CmdSetPerformanceOverrideIntel(commandBuffer, pOverrideInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CmdSetPerformanceStreamMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPerformanceStreamMarkerInfoINTEL *")]
            PerformanceStreamMarkerInfoIntel* pMarkerInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PerformanceStreamMarkerInfoIntel*, Result>)(
                _slots[233] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[233] = nativeContext.LoadFunction(
                        "vkCmdSetPerformanceStreamMarkerINTEL",
                        "vulkan"
                    )
            )
        )(commandBuffer, pMarkerInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceStreamMarkerINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CmdSetPerformanceStreamMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkPerformanceStreamMarkerInfoINTEL *")]
            PerformanceStreamMarkerInfoIntel* pMarkerInfo
    ) => DllImport.CmdSetPerformanceStreamMarkerIntel(commandBuffer, pMarkerInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CmdSetPerformanceStreamMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPerformanceStreamMarkerInfoINTEL *")]
            Ref<PerformanceStreamMarkerInfoIntel> pMarkerInfo
    )
    {
        fixed (PerformanceStreamMarkerInfoIntel* __dsl_pMarkerInfo = pMarkerInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            return (Result)
                ((IVulkan)this).CmdSetPerformanceStreamMarkerIntel(
                    __dsl_commandBuffer,
                    __dsl_pMarkerInfo
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPerformanceStreamMarkerINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CmdSetPerformanceStreamMarkerIntel(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkPerformanceStreamMarkerInfoINTEL *")]
            Ref<PerformanceStreamMarkerInfoIntel> pMarkerInfo
    ) => DllImport.CmdSetPerformanceStreamMarkerIntel(commandBuffer, pMarkerInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetPolygonModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PolygonMode polygonMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PolygonMode, void>)(
                _slots[234] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[234] = nativeContext.LoadFunction("vkCmdSetPolygonModeEXT", "vulkan")
            )
        )(commandBuffer, polygonMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPolygonModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPolygonModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PolygonMode polygonMode
    ) => DllImport.CmdSetPolygonModeEXT(commandBuffer, polygonMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetPolygonModeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PolygonMode polygonMode
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetPolygonModeEXT(__dsl_commandBuffer, polygonMode);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPolygonModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPolygonModeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PolygonMode polygonMode
    ) => DllImport.CmdSetPolygonModeEXT(commandBuffer, polygonMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetPrimitiveRestartEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint primitiveRestartEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[235] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[235] = nativeContext.LoadFunction(
                        "vkCmdSetPrimitiveRestartEnable",
                        "vulkan"
                    )
            )
        )(commandBuffer, primitiveRestartEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveRestartEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPrimitiveRestartEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint primitiveRestartEnable
    ) => DllImport.CmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetPrimitiveRestartEnable(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint primitiveRestartEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetPrimitiveRestartEnable(
                __dsl_commandBuffer,
                primitiveRestartEnable
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveRestartEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPrimitiveRestartEnable(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint primitiveRestartEnable
    ) => DllImport.CmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetPrimitiveRestartEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint primitiveRestartEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[236] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[236] = nativeContext.LoadFunction(
                        "vkCmdSetPrimitiveRestartEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, primitiveRestartEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveRestartEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPrimitiveRestartEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint primitiveRestartEnable
    ) => DllImport.CmdSetPrimitiveRestartEnableEXT(commandBuffer, primitiveRestartEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetPrimitiveRestartEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint primitiveRestartEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetPrimitiveRestartEnableEXT(
                __dsl_commandBuffer,
                primitiveRestartEnable
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveRestartEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPrimitiveRestartEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint primitiveRestartEnable
    ) => DllImport.CmdSetPrimitiveRestartEnableEXT(commandBuffer, primitiveRestartEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetPrimitiveTopology(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PrimitiveTopology primitiveTopology
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PrimitiveTopology, void>)(
                _slots[237] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[237] = nativeContext.LoadFunction(
                        "vkCmdSetPrimitiveTopology",
                        "vulkan"
                    )
            )
        )(commandBuffer, primitiveTopology);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveTopology")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPrimitiveTopology(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PrimitiveTopology primitiveTopology
    ) => DllImport.CmdSetPrimitiveTopology(commandBuffer, primitiveTopology);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetPrimitiveTopology(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PrimitiveTopology primitiveTopology
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetPrimitiveTopology(__dsl_commandBuffer, primitiveTopology);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveTopology")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPrimitiveTopology(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PrimitiveTopology primitiveTopology
    ) => DllImport.CmdSetPrimitiveTopology(commandBuffer, primitiveTopology);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetPrimitiveTopologyEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PrimitiveTopology primitiveTopology
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PrimitiveTopology, void>)(
                _slots[238] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[238] = nativeContext.LoadFunction(
                        "vkCmdSetPrimitiveTopologyEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, primitiveTopology);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveTopologyEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPrimitiveTopologyEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PrimitiveTopology primitiveTopology
    ) => DllImport.CmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetPrimitiveTopologyEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PrimitiveTopology primitiveTopology
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetPrimitiveTopologyEXT(__dsl_commandBuffer, primitiveTopology);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetPrimitiveTopologyEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetPrimitiveTopologyEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PrimitiveTopology primitiveTopology
    ) => DllImport.CmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetProvokingVertexModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        ProvokingVertexModeEXT provokingVertexMode
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, ProvokingVertexModeEXT, void>)(
                _slots[239] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[239] = nativeContext.LoadFunction(
                        "vkCmdSetProvokingVertexModeEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, provokingVertexMode);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_provoking_vertex"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetProvokingVertexModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetProvokingVertexModeEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        ProvokingVertexModeEXT provokingVertexMode
    ) => DllImport.CmdSetProvokingVertexModeEXT(commandBuffer, provokingVertexMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetProvokingVertexModeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        ProvokingVertexModeEXT provokingVertexMode
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetProvokingVertexModeEXT(__dsl_commandBuffer, provokingVertexMode);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_provoking_vertex"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetProvokingVertexModeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetProvokingVertexModeEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        ProvokingVertexModeEXT provokingVertexMode
    ) => DllImport.CmdSetProvokingVertexModeEXT(commandBuffer, provokingVertexMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRasterizationSamplesEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags rasterizationSamples
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, SampleCountFlags, void>)(
                _slots[240] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[240] = nativeContext.LoadFunction(
                        "vkCmdSetRasterizationSamplesEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, rasterizationSamples);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizationSamplesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRasterizationSamplesEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags rasterizationSamples
    ) => DllImport.CmdSetRasterizationSamplesEXT(commandBuffer, rasterizationSamples);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRasterizationSamplesEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags rasterizationSamples
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetRasterizationSamplesEXT(
                __dsl_commandBuffer,
                rasterizationSamples
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizationSamplesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRasterizationSamplesEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags rasterizationSamples
    ) => DllImport.CmdSetRasterizationSamplesEXT(commandBuffer, rasterizationSamples);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRasterizationStreamEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint rasterizationStream
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[241] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[241] = nativeContext.LoadFunction(
                        "vkCmdSetRasterizationStreamEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, rasterizationStream);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizationStreamEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRasterizationStreamEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint rasterizationStream
    ) => DllImport.CmdSetRasterizationStreamEXT(commandBuffer, rasterizationStream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRasterizationStreamEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint rasterizationStream
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetRasterizationStreamEXT(__dsl_commandBuffer, rasterizationStream);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_transform_feedback"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizationStreamEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRasterizationStreamEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint rasterizationStream
    ) => DllImport.CmdSetRasterizationStreamEXT(commandBuffer, rasterizationStream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRasterizerDiscardEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint rasterizerDiscardEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[242] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[242] = nativeContext.LoadFunction(
                        "vkCmdSetRasterizerDiscardEnable",
                        "vulkan"
                    )
            )
        )(commandBuffer, rasterizerDiscardEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizerDiscardEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRasterizerDiscardEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint rasterizerDiscardEnable
    ) => DllImport.CmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRasterizerDiscardEnable(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint rasterizerDiscardEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetRasterizerDiscardEnable(
                __dsl_commandBuffer,
                rasterizerDiscardEnable
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizerDiscardEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRasterizerDiscardEnable(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint rasterizerDiscardEnable
    ) => DllImport.CmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRasterizerDiscardEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint rasterizerDiscardEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[243] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[243] = nativeContext.LoadFunction(
                        "vkCmdSetRasterizerDiscardEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, rasterizerDiscardEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizerDiscardEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRasterizerDiscardEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint rasterizerDiscardEnable
    ) => DllImport.CmdSetRasterizerDiscardEnableEXT(commandBuffer, rasterizerDiscardEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRasterizerDiscardEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint rasterizerDiscardEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetRasterizerDiscardEnableEXT(
                __dsl_commandBuffer,
                rasterizerDiscardEnable
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state2"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state2+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRasterizerDiscardEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRasterizerDiscardEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint rasterizerDiscardEnable
    ) => DllImport.CmdSetRasterizerDiscardEnableEXT(commandBuffer, rasterizerDiscardEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRayTracingPipelineStackSizeKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint pipelineStackSize
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[244] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[244] = nativeContext.LoadFunction(
                        "vkCmdSetRayTracingPipelineStackSizeKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pipelineStackSize);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRayTracingPipelineStackSizeKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRayTracingPipelineStackSizeKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint pipelineStackSize
    ) => DllImport.CmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRayTracingPipelineStackSizeKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint pipelineStackSize
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetRayTracingPipelineStackSizeKHR(
                __dsl_commandBuffer,
                pipelineStackSize
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRayTracingPipelineStackSizeKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRayTracingPipelineStackSizeKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint pipelineStackSize
    ) => DllImport.CmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRenderingAttachmentLocations(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            RenderingAttachmentLocationInfo* pLocationInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, RenderingAttachmentLocationInfo*, void>)(
                _slots[245] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[245] = nativeContext.LoadFunction(
                        "vkCmdSetRenderingAttachmentLocations",
                        "vulkan"
                    )
            )
        )(commandBuffer, pLocationInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocations")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingAttachmentLocations(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            RenderingAttachmentLocationInfo* pLocationInfo
    ) => DllImport.CmdSetRenderingAttachmentLocations(commandBuffer, pLocationInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRenderingAttachmentLocations(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            Ref<RenderingAttachmentLocationInfo> pLocationInfo
    )
    {
        fixed (RenderingAttachmentLocationInfo* __dsl_pLocationInfo = pLocationInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetRenderingAttachmentLocations(
                __dsl_commandBuffer,
                __dsl_pLocationInfo
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocations")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingAttachmentLocations(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            Ref<RenderingAttachmentLocationInfo> pLocationInfo
    ) => DllImport.CmdSetRenderingAttachmentLocations(commandBuffer, pLocationInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRenderingAttachmentLocationsKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            RenderingAttachmentLocationInfo* pLocationInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, RenderingAttachmentLocationInfo*, void>)(
                _slots[246] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[246] = nativeContext.LoadFunction(
                        "vkCmdSetRenderingAttachmentLocationsKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pLocationInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocationsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingAttachmentLocationsKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            RenderingAttachmentLocationInfo* pLocationInfo
    ) => DllImport.CmdSetRenderingAttachmentLocationsKHR(commandBuffer, pLocationInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRenderingAttachmentLocationsKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            Ref<RenderingAttachmentLocationInfo> pLocationInfo
    )
    {
        fixed (RenderingAttachmentLocationInfo* __dsl_pLocationInfo = pLocationInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetRenderingAttachmentLocationsKHR(
                __dsl_commandBuffer,
                __dsl_pLocationInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingAttachmentLocationsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingAttachmentLocationsKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderingAttachmentLocationInfo *")]
            Ref<RenderingAttachmentLocationInfo> pLocationInfo
    ) => DllImport.CmdSetRenderingAttachmentLocationsKHR(commandBuffer, pLocationInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRenderingInputAttachmentIndices(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            RenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, RenderingInputAttachmentIndexInfo*, void>)(
                _slots[247] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[247] = nativeContext.LoadFunction(
                        "vkCmdSetRenderingInputAttachmentIndices",
                        "vulkan"
                    )
            )
        )(commandBuffer, pInputAttachmentIndexInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingInputAttachmentIndices(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            RenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo
    ) => DllImport.CmdSetRenderingInputAttachmentIndices(commandBuffer, pInputAttachmentIndexInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRenderingInputAttachmentIndices(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            Ref<RenderingInputAttachmentIndexInfo> pInputAttachmentIndexInfo
    )
    {
        fixed (
            RenderingInputAttachmentIndexInfo* __dsl_pInputAttachmentIndexInfo =
                pInputAttachmentIndexInfo
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetRenderingInputAttachmentIndices(
                __dsl_commandBuffer,
                __dsl_pInputAttachmentIndexInfo
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingInputAttachmentIndices(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            Ref<RenderingInputAttachmentIndexInfo> pInputAttachmentIndexInfo
    ) => DllImport.CmdSetRenderingInputAttachmentIndices(commandBuffer, pInputAttachmentIndexInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRenderingInputAttachmentIndicesKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            RenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, RenderingInputAttachmentIndexInfo*, void>)(
                _slots[248] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[248] = nativeContext.LoadFunction(
                        "vkCmdSetRenderingInputAttachmentIndicesKHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, pInputAttachmentIndexInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndicesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingInputAttachmentIndicesKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            RenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo
    ) =>
        DllImport.CmdSetRenderingInputAttachmentIndicesKHR(
            commandBuffer,
            pInputAttachmentIndexInfo
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRenderingInputAttachmentIndicesKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            Ref<RenderingInputAttachmentIndexInfo> pInputAttachmentIndexInfo
    )
    {
        fixed (
            RenderingInputAttachmentIndexInfo* __dsl_pInputAttachmentIndexInfo =
                pInputAttachmentIndexInfo
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetRenderingInputAttachmentIndicesKHR(
                __dsl_commandBuffer,
                __dsl_pInputAttachmentIndexInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_dynamic_rendering_local_read"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering_local_read+VK_KHR_dynamic_rendering",
            "VK_KHR_dynamic_rendering_local_read+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRenderingInputAttachmentIndicesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRenderingInputAttachmentIndicesKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRenderingInputAttachmentIndexInfo *")]
            Ref<RenderingInputAttachmentIndexInfo> pInputAttachmentIndexInfo
    ) =>
        DllImport.CmdSetRenderingInputAttachmentIndicesKHR(
            commandBuffer,
            pInputAttachmentIndexInfo
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRepresentativeFragmentTestEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint representativeFragmentTestEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[249] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[249] = nativeContext.LoadFunction(
                        "vkCmdSetRepresentativeFragmentTestEnableNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, representativeFragmentTestEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_representative_fragment_test"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRepresentativeFragmentTestEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRepresentativeFragmentTestEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint representativeFragmentTestEnable
    ) =>
        DllImport.CmdSetRepresentativeFragmentTestEnableNV(
            commandBuffer,
            representativeFragmentTestEnable
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetRepresentativeFragmentTestEnableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint representativeFragmentTestEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetRepresentativeFragmentTestEnableNV(
                __dsl_commandBuffer,
                representativeFragmentTestEnable
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_representative_fragment_test"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetRepresentativeFragmentTestEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetRepresentativeFragmentTestEnableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint representativeFragmentTestEnable
    ) =>
        DllImport.CmdSetRepresentativeFragmentTestEnableNV(
            commandBuffer,
            representativeFragmentTestEnable
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetSampleLocationsEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint sampleLocationsEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[250] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[250] = nativeContext.LoadFunction(
                        "vkCmdSetSampleLocationsEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, sampleLocationsEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetSampleLocationsEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint sampleLocationsEnable
    ) => DllImport.CmdSetSampleLocationsEnableEXT(commandBuffer, sampleLocationsEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetSampleLocationsEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint sampleLocationsEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetSampleLocationsEnableEXT(
                __dsl_commandBuffer,
                sampleLocationsEnable
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetSampleLocationsEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint sampleLocationsEnable
    ) => DllImport.CmdSetSampleLocationsEnableEXT(commandBuffer, sampleLocationsEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetSampleLocationsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkSampleLocationsInfoEXT *")]
            SampleLocationsInfoEXT* pSampleLocationsInfo
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, SampleLocationsInfoEXT*, void>)(
                _slots[251] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[251] = nativeContext.LoadFunction(
                        "vkCmdSetSampleLocationsEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, pSampleLocationsInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetSampleLocationsEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkSampleLocationsInfoEXT *")]
            SampleLocationsInfoEXT* pSampleLocationsInfo
    ) => DllImport.CmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetSampleLocationsEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkSampleLocationsInfoEXT *")]
            Ref<SampleLocationsInfoEXT> pSampleLocationsInfo
    )
    {
        fixed (SampleLocationsInfoEXT* __dsl_pSampleLocationsInfo = pSampleLocationsInfo)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetSampleLocationsEXT(
                __dsl_commandBuffer,
                __dsl_pSampleLocationsInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleLocationsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetSampleLocationsEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkSampleLocationsInfoEXT *")]
            Ref<SampleLocationsInfoEXT> pSampleLocationsInfo
    ) => DllImport.CmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetSampleMaskEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
        [NativeTypeName("const VkSampleMask *")] uint* pSampleMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, SampleCountFlags, uint*, void>)(
                _slots[252] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[252] = nativeContext.LoadFunction("vkCmdSetSampleMaskEXT", "vulkan")
            )
        )(commandBuffer, samples, pSampleMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetSampleMaskEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
        [NativeTypeName("const VkSampleMask *")] uint* pSampleMask
    ) => DllImport.CmdSetSampleMaskEXT(commandBuffer, samples, pSampleMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetSampleMaskEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
        [NativeTypeName("const VkSampleMask *")] Ref<uint> pSampleMask
    )
    {
        fixed (uint* __dsl_pSampleMask = pSampleMask)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetSampleMaskEXT(__dsl_commandBuffer, samples, __dsl_pSampleMask);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetSampleMaskEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetSampleMaskEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
        [NativeTypeName("const VkSampleMask *")] Ref<uint> pSampleMask
    ) => DllImport.CmdSetSampleMaskEXT(commandBuffer, samples, pSampleMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetScissor(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstScissor,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, Rect2D*, void>)(
                _slots[253] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[253] = nativeContext.LoadFunction("vkCmdSetScissor", "vulkan")
            )
        )(commandBuffer, firstScissor, scissorCount, pScissors);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissor(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstScissor,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
    ) => DllImport.CmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetScissor(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstScissor,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
    )
    {
        fixed (Rect2D* __dsl_pScissors = pScissors)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetScissor(
                __dsl_commandBuffer,
                firstScissor,
                scissorCount,
                __dsl_pScissors
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissor(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstScissor,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
    ) => DllImport.CmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetScissor(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstScissor,
        [NativeTypeName("const VkRect2D *")] Rect2D pScissors
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetScissor(
                __dsl_commandBuffer,
                firstScissor,
                1,
                (Rect2D*)&pScissors
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissor(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstScissor,
        [NativeTypeName("const VkRect2D *")] Rect2D pScissors
    ) => DllImport.CmdSetScissor(commandBuffer, firstScissor, pScissors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetScissorWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, Rect2D*, void>)(
                _slots[254] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[254] = nativeContext.LoadFunction("vkCmdSetScissorWithCount", "vulkan")
            )
        )(commandBuffer, scissorCount, pScissors);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissorWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
    ) => DllImport.CmdSetScissorWithCount(commandBuffer, scissorCount, pScissors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetScissorWithCount(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
    )
    {
        fixed (Rect2D* __dsl_pScissors = pScissors)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetScissorWithCount(
                __dsl_commandBuffer,
                scissorCount,
                __dsl_pScissors
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissorWithCount(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
    ) => DllImport.CmdSetScissorWithCount(commandBuffer, scissorCount, pScissors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetScissorWithCount(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRect2D *")] Rect2D pScissors
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetScissorWithCount(__dsl_commandBuffer, 1, (Rect2D*)&pScissors);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissorWithCount(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRect2D *")] Rect2D pScissors
    ) => DllImport.CmdSetScissorWithCount(commandBuffer, pScissors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetScissorWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, Rect2D*, void>)(
                _slots[255] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[255] = nativeContext.LoadFunction(
                        "vkCmdSetScissorWithCountEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, scissorCount, pScissors);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissorWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Rect2D* pScissors
    ) => DllImport.CmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetScissorWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
    )
    {
        fixed (Rect2D* __dsl_pScissors = pScissors)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetScissorWithCountEXT(
                __dsl_commandBuffer,
                scissorCount,
                __dsl_pScissors
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissorWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint scissorCount,
        [NativeTypeName("const VkRect2D *")] Ref<Rect2D> pScissors
    ) => DllImport.CmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetScissorWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRect2D *")] Rect2D pScissors
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetScissorWithCountEXT(__dsl_commandBuffer, 1, (Rect2D*)&pScissors);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetScissorWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetScissorWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkRect2D *")] Rect2D pScissors
    ) => DllImport.CmdSetScissorWithCountEXT(commandBuffer, pScissors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetShadingRateImageEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint shadingRateImageEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[256] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[256] = nativeContext.LoadFunction(
                        "vkCmdSetShadingRateImageEnableNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, shadingRateImageEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetShadingRateImageEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetShadingRateImageEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint shadingRateImageEnable
    ) => DllImport.CmdSetShadingRateImageEnableNV(commandBuffer, shadingRateImageEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetShadingRateImageEnableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint shadingRateImageEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetShadingRateImageEnableNV(
                __dsl_commandBuffer,
                shadingRateImageEnable
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetShadingRateImageEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetShadingRateImageEnableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint shadingRateImageEnable
    ) => DllImport.CmdSetShadingRateImageEnableNV(commandBuffer, shadingRateImageEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetStencilCompareMask(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        [NativeTypeName("uint32_t")] uint compareMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, void>)(
                _slots[257] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[257] = nativeContext.LoadFunction(
                        "vkCmdSetStencilCompareMask",
                        "vulkan"
                    )
            )
        )(commandBuffer, faceMask, compareMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilCompareMask")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilCompareMask(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        [NativeTypeName("uint32_t")] uint compareMask
    ) => DllImport.CmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetStencilCompareMask(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        [NativeTypeName("uint32_t")] uint compareMask
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetStencilCompareMask(__dsl_commandBuffer, faceMask, compareMask);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilCompareMask")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilCompareMask(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        [NativeTypeName("uint32_t")] uint compareMask
    ) => DllImport.CmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetStencilOp(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        StencilOp failOp,
        StencilOp passOp,
        StencilOp depthFailOp,
        CompareOp compareOp
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                StencilOp,
                StencilOp,
                StencilOp,
                CompareOp,
                void>)(
                _slots[258] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[258] = nativeContext.LoadFunction("vkCmdSetStencilOp", "vulkan")
            )
        )(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilOp")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilOp(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        StencilOp failOp,
        StencilOp passOp,
        StencilOp depthFailOp,
        CompareOp compareOp
    ) => DllImport.CmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetStencilOp(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        StencilOp failOp,
        StencilOp passOp,
        StencilOp depthFailOp,
        CompareOp compareOp
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetStencilOp(
                __dsl_commandBuffer,
                faceMask,
                failOp,
                passOp,
                depthFailOp,
                compareOp
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilOp")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilOp(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        StencilOp failOp,
        StencilOp passOp,
        StencilOp depthFailOp,
        CompareOp compareOp
    ) => DllImport.CmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetStencilOpEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        StencilOp failOp,
        StencilOp passOp,
        StencilOp depthFailOp,
        CompareOp compareOp
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                StencilOp,
                StencilOp,
                StencilOp,
                CompareOp,
                void>)(
                _slots[259] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[259] = nativeContext.LoadFunction("vkCmdSetStencilOpEXT", "vulkan")
            )
        )(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilOpEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilOpEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        StencilOp failOp,
        StencilOp passOp,
        StencilOp depthFailOp,
        CompareOp compareOp
    ) =>
        DllImport.CmdSetStencilOpEXT(
            commandBuffer,
            faceMask,
            failOp,
            passOp,
            depthFailOp,
            compareOp
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetStencilOpEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        StencilOp failOp,
        StencilOp passOp,
        StencilOp depthFailOp,
        CompareOp compareOp
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetStencilOpEXT(
                __dsl_commandBuffer,
                faceMask,
                failOp,
                passOp,
                depthFailOp,
                compareOp
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilOpEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilOpEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        StencilOp failOp,
        StencilOp passOp,
        StencilOp depthFailOp,
        CompareOp compareOp
    ) =>
        DllImport.CmdSetStencilOpEXT(
            commandBuffer,
            faceMask,
            failOp,
            passOp,
            depthFailOp,
            compareOp
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetStencilReference(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        [NativeTypeName("uint32_t")] uint reference
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, void>)(
                _slots[260] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[260] = nativeContext.LoadFunction("vkCmdSetStencilReference", "vulkan")
            )
        )(commandBuffer, faceMask, reference);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilReference")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilReference(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        [NativeTypeName("uint32_t")] uint reference
    ) => DllImport.CmdSetStencilReference(commandBuffer, faceMask, reference);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetStencilReference(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        [NativeTypeName("uint32_t")] uint reference
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetStencilReference(__dsl_commandBuffer, faceMask, reference);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilReference")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilReference(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        [NativeTypeName("uint32_t")] uint reference
    ) => DllImport.CmdSetStencilReference(commandBuffer, faceMask, reference);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetStencilTestEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint stencilTestEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[261] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[261] = nativeContext.LoadFunction(
                        "vkCmdSetStencilTestEnable",
                        "vulkan"
                    )
            )
        )(commandBuffer, stencilTestEnable);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilTestEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilTestEnable(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint stencilTestEnable
    ) => DllImport.CmdSetStencilTestEnable(commandBuffer, stencilTestEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetStencilTestEnable(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint stencilTestEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetStencilTestEnable(__dsl_commandBuffer, stencilTestEnable);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilTestEnable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilTestEnable(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint stencilTestEnable
    ) => DllImport.CmdSetStencilTestEnable(commandBuffer, stencilTestEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetStencilTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint stencilTestEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[262] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[262] = nativeContext.LoadFunction(
                        "vkCmdSetStencilTestEnableEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, stencilTestEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilTestEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint stencilTestEnable
    ) => DllImport.CmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetStencilTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint stencilTestEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetStencilTestEnableEXT(__dsl_commandBuffer, stencilTestEnable);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilTestEnableEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilTestEnableEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint stencilTestEnable
    ) => DllImport.CmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetStencilWriteMask(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        [NativeTypeName("uint32_t")] uint writeMask
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, void>)(
                _slots[263] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[263] = nativeContext.LoadFunction("vkCmdSetStencilWriteMask", "vulkan")
            )
        )(commandBuffer, faceMask, writeMask);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilWriteMask")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilWriteMask(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        [NativeTypeName("uint32_t")] uint writeMask
    ) => DllImport.CmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetStencilWriteMask(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        [NativeTypeName("uint32_t")] uint writeMask
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetStencilWriteMask(__dsl_commandBuffer, faceMask, writeMask);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetStencilWriteMask")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetStencilWriteMask(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkStencilFaceFlags")] uint faceMask,
        [NativeTypeName("uint32_t")] uint writeMask
    ) => DllImport.CmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetTessellationDomainOriginEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        TessellationDomainOrigin domainOrigin
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, TessellationDomainOrigin, void>)(
                _slots[264] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[264] = nativeContext.LoadFunction(
                        "vkCmdSetTessellationDomainOriginEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, domainOrigin);

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_EXT_extended_dynamic_state3+VK_KHR_maintenance2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetTessellationDomainOriginEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetTessellationDomainOriginEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        TessellationDomainOrigin domainOrigin
    ) => DllImport.CmdSetTessellationDomainOriginEXT(commandBuffer, domainOrigin);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetTessellationDomainOriginEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        TessellationDomainOrigin domainOrigin
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetTessellationDomainOriginEXT(__dsl_commandBuffer, domainOrigin);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_EXT_extended_dynamic_state3+VK_KHR_maintenance2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetTessellationDomainOriginEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetTessellationDomainOriginEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        TessellationDomainOrigin domainOrigin
    ) => DllImport.CmdSetTessellationDomainOriginEXT(commandBuffer, domainOrigin);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetVertexInputEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint vertexBindingDescriptionCount,
        [NativeTypeName("const VkVertexInputBindingDescription2EXT *")]
            VertexInputBindingDescription2EXT* pVertexBindingDescriptions,
        [NativeTypeName("uint32_t")] uint vertexAttributeDescriptionCount,
        [NativeTypeName("const VkVertexInputAttributeDescription2EXT *")]
            VertexInputAttributeDescription2EXT* pVertexAttributeDescriptions
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                VertexInputBindingDescription2EXT*,
                uint,
                VertexInputAttributeDescription2EXT*,
                void>)(
                _slots[265] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[265] = nativeContext.LoadFunction("vkCmdSetVertexInputEXT", "vulkan")
            )
        )(
            commandBuffer,
            vertexBindingDescriptionCount,
            pVertexBindingDescriptions,
            vertexAttributeDescriptionCount,
            pVertexAttributeDescriptions
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_input_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_vertex_input_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_input_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetVertexInputEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetVertexInputEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint vertexBindingDescriptionCount,
        [NativeTypeName("const VkVertexInputBindingDescription2EXT *")]
            VertexInputBindingDescription2EXT* pVertexBindingDescriptions,
        [NativeTypeName("uint32_t")] uint vertexAttributeDescriptionCount,
        [NativeTypeName("const VkVertexInputAttributeDescription2EXT *")]
            VertexInputAttributeDescription2EXT* pVertexAttributeDescriptions
    ) =>
        DllImport.CmdSetVertexInputEXT(
            commandBuffer,
            vertexBindingDescriptionCount,
            pVertexBindingDescriptions,
            vertexAttributeDescriptionCount,
            pVertexAttributeDescriptions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetVertexInputEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint vertexBindingDescriptionCount,
        [NativeTypeName("const VkVertexInputBindingDescription2EXT *")]
            Ref<VertexInputBindingDescription2EXT> pVertexBindingDescriptions,
        [NativeTypeName("uint32_t")] uint vertexAttributeDescriptionCount,
        [NativeTypeName("const VkVertexInputAttributeDescription2EXT *")]
            Ref<VertexInputAttributeDescription2EXT> pVertexAttributeDescriptions
    )
    {
        fixed (
            VertexInputAttributeDescription2EXT* __dsl_pVertexAttributeDescriptions =
                pVertexAttributeDescriptions
        )
        fixed (
            VertexInputBindingDescription2EXT* __dsl_pVertexBindingDescriptions =
                pVertexBindingDescriptions
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetVertexInputEXT(
                __dsl_commandBuffer,
                vertexBindingDescriptionCount,
                __dsl_pVertexBindingDescriptions,
                vertexAttributeDescriptionCount,
                __dsl_pVertexAttributeDescriptions
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_vertex_input_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_vertex_input_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_vertex_input_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetVertexInputEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetVertexInputEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint vertexBindingDescriptionCount,
        [NativeTypeName("const VkVertexInputBindingDescription2EXT *")]
            Ref<VertexInputBindingDescription2EXT> pVertexBindingDescriptions,
        [NativeTypeName("uint32_t")] uint vertexAttributeDescriptionCount,
        [NativeTypeName("const VkVertexInputAttributeDescription2EXT *")]
            Ref<VertexInputAttributeDescription2EXT> pVertexAttributeDescriptions
    ) =>
        DllImport.CmdSetVertexInputEXT(
            commandBuffer,
            vertexBindingDescriptionCount,
            pVertexBindingDescriptions,
            vertexAttributeDescriptionCount,
            pVertexAttributeDescriptions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewport(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Viewport* pViewports
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, Viewport*, void>)(
                _slots[266] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[266] = nativeContext.LoadFunction("vkCmdSetViewport", "vulkan")
            )
        )(commandBuffer, firstViewport, viewportCount, pViewports);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewport(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Viewport* pViewports
    ) => DllImport.CmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewport(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
    )
    {
        fixed (Viewport* __dsl_pViewports = pViewports)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetViewport(
                __dsl_commandBuffer,
                firstViewport,
                viewportCount,
                __dsl_pViewports
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewport(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
    ) => DllImport.CmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewport(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkViewport *")] Viewport pViewports
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetViewport(
                __dsl_commandBuffer,
                firstViewport,
                1,
                (Viewport*)&pViewports
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewport(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkViewport *")] Viewport pViewports
    ) => DllImport.CmdSetViewport(commandBuffer, firstViewport, pViewports);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportShadingRatePaletteNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkShadingRatePaletteNV *")]
            ShadingRatePaletteNV* pShadingRatePalettes
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, ShadingRatePaletteNV*, void>)(
                _slots[267] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[267] = nativeContext.LoadFunction(
                        "vkCmdSetViewportShadingRatePaletteNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportShadingRatePaletteNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkShadingRatePaletteNV *")]
            ShadingRatePaletteNV* pShadingRatePalettes
    ) =>
        DllImport.CmdSetViewportShadingRatePaletteNV(
            commandBuffer,
            firstViewport,
            viewportCount,
            pShadingRatePalettes
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportShadingRatePaletteNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkShadingRatePaletteNV *")]
            Ref<ShadingRatePaletteNV> pShadingRatePalettes
    )
    {
        fixed (ShadingRatePaletteNV* __dsl_pShadingRatePalettes = pShadingRatePalettes)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetViewportShadingRatePaletteNV(
                __dsl_commandBuffer,
                firstViewport,
                viewportCount,
                __dsl_pShadingRatePalettes
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportShadingRatePaletteNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkShadingRatePaletteNV *")]
            Ref<ShadingRatePaletteNV> pShadingRatePalettes
    ) =>
        DllImport.CmdSetViewportShadingRatePaletteNV(
            commandBuffer,
            firstViewport,
            viewportCount,
            pShadingRatePalettes
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportShadingRatePaletteNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkShadingRatePaletteNV *")] ShadingRatePaletteNV pShadingRatePalettes
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetViewportShadingRatePaletteNV(
                __dsl_commandBuffer,
                firstViewport,
                1,
                (ShadingRatePaletteNV*)&pShadingRatePalettes
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_shading_rate_image"],
        ImpliesSets = [
            "VK_NV_shading_rate_image+VK_KHR_get_physical_device_properties2",
            "VK_NV_shading_rate_image+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportShadingRatePaletteNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkShadingRatePaletteNV *")] ShadingRatePaletteNV pShadingRatePalettes
    ) =>
        DllImport.CmdSetViewportShadingRatePaletteNV(
            commandBuffer,
            firstViewport,
            pShadingRatePalettes
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportSwizzleNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportSwizzleNV *")] ViewportSwizzleNV* pViewportSwizzles
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, ViewportSwizzleNV*, void>)(
                _slots[268] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[268] = nativeContext.LoadFunction(
                        "vkCmdSetViewportSwizzleNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstViewport, viewportCount, pViewportSwizzles);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportSwizzleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportSwizzleNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportSwizzleNV *")] ViewportSwizzleNV* pViewportSwizzles
    ) =>
        DllImport.CmdSetViewportSwizzleNV(
            commandBuffer,
            firstViewport,
            viewportCount,
            pViewportSwizzles
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportSwizzleNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportSwizzleNV *")] Ref<ViewportSwizzleNV> pViewportSwizzles
    )
    {
        fixed (ViewportSwizzleNV* __dsl_pViewportSwizzles = pViewportSwizzles)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetViewportSwizzleNV(
                __dsl_commandBuffer,
                firstViewport,
                viewportCount,
                __dsl_pViewportSwizzles
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportSwizzleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportSwizzleNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportSwizzleNV *")] Ref<ViewportSwizzleNV> pViewportSwizzles
    ) =>
        DllImport.CmdSetViewportSwizzleNV(
            commandBuffer,
            firstViewport,
            viewportCount,
            pViewportSwizzles
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportSwizzleNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkViewportSwizzleNV *")] ViewportSwizzleNV pViewportSwizzles
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetViewportSwizzleNV(
                __dsl_commandBuffer,
                firstViewport,
                1,
                (ViewportSwizzleNV*)&pViewportSwizzles
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_viewport_swizzle"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportSwizzleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportSwizzleNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkViewportSwizzleNV *")] ViewportSwizzleNV pViewportSwizzles
    ) => DllImport.CmdSetViewportSwizzleNV(commandBuffer, firstViewport, pViewportSwizzles);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Viewport* pViewports
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, Viewport*, void>)(
                _slots[269] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[269] = nativeContext.LoadFunction(
                        "vkCmdSetViewportWithCount",
                        "vulkan"
                    )
            )
        )(commandBuffer, viewportCount, pViewports);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWithCount(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Viewport* pViewports
    ) => DllImport.CmdSetViewportWithCount(commandBuffer, viewportCount, pViewports);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportWithCount(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
    )
    {
        fixed (Viewport* __dsl_pViewports = pViewports)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetViewportWithCount(
                __dsl_commandBuffer,
                viewportCount,
                __dsl_pViewports
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWithCount(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
    ) => DllImport.CmdSetViewportWithCount(commandBuffer, viewportCount, pViewports);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportWithCount(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkViewport *")] Viewport pViewports
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetViewportWithCount(__dsl_commandBuffer, 1, (Viewport*)&pViewports);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWithCount(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkViewport *")] Viewport pViewports
    ) => DllImport.CmdSetViewportWithCount(commandBuffer, pViewports);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Viewport* pViewports
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, Viewport*, void>)(
                _slots[270] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[270] = nativeContext.LoadFunction(
                        "vkCmdSetViewportWithCountEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, viewportCount, pViewports);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Viewport* pViewports
    ) => DllImport.CmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
    )
    {
        fixed (Viewport* __dsl_pViewports = pViewports)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetViewportWithCountEXT(
                __dsl_commandBuffer,
                viewportCount,
                __dsl_pViewports
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewport *")] Ref<Viewport> pViewports
    ) => DllImport.CmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkViewport *")] Viewport pViewports
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetViewportWithCountEXT(
                __dsl_commandBuffer,
                1,
                (Viewport*)&pViewports
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWithCountEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWithCountEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkViewport *")] Viewport pViewports
    ) => DllImport.CmdSetViewportWithCountEXT(commandBuffer, pViewports);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportWScalingEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint viewportWScalingEnable
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, void>)(
                _slots[271] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[271] = nativeContext.LoadFunction(
                        "vkCmdSetViewportWScalingEnableNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, viewportWScalingEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_clip_space_w_scaling"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWScalingEnableNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBool32")] uint viewportWScalingEnable
    ) => DllImport.CmdSetViewportWScalingEnableNV(commandBuffer, viewportWScalingEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportWScalingEnableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint viewportWScalingEnable
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetViewportWScalingEnableNV(
                __dsl_commandBuffer,
                viewportWScalingEnable
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_extended_dynamic_state3", "VK_NV_clip_space_w_scaling"],
        ImpliesSets = [
            "VK_EXT_extended_dynamic_state3+VK_KHR_get_physical_device_properties2",
            "VK_EXT_extended_dynamic_state3+VK_VERSION_1_1",
        ],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingEnableNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWScalingEnableNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBool32")] uint viewportWScalingEnable
    ) => DllImport.CmdSetViewportWScalingEnableNV(commandBuffer, viewportWScalingEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportWScalingNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportWScalingNV *")] ViewportWScalingNV* pViewportWScalings
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, uint, ViewportWScalingNV*, void>)(
                _slots[272] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[272] = nativeContext.LoadFunction(
                        "vkCmdSetViewportWScalingNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, firstViewport, viewportCount, pViewportWScalings);

    [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWScalingNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportWScalingNV *")] ViewportWScalingNV* pViewportWScalings
    ) =>
        DllImport.CmdSetViewportWScalingNV(
            commandBuffer,
            firstViewport,
            viewportCount,
            pViewportWScalings
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportWScalingNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportWScalingNV *")] Ref<ViewportWScalingNV> pViewportWScalings
    )
    {
        fixed (ViewportWScalingNV* __dsl_pViewportWScalings = pViewportWScalings)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetViewportWScalingNV(
                __dsl_commandBuffer,
                firstViewport,
                viewportCount,
                __dsl_pViewportWScalings
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWScalingNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("uint32_t")] uint viewportCount,
        [NativeTypeName("const VkViewportWScalingNV *")] Ref<ViewportWScalingNV> pViewportWScalings
    ) =>
        DllImport.CmdSetViewportWScalingNV(
            commandBuffer,
            firstViewport,
            viewportCount,
            pViewportWScalings
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSetViewportWScalingNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkViewportWScalingNV *")] ViewportWScalingNV pViewportWScalings
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSetViewportWScalingNV(
                __dsl_commandBuffer,
                firstViewport,
                1,
                (ViewportWScalingNV*)&pViewportWScalings
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_clip_space_w_scaling"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSetViewportWScalingNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSetViewportWScalingNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint firstViewport,
        [NativeTypeName("const VkViewportWScalingNV *")] ViewportWScalingNV pViewportWScalings
    ) => DllImport.CmdSetViewportWScalingNV(commandBuffer, firstViewport, pViewportWScalings);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSubpassShadingHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, void>)(
                _slots[273] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[273] = nativeContext.LoadFunction(
                        "vkCmdSubpassShadingHUAWEI",
                        "vulkan"
                    )
            )
        )(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSubpassShadingHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSubpassShadingHuawei(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) => DllImport.CmdSubpassShadingHuawei(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdSubpassShadingHuawei(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdSubpassShadingHuawei(__dsl_commandBuffer);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdSubpassShadingHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdSubpassShadingHuawei(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    ) => DllImport.CmdSubpassShadingHuawei(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdTraceRaysIndirect2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, ulong, void>)(
                _slots[274] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[274] = nativeContext.LoadFunction(
                        "vkCmdTraceRaysIndirect2KHR",
                        "vulkan"
                    )
            )
        )(commandBuffer, indirectDeviceAddress);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_maintenance1", "VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = ["VK_KHR_acceleration_structure"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirect2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdTraceRaysIndirect2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
    ) => DllImport.CmdTraceRaysIndirect2KHR(commandBuffer, indirectDeviceAddress);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdTraceRaysIndirect2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdTraceRaysIndirect2KHR(__dsl_commandBuffer, indirectDeviceAddress);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_maintenance1", "VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = ["VK_KHR_acceleration_structure"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirect2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdTraceRaysIndirect2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
    ) => DllImport.CmdTraceRaysIndirect2KHR(commandBuffer, indirectDeviceAddress);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdTraceRaysIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
        [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                StridedDeviceAddressRegionKHR*,
                StridedDeviceAddressRegionKHR*,
                StridedDeviceAddressRegionKHR*,
                StridedDeviceAddressRegionKHR*,
                ulong,
                void>)(
                _slots[275] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[275] = nativeContext.LoadFunction(
                        "vkCmdTraceRaysIndirectKHR",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            pRaygenShaderBindingTable,
            pMissShaderBindingTable,
            pHitShaderBindingTable,
            pCallableShaderBindingTable,
            indirectDeviceAddress
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirectKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdTraceRaysIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
        [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
    ) =>
        DllImport.CmdTraceRaysIndirectKHR(
            commandBuffer,
            pRaygenShaderBindingTable,
            pMissShaderBindingTable,
            pHitShaderBindingTable,
            pCallableShaderBindingTable,
            indirectDeviceAddress
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdTraceRaysIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pCallableShaderBindingTable,
        [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
    )
    {
        fixed (
            StridedDeviceAddressRegionKHR* __dsl_pCallableShaderBindingTable =
                pCallableShaderBindingTable
        )
        fixed (StridedDeviceAddressRegionKHR* __dsl_pHitShaderBindingTable = pHitShaderBindingTable)
        fixed (
            StridedDeviceAddressRegionKHR* __dsl_pMissShaderBindingTable = pMissShaderBindingTable
        )
        fixed (
            StridedDeviceAddressRegionKHR* __dsl_pRaygenShaderBindingTable =
                pRaygenShaderBindingTable
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdTraceRaysIndirectKHR(
                __dsl_commandBuffer,
                __dsl_pRaygenShaderBindingTable,
                __dsl_pMissShaderBindingTable,
                __dsl_pHitShaderBindingTable,
                __dsl_pCallableShaderBindingTable,
                indirectDeviceAddress
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysIndirectKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdTraceRaysIndirectKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pCallableShaderBindingTable,
        [NativeTypeName("VkDeviceAddress")] ulong indirectDeviceAddress
    ) =>
        DllImport.CmdTraceRaysIndirectKHR(
            commandBuffer,
            pRaygenShaderBindingTable,
            pMissShaderBindingTable,
            pHitShaderBindingTable,
            pCallableShaderBindingTable,
            indirectDeviceAddress
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdTraceRaysKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
        [NativeTypeName("uint32_t")] uint width,
        [NativeTypeName("uint32_t")] uint height,
        [NativeTypeName("uint32_t")] uint depth
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                StridedDeviceAddressRegionKHR*,
                StridedDeviceAddressRegionKHR*,
                StridedDeviceAddressRegionKHR*,
                StridedDeviceAddressRegionKHR*,
                uint,
                uint,
                uint,
                void>)(
                _slots[276] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[276] = nativeContext.LoadFunction("vkCmdTraceRaysKHR", "vulkan")
            )
        )(
            commandBuffer,
            pRaygenShaderBindingTable,
            pMissShaderBindingTable,
            pHitShaderBindingTable,
            pCallableShaderBindingTable,
            width,
            height,
            depth
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdTraceRaysKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            StridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
        [NativeTypeName("uint32_t")] uint width,
        [NativeTypeName("uint32_t")] uint height,
        [NativeTypeName("uint32_t")] uint depth
    ) =>
        DllImport.CmdTraceRaysKHR(
            commandBuffer,
            pRaygenShaderBindingTable,
            pMissShaderBindingTable,
            pHitShaderBindingTable,
            pCallableShaderBindingTable,
            width,
            height,
            depth
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdTraceRaysKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pCallableShaderBindingTable,
        [NativeTypeName("uint32_t")] uint width,
        [NativeTypeName("uint32_t")] uint height,
        [NativeTypeName("uint32_t")] uint depth
    )
    {
        fixed (
            StridedDeviceAddressRegionKHR* __dsl_pCallableShaderBindingTable =
                pCallableShaderBindingTable
        )
        fixed (StridedDeviceAddressRegionKHR* __dsl_pHitShaderBindingTable = pHitShaderBindingTable)
        fixed (
            StridedDeviceAddressRegionKHR* __dsl_pMissShaderBindingTable = pMissShaderBindingTable
        )
        fixed (
            StridedDeviceAddressRegionKHR* __dsl_pRaygenShaderBindingTable =
                pRaygenShaderBindingTable
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdTraceRaysKHR(
                __dsl_commandBuffer,
                __dsl_pRaygenShaderBindingTable,
                __dsl_pMissShaderBindingTable,
                __dsl_pHitShaderBindingTable,
                __dsl_pCallableShaderBindingTable,
                width,
                height,
                depth
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdTraceRaysKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pRaygenShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pMissShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pHitShaderBindingTable,
        [NativeTypeName("const VkStridedDeviceAddressRegionKHR *")]
            Ref<StridedDeviceAddressRegionKHR> pCallableShaderBindingTable,
        [NativeTypeName("uint32_t")] uint width,
        [NativeTypeName("uint32_t")] uint height,
        [NativeTypeName("uint32_t")] uint depth
    ) =>
        DllImport.CmdTraceRaysKHR(
            commandBuffer,
            pRaygenShaderBindingTable,
            pMissShaderBindingTable,
            pHitShaderBindingTable,
            pCallableShaderBindingTable,
            width,
            height,
            depth
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdTraceRaysNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* raygenShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong raygenShaderBindingOffset,
        [NativeTypeName("VkBuffer")] BufferHandle* missShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong missShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong missShaderBindingStride,
        [NativeTypeName("VkBuffer")] BufferHandle* hitShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingStride,
        [NativeTypeName("VkBuffer")] BufferHandle* callableShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingStride,
        [NativeTypeName("uint32_t")] uint width,
        [NativeTypeName("uint32_t")] uint height,
        [NativeTypeName("uint32_t")] uint depth
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                BufferHandle*,
                ulong,
                BufferHandle*,
                ulong,
                ulong,
                BufferHandle*,
                ulong,
                ulong,
                BufferHandle*,
                ulong,
                ulong,
                uint,
                uint,
                uint,
                void>)(
                _slots[277] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[277] = nativeContext.LoadFunction("vkCmdTraceRaysNV", "vulkan")
            )
        )(
            commandBuffer,
            raygenShaderBindingTableBuffer,
            raygenShaderBindingOffset,
            missShaderBindingTableBuffer,
            missShaderBindingOffset,
            missShaderBindingStride,
            hitShaderBindingTableBuffer,
            hitShaderBindingOffset,
            hitShaderBindingStride,
            callableShaderBindingTableBuffer,
            callableShaderBindingOffset,
            callableShaderBindingStride,
            width,
            height,
            depth
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdTraceRaysNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* raygenShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong raygenShaderBindingOffset,
        [NativeTypeName("VkBuffer")] BufferHandle* missShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong missShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong missShaderBindingStride,
        [NativeTypeName("VkBuffer")] BufferHandle* hitShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingStride,
        [NativeTypeName("VkBuffer")] BufferHandle* callableShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingStride,
        [NativeTypeName("uint32_t")] uint width,
        [NativeTypeName("uint32_t")] uint height,
        [NativeTypeName("uint32_t")] uint depth
    ) =>
        DllImport.CmdTraceRaysNV(
            commandBuffer,
            raygenShaderBindingTableBuffer,
            raygenShaderBindingOffset,
            missShaderBindingTableBuffer,
            missShaderBindingOffset,
            missShaderBindingStride,
            hitShaderBindingTableBuffer,
            hitShaderBindingOffset,
            hitShaderBindingStride,
            callableShaderBindingTableBuffer,
            callableShaderBindingOffset,
            callableShaderBindingStride,
            width,
            height,
            depth
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdTraceRaysNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> raygenShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong raygenShaderBindingOffset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> missShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong missShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong missShaderBindingStride,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> hitShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingStride,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> callableShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingStride,
        [NativeTypeName("uint32_t")] uint width,
        [NativeTypeName("uint32_t")] uint height,
        [NativeTypeName("uint32_t")] uint depth
    )
    {
        fixed (
            BufferHandle* __dsl_callableShaderBindingTableBuffer = callableShaderBindingTableBuffer
        )
        fixed (BufferHandle* __dsl_hitShaderBindingTableBuffer = hitShaderBindingTableBuffer)
        fixed (BufferHandle* __dsl_missShaderBindingTableBuffer = missShaderBindingTableBuffer)
        fixed (BufferHandle* __dsl_raygenShaderBindingTableBuffer = raygenShaderBindingTableBuffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdTraceRaysNV(
                __dsl_commandBuffer,
                __dsl_raygenShaderBindingTableBuffer,
                raygenShaderBindingOffset,
                __dsl_missShaderBindingTableBuffer,
                missShaderBindingOffset,
                missShaderBindingStride,
                __dsl_hitShaderBindingTableBuffer,
                hitShaderBindingOffset,
                hitShaderBindingStride,
                __dsl_callableShaderBindingTableBuffer,
                callableShaderBindingOffset,
                callableShaderBindingStride,
                width,
                height,
                depth
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdTraceRaysNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdTraceRaysNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> raygenShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong raygenShaderBindingOffset,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> missShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong missShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong missShaderBindingStride,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> hitShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong hitShaderBindingStride,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> callableShaderBindingTableBuffer,
        [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingOffset,
        [NativeTypeName("VkDeviceSize")] ulong callableShaderBindingStride,
        [NativeTypeName("uint32_t")] uint width,
        [NativeTypeName("uint32_t")] uint height,
        [NativeTypeName("uint32_t")] uint depth
    ) =>
        DllImport.CmdTraceRaysNV(
            commandBuffer,
            raygenShaderBindingTableBuffer,
            raygenShaderBindingOffset,
            missShaderBindingTableBuffer,
            missShaderBindingOffset,
            missShaderBindingStride,
            hitShaderBindingTableBuffer,
            hitShaderBindingOffset,
            hitShaderBindingStride,
            callableShaderBindingTableBuffer,
            callableShaderBindingOffset,
            callableShaderBindingStride,
            width,
            height,
            depth
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdUpdateBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong dataSize,
        [NativeTypeName("const void *")] void* pData
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, BufferHandle*, ulong, ulong, void*, void>)(
                _slots[278] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[278] = nativeContext.LoadFunction("vkCmdUpdateBuffer", "vulkan")
            )
        )(commandBuffer, dstBuffer, dstOffset, dataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdUpdateBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdUpdateBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong dataSize,
        [NativeTypeName("const void *")] void* pData
    ) => DllImport.CmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdUpdateBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong dataSize,
        [NativeTypeName("const void *")] Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdUpdateBuffer(
                __dsl_commandBuffer,
                __dsl_dstBuffer,
                dstOffset,
                dataSize,
                __dsl_pData
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdUpdateBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdUpdateBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("VkDeviceSize")] ulong dataSize,
        [NativeTypeName("const void *")] Ref pData
    ) => DllImport.CmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdUpdatePipelineIndirectBufferNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, PipelineBindPoint, PipelineHandle*, void>)(
                _slots[279] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[279] = nativeContext.LoadFunction(
                        "vkCmdUpdatePipelineIndirectBufferNV",
                        "vulkan"
                    )
            )
        )(commandBuffer, pipelineBindPoint, pipeline);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdUpdatePipelineIndirectBufferNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdUpdatePipelineIndirectBufferNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline
    ) => DllImport.CmdUpdatePipelineIndirectBufferNV(commandBuffer, pipelineBindPoint, pipeline);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdUpdatePipelineIndirectBufferNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline
    )
    {
        fixed (PipelineHandle* __dsl_pipeline = pipeline)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdUpdatePipelineIndirectBufferNV(
                __dsl_commandBuffer,
                pipelineBindPoint,
                __dsl_pipeline
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdUpdatePipelineIndirectBufferNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdUpdatePipelineIndirectBufferNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        PipelineBindPoint pipelineBindPoint,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline
    ) => DllImport.CmdUpdatePipelineIndirectBufferNV(commandBuffer, pipelineBindPoint, pipeline);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWaitEvents(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] EventHandle** pEvents,
        [NativeTypeName("VkPipelineStageFlags")] uint srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] uint dstStageMask,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] MemoryBarrier* pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            BufferMemoryBarrier* pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")] ImageMemoryBarrier* pImageMemoryBarriers
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                EventHandle**,
                uint,
                uint,
                uint,
                MemoryBarrier*,
                uint,
                BufferMemoryBarrier*,
                uint,
                ImageMemoryBarrier*,
                void>)(
                _slots[280] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[280] = nativeContext.LoadFunction("vkCmdWaitEvents", "vulkan")
            )
        )(
            commandBuffer,
            eventCount,
            pEvents,
            srcStageMask,
            dstStageMask,
            memoryBarrierCount,
            pMemoryBarriers,
            bufferMemoryBarrierCount,
            pBufferMemoryBarriers,
            imageMemoryBarrierCount,
            pImageMemoryBarriers
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWaitEvents(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] EventHandle** pEvents,
        [NativeTypeName("VkPipelineStageFlags")] uint srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] uint dstStageMask,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] MemoryBarrier* pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            BufferMemoryBarrier* pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")] ImageMemoryBarrier* pImageMemoryBarriers
    ) =>
        DllImport.CmdWaitEvents(
            commandBuffer,
            eventCount,
            pEvents,
            srcStageMask,
            dstStageMask,
            memoryBarrierCount,
            pMemoryBarriers,
            bufferMemoryBarrierCount,
            pBufferMemoryBarriers,
            imageMemoryBarrierCount,
            pImageMemoryBarriers
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWaitEvents(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] Ref2D<EventHandle> pEvents,
        [NativeTypeName("VkPipelineStageFlags")] uint srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] uint dstStageMask,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] Ref<MemoryBarrier> pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            Ref<BufferMemoryBarrier> pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")]
            Ref<ImageMemoryBarrier> pImageMemoryBarriers
    )
    {
        fixed (ImageMemoryBarrier* __dsl_pImageMemoryBarriers = pImageMemoryBarriers)
        fixed (BufferMemoryBarrier* __dsl_pBufferMemoryBarriers = pBufferMemoryBarriers)
        fixed (MemoryBarrier* __dsl_pMemoryBarriers = pMemoryBarriers)
        fixed (EventHandle** __dsl_pEvents = pEvents)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdWaitEvents(
                __dsl_commandBuffer,
                eventCount,
                __dsl_pEvents,
                srcStageMask,
                dstStageMask,
                memoryBarrierCount,
                __dsl_pMemoryBarriers,
                bufferMemoryBarrierCount,
                __dsl_pBufferMemoryBarriers,
                imageMemoryBarrierCount,
                __dsl_pImageMemoryBarriers
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWaitEvents(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] Ref2D<EventHandle> pEvents,
        [NativeTypeName("VkPipelineStageFlags")] uint srcStageMask,
        [NativeTypeName("VkPipelineStageFlags")] uint dstStageMask,
        [NativeTypeName("uint32_t")] uint memoryBarrierCount,
        [NativeTypeName("const VkMemoryBarrier *")] Ref<MemoryBarrier> pMemoryBarriers,
        [NativeTypeName("uint32_t")] uint bufferMemoryBarrierCount,
        [NativeTypeName("const VkBufferMemoryBarrier *")]
            Ref<BufferMemoryBarrier> pBufferMemoryBarriers,
        [NativeTypeName("uint32_t")] uint imageMemoryBarrierCount,
        [NativeTypeName("const VkImageMemoryBarrier *")]
            Ref<ImageMemoryBarrier> pImageMemoryBarriers
    ) =>
        DllImport.CmdWaitEvents(
            commandBuffer,
            eventCount,
            pEvents,
            srcStageMask,
            dstStageMask,
            memoryBarrierCount,
            pMemoryBarriers,
            bufferMemoryBarrierCount,
            pBufferMemoryBarriers,
            imageMemoryBarrierCount,
            pImageMemoryBarriers
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWaitEvents2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] EventHandle** pEvents,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfos
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, EventHandle**, DependencyInfo*, void>)(
                _slots[281] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[281] = nativeContext.LoadFunction("vkCmdWaitEvents2", "vulkan")
            )
        )(commandBuffer, eventCount, pEvents, pDependencyInfos);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWaitEvents2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] EventHandle** pEvents,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfos
    ) => DllImport.CmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWaitEvents2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] Ref2D<EventHandle> pEvents,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfos
    )
    {
        fixed (DependencyInfo* __dsl_pDependencyInfos = pDependencyInfos)
        fixed (EventHandle** __dsl_pEvents = pEvents)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdWaitEvents2(
                __dsl_commandBuffer,
                eventCount,
                __dsl_pEvents,
                __dsl_pDependencyInfos
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWaitEvents2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] Ref2D<EventHandle> pEvents,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfos
    ) => DllImport.CmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWaitEvents2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] EventHandle** pEvents,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfos
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, EventHandle**, DependencyInfo*, void>)(
                _slots[282] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[282] = nativeContext.LoadFunction("vkCmdWaitEvents2KHR", "vulkan")
            )
        )(commandBuffer, eventCount, pEvents, pDependencyInfos);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWaitEvents2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] EventHandle** pEvents,
        [NativeTypeName("const VkDependencyInfo *")] DependencyInfo* pDependencyInfos
    ) => DllImport.CmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWaitEvents2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] Ref2D<EventHandle> pEvents,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfos
    )
    {
        fixed (DependencyInfo* __dsl_pDependencyInfos = pDependencyInfos)
        fixed (EventHandle** __dsl_pEvents = pEvents)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdWaitEvents2KHR(
                __dsl_commandBuffer,
                eventCount,
                __dsl_pEvents,
                __dsl_pDependencyInfos
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWaitEvents2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWaitEvents2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint eventCount,
        [NativeTypeName("const VkEvent *")] Ref2D<EventHandle> pEvents,
        [NativeTypeName("const VkDependencyInfo *")] Ref<DependencyInfo> pDependencyInfos
    ) => DllImport.CmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            AccelerationStructureKHRHandle** pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                AccelerationStructureKHRHandle**,
                QueryType,
                QueryPoolHandle*,
                uint,
                void>)(
                _slots[283] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[283] = nativeContext.LoadFunction(
                        "vkCmdWriteAccelerationStructuresPropertiesKHR",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            AccelerationStructureKHRHandle** pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        DllImport.CmdWriteAccelerationStructuresPropertiesKHR(
            commandBuffer,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            Ref2D<AccelerationStructureKHRHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (
            AccelerationStructureKHRHandle** __dsl_pAccelerationStructures = pAccelerationStructures
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdWriteAccelerationStructuresPropertiesKHR(
                __dsl_commandBuffer,
                accelerationStructureCount,
                __dsl_pAccelerationStructures,
                queryType,
                __dsl_queryPool,
                firstQuery
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            Ref2D<AccelerationStructureKHRHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        DllImport.CmdWriteAccelerationStructuresPropertiesKHR(
            commandBuffer,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            Ref<AccelerationStructureKHRHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (
            AccelerationStructureKHRHandle* __dsl_pAccelerationStructures = pAccelerationStructures
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdWriteAccelerationStructuresPropertiesKHR(
                __dsl_commandBuffer,
                1,
                (AccelerationStructureKHRHandle**)&__dsl_pAccelerationStructures,
                queryType,
                __dsl_queryPool,
                firstQuery
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            Ref<AccelerationStructureKHRHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        DllImport.CmdWriteAccelerationStructuresPropertiesKHR(
            commandBuffer,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteAccelerationStructuresPropertiesNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureNV *")]
            AccelerationStructureNVHandle** pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                AccelerationStructureNVHandle**,
                QueryType,
                QueryPoolHandle*,
                uint,
                void>)(
                _slots[284] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[284] = nativeContext.LoadFunction(
                        "vkCmdWriteAccelerationStructuresPropertiesNV",
                        "vulkan"
                    )
            )
        )(
            commandBuffer,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteAccelerationStructuresPropertiesNV(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureNV *")]
            AccelerationStructureNVHandle** pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        DllImport.CmdWriteAccelerationStructuresPropertiesNV(
            commandBuffer,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteAccelerationStructuresPropertiesNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureNV *")]
            Ref2D<AccelerationStructureNVHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (
            AccelerationStructureNVHandle** __dsl_pAccelerationStructures = pAccelerationStructures
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdWriteAccelerationStructuresPropertiesNV(
                __dsl_commandBuffer,
                accelerationStructureCount,
                __dsl_pAccelerationStructures,
                queryType,
                __dsl_queryPool,
                firstQuery
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteAccelerationStructuresPropertiesNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureNV *")]
            Ref2D<AccelerationStructureNVHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        DllImport.CmdWriteAccelerationStructuresPropertiesNV(
            commandBuffer,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteAccelerationStructuresPropertiesNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkAccelerationStructureNV *")]
            Ref<AccelerationStructureNVHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (
            AccelerationStructureNVHandle* __dsl_pAccelerationStructures = pAccelerationStructures
        )
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdWriteAccelerationStructuresPropertiesNV(
                __dsl_commandBuffer,
                1,
                (AccelerationStructureNVHandle**)&__dsl_pAccelerationStructures,
                queryType,
                __dsl_queryPool,
                firstQuery
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteAccelerationStructuresPropertiesNV(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkAccelerationStructureNV *")]
            Ref<AccelerationStructureNVHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        DllImport.CmdWriteAccelerationStructuresPropertiesNV(
            commandBuffer,
            pAccelerationStructures,
            queryType,
            queryPool,
            firstQuery
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteBufferMarker2AMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
        [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("uint32_t")] uint marker
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, ulong, BufferHandle*, ulong, uint, void>)(
                _slots[285] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[285] = nativeContext.LoadFunction(
                        "vkCmdWriteBufferMarker2AMD",
                        "vulkan"
                    )
            )
        )(commandBuffer, stage, dstBuffer, dstOffset, marker);

    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_buffer_marker+VK_KHR_synchronization2", "VK_AMD_buffer_marker+VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteBufferMarker2AMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteBufferMarker2AMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
        [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("uint32_t")] uint marker
    ) => DllImport.CmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteBufferMarker2AMD(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("uint32_t")] uint marker
    )
    {
        fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdWriteBufferMarker2AMD(
                __dsl_commandBuffer,
                stage,
                __dsl_dstBuffer,
                dstOffset,
                marker
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_buffer_marker+VK_KHR_synchronization2", "VK_AMD_buffer_marker+VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteBufferMarker2AMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteBufferMarker2AMD(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("uint32_t")] uint marker
    ) => DllImport.CmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteBufferMarkerAMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkPipelineStageFlagBits")] PipelineStageFlags pipelineStage,
        [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("uint32_t")] uint marker
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                PipelineStageFlags,
                BufferHandle*,
                ulong,
                uint,
                void>)(
                _slots[286] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[286] = nativeContext.LoadFunction(
                        "vkCmdWriteBufferMarkerAMD",
                        "vulkan"
                    )
            )
        )(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);

    [SupportedApiProfile("vulkan", ["VK_AMD_buffer_marker"])]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteBufferMarkerAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteBufferMarkerAMD(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkPipelineStageFlagBits")] PipelineStageFlags pipelineStage,
        [NativeTypeName("VkBuffer")] BufferHandle* dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("uint32_t")] uint marker
    ) =>
        DllImport.CmdWriteBufferMarkerAMD(
            commandBuffer,
            pipelineStage,
            dstBuffer,
            dstOffset,
            marker
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteBufferMarkerAMD(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkPipelineStageFlagBits")] PipelineStageFlags pipelineStage,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("uint32_t")] uint marker
    )
    {
        fixed (BufferHandle* __dsl_dstBuffer = dstBuffer)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdWriteBufferMarkerAMD(
                __dsl_commandBuffer,
                pipelineStage,
                __dsl_dstBuffer,
                dstOffset,
                marker
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_AMD_buffer_marker"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteBufferMarkerAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteBufferMarkerAMD(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkPipelineStageFlagBits")] PipelineStageFlags pipelineStage,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> dstBuffer,
        [NativeTypeName("VkDeviceSize")] ulong dstOffset,
        [NativeTypeName("uint32_t")] uint marker
    ) =>
        DllImport.CmdWriteBufferMarkerAMD(
            commandBuffer,
            pipelineStage,
            dstBuffer,
            dstOffset,
            marker
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteMicromapsPropertiesEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle** pMicromaps,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                uint,
                MicromapEXTHandle**,
                QueryType,
                QueryPoolHandle*,
                uint,
                void>)(
                _slots[287] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[287] = nativeContext.LoadFunction(
                        "vkCmdWriteMicromapsPropertiesEXT",
                        "vulkan"
                    )
            )
        )(commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteMicromapsPropertiesEXT(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle** pMicromaps,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        DllImport.CmdWriteMicromapsPropertiesEXT(
            commandBuffer,
            micromapCount,
            pMicromaps,
            queryType,
            queryPool,
            firstQuery
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteMicromapsPropertiesEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] Ref2D<MicromapEXTHandle> pMicromaps,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (MicromapEXTHandle** __dsl_pMicromaps = pMicromaps)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdWriteMicromapsPropertiesEXT(
                __dsl_commandBuffer,
                micromapCount,
                __dsl_pMicromaps,
                queryType,
                __dsl_queryPool,
                firstQuery
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteMicromapsPropertiesEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] Ref2D<MicromapEXTHandle> pMicromaps,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        DllImport.CmdWriteMicromapsPropertiesEXT(
            commandBuffer,
            micromapCount,
            pMicromaps,
            queryType,
            queryPool,
            firstQuery
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteMicromapsPropertiesEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkMicromapEXT *")] Ref<MicromapEXTHandle> pMicromaps,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (MicromapEXTHandle* __dsl_pMicromaps = pMicromaps)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdWriteMicromapsPropertiesEXT(
                __dsl_commandBuffer,
                1,
                (MicromapEXTHandle**)&__dsl_pMicromaps,
                queryType,
                __dsl_queryPool,
                firstQuery
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteMicromapsPropertiesEXT(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("const VkMicromapEXT *")] Ref<MicromapEXTHandle> pMicromaps,
        QueryType queryType,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery
    ) =>
        DllImport.CmdWriteMicromapsPropertiesEXT(
            commandBuffer,
            pMicromaps,
            queryType,
            queryPool,
            firstQuery
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteTimestamp(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkPipelineStageFlagBits")] PipelineStageFlags pipelineStage,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) =>
        (
            (delegate* unmanaged<
                CommandBufferHandle*,
                PipelineStageFlags,
                QueryPoolHandle*,
                uint,
                void>)(
                _slots[288] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[288] = nativeContext.LoadFunction("vkCmdWriteTimestamp", "vulkan")
            )
        )(commandBuffer, pipelineStage, queryPool, query);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteTimestamp(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkPipelineStageFlagBits")] PipelineStageFlags pipelineStage,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) => DllImport.CmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteTimestamp(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkPipelineStageFlagBits")] PipelineStageFlags pipelineStage,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint query
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdWriteTimestamp(
                __dsl_commandBuffer,
                pipelineStage,
                __dsl_queryPool,
                query
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteTimestamp(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkPipelineStageFlagBits")] PipelineStageFlags pipelineStage,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) => DllImport.CmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteTimestamp2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, ulong, QueryPoolHandle*, uint, void>)(
                _slots[289] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[289] = nativeContext.LoadFunction("vkCmdWriteTimestamp2", "vulkan")
            )
        )(commandBuffer, stage, queryPool, query);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteTimestamp2(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) => DllImport.CmdWriteTimestamp2(commandBuffer, stage, queryPool, query);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteTimestamp2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint query
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdWriteTimestamp2(__dsl_commandBuffer, stage, __dsl_queryPool, query);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteTimestamp2(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) => DllImport.CmdWriteTimestamp2(commandBuffer, stage, queryPool, query);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteTimestamp2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, ulong, QueryPoolHandle*, uint, void>)(
                _slots[290] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[290] = nativeContext.LoadFunction("vkCmdWriteTimestamp2KHR", "vulkan")
            )
        )(commandBuffer, stage, queryPool, query);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteTimestamp2KHR(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) => DllImport.CmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.CmdWriteTimestamp2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint query
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            ((IVulkan)this).CmdWriteTimestamp2KHR(
                __dsl_commandBuffer,
                stage,
                __dsl_queryPool,
                query
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCmdWriteTimestamp2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CmdWriteTimestamp2KHR(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkPipelineStageFlags2")] ulong stage,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint query
    ) => DllImport.CmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CompileDeferredNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("uint32_t")] uint shader
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, PipelineHandle*, uint, Result>)(
                _slots[291] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[291] = nativeContext.LoadFunction("vkCompileDeferredNV", "vulkan")
            )
        )(device, pipeline, shader);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCompileDeferredNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CompileDeferredNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("uint32_t")] uint shader
    ) => DllImport.CompileDeferredNV(device, pipeline, shader);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CompileDeferredNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("uint32_t")] uint shader
    )
    {
        fixed (PipelineHandle* __dsl_pipeline = pipeline)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).CompileDeferredNV(__dsl_device, __dsl_pipeline, shader);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCompileDeferredNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CompileDeferredNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("uint32_t")] uint shader
    ) => DllImport.CompileDeferredNV(device, pipeline, shader);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            ConvertCooperativeVectorMatrixInfoNV* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ConvertCooperativeVectorMatrixInfoNV*, Result>)(
                _slots[292] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[292] = nativeContext.LoadFunction(
                        "vkConvertCooperativeVectorMatrixNV",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [NativeFunction("vulkan", EntryPoint = "vkConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            ConvertCooperativeVectorMatrixInfoNV* pInfo
    ) => DllImport.ConvertCooperativeVectorMatrixNV(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            Ref<ConvertCooperativeVectorMatrixInfoNV> pInfo
    )
    {
        fixed (ConvertCooperativeVectorMatrixInfoNV* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).ConvertCooperativeVectorMatrixNV(__dsl_device, __dsl_pInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkConvertCooperativeVectorMatrixNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ConvertCooperativeVectorMatrixNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkConvertCooperativeVectorMatrixInfoNV *")]
            Ref<ConvertCooperativeVectorMatrixInfoNV> pInfo
    ) => DllImport.ConvertCooperativeVectorMatrixNV(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            CopyAccelerationStructureInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeferredOperationKHRHandle*,
                CopyAccelerationStructureInfoKHR*,
                Result>)(
                _slots[293] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[293] = nativeContext.LoadFunction(
                        "vkCopyAccelerationStructureKHR",
                        "vulkan"
                    )
            )
        )(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            CopyAccelerationStructureInfoKHR* pInfo
    ) => DllImport.CopyAccelerationStructureKHR(device, deferredOperation, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            Ref<CopyAccelerationStructureInfoKHR> pInfo
    )
    {
        fixed (CopyAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
        fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CopyAccelerationStructureKHR(
                    __dsl_device,
                    __dsl_deferredOperation,
                    __dsl_pInfo
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureInfoKHR *")]
            Ref<CopyAccelerationStructureInfoKHR> pInfo
    ) => DllImport.CopyAccelerationStructureKHR(device, deferredOperation, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            CopyAccelerationStructureToMemoryInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeferredOperationKHRHandle*,
                CopyAccelerationStructureToMemoryInfoKHR*,
                Result>)(
                _slots[294] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[294] = nativeContext.LoadFunction(
                        "vkCopyAccelerationStructureToMemoryKHR",
                        "vulkan"
                    )
            )
        )(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureToMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            CopyAccelerationStructureToMemoryInfoKHR* pInfo
    ) => DllImport.CopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            Ref<CopyAccelerationStructureToMemoryInfoKHR> pInfo
    )
    {
        fixed (CopyAccelerationStructureToMemoryInfoKHR* __dsl_pInfo = pInfo)
        fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CopyAccelerationStructureToMemoryKHR(
                    __dsl_device,
                    __dsl_deferredOperation,
                    __dsl_pInfo
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyAccelerationStructureToMemoryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyAccelerationStructureToMemoryKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("const VkCopyAccelerationStructureToMemoryInfoKHR *")]
            Ref<CopyAccelerationStructureToMemoryInfoKHR> pInfo
    ) => DllImport.CopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyImageToImage(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            CopyImageToImageInfo* pCopyImageToImageInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CopyImageToImageInfo*, Result>)(
                _slots[295] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[295] = nativeContext.LoadFunction("vkCopyImageToImage", "vulkan")
            )
        )(device, pCopyImageToImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToImage(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            CopyImageToImageInfo* pCopyImageToImageInfo
    ) => DllImport.CopyImageToImage(device, pCopyImageToImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyImageToImage(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            Ref<CopyImageToImageInfo> pCopyImageToImageInfo
    )
    {
        fixed (CopyImageToImageInfo* __dsl_pCopyImageToImageInfo = pCopyImageToImageInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CopyImageToImage(__dsl_device, __dsl_pCopyImageToImageInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToImage(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            Ref<CopyImageToImageInfo> pCopyImageToImageInfo
    ) => DllImport.CopyImageToImage(device, pCopyImageToImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyImageToImageEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            CopyImageToImageInfo* pCopyImageToImageInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CopyImageToImageInfo*, Result>)(
                _slots[296] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[296] = nativeContext.LoadFunction("vkCopyImageToImageEXT", "vulkan")
            )
        )(device, pCopyImageToImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToImageEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            CopyImageToImageInfo* pCopyImageToImageInfo
    ) => DllImport.CopyImageToImageEXT(device, pCopyImageToImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyImageToImageEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            Ref<CopyImageToImageInfo> pCopyImageToImageInfo
    )
    {
        fixed (CopyImageToImageInfo* __dsl_pCopyImageToImageInfo = pCopyImageToImageInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CopyImageToImageEXT(__dsl_device, __dsl_pCopyImageToImageInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToImageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToImageEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCopyImageToImageInfo *")]
            Ref<CopyImageToImageInfo> pCopyImageToImageInfo
    ) => DllImport.CopyImageToImageEXT(device, pCopyImageToImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyImageToMemory(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            CopyImageToMemoryInfo* pCopyImageToMemoryInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CopyImageToMemoryInfo*, Result>)(
                _slots[297] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[297] = nativeContext.LoadFunction("vkCopyImageToMemory", "vulkan")
            )
        )(device, pCopyImageToMemoryInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToMemory(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            CopyImageToMemoryInfo* pCopyImageToMemoryInfo
    ) => DllImport.CopyImageToMemory(device, pCopyImageToMemoryInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyImageToMemory(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            Ref<CopyImageToMemoryInfo> pCopyImageToMemoryInfo
    )
    {
        fixed (CopyImageToMemoryInfo* __dsl_pCopyImageToMemoryInfo = pCopyImageToMemoryInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CopyImageToMemory(__dsl_device, __dsl_pCopyImageToMemoryInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToMemory(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            Ref<CopyImageToMemoryInfo> pCopyImageToMemoryInfo
    ) => DllImport.CopyImageToMemory(device, pCopyImageToMemoryInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyImageToMemoryEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            CopyImageToMemoryInfo* pCopyImageToMemoryInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CopyImageToMemoryInfo*, Result>)(
                _slots[298] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[298] = nativeContext.LoadFunction("vkCopyImageToMemoryEXT", "vulkan")
            )
        )(device, pCopyImageToMemoryInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToMemoryEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            CopyImageToMemoryInfo* pCopyImageToMemoryInfo
    ) => DllImport.CopyImageToMemoryEXT(device, pCopyImageToMemoryInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyImageToMemoryEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            Ref<CopyImageToMemoryInfo> pCopyImageToMemoryInfo
    )
    {
        fixed (CopyImageToMemoryInfo* __dsl_pCopyImageToMemoryInfo = pCopyImageToMemoryInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CopyImageToMemoryEXT(__dsl_device, __dsl_pCopyImageToMemoryInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyImageToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyImageToMemoryEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCopyImageToMemoryInfo *")]
            Ref<CopyImageToMemoryInfo> pCopyImageToMemoryInfo
    ) => DllImport.CopyImageToMemoryEXT(device, pCopyImageToMemoryInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            CopyMemoryToAccelerationStructureInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeferredOperationKHRHandle*,
                CopyMemoryToAccelerationStructureInfoKHR*,
                Result>)(
                _slots[299] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[299] = nativeContext.LoadFunction(
                        "vkCopyMemoryToAccelerationStructureKHR",
                        "vulkan"
                    )
            )
        )(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            CopyMemoryToAccelerationStructureInfoKHR* pInfo
    ) => DllImport.CopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            Ref<CopyMemoryToAccelerationStructureInfoKHR> pInfo
    )
    {
        fixed (CopyMemoryToAccelerationStructureInfoKHR* __dsl_pInfo = pInfo)
        fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CopyMemoryToAccelerationStructureKHR(
                    __dsl_device,
                    __dsl_deferredOperation,
                    __dsl_pInfo
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("const VkCopyMemoryToAccelerationStructureInfoKHR *")]
            Ref<CopyMemoryToAccelerationStructureInfoKHR> pInfo
    ) => DllImport.CopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyMemoryToImage(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            CopyMemoryToImageInfo* pCopyMemoryToImageInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CopyMemoryToImageInfo*, Result>)(
                _slots[300] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[300] = nativeContext.LoadFunction("vkCopyMemoryToImage", "vulkan")
            )
        )(device, pCopyMemoryToImageInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToImage(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            CopyMemoryToImageInfo* pCopyMemoryToImageInfo
    ) => DllImport.CopyMemoryToImage(device, pCopyMemoryToImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyMemoryToImage(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            Ref<CopyMemoryToImageInfo> pCopyMemoryToImageInfo
    )
    {
        fixed (CopyMemoryToImageInfo* __dsl_pCopyMemoryToImageInfo = pCopyMemoryToImageInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CopyMemoryToImage(__dsl_device, __dsl_pCopyMemoryToImageInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToImage(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            Ref<CopyMemoryToImageInfo> pCopyMemoryToImageInfo
    ) => DllImport.CopyMemoryToImage(device, pCopyMemoryToImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyMemoryToImageEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            CopyMemoryToImageInfo* pCopyMemoryToImageInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CopyMemoryToImageInfo*, Result>)(
                _slots[301] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[301] = nativeContext.LoadFunction("vkCopyMemoryToImageEXT", "vulkan")
            )
        )(device, pCopyMemoryToImageInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToImageEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            CopyMemoryToImageInfo* pCopyMemoryToImageInfo
    ) => DllImport.CopyMemoryToImageEXT(device, pCopyMemoryToImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyMemoryToImageEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            Ref<CopyMemoryToImageInfo> pCopyMemoryToImageInfo
    )
    {
        fixed (CopyMemoryToImageInfo* __dsl_pCopyMemoryToImageInfo = pCopyMemoryToImageInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CopyMemoryToImageEXT(__dsl_device, __dsl_pCopyMemoryToImageInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToImageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToImageEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCopyMemoryToImageInfo *")]
            Ref<CopyMemoryToImageInfo> pCopyMemoryToImageInfo
    ) => DllImport.CopyMemoryToImageEXT(device, pCopyMemoryToImageInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyMemoryToMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")] CopyMemoryToMicromapInfoEXT* pInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeferredOperationKHRHandle*,
                CopyMemoryToMicromapInfoEXT*,
                Result>)(
                _slots[302] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[302] = nativeContext.LoadFunction(
                        "vkCopyMemoryToMicromapEXT",
                        "vulkan"
                    )
            )
        )(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")] CopyMemoryToMicromapInfoEXT* pInfo
    ) => DllImport.CopyMemoryToMicromapEXT(device, deferredOperation, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyMemoryToMicromapEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
            Ref<CopyMemoryToMicromapInfoEXT> pInfo
    )
    {
        fixed (CopyMemoryToMicromapInfoEXT* __dsl_pInfo = pInfo)
        fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CopyMemoryToMicromapEXT(
                    __dsl_device,
                    __dsl_deferredOperation,
                    __dsl_pInfo
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMemoryToMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMemoryToMicromapEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("const VkCopyMemoryToMicromapInfoEXT *")]
            Ref<CopyMemoryToMicromapInfoEXT> pInfo
    ) => DllImport.CopyMemoryToMicromapEXT(device, deferredOperation, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] CopyMicromapInfoEXT* pInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeferredOperationKHRHandle*,
                CopyMicromapInfoEXT*,
                Result>)(
                _slots[303] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[303] = nativeContext.LoadFunction("vkCopyMicromapEXT", "vulkan")
            )
        )(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] CopyMicromapInfoEXT* pInfo
    ) => DllImport.CopyMicromapEXT(device, deferredOperation, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyMicromapEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] Ref<CopyMicromapInfoEXT> pInfo
    )
    {
        fixed (CopyMicromapInfoEXT* __dsl_pInfo = pInfo)
        fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CopyMicromapEXT(__dsl_device, __dsl_deferredOperation, __dsl_pInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMicromapEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("const VkCopyMicromapInfoEXT *")] Ref<CopyMicromapInfoEXT> pInfo
    ) => DllImport.CopyMicromapEXT(device, deferredOperation, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyMicromapToMemoryEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")] CopyMicromapToMemoryInfoEXT* pInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeferredOperationKHRHandle*,
                CopyMicromapToMemoryInfoEXT*,
                Result>)(
                _slots[304] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[304] = nativeContext.LoadFunction(
                        "vkCopyMicromapToMemoryEXT",
                        "vulkan"
                    )
            )
        )(device, deferredOperation, pInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMicromapToMemoryEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")] CopyMicromapToMemoryInfoEXT* pInfo
    ) => DllImport.CopyMicromapToMemoryEXT(device, deferredOperation, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CopyMicromapToMemoryEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
            Ref<CopyMicromapToMemoryInfoEXT> pInfo
    )
    {
        fixed (CopyMicromapToMemoryInfoEXT* __dsl_pInfo = pInfo)
        fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CopyMicromapToMemoryEXT(
                    __dsl_device,
                    __dsl_deferredOperation,
                    __dsl_pInfo
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCopyMicromapToMemoryEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CopyMicromapToMemoryEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("const VkCopyMicromapToMemoryInfoEXT *")]
            Ref<CopyMicromapToMemoryInfoEXT> pInfo
    ) => DllImport.CopyMicromapToMemoryEXT(device, deferredOperation, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoKHR *")]
            AccelerationStructureCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkAccelerationStructureKHR *")]
            AccelerationStructureKHRHandle** pAccelerationStructure
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                AccelerationStructureCreateInfoKHR*,
                AllocationCallbacks*,
                AccelerationStructureKHRHandle**,
                Result>)(
                _slots[305] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[305] = nativeContext.LoadFunction(
                        "vkCreateAccelerationStructureKHR",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pAccelerationStructure);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoKHR *")]
            AccelerationStructureCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkAccelerationStructureKHR *")]
            AccelerationStructureKHRHandle** pAccelerationStructure
    ) =>
        DllImport.CreateAccelerationStructureKHR(
            device,
            pCreateInfo,
            pAllocator,
            pAccelerationStructure
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoKHR *")]
            Ref<AccelerationStructureCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkAccelerationStructureKHR *")]
            Ref2D<AccelerationStructureKHRHandle> pAccelerationStructure
    )
    {
        fixed (
            AccelerationStructureKHRHandle** __dsl_pAccelerationStructure = pAccelerationStructure
        )
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (AccelerationStructureCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateAccelerationStructureKHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pAccelerationStructure
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoKHR *")]
            Ref<AccelerationStructureCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkAccelerationStructureKHR *")]
            Ref2D<AccelerationStructureKHRHandle> pAccelerationStructure
    ) =>
        DllImport.CreateAccelerationStructureKHR(
            device,
            pCreateInfo,
            pAllocator,
            pAccelerationStructure
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateAccelerationStructureNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoNV *")]
            AccelerationStructureCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkAccelerationStructureNV *")]
            AccelerationStructureNVHandle** pAccelerationStructure
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                AccelerationStructureCreateInfoNV*,
                AllocationCallbacks*,
                AccelerationStructureNVHandle**,
                Result>)(
                _slots[306] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[306] = nativeContext.LoadFunction(
                        "vkCreateAccelerationStructureNV",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pAccelerationStructure);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateAccelerationStructureNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoNV *")]
            AccelerationStructureCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkAccelerationStructureNV *")]
            AccelerationStructureNVHandle** pAccelerationStructure
    ) =>
        DllImport.CreateAccelerationStructureNV(
            device,
            pCreateInfo,
            pAllocator,
            pAccelerationStructure
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateAccelerationStructureNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoNV *")]
            Ref<AccelerationStructureCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkAccelerationStructureNV *")]
            Ref2D<AccelerationStructureNVHandle> pAccelerationStructure
    )
    {
        fixed (
            AccelerationStructureNVHandle** __dsl_pAccelerationStructure = pAccelerationStructure
        )
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (AccelerationStructureCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateAccelerationStructureNV(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pAccelerationStructure
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateAccelerationStructureNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAccelerationStructureCreateInfoNV *")]
            Ref<AccelerationStructureCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkAccelerationStructureNV *")]
            Ref2D<AccelerationStructureNVHandle> pAccelerationStructure
    ) =>
        DllImport.CreateAccelerationStructureNV(
            device,
            pCreateInfo,
            pAllocator,
            pAccelerationStructure
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateBuffer(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferCreateInfo *")] BufferCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkBuffer *")] BufferHandle** pBuffer
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                BufferCreateInfo*,
                AllocationCallbacks*,
                BufferHandle**,
                Result>)(
                _slots[307] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[307] = nativeContext.LoadFunction("vkCreateBuffer", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateBuffer(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferCreateInfo *")] BufferCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkBuffer *")] BufferHandle** pBuffer
    ) => DllImport.CreateBuffer(device, pCreateInfo, pAllocator, pBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateBuffer(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferCreateInfo *")] Ref<BufferCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkBuffer *")] Ref2D<BufferHandle> pBuffer
    )
    {
        fixed (BufferHandle** __dsl_pBuffer = pBuffer)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (BufferCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateBuffer(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pBuffer
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateBuffer(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferCreateInfo *")] Ref<BufferCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkBuffer *")] Ref2D<BufferHandle> pBuffer
    ) => DllImport.CreateBuffer(device, pCreateInfo, pAllocator, pBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateBufferView(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferViewCreateInfo *")] BufferViewCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkBufferView *")] BufferViewHandle** pView
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                BufferViewCreateInfo*,
                AllocationCallbacks*,
                BufferViewHandle**,
                Result>)(
                _slots[308] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[308] = nativeContext.LoadFunction("vkCreateBufferView", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pView);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateBufferView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateBufferView(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferViewCreateInfo *")] BufferViewCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkBufferView *")] BufferViewHandle** pView
    ) => DllImport.CreateBufferView(device, pCreateInfo, pAllocator, pView);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateBufferView(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferViewCreateInfo *")] Ref<BufferViewCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkBufferView *")] Ref2D<BufferViewHandle> pView
    )
    {
        fixed (BufferViewHandle** __dsl_pView = pView)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (BufferViewCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateBufferView(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pView
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateBufferView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateBufferView(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferViewCreateInfo *")] Ref<BufferViewCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkBufferView *")] Ref2D<BufferViewHandle> pView
    ) => DllImport.CreateBufferView(device, pCreateInfo, pAllocator, pView);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCommandPoolCreateInfo *")] CommandPoolCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCommandPool *")] CommandPoolHandle** pCommandPool
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                CommandPoolCreateInfo*,
                AllocationCallbacks*,
                CommandPoolHandle**,
                Result>)(
                _slots[309] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[309] = nativeContext.LoadFunction("vkCreateCommandPool", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pCommandPool);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCommandPoolCreateInfo *")] CommandPoolCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCommandPool *")] CommandPoolHandle** pCommandPool
    ) => DllImport.CreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateCommandPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCommandPoolCreateInfo *")] Ref<CommandPoolCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCommandPool *")] Ref2D<CommandPoolHandle> pCommandPool
    )
    {
        fixed (CommandPoolHandle** __dsl_pCommandPool = pCommandPool)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (CommandPoolCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateCommandPool(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pCommandPool
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCommandPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCommandPoolCreateInfo *")] Ref<CommandPoolCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCommandPool *")] Ref2D<CommandPoolHandle> pCommandPool
    ) => DllImport.CreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateComputePipelines(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            ComputePipelineCreateInfo* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle** pPipelines
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineCacheHandle*,
                uint,
                ComputePipelineCreateInfo*,
                AllocationCallbacks*,
                PipelineHandle**,
                Result>)(
                _slots[310] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[310] = nativeContext.LoadFunction("vkCreateComputePipelines", "vulkan")
            )
        )(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateComputePipelines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateComputePipelines(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            ComputePipelineCreateInfo* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle** pPipelines
    ) =>
        DllImport.CreateComputePipelines(
            device,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateComputePipelines(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            Ref<ComputePipelineCreateInfo> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref2D<PipelineHandle> pPipelines
    )
    {
        fixed (PipelineHandle** __dsl_pPipelines = pPipelines)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ComputePipelineCreateInfo* __dsl_pCreateInfos = pCreateInfos)
        fixed (PipelineCacheHandle* __dsl_pipelineCache = pipelineCache)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateComputePipelines(
                    __dsl_device,
                    __dsl_pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateComputePipelines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateComputePipelines(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            Ref<ComputePipelineCreateInfo> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref2D<PipelineHandle> pPipelines
    ) =>
        DllImport.CreateComputePipelines(
            device,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateCudaFunctionNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCudaFunctionCreateInfoNV *")]
            CudaFunctionCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCudaFunctionNV *")] CudaFunctionNVHandle** pFunction
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                CudaFunctionCreateInfoNV*,
                AllocationCallbacks*,
                CudaFunctionNVHandle**,
                Result>)(
                _slots[311] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[311] = nativeContext.LoadFunction("vkCreateCudaFunctionNV", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pFunction);

    [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCudaFunctionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCudaFunctionNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCudaFunctionCreateInfoNV *")]
            CudaFunctionCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCudaFunctionNV *")] CudaFunctionNVHandle** pFunction
    ) => DllImport.CreateCudaFunctionNV(device, pCreateInfo, pAllocator, pFunction);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateCudaFunctionNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCudaFunctionCreateInfoNV *")]
            Ref<CudaFunctionCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCudaFunctionNV *")] Ref2D<CudaFunctionNVHandle> pFunction
    )
    {
        fixed (CudaFunctionNVHandle** __dsl_pFunction = pFunction)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (CudaFunctionCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateCudaFunctionNV(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pFunction
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCudaFunctionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCudaFunctionNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCudaFunctionCreateInfoNV *")]
            Ref<CudaFunctionCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCudaFunctionNV *")] Ref2D<CudaFunctionNVHandle> pFunction
    ) => DllImport.CreateCudaFunctionNV(device, pCreateInfo, pAllocator, pFunction);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateCudaModuleNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCudaModuleCreateInfoNV *")] CudaModuleCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCudaModuleNV *")] CudaModuleNVHandle** pModule
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                CudaModuleCreateInfoNV*,
                AllocationCallbacks*,
                CudaModuleNVHandle**,
                Result>)(
                _slots[312] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[312] = nativeContext.LoadFunction("vkCreateCudaModuleNV", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pModule);

    [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCudaModuleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCudaModuleNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCudaModuleCreateInfoNV *")] CudaModuleCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCudaModuleNV *")] CudaModuleNVHandle** pModule
    ) => DllImport.CreateCudaModuleNV(device, pCreateInfo, pAllocator, pModule);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateCudaModuleNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCudaModuleCreateInfoNV *")]
            Ref<CudaModuleCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCudaModuleNV *")] Ref2D<CudaModuleNVHandle> pModule
    )
    {
        fixed (CudaModuleNVHandle** __dsl_pModule = pModule)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (CudaModuleCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateCudaModuleNV(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pModule
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCudaModuleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCudaModuleNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCudaModuleCreateInfoNV *")]
            Ref<CudaModuleCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCudaModuleNV *")] Ref2D<CudaModuleNVHandle> pModule
    ) => DllImport.CreateCudaModuleNV(device, pCreateInfo, pAllocator, pModule);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateCuFunctionNVX(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCuFunctionCreateInfoNVX *")] CuFunctionCreateInfoNVX* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCuFunctionNVX *")] CuFunctionNVXHandle** pFunction
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                CuFunctionCreateInfoNVX*,
                AllocationCallbacks*,
                CuFunctionNVXHandle**,
                Result>)(
                _slots[313] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[313] = nativeContext.LoadFunction("vkCreateCuFunctionNVX", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pFunction);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCuFunctionNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCuFunctionNVX(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCuFunctionCreateInfoNVX *")] CuFunctionCreateInfoNVX* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCuFunctionNVX *")] CuFunctionNVXHandle** pFunction
    ) => DllImport.CreateCuFunctionNVX(device, pCreateInfo, pAllocator, pFunction);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateCuFunctionNVX(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCuFunctionCreateInfoNVX *")]
            Ref<CuFunctionCreateInfoNVX> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCuFunctionNVX *")] Ref2D<CuFunctionNVXHandle> pFunction
    )
    {
        fixed (CuFunctionNVXHandle** __dsl_pFunction = pFunction)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (CuFunctionCreateInfoNVX* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateCuFunctionNVX(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pFunction
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCuFunctionNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCuFunctionNVX(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCuFunctionCreateInfoNVX *")]
            Ref<CuFunctionCreateInfoNVX> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCuFunctionNVX *")] Ref2D<CuFunctionNVXHandle> pFunction
    ) => DllImport.CreateCuFunctionNVX(device, pCreateInfo, pAllocator, pFunction);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateCuModuleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCuModuleCreateInfoNVX *")] CuModuleCreateInfoNVX* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCuModuleNVX *")] CuModuleNVXHandle** pModule
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                CuModuleCreateInfoNVX*,
                AllocationCallbacks*,
                CuModuleNVXHandle**,
                Result>)(
                _slots[314] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[314] = nativeContext.LoadFunction("vkCreateCuModuleNVX", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pModule);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCuModuleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCuModuleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkCuModuleCreateInfoNVX *")] CuModuleCreateInfoNVX* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkCuModuleNVX *")] CuModuleNVXHandle** pModule
    ) => DllImport.CreateCuModuleNVX(device, pCreateInfo, pAllocator, pModule);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateCuModuleNVX(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCuModuleCreateInfoNVX *")] Ref<CuModuleCreateInfoNVX> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCuModuleNVX *")] Ref2D<CuModuleNVXHandle> pModule
    )
    {
        fixed (CuModuleNVXHandle** __dsl_pModule = pModule)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (CuModuleCreateInfoNVX* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateCuModuleNVX(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pModule
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateCuModuleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateCuModuleNVX(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkCuModuleCreateInfoNVX *")] Ref<CuModuleCreateInfoNVX> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkCuModuleNVX *")] Ref2D<CuModuleNVXHandle> pModule
    ) => DllImport.CreateCuModuleNVX(device, pCreateInfo, pAllocator, pModule);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("const VkDebugReportCallbackCreateInfoEXT *")]
            DebugReportCallbackCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDebugReportCallbackEXT *")] DebugReportCallbackEXTHandle** pCallback
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle*,
                DebugReportCallbackCreateInfoEXT*,
                AllocationCallbacks*,
                DebugReportCallbackEXTHandle**,
                Result>)(
                _slots[315] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[315] = nativeContext.LoadFunction(
                        "vkCreateDebugReportCallbackEXT",
                        "vulkan"
                    )
            )
        )(instance, pCreateInfo, pAllocator, pCallback);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDebugReportCallbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("const VkDebugReportCallbackCreateInfoEXT *")]
            DebugReportCallbackCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDebugReportCallbackEXT *")] DebugReportCallbackEXTHandle** pCallback
    ) => DllImport.CreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("const VkDebugReportCallbackCreateInfoEXT *")]
            Ref<DebugReportCallbackCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDebugReportCallbackEXT *")] Ref2D<DebugReportCallbackEXTHandle> pCallback
    )
    {
        fixed (DebugReportCallbackEXTHandle** __dsl_pCallback = pCallback)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DebugReportCallbackCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
        fixed (InstanceHandle* __dsl_instance = instance)
        {
            return (Result)
                ((IVulkan)this).CreateDebugReportCallbackEXT(
                    __dsl_instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pCallback
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDebugReportCallbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("const VkDebugReportCallbackCreateInfoEXT *")]
            Ref<DebugReportCallbackCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDebugReportCallbackEXT *")] Ref2D<DebugReportCallbackEXTHandle> pCallback
    ) => DllImport.CreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("const VkDebugUtilsMessengerCreateInfoEXT *")]
            DebugUtilsMessengerCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDebugUtilsMessengerEXT *")] DebugUtilsMessengerEXTHandle** pMessenger
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle*,
                DebugUtilsMessengerCreateInfoEXT*,
                AllocationCallbacks*,
                DebugUtilsMessengerEXTHandle**,
                Result>)(
                _slots[316] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[316] = nativeContext.LoadFunction(
                        "vkCreateDebugUtilsMessengerEXT",
                        "vulkan"
                    )
            )
        )(instance, pCreateInfo, pAllocator, pMessenger);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDebugUtilsMessengerEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("const VkDebugUtilsMessengerCreateInfoEXT *")]
            DebugUtilsMessengerCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDebugUtilsMessengerEXT *")] DebugUtilsMessengerEXTHandle** pMessenger
    ) => DllImport.CreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("const VkDebugUtilsMessengerCreateInfoEXT *")]
            Ref<DebugUtilsMessengerCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDebugUtilsMessengerEXT *")]
            Ref2D<DebugUtilsMessengerEXTHandle> pMessenger
    )
    {
        fixed (DebugUtilsMessengerEXTHandle** __dsl_pMessenger = pMessenger)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DebugUtilsMessengerCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
        fixed (InstanceHandle* __dsl_instance = instance)
        {
            return (Result)
                ((IVulkan)this).CreateDebugUtilsMessengerEXT(
                    __dsl_instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pMessenger
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDebugUtilsMessengerEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("const VkDebugUtilsMessengerCreateInfoEXT *")]
            Ref<DebugUtilsMessengerCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDebugUtilsMessengerEXT *")]
            Ref2D<DebugUtilsMessengerEXTHandle> pMessenger
    ) => DllImport.CreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDeferredOperationKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDeferredOperationKHR *")] DeferredOperationKHRHandle** pDeferredOperation
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                AllocationCallbacks*,
                DeferredOperationKHRHandle**,
                Result>)(
                _slots[317] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[317] = nativeContext.LoadFunction(
                        "vkCreateDeferredOperationKHR",
                        "vulkan"
                    )
            )
        )(device, pAllocator, pDeferredOperation);

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDeferredOperationKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDeferredOperationKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDeferredOperationKHR *")] DeferredOperationKHRHandle** pDeferredOperation
    ) => DllImport.CreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDeferredOperationKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDeferredOperationKHR *")]
            Ref2D<DeferredOperationKHRHandle> pDeferredOperation
    )
    {
        fixed (DeferredOperationKHRHandle** __dsl_pDeferredOperation = pDeferredOperation)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateDeferredOperationKHR(
                    __dsl_device,
                    __dsl_pAllocator,
                    __dsl_pDeferredOperation
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDeferredOperationKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDeferredOperationKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDeferredOperationKHR *")]
            Ref2D<DeferredOperationKHRHandle> pDeferredOperation
    ) => DllImport.CreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorPoolCreateInfo *")]
            DescriptorPoolCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorPool *")] DescriptorPoolHandle** pDescriptorPool
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DescriptorPoolCreateInfo*,
                AllocationCallbacks*,
                DescriptorPoolHandle**,
                Result>)(
                _slots[318] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[318] = nativeContext.LoadFunction("vkCreateDescriptorPool", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pDescriptorPool);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorPoolCreateInfo *")]
            DescriptorPoolCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorPool *")] DescriptorPoolHandle** pDescriptorPool
    ) => DllImport.CreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDescriptorPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorPoolCreateInfo *")]
            Ref<DescriptorPoolCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorPool *")] Ref2D<DescriptorPoolHandle> pDescriptorPool
    )
    {
        fixed (DescriptorPoolHandle** __dsl_pDescriptorPool = pDescriptorPool)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DescriptorPoolCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateDescriptorPool(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDescriptorPool
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorPoolCreateInfo *")]
            Ref<DescriptorPoolCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorPool *")] Ref2D<DescriptorPoolHandle> pDescriptorPool
    ) => DllImport.CreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDescriptorSetLayout(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            DescriptorSetLayoutCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorSetLayout *")] DescriptorSetLayoutHandle** pSetLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DescriptorSetLayoutCreateInfo*,
                AllocationCallbacks*,
                DescriptorSetLayoutHandle**,
                Result>)(
                _slots[319] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[319] = nativeContext.LoadFunction(
                        "vkCreateDescriptorSetLayout",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pSetLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorSetLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorSetLayout(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            DescriptorSetLayoutCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorSetLayout *")] DescriptorSetLayoutHandle** pSetLayout
    ) => DllImport.CreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDescriptorSetLayout(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorSetLayout *")] Ref2D<DescriptorSetLayoutHandle> pSetLayout
    )
    {
        fixed (DescriptorSetLayoutHandle** __dsl_pSetLayout = pSetLayout)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DescriptorSetLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateDescriptorSetLayout(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSetLayout
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorSetLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorSetLayout(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorSetLayout *")] Ref2D<DescriptorSetLayoutHandle> pSetLayout
    ) => DllImport.CreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            DescriptorUpdateTemplateCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            DescriptorUpdateTemplateHandle** pDescriptorUpdateTemplate
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DescriptorUpdateTemplateCreateInfo*,
                AllocationCallbacks*,
                DescriptorUpdateTemplateHandle**,
                Result>)(
                _slots[320] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[320] = nativeContext.LoadFunction(
                        "vkCreateDescriptorUpdateTemplate",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            DescriptorUpdateTemplateCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            DescriptorUpdateTemplateHandle** pDescriptorUpdateTemplate
    ) =>
        DllImport.CreateDescriptorUpdateTemplate(
            device,
            pCreateInfo,
            pAllocator,
            pDescriptorUpdateTemplate
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            Ref<DescriptorUpdateTemplateCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            Ref2D<DescriptorUpdateTemplateHandle> pDescriptorUpdateTemplate
    )
    {
        fixed (
            DescriptorUpdateTemplateHandle** __dsl_pDescriptorUpdateTemplate =
                pDescriptorUpdateTemplate
        )
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DescriptorUpdateTemplateCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateDescriptorUpdateTemplate(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDescriptorUpdateTemplate
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            Ref<DescriptorUpdateTemplateCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            Ref2D<DescriptorUpdateTemplateHandle> pDescriptorUpdateTemplate
    ) =>
        DllImport.CreateDescriptorUpdateTemplate(
            device,
            pCreateInfo,
            pAllocator,
            pDescriptorUpdateTemplate
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            DescriptorUpdateTemplateCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            DescriptorUpdateTemplateHandle** pDescriptorUpdateTemplate
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DescriptorUpdateTemplateCreateInfo*,
                AllocationCallbacks*,
                DescriptorUpdateTemplateHandle**,
                Result>)(
                _slots[321] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[321] = nativeContext.LoadFunction(
                        "vkCreateDescriptorUpdateTemplateKHR",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            DescriptorUpdateTemplateCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            DescriptorUpdateTemplateHandle** pDescriptorUpdateTemplate
    ) =>
        DllImport.CreateDescriptorUpdateTemplateKHR(
            device,
            pCreateInfo,
            pAllocator,
            pDescriptorUpdateTemplate
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            Ref<DescriptorUpdateTemplateCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            Ref2D<DescriptorUpdateTemplateHandle> pDescriptorUpdateTemplate
    )
    {
        fixed (
            DescriptorUpdateTemplateHandle** __dsl_pDescriptorUpdateTemplate =
                pDescriptorUpdateTemplate
        )
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DescriptorUpdateTemplateCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateDescriptorUpdateTemplateKHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDescriptorUpdateTemplate
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDescriptorUpdateTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorUpdateTemplateCreateInfo *")]
            Ref<DescriptorUpdateTemplateCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDescriptorUpdateTemplate *")]
            Ref2D<DescriptorUpdateTemplateHandle> pDescriptorUpdateTemplate
    ) =>
        DllImport.CreateDescriptorUpdateTemplateKHR(
            device,
            pCreateInfo,
            pAllocator,
            pDescriptorUpdateTemplate
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDevice(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkDeviceCreateInfo *")] DeviceCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDevice *")] DeviceHandle** pDevice
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                DeviceCreateInfo*,
                AllocationCallbacks*,
                DeviceHandle**,
                Result>)(
                _slots[322] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[322] = nativeContext.LoadFunction("vkCreateDevice", "vulkan")
            )
        )(physicalDevice, pCreateInfo, pAllocator, pDevice);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDevice(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkDeviceCreateInfo *")] DeviceCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDevice *")] DeviceHandle** pDevice
    ) => DllImport.CreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDevice(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkDeviceCreateInfo *")] Ref<DeviceCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDevice *")] Ref2D<DeviceHandle> pDevice
    )
    {
        fixed (DeviceHandle** __dsl_pDevice = pDevice)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DeviceCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).CreateDevice(
                    __dsl_physicalDevice,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pDevice
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDevice(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkDeviceCreateInfo *")] Ref<DeviceCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDevice *")] Ref2D<DeviceHandle> pDevice
    ) => DllImport.CreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDisplayModeKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
        [NativeTypeName("const VkDisplayModeCreateInfoKHR *")]
            DisplayModeCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDisplayModeKHR *")] DisplayModeKHRHandle** pMode
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                DisplayKHRHandle*,
                DisplayModeCreateInfoKHR*,
                AllocationCallbacks*,
                DisplayModeKHRHandle**,
                Result>)(
                _slots[323] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[323] = nativeContext.LoadFunction("vkCreateDisplayModeKHR", "vulkan")
            )
        )(physicalDevice, display, pCreateInfo, pAllocator, pMode);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayModeKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDisplayModeKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
        [NativeTypeName("const VkDisplayModeCreateInfoKHR *")]
            DisplayModeCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkDisplayModeKHR *")] DisplayModeKHRHandle** pMode
    ) => DllImport.CreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDisplayModeKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
        [NativeTypeName("const VkDisplayModeCreateInfoKHR *")]
            Ref<DisplayModeCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDisplayModeKHR *")] Ref2D<DisplayModeKHRHandle> pMode
    )
    {
        fixed (DisplayModeKHRHandle** __dsl_pMode = pMode)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DisplayModeCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
        fixed (DisplayKHRHandle* __dsl_display = display)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).CreateDisplayModeKHR(
                    __dsl_physicalDevice,
                    __dsl_display,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pMode
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayModeKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDisplayModeKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
        [NativeTypeName("const VkDisplayModeCreateInfoKHR *")]
            Ref<DisplayModeCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkDisplayModeKHR *")] Ref2D<DisplayModeKHRHandle> pMode
    ) => DllImport.CreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDisplayPlaneSurfaceKHR(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("const VkDisplaySurfaceCreateInfoKHR *")]
            DisplaySurfaceCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] SurfaceKHRHandle** pSurface
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle*,
                DisplaySurfaceCreateInfoKHR*,
                AllocationCallbacks*,
                SurfaceKHRHandle**,
                Result>)(
                _slots[324] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[324] = nativeContext.LoadFunction(
                        "vkCreateDisplayPlaneSurfaceKHR",
                        "vulkan"
                    )
            )
        )(instance, pCreateInfo, pAllocator, pSurface);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayPlaneSurfaceKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDisplayPlaneSurfaceKHR(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("const VkDisplaySurfaceCreateInfoKHR *")]
            DisplaySurfaceCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] SurfaceKHRHandle** pSurface
    ) => DllImport.CreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateDisplayPlaneSurfaceKHR(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("const VkDisplaySurfaceCreateInfoKHR *")]
            Ref<DisplaySurfaceCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] Ref2D<SurfaceKHRHandle> pSurface
    )
    {
        fixed (SurfaceKHRHandle** __dsl_pSurface = pSurface)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DisplaySurfaceCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
        fixed (InstanceHandle* __dsl_instance = instance)
        {
            return (Result)
                ((IVulkan)this).CreateDisplayPlaneSurfaceKHR(
                    __dsl_instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSurface
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateDisplayPlaneSurfaceKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateDisplayPlaneSurfaceKHR(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("const VkDisplaySurfaceCreateInfoKHR *")]
            Ref<DisplaySurfaceCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] Ref2D<SurfaceKHRHandle> pSurface
    ) => DllImport.CreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateEvent(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkEventCreateInfo *")] EventCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkEvent *")] EventHandle** pEvent
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                EventCreateInfo*,
                AllocationCallbacks*,
                EventHandle**,
                Result>)(
                _slots[325] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[325] = nativeContext.LoadFunction("vkCreateEvent", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pEvent);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateEvent(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkEventCreateInfo *")] EventCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkEvent *")] EventHandle** pEvent
    ) => DllImport.CreateEvent(device, pCreateInfo, pAllocator, pEvent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateEvent(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkEventCreateInfo *")] Ref<EventCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkEvent *")] Ref2D<EventHandle> pEvent
    )
    {
        fixed (EventHandle** __dsl_pEvent = pEvent)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (EventCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateEvent(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pEvent
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateEvent(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkEventCreateInfo *")] Ref<EventCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkEvent *")] Ref2D<EventHandle> pEvent
    ) => DllImport.CreateEvent(device, pCreateInfo, pAllocator, pEvent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkExternalComputeQueueCreateInfoNV *")]
            ExternalComputeQueueCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkExternalComputeQueueNV *")] ExternalComputeQueueNVHandle** pExternalQueue
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ExternalComputeQueueCreateInfoNV*,
                AllocationCallbacks*,
                ExternalComputeQueueNVHandle**,
                Result>)(
                _slots[326] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[326] = nativeContext.LoadFunction(
                        "vkCreateExternalComputeQueueNV",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pExternalQueue);

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateExternalComputeQueueNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkExternalComputeQueueCreateInfoNV *")]
            ExternalComputeQueueCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkExternalComputeQueueNV *")] ExternalComputeQueueNVHandle** pExternalQueue
    ) => DllImport.CreateExternalComputeQueueNV(device, pCreateInfo, pAllocator, pExternalQueue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkExternalComputeQueueCreateInfoNV *")]
            Ref<ExternalComputeQueueCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkExternalComputeQueueNV *")]
            Ref2D<ExternalComputeQueueNVHandle> pExternalQueue
    )
    {
        fixed (ExternalComputeQueueNVHandle** __dsl_pExternalQueue = pExternalQueue)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ExternalComputeQueueCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateExternalComputeQueueNV(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pExternalQueue
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateExternalComputeQueueNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkExternalComputeQueueCreateInfoNV *")]
            Ref<ExternalComputeQueueCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkExternalComputeQueueNV *")]
            Ref2D<ExternalComputeQueueNVHandle> pExternalQueue
    ) => DllImport.CreateExternalComputeQueueNV(device, pCreateInfo, pAllocator, pExternalQueue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateFence(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkFenceCreateInfo *")] FenceCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFence *")] FenceHandle** pFence
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                FenceCreateInfo*,
                AllocationCallbacks*,
                FenceHandle**,
                Result>)(
                _slots[327] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[327] = nativeContext.LoadFunction("vkCreateFence", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pFence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateFence")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateFence(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkFenceCreateInfo *")] FenceCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFence *")] FenceHandle** pFence
    ) => DllImport.CreateFence(device, pCreateInfo, pAllocator, pFence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateFence(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkFenceCreateInfo *")] Ref<FenceCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFence *")] Ref2D<FenceHandle> pFence
    )
    {
        fixed (FenceHandle** __dsl_pFence = pFence)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (FenceCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateFence(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pFence
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateFence")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateFence(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkFenceCreateInfo *")] Ref<FenceCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFence *")] Ref2D<FenceHandle> pFence
    ) => DllImport.CreateFence(device, pCreateInfo, pAllocator, pFence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateFramebuffer(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkFramebufferCreateInfo *")] FramebufferCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFramebuffer *")] FramebufferHandle** pFramebuffer
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                FramebufferCreateInfo*,
                AllocationCallbacks*,
                FramebufferHandle**,
                Result>)(
                _slots[328] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[328] = nativeContext.LoadFunction("vkCreateFramebuffer", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pFramebuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateFramebuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateFramebuffer(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkFramebufferCreateInfo *")] FramebufferCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFramebuffer *")] FramebufferHandle** pFramebuffer
    ) => DllImport.CreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateFramebuffer(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkFramebufferCreateInfo *")] Ref<FramebufferCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFramebuffer *")] Ref2D<FramebufferHandle> pFramebuffer
    )
    {
        fixed (FramebufferHandle** __dsl_pFramebuffer = pFramebuffer)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (FramebufferCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateFramebuffer(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pFramebuffer
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateFramebuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateFramebuffer(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkFramebufferCreateInfo *")] Ref<FramebufferCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFramebuffer *")] Ref2D<FramebufferHandle> pFramebuffer
    ) => DllImport.CreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateGraphicsPipelines(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkGraphicsPipelineCreateInfo *")]
            GraphicsPipelineCreateInfo* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle** pPipelines
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineCacheHandle*,
                uint,
                GraphicsPipelineCreateInfo*,
                AllocationCallbacks*,
                PipelineHandle**,
                Result>)(
                _slots[329] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[329] = nativeContext.LoadFunction(
                        "vkCreateGraphicsPipelines",
                        "vulkan"
                    )
            )
        )(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateGraphicsPipelines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateGraphicsPipelines(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkGraphicsPipelineCreateInfo *")]
            GraphicsPipelineCreateInfo* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle** pPipelines
    ) =>
        DllImport.CreateGraphicsPipelines(
            device,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateGraphicsPipelines(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkGraphicsPipelineCreateInfo *")]
            Ref<GraphicsPipelineCreateInfo> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref2D<PipelineHandle> pPipelines
    )
    {
        fixed (PipelineHandle** __dsl_pPipelines = pPipelines)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (GraphicsPipelineCreateInfo* __dsl_pCreateInfos = pCreateInfos)
        fixed (PipelineCacheHandle* __dsl_pipelineCache = pipelineCache)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateGraphicsPipelines(
                    __dsl_device,
                    __dsl_pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateGraphicsPipelines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateGraphicsPipelines(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkGraphicsPipelineCreateInfo *")]
            Ref<GraphicsPipelineCreateInfo> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref2D<PipelineHandle> pPipelines
    ) =>
        DllImport.CreateGraphicsPipelines(
            device,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateHeadlessSurfaceEXT(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("const VkHeadlessSurfaceCreateInfoEXT *")]
            HeadlessSurfaceCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] SurfaceKHRHandle** pSurface
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle*,
                HeadlessSurfaceCreateInfoEXT*,
                AllocationCallbacks*,
                SurfaceKHRHandle**,
                Result>)(
                _slots[330] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[330] = nativeContext.LoadFunction(
                        "vkCreateHeadlessSurfaceEXT",
                        "vulkan"
                    )
            )
        )(instance, pCreateInfo, pAllocator, pSurface);

    [SupportedApiProfile("vulkan", ["VK_EXT_headless_surface"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateHeadlessSurfaceEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateHeadlessSurfaceEXT(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("const VkHeadlessSurfaceCreateInfoEXT *")]
            HeadlessSurfaceCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] SurfaceKHRHandle** pSurface
    ) => DllImport.CreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateHeadlessSurfaceEXT(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("const VkHeadlessSurfaceCreateInfoEXT *")]
            Ref<HeadlessSurfaceCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] Ref2D<SurfaceKHRHandle> pSurface
    )
    {
        fixed (SurfaceKHRHandle** __dsl_pSurface = pSurface)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (HeadlessSurfaceCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
        fixed (InstanceHandle* __dsl_instance = instance)
        {
            return (Result)
                ((IVulkan)this).CreateHeadlessSurfaceEXT(
                    __dsl_instance,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSurface
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_headless_surface"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateHeadlessSurfaceEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateHeadlessSurfaceEXT(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("const VkHeadlessSurfaceCreateInfoEXT *")]
            Ref<HeadlessSurfaceCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSurfaceKHR *")] Ref2D<SurfaceKHRHandle> pSurface
    ) => DllImport.CreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateImage(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageCreateInfo *")] ImageCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkImage *")] ImageHandle** pImage
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ImageCreateInfo*,
                AllocationCallbacks*,
                ImageHandle**,
                Result>)(
                _slots[331] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[331] = nativeContext.LoadFunction("vkCreateImage", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pImage);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateImage(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageCreateInfo *")] ImageCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkImage *")] ImageHandle** pImage
    ) => DllImport.CreateImage(device, pCreateInfo, pAllocator, pImage);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateImage(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageCreateInfo *")] Ref<ImageCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkImage *")] Ref2D<ImageHandle> pImage
    )
    {
        fixed (ImageHandle** __dsl_pImage = pImage)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ImageCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateImage(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pImage
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateImage(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageCreateInfo *")] Ref<ImageCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkImage *")] Ref2D<ImageHandle> pImage
    ) => DllImport.CreateImage(device, pCreateInfo, pAllocator, pImage);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateImageView(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageViewCreateInfo *")] ImageViewCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkImageView *")] ImageViewHandle** pView
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ImageViewCreateInfo*,
                AllocationCallbacks*,
                ImageViewHandle**,
                Result>)(
                _slots[332] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[332] = nativeContext.LoadFunction("vkCreateImageView", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pView);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateImageView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateImageView(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageViewCreateInfo *")] ImageViewCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkImageView *")] ImageViewHandle** pView
    ) => DllImport.CreateImageView(device, pCreateInfo, pAllocator, pView);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateImageView(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageViewCreateInfo *")] Ref<ImageViewCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkImageView *")] Ref2D<ImageViewHandle> pView
    )
    {
        fixed (ImageViewHandle** __dsl_pView = pView)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ImageViewCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateImageView(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pView
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateImageView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateImageView(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageViewCreateInfo *")] Ref<ImageViewCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkImageView *")] Ref2D<ImageViewHandle> pView
    ) => DllImport.CreateImageView(device, pCreateInfo, pAllocator, pView);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoEXT *")]
            IndirectCommandsLayoutCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutEXT *")]
            IndirectCommandsLayoutEXTHandle** pIndirectCommandsLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                IndirectCommandsLayoutCreateInfoEXT*,
                AllocationCallbacks*,
                IndirectCommandsLayoutEXTHandle**,
                Result>)(
                _slots[333] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[333] = nativeContext.LoadFunction(
                        "vkCreateIndirectCommandsLayoutEXT",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoEXT *")]
            IndirectCommandsLayoutCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutEXT *")]
            IndirectCommandsLayoutEXTHandle** pIndirectCommandsLayout
    ) =>
        DllImport.CreateIndirectCommandsLayoutEXT(
            device,
            pCreateInfo,
            pAllocator,
            pIndirectCommandsLayout
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoEXT *")]
            Ref<IndirectCommandsLayoutCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutEXT *")]
            Ref2D<IndirectCommandsLayoutEXTHandle> pIndirectCommandsLayout
    )
    {
        fixed (
            IndirectCommandsLayoutEXTHandle** __dsl_pIndirectCommandsLayout =
                pIndirectCommandsLayout
        )
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (IndirectCommandsLayoutCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateIndirectCommandsLayoutEXT(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pIndirectCommandsLayout
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoEXT *")]
            Ref<IndirectCommandsLayoutCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutEXT *")]
            Ref2D<IndirectCommandsLayoutEXTHandle> pIndirectCommandsLayout
    ) =>
        DllImport.CreateIndirectCommandsLayoutEXT(
            device,
            pCreateInfo,
            pAllocator,
            pIndirectCommandsLayout
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoNV *")]
            IndirectCommandsLayoutCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutNV *")]
            IndirectCommandsLayoutNVHandle** pIndirectCommandsLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                IndirectCommandsLayoutCreateInfoNV*,
                AllocationCallbacks*,
                IndirectCommandsLayoutNVHandle**,
                Result>)(
                _slots[334] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[334] = nativeContext.LoadFunction(
                        "vkCreateIndirectCommandsLayoutNV",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoNV *")]
            IndirectCommandsLayoutCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutNV *")]
            IndirectCommandsLayoutNVHandle** pIndirectCommandsLayout
    ) =>
        DllImport.CreateIndirectCommandsLayoutNV(
            device,
            pCreateInfo,
            pAllocator,
            pIndirectCommandsLayout
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoNV *")]
            Ref<IndirectCommandsLayoutCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutNV *")]
            Ref2D<IndirectCommandsLayoutNVHandle> pIndirectCommandsLayout
    )
    {
        fixed (
            IndirectCommandsLayoutNVHandle** __dsl_pIndirectCommandsLayout = pIndirectCommandsLayout
        )
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (IndirectCommandsLayoutCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateIndirectCommandsLayoutNV(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pIndirectCommandsLayout
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectCommandsLayoutNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkIndirectCommandsLayoutCreateInfoNV *")]
            Ref<IndirectCommandsLayoutCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkIndirectCommandsLayoutNV *")]
            Ref2D<IndirectCommandsLayoutNVHandle> pIndirectCommandsLayout
    ) =>
        DllImport.CreateIndirectCommandsLayoutNV(
            device,
            pCreateInfo,
            pAllocator,
            pIndirectCommandsLayout
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkIndirectExecutionSetCreateInfoEXT *")]
            IndirectExecutionSetCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkIndirectExecutionSetEXT *")]
            IndirectExecutionSetEXTHandle** pIndirectExecutionSet
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                IndirectExecutionSetCreateInfoEXT*,
                AllocationCallbacks*,
                IndirectExecutionSetEXTHandle**,
                Result>)(
                _slots[335] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[335] = nativeContext.LoadFunction(
                        "vkCreateIndirectExecutionSetEXT",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pIndirectExecutionSet);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectExecutionSetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkIndirectExecutionSetCreateInfoEXT *")]
            IndirectExecutionSetCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkIndirectExecutionSetEXT *")]
            IndirectExecutionSetEXTHandle** pIndirectExecutionSet
    ) =>
        DllImport.CreateIndirectExecutionSetEXT(
            device,
            pCreateInfo,
            pAllocator,
            pIndirectExecutionSet
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkIndirectExecutionSetCreateInfoEXT *")]
            Ref<IndirectExecutionSetCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkIndirectExecutionSetEXT *")]
            Ref2D<IndirectExecutionSetEXTHandle> pIndirectExecutionSet
    )
    {
        fixed (IndirectExecutionSetEXTHandle** __dsl_pIndirectExecutionSet = pIndirectExecutionSet)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (IndirectExecutionSetCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateIndirectExecutionSetEXT(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pIndirectExecutionSet
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateIndirectExecutionSetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkIndirectExecutionSetCreateInfoEXT *")]
            Ref<IndirectExecutionSetCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkIndirectExecutionSetEXT *")]
            Ref2D<IndirectExecutionSetEXTHandle> pIndirectExecutionSet
    ) =>
        DllImport.CreateIndirectExecutionSetEXT(
            device,
            pCreateInfo,
            pAllocator,
            pIndirectExecutionSet
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateInstance(
        [NativeTypeName("const VkInstanceCreateInfo *")] InstanceCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkInstance *")] InstanceHandle** pInstance
    ) =>
        (
            (delegate* unmanaged<
                InstanceCreateInfo*,
                AllocationCallbacks*,
                InstanceHandle**,
                Result>)(
                _slots[336] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[336] = nativeContext.LoadFunction("vkCreateInstance", "vulkan")
            )
        )(pCreateInfo, pAllocator, pInstance);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateInstance")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateInstance(
        [NativeTypeName("const VkInstanceCreateInfo *")] InstanceCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkInstance *")] InstanceHandle** pInstance
    ) => DllImport.CreateInstance(pCreateInfo, pAllocator, pInstance);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateInstance(
        [NativeTypeName("const VkInstanceCreateInfo *")] Ref<InstanceCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkInstance *")] Ref2D<InstanceHandle> pInstance
    )
    {
        fixed (InstanceHandle** __dsl_pInstance = pInstance)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (InstanceCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        {
            return (Result)
                ((IVulkan)this).CreateInstance(
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pInstance
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateInstance")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateInstance(
        [NativeTypeName("const VkInstanceCreateInfo *")] Ref<InstanceCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkInstance *")] Ref2D<InstanceHandle> pInstance
    ) => DllImport.CreateInstance(pCreateInfo, pAllocator, pInstance);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMicromapCreateInfoEXT *")] MicromapCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkMicromapEXT *")] MicromapEXTHandle** pMicromap
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                MicromapCreateInfoEXT*,
                AllocationCallbacks*,
                MicromapEXTHandle**,
                Result>)(
                _slots[337] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[337] = nativeContext.LoadFunction("vkCreateMicromapEXT", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pMicromap);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMicromapCreateInfoEXT *")] MicromapCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkMicromapEXT *")] MicromapEXTHandle** pMicromap
    ) => DllImport.CreateMicromapEXT(device, pCreateInfo, pAllocator, pMicromap);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateMicromapEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMicromapCreateInfoEXT *")] Ref<MicromapCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkMicromapEXT *")] Ref2D<MicromapEXTHandle> pMicromap
    )
    {
        fixed (MicromapEXTHandle** __dsl_pMicromap = pMicromap)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (MicromapCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateMicromapEXT(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pMicromap
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateMicromapEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMicromapCreateInfoEXT *")] Ref<MicromapCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkMicromapEXT *")] Ref2D<MicromapEXTHandle> pMicromap
    ) => DllImport.CreateMicromapEXT(device, pCreateInfo, pAllocator, pMicromap);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkOpticalFlowSessionCreateInfoNV *")]
            OpticalFlowSessionCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkOpticalFlowSessionNV *")] OpticalFlowSessionNVHandle** pSession
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                OpticalFlowSessionCreateInfoNV*,
                AllocationCallbacks*,
                OpticalFlowSessionNVHandle**,
                Result>)(
                _slots[338] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[338] = nativeContext.LoadFunction(
                        "vkCreateOpticalFlowSessionNV",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pSession);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateOpticalFlowSessionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkOpticalFlowSessionCreateInfoNV *")]
            OpticalFlowSessionCreateInfoNV* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkOpticalFlowSessionNV *")] OpticalFlowSessionNVHandle** pSession
    ) => DllImport.CreateOpticalFlowSessionNV(device, pCreateInfo, pAllocator, pSession);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkOpticalFlowSessionCreateInfoNV *")]
            Ref<OpticalFlowSessionCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkOpticalFlowSessionNV *")] Ref2D<OpticalFlowSessionNVHandle> pSession
    )
    {
        fixed (OpticalFlowSessionNVHandle** __dsl_pSession = pSession)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (OpticalFlowSessionCreateInfoNV* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateOpticalFlowSessionNV(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSession
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateOpticalFlowSessionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkOpticalFlowSessionCreateInfoNV *")]
            Ref<OpticalFlowSessionCreateInfoNV> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkOpticalFlowSessionNV *")] Ref2D<OpticalFlowSessionNVHandle> pSession
    ) => DllImport.CreateOpticalFlowSessionNV(device, pCreateInfo, pAllocator, pSession);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreatePipelineBinariesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineBinaryCreateInfoKHR *")]
            PipelineBinaryCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        PipelineBinaryHandlesInfoKHR* pBinaries
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineBinaryCreateInfoKHR*,
                AllocationCallbacks*,
                PipelineBinaryHandlesInfoKHR*,
                Result>)(
                _slots[339] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[339] = nativeContext.LoadFunction(
                        "vkCreatePipelineBinariesKHR",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pBinaries);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineBinariesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePipelineBinariesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineBinaryCreateInfoKHR *")]
            PipelineBinaryCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        PipelineBinaryHandlesInfoKHR* pBinaries
    ) => DllImport.CreatePipelineBinariesKHR(device, pCreateInfo, pAllocator, pBinaries);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreatePipelineBinariesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineBinaryCreateInfoKHR *")]
            Ref<PipelineBinaryCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        Ref<PipelineBinaryHandlesInfoKHR> pBinaries
    )
    {
        fixed (PipelineBinaryHandlesInfoKHR* __dsl_pBinaries = pBinaries)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PipelineBinaryCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreatePipelineBinariesKHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pBinaries
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineBinariesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePipelineBinariesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineBinaryCreateInfoKHR *")]
            Ref<PipelineBinaryCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        Ref<PipelineBinaryHandlesInfoKHR> pBinaries
    ) => DllImport.CreatePipelineBinariesKHR(device, pCreateInfo, pAllocator, pBinaries);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreatePipelineCache(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineCacheCreateInfo *")] PipelineCacheCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipelineCache *")] PipelineCacheHandle** pPipelineCache
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineCacheCreateInfo*,
                AllocationCallbacks*,
                PipelineCacheHandle**,
                Result>)(
                _slots[340] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[340] = nativeContext.LoadFunction("vkCreatePipelineCache", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pPipelineCache);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineCache")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePipelineCache(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineCacheCreateInfo *")] PipelineCacheCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipelineCache *")] PipelineCacheHandle** pPipelineCache
    ) => DllImport.CreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreatePipelineCache(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineCacheCreateInfo *")]
            Ref<PipelineCacheCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipelineCache *")] Ref2D<PipelineCacheHandle> pPipelineCache
    )
    {
        fixed (PipelineCacheHandle** __dsl_pPipelineCache = pPipelineCache)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PipelineCacheCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreatePipelineCache(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPipelineCache
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineCache")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePipelineCache(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineCacheCreateInfo *")]
            Ref<PipelineCacheCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipelineCache *")] Ref2D<PipelineCacheHandle> pPipelineCache
    ) => DllImport.CreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreatePipelineLayout(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineLayoutCreateInfo *")]
            PipelineLayoutCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipelineLayout *")] PipelineLayoutHandle** pPipelineLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineLayoutCreateInfo*,
                AllocationCallbacks*,
                PipelineLayoutHandle**,
                Result>)(
                _slots[341] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[341] = nativeContext.LoadFunction("vkCreatePipelineLayout", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pPipelineLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePipelineLayout(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineLayoutCreateInfo *")]
            PipelineLayoutCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipelineLayout *")] PipelineLayoutHandle** pPipelineLayout
    ) => DllImport.CreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreatePipelineLayout(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineLayoutCreateInfo *")]
            Ref<PipelineLayoutCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipelineLayout *")] Ref2D<PipelineLayoutHandle> pPipelineLayout
    )
    {
        fixed (PipelineLayoutHandle** __dsl_pPipelineLayout = pPipelineLayout)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PipelineLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreatePipelineLayout(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPipelineLayout
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePipelineLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePipelineLayout(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineLayoutCreateInfo *")]
            Ref<PipelineLayoutCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipelineLayout *")] Ref2D<PipelineLayoutHandle> pPipelineLayout
    ) => DllImport.CreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreatePrivateDataSlot(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            PrivateDataSlotCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] PrivateDataSlotHandle** pPrivateDataSlot
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PrivateDataSlotCreateInfo*,
                AllocationCallbacks*,
                PrivateDataSlotHandle**,
                Result>)(
                _slots[342] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[342] = nativeContext.LoadFunction("vkCreatePrivateDataSlot", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pPrivateDataSlot);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlot")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePrivateDataSlot(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            PrivateDataSlotCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] PrivateDataSlotHandle** pPrivateDataSlot
    ) => DllImport.CreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreatePrivateDataSlot(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            Ref<PrivateDataSlotCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] Ref2D<PrivateDataSlotHandle> pPrivateDataSlot
    )
    {
        fixed (PrivateDataSlotHandle** __dsl_pPrivateDataSlot = pPrivateDataSlot)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PrivateDataSlotCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreatePrivateDataSlot(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPrivateDataSlot
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlot")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePrivateDataSlot(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            Ref<PrivateDataSlotCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] Ref2D<PrivateDataSlotHandle> pPrivateDataSlot
    ) => DllImport.CreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreatePrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            PrivateDataSlotCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] PrivateDataSlotHandle** pPrivateDataSlot
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PrivateDataSlotCreateInfo*,
                AllocationCallbacks*,
                PrivateDataSlotHandle**,
                Result>)(
                _slots[343] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[343] = nativeContext.LoadFunction(
                        "vkCreatePrivateDataSlotEXT",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pPrivateDataSlot);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlotEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            PrivateDataSlotCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] PrivateDataSlotHandle** pPrivateDataSlot
    ) => DllImport.CreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreatePrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            Ref<PrivateDataSlotCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] Ref2D<PrivateDataSlotHandle> pPrivateDataSlot
    )
    {
        fixed (PrivateDataSlotHandle** __dsl_pPrivateDataSlot = pPrivateDataSlot)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PrivateDataSlotCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreatePrivateDataSlotEXT(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pPrivateDataSlot
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreatePrivateDataSlotEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreatePrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPrivateDataSlotCreateInfo *")]
            Ref<PrivateDataSlotCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPrivateDataSlot *")] Ref2D<PrivateDataSlotHandle> pPrivateDataSlot
    ) => DllImport.CreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkQueryPoolCreateInfo *")] QueryPoolCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkQueryPool *")] QueryPoolHandle** pQueryPool
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                QueryPoolCreateInfo*,
                AllocationCallbacks*,
                QueryPoolHandle**,
                Result>)(
                _slots[344] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[344] = nativeContext.LoadFunction("vkCreateQueryPool", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pQueryPool);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkQueryPoolCreateInfo *")] QueryPoolCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkQueryPool *")] QueryPoolHandle** pQueryPool
    ) => DllImport.CreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateQueryPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkQueryPoolCreateInfo *")] Ref<QueryPoolCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkQueryPool *")] Ref2D<QueryPoolHandle> pQueryPool
    )
    {
        fixed (QueryPoolHandle** __dsl_pQueryPool = pQueryPool)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (QueryPoolCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateQueryPool(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pQueryPool
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateQueryPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkQueryPoolCreateInfo *")] Ref<QueryPoolCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkQueryPool *")] Ref2D<QueryPoolHandle> pQueryPool
    ) => DllImport.CreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateRayTracingPipelinesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoKHR *")]
            RayTracingPipelineCreateInfoKHR* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle** pPipelines
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeferredOperationKHRHandle*,
                PipelineCacheHandle*,
                uint,
                RayTracingPipelineCreateInfoKHR*,
                AllocationCallbacks*,
                PipelineHandle**,
                Result>)(
                _slots[345] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[345] = nativeContext.LoadFunction(
                        "vkCreateRayTracingPipelinesKHR",
                        "vulkan"
                    )
            )
        )(
            device,
            deferredOperation,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRayTracingPipelinesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* deferredOperation,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoKHR *")]
            RayTracingPipelineCreateInfoKHR* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle** pPipelines
    ) =>
        DllImport.CreateRayTracingPipelinesKHR(
            device,
            deferredOperation,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateRayTracingPipelinesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoKHR *")]
            Ref<RayTracingPipelineCreateInfoKHR> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref2D<PipelineHandle> pPipelines
    )
    {
        fixed (PipelineHandle** __dsl_pPipelines = pPipelines)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (RayTracingPipelineCreateInfoKHR* __dsl_pCreateInfos = pCreateInfos)
        fixed (PipelineCacheHandle* __dsl_pipelineCache = pipelineCache)
        fixed (DeferredOperationKHRHandle* __dsl_deferredOperation = deferredOperation)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateRayTracingPipelinesKHR(
                    __dsl_device,
                    __dsl_deferredOperation,
                    __dsl_pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRayTracingPipelinesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")]
            Ref<DeferredOperationKHRHandle> deferredOperation,
        [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoKHR *")]
            Ref<RayTracingPipelineCreateInfoKHR> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref2D<PipelineHandle> pPipelines
    ) =>
        DllImport.CreateRayTracingPipelinesKHR(
            device,
            deferredOperation,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateRayTracingPipelinesNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoNV *")]
            RayTracingPipelineCreateInfoNV* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle** pPipelines
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineCacheHandle*,
                uint,
                RayTracingPipelineCreateInfoNV*,
                AllocationCallbacks*,
                PipelineHandle**,
                Result>)(
                _slots[346] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[346] = nativeContext.LoadFunction(
                        "vkCreateRayTracingPipelinesNV",
                        "vulkan"
                    )
            )
        )(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRayTracingPipelinesNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoNV *")]
            RayTracingPipelineCreateInfoNV* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkPipeline *")] PipelineHandle** pPipelines
    ) =>
        DllImport.CreateRayTracingPipelinesNV(
            device,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateRayTracingPipelinesNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoNV *")]
            Ref<RayTracingPipelineCreateInfoNV> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref2D<PipelineHandle> pPipelines
    )
    {
        fixed (PipelineHandle** __dsl_pPipelines = pPipelines)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (RayTracingPipelineCreateInfoNV* __dsl_pCreateInfos = pCreateInfos)
        fixed (PipelineCacheHandle* __dsl_pipelineCache = pipelineCache)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateRayTracingPipelinesNV(
                    __dsl_device,
                    __dsl_pipelineCache,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pPipelines
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRayTracingPipelinesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRayTracingPipelinesNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkRayTracingPipelineCreateInfoNV *")]
            Ref<RayTracingPipelineCreateInfoNV> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkPipeline *")] Ref2D<PipelineHandle> pPipelines
    ) =>
        DllImport.CreateRayTracingPipelinesNV(
            device,
            pipelineCache,
            createInfoCount,
            pCreateInfos,
            pAllocator,
            pPipelines
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateRenderPass(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkRenderPassCreateInfo *")] RenderPassCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkRenderPass *")] RenderPassHandle** pRenderPass
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                RenderPassCreateInfo*,
                AllocationCallbacks*,
                RenderPassHandle**,
                Result>)(
                _slots[347] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[347] = nativeContext.LoadFunction("vkCreateRenderPass", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pRenderPass);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRenderPass(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkRenderPassCreateInfo *")] RenderPassCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkRenderPass *")] RenderPassHandle** pRenderPass
    ) => DllImport.CreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateRenderPass(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkRenderPassCreateInfo *")] Ref<RenderPassCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkRenderPass *")] Ref2D<RenderPassHandle> pRenderPass
    )
    {
        fixed (RenderPassHandle** __dsl_pRenderPass = pRenderPass)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (RenderPassCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateRenderPass(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pRenderPass
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRenderPass(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkRenderPassCreateInfo *")] Ref<RenderPassCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkRenderPass *")] Ref2D<RenderPassHandle> pRenderPass
    ) => DllImport.CreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateRenderPass2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] RenderPassCreateInfo2* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkRenderPass *")] RenderPassHandle** pRenderPass
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                RenderPassCreateInfo2*,
                AllocationCallbacks*,
                RenderPassHandle**,
                Result>)(
                _slots[348] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[348] = nativeContext.LoadFunction("vkCreateRenderPass2", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pRenderPass);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRenderPass2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] RenderPassCreateInfo2* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkRenderPass *")] RenderPassHandle** pRenderPass
    ) => DllImport.CreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateRenderPass2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] Ref<RenderPassCreateInfo2> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkRenderPass *")] Ref2D<RenderPassHandle> pRenderPass
    )
    {
        fixed (RenderPassHandle** __dsl_pRenderPass = pRenderPass)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (RenderPassCreateInfo2* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateRenderPass2(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pRenderPass
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRenderPass2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] Ref<RenderPassCreateInfo2> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkRenderPass *")] Ref2D<RenderPassHandle> pRenderPass
    ) => DllImport.CreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateRenderPass2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] RenderPassCreateInfo2* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkRenderPass *")] RenderPassHandle** pRenderPass
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                RenderPassCreateInfo2*,
                AllocationCallbacks*,
                RenderPassHandle**,
                Result>)(
                _slots[349] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[349] = nativeContext.LoadFunction("vkCreateRenderPass2KHR", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pRenderPass);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRenderPass2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] RenderPassCreateInfo2* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkRenderPass *")] RenderPassHandle** pRenderPass
    ) => DllImport.CreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateRenderPass2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] Ref<RenderPassCreateInfo2> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkRenderPass *")] Ref2D<RenderPassHandle> pRenderPass
    )
    {
        fixed (RenderPassHandle** __dsl_pRenderPass = pRenderPass)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (RenderPassCreateInfo2* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateRenderPass2KHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pRenderPass
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_create_renderpass2"],
        ImpliesSets = ["VK_KHR_multiview+VK_KHR_maintenance2", "VK_VERSION_1_1"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateRenderPass2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateRenderPass2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkRenderPassCreateInfo2 *")] Ref<RenderPassCreateInfo2> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkRenderPass *")] Ref2D<RenderPassHandle> pRenderPass
    ) => DllImport.CreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateSampler(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSamplerCreateInfo *")] SamplerCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSampler *")] SamplerHandle** pSampler
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SamplerCreateInfo*,
                AllocationCallbacks*,
                SamplerHandle**,
                Result>)(
                _slots[350] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[350] = nativeContext.LoadFunction("vkCreateSampler", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pSampler);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSampler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSampler(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSamplerCreateInfo *")] SamplerCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSampler *")] SamplerHandle** pSampler
    ) => DllImport.CreateSampler(device, pCreateInfo, pAllocator, pSampler);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateSampler(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSamplerCreateInfo *")] Ref<SamplerCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSampler *")] Ref2D<SamplerHandle> pSampler
    )
    {
        fixed (SamplerHandle** __dsl_pSampler = pSampler)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SamplerCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateSampler(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSampler
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSampler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSampler(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSamplerCreateInfo *")] Ref<SamplerCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSampler *")] Ref2D<SamplerHandle> pSampler
    ) => DllImport.CreateSampler(device, pCreateInfo, pAllocator, pSampler);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateSamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            SamplerYcbcrConversionCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            SamplerYcbcrConversionHandle** pYcbcrConversion
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SamplerYcbcrConversionCreateInfo*,
                AllocationCallbacks*,
                SamplerYcbcrConversionHandle**,
                Result>)(
                _slots[351] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[351] = nativeContext.LoadFunction(
                        "vkCreateSamplerYcbcrConversion",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pYcbcrConversion);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            SamplerYcbcrConversionCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            SamplerYcbcrConversionHandle** pYcbcrConversion
    ) => DllImport.CreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateSamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            Ref<SamplerYcbcrConversionCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            Ref2D<SamplerYcbcrConversionHandle> pYcbcrConversion
    )
    {
        fixed (SamplerYcbcrConversionHandle** __dsl_pYcbcrConversion = pYcbcrConversion)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SamplerYcbcrConversionCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateSamplerYcbcrConversion(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pYcbcrConversion
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            Ref<SamplerYcbcrConversionCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            Ref2D<SamplerYcbcrConversionHandle> pYcbcrConversion
    ) => DllImport.CreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateSamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            SamplerYcbcrConversionCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            SamplerYcbcrConversionHandle** pYcbcrConversion
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SamplerYcbcrConversionCreateInfo*,
                AllocationCallbacks*,
                SamplerYcbcrConversionHandle**,
                Result>)(
                _slots[352] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[352] = nativeContext.LoadFunction(
                        "vkCreateSamplerYcbcrConversionKHR",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pYcbcrConversion);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            SamplerYcbcrConversionCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            SamplerYcbcrConversionHandle** pYcbcrConversion
    ) =>
        DllImport.CreateSamplerYcbcrConversionKHR(
            device,
            pCreateInfo,
            pAllocator,
            pYcbcrConversion
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateSamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            Ref<SamplerYcbcrConversionCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            Ref2D<SamplerYcbcrConversionHandle> pYcbcrConversion
    )
    {
        fixed (SamplerYcbcrConversionHandle** __dsl_pYcbcrConversion = pYcbcrConversion)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SamplerYcbcrConversionCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateSamplerYcbcrConversionKHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pYcbcrConversion
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSamplerYcbcrConversionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSamplerYcbcrConversionCreateInfo *")]
            Ref<SamplerYcbcrConversionCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSamplerYcbcrConversion *")]
            Ref2D<SamplerYcbcrConversionHandle> pYcbcrConversion
    ) =>
        DllImport.CreateSamplerYcbcrConversionKHR(
            device,
            pCreateInfo,
            pAllocator,
            pYcbcrConversion
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateSemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSemaphoreCreateInfo *")] SemaphoreCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSemaphore *")] SemaphoreHandle** pSemaphore
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SemaphoreCreateInfo*,
                AllocationCallbacks*,
                SemaphoreHandle**,
                Result>)(
                _slots[353] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[353] = nativeContext.LoadFunction("vkCreateSemaphore", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pSemaphore);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSemaphoreCreateInfo *")] SemaphoreCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSemaphore *")] SemaphoreHandle** pSemaphore
    ) => DllImport.CreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateSemaphore(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSemaphoreCreateInfo *")] Ref<SemaphoreCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSemaphore *")] Ref2D<SemaphoreHandle> pSemaphore
    )
    {
        fixed (SemaphoreHandle** __dsl_pSemaphore = pSemaphore)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SemaphoreCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateSemaphore(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSemaphore
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSemaphore(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSemaphoreCreateInfo *")] Ref<SemaphoreCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSemaphore *")] Ref2D<SemaphoreHandle> pSemaphore
    ) => DllImport.CreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateShaderModule(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")] ShaderModuleCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkShaderModule *")] ShaderModuleHandle** pShaderModule
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ShaderModuleCreateInfo*,
                AllocationCallbacks*,
                ShaderModuleHandle**,
                Result>)(
                _slots[354] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[354] = nativeContext.LoadFunction("vkCreateShaderModule", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pShaderModule);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateShaderModule")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateShaderModule(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")] ShaderModuleCreateInfo* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkShaderModule *")] ShaderModuleHandle** pShaderModule
    ) => DllImport.CreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateShaderModule(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")]
            Ref<ShaderModuleCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkShaderModule *")] Ref2D<ShaderModuleHandle> pShaderModule
    )
    {
        fixed (ShaderModuleHandle** __dsl_pShaderModule = pShaderModule)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ShaderModuleCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateShaderModule(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pShaderModule
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateShaderModule")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateShaderModule(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")]
            Ref<ShaderModuleCreateInfo> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkShaderModule *")] Ref2D<ShaderModuleHandle> pShaderModule
    ) => DllImport.CreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateShadersEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkShaderCreateInfoEXT *")] ShaderCreateInfoEXT* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkShaderEXT *")] ShaderEXTHandle** pShaders
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                uint,
                ShaderCreateInfoEXT*,
                AllocationCallbacks*,
                ShaderEXTHandle**,
                Result>)(
                _slots[355] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[355] = nativeContext.LoadFunction("vkCreateShadersEXT", "vulkan")
            )
        )(device, createInfoCount, pCreateInfos, pAllocator, pShaders);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateShadersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateShadersEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkShaderCreateInfoEXT *")] ShaderCreateInfoEXT* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkShaderEXT *")] ShaderEXTHandle** pShaders
    ) => DllImport.CreateShadersEXT(device, createInfoCount, pCreateInfos, pAllocator, pShaders);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateShadersEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkShaderCreateInfoEXT *")] Ref<ShaderCreateInfoEXT> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkShaderEXT *")] Ref2D<ShaderEXTHandle> pShaders
    )
    {
        fixed (ShaderEXTHandle** __dsl_pShaders = pShaders)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ShaderCreateInfoEXT* __dsl_pCreateInfos = pCreateInfos)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateShadersEXT(
                    __dsl_device,
                    createInfoCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pShaders
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateShadersEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateShadersEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint createInfoCount,
        [NativeTypeName("const VkShaderCreateInfoEXT *")] Ref<ShaderCreateInfoEXT> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkShaderEXT *")] Ref2D<ShaderEXTHandle> pShaders
    ) => DllImport.CreateShadersEXT(device, createInfoCount, pCreateInfos, pAllocator, pShaders);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateSharedSwapchainsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")] SwapchainCreateInfoKHR* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] SwapchainKHRHandle** pSwapchains
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                uint,
                SwapchainCreateInfoKHR*,
                AllocationCallbacks*,
                SwapchainKHRHandle**,
                Result>)(
                _slots[356] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[356] = nativeContext.LoadFunction(
                        "vkCreateSharedSwapchainsKHR",
                        "vulkan"
                    )
            )
        )(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_display_swapchain"],
        ImpliesSets = ["VK_KHR_display", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSharedSwapchainsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSharedSwapchainsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")] SwapchainCreateInfoKHR* pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] SwapchainKHRHandle** pSwapchains
    ) =>
        DllImport.CreateSharedSwapchainsKHR(
            device,
            swapchainCount,
            pCreateInfos,
            pAllocator,
            pSwapchains
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateSharedSwapchainsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
            Ref<SwapchainCreateInfoKHR> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] Ref2D<SwapchainKHRHandle> pSwapchains
    )
    {
        fixed (SwapchainKHRHandle** __dsl_pSwapchains = pSwapchains)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SwapchainCreateInfoKHR* __dsl_pCreateInfos = pCreateInfos)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateSharedSwapchainsKHR(
                    __dsl_device,
                    swapchainCount,
                    __dsl_pCreateInfos,
                    __dsl_pAllocator,
                    __dsl_pSwapchains
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_display_swapchain"],
        ImpliesSets = ["VK_KHR_display", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSharedSwapchainsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSharedSwapchainsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
            Ref<SwapchainCreateInfoKHR> pCreateInfos,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] Ref2D<SwapchainKHRHandle> pSwapchains
    ) =>
        DllImport.CreateSharedSwapchainsKHR(
            device,
            swapchainCount,
            pCreateInfos,
            pAllocator,
            pSwapchains
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateSwapchainKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")] SwapchainCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] SwapchainKHRHandle** pSwapchain
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SwapchainCreateInfoKHR*,
                AllocationCallbacks*,
                SwapchainKHRHandle**,
                Result>)(
                _slots[357] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[357] = nativeContext.LoadFunction("vkCreateSwapchainKHR", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pSwapchain);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSwapchainKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSwapchainKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")] SwapchainCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] SwapchainKHRHandle** pSwapchain
    ) => DllImport.CreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateSwapchainKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
            Ref<SwapchainCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] Ref2D<SwapchainKHRHandle> pSwapchain
    )
    {
        fixed (SwapchainKHRHandle** __dsl_pSwapchain = pSwapchain)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SwapchainCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateSwapchainKHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pSwapchain
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateSwapchainKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateSwapchainKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSwapchainCreateInfoKHR *")]
            Ref<SwapchainCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkSwapchainKHR *")] Ref2D<SwapchainKHRHandle> pSwapchain
    ) => DllImport.CreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateValidationCacheEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkValidationCacheCreateInfoEXT *")]
            ValidationCacheCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkValidationCacheEXT *")] ValidationCacheEXTHandle** pValidationCache
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ValidationCacheCreateInfoEXT*,
                AllocationCallbacks*,
                ValidationCacheEXTHandle**,
                Result>)(
                _slots[358] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[358] = nativeContext.LoadFunction(
                        "vkCreateValidationCacheEXT",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pValidationCache);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [NativeFunction("vulkan", EntryPoint = "vkCreateValidationCacheEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateValidationCacheEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkValidationCacheCreateInfoEXT *")]
            ValidationCacheCreateInfoEXT* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkValidationCacheEXT *")] ValidationCacheEXTHandle** pValidationCache
    ) => DllImport.CreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateValidationCacheEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkValidationCacheCreateInfoEXT *")]
            Ref<ValidationCacheCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkValidationCacheEXT *")] Ref2D<ValidationCacheEXTHandle> pValidationCache
    )
    {
        fixed (ValidationCacheEXTHandle** __dsl_pValidationCache = pValidationCache)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ValidationCacheCreateInfoEXT* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateValidationCacheEXT(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pValidationCache
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateValidationCacheEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateValidationCacheEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkValidationCacheCreateInfoEXT *")]
            Ref<ValidationCacheCreateInfoEXT> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkValidationCacheEXT *")] Ref2D<ValidationCacheEXTHandle> pValidationCache
    ) => DllImport.CreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateVideoSessionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkVideoSessionCreateInfoKHR *")]
            VideoSessionCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkVideoSessionKHR *")] VideoSessionKHRHandle** pVideoSession
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                VideoSessionCreateInfoKHR*,
                AllocationCallbacks*,
                VideoSessionKHRHandle**,
                Result>)(
                _slots[359] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[359] = nativeContext.LoadFunction("vkCreateVideoSessionKHR", "vulkan")
            )
        )(device, pCreateInfo, pAllocator, pVideoSession);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateVideoSessionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkVideoSessionCreateInfoKHR *")]
            VideoSessionCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkVideoSessionKHR *")] VideoSessionKHRHandle** pVideoSession
    ) => DllImport.CreateVideoSessionKHR(device, pCreateInfo, pAllocator, pVideoSession);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateVideoSessionKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkVideoSessionCreateInfoKHR *")]
            Ref<VideoSessionCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkVideoSessionKHR *")] Ref2D<VideoSessionKHRHandle> pVideoSession
    )
    {
        fixed (VideoSessionKHRHandle** __dsl_pVideoSession = pVideoSession)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (VideoSessionCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateVideoSessionKHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pVideoSession
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateVideoSessionKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkVideoSessionCreateInfoKHR *")]
            Ref<VideoSessionCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkVideoSessionKHR *")] Ref2D<VideoSessionKHRHandle> pVideoSession
    ) => DllImport.CreateVideoSessionKHR(device, pCreateInfo, pAllocator, pVideoSession);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkVideoSessionParametersCreateInfoKHR *")]
            VideoSessionParametersCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkVideoSessionParametersKHR *")]
            VideoSessionParametersKHRHandle** pVideoSessionParameters
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                VideoSessionParametersCreateInfoKHR*,
                AllocationCallbacks*,
                VideoSessionParametersKHRHandle**,
                Result>)(
                _slots[360] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[360] = nativeContext.LoadFunction(
                        "vkCreateVideoSessionParametersKHR",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pAllocator, pVideoSessionParameters);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkVideoSessionParametersCreateInfoKHR *")]
            VideoSessionParametersCreateInfoKHR* pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkVideoSessionParametersKHR *")]
            VideoSessionParametersKHRHandle** pVideoSessionParameters
    ) =>
        DllImport.CreateVideoSessionParametersKHR(
            device,
            pCreateInfo,
            pAllocator,
            pVideoSessionParameters
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.CreateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkVideoSessionParametersCreateInfoKHR *")]
            Ref<VideoSessionParametersCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkVideoSessionParametersKHR *")]
            Ref2D<VideoSessionParametersKHRHandle> pVideoSessionParameters
    )
    {
        fixed (
            VideoSessionParametersKHRHandle** __dsl_pVideoSessionParameters =
                pVideoSessionParameters
        )
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (VideoSessionParametersCreateInfoKHR* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).CreateVideoSessionParametersKHR(
                    __dsl_device,
                    __dsl_pCreateInfo,
                    __dsl_pAllocator,
                    __dsl_pVideoSessionParameters
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkCreateVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result CreateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkVideoSessionParametersCreateInfoKHR *")]
            Ref<VideoSessionParametersCreateInfoKHR> pCreateInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkVideoSessionParametersKHR *")]
            Ref2D<VideoSessionParametersKHRHandle> pVideoSessionParameters
    ) =>
        DllImport.CreateVideoSessionParametersKHR(
            device,
            pCreateInfo,
            pAllocator,
            pVideoSessionParameters
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.DebugMarkerSetObjectNameEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDebugMarkerObjectNameInfoEXT *")]
            DebugMarkerObjectNameInfoEXT* pNameInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DebugMarkerObjectNameInfoEXT*, Result>)(
                _slots[361] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[361] = nativeContext.LoadFunction(
                        "vkDebugMarkerSetObjectNameEXT",
                        "vulkan"
                    )
            )
        )(device, pNameInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectNameEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DebugMarkerSetObjectNameEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDebugMarkerObjectNameInfoEXT *")]
            DebugMarkerObjectNameInfoEXT* pNameInfo
    ) => DllImport.DebugMarkerSetObjectNameEXT(device, pNameInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.DebugMarkerSetObjectNameEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDebugMarkerObjectNameInfoEXT *")]
            Ref<DebugMarkerObjectNameInfoEXT> pNameInfo
    )
    {
        fixed (DebugMarkerObjectNameInfoEXT* __dsl_pNameInfo = pNameInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).DebugMarkerSetObjectNameEXT(__dsl_device, __dsl_pNameInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectNameEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DebugMarkerSetObjectNameEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDebugMarkerObjectNameInfoEXT *")]
            Ref<DebugMarkerObjectNameInfoEXT> pNameInfo
    ) => DllImport.DebugMarkerSetObjectNameEXT(device, pNameInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.DebugMarkerSetObjectTagEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDebugMarkerObjectTagInfoEXT *")]
            DebugMarkerObjectTagInfoEXT* pTagInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DebugMarkerObjectTagInfoEXT*, Result>)(
                _slots[362] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[362] = nativeContext.LoadFunction(
                        "vkDebugMarkerSetObjectTagEXT",
                        "vulkan"
                    )
            )
        )(device, pTagInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectTagEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DebugMarkerSetObjectTagEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDebugMarkerObjectTagInfoEXT *")]
            DebugMarkerObjectTagInfoEXT* pTagInfo
    ) => DllImport.DebugMarkerSetObjectTagEXT(device, pTagInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.DebugMarkerSetObjectTagEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDebugMarkerObjectTagInfoEXT *")]
            Ref<DebugMarkerObjectTagInfoEXT> pTagInfo
    )
    {
        fixed (DebugMarkerObjectTagInfoEXT* __dsl_pTagInfo = pTagInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).DebugMarkerSetObjectTagEXT(__dsl_device, __dsl_pTagInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_marker"], ImpliesSets = ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDebugMarkerSetObjectTagEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DebugMarkerSetObjectTagEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDebugMarkerObjectTagInfoEXT *")]
            Ref<DebugMarkerObjectTagInfoEXT> pTagInfo
    ) => DllImport.DebugMarkerSetObjectTagEXT(device, pTagInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DebugReportMessageEXT(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("VkDebugReportFlagsEXT")] uint flags,
        DebugReportObjectTypeEXT objectType,
        [NativeTypeName("uint64_t")] ulong @object,
        [NativeTypeName("size_t")] nuint location,
        [NativeTypeName("int32_t")] int messageCode,
        [NativeTypeName("const char *")] sbyte* pLayerPrefix,
        [NativeTypeName("const char *")] sbyte* pMessage
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle*,
                uint,
                DebugReportObjectTypeEXT,
                ulong,
                nuint,
                int,
                sbyte*,
                sbyte*,
                void>)(
                _slots[363] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[363] = nativeContext.LoadFunction("vkDebugReportMessageEXT", "vulkan")
            )
        )(instance, flags, objectType, @object, location, messageCode, pLayerPrefix, pMessage);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkDebugReportMessageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DebugReportMessageEXT(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("VkDebugReportFlagsEXT")] uint flags,
        DebugReportObjectTypeEXT objectType,
        [NativeTypeName("uint64_t")] ulong @object,
        [NativeTypeName("size_t")] nuint location,
        [NativeTypeName("int32_t")] int messageCode,
        [NativeTypeName("const char *")] sbyte* pLayerPrefix,
        [NativeTypeName("const char *")] sbyte* pMessage
    ) =>
        DllImport.DebugReportMessageEXT(
            instance,
            flags,
            objectType,
            @object,
            location,
            messageCode,
            pLayerPrefix,
            pMessage
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DebugReportMessageEXT(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("VkDebugReportFlagsEXT")] uint flags,
        DebugReportObjectTypeEXT objectType,
        [NativeTypeName("uint64_t")] ulong @object,
        [NativeTypeName("size_t")] nuint location,
        [NativeTypeName("int32_t")] int messageCode,
        [NativeTypeName("const char *")] Ref<sbyte> pLayerPrefix,
        [NativeTypeName("const char *")] Ref<sbyte> pMessage
    )
    {
        fixed (sbyte* __dsl_pMessage = pMessage)
        fixed (sbyte* __dsl_pLayerPrefix = pLayerPrefix)
        fixed (InstanceHandle* __dsl_instance = instance)
        {
            ((IVulkan)this).DebugReportMessageEXT(
                __dsl_instance,
                flags,
                objectType,
                @object,
                location,
                messageCode,
                __dsl_pLayerPrefix,
                __dsl_pMessage
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDebugReportMessageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DebugReportMessageEXT(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("VkDebugReportFlagsEXT")] uint flags,
        DebugReportObjectTypeEXT objectType,
        [NativeTypeName("uint64_t")] ulong @object,
        [NativeTypeName("size_t")] nuint location,
        [NativeTypeName("int32_t")] int messageCode,
        [NativeTypeName("const char *")] Ref<sbyte> pLayerPrefix,
        [NativeTypeName("const char *")] Ref<sbyte> pMessage
    ) =>
        DllImport.DebugReportMessageEXT(
            instance,
            flags,
            objectType,
            @object,
            location,
            messageCode,
            pLayerPrefix,
            pMessage
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.DeferredOperationJoinKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* operation
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DeferredOperationKHRHandle*, Result>)(
                _slots[364] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[364] = nativeContext.LoadFunction(
                        "vkDeferredOperationJoinKHR",
                        "vulkan"
                    )
            )
        )(device, operation);

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkDeferredOperationJoinKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DeferredOperationJoinKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* operation
    ) => DllImport.DeferredOperationJoinKHR(device, operation);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.DeferredOperationJoinKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")] Ref<DeferredOperationKHRHandle> operation
    )
    {
        fixed (DeferredOperationKHRHandle* __dsl_operation = operation)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).DeferredOperationJoinKHR(__dsl_device, __dsl_operation);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDeferredOperationJoinKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DeferredOperationJoinKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")] Ref<DeferredOperationKHRHandle> operation
    ) => DllImport.DeferredOperationJoinKHR(device, operation);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkAccelerationStructureKHR")]
            AccelerationStructureKHRHandle* accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                AccelerationStructureKHRHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[365] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[365] = nativeContext.LoadFunction(
                        "vkDestroyAccelerationStructureKHR",
                        "vulkan"
                    )
            )
        )(device, accelerationStructure, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkAccelerationStructureKHR")]
            AccelerationStructureKHRHandle* accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkAccelerationStructureKHR")]
            Ref<AccelerationStructureKHRHandle> accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (AccelerationStructureKHRHandle* __dsl_accelerationStructure = accelerationStructure)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyAccelerationStructureKHR(
                __dsl_device,
                __dsl_accelerationStructure,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyAccelerationStructureKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkAccelerationStructureKHR")]
            Ref<AccelerationStructureKHRHandle> accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyAccelerationStructureNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkAccelerationStructureNV")]
            AccelerationStructureNVHandle* accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                AccelerationStructureNVHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[366] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[366] = nativeContext.LoadFunction(
                        "vkDestroyAccelerationStructureNV",
                        "vulkan"
                    )
            )
        )(device, accelerationStructure, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyAccelerationStructureNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkAccelerationStructureNV")]
            AccelerationStructureNVHandle* accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyAccelerationStructureNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkAccelerationStructureNV")]
            Ref<AccelerationStructureNVHandle> accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (AccelerationStructureNVHandle* __dsl_accelerationStructure = accelerationStructure)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyAccelerationStructureNV(
                __dsl_device,
                __dsl_accelerationStructure,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyAccelerationStructureNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyAccelerationStructureNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkAccelerationStructureNV")]
            Ref<AccelerationStructureNVHandle> accelerationStructure,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyBuffer(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, BufferHandle*, AllocationCallbacks*, void>)(
                _slots[367] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[367] = nativeContext.LoadFunction("vkDestroyBuffer", "vulkan")
            )
        )(device, buffer, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyBuffer(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyBuffer(device, buffer, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyBuffer(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyBuffer(__dsl_device, __dsl_buffer, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyBuffer(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyBuffer(device, buffer, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyBufferView(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkBufferView")] BufferViewHandle* bufferView,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, BufferViewHandle*, AllocationCallbacks*, void>)(
                _slots[368] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[368] = nativeContext.LoadFunction("vkDestroyBufferView", "vulkan")
            )
        )(device, bufferView, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyBufferView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyBufferView(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkBufferView")] BufferViewHandle* bufferView,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyBufferView(device, bufferView, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyBufferView(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkBufferView")] Ref<BufferViewHandle> bufferView,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (BufferViewHandle* __dsl_bufferView = bufferView)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyBufferView(__dsl_device, __dsl_bufferView, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyBufferView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyBufferView(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkBufferView")] Ref<BufferViewHandle> bufferView,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyBufferView(device, bufferView, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CommandPoolHandle*, AllocationCallbacks*, void>)(
                _slots[369] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[369] = nativeContext.LoadFunction("vkDestroyCommandPool", "vulkan")
            )
        )(device, commandPool, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyCommandPool(device, commandPool, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyCommandPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (CommandPoolHandle* __dsl_commandPool = commandPool)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyCommandPool(__dsl_device, __dsl_commandPool, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCommandPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyCommandPool(device, commandPool, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyCudaFunctionNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCudaFunctionNV")] CudaFunctionNVHandle* function,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CudaFunctionNVHandle*, AllocationCallbacks*, void>)(
                _slots[370] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[370] = nativeContext.LoadFunction("vkDestroyCudaFunctionNV", "vulkan")
            )
        )(device, function, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCudaFunctionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCudaFunctionNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCudaFunctionNV")] CudaFunctionNVHandle* function,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyCudaFunctionNV(device, function, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyCudaFunctionNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCudaFunctionNV")] Ref<CudaFunctionNVHandle> function,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (CudaFunctionNVHandle* __dsl_function = function)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyCudaFunctionNV(__dsl_device, __dsl_function, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCudaFunctionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCudaFunctionNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCudaFunctionNV")] Ref<CudaFunctionNVHandle> function,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyCudaFunctionNV(device, function, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyCudaModuleNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCudaModuleNV")] CudaModuleNVHandle* module,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CudaModuleNVHandle*, AllocationCallbacks*, void>)(
                _slots[371] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[371] = nativeContext.LoadFunction("vkDestroyCudaModuleNV", "vulkan")
            )
        )(device, module, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCudaModuleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCudaModuleNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCudaModuleNV")] CudaModuleNVHandle* module,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyCudaModuleNV(device, module, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyCudaModuleNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCudaModuleNV")] Ref<CudaModuleNVHandle> module,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (CudaModuleNVHandle* __dsl_module = module)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyCudaModuleNV(__dsl_device, __dsl_module, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCudaModuleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCudaModuleNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCudaModuleNV")] Ref<CudaModuleNVHandle> module,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyCudaModuleNV(device, module, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyCuFunctionNVX(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCuFunctionNVX")] CuFunctionNVXHandle* function,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CuFunctionNVXHandle*, AllocationCallbacks*, void>)(
                _slots[372] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[372] = nativeContext.LoadFunction("vkDestroyCuFunctionNVX", "vulkan")
            )
        )(device, function, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCuFunctionNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCuFunctionNVX(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCuFunctionNVX")] CuFunctionNVXHandle* function,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyCuFunctionNVX(device, function, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyCuFunctionNVX(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCuFunctionNVX")] Ref<CuFunctionNVXHandle> function,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (CuFunctionNVXHandle* __dsl_function = function)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyCuFunctionNVX(__dsl_device, __dsl_function, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCuFunctionNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCuFunctionNVX(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCuFunctionNVX")] Ref<CuFunctionNVXHandle> function,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyCuFunctionNVX(device, function, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyCuModuleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCuModuleNVX")] CuModuleNVXHandle* module,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CuModuleNVXHandle*, AllocationCallbacks*, void>)(
                _slots[373] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[373] = nativeContext.LoadFunction("vkDestroyCuModuleNVX", "vulkan")
            )
        )(device, module, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCuModuleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCuModuleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCuModuleNVX")] CuModuleNVXHandle* module,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyCuModuleNVX(device, module, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyCuModuleNVX(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCuModuleNVX")] Ref<CuModuleNVXHandle> module,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (CuModuleNVXHandle* __dsl_module = module)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyCuModuleNVX(__dsl_device, __dsl_module, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NVX_binary_import"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyCuModuleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCuModuleNVX(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCuModuleNVX")] Ref<CuModuleNVXHandle> module,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyCuModuleNVX(device, module, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("VkDebugReportCallbackEXT")] DebugReportCallbackEXTHandle* callback,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle*,
                DebugReportCallbackEXTHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[374] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[374] = nativeContext.LoadFunction(
                        "vkDestroyDebugReportCallbackEXT",
                        "vulkan"
                    )
            )
        )(instance, callback, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugReportCallbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("VkDebugReportCallbackEXT")] DebugReportCallbackEXTHandle* callback,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyDebugReportCallbackEXT(instance, callback, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("VkDebugReportCallbackEXT")] Ref<DebugReportCallbackEXTHandle> callback,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DebugReportCallbackEXTHandle* __dsl_callback = callback)
        fixed (InstanceHandle* __dsl_instance = instance)
        {
            ((IVulkan)this).DestroyDebugReportCallbackEXT(
                __dsl_instance,
                __dsl_callback,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_report"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugReportCallbackEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDebugReportCallbackEXT(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("VkDebugReportCallbackEXT")] Ref<DebugReportCallbackEXTHandle> callback,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyDebugReportCallbackEXT(instance, callback, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("VkDebugUtilsMessengerEXT")] DebugUtilsMessengerEXTHandle* messenger,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle*,
                DebugUtilsMessengerEXTHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[375] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[375] = nativeContext.LoadFunction(
                        "vkDestroyDebugUtilsMessengerEXT",
                        "vulkan"
                    )
            )
        )(instance, messenger, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugUtilsMessengerEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("VkDebugUtilsMessengerEXT")] DebugUtilsMessengerEXTHandle* messenger,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("VkDebugUtilsMessengerEXT")] Ref<DebugUtilsMessengerEXTHandle> messenger,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DebugUtilsMessengerEXTHandle* __dsl_messenger = messenger)
        fixed (InstanceHandle* __dsl_instance = instance)
        {
            ((IVulkan)this).DestroyDebugUtilsMessengerEXT(
                __dsl_instance,
                __dsl_messenger,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDebugUtilsMessengerEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDebugUtilsMessengerEXT(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("VkDebugUtilsMessengerEXT")] Ref<DebugUtilsMessengerEXTHandle> messenger,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDeferredOperationKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* operation,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeferredOperationKHRHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[376] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[376] = nativeContext.LoadFunction(
                        "vkDestroyDeferredOperationKHR",
                        "vulkan"
                    )
            )
        )(device, operation, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDeferredOperationKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDeferredOperationKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* operation,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyDeferredOperationKHR(device, operation, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDeferredOperationKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")] Ref<DeferredOperationKHRHandle> operation,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DeferredOperationKHRHandle* __dsl_operation = operation)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyDeferredOperationKHR(
                __dsl_device,
                __dsl_operation,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDeferredOperationKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDeferredOperationKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")] Ref<DeferredOperationKHRHandle> operation,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyDeferredOperationKHR(device, operation, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle* descriptorPool,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DescriptorPoolHandle*, AllocationCallbacks*, void>)(
                _slots[377] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[377] = nativeContext.LoadFunction("vkDestroyDescriptorPool", "vulkan")
            )
        )(device, descriptorPool, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle* descriptorPool,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyDescriptorPool(device, descriptorPool, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDescriptorPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorPool")] Ref<DescriptorPoolHandle> descriptorPool,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DescriptorPoolHandle* __dsl_descriptorPool = descriptorPool)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyDescriptorPool(
                __dsl_device,
                __dsl_descriptorPool,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorPool")] Ref<DescriptorPoolHandle> descriptorPool,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyDescriptorPool(device, descriptorPool, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDescriptorSetLayout(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle* descriptorSetLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DescriptorSetLayoutHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[378] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[378] = nativeContext.LoadFunction(
                        "vkDestroyDescriptorSetLayout",
                        "vulkan"
                    )
            )
        )(device, descriptorSetLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorSetLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorSetLayout(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle* descriptorSetLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDescriptorSetLayout(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorSetLayout")]
            Ref<DescriptorSetLayoutHandle> descriptorSetLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DescriptorSetLayoutHandle* __dsl_descriptorSetLayout = descriptorSetLayout)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyDescriptorSetLayout(
                __dsl_device,
                __dsl_descriptorSetLayout,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorSetLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorSetLayout(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorSetLayout")]
            Ref<DescriptorSetLayoutHandle> descriptorSetLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DescriptorUpdateTemplateHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[379] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[379] = nativeContext.LoadFunction(
                        "vkDestroyDescriptorUpdateTemplate",
                        "vulkan"
                    )
            )
        )(device, descriptorUpdateTemplate, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (
            DescriptorUpdateTemplateHandle* __dsl_descriptorUpdateTemplate =
                descriptorUpdateTemplate
        )
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyDescriptorUpdateTemplate(
                __dsl_device,
                __dsl_descriptorUpdateTemplate,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorUpdateTemplate(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DescriptorUpdateTemplateHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[380] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[380] = nativeContext.LoadFunction(
                        "vkDestroyDescriptorUpdateTemplateKHR",
                        "vulkan"
                    )
            )
        )(device, descriptorUpdateTemplate, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (
            DescriptorUpdateTemplateHandle* __dsl_descriptorUpdateTemplate =
                descriptorUpdateTemplate
        )
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyDescriptorUpdateTemplateKHR(
                __dsl_device,
                __dsl_descriptorUpdateTemplate,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDescriptorUpdateTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDescriptorUpdateTemplateKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDevice(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, AllocationCallbacks*, void>)(
                _slots[381] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[381] = nativeContext.LoadFunction("vkDestroyDevice", "vulkan")
            )
        )(device, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDevice(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyDevice(device, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyDevice(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyDevice(__dsl_device, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyDevice(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyDevice(device, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyEvent(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkEvent")] EventHandle* @event,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, EventHandle*, AllocationCallbacks*, void>)(
                _slots[382] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[382] = nativeContext.LoadFunction("vkDestroyEvent", "vulkan")
            )
        )(device, @event, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyEvent(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkEvent")] EventHandle* @event,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyEvent(device, @event, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyEvent(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (EventHandle* __dsl_event = @event)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyEvent(__dsl_device, __dsl_event, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyEvent(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyEvent(device, @event, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle* externalQueue,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ExternalComputeQueueNVHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[383] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[383] = nativeContext.LoadFunction(
                        "vkDestroyExternalComputeQueueNV",
                        "vulkan"
                    )
            )
        )(device, externalQueue, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyExternalComputeQueueNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle* externalQueue,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyExternalComputeQueueNV(device, externalQueue, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkExternalComputeQueueNV")]
            Ref<ExternalComputeQueueNVHandle> externalQueue,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ExternalComputeQueueNVHandle* __dsl_externalQueue = externalQueue)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyExternalComputeQueueNV(
                __dsl_device,
                __dsl_externalQueue,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyExternalComputeQueueNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyExternalComputeQueueNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkExternalComputeQueueNV")]
            Ref<ExternalComputeQueueNVHandle> externalQueue,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyExternalComputeQueueNV(device, externalQueue, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyFence(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkFence")] FenceHandle* fence,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, FenceHandle*, AllocationCallbacks*, void>)(
                _slots[384] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[384] = nativeContext.LoadFunction("vkDestroyFence", "vulkan")
            )
        )(device, fence, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyFence")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyFence(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkFence")] FenceHandle* fence,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyFence(device, fence, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyFence(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkFence")] Ref<FenceHandle> fence,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (FenceHandle* __dsl_fence = fence)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyFence(__dsl_device, __dsl_fence, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyFence")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyFence(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkFence")] Ref<FenceHandle> fence,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyFence(device, fence, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyFramebuffer(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkFramebuffer")] FramebufferHandle* framebuffer,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, FramebufferHandle*, AllocationCallbacks*, void>)(
                _slots[385] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[385] = nativeContext.LoadFunction("vkDestroyFramebuffer", "vulkan")
            )
        )(device, framebuffer, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyFramebuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyFramebuffer(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkFramebuffer")] FramebufferHandle* framebuffer,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyFramebuffer(device, framebuffer, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyFramebuffer(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkFramebuffer")] Ref<FramebufferHandle> framebuffer,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (FramebufferHandle* __dsl_framebuffer = framebuffer)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyFramebuffer(__dsl_device, __dsl_framebuffer, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyFramebuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyFramebuffer(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkFramebuffer")] Ref<FramebufferHandle> framebuffer,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyFramebuffer(device, framebuffer, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyImage(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ImageHandle*, AllocationCallbacks*, void>)(
                _slots[386] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[386] = nativeContext.LoadFunction("vkDestroyImage", "vulkan")
            )
        )(device, image, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyImage(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyImage(device, image, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyImage(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ImageHandle* __dsl_image = image)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyImage(__dsl_device, __dsl_image, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyImage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyImage(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyImage(device, image, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyImageView(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImageView")] ImageViewHandle* imageView,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ImageViewHandle*, AllocationCallbacks*, void>)(
                _slots[387] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[387] = nativeContext.LoadFunction("vkDestroyImageView", "vulkan")
            )
        )(device, imageView, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyImageView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyImageView(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImageView")] ImageViewHandle* imageView,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyImageView(device, imageView, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyImageView(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImageView")] Ref<ImageViewHandle> imageView,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ImageViewHandle* __dsl_imageView = imageView)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyImageView(__dsl_device, __dsl_imageView, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyImageView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyImageView(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImageView")] Ref<ImageViewHandle> imageView,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyImageView(device, imageView, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkIndirectCommandsLayoutEXT")]
            IndirectCommandsLayoutEXTHandle* indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                IndirectCommandsLayoutEXTHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[388] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[388] = nativeContext.LoadFunction(
                        "vkDestroyIndirectCommandsLayoutEXT",
                        "vulkan"
                    )
            )
        )(device, indirectCommandsLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkIndirectCommandsLayoutEXT")]
            IndirectCommandsLayoutEXTHandle* indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyIndirectCommandsLayoutEXT(device, indirectCommandsLayout, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkIndirectCommandsLayoutEXT")]
            Ref<IndirectCommandsLayoutEXTHandle> indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (
            IndirectCommandsLayoutEXTHandle* __dsl_indirectCommandsLayout = indirectCommandsLayout
        )
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyIndirectCommandsLayoutEXT(
                __dsl_device,
                __dsl_indirectCommandsLayout,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyIndirectCommandsLayoutEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkIndirectCommandsLayoutEXT")]
            Ref<IndirectCommandsLayoutEXTHandle> indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyIndirectCommandsLayoutEXT(device, indirectCommandsLayout, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkIndirectCommandsLayoutNV")]
            IndirectCommandsLayoutNVHandle* indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                IndirectCommandsLayoutNVHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[389] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[389] = nativeContext.LoadFunction(
                        "vkDestroyIndirectCommandsLayoutNV",
                        "vulkan"
                    )
            )
        )(device, indirectCommandsLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkIndirectCommandsLayoutNV")]
            IndirectCommandsLayoutNVHandle* indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkIndirectCommandsLayoutNV")]
            Ref<IndirectCommandsLayoutNVHandle> indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (
            IndirectCommandsLayoutNVHandle* __dsl_indirectCommandsLayout = indirectCommandsLayout
        )
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyIndirectCommandsLayoutNV(
                __dsl_device,
                __dsl_indirectCommandsLayout,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectCommandsLayoutNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyIndirectCommandsLayoutNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkIndirectCommandsLayoutNV")]
            Ref<IndirectCommandsLayoutNVHandle> indirectCommandsLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle* indirectExecutionSet,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                IndirectExecutionSetEXTHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[390] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[390] = nativeContext.LoadFunction(
                        "vkDestroyIndirectExecutionSetEXT",
                        "vulkan"
                    )
            )
        )(device, indirectExecutionSet, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectExecutionSetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle* indirectExecutionSet,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyIndirectExecutionSetEXT(device, indirectExecutionSet, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (IndirectExecutionSetEXTHandle* __dsl_indirectExecutionSet = indirectExecutionSet)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyIndirectExecutionSetEXT(
                __dsl_device,
                __dsl_indirectExecutionSet,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyIndirectExecutionSetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyIndirectExecutionSetEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyIndirectExecutionSetEXT(device, indirectExecutionSet, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyInstance(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<InstanceHandle*, AllocationCallbacks*, void>)(
                _slots[391] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[391] = nativeContext.LoadFunction("vkDestroyInstance", "vulkan")
            )
        )(instance, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyInstance")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyInstance(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyInstance(instance, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyInstance(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (InstanceHandle* __dsl_instance = instance)
        {
            ((IVulkan)this).DestroyInstance(__dsl_instance, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyInstance")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyInstance(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyInstance(instance, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkMicromapEXT")] MicromapEXTHandle* micromap,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, MicromapEXTHandle*, AllocationCallbacks*, void>)(
                _slots[392] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[392] = nativeContext.LoadFunction("vkDestroyMicromapEXT", "vulkan")
            )
        )(device, micromap, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyMicromapEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkMicromapEXT")] MicromapEXTHandle* micromap,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyMicromapEXT(device, micromap, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyMicromapEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkMicromapEXT")] Ref<MicromapEXTHandle> micromap,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (MicromapEXTHandle* __dsl_micromap = micromap)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyMicromapEXT(__dsl_device, __dsl_micromap, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyMicromapEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyMicromapEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkMicromapEXT")] Ref<MicromapEXTHandle> micromap,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyMicromapEXT(device, micromap, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle* session,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                OpticalFlowSessionNVHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[393] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[393] = nativeContext.LoadFunction(
                        "vkDestroyOpticalFlowSessionNV",
                        "vulkan"
                    )
            )
        )(device, session, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyOpticalFlowSessionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkOpticalFlowSessionNV")] OpticalFlowSessionNVHandle* session,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyOpticalFlowSessionNV(device, session, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkOpticalFlowSessionNV")] Ref<OpticalFlowSessionNVHandle> session,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (OpticalFlowSessionNVHandle* __dsl_session = session)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyOpticalFlowSessionNV(
                __dsl_device,
                __dsl_session,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyOpticalFlowSessionNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyOpticalFlowSessionNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkOpticalFlowSessionNV")] Ref<OpticalFlowSessionNVHandle> session,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyOpticalFlowSessionNV(device, session, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyPipeline(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, PipelineHandle*, AllocationCallbacks*, void>)(
                _slots[394] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[394] = nativeContext.LoadFunction("vkDestroyPipeline", "vulkan")
            )
        )(device, pipeline, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipeline")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipeline(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyPipeline(device, pipeline, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyPipeline(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PipelineHandle* __dsl_pipeline = pipeline)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyPipeline(__dsl_device, __dsl_pipeline, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipeline")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipeline(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyPipeline(device, pipeline, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyPipelineBinaryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineBinaryKHR")] PipelineBinaryKHRHandle pipelineBinary,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineBinaryKHRHandle,
                AllocationCallbacks*,
                void>)(
                _slots[395] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[395] = nativeContext.LoadFunction(
                        "vkDestroyPipelineBinaryKHR",
                        "vulkan"
                    )
            )
        )(device, pipelineBinary, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineBinaryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipelineBinaryKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineBinaryKHR")] PipelineBinaryKHRHandle pipelineBinary,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyPipelineBinaryKHR(device, pipelineBinary, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyPipelineBinaryKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineBinaryKHR")] PipelineBinaryKHRHandle pipelineBinary,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyPipelineBinaryKHR(
                __dsl_device,
                pipelineBinary,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineBinaryKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipelineBinaryKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineBinaryKHR")] PipelineBinaryKHRHandle pipelineBinary,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyPipelineBinaryKHR(device, pipelineBinary, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyPipelineCache(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, PipelineCacheHandle*, AllocationCallbacks*, void>)(
                _slots[396] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[396] = nativeContext.LoadFunction("vkDestroyPipelineCache", "vulkan")
            )
        )(device, pipelineCache, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineCache")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipelineCache(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyPipelineCache(device, pipelineCache, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyPipelineCache(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PipelineCacheHandle* __dsl_pipelineCache = pipelineCache)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyPipelineCache(
                __dsl_device,
                __dsl_pipelineCache,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineCache")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipelineCache(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyPipelineCache(device, pipelineCache, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyPipelineLayout(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* pipelineLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, PipelineLayoutHandle*, AllocationCallbacks*, void>)(
                _slots[397] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[397] = nativeContext.LoadFunction("vkDestroyPipelineLayout", "vulkan")
            )
        )(device, pipelineLayout, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipelineLayout(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineLayout")] PipelineLayoutHandle* pipelineLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyPipelineLayout(device, pipelineLayout, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyPipelineLayout(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> pipelineLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PipelineLayoutHandle* __dsl_pipelineLayout = pipelineLayout)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyPipelineLayout(
                __dsl_device,
                __dsl_pipelineLayout,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPipelineLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPipelineLayout(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineLayout")] Ref<PipelineLayoutHandle> pipelineLayout,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyPipelineLayout(device, pipelineLayout, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyPrivateDataSlot(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PrivateDataSlotHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[398] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[398] = nativeContext.LoadFunction("vkDestroyPrivateDataSlot", "vulkan")
            )
        )(device, privateDataSlot, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlot")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPrivateDataSlot(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyPrivateDataSlot(device, privateDataSlot, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyPrivateDataSlot(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PrivateDataSlotHandle* __dsl_privateDataSlot = privateDataSlot)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyPrivateDataSlot(
                __dsl_device,
                __dsl_privateDataSlot,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlot")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPrivateDataSlot(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyPrivateDataSlot(device, privateDataSlot, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyPrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PrivateDataSlotHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[399] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[399] = nativeContext.LoadFunction(
                        "vkDestroyPrivateDataSlotEXT",
                        "vulkan"
                    )
            )
        )(device, privateDataSlot, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlotEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyPrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (PrivateDataSlotHandle* __dsl_privateDataSlot = privateDataSlot)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyPrivateDataSlotEXT(
                __dsl_device,
                __dsl_privateDataSlot,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyPrivateDataSlotEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPrivateDataSlotEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, QueryPoolHandle*, AllocationCallbacks*, void>)(
                _slots[400] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[400] = nativeContext.LoadFunction("vkDestroyQueryPool", "vulkan")
            )
        )(device, queryPool, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyQueryPool(device, queryPool, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyQueryPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyQueryPool(__dsl_device, __dsl_queryPool, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyQueryPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyQueryPool(device, queryPool, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyRenderPass(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle* renderPass,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, RenderPassHandle*, AllocationCallbacks*, void>)(
                _slots[401] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[401] = nativeContext.LoadFunction("vkDestroyRenderPass", "vulkan")
            )
        )(device, renderPass, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyRenderPass(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle* renderPass,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyRenderPass(device, renderPass, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyRenderPass(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkRenderPass")] Ref<RenderPassHandle> renderPass,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (RenderPassHandle* __dsl_renderPass = renderPass)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyRenderPass(__dsl_device, __dsl_renderPass, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyRenderPass")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyRenderPass(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkRenderPass")] Ref<RenderPassHandle> renderPass,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyRenderPass(device, renderPass, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroySampler(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSampler")] SamplerHandle* sampler,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SamplerHandle*, AllocationCallbacks*, void>)(
                _slots[402] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[402] = nativeContext.LoadFunction("vkDestroySampler", "vulkan")
            )
        )(device, sampler, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySampler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySampler(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSampler")] SamplerHandle* sampler,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroySampler(device, sampler, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroySampler(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSampler")] Ref<SamplerHandle> sampler,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SamplerHandle* __dsl_sampler = sampler)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroySampler(__dsl_device, __dsl_sampler, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySampler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySampler(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSampler")] Ref<SamplerHandle> sampler,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroySampler(device, sampler, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroySamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSamplerYcbcrConversion")] SamplerYcbcrConversionHandle* ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SamplerYcbcrConversionHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[403] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[403] = nativeContext.LoadFunction(
                        "vkDestroySamplerYcbcrConversion",
                        "vulkan"
                    )
            )
        )(device, ycbcrConversion, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSamplerYcbcrConversion")] SamplerYcbcrConversionHandle* ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroySamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSamplerYcbcrConversion")]
            Ref<SamplerYcbcrConversionHandle> ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SamplerYcbcrConversionHandle* __dsl_ycbcrConversion = ycbcrConversion)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroySamplerYcbcrConversion(
                __dsl_device,
                __dsl_ycbcrConversion,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySamplerYcbcrConversion(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSamplerYcbcrConversion")]
            Ref<SamplerYcbcrConversionHandle> ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroySamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSamplerYcbcrConversion")] SamplerYcbcrConversionHandle* ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SamplerYcbcrConversionHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[404] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[404] = nativeContext.LoadFunction(
                        "vkDestroySamplerYcbcrConversionKHR",
                        "vulkan"
                    )
            )
        )(device, ycbcrConversion, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSamplerYcbcrConversion")] SamplerYcbcrConversionHandle* ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroySamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSamplerYcbcrConversion")]
            Ref<SamplerYcbcrConversionHandle> ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SamplerYcbcrConversionHandle* __dsl_ycbcrConversion = ycbcrConversion)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroySamplerYcbcrConversionKHR(
                __dsl_device,
                __dsl_ycbcrConversion,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_sampler_ycbcr_conversion"],
        ImpliesSets = [
            "VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySamplerYcbcrConversionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySamplerYcbcrConversionKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSamplerYcbcrConversion")]
            Ref<SamplerYcbcrConversionHandle> ycbcrConversion,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroySemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle* semaphore,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SemaphoreHandle*, AllocationCallbacks*, void>)(
                _slots[405] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[405] = nativeContext.LoadFunction("vkDestroySemaphore", "vulkan")
            )
        )(device, semaphore, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle* semaphore,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroySemaphore(device, semaphore, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroySemaphore(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSemaphore")] Ref<SemaphoreHandle> semaphore,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SemaphoreHandle* __dsl_semaphore = semaphore)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroySemaphore(__dsl_device, __dsl_semaphore, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySemaphore(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSemaphore")] Ref<SemaphoreHandle> semaphore,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroySemaphore(device, semaphore, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyShaderEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkShaderEXT")] ShaderEXTHandle* shader,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ShaderEXTHandle*, AllocationCallbacks*, void>)(
                _slots[406] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[406] = nativeContext.LoadFunction("vkDestroyShaderEXT", "vulkan")
            )
        )(device, shader, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyShaderEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkShaderEXT")] ShaderEXTHandle* shader,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyShaderEXT(device, shader, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyShaderEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkShaderEXT")] Ref<ShaderEXTHandle> shader,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ShaderEXTHandle* __dsl_shader = shader)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyShaderEXT(__dsl_device, __dsl_shader, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyShaderEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkShaderEXT")] Ref<ShaderEXTHandle> shader,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyShaderEXT(device, shader, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyShaderModule(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkShaderModule")] ShaderModuleHandle* shaderModule,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ShaderModuleHandle*, AllocationCallbacks*, void>)(
                _slots[407] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[407] = nativeContext.LoadFunction("vkDestroyShaderModule", "vulkan")
            )
        )(device, shaderModule, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderModule")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyShaderModule(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkShaderModule")] ShaderModuleHandle* shaderModule,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyShaderModule(device, shaderModule, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyShaderModule(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkShaderModule")] Ref<ShaderModuleHandle> shaderModule,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ShaderModuleHandle* __dsl_shaderModule = shaderModule)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyShaderModule(__dsl_device, __dsl_shaderModule, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyShaderModule")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyShaderModule(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkShaderModule")] Ref<ShaderModuleHandle> shaderModule,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyShaderModule(device, shaderModule, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroySurfaceKHR(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<InstanceHandle*, SurfaceKHRHandle*, AllocationCallbacks*, void>)(
                _slots[408] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[408] = nativeContext.LoadFunction("vkDestroySurfaceKHR", "vulkan")
            )
        )(instance, surface, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySurfaceKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySurfaceKHR(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroySurfaceKHR(instance, surface, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroySurfaceKHR(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SurfaceKHRHandle* __dsl_surface = surface)
        fixed (InstanceHandle* __dsl_instance = instance)
        {
            ((IVulkan)this).DestroySurfaceKHR(__dsl_instance, __dsl_surface, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySurfaceKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySurfaceKHR(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroySurfaceKHR(instance, surface, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroySwapchainKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SwapchainKHRHandle*, AllocationCallbacks*, void>)(
                _slots[409] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[409] = nativeContext.LoadFunction("vkDestroySwapchainKHR", "vulkan")
            )
        )(device, swapchain, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySwapchainKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySwapchainKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroySwapchainKHR(device, swapchain, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroySwapchainKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroySwapchainKHR(__dsl_device, __dsl_swapchain, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroySwapchainKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySwapchainKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroySwapchainKHR(device, swapchain, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyValidationCacheEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle* validationCache,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ValidationCacheEXTHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[410] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[410] = nativeContext.LoadFunction(
                        "vkDestroyValidationCacheEXT",
                        "vulkan"
                    )
            )
        )(device, validationCache, pAllocator);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyValidationCacheEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyValidationCacheEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle* validationCache,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyValidationCacheEXT(device, validationCache, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyValidationCacheEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkValidationCacheEXT")] Ref<ValidationCacheEXTHandle> validationCache,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ValidationCacheEXTHandle* __dsl_validationCache = validationCache)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyValidationCacheEXT(
                __dsl_device,
                __dsl_validationCache,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyValidationCacheEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyValidationCacheEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkValidationCacheEXT")] Ref<ValidationCacheEXTHandle> validationCache,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyValidationCacheEXT(device, validationCache, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyVideoSessionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle* videoSession,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                VideoSessionKHRHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[411] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[411] = nativeContext.LoadFunction("vkDestroyVideoSessionKHR", "vulkan")
            )
        )(device, videoSession, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyVideoSessionKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle* videoSession,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyVideoSessionKHR(device, videoSession, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyVideoSessionKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkVideoSessionKHR")] Ref<VideoSessionKHRHandle> videoSession,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (VideoSessionKHRHandle* __dsl_videoSession = videoSession)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyVideoSessionKHR(
                __dsl_device,
                __dsl_videoSession,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyVideoSessionKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkVideoSessionKHR")] Ref<VideoSessionKHRHandle> videoSession,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyVideoSessionKHR(device, videoSession, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            VideoSessionParametersKHRHandle* videoSessionParameters,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                VideoSessionParametersKHRHandle*,
                AllocationCallbacks*,
                void>)(
                _slots[412] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[412] = nativeContext.LoadFunction(
                        "vkDestroyVideoSessionParametersKHR",
                        "vulkan"
                    )
            )
        )(device, videoSessionParameters, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            VideoSessionParametersKHRHandle* videoSessionParameters,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.DestroyVideoSessionParametersKHR(device, videoSessionParameters, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.DestroyVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            Ref<VideoSessionParametersKHRHandle> videoSessionParameters,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (
            VideoSessionParametersKHRHandle* __dsl_videoSessionParameters = videoSessionParameters
        )
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).DestroyVideoSessionParametersKHR(
                __dsl_device,
                __dsl_videoSessionParameters,
                __dsl_pAllocator
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDestroyVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            Ref<VideoSessionParametersKHRHandle> videoSessionParameters,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.DestroyVideoSessionParametersKHR(device, videoSessionParameters, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.DeviceWaitIdle([NativeTypeName("VkDevice")] DeviceHandle* device) =>
        (
            (delegate* unmanaged<DeviceHandle*, Result>)(
                _slots[413] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[413] = nativeContext.LoadFunction("vkDeviceWaitIdle", "vulkan")
            )
        )(device);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDeviceWaitIdle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DeviceWaitIdle([NativeTypeName("VkDevice")] DeviceHandle* device) =>
        DllImport.DeviceWaitIdle(device);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.DeviceWaitIdle([NativeTypeName("VkDevice")] Ref<DeviceHandle> device)
    {
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).DeviceWaitIdle(__dsl_device);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDeviceWaitIdle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DeviceWaitIdle([NativeTypeName("VkDevice")] Ref<DeviceHandle> device) =>
        DllImport.DeviceWaitIdle(device);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.DisplayPowerControlEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
        [NativeTypeName("const VkDisplayPowerInfoEXT *")] DisplayPowerInfoEXT* pDisplayPowerInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DisplayKHRHandle*, DisplayPowerInfoEXT*, Result>)(
                _slots[414] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[414] = nativeContext.LoadFunction("vkDisplayPowerControlEXT", "vulkan")
            )
        )(device, display, pDisplayPowerInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkDisplayPowerControlEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DisplayPowerControlEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
        [NativeTypeName("const VkDisplayPowerInfoEXT *")] DisplayPowerInfoEXT* pDisplayPowerInfo
    ) => DllImport.DisplayPowerControlEXT(device, display, pDisplayPowerInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.DisplayPowerControlEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
        [NativeTypeName("const VkDisplayPowerInfoEXT *")] Ref<DisplayPowerInfoEXT> pDisplayPowerInfo
    )
    {
        fixed (DisplayPowerInfoEXT* __dsl_pDisplayPowerInfo = pDisplayPowerInfo)
        fixed (DisplayKHRHandle* __dsl_display = display)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).DisplayPowerControlEXT(
                    __dsl_device,
                    __dsl_display,
                    __dsl_pDisplayPowerInfo
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkDisplayPowerControlEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result DisplayPowerControlEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
        [NativeTypeName("const VkDisplayPowerInfoEXT *")] Ref<DisplayPowerInfoEXT> pDisplayPowerInfo
    ) => DllImport.DisplayPowerControlEXT(device, display, pDisplayPowerInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EndCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, Result>)(
                _slots[415] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[415] = nativeContext.LoadFunction("vkEndCommandBuffer", "vulkan")
            )
        )(commandBuffer);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEndCommandBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EndCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer
    ) => DllImport.EndCommandBuffer(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EndCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            return (Result)((IVulkan)this).EndCommandBuffer(__dsl_commandBuffer);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEndCommandBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EndCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer
    ) => DllImport.EndCommandBuffer(commandBuffer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumerateDeviceExtensionProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const char *")] sbyte* pLayerName,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        ExtensionProperties* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                sbyte*,
                uint*,
                ExtensionProperties*,
                Result>)(
                _slots[416] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[416] = nativeContext.LoadFunction(
                        "vkEnumerateDeviceExtensionProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pLayerName, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceExtensionProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateDeviceExtensionProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const char *")] sbyte* pLayerName,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        ExtensionProperties* pProperties
    ) =>
        DllImport.EnumerateDeviceExtensionProperties(
            physicalDevice,
            pLayerName,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumerateDeviceExtensionProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const char *")] Ref<sbyte> pLayerName,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<ExtensionProperties> pProperties
    )
    {
        fixed (ExtensionProperties* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (sbyte* __dsl_pLayerName = pLayerName)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).EnumerateDeviceExtensionProperties(
                    __dsl_physicalDevice,
                    __dsl_pLayerName,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceExtensionProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateDeviceExtensionProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const char *")] Ref<sbyte> pLayerName,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<ExtensionProperties> pProperties
    ) =>
        DllImport.EnumerateDeviceExtensionProperties(
            physicalDevice,
            pLayerName,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumerateDeviceLayerProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        LayerProperties* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, uint*, LayerProperties*, Result>)(
                _slots[417] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[417] = nativeContext.LoadFunction(
                        "vkEnumerateDeviceLayerProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceLayerProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateDeviceLayerProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        LayerProperties* pProperties
    ) => DllImport.EnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumerateDeviceLayerProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<LayerProperties> pProperties
    )
    {
        fixed (LayerProperties* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).EnumerateDeviceLayerProperties(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateDeviceLayerProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateDeviceLayerProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<LayerProperties> pProperties
    ) => DllImport.EnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumerateInstanceExtensionProperties(
        [NativeTypeName("const char *")] sbyte* pLayerName,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        ExtensionProperties* pProperties
    ) =>
        (
            (delegate* unmanaged<sbyte*, uint*, ExtensionProperties*, Result>)(
                _slots[418] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[418] = nativeContext.LoadFunction(
                        "vkEnumerateInstanceExtensionProperties",
                        "vulkan"
                    )
            )
        )(pLayerName, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceExtensionProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateInstanceExtensionProperties(
        [NativeTypeName("const char *")] sbyte* pLayerName,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        ExtensionProperties* pProperties
    ) => DllImport.EnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumerateInstanceExtensionProperties(
        [NativeTypeName("const char *")] Ref<sbyte> pLayerName,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<ExtensionProperties> pProperties
    )
    {
        fixed (ExtensionProperties* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (sbyte* __dsl_pLayerName = pLayerName)
        {
            return (Result)
                ((IVulkan)this).EnumerateInstanceExtensionProperties(
                    __dsl_pLayerName,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceExtensionProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateInstanceExtensionProperties(
        [NativeTypeName("const char *")] Ref<sbyte> pLayerName,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<ExtensionProperties> pProperties
    ) => DllImport.EnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumerateInstanceLayerProperties(
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        LayerProperties* pProperties
    ) =>
        (
            (delegate* unmanaged<uint*, LayerProperties*, Result>)(
                _slots[419] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[419] = nativeContext.LoadFunction(
                        "vkEnumerateInstanceLayerProperties",
                        "vulkan"
                    )
            )
        )(pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceLayerProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateInstanceLayerProperties(
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        LayerProperties* pProperties
    ) => DllImport.EnumerateInstanceLayerProperties(pPropertyCount, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumerateInstanceLayerProperties(
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<LayerProperties> pProperties
    )
    {
        fixed (LayerProperties* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        {
            return (Result)
                ((IVulkan)this).EnumerateInstanceLayerProperties(
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceLayerProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateInstanceLayerProperties(
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<LayerProperties> pProperties
    ) => DllImport.EnumerateInstanceLayerProperties(pPropertyCount, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumerateInstanceVersion([NativeTypeName("uint32_t *")] uint* pApiVersion) =>
        (
            (delegate* unmanaged<uint*, Result>)(
                _slots[420] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[420] = nativeContext.LoadFunction(
                        "vkEnumerateInstanceVersion",
                        "vulkan"
                    )
            )
        )(pApiVersion);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateInstanceVersion(
        [NativeTypeName("uint32_t *")] uint* pApiVersion
    ) => DllImport.EnumerateInstanceVersion(pApiVersion);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumerateInstanceVersion([NativeTypeName("uint32_t *")] Ref<uint> pApiVersion)
    {
        fixed (uint* __dsl_pApiVersion = pApiVersion)
        {
            return (Result)((IVulkan)this).EnumerateInstanceVersion(__dsl_pApiVersion);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumerateInstanceVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumerateInstanceVersion(
        [NativeTypeName("uint32_t *")] Ref<uint> pApiVersion
    ) => DllImport.EnumerateInstanceVersion(pApiVersion);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumeratePhysicalDeviceGroups(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceGroupCount,
        PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
    ) =>
        (
            (delegate* unmanaged<InstanceHandle*, uint*, PhysicalDeviceGroupProperties*, Result>)(
                _slots[421] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[421] = nativeContext.LoadFunction(
                        "vkEnumeratePhysicalDeviceGroups",
                        "vulkan"
                    )
            )
        )(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroups")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDeviceGroups(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceGroupCount,
        PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
    ) =>
        DllImport.EnumeratePhysicalDeviceGroups(
            instance,
            pPhysicalDeviceGroupCount,
            pPhysicalDeviceGroupProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumeratePhysicalDeviceGroups(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceGroupCount,
        Ref<PhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties
    )
    {
        fixed (
            PhysicalDeviceGroupProperties* __dsl_pPhysicalDeviceGroupProperties =
                pPhysicalDeviceGroupProperties
        )
        fixed (uint* __dsl_pPhysicalDeviceGroupCount = pPhysicalDeviceGroupCount)
        fixed (InstanceHandle* __dsl_instance = instance)
        {
            return (Result)
                ((IVulkan)this).EnumeratePhysicalDeviceGroups(
                    __dsl_instance,
                    __dsl_pPhysicalDeviceGroupCount,
                    __dsl_pPhysicalDeviceGroupProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroups")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDeviceGroups(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceGroupCount,
        Ref<PhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties
    ) =>
        DllImport.EnumeratePhysicalDeviceGroups(
            instance,
            pPhysicalDeviceGroupCount,
            pPhysicalDeviceGroupProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumeratePhysicalDeviceGroupsKHR(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceGroupCount,
        PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
    ) =>
        (
            (delegate* unmanaged<InstanceHandle*, uint*, PhysicalDeviceGroupProperties*, Result>)(
                _slots[422] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[422] = nativeContext.LoadFunction(
                        "vkEnumeratePhysicalDeviceGroupsKHR",
                        "vulkan"
                    )
            )
        )(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroupsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDeviceGroupsKHR(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceGroupCount,
        PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
    ) =>
        DllImport.EnumeratePhysicalDeviceGroupsKHR(
            instance,
            pPhysicalDeviceGroupCount,
            pPhysicalDeviceGroupProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumeratePhysicalDeviceGroupsKHR(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceGroupCount,
        Ref<PhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties
    )
    {
        fixed (
            PhysicalDeviceGroupProperties* __dsl_pPhysicalDeviceGroupProperties =
                pPhysicalDeviceGroupProperties
        )
        fixed (uint* __dsl_pPhysicalDeviceGroupCount = pPhysicalDeviceGroupCount)
        fixed (InstanceHandle* __dsl_instance = instance)
        {
            return (Result)
                ((IVulkan)this).EnumeratePhysicalDeviceGroupsKHR(
                    __dsl_instance,
                    __dsl_pPhysicalDeviceGroupCount,
                    __dsl_pPhysicalDeviceGroupProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_device_group_creation"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDeviceGroupsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDeviceGroupsKHR(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceGroupCount,
        Ref<PhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties
    ) =>
        DllImport.EnumeratePhysicalDeviceGroupsKHR(
            instance,
            pPhysicalDeviceGroupCount,
            pPhysicalDeviceGroupProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t *")] uint* pCounterCount,
        PerformanceCounterKHR* pCounters,
        PerformanceCounterDescriptionKHR* pCounterDescriptions
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                uint,
                uint*,
                PerformanceCounterKHR*,
                PerformanceCounterDescriptionKHR*,
                Result>)(
                _slots[423] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[423] = nativeContext.LoadFunction(
                        "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t *")] uint* pCounterCount,
        PerformanceCounterKHR* pCounters,
        PerformanceCounterDescriptionKHR* pCounterDescriptions
    ) =>
        DllImport.EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
            physicalDevice,
            queueFamilyIndex,
            pCounterCount,
            pCounters,
            pCounterDescriptions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t *")] Ref<uint> pCounterCount,
        Ref<PerformanceCounterKHR> pCounters,
        Ref<PerformanceCounterDescriptionKHR> pCounterDescriptions
    )
    {
        fixed (PerformanceCounterDescriptionKHR* __dsl_pCounterDescriptions = pCounterDescriptions)
        fixed (PerformanceCounterKHR* __dsl_pCounters = pCounters)
        fixed (uint* __dsl_pCounterCount = pCounterCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
                    __dsl_physicalDevice,
                    queueFamilyIndex,
                    __dsl_pCounterCount,
                    __dsl_pCounters,
                    __dsl_pCounterDescriptions
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t *")] Ref<uint> pCounterCount,
        Ref<PerformanceCounterKHR> pCounters,
        Ref<PerformanceCounterDescriptionKHR> pCounterDescriptions
    ) =>
        DllImport.EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
            physicalDevice,
            queueFamilyIndex,
            pCounterCount,
            pCounters,
            pCounterDescriptions
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumeratePhysicalDevices(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceCount,
        [NativeTypeName("VkPhysicalDevice *")] PhysicalDeviceHandle** pPhysicalDevices
    ) =>
        (
            (delegate* unmanaged<InstanceHandle*, uint*, PhysicalDeviceHandle**, Result>)(
                _slots[424] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[424] = nativeContext.LoadFunction(
                        "vkEnumeratePhysicalDevices",
                        "vulkan"
                    )
            )
        )(instance, pPhysicalDeviceCount, pPhysicalDevices);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDevices(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("uint32_t *")] uint* pPhysicalDeviceCount,
        [NativeTypeName("VkPhysicalDevice *")] PhysicalDeviceHandle** pPhysicalDevices
    ) => DllImport.EnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.EnumeratePhysicalDevices(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceCount,
        [NativeTypeName("VkPhysicalDevice *")] Ref2D<PhysicalDeviceHandle> pPhysicalDevices
    )
    {
        fixed (PhysicalDeviceHandle** __dsl_pPhysicalDevices = pPhysicalDevices)
        fixed (uint* __dsl_pPhysicalDeviceCount = pPhysicalDeviceCount)
        fixed (InstanceHandle* __dsl_instance = instance)
        {
            return (Result)
                ((IVulkan)this).EnumeratePhysicalDevices(
                    __dsl_instance,
                    __dsl_pPhysicalDeviceCount,
                    __dsl_pPhysicalDevices
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkEnumeratePhysicalDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result EnumeratePhysicalDevices(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("uint32_t *")] Ref<uint> pPhysicalDeviceCount,
        [NativeTypeName("VkPhysicalDevice *")] Ref2D<PhysicalDeviceHandle> pPhysicalDevices
    ) => DllImport.EnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.FlushMappedMemoryRanges(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] MappedMemoryRange* pMemoryRanges
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, uint, MappedMemoryRange*, Result>)(
                _slots[425] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[425] = nativeContext.LoadFunction(
                        "vkFlushMappedMemoryRanges",
                        "vulkan"
                    )
            )
        )(device, memoryRangeCount, pMemoryRanges);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkFlushMappedMemoryRanges")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result FlushMappedMemoryRanges(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] MappedMemoryRange* pMemoryRanges
    ) => DllImport.FlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.FlushMappedMemoryRanges(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] Ref<MappedMemoryRange> pMemoryRanges
    )
    {
        fixed (MappedMemoryRange* __dsl_pMemoryRanges = pMemoryRanges)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).FlushMappedMemoryRanges(
                    __dsl_device,
                    memoryRangeCount,
                    __dsl_pMemoryRanges
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFlushMappedMemoryRanges")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result FlushMappedMemoryRanges(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] Ref<MappedMemoryRange> pMemoryRanges
    ) => DllImport.FlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.FreeCommandBuffer(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
        [NativeTypeName("const VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
    )
    {
        fixed (CommandBufferHandle* __dsl_pCommandBuffers = pCommandBuffers)
        fixed (CommandPoolHandle* __dsl_commandPool = commandPool)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).FreeCommandBuffers(
                __dsl_device,
                __dsl_commandPool,
                1,
                (CommandBufferHandle**)&__dsl_pCommandBuffers
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFreeCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FreeCommandBuffer(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
        [NativeTypeName("const VkCommandBuffer *")] Ref<CommandBufferHandle> pCommandBuffers
    ) => DllImport.FreeCommandBuffer(device, commandPool, pCommandBuffers);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.FreeCommandBuffers(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle** pCommandBuffers
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                CommandPoolHandle*,
                uint,
                CommandBufferHandle**,
                void>)(
                _slots[426] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[426] = nativeContext.LoadFunction("vkFreeCommandBuffers", "vulkan")
            )
        )(device, commandPool, commandBufferCount, pCommandBuffers);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkFreeCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FreeCommandBuffers(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] CommandBufferHandle** pCommandBuffers
    ) => DllImport.FreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.FreeCommandBuffers(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] Ref2D<CommandBufferHandle> pCommandBuffers
    )
    {
        fixed (CommandBufferHandle** __dsl_pCommandBuffers = pCommandBuffers)
        fixed (CommandPoolHandle* __dsl_commandPool = commandPool)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).FreeCommandBuffers(
                __dsl_device,
                __dsl_commandPool,
                commandBufferCount,
                __dsl_pCommandBuffers
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFreeCommandBuffers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FreeCommandBuffers(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
        [NativeTypeName("uint32_t")] uint commandBufferCount,
        [NativeTypeName("const VkCommandBuffer *")] Ref2D<CommandBufferHandle> pCommandBuffers
    ) => DllImport.FreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.FreeDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle* descriptorPool,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] DescriptorSetHandle** pDescriptorSets
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DescriptorPoolHandle*,
                uint,
                DescriptorSetHandle**,
                Result>)(
                _slots[427] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[427] = nativeContext.LoadFunction("vkFreeDescriptorSets", "vulkan")
            )
        )(device, descriptorPool, descriptorSetCount, pDescriptorSets);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkFreeDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result FreeDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle* descriptorPool,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] DescriptorSetHandle** pDescriptorSets
    ) => DllImport.FreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.FreeDescriptorSets(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorPool")] Ref<DescriptorPoolHandle> descriptorPool,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] Ref2D<DescriptorSetHandle> pDescriptorSets
    )
    {
        fixed (DescriptorSetHandle** __dsl_pDescriptorSets = pDescriptorSets)
        fixed (DescriptorPoolHandle* __dsl_descriptorPool = descriptorPool)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).FreeDescriptorSets(
                    __dsl_device,
                    __dsl_descriptorPool,
                    descriptorSetCount,
                    __dsl_pDescriptorSets
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFreeDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result FreeDescriptorSets(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorPool")] Ref<DescriptorPoolHandle> descriptorPool,
        [NativeTypeName("uint32_t")] uint descriptorSetCount,
        [NativeTypeName("const VkDescriptorSet *")] Ref2D<DescriptorSetHandle> pDescriptorSets
    ) => DllImport.FreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.FreeMemory(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DeviceMemoryHandle*, AllocationCallbacks*, void>)(
                _slots[428] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[428] = nativeContext.LoadFunction("vkFreeMemory", "vulkan")
            )
        )(device, memory, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkFreeMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FreeMemory(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.FreeMemory(device, memory, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.FreeMemory(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DeviceMemoryHandle* __dsl_memory = memory)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).FreeMemory(__dsl_device, __dsl_memory, __dsl_pAllocator);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkFreeMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FreeMemory(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.FreeMemory(device, memory, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetAccelerationStructureBuildSizesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pBuildInfo,
        [NativeTypeName("const uint32_t *")] uint* pMaxPrimitiveCounts,
        AccelerationStructureBuildSizesInfoKHR* pSizeInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                AccelerationStructureBuildTypeKHR,
                AccelerationStructureBuildGeometryInfoKHR*,
                uint*,
                AccelerationStructureBuildSizesInfoKHR*,
                void>)(
                _slots[429] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[429] = nativeContext.LoadFunction(
                        "vkGetAccelerationStructureBuildSizesKHR",
                        "vulkan"
                    )
            )
        )(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureBuildSizesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetAccelerationStructureBuildSizesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            AccelerationStructureBuildGeometryInfoKHR* pBuildInfo,
        [NativeTypeName("const uint32_t *")] uint* pMaxPrimitiveCounts,
        AccelerationStructureBuildSizesInfoKHR* pSizeInfo
    ) =>
        DllImport.GetAccelerationStructureBuildSizesKHR(
            device,
            buildType,
            pBuildInfo,
            pMaxPrimitiveCounts,
            pSizeInfo
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetAccelerationStructureBuildSizesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pBuildInfo,
        [NativeTypeName("const uint32_t *")] Ref<uint> pMaxPrimitiveCounts,
        Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
    )
    {
        fixed (AccelerationStructureBuildSizesInfoKHR* __dsl_pSizeInfo = pSizeInfo)
        fixed (uint* __dsl_pMaxPrimitiveCounts = pMaxPrimitiveCounts)
        fixed (AccelerationStructureBuildGeometryInfoKHR* __dsl_pBuildInfo = pBuildInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetAccelerationStructureBuildSizesKHR(
                __dsl_device,
                buildType,
                __dsl_pBuildInfo,
                __dsl_pMaxPrimitiveCounts,
                __dsl_pSizeInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureBuildSizesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetAccelerationStructureBuildSizesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkAccelerationStructureBuildGeometryInfoKHR *")]
            Ref<AccelerationStructureBuildGeometryInfoKHR> pBuildInfo,
        [NativeTypeName("const uint32_t *")] Ref<uint> pMaxPrimitiveCounts,
        Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
    ) =>
        DllImport.GetAccelerationStructureBuildSizesKHR(
            device,
            buildType,
            pBuildInfo,
            pMaxPrimitiveCounts,
            pSizeInfo
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetAccelerationStructureDeviceAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAccelerationStructureDeviceAddressInfoKHR *")]
            AccelerationStructureDeviceAddressInfoKHR* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, AccelerationStructureDeviceAddressInfoKHR*, ulong>)(
                _slots[430] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[430] = nativeContext.LoadFunction(
                        "vkGetAccelerationStructureDeviceAddressKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureDeviceAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetAccelerationStructureDeviceAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAccelerationStructureDeviceAddressInfoKHR *")]
            AccelerationStructureDeviceAddressInfoKHR* pInfo
    ) => DllImport.GetAccelerationStructureDeviceAddressKHR(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetAccelerationStructureDeviceAddressKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAccelerationStructureDeviceAddressInfoKHR *")]
            Ref<AccelerationStructureDeviceAddressInfoKHR> pInfo
    )
    {
        fixed (AccelerationStructureDeviceAddressInfoKHR* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (ulong)
                ((IVulkan)this).GetAccelerationStructureDeviceAddressKHR(__dsl_device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureDeviceAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetAccelerationStructureDeviceAddressKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAccelerationStructureDeviceAddressInfoKHR *")]
            Ref<AccelerationStructureDeviceAddressInfoKHR> pInfo
    ) => DllImport.GetAccelerationStructureDeviceAddressKHR(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetAccelerationStructureHandleNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkAccelerationStructureNV")]
            AccelerationStructureNVHandle* accelerationStructure,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                AccelerationStructureNVHandle*,
                nuint,
                void*,
                Result>)(
                _slots[431] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[431] = nativeContext.LoadFunction(
                        "vkGetAccelerationStructureHandleNV",
                        "vulkan"
                    )
            )
        )(device, accelerationStructure, dataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureHandleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetAccelerationStructureHandleNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkAccelerationStructureNV")]
            AccelerationStructureNVHandle* accelerationStructure,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) => DllImport.GetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetAccelerationStructureHandleNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkAccelerationStructureNV")]
            Ref<AccelerationStructureNVHandle> accelerationStructure,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (AccelerationStructureNVHandle* __dsl_accelerationStructure = accelerationStructure)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetAccelerationStructureHandleNV(
                    __dsl_device,
                    __dsl_accelerationStructure,
                    dataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureHandleNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetAccelerationStructureHandleNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkAccelerationStructureNV")]
            Ref<AccelerationStructureNVHandle> accelerationStructure,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    ) => DllImport.GetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetAccelerationStructureMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAccelerationStructureMemoryRequirementsInfoNV *")]
            AccelerationStructureMemoryRequirementsInfoNV* pInfo,
        [NativeTypeName("VkMemoryRequirements2KHR *")] MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                AccelerationStructureMemoryRequirementsInfoNV*,
                MemoryRequirements2*,
                void>)(
                _slots[432] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[432] = nativeContext.LoadFunction(
                        "vkGetAccelerationStructureMemoryRequirementsNV",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetAccelerationStructureMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAccelerationStructureMemoryRequirementsInfoNV *")]
            AccelerationStructureMemoryRequirementsInfoNV* pInfo,
        [NativeTypeName("VkMemoryRequirements2KHR *")] MemoryRequirements2* pMemoryRequirements
    ) => DllImport.GetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetAccelerationStructureMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAccelerationStructureMemoryRequirementsInfoNV *")]
            Ref<AccelerationStructureMemoryRequirementsInfoNV> pInfo,
        [NativeTypeName("VkMemoryRequirements2KHR *")] Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (AccelerationStructureMemoryRequirementsInfoNV* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetAccelerationStructureMemoryRequirementsNV(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetAccelerationStructureMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetAccelerationStructureMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAccelerationStructureMemoryRequirementsInfoNV *")]
            Ref<AccelerationStructureMemoryRequirementsInfoNV> pInfo,
        [NativeTypeName("VkMemoryRequirements2KHR *")] Ref<MemoryRequirements2> pMemoryRequirements
    ) => DllImport.GetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAccelerationStructureCaptureDescriptorDataInfoEXT *")]
            AccelerationStructureCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                AccelerationStructureCaptureDescriptorDataInfoEXT*,
                void*,
                Result>)(
                _slots[433] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[433] = nativeContext.LoadFunction(
                        "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT",
                        "vulkan"
                    )
            )
        )(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_EXT_descriptor_buffer+VK_KHR_acceleration_structure",
            "VK_EXT_descriptor_buffer+VK_NV_ray_tracing",
        ],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAccelerationStructureCaptureDescriptorDataInfoEXT *")]
            AccelerationStructureCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) => DllImport.GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAccelerationStructureCaptureDescriptorDataInfoEXT *")]
            Ref<AccelerationStructureCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (AccelerationStructureCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_EXT_descriptor_buffer+VK_KHR_acceleration_structure",
            "VK_EXT_descriptor_buffer+VK_NV_ray_tracing",
        ],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAccelerationStructureCaptureDescriptorDataInfoEXT *")]
            Ref<AccelerationStructureCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    ) => DllImport.GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetBufferDeviceAddress(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, BufferDeviceAddressInfo*, ulong>)(
                _slots[434] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[434] = nativeContext.LoadFunction("vkGetBufferDeviceAddress", "vulkan")
            )
        )(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferDeviceAddress(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) => DllImport.GetBufferDeviceAddress(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetBufferDeviceAddress(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    )
    {
        fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (ulong)((IVulkan)this).GetBufferDeviceAddress(__dsl_device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferDeviceAddress(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    ) => DllImport.GetBufferDeviceAddress(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetBufferDeviceAddressEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, BufferDeviceAddressInfo*, ulong>)(
                _slots[435] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[435] = nativeContext.LoadFunction(
                        "vkGetBufferDeviceAddressEXT",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_buffer_device_address"],
        ImpliesSets = [
            "VK_EXT_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_EXT_buffer_device_address+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferDeviceAddressEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) => DllImport.GetBufferDeviceAddressEXT(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetBufferDeviceAddressEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    )
    {
        fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (ulong)((IVulkan)this).GetBufferDeviceAddressEXT(__dsl_device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_buffer_device_address"],
        ImpliesSets = [
            "VK_EXT_buffer_device_address+VK_KHR_get_physical_device_properties2",
            "VK_EXT_buffer_device_address+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferDeviceAddressEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    ) => DllImport.GetBufferDeviceAddressEXT(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetBufferDeviceAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, BufferDeviceAddressInfo*, ulong>)(
                _slots[436] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[436] = nativeContext.LoadFunction(
                        "vkGetBufferDeviceAddressKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferDeviceAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) => DllImport.GetBufferDeviceAddressKHR(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetBufferDeviceAddressKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    )
    {
        fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (ulong)((IVulkan)this).GetBufferDeviceAddressKHR(__dsl_device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferDeviceAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferDeviceAddressKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    ) => DllImport.GetBufferDeviceAddressKHR(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        MemoryRequirements* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, BufferHandle*, MemoryRequirements*, void>)(
                _slots[437] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[437] = nativeContext.LoadFunction(
                        "vkGetBufferMemoryRequirements",
                        "vulkan"
                    )
            )
        )(device, buffer, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkBuffer")] BufferHandle* buffer,
        MemoryRequirements* pMemoryRequirements
    ) => DllImport.GetBufferMemoryRequirements(device, buffer, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        Ref<MemoryRequirements> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (BufferHandle* __dsl_buffer = buffer)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetBufferMemoryRequirements(
                __dsl_device,
                __dsl_buffer,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkBuffer")] Ref<BufferHandle> buffer,
        Ref<MemoryRequirements> pMemoryRequirements
    ) => DllImport.GetBufferMemoryRequirements(device, buffer, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetBufferMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            BufferMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                BufferMemoryRequirementsInfo2*,
                MemoryRequirements2*,
                void>)(
                _slots[438] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[438] = nativeContext.LoadFunction(
                        "vkGetBufferMemoryRequirements2",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetBufferMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            BufferMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => DllImport.GetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetBufferMemoryRequirements2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            Ref<BufferMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (BufferMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetBufferMemoryRequirements2(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetBufferMemoryRequirements2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            Ref<BufferMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => DllImport.GetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetBufferMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            BufferMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                BufferMemoryRequirementsInfo2*,
                MemoryRequirements2*,
                void>)(
                _slots[439] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[439] = nativeContext.LoadFunction(
                        "vkGetBufferMemoryRequirements2KHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetBufferMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            BufferMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => DllImport.GetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetBufferMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            Ref<BufferMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (BufferMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetBufferMemoryRequirements2KHR(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetBufferMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferMemoryRequirementsInfo2 *")]
            Ref<BufferMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => DllImport.GetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetBufferOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, BufferDeviceAddressInfo*, ulong>)(
                _slots[440] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[440] = nativeContext.LoadFunction(
                        "vkGetBufferOpaqueCaptureAddress",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) => DllImport.GetBufferOpaqueCaptureAddress(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetBufferOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    )
    {
        fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (ulong)((IVulkan)this).GetBufferOpaqueCaptureAddress(__dsl_device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    ) => DllImport.GetBufferOpaqueCaptureAddress(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetBufferOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, BufferDeviceAddressInfo*, ulong>)(
                _slots[441] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[441] = nativeContext.LoadFunction(
                        "vkGetBufferOpaqueCaptureAddressKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] BufferDeviceAddressInfo* pInfo
    ) => DllImport.GetBufferOpaqueCaptureAddressKHR(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetBufferOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    )
    {
        fixed (BufferDeviceAddressInfo* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (ulong)
                ((IVulkan)this).GetBufferOpaqueCaptureAddressKHR(__dsl_device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetBufferOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferDeviceAddressInfo *")] Ref<BufferDeviceAddressInfo> pInfo
    ) => DllImport.GetBufferOpaqueCaptureAddressKHR(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetBufferOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferCaptureDescriptorDataInfoEXT *")]
            BufferCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                BufferCaptureDescriptorDataInfoEXT*,
                void*,
                Result>)(
                _slots[442] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[442] = nativeContext.LoadFunction(
                        "vkGetBufferOpaqueCaptureDescriptorDataEXT",
                        "vulkan"
                    )
            )
        )(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetBufferOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkBufferCaptureDescriptorDataInfoEXT *")]
            BufferCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) => DllImport.GetBufferOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetBufferOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferCaptureDescriptorDataInfoEXT *")]
            Ref<BufferCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (BufferCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetBufferOpaqueCaptureDescriptorDataEXT(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetBufferOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetBufferOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkBufferCaptureDescriptorDataInfoEXT *")]
            Ref<BufferCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    ) => DllImport.GetBufferOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetCalibratedTimestampsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            CalibratedTimestampInfoKHR* pTimestampInfos,
        [NativeTypeName("uint64_t *")] ulong* pTimestamps,
        [NativeTypeName("uint64_t *")] ulong* pMaxDeviation
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                uint,
                CalibratedTimestampInfoKHR*,
                ulong*,
                ulong*,
                Result>)(
                _slots[443] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[443] = nativeContext.LoadFunction(
                        "vkGetCalibratedTimestampsEXT",
                        "vulkan"
                    )
            )
        )(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetCalibratedTimestampsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            CalibratedTimestampInfoKHR* pTimestampInfos,
        [NativeTypeName("uint64_t *")] ulong* pTimestamps,
        [NativeTypeName("uint64_t *")] ulong* pMaxDeviation
    ) =>
        DllImport.GetCalibratedTimestampsEXT(
            device,
            timestampCount,
            pTimestampInfos,
            pTimestamps,
            pMaxDeviation
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetCalibratedTimestampsEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            Ref<CalibratedTimestampInfoKHR> pTimestampInfos,
        [NativeTypeName("uint64_t *")] Ref<ulong> pTimestamps,
        [NativeTypeName("uint64_t *")] Ref<ulong> pMaxDeviation
    )
    {
        fixed (ulong* __dsl_pMaxDeviation = pMaxDeviation)
        fixed (ulong* __dsl_pTimestamps = pTimestamps)
        fixed (CalibratedTimestampInfoKHR* __dsl_pTimestampInfos = pTimestampInfos)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetCalibratedTimestampsEXT(
                    __dsl_device,
                    timestampCount,
                    __dsl_pTimestampInfos,
                    __dsl_pTimestamps,
                    __dsl_pMaxDeviation
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetCalibratedTimestampsEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            Ref<CalibratedTimestampInfoKHR> pTimestampInfos,
        [NativeTypeName("uint64_t *")] Ref<ulong> pTimestamps,
        [NativeTypeName("uint64_t *")] Ref<ulong> pMaxDeviation
    ) =>
        DllImport.GetCalibratedTimestampsEXT(
            device,
            timestampCount,
            pTimestampInfos,
            pTimestamps,
            pMaxDeviation
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetCalibratedTimestampsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            CalibratedTimestampInfoKHR* pTimestampInfos,
        [NativeTypeName("uint64_t *")] ulong* pTimestamps,
        [NativeTypeName("uint64_t *")] ulong* pMaxDeviation
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                uint,
                CalibratedTimestampInfoKHR*,
                ulong*,
                ulong*,
                Result>)(
                _slots[444] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[444] = nativeContext.LoadFunction(
                        "vkGetCalibratedTimestampsKHR",
                        "vulkan"
                    )
            )
        )(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetCalibratedTimestampsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            CalibratedTimestampInfoKHR* pTimestampInfos,
        [NativeTypeName("uint64_t *")] ulong* pTimestamps,
        [NativeTypeName("uint64_t *")] ulong* pMaxDeviation
    ) =>
        DllImport.GetCalibratedTimestampsKHR(
            device,
            timestampCount,
            pTimestampInfos,
            pTimestamps,
            pMaxDeviation
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetCalibratedTimestampsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            Ref<CalibratedTimestampInfoKHR> pTimestampInfos,
        [NativeTypeName("uint64_t *")] Ref<ulong> pTimestamps,
        [NativeTypeName("uint64_t *")] Ref<ulong> pMaxDeviation
    )
    {
        fixed (ulong* __dsl_pMaxDeviation = pMaxDeviation)
        fixed (ulong* __dsl_pTimestamps = pTimestamps)
        fixed (CalibratedTimestampInfoKHR* __dsl_pTimestampInfos = pTimestampInfos)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetCalibratedTimestampsKHR(
                    __dsl_device,
                    timestampCount,
                    __dsl_pTimestampInfos,
                    __dsl_pTimestamps,
                    __dsl_pMaxDeviation
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetCalibratedTimestampsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetCalibratedTimestampsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint timestampCount,
        [NativeTypeName("const VkCalibratedTimestampInfoKHR *")]
            Ref<CalibratedTimestampInfoKHR> pTimestampInfos,
        [NativeTypeName("uint64_t *")] Ref<ulong> pTimestamps,
        [NativeTypeName("uint64_t *")] Ref<ulong> pMaxDeviation
    ) =>
        DllImport.GetCalibratedTimestampsKHR(
            device,
            timestampCount,
            pTimestampInfos,
            pTimestamps,
            pMaxDeviation
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetClusterAccelerationStructureBuildSizesNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkClusterAccelerationStructureInputInfoNV *")]
            ClusterAccelerationStructureInputInfoNV* pInfo,
        AccelerationStructureBuildSizesInfoKHR* pSizeInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ClusterAccelerationStructureInputInfoNV*,
                AccelerationStructureBuildSizesInfoKHR*,
                void>)(
                _slots[445] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[445] = nativeContext.LoadFunction(
                        "vkGetClusterAccelerationStructureBuildSizesNV",
                        "vulkan"
                    )
            )
        )(device, pInfo, pSizeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetClusterAccelerationStructureBuildSizesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetClusterAccelerationStructureBuildSizesNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkClusterAccelerationStructureInputInfoNV *")]
            ClusterAccelerationStructureInputInfoNV* pInfo,
        AccelerationStructureBuildSizesInfoKHR* pSizeInfo
    ) => DllImport.GetClusterAccelerationStructureBuildSizesNV(device, pInfo, pSizeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetClusterAccelerationStructureBuildSizesNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkClusterAccelerationStructureInputInfoNV *")]
            Ref<ClusterAccelerationStructureInputInfoNV> pInfo,
        Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
    )
    {
        fixed (AccelerationStructureBuildSizesInfoKHR* __dsl_pSizeInfo = pSizeInfo)
        fixed (ClusterAccelerationStructureInputInfoNV* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetClusterAccelerationStructureBuildSizesNV(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pSizeInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cluster_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetClusterAccelerationStructureBuildSizesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetClusterAccelerationStructureBuildSizesNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkClusterAccelerationStructureInputInfoNV *")]
            Ref<ClusterAccelerationStructureInputInfoNV> pInfo,
        Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
    ) => DllImport.GetClusterAccelerationStructureBuildSizesNV(device, pInfo, pSizeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetCudaModuleCacheNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCudaModuleNV")] CudaModuleNVHandle* module,
        [NativeTypeName("size_t *")] nuint* pCacheSize,
        void* pCacheData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CudaModuleNVHandle*, nuint*, void*, Result>)(
                _slots[446] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[446] = nativeContext.LoadFunction("vkGetCudaModuleCacheNV", "vulkan")
            )
        )(device, module, pCacheSize, pCacheData);

    [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetCudaModuleCacheNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetCudaModuleCacheNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCudaModuleNV")] CudaModuleNVHandle* module,
        [NativeTypeName("size_t *")] nuint* pCacheSize,
        void* pCacheData
    ) => DllImport.GetCudaModuleCacheNV(device, module, pCacheSize, pCacheData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetCudaModuleCacheNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCudaModuleNV")] Ref<CudaModuleNVHandle> module,
        [NativeTypeName("size_t *")] Ref<nuint> pCacheSize,
        Ref pCacheData
    )
    {
        fixed (void* __dsl_pCacheData = pCacheData)
        fixed (nuint* __dsl_pCacheSize = pCacheSize)
        fixed (CudaModuleNVHandle* __dsl_module = module)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetCudaModuleCacheNV(
                    __dsl_device,
                    __dsl_module,
                    __dsl_pCacheSize,
                    __dsl_pCacheData
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_cuda_kernel_launch"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetCudaModuleCacheNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetCudaModuleCacheNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCudaModuleNV")] Ref<CudaModuleNVHandle> module,
        [NativeTypeName("size_t *")] Ref<nuint> pCacheSize,
        Ref pCacheData
    ) => DllImport.GetCudaModuleCacheNV(device, module, pCacheSize, pCacheData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint IVulkan.GetDeferredOperationMaxConcurrencyKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* operation
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DeferredOperationKHRHandle*, uint>)(
                _slots[447] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[447] = nativeContext.LoadFunction(
                        "vkGetDeferredOperationMaxConcurrencyKHR",
                        "vulkan"
                    )
            )
        )(device, operation);

    [return: NativeTypeName("uint32_t")]
    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeferredOperationMaxConcurrencyKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDeferredOperationMaxConcurrencyKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* operation
    ) => DllImport.GetDeferredOperationMaxConcurrencyKHR(device, operation);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint IVulkan.GetDeferredOperationMaxConcurrencyKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")] Ref<DeferredOperationKHRHandle> operation
    )
    {
        fixed (DeferredOperationKHRHandle* __dsl_operation = operation)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (uint)
                ((IVulkan)this).GetDeferredOperationMaxConcurrencyKHR(
                    __dsl_device,
                    __dsl_operation
                );
        }
    }

    [return: NativeTypeName("uint32_t")]
    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeferredOperationMaxConcurrencyKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDeferredOperationMaxConcurrencyKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")] Ref<DeferredOperationKHRHandle> operation
    ) => DllImport.GetDeferredOperationMaxConcurrencyKHR(device, operation);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDeferredOperationResultKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* operation
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DeferredOperationKHRHandle*, Result>)(
                _slots[448] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[448] = nativeContext.LoadFunction(
                        "vkGetDeferredOperationResultKHR",
                        "vulkan"
                    )
            )
        )(device, operation);

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeferredOperationResultKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeferredOperationResultKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeferredOperationKHR")] DeferredOperationKHRHandle* operation
    ) => DllImport.GetDeferredOperationResultKHR(device, operation);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDeferredOperationResultKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")] Ref<DeferredOperationKHRHandle> operation
    )
    {
        fixed (DeferredOperationKHRHandle* __dsl_operation = operation)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetDeferredOperationResultKHR(__dsl_device, __dsl_operation);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_deferred_host_operations"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeferredOperationResultKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeferredOperationResultKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeferredOperationKHR")] Ref<DeferredOperationKHRHandle> operation
    ) => DllImport.GetDeferredOperationResultKHR(device, operation);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDescriptorEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorGetInfoEXT *")] DescriptorGetInfoEXT* pDescriptorInfo,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pDescriptor
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DescriptorGetInfoEXT*, nuint, void*, void>)(
                _slots[449] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[449] = nativeContext.LoadFunction("vkGetDescriptorEXT", "vulkan")
            )
        )(device, pDescriptorInfo, dataSize, pDescriptor);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorGetInfoEXT *")] DescriptorGetInfoEXT* pDescriptorInfo,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pDescriptor
    ) => DllImport.GetDescriptorEXT(device, pDescriptorInfo, dataSize, pDescriptor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDescriptorEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorGetInfoEXT *")]
            Ref<DescriptorGetInfoEXT> pDescriptorInfo,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pDescriptor
    )
    {
        fixed (void* __dsl_pDescriptor = pDescriptor)
        fixed (DescriptorGetInfoEXT* __dsl_pDescriptorInfo = pDescriptorInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDescriptorEXT(
                __dsl_device,
                __dsl_pDescriptorInfo,
                dataSize,
                __dsl_pDescriptor
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorGetInfoEXT *")]
            Ref<DescriptorGetInfoEXT> pDescriptorInfo,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pDescriptor
    ) => DllImport.GetDescriptorEXT(device, pDescriptorInfo, dataSize, pDescriptor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDescriptorSetHostMappingValve(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle* descriptorSet,
        void** ppData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DescriptorSetHandle*, void**, void>)(
                _slots[450] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[450] = nativeContext.LoadFunction(
                        "vkGetDescriptorSetHostMappingVALVE",
                        "vulkan"
                    )
            )
        )(device, descriptorSet, ppData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetHostMappingVALVE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetHostMappingValve(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle* descriptorSet,
        void** ppData
    ) => DllImport.GetDescriptorSetHostMappingValve(device, descriptorSet, ppData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDescriptorSetHostMappingValve(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorSet")] Ref<DescriptorSetHandle> descriptorSet,
        Ref2D ppData
    )
    {
        fixed (void** __dsl_ppData = ppData)
        fixed (DescriptorSetHandle* __dsl_descriptorSet = descriptorSet)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDescriptorSetHostMappingValve(
                __dsl_device,
                __dsl_descriptorSet,
                __dsl_ppData
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetHostMappingVALVE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetHostMappingValve(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorSet")] Ref<DescriptorSetHandle> descriptorSet,
        Ref2D ppData
    ) => DllImport.GetDescriptorSetHostMappingValve(device, descriptorSet, ppData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDescriptorSetLayoutBindingOffsetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint binding,
        [NativeTypeName("VkDeviceSize *")] ulong* pOffset
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DescriptorSetLayoutHandle*, uint, ulong*, void>)(
                _slots[451] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[451] = nativeContext.LoadFunction(
                        "vkGetDescriptorSetLayoutBindingOffsetEXT",
                        "vulkan"
                    )
            )
        )(device, layout, binding, pOffset);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutBindingOffsetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutBindingOffsetEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle* layout,
        [NativeTypeName("uint32_t")] uint binding,
        [NativeTypeName("VkDeviceSize *")] ulong* pOffset
    ) => DllImport.GetDescriptorSetLayoutBindingOffsetEXT(device, layout, binding, pOffset);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDescriptorSetLayoutBindingOffsetEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorSetLayout")] Ref<DescriptorSetLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint binding,
        [NativeTypeName("VkDeviceSize *")] Ref<ulong> pOffset
    )
    {
        fixed (ulong* __dsl_pOffset = pOffset)
        fixed (DescriptorSetLayoutHandle* __dsl_layout = layout)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDescriptorSetLayoutBindingOffsetEXT(
                __dsl_device,
                __dsl_layout,
                binding,
                __dsl_pOffset
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutBindingOffsetEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutBindingOffsetEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorSetLayout")] Ref<DescriptorSetLayoutHandle> layout,
        [NativeTypeName("uint32_t")] uint binding,
        [NativeTypeName("VkDeviceSize *")] Ref<ulong> pOffset
    ) => DllImport.GetDescriptorSetLayoutBindingOffsetEXT(device, layout, binding, pOffset);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDescriptorSetLayoutHostMappingInfoValve(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorSetBindingReferenceVALVE *")]
            DescriptorSetBindingReferenceValve* pBindingReference,
        DescriptorSetLayoutHostMappingInfoValve* pHostMapping
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DescriptorSetBindingReferenceValve*,
                DescriptorSetLayoutHostMappingInfoValve*,
                void>)(
                _slots[452] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[452] = nativeContext.LoadFunction(
                        "vkGetDescriptorSetLayoutHostMappingInfoVALVE",
                        "vulkan"
                    )
            )
        )(device, pBindingReference, pHostMapping);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutHostMappingInfoVALVE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutHostMappingInfoValve(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorSetBindingReferenceVALVE *")]
            DescriptorSetBindingReferenceValve* pBindingReference,
        DescriptorSetLayoutHostMappingInfoValve* pHostMapping
    ) =>
        DllImport.GetDescriptorSetLayoutHostMappingInfoValve(
            device,
            pBindingReference,
            pHostMapping
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDescriptorSetLayoutHostMappingInfoValve(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorSetBindingReferenceVALVE *")]
            Ref<DescriptorSetBindingReferenceValve> pBindingReference,
        Ref<DescriptorSetLayoutHostMappingInfoValve> pHostMapping
    )
    {
        fixed (DescriptorSetLayoutHostMappingInfoValve* __dsl_pHostMapping = pHostMapping)
        fixed (DescriptorSetBindingReferenceValve* __dsl_pBindingReference = pBindingReference)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDescriptorSetLayoutHostMappingInfoValve(
                __dsl_device,
                __dsl_pBindingReference,
                __dsl_pHostMapping
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VALVE_descriptor_set_host_mapping"],
        ImpliesSets = [
            "VK_VALVE_descriptor_set_host_mapping+VK_KHR_get_physical_device_properties2",
            "VK_VALVE_descriptor_set_host_mapping+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutHostMappingInfoVALVE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutHostMappingInfoValve(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorSetBindingReferenceVALVE *")]
            Ref<DescriptorSetBindingReferenceValve> pBindingReference,
        Ref<DescriptorSetLayoutHostMappingInfoValve> pHostMapping
    ) =>
        DllImport.GetDescriptorSetLayoutHostMappingInfoValve(
            device,
            pBindingReference,
            pHostMapping
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDescriptorSetLayoutSizeEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle* layout,
        [NativeTypeName("VkDeviceSize *")] ulong* pLayoutSizeInBytes
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DescriptorSetLayoutHandle*, ulong*, void>)(
                _slots[453] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[453] = nativeContext.LoadFunction(
                        "vkGetDescriptorSetLayoutSizeEXT",
                        "vulkan"
                    )
            )
        )(device, layout, pLayoutSizeInBytes);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSizeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutSizeEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorSetLayout")] DescriptorSetLayoutHandle* layout,
        [NativeTypeName("VkDeviceSize *")] ulong* pLayoutSizeInBytes
    ) => DllImport.GetDescriptorSetLayoutSizeEXT(device, layout, pLayoutSizeInBytes);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDescriptorSetLayoutSizeEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorSetLayout")] Ref<DescriptorSetLayoutHandle> layout,
        [NativeTypeName("VkDeviceSize *")] Ref<ulong> pLayoutSizeInBytes
    )
    {
        fixed (ulong* __dsl_pLayoutSizeInBytes = pLayoutSizeInBytes)
        fixed (DescriptorSetLayoutHandle* __dsl_layout = layout)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDescriptorSetLayoutSizeEXT(
                __dsl_device,
                __dsl_layout,
                __dsl_pLayoutSizeInBytes
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSizeEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutSizeEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorSetLayout")] Ref<DescriptorSetLayoutHandle> layout,
        [NativeTypeName("VkDeviceSize *")] Ref<ulong> pLayoutSizeInBytes
    ) => DllImport.GetDescriptorSetLayoutSizeEXT(device, layout, pLayoutSizeInBytes);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDescriptorSetLayoutSupport(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            DescriptorSetLayoutCreateInfo* pCreateInfo,
        DescriptorSetLayoutSupport* pSupport
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DescriptorSetLayoutCreateInfo*,
                DescriptorSetLayoutSupport*,
                void>)(
                _slots[454] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[454] = nativeContext.LoadFunction(
                        "vkGetDescriptorSetLayoutSupport",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pSupport);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutSupport(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            DescriptorSetLayoutCreateInfo* pCreateInfo,
        DescriptorSetLayoutSupport* pSupport
    ) => DllImport.GetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDescriptorSetLayoutSupport(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
        Ref<DescriptorSetLayoutSupport> pSupport
    )
    {
        fixed (DescriptorSetLayoutSupport* __dsl_pSupport = pSupport)
        fixed (DescriptorSetLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDescriptorSetLayoutSupport(
                __dsl_device,
                __dsl_pCreateInfo,
                __dsl_pSupport
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutSupport(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
        Ref<DescriptorSetLayoutSupport> pSupport
    ) => DllImport.GetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDescriptorSetLayoutSupportKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            DescriptorSetLayoutCreateInfo* pCreateInfo,
        DescriptorSetLayoutSupport* pSupport
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DescriptorSetLayoutCreateInfo*,
                DescriptorSetLayoutSupport*,
                void>)(
                _slots[455] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[455] = nativeContext.LoadFunction(
                        "vkGetDescriptorSetLayoutSupportKHR",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pSupport);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance3"],
        ImpliesSets = [
            "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
            "VK_KHR_maintenance3+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupportKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutSupportKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            DescriptorSetLayoutCreateInfo* pCreateInfo,
        DescriptorSetLayoutSupport* pSupport
    ) => DllImport.GetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDescriptorSetLayoutSupportKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
        Ref<DescriptorSetLayoutSupport> pSupport
    )
    {
        fixed (DescriptorSetLayoutSupport* __dsl_pSupport = pSupport)
        fixed (DescriptorSetLayoutCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDescriptorSetLayoutSupportKHR(
                __dsl_device,
                __dsl_pCreateInfo,
                __dsl_pSupport
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance3"],
        ImpliesSets = [
            "VK_KHR_maintenance3+VK_KHR_get_physical_device_properties2",
            "VK_KHR_maintenance3+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDescriptorSetLayoutSupportKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDescriptorSetLayoutSupportKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDescriptorSetLayoutCreateInfo *")]
            Ref<DescriptorSetLayoutCreateInfo> pCreateInfo,
        Ref<DescriptorSetLayoutSupport> pSupport
    ) => DllImport.GetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceAccelerationStructureCompatibilityKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAccelerationStructureVersionInfoKHR *")]
            AccelerationStructureVersionInfoKHR* pVersionInfo,
        AccelerationStructureCompatibilityKHR* pCompatibility
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                AccelerationStructureVersionInfoKHR*,
                AccelerationStructureCompatibilityKHR*,
                void>)(
                _slots[456] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[456] = nativeContext.LoadFunction(
                        "vkGetDeviceAccelerationStructureCompatibilityKHR",
                        "vulkan"
                    )
            )
        )(device, pVersionInfo, pCompatibility);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceAccelerationStructureCompatibilityKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceAccelerationStructureCompatibilityKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkAccelerationStructureVersionInfoKHR *")]
            AccelerationStructureVersionInfoKHR* pVersionInfo,
        AccelerationStructureCompatibilityKHR* pCompatibility
    ) =>
        DllImport.GetDeviceAccelerationStructureCompatibilityKHR(
            device,
            pVersionInfo,
            pCompatibility
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceAccelerationStructureCompatibilityKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAccelerationStructureVersionInfoKHR *")]
            Ref<AccelerationStructureVersionInfoKHR> pVersionInfo,
        Ref<AccelerationStructureCompatibilityKHR> pCompatibility
    )
    {
        fixed (AccelerationStructureCompatibilityKHR* __dsl_pCompatibility = pCompatibility)
        fixed (AccelerationStructureVersionInfoKHR* __dsl_pVersionInfo = pVersionInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceAccelerationStructureCompatibilityKHR(
                __dsl_device,
                __dsl_pVersionInfo,
                __dsl_pCompatibility
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceAccelerationStructureCompatibilityKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceAccelerationStructureCompatibilityKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkAccelerationStructureVersionInfoKHR *")]
            Ref<AccelerationStructureVersionInfoKHR> pVersionInfo,
        Ref<AccelerationStructureCompatibilityKHR> pCompatibility
    ) =>
        DllImport.GetDeviceAccelerationStructureCompatibilityKHR(
            device,
            pVersionInfo,
            pCompatibility
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            DeviceBufferMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeviceBufferMemoryRequirements*,
                MemoryRequirements2*,
                void>)(
                _slots[457] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[457] = nativeContext.LoadFunction(
                        "vkGetDeviceBufferMemoryRequirements",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            DeviceBufferMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => DllImport.GetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            Ref<DeviceBufferMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (DeviceBufferMemoryRequirements* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceBufferMemoryRequirements(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceBufferMemoryRequirements(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            Ref<DeviceBufferMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => DllImport.GetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceBufferMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            DeviceBufferMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeviceBufferMemoryRequirements*,
                MemoryRequirements2*,
                void>)(
                _slots[458] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[458] = nativeContext.LoadFunction(
                        "vkGetDeviceBufferMemoryRequirementsKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceBufferMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            DeviceBufferMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => DllImport.GetDeviceBufferMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceBufferMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            Ref<DeviceBufferMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (DeviceBufferMemoryRequirements* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceBufferMemoryRequirementsKHR(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceBufferMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceBufferMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceBufferMemoryRequirements *")]
            Ref<DeviceBufferMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => DllImport.GetDeviceBufferMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDeviceFaultInfoEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        DeviceFaultCountsEXT* pFaultCounts,
        DeviceFaultInfoEXT* pFaultInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeviceFaultCountsEXT*,
                DeviceFaultInfoEXT*,
                Result>)(
                _slots[459] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[459] = nativeContext.LoadFunction("vkGetDeviceFaultInfoEXT", "vulkan")
            )
        )(device, pFaultCounts, pFaultInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_fault"],
        ImpliesSets = [
            "VK_EXT_device_fault+VK_KHR_get_physical_device_properties2",
            "VK_EXT_device_fault+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceFaultInfoEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceFaultInfoEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        DeviceFaultCountsEXT* pFaultCounts,
        DeviceFaultInfoEXT* pFaultInfo
    ) => DllImport.GetDeviceFaultInfoEXT(device, pFaultCounts, pFaultInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDeviceFaultInfoEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        Ref<DeviceFaultCountsEXT> pFaultCounts,
        Ref<DeviceFaultInfoEXT> pFaultInfo
    )
    {
        fixed (DeviceFaultInfoEXT* __dsl_pFaultInfo = pFaultInfo)
        fixed (DeviceFaultCountsEXT* __dsl_pFaultCounts = pFaultCounts)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetDeviceFaultInfoEXT(
                    __dsl_device,
                    __dsl_pFaultCounts,
                    __dsl_pFaultInfo
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_fault"],
        ImpliesSets = [
            "VK_EXT_device_fault+VK_KHR_get_physical_device_properties2",
            "VK_EXT_device_fault+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceFaultInfoEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceFaultInfoEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        Ref<DeviceFaultCountsEXT> pFaultCounts,
        Ref<DeviceFaultInfoEXT> pFaultInfo
    ) => DllImport.GetDeviceFaultInfoEXT(device, pFaultCounts, pFaultInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceGroupPeerMemoryFeatures(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")] uint* pPeerMemoryFeatures
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, uint, uint, uint, uint*, void>)(
                _slots[460] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[460] = nativeContext.LoadFunction(
                        "vkGetDeviceGroupPeerMemoryFeatures",
                        "vulkan"
                    )
            )
        )(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceGroupPeerMemoryFeatures(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")] uint* pPeerMemoryFeatures
    ) =>
        DllImport.GetDeviceGroupPeerMemoryFeatures(
            device,
            heapIndex,
            localDeviceIndex,
            remoteDeviceIndex,
            pPeerMemoryFeatures
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceGroupPeerMemoryFeatures(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")] Ref<uint> pPeerMemoryFeatures
    )
    {
        fixed (uint* __dsl_pPeerMemoryFeatures = pPeerMemoryFeatures)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceGroupPeerMemoryFeatures(
                __dsl_device,
                heapIndex,
                localDeviceIndex,
                remoteDeviceIndex,
                __dsl_pPeerMemoryFeatures
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceGroupPeerMemoryFeatures(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")] Ref<uint> pPeerMemoryFeatures
    ) =>
        DllImport.GetDeviceGroupPeerMemoryFeatures(
            device,
            heapIndex,
            localDeviceIndex,
            remoteDeviceIndex,
            pPeerMemoryFeatures
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceGroupPeerMemoryFeaturesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")] uint* pPeerMemoryFeatures
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, uint, uint, uint, uint*, void>)(
                _slots[461] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[461] = nativeContext.LoadFunction(
                        "vkGetDeviceGroupPeerMemoryFeaturesKHR",
                        "vulkan"
                    )
            )
        )(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeaturesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceGroupPeerMemoryFeaturesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")] uint* pPeerMemoryFeatures
    ) =>
        DllImport.GetDeviceGroupPeerMemoryFeaturesKHR(
            device,
            heapIndex,
            localDeviceIndex,
            remoteDeviceIndex,
            pPeerMemoryFeatures
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceGroupPeerMemoryFeaturesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")] Ref<uint> pPeerMemoryFeatures
    )
    {
        fixed (uint* __dsl_pPeerMemoryFeatures = pPeerMemoryFeatures)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceGroupPeerMemoryFeaturesKHR(
                __dsl_device,
                heapIndex,
                localDeviceIndex,
                remoteDeviceIndex,
                __dsl_pPeerMemoryFeatures
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_device_group"],
        ImpliesSets = ["VK_KHR_device_group_creation"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPeerMemoryFeaturesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceGroupPeerMemoryFeaturesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint heapIndex,
        [NativeTypeName("uint32_t")] uint localDeviceIndex,
        [NativeTypeName("uint32_t")] uint remoteDeviceIndex,
        [NativeTypeName("VkPeerMemoryFeatureFlags *")] Ref<uint> pPeerMemoryFeatures
    ) =>
        DllImport.GetDeviceGroupPeerMemoryFeaturesKHR(
            device,
            heapIndex,
            localDeviceIndex,
            remoteDeviceIndex,
            pPeerMemoryFeatures
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDeviceGroupPresentCapabilitiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        DeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DeviceGroupPresentCapabilitiesKHR*, Result>)(
                _slots[462] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[462] = nativeContext.LoadFunction(
                        "vkGetDeviceGroupPresentCapabilitiesKHR",
                        "vulkan"
                    )
            )
        )(device, pDeviceGroupPresentCapabilities);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPresentCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceGroupPresentCapabilitiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        DeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities
    ) => DllImport.GetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDeviceGroupPresentCapabilitiesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        Ref<DeviceGroupPresentCapabilitiesKHR> pDeviceGroupPresentCapabilities
    )
    {
        fixed (
            DeviceGroupPresentCapabilitiesKHR* __dsl_pDeviceGroupPresentCapabilities =
                pDeviceGroupPresentCapabilities
        )
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetDeviceGroupPresentCapabilitiesKHR(
                    __dsl_device,
                    __dsl_pDeviceGroupPresentCapabilities
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupPresentCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceGroupPresentCapabilitiesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        Ref<DeviceGroupPresentCapabilitiesKHR> pDeviceGroupPresentCapabilities
    ) => DllImport.GetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDeviceGroupSurfacePresentModesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        [NativeTypeName("VkDeviceGroupPresentModeFlagsKHR *")] uint* pModes
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SurfaceKHRHandle*, uint*, Result>)(
                _slots[463] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[463] = nativeContext.LoadFunction(
                        "vkGetDeviceGroupSurfacePresentModesKHR",
                        "vulkan"
                    )
            )
        )(device, surface, pModes);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupSurfacePresentModesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceGroupSurfacePresentModesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        [NativeTypeName("VkDeviceGroupPresentModeFlagsKHR *")] uint* pModes
    ) => DllImport.GetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDeviceGroupSurfacePresentModesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        [NativeTypeName("VkDeviceGroupPresentModeFlagsKHR *")] Ref<uint> pModes
    )
    {
        fixed (uint* __dsl_pModes = pModes)
        fixed (SurfaceKHRHandle* __dsl_surface = surface)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetDeviceGroupSurfacePresentModesKHR(
                    __dsl_device,
                    __dsl_surface,
                    __dsl_pModes
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceGroupSurfacePresentModesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceGroupSurfacePresentModesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        [NativeTypeName("VkDeviceGroupPresentModeFlagsKHR *")] Ref<uint> pModes
    ) => DllImport.GetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceImageMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeviceImageMemoryRequirements*,
                MemoryRequirements2*,
                void>)(
                _slots[464] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[464] = nativeContext.LoadFunction(
                        "vkGetDeviceImageMemoryRequirements",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => DllImport.GetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceImageMemoryRequirements(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceImageMemoryRequirements(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageMemoryRequirements(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => DllImport.GetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceImageMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeviceImageMemoryRequirements*,
                MemoryRequirements2*,
                void>)(
                _slots[465] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[465] = nativeContext.LoadFunction(
                        "vkGetDeviceImageMemoryRequirementsKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => DllImport.GetDeviceImageMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceImageMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceImageMemoryRequirementsKHR(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => DllImport.GetDeviceImageMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeviceImageMemoryRequirements*,
                uint*,
                SparseImageMemoryRequirements2*,
                void>)(
                _slots[466] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[466] = nativeContext.LoadFunction(
                        "vkGetDeviceImageSparseMemoryRequirements",
                        "vulkan"
                    )
            )
        )(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        DllImport.GetDeviceImageSparseMemoryRequirements(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    )
    {
        fixed (
            SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                pSparseMemoryRequirements
        )
        fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
        fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceImageSparseMemoryRequirements(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pSparseMemoryRequirementCount,
                __dsl_pSparseMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    ) =>
        DllImport.GetDeviceImageSparseMemoryRequirements(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceImageSparseMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeviceImageMemoryRequirements*,
                uint*,
                SparseImageMemoryRequirements2*,
                void>)(
                _slots[467] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[467] = nativeContext.LoadFunction(
                        "vkGetDeviceImageSparseMemoryRequirementsKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSparseMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            DeviceImageMemoryRequirements* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        DllImport.GetDeviceImageSparseMemoryRequirementsKHR(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceImageSparseMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    )
    {
        fixed (
            SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                pSparseMemoryRequirements
        )
        fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
        fixed (DeviceImageMemoryRequirements* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceImageSparseMemoryRequirementsKHR(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pSparseMemoryRequirementCount,
                __dsl_pSparseMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance4"], ImpliesSets = ["VK_VERSION_1_1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSparseMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSparseMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceImageMemoryRequirements *")]
            Ref<DeviceImageMemoryRequirements> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    ) =>
        DllImport.GetDeviceImageSparseMemoryRequirementsKHR(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceImageSubresourceLayout(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")] DeviceImageSubresourceInfo* pInfo,
        SubresourceLayout2* pLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeviceImageSubresourceInfo*,
                SubresourceLayout2*,
                void>)(
                _slots[468] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[468] = nativeContext.LoadFunction(
                        "vkGetDeviceImageSubresourceLayout",
                        "vulkan"
                    )
            )
        )(device, pInfo, pLayout);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSubresourceLayout(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")] DeviceImageSubresourceInfo* pInfo,
        SubresourceLayout2* pLayout
    ) => DllImport.GetDeviceImageSubresourceLayout(device, pInfo, pLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceImageSubresourceLayout(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
            Ref<DeviceImageSubresourceInfo> pInfo,
        Ref<SubresourceLayout2> pLayout
    )
    {
        fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
        fixed (DeviceImageSubresourceInfo* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceImageSubresourceLayout(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pLayout
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSubresourceLayout(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
            Ref<DeviceImageSubresourceInfo> pInfo,
        Ref<SubresourceLayout2> pLayout
    ) => DllImport.GetDeviceImageSubresourceLayout(device, pInfo, pLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceImageSubresourceLayoutKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")] DeviceImageSubresourceInfo* pInfo,
        SubresourceLayout2* pLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeviceImageSubresourceInfo*,
                SubresourceLayout2*,
                void>)(
                _slots[469] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[469] = nativeContext.LoadFunction(
                        "vkGetDeviceImageSubresourceLayoutKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayoutKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSubresourceLayoutKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")] DeviceImageSubresourceInfo* pInfo,
        SubresourceLayout2* pLayout
    ) => DllImport.GetDeviceImageSubresourceLayoutKHR(device, pInfo, pLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceImageSubresourceLayoutKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
            Ref<DeviceImageSubresourceInfo> pInfo,
        Ref<SubresourceLayout2> pLayout
    )
    {
        fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
        fixed (DeviceImageSubresourceInfo* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceImageSubresourceLayoutKHR(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pLayout
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceImageSubresourceLayoutKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceImageSubresourceLayoutKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceImageSubresourceInfo *")]
            Ref<DeviceImageSubresourceInfo> pInfo,
        Ref<SubresourceLayout2> pLayout
    ) => DllImport.GetDeviceImageSubresourceLayoutKHR(device, pInfo, pLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceMemoryCommitment(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
        [NativeTypeName("VkDeviceSize *")] ulong* pCommittedMemoryInBytes
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DeviceMemoryHandle*, ulong*, void>)(
                _slots[470] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[470] = nativeContext.LoadFunction(
                        "vkGetDeviceMemoryCommitment",
                        "vulkan"
                    )
            )
        )(device, memory, pCommittedMemoryInBytes);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryCommitment")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceMemoryCommitment(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
        [NativeTypeName("VkDeviceSize *")] ulong* pCommittedMemoryInBytes
    ) => DllImport.GetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceMemoryCommitment(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
        [NativeTypeName("VkDeviceSize *")] Ref<ulong> pCommittedMemoryInBytes
    )
    {
        fixed (ulong* __dsl_pCommittedMemoryInBytes = pCommittedMemoryInBytes)
        fixed (DeviceMemoryHandle* __dsl_memory = memory)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceMemoryCommitment(
                __dsl_device,
                __dsl_memory,
                __dsl_pCommittedMemoryInBytes
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryCommitment")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceMemoryCommitment(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
        [NativeTypeName("VkDeviceSize *")] Ref<ulong> pCommittedMemoryInBytes
    ) => DllImport.GetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetDeviceMemoryOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            DeviceMemoryOpaqueCaptureAddressInfo* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DeviceMemoryOpaqueCaptureAddressInfo*, ulong>)(
                _slots[471] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[471] = nativeContext.LoadFunction(
                        "vkGetDeviceMemoryOpaqueCaptureAddress",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetDeviceMemoryOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            DeviceMemoryOpaqueCaptureAddressInfo* pInfo
    ) => DllImport.GetDeviceMemoryOpaqueCaptureAddress(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetDeviceMemoryOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            Ref<DeviceMemoryOpaqueCaptureAddressInfo> pInfo
    )
    {
        fixed (DeviceMemoryOpaqueCaptureAddressInfo* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (ulong)
                ((IVulkan)this).GetDeviceMemoryOpaqueCaptureAddress(__dsl_device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetDeviceMemoryOpaqueCaptureAddress(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            Ref<DeviceMemoryOpaqueCaptureAddressInfo> pInfo
    ) => DllImport.GetDeviceMemoryOpaqueCaptureAddress(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetDeviceMemoryOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            DeviceMemoryOpaqueCaptureAddressInfo* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DeviceMemoryOpaqueCaptureAddressInfo*, ulong>)(
                _slots[472] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[472] = nativeContext.LoadFunction(
                        "vkGetDeviceMemoryOpaqueCaptureAddressKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetDeviceMemoryOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            DeviceMemoryOpaqueCaptureAddressInfo* pInfo
    ) => DllImport.GetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetDeviceMemoryOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            Ref<DeviceMemoryOpaqueCaptureAddressInfo> pInfo
    )
    {
        fixed (DeviceMemoryOpaqueCaptureAddressInfo* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (ulong)
                ((IVulkan)this).GetDeviceMemoryOpaqueCaptureAddressKHR(__dsl_device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_buffer_device_address"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_device_group",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddressKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetDeviceMemoryOpaqueCaptureAddressKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceMemoryOpaqueCaptureAddressInfo *")]
            Ref<DeviceMemoryOpaqueCaptureAddressInfo> pInfo
    ) => DllImport.GetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceMicromapCompatibilityEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMicromapVersionInfoEXT *")] MicromapVersionInfoEXT* pVersionInfo,
        AccelerationStructureCompatibilityKHR* pCompatibility
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                MicromapVersionInfoEXT*,
                AccelerationStructureCompatibilityKHR*,
                void>)(
                _slots[473] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[473] = nativeContext.LoadFunction(
                        "vkGetDeviceMicromapCompatibilityEXT",
                        "vulkan"
                    )
            )
        )(device, pVersionInfo, pCompatibility);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMicromapCompatibilityEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceMicromapCompatibilityEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMicromapVersionInfoEXT *")] MicromapVersionInfoEXT* pVersionInfo,
        AccelerationStructureCompatibilityKHR* pCompatibility
    ) => DllImport.GetDeviceMicromapCompatibilityEXT(device, pVersionInfo, pCompatibility);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceMicromapCompatibilityEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMicromapVersionInfoEXT *")]
            Ref<MicromapVersionInfoEXT> pVersionInfo,
        Ref<AccelerationStructureCompatibilityKHR> pCompatibility
    )
    {
        fixed (AccelerationStructureCompatibilityKHR* __dsl_pCompatibility = pCompatibility)
        fixed (MicromapVersionInfoEXT* __dsl_pVersionInfo = pVersionInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceMicromapCompatibilityEXT(
                __dsl_device,
                __dsl_pVersionInfo,
                __dsl_pCompatibility
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceMicromapCompatibilityEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceMicromapCompatibilityEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMicromapVersionInfoEXT *")]
            Ref<MicromapVersionInfoEXT> pVersionInfo,
        Ref<AccelerationStructureCompatibilityKHR> pCompatibility
    ) => DllImport.GetDeviceMicromapCompatibilityEXT(device, pVersionInfo, pCompatibility);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PFNVkVoidFunction IVulkan.GetDeviceProcAddr(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const char *")] sbyte* pName
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, sbyte*, PFNVkVoidFunction>)(
                _slots[474] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[474] = nativeContext.LoadFunction("vkGetDeviceProcAddr", "vulkan")
            )
        )(device, pName);

    [return: NativeTypeName("PFN_vkVoidFunction")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceProcAddr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PFNVkVoidFunction GetDeviceProcAddr(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const char *")] sbyte* pName
    ) => DllImport.GetDeviceProcAddr(device, pName);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PFNVkVoidFunction IVulkan.GetDeviceProcAddr(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const char *")] Ref<sbyte> pName
    )
    {
        fixed (sbyte* __dsl_pName = pName)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (PFNVkVoidFunction)((IVulkan)this).GetDeviceProcAddr(__dsl_device, __dsl_pName);
        }
    }

    [return: NativeTypeName("PFN_vkVoidFunction")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceProcAddr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PFNVkVoidFunction GetDeviceProcAddr(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const char *")] Ref<sbyte> pName
    ) => DllImport.GetDeviceProcAddr(device, pName);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceQueue(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t")] uint queueIndex,
        [NativeTypeName("VkQueue *")] QueueHandle** pQueue
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, uint, uint, QueueHandle**, void>)(
                _slots[475] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[475] = nativeContext.LoadFunction("vkGetDeviceQueue", "vulkan")
            )
        )(device, queueFamilyIndex, queueIndex, pQueue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceQueue(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t")] uint queueIndex,
        [NativeTypeName("VkQueue *")] QueueHandle** pQueue
    ) => DllImport.GetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceQueue(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t")] uint queueIndex,
        [NativeTypeName("VkQueue *")] Ref2D<QueueHandle> pQueue
    )
    {
        fixed (QueueHandle** __dsl_pQueue = pQueue)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceQueue(
                __dsl_device,
                queueFamilyIndex,
                queueIndex,
                __dsl_pQueue
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceQueue(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("uint32_t")] uint queueIndex,
        [NativeTypeName("VkQueue *")] Ref2D<QueueHandle> pQueue
    ) => DllImport.GetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceQueue2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceQueueInfo2 *")] DeviceQueueInfo2* pQueueInfo,
        [NativeTypeName("VkQueue *")] QueueHandle** pQueue
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DeviceQueueInfo2*, QueueHandle**, void>)(
                _slots[476] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[476] = nativeContext.LoadFunction("vkGetDeviceQueue2", "vulkan")
            )
        )(device, pQueueInfo, pQueue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceQueue2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceQueueInfo2 *")] DeviceQueueInfo2* pQueueInfo,
        [NativeTypeName("VkQueue *")] QueueHandle** pQueue
    ) => DllImport.GetDeviceQueue2(device, pQueueInfo, pQueue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetDeviceQueue2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceQueueInfo2 *")] Ref<DeviceQueueInfo2> pQueueInfo,
        [NativeTypeName("VkQueue *")] Ref2D<QueueHandle> pQueue
    )
    {
        fixed (QueueHandle** __dsl_pQueue = pQueue)
        fixed (DeviceQueueInfo2* __dsl_pQueueInfo = pQueueInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetDeviceQueue2(__dsl_device, __dsl_pQueueInfo, __dsl_pQueue);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceQueue2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetDeviceQueue2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceQueueInfo2 *")] Ref<DeviceQueueInfo2> pQueueInfo,
        [NativeTypeName("VkQueue *")] Ref2D<QueueHandle> pQueue
    ) => DllImport.GetDeviceQueue2(device, pQueueInfo, pQueue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle* renderpass,
        Extent2D* pMaxWorkgroupSize
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, RenderPassHandle*, Extent2D*, Result>)(
                _slots[477] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[477] = nativeContext.LoadFunction(
                        "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI",
                        "vulkan"
                    )
            )
        )(device, renderpass, pMaxWorkgroupSize);

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle* renderpass,
        Extent2D* pMaxWorkgroupSize
    ) =>
        DllImport.GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
            device,
            renderpass,
            pMaxWorkgroupSize
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkRenderPass")] Ref<RenderPassHandle> renderpass,
        Ref<Extent2D> pMaxWorkgroupSize
    )
    {
        fixed (Extent2D* __dsl_pMaxWorkgroupSize = pMaxWorkgroupSize)
        fixed (RenderPassHandle* __dsl_renderpass = renderpass)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
                    __dsl_device,
                    __dsl_renderpass,
                    __dsl_pMaxWorkgroupSize
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_HUAWEI_subpass_shading"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_create_renderpass2",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkRenderPass")] Ref<RenderPassHandle> renderpass,
        Ref<Extent2D> pMaxWorkgroupSize
    ) =>
        DllImport.GetDeviceSubpassShadingMaxWorkgroupSizeHuawei(
            device,
            renderpass,
            pMaxWorkgroupSize
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDisplayModeProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayModeProperties2KHR* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                DisplayKHRHandle*,
                uint*,
                DisplayModeProperties2KHR*,
                Result>)(
                _slots[478] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[478] = nativeContext.LoadFunction(
                        "vkGetDisplayModeProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, display, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModeProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayModeProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayModeProperties2KHR* pProperties
    ) =>
        DllImport.GetDisplayModeProperties2KHR(
            physicalDevice,
            display,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDisplayModeProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayModeProperties2KHR> pProperties
    )
    {
        fixed (DisplayModeProperties2KHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (DisplayKHRHandle* __dsl_display = display)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetDisplayModeProperties2KHR(
                    __dsl_physicalDevice,
                    __dsl_display,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModeProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayModeProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayModeProperties2KHR> pProperties
    ) =>
        DllImport.GetDisplayModeProperties2KHR(
            physicalDevice,
            display,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDisplayModePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayModePropertiesKHR* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                DisplayKHRHandle*,
                uint*,
                DisplayModePropertiesKHR*,
                Result>)(
                _slots[479] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[479] = nativeContext.LoadFunction(
                        "vkGetDisplayModePropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, display, pPropertyCount, pProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayModePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayModePropertiesKHR* pProperties
    ) =>
        DllImport.GetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDisplayModePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayModePropertiesKHR> pProperties
    )
    {
        fixed (DisplayModePropertiesKHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (DisplayKHRHandle* __dsl_display = display)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetDisplayModePropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_display,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayModePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayModePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayModePropertiesKHR> pProperties
    ) =>
        DllImport.GetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDisplayPlaneCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkDisplayPlaneInfo2KHR *")] DisplayPlaneInfo2KHR* pDisplayPlaneInfo,
        DisplayPlaneCapabilities2KHR* pCapabilities
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                DisplayPlaneInfo2KHR*,
                DisplayPlaneCapabilities2KHR*,
                Result>)(
                _slots[480] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[480] = nativeContext.LoadFunction(
                        "vkGetDisplayPlaneCapabilities2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pDisplayPlaneInfo, pCapabilities);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilities2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayPlaneCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkDisplayPlaneInfo2KHR *")] DisplayPlaneInfo2KHR* pDisplayPlaneInfo,
        DisplayPlaneCapabilities2KHR* pCapabilities
    ) =>
        DllImport.GetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDisplayPlaneCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkDisplayPlaneInfo2KHR *")]
            Ref<DisplayPlaneInfo2KHR> pDisplayPlaneInfo,
        Ref<DisplayPlaneCapabilities2KHR> pCapabilities
    )
    {
        fixed (DisplayPlaneCapabilities2KHR* __dsl_pCapabilities = pCapabilities)
        fixed (DisplayPlaneInfo2KHR* __dsl_pDisplayPlaneInfo = pDisplayPlaneInfo)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetDisplayPlaneCapabilities2KHR(
                    __dsl_physicalDevice,
                    __dsl_pDisplayPlaneInfo,
                    __dsl_pCapabilities
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilities2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayPlaneCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkDisplayPlaneInfo2KHR *")]
            Ref<DisplayPlaneInfo2KHR> pDisplayPlaneInfo,
        Ref<DisplayPlaneCapabilities2KHR> pCapabilities
    ) =>
        DllImport.GetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDisplayPlaneCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkDisplayModeKHR")] DisplayModeKHRHandle* mode,
        [NativeTypeName("uint32_t")] uint planeIndex,
        DisplayPlaneCapabilitiesKHR* pCapabilities
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                DisplayModeKHRHandle*,
                uint,
                DisplayPlaneCapabilitiesKHR*,
                Result>)(
                _slots[481] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[481] = nativeContext.LoadFunction(
                        "vkGetDisplayPlaneCapabilitiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, mode, planeIndex, pCapabilities);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayPlaneCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkDisplayModeKHR")] DisplayModeKHRHandle* mode,
        [NativeTypeName("uint32_t")] uint planeIndex,
        DisplayPlaneCapabilitiesKHR* pCapabilities
    ) => DllImport.GetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDisplayPlaneCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkDisplayModeKHR")] Ref<DisplayModeKHRHandle> mode,
        [NativeTypeName("uint32_t")] uint planeIndex,
        Ref<DisplayPlaneCapabilitiesKHR> pCapabilities
    )
    {
        fixed (DisplayPlaneCapabilitiesKHR* __dsl_pCapabilities = pCapabilities)
        fixed (DisplayModeKHRHandle* __dsl_mode = mode)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetDisplayPlaneCapabilitiesKHR(
                    __dsl_physicalDevice,
                    __dsl_mode,
                    planeIndex,
                    __dsl_pCapabilities
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayPlaneCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkDisplayModeKHR")] Ref<DisplayModeKHRHandle> mode,
        [NativeTypeName("uint32_t")] uint planeIndex,
        Ref<DisplayPlaneCapabilitiesKHR> pCapabilities
    ) => DllImport.GetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDisplayPlaneSupportedDisplaysKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t")] uint planeIndex,
        [NativeTypeName("uint32_t *")] uint* pDisplayCount,
        [NativeTypeName("VkDisplayKHR *")] DisplayKHRHandle** pDisplays
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, uint, uint*, DisplayKHRHandle**, Result>)(
                _slots[482] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[482] = nativeContext.LoadFunction(
                        "vkGetDisplayPlaneSupportedDisplaysKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, planeIndex, pDisplayCount, pDisplays);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneSupportedDisplaysKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayPlaneSupportedDisplaysKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t")] uint planeIndex,
        [NativeTypeName("uint32_t *")] uint* pDisplayCount,
        [NativeTypeName("VkDisplayKHR *")] DisplayKHRHandle** pDisplays
    ) =>
        DllImport.GetDisplayPlaneSupportedDisplaysKHR(
            physicalDevice,
            planeIndex,
            pDisplayCount,
            pDisplays
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDisplayPlaneSupportedDisplaysKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t")] uint planeIndex,
        [NativeTypeName("uint32_t *")] Ref<uint> pDisplayCount,
        [NativeTypeName("VkDisplayKHR *")] Ref2D<DisplayKHRHandle> pDisplays
    )
    {
        fixed (DisplayKHRHandle** __dsl_pDisplays = pDisplays)
        fixed (uint* __dsl_pDisplayCount = pDisplayCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetDisplayPlaneSupportedDisplaysKHR(
                    __dsl_physicalDevice,
                    planeIndex,
                    __dsl_pDisplayCount,
                    __dsl_pDisplays
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDisplayPlaneSupportedDisplaysKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDisplayPlaneSupportedDisplaysKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t")] uint planeIndex,
        [NativeTypeName("uint32_t *")] Ref<uint> pDisplayCount,
        [NativeTypeName("VkDisplayKHR *")] Ref2D<DisplayKHRHandle> pDisplays
    ) =>
        DllImport.GetDisplayPlaneSupportedDisplaysKHR(
            physicalDevice,
            planeIndex,
            pDisplayCount,
            pDisplays
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDrmDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("int32_t")] int drmFd,
        [NativeTypeName("uint32_t")] uint connectorId,
        [NativeTypeName("VkDisplayKHR *")] DisplayKHRHandle** display
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, int, uint, DisplayKHRHandle**, Result>)(
                _slots[483] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[483] = nativeContext.LoadFunction("vkGetDrmDisplayEXT", "vulkan")
            )
        )(physicalDevice, drmFd, connectorId, display);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_acquire_drm_display"],
        ImpliesSets = ["VK_EXT_direct_mode_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDrmDisplayEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDrmDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("int32_t")] int drmFd,
        [NativeTypeName("uint32_t")] uint connectorId,
        [NativeTypeName("VkDisplayKHR *")] DisplayKHRHandle** display
    ) => DllImport.GetDrmDisplayEXT(physicalDevice, drmFd, connectorId, display);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDrmDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("int32_t")] int drmFd,
        [NativeTypeName("uint32_t")] uint connectorId,
        [NativeTypeName("VkDisplayKHR *")] Ref2D<DisplayKHRHandle> display
    )
    {
        fixed (DisplayKHRHandle** __dsl_display = display)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetDrmDisplayEXT(
                    __dsl_physicalDevice,
                    drmFd,
                    connectorId,
                    __dsl_display
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_acquire_drm_display"],
        ImpliesSets = ["VK_EXT_direct_mode_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDrmDisplayEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDrmDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("int32_t")] int drmFd,
        [NativeTypeName("uint32_t")] uint connectorId,
        [NativeTypeName("VkDisplayKHR *")] Ref2D<DisplayKHRHandle> display
    ) => DllImport.GetDrmDisplayEXT(physicalDevice, drmFd, connectorId, display);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDynamicRenderingTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo,
        TilePropertiesQCOM* pProperties
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, RenderingInfo*, TilePropertiesQCOM*, Result>)(
                _slots[484] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[484] = nativeContext.LoadFunction(
                        "vkGetDynamicRenderingTilePropertiesQCOM",
                        "vulkan"
                    )
            )
        )(device, pRenderingInfo, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetDynamicRenderingTilePropertiesQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDynamicRenderingTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkRenderingInfo *")] RenderingInfo* pRenderingInfo,
        TilePropertiesQCOM* pProperties
    ) => DllImport.GetDynamicRenderingTilePropertiesQCOM(device, pRenderingInfo, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetDynamicRenderingTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo,
        Ref<TilePropertiesQCOM> pProperties
    )
    {
        fixed (TilePropertiesQCOM* __dsl_pProperties = pProperties)
        fixed (RenderingInfo* __dsl_pRenderingInfo = pRenderingInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetDynamicRenderingTilePropertiesQCOM(
                    __dsl_device,
                    __dsl_pRenderingInfo,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetDynamicRenderingTilePropertiesQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetDynamicRenderingTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkRenderingInfo *")] Ref<RenderingInfo> pRenderingInfo,
        Ref<TilePropertiesQCOM> pProperties
    ) => DllImport.GetDynamicRenderingTilePropertiesQCOM(device, pRenderingInfo, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetEncodedVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkVideoEncodeSessionParametersGetInfoKHR *")]
            VideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo,
        VideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                VideoEncodeSessionParametersGetInfoKHR*,
                VideoEncodeSessionParametersFeedbackInfoKHR*,
                nuint*,
                void*,
                Result>)(
                _slots[485] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[485] = nativeContext.LoadFunction(
                        "vkGetEncodedVideoSessionParametersKHR",
                        "vulkan"
                    )
            )
        )(device, pVideoSessionParametersInfo, pFeedbackInfo, pDataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetEncodedVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetEncodedVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkVideoEncodeSessionParametersGetInfoKHR *")]
            VideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo,
        VideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) =>
        DllImport.GetEncodedVideoSessionParametersKHR(
            device,
            pVideoSessionParametersInfo,
            pFeedbackInfo,
            pDataSize,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetEncodedVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkVideoEncodeSessionParametersGetInfoKHR *")]
            Ref<VideoEncodeSessionParametersGetInfoKHR> pVideoSessionParametersInfo,
        Ref<VideoEncodeSessionParametersFeedbackInfoKHR> pFeedbackInfo,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (nuint* __dsl_pDataSize = pDataSize)
        fixed (VideoEncodeSessionParametersFeedbackInfoKHR* __dsl_pFeedbackInfo = pFeedbackInfo)
        fixed (
            VideoEncodeSessionParametersGetInfoKHR* __dsl_pVideoSessionParametersInfo =
                pVideoSessionParametersInfo
        )
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetEncodedVideoSessionParametersKHR(
                    __dsl_device,
                    __dsl_pVideoSessionParametersInfo,
                    __dsl_pFeedbackInfo,
                    __dsl_pDataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetEncodedVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetEncodedVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkVideoEncodeSessionParametersGetInfoKHR *")]
            Ref<VideoEncodeSessionParametersGetInfoKHR> pVideoSessionParametersInfo,
        Ref<VideoEncodeSessionParametersFeedbackInfoKHR> pFeedbackInfo,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    ) =>
        DllImport.GetEncodedVideoSessionParametersKHR(
            device,
            pVideoSessionParametersInfo,
            pFeedbackInfo,
            pDataSize,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetEventStatus(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkEvent")] EventHandle* @event
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, EventHandle*, Result>)(
                _slots[486] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[486] = nativeContext.LoadFunction("vkGetEventStatus", "vulkan")
            )
        )(device, @event);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetEventStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetEventStatus(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkEvent")] EventHandle* @event
    ) => DllImport.GetEventStatus(device, @event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetEventStatus(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event
    )
    {
        fixed (EventHandle* __dsl_event = @event)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).GetEventStatus(__dsl_device, __dsl_event);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetEventStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetEventStatus(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event
    ) => DllImport.GetEventStatus(device, @event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetExternalComputeQueueDataNV(
        [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle* externalQueue,
        ExternalComputeQueueDataParamsNV* @params,
        void* pData
    ) =>
        (
            (delegate* unmanaged<
                ExternalComputeQueueNVHandle*,
                ExternalComputeQueueDataParamsNV*,
                void*,
                void>)(
                _slots[487] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[487] = nativeContext.LoadFunction(
                        "vkGetExternalComputeQueueDataNV",
                        "vulkan"
                    )
            )
        )(externalQueue, @params, pData);

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetExternalComputeQueueDataNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetExternalComputeQueueDataNV(
        [NativeTypeName("VkExternalComputeQueueNV")] ExternalComputeQueueNVHandle* externalQueue,
        ExternalComputeQueueDataParamsNV* @params,
        void* pData
    ) => DllImport.GetExternalComputeQueueDataNV(externalQueue, @params, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetExternalComputeQueueDataNV(
        [NativeTypeName("VkExternalComputeQueueNV")]
            Ref<ExternalComputeQueueNVHandle> externalQueue,
        Ref<ExternalComputeQueueDataParamsNV> @params,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (ExternalComputeQueueDataParamsNV* __dsl_params = @params)
        fixed (ExternalComputeQueueNVHandle* __dsl_externalQueue = externalQueue)
        {
            ((IVulkan)this).GetExternalComputeQueueDataNV(
                __dsl_externalQueue,
                __dsl_params,
                __dsl_pData
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_external_compute_queue"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetExternalComputeQueueDataNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetExternalComputeQueueDataNV(
        [NativeTypeName("VkExternalComputeQueueNV")]
            Ref<ExternalComputeQueueNVHandle> externalQueue,
        Ref<ExternalComputeQueueDataParamsNV> @params,
        Ref pData
    ) => DllImport.GetExternalComputeQueueDataNV(externalQueue, @params, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetFenceFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkFenceGetFdInfoKHR *")] FenceGetFdInfoKHR* pGetFdInfo,
        int* pFd
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, FenceGetFdInfoKHR*, int*, Result>)(
                _slots[488] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[488] = nativeContext.LoadFunction("vkGetFenceFdKHR", "vulkan")
            )
        )(device, pGetFdInfo, pFd);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetFenceFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetFenceFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkFenceGetFdInfoKHR *")] FenceGetFdInfoKHR* pGetFdInfo,
        int* pFd
    ) => DllImport.GetFenceFdKHR(device, pGetFdInfo, pFd);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetFenceFdKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkFenceGetFdInfoKHR *")] Ref<FenceGetFdInfoKHR> pGetFdInfo,
        Ref<int> pFd
    )
    {
        fixed (int* __dsl_pFd = pFd)
        fixed (FenceGetFdInfoKHR* __dsl_pGetFdInfo = pGetFdInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).GetFenceFdKHR(__dsl_device, __dsl_pGetFdInfo, __dsl_pFd);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetFenceFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetFenceFdKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkFenceGetFdInfoKHR *")] Ref<FenceGetFdInfoKHR> pGetFdInfo,
        Ref<int> pFd
    ) => DllImport.GetFenceFdKHR(device, pGetFdInfo, pFd);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetFenceStatus(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkFence")] FenceHandle* fence
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, FenceHandle*, Result>)(
                _slots[489] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[489] = nativeContext.LoadFunction("vkGetFenceStatus", "vulkan")
            )
        )(device, fence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetFenceStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetFenceStatus(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkFence")] FenceHandle* fence
    ) => DllImport.GetFenceStatus(device, fence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetFenceStatus(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkFence")] Ref<FenceHandle> fence
    )
    {
        fixed (FenceHandle* __dsl_fence = fence)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).GetFenceStatus(__dsl_device, __dsl_fence);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetFenceStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetFenceStatus(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkFence")] Ref<FenceHandle> fence
    ) => DllImport.GetFenceStatus(device, fence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetFramebufferTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkFramebuffer")] FramebufferHandle* framebuffer,
        [NativeTypeName("uint32_t *")] uint* pPropertiesCount,
        TilePropertiesQCOM* pProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                FramebufferHandle*,
                uint*,
                TilePropertiesQCOM*,
                Result>)(
                _slots[490] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[490] = nativeContext.LoadFunction(
                        "vkGetFramebufferTilePropertiesQCOM",
                        "vulkan"
                    )
            )
        )(device, framebuffer, pPropertiesCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetFramebufferTilePropertiesQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetFramebufferTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkFramebuffer")] FramebufferHandle* framebuffer,
        [NativeTypeName("uint32_t *")] uint* pPropertiesCount,
        TilePropertiesQCOM* pProperties
    ) =>
        DllImport.GetFramebufferTilePropertiesQCOM(
            device,
            framebuffer,
            pPropertiesCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetFramebufferTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkFramebuffer")] Ref<FramebufferHandle> framebuffer,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertiesCount,
        Ref<TilePropertiesQCOM> pProperties
    )
    {
        fixed (TilePropertiesQCOM* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertiesCount = pPropertiesCount)
        fixed (FramebufferHandle* __dsl_framebuffer = framebuffer)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetFramebufferTilePropertiesQCOM(
                    __dsl_device,
                    __dsl_framebuffer,
                    __dsl_pPropertiesCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_QCOM_tile_properties"],
        ImpliesSets = [
            "VK_QCOM_tile_properties+VK_KHR_get_physical_device_properties2",
            "VK_QCOM_tile_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetFramebufferTilePropertiesQCOM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetFramebufferTilePropertiesQCOM(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkFramebuffer")] Ref<FramebufferHandle> framebuffer,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertiesCount,
        Ref<TilePropertiesQCOM> pProperties
    ) =>
        DllImport.GetFramebufferTilePropertiesQCOM(
            device,
            framebuffer,
            pPropertiesCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetGeneratedCommandsMemoryRequirementsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoEXT *")]
            GeneratedCommandsMemoryRequirementsInfoEXT* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                GeneratedCommandsMemoryRequirementsInfoEXT*,
                MemoryRequirements2*,
                void>)(
                _slots[491] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[491] = nativeContext.LoadFunction(
                        "vkGetGeneratedCommandsMemoryRequirementsEXT",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetGeneratedCommandsMemoryRequirementsEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoEXT *")]
            GeneratedCommandsMemoryRequirementsInfoEXT* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => DllImport.GetGeneratedCommandsMemoryRequirementsEXT(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetGeneratedCommandsMemoryRequirementsEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoEXT *")]
            Ref<GeneratedCommandsMemoryRequirementsInfoEXT> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (GeneratedCommandsMemoryRequirementsInfoEXT* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetGeneratedCommandsMemoryRequirementsEXT(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetGeneratedCommandsMemoryRequirementsEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoEXT *")]
            Ref<GeneratedCommandsMemoryRequirementsInfoEXT> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => DllImport.GetGeneratedCommandsMemoryRequirementsEXT(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetGeneratedCommandsMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoNV *")]
            GeneratedCommandsMemoryRequirementsInfoNV* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                GeneratedCommandsMemoryRequirementsInfoNV*,
                MemoryRequirements2*,
                void>)(
                _slots[492] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[492] = nativeContext.LoadFunction(
                        "vkGetGeneratedCommandsMemoryRequirementsNV",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetGeneratedCommandsMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoNV *")]
            GeneratedCommandsMemoryRequirementsInfoNV* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => DllImport.GetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetGeneratedCommandsMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoNV *")]
            Ref<GeneratedCommandsMemoryRequirementsInfoNV> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (GeneratedCommandsMemoryRequirementsInfoNV* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetGeneratedCommandsMemoryRequirementsNV(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_buffer_device_address", "VK_VERSION_1_2"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetGeneratedCommandsMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkGeneratedCommandsMemoryRequirementsInfoNV *")]
            Ref<GeneratedCommandsMemoryRequirementsInfoNV> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => DllImport.GetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetImageDrmFormatModifierPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        ImageDrmFormatModifierPropertiesEXT* pProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ImageHandle*,
                ImageDrmFormatModifierPropertiesEXT*,
                Result>)(
                _slots[493] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[493] = nativeContext.LoadFunction(
                        "vkGetImageDrmFormatModifierPropertiesEXT",
                        "vulkan"
                    )
            )
        )(device, image, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_drm_format_modifier"],
        ImpliesSets = [
            "VK_KHR_image_format_list+VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion",
            "VK_KHR_image_format_list+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageDrmFormatModifierPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageDrmFormatModifierPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        ImageDrmFormatModifierPropertiesEXT* pProperties
    ) => DllImport.GetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetImageDrmFormatModifierPropertiesEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        Ref<ImageDrmFormatModifierPropertiesEXT> pProperties
    )
    {
        fixed (ImageDrmFormatModifierPropertiesEXT* __dsl_pProperties = pProperties)
        fixed (ImageHandle* __dsl_image = image)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetImageDrmFormatModifierPropertiesEXT(
                    __dsl_device,
                    __dsl_image,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_image_drm_format_modifier"],
        ImpliesSets = [
            "VK_KHR_image_format_list+VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion",
            "VK_KHR_image_format_list+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageDrmFormatModifierPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageDrmFormatModifierPropertiesEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        Ref<ImageDrmFormatModifierPropertiesEXT> pProperties
    ) => DllImport.GetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        MemoryRequirements* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ImageHandle*, MemoryRequirements*, void>)(
                _slots[494] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[494] = nativeContext.LoadFunction(
                        "vkGetImageMemoryRequirements",
                        "vulkan"
                    )
            )
        )(device, image, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        MemoryRequirements* pMemoryRequirements
    ) => DllImport.GetImageMemoryRequirements(device, image, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageMemoryRequirements(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        Ref<MemoryRequirements> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (ImageHandle* __dsl_image = image)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetImageMemoryRequirements(
                __dsl_device,
                __dsl_image,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageMemoryRequirements(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        Ref<MemoryRequirements> pMemoryRequirements
    ) => DllImport.GetImageMemoryRequirements(device, image, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            ImageMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ImageMemoryRequirementsInfo2*,
                MemoryRequirements2*,
                void>)(
                _slots[495] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[495] = nativeContext.LoadFunction(
                        "vkGetImageMemoryRequirements2",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            ImageMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => DllImport.GetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageMemoryRequirements2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            Ref<ImageMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (ImageMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetImageMemoryRequirements2(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageMemoryRequirements2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            Ref<ImageMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => DllImport.GetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            ImageMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ImageMemoryRequirementsInfo2*,
                MemoryRequirements2*,
                void>)(
                _slots[496] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[496] = nativeContext.LoadFunction(
                        "vkGetImageMemoryRequirements2KHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            ImageMemoryRequirementsInfo2* pInfo,
        MemoryRequirements2* pMemoryRequirements
    ) => DllImport.GetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            Ref<ImageMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (ImageMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetImageMemoryRequirements2KHR(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageMemoryRequirementsInfo2 *")]
            Ref<ImageMemoryRequirementsInfo2> pInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) => DllImport.GetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetImageOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageCaptureDescriptorDataInfoEXT *")]
            ImageCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ImageCaptureDescriptorDataInfoEXT*, void*, Result>)(
                _slots[497] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[497] = nativeContext.LoadFunction(
                        "vkGetImageOpaqueCaptureDescriptorDataEXT",
                        "vulkan"
                    )
            )
        )(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageCaptureDescriptorDataInfoEXT *")]
            ImageCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) => DllImport.GetImageOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetImageOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageCaptureDescriptorDataInfoEXT *")]
            Ref<ImageCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (ImageCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetImageOpaqueCaptureDescriptorDataEXT(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageCaptureDescriptorDataInfoEXT *")]
            Ref<ImageCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    ) => DllImport.GetImageOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements* pSparseMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ImageHandle*,
                uint*,
                SparseImageMemoryRequirements*,
                void>)(
                _slots[498] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[498] = nativeContext.LoadFunction(
                        "vkGetImageSparseMemoryRequirements",
                        "vulkan"
                    )
            )
        )(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements* pSparseMemoryRequirements
    ) =>
        DllImport.GetImageSparseMemoryRequirements(
            device,
            image,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements> pSparseMemoryRequirements
    )
    {
        fixed (
            SparseImageMemoryRequirements* __dsl_pSparseMemoryRequirements =
                pSparseMemoryRequirements
        )
        fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
        fixed (ImageHandle* __dsl_image = image)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetImageSparseMemoryRequirements(
                __dsl_device,
                __dsl_image,
                __dsl_pSparseMemoryRequirementCount,
                __dsl_pSparseMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSparseMemoryRequirements(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements> pSparseMemoryRequirements
    ) =>
        DllImport.GetImageSparseMemoryRequirements(
            device,
            image,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageSparseMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            ImageSparseMemoryRequirementsInfo2* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ImageSparseMemoryRequirementsInfo2*,
                uint*,
                SparseImageMemoryRequirements2*,
                void>)(
                _slots[499] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[499] = nativeContext.LoadFunction(
                        "vkGetImageSparseMemoryRequirements2",
                        "vulkan"
                    )
            )
        )(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSparseMemoryRequirements2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            ImageSparseMemoryRequirementsInfo2* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        DllImport.GetImageSparseMemoryRequirements2(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageSparseMemoryRequirements2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            Ref<ImageSparseMemoryRequirementsInfo2> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    )
    {
        fixed (
            SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                pSparseMemoryRequirements
        )
        fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
        fixed (ImageSparseMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetImageSparseMemoryRequirements2(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pSparseMemoryRequirementCount,
                __dsl_pSparseMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSparseMemoryRequirements2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            Ref<ImageSparseMemoryRequirementsInfo2> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    ) =>
        DllImport.GetImageSparseMemoryRequirements2(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageSparseMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            ImageSparseMemoryRequirementsInfo2* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ImageSparseMemoryRequirementsInfo2*,
                uint*,
                SparseImageMemoryRequirements2*,
                void>)(
                _slots[500] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[500] = nativeContext.LoadFunction(
                        "vkGetImageSparseMemoryRequirements2KHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSparseMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            ImageSparseMemoryRequirementsInfo2* pInfo,
        [NativeTypeName("uint32_t *")] uint* pSparseMemoryRequirementCount,
        SparseImageMemoryRequirements2* pSparseMemoryRequirements
    ) =>
        DllImport.GetImageSparseMemoryRequirements2KHR(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageSparseMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            Ref<ImageSparseMemoryRequirementsInfo2> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    )
    {
        fixed (
            SparseImageMemoryRequirements2* __dsl_pSparseMemoryRequirements =
                pSparseMemoryRequirements
        )
        fixed (uint* __dsl_pSparseMemoryRequirementCount = pSparseMemoryRequirementCount)
        fixed (ImageSparseMemoryRequirementsInfo2* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetImageSparseMemoryRequirements2KHR(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pSparseMemoryRequirementCount,
                __dsl_pSparseMemoryRequirements
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_memory_requirements2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSparseMemoryRequirements2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSparseMemoryRequirements2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageSparseMemoryRequirementsInfo2 *")]
            Ref<ImageSparseMemoryRequirementsInfo2> pInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSparseMemoryRequirementCount,
        Ref<SparseImageMemoryRequirements2> pSparseMemoryRequirements
    ) =>
        DllImport.GetImageSparseMemoryRequirements2KHR(
            device,
            pInfo,
            pSparseMemoryRequirementCount,
            pSparseMemoryRequirements
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageSubresourceLayout(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        [NativeTypeName("const VkImageSubresource *")] ImageSubresource* pSubresource,
        SubresourceLayout* pLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ImageHandle*,
                ImageSubresource*,
                SubresourceLayout*,
                void>)(
                _slots[501] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[501] = nativeContext.LoadFunction(
                        "vkGetImageSubresourceLayout",
                        "vulkan"
                    )
            )
        )(device, image, pSubresource, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        [NativeTypeName("const VkImageSubresource *")] ImageSubresource* pSubresource,
        SubresourceLayout* pLayout
    ) => DllImport.GetImageSubresourceLayout(device, image, pSubresource, pLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageSubresourceLayout(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        [NativeTypeName("const VkImageSubresource *")] Ref<ImageSubresource> pSubresource,
        Ref<SubresourceLayout> pLayout
    )
    {
        fixed (SubresourceLayout* __dsl_pLayout = pLayout)
        fixed (ImageSubresource* __dsl_pSubresource = pSubresource)
        fixed (ImageHandle* __dsl_image = image)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetImageSubresourceLayout(
                __dsl_device,
                __dsl_image,
                __dsl_pSubresource,
                __dsl_pLayout
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        [NativeTypeName("const VkImageSubresource *")] Ref<ImageSubresource> pSubresource,
        Ref<SubresourceLayout> pLayout
    ) => DllImport.GetImageSubresourceLayout(device, image, pSubresource, pLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageSubresourceLayout2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
        SubresourceLayout2* pLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ImageHandle*,
                ImageSubresource2*,
                SubresourceLayout2*,
                void>)(
                _slots[502] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[502] = nativeContext.LoadFunction(
                        "vkGetImageSubresourceLayout2",
                        "vulkan"
                    )
            )
        )(device, image, pSubresource, pLayout);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
        SubresourceLayout2* pLayout
    ) => DllImport.GetImageSubresourceLayout2(device, image, pSubresource, pLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageSubresourceLayout2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
        Ref<SubresourceLayout2> pLayout
    )
    {
        fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
        fixed (ImageSubresource2* __dsl_pSubresource = pSubresource)
        fixed (ImageHandle* __dsl_image = image)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetImageSubresourceLayout2(
                __dsl_device,
                __dsl_image,
                __dsl_pSubresource,
                __dsl_pLayout
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
        Ref<SubresourceLayout2> pLayout
    ) => DllImport.GetImageSubresourceLayout2(device, image, pSubresource, pLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageSubresourceLayout2EXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
        SubresourceLayout2* pLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ImageHandle*,
                ImageSubresource2*,
                SubresourceLayout2*,
                void>)(
                _slots[503] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[503] = nativeContext.LoadFunction(
                        "vkGetImageSubresourceLayout2EXT",
                        "vulkan"
                    )
            )
        )(device, image, pSubresource, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout2EXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
        SubresourceLayout2* pLayout
    ) => DllImport.GetImageSubresourceLayout2EXT(device, image, pSubresource, pLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageSubresourceLayout2EXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
        Ref<SubresourceLayout2> pLayout
    )
    {
        fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
        fixed (ImageSubresource2* __dsl_pSubresource = pSubresource)
        fixed (ImageHandle* __dsl_image = image)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetImageSubresourceLayout2EXT(
                __dsl_device,
                __dsl_image,
                __dsl_pSubresource,
                __dsl_pLayout
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout2EXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
        Ref<SubresourceLayout2> pLayout
    ) => DllImport.GetImageSubresourceLayout2EXT(device, image, pSubresource, pLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageSubresourceLayout2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
        SubresourceLayout2* pLayout
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ImageHandle*,
                ImageSubresource2*,
                SubresourceLayout2*,
                void>)(
                _slots[504] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[504] = nativeContext.LoadFunction(
                        "vkGetImageSubresourceLayout2KHR",
                        "vulkan"
                    )
            )
        )(device, image, pSubresource, pLayout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImage")] ImageHandle* image,
        [NativeTypeName("const VkImageSubresource2 *")] ImageSubresource2* pSubresource,
        SubresourceLayout2* pLayout
    ) => DllImport.GetImageSubresourceLayout2KHR(device, image, pSubresource, pLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetImageSubresourceLayout2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
        Ref<SubresourceLayout2> pLayout
    )
    {
        fixed (SubresourceLayout2* __dsl_pLayout = pLayout)
        fixed (ImageSubresource2* __dsl_pSubresource = pSubresource)
        fixed (ImageHandle* __dsl_image = image)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetImageSubresourceLayout2KHR(
                __dsl_device,
                __dsl_image,
                __dsl_pSubresource,
                __dsl_pLayout
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageSubresourceLayout2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetImageSubresourceLayout2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImage")] Ref<ImageHandle> image,
        [NativeTypeName("const VkImageSubresource2 *")] Ref<ImageSubresource2> pSubresource,
        Ref<SubresourceLayout2> pLayout
    ) => DllImport.GetImageSubresourceLayout2KHR(device, image, pSubresource, pLayout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetImageViewAddressNVX(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImageView")] ImageViewHandle* imageView,
        ImageViewAddressPropertiesNVX* pProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ImageViewHandle*,
                ImageViewAddressPropertiesNVX*,
                Result>)(
                _slots[505] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[505] = nativeContext.LoadFunction("vkGetImageViewAddressNVX", "vulkan")
            )
        )(device, imageView, pProperties);

    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewAddressNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageViewAddressNVX(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkImageView")] ImageViewHandle* imageView,
        ImageViewAddressPropertiesNVX* pProperties
    ) => DllImport.GetImageViewAddressNVX(device, imageView, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetImageViewAddressNVX(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImageView")] Ref<ImageViewHandle> imageView,
        Ref<ImageViewAddressPropertiesNVX> pProperties
    )
    {
        fixed (ImageViewAddressPropertiesNVX* __dsl_pProperties = pProperties)
        fixed (ImageViewHandle* __dsl_imageView = imageView)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetImageViewAddressNVX(
                    __dsl_device,
                    __dsl_imageView,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewAddressNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageViewAddressNVX(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkImageView")] Ref<ImageViewHandle> imageView,
        Ref<ImageViewAddressPropertiesNVX> pProperties
    ) => DllImport.GetImageViewAddressNVX(device, imageView, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetImageViewHandle64NVX(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] ImageViewHandleInfoNVX* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ImageViewHandleInfoNVX*, ulong>)(
                _slots[506] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[506] = nativeContext.LoadFunction(
                        "vkGetImageViewHandle64NVX",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandle64NVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetImageViewHandle64NVX(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] ImageViewHandleInfoNVX* pInfo
    ) => DllImport.GetImageViewHandle64NVX(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetImageViewHandle64NVX(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] Ref<ImageViewHandleInfoNVX> pInfo
    )
    {
        fixed (ImageViewHandleInfoNVX* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (ulong)((IVulkan)this).GetImageViewHandle64NVX(__dsl_device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("uint64_t")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandle64NVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetImageViewHandle64NVX(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] Ref<ImageViewHandleInfoNVX> pInfo
    ) => DllImport.GetImageViewHandle64NVX(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint IVulkan.GetImageViewHandleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] ImageViewHandleInfoNVX* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ImageViewHandleInfoNVX*, uint>)(
                _slots[507] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[507] = nativeContext.LoadFunction("vkGetImageViewHandleNVX", "vulkan")
            )
        )(device, pInfo);

    [return: NativeTypeName("uint32_t")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetImageViewHandleNVX(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] ImageViewHandleInfoNVX* pInfo
    ) => DllImport.GetImageViewHandleNVX(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint IVulkan.GetImageViewHandleNVX(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] Ref<ImageViewHandleInfoNVX> pInfo
    )
    {
        fixed (ImageViewHandleInfoNVX* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (uint)((IVulkan)this).GetImageViewHandleNVX(__dsl_device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("uint32_t")]
    [SupportedApiProfile("vulkan", ["VK_NVX_image_view_handle"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewHandleNVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetImageViewHandleNVX(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageViewHandleInfoNVX *")] Ref<ImageViewHandleInfoNVX> pInfo
    ) => DllImport.GetImageViewHandleNVX(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetImageViewOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageViewCaptureDescriptorDataInfoEXT *")]
            ImageViewCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ImageViewCaptureDescriptorDataInfoEXT*,
                void*,
                Result>)(
                _slots[508] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[508] = nativeContext.LoadFunction(
                        "vkGetImageViewOpaqueCaptureDescriptorDataEXT",
                        "vulkan"
                    )
            )
        )(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageViewOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImageViewCaptureDescriptorDataInfoEXT *")]
            ImageViewCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) => DllImport.GetImageViewOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetImageViewOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageViewCaptureDescriptorDataInfoEXT *")]
            Ref<ImageViewCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (ImageViewCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetImageViewOpaqueCaptureDescriptorDataEXT(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetImageViewOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetImageViewOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImageViewCaptureDescriptorDataInfoEXT *")]
            Ref<ImageViewCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    ) => DllImport.GetImageViewOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PFNVkVoidFunction IVulkan.GetInstanceProcAddr(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("const char *")] sbyte* pName
    ) =>
        (
            (delegate* unmanaged<InstanceHandle*, sbyte*, PFNVkVoidFunction>)(
                _slots[509] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[509] = nativeContext.LoadFunction("vkGetInstanceProcAddr", "vulkan")
            )
        )(instance, pName);

    [return: NativeTypeName("PFN_vkVoidFunction")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetInstanceProcAddr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PFNVkVoidFunction GetInstanceProcAddr(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("const char *")] sbyte* pName
    ) => DllImport.GetInstanceProcAddr(instance, pName);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PFNVkVoidFunction IVulkan.GetInstanceProcAddr(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("const char *")] Ref<sbyte> pName
    )
    {
        fixed (sbyte* __dsl_pName = pName)
        fixed (InstanceHandle* __dsl_instance = instance)
        {
            return (PFNVkVoidFunction)
                ((IVulkan)this).GetInstanceProcAddr(__dsl_instance, __dsl_pName);
        }
    }

    [return: NativeTypeName("PFN_vkVoidFunction")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetInstanceProcAddr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PFNVkVoidFunction GetInstanceProcAddr(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("const char *")] Ref<sbyte> pName
    ) => DllImport.GetInstanceProcAddr(instance, pName);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetLatencyTimingsNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        GetLatencyMarkerInfoNV* pLatencyMarkerInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SwapchainKHRHandle*,
                GetLatencyMarkerInfoNV*,
                void>)(
                _slots[510] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[510] = nativeContext.LoadFunction("vkGetLatencyTimingsNV", "vulkan")
            )
        )(device, swapchain, pLatencyMarkerInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetLatencyTimingsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetLatencyTimingsNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        GetLatencyMarkerInfoNV* pLatencyMarkerInfo
    ) => DllImport.GetLatencyTimingsNV(device, swapchain, pLatencyMarkerInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetLatencyTimingsNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        Ref<GetLatencyMarkerInfoNV> pLatencyMarkerInfo
    )
    {
        fixed (GetLatencyMarkerInfoNV* __dsl_pLatencyMarkerInfo = pLatencyMarkerInfo)
        fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetLatencyTimingsNV(
                __dsl_device,
                __dsl_swapchain,
                __dsl_pLatencyMarkerInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetLatencyTimingsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetLatencyTimingsNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        Ref<GetLatencyMarkerInfoNV> pLatencyMarkerInfo
    ) => DllImport.GetLatencyTimingsNV(device, swapchain, pLatencyMarkerInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetMemoryFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMemoryGetFdInfoKHR *")] MemoryGetFdInfoKHR* pGetFdInfo,
        int* pFd
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, MemoryGetFdInfoKHR*, int*, Result>)(
                _slots[511] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[511] = nativeContext.LoadFunction("vkGetMemoryFdKHR", "vulkan")
            )
        )(device, pGetFdInfo, pFd);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMemoryGetFdInfoKHR *")] MemoryGetFdInfoKHR* pGetFdInfo,
        int* pFd
    ) => DllImport.GetMemoryFdKHR(device, pGetFdInfo, pFd);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetMemoryFdKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMemoryGetFdInfoKHR *")] Ref<MemoryGetFdInfoKHR> pGetFdInfo,
        Ref<int> pFd
    )
    {
        fixed (int* __dsl_pFd = pFd)
        fixed (MemoryGetFdInfoKHR* __dsl_pGetFdInfo = pGetFdInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetMemoryFdKHR(__dsl_device, __dsl_pGetFdInfo, __dsl_pFd);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryFdKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMemoryGetFdInfoKHR *")] Ref<MemoryGetFdInfoKHR> pGetFdInfo,
        Ref<int> pFd
    ) => DllImport.GetMemoryFdKHR(device, pGetFdInfo, pFd);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetMemoryFdPropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagBits")]
            ExternalMemoryHandleTypeFlags handleType,
        int fd,
        MemoryFdPropertiesKHR* pMemoryFdProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ExternalMemoryHandleTypeFlags,
                int,
                MemoryFdPropertiesKHR*,
                Result>)(
                _slots[512] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[512] = nativeContext.LoadFunction(
                        "vkGetMemoryFdPropertiesKHR",
                        "vulkan"
                    )
            )
        )(device, handleType, fd, pMemoryFdProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryFdPropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagBits")]
            ExternalMemoryHandleTypeFlags handleType,
        int fd,
        MemoryFdPropertiesKHR* pMemoryFdProperties
    ) => DllImport.GetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetMemoryFdPropertiesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagBits")]
            ExternalMemoryHandleTypeFlags handleType,
        int fd,
        Ref<MemoryFdPropertiesKHR> pMemoryFdProperties
    )
    {
        fixed (MemoryFdPropertiesKHR* __dsl_pMemoryFdProperties = pMemoryFdProperties)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetMemoryFdPropertiesKHR(
                    __dsl_device,
                    handleType,
                    fd,
                    __dsl_pMemoryFdProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_fd"],
        ImpliesSets = [
            "VK_KHR_external_memory_fd+VK_KHR_external_memory",
            "VK_KHR_external_memory_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryFdPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryFdPropertiesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagBits")]
            ExternalMemoryHandleTypeFlags handleType,
        int fd,
        Ref<MemoryFdPropertiesKHR> pMemoryFdProperties
    ) => DllImport.GetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetMemoryHostPointerPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagBits")]
            ExternalMemoryHandleTypeFlags handleType,
        [NativeTypeName("const void *")] void* pHostPointer,
        MemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ExternalMemoryHandleTypeFlags,
                void*,
                MemoryHostPointerPropertiesEXT*,
                Result>)(
                _slots[513] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[513] = nativeContext.LoadFunction(
                        "vkGetMemoryHostPointerPropertiesEXT",
                        "vulkan"
                    )
            )
        )(device, handleType, pHostPointer, pMemoryHostPointerProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_host"],
        ImpliesSets = [
            "VK_EXT_external_memory_host+VK_KHR_external_memory",
            "VK_EXT_external_memory_host+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryHostPointerPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryHostPointerPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagBits")]
            ExternalMemoryHandleTypeFlags handleType,
        [NativeTypeName("const void *")] void* pHostPointer,
        MemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties
    ) =>
        DllImport.GetMemoryHostPointerPropertiesEXT(
            device,
            handleType,
            pHostPointer,
            pMemoryHostPointerProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetMemoryHostPointerPropertiesEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagBits")]
            ExternalMemoryHandleTypeFlags handleType,
        [NativeTypeName("const void *")] Ref pHostPointer,
        Ref<MemoryHostPointerPropertiesEXT> pMemoryHostPointerProperties
    )
    {
        fixed (
            MemoryHostPointerPropertiesEXT* __dsl_pMemoryHostPointerProperties =
                pMemoryHostPointerProperties
        )
        fixed (void* __dsl_pHostPointer = pHostPointer)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetMemoryHostPointerPropertiesEXT(
                    __dsl_device,
                    handleType,
                    __dsl_pHostPointer,
                    __dsl_pMemoryHostPointerProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_external_memory_host"],
        ImpliesSets = [
            "VK_EXT_external_memory_host+VK_KHR_external_memory",
            "VK_EXT_external_memory_host+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryHostPointerPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryHostPointerPropertiesEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagBits")]
            ExternalMemoryHandleTypeFlags handleType,
        [NativeTypeName("const void *")] Ref pHostPointer,
        Ref<MemoryHostPointerPropertiesEXT> pMemoryHostPointerProperties
    ) =>
        DllImport.GetMemoryHostPointerPropertiesEXT(
            device,
            handleType,
            pHostPointer,
            pMemoryHostPointerProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetMemoryRemoteAddressNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMemoryGetRemoteAddressInfoNV *")]
            MemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo,
        [NativeTypeName("VkRemoteAddressNV *")] void** pAddress
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, MemoryGetRemoteAddressInfoNV*, void**, Result>)(
                _slots[514] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[514] = nativeContext.LoadFunction(
                        "vkGetMemoryRemoteAddressNV",
                        "vulkan"
                    )
            )
        )(device, pMemoryGetRemoteAddressInfo, pAddress);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_external_memory_rdma"],
        ImpliesSets = [
            "VK_NV_external_memory_rdma+VK_KHR_external_memory",
            "VK_NV_external_memory_rdma+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryRemoteAddressNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryRemoteAddressNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMemoryGetRemoteAddressInfoNV *")]
            MemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo,
        [NativeTypeName("VkRemoteAddressNV *")] void** pAddress
    ) => DllImport.GetMemoryRemoteAddressNV(device, pMemoryGetRemoteAddressInfo, pAddress);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetMemoryRemoteAddressNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMemoryGetRemoteAddressInfoNV *")]
            Ref<MemoryGetRemoteAddressInfoNV> pMemoryGetRemoteAddressInfo,
        [NativeTypeName("VkRemoteAddressNV *")] Ref2D pAddress
    )
    {
        fixed (void** __dsl_pAddress = pAddress)
        fixed (
            MemoryGetRemoteAddressInfoNV* __dsl_pMemoryGetRemoteAddressInfo =
                pMemoryGetRemoteAddressInfo
        )
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetMemoryRemoteAddressNV(
                    __dsl_device,
                    __dsl_pMemoryGetRemoteAddressInfo,
                    __dsl_pAddress
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_external_memory_rdma"],
        ImpliesSets = [
            "VK_NV_external_memory_rdma+VK_KHR_external_memory",
            "VK_NV_external_memory_rdma+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMemoryRemoteAddressNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetMemoryRemoteAddressNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMemoryGetRemoteAddressInfoNV *")]
            Ref<MemoryGetRemoteAddressInfoNV> pMemoryGetRemoteAddressInfo,
        [NativeTypeName("VkRemoteAddressNV *")] Ref2D pAddress
    ) => DllImport.GetMemoryRemoteAddressNV(device, pMemoryGetRemoteAddressInfo, pAddress);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetMicromapBuildSizesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pBuildInfo,
        MicromapBuildSizesInfoEXT* pSizeInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                AccelerationStructureBuildTypeKHR,
                MicromapBuildInfoEXT*,
                MicromapBuildSizesInfoEXT*,
                void>)(
                _slots[515] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[515] = nativeContext.LoadFunction(
                        "vkGetMicromapBuildSizesEXT",
                        "vulkan"
                    )
            )
        )(device, buildType, pBuildInfo, pSizeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetMicromapBuildSizesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetMicromapBuildSizesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] MicromapBuildInfoEXT* pBuildInfo,
        MicromapBuildSizesInfoEXT* pSizeInfo
    ) => DllImport.GetMicromapBuildSizesEXT(device, buildType, pBuildInfo, pSizeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetMicromapBuildSizesEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pBuildInfo,
        Ref<MicromapBuildSizesInfoEXT> pSizeInfo
    )
    {
        fixed (MicromapBuildSizesInfoEXT* __dsl_pSizeInfo = pSizeInfo)
        fixed (MicromapBuildInfoEXT* __dsl_pBuildInfo = pBuildInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetMicromapBuildSizesEXT(
                __dsl_device,
                buildType,
                __dsl_pBuildInfo,
                __dsl_pSizeInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetMicromapBuildSizesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetMicromapBuildSizesEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        AccelerationStructureBuildTypeKHR buildType,
        [NativeTypeName("const VkMicromapBuildInfoEXT *")] Ref<MicromapBuildInfoEXT> pBuildInfo,
        Ref<MicromapBuildSizesInfoEXT> pSizeInfo
    ) => DllImport.GetMicromapBuildSizesEXT(device, buildType, pBuildInfo, pSizeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPartitionedAccelerationStructuresBuildSizesNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPartitionedAccelerationStructureInstancesInputNV *")]
            PartitionedAccelerationStructureInstancesInputNV* pInfo,
        AccelerationStructureBuildSizesInfoKHR* pSizeInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PartitionedAccelerationStructureInstancesInputNV*,
                AccelerationStructureBuildSizesInfoKHR*,
                void>)(
                _slots[516] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[516] = nativeContext.LoadFunction(
                        "vkGetPartitionedAccelerationStructuresBuildSizesNV",
                        "vulkan"
                    )
            )
        )(device, pInfo, pSizeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPartitionedAccelerationStructuresBuildSizesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPartitionedAccelerationStructuresBuildSizesNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPartitionedAccelerationStructureInstancesInputNV *")]
            PartitionedAccelerationStructureInstancesInputNV* pInfo,
        AccelerationStructureBuildSizesInfoKHR* pSizeInfo
    ) => DllImport.GetPartitionedAccelerationStructuresBuildSizesNV(device, pInfo, pSizeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPartitionedAccelerationStructuresBuildSizesNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPartitionedAccelerationStructureInstancesInputNV *")]
            Ref<PartitionedAccelerationStructureInstancesInputNV> pInfo,
        Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
    )
    {
        fixed (AccelerationStructureBuildSizesInfoKHR* __dsl_pSizeInfo = pSizeInfo)
        fixed (PartitionedAccelerationStructureInstancesInputNV* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetPartitionedAccelerationStructuresBuildSizesNV(
                __dsl_device,
                __dsl_pInfo,
                __dsl_pSizeInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_partitioned_acceleration_structure"],
        ImpliesSets = ["VK_KHR_acceleration_structure"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPartitionedAccelerationStructuresBuildSizesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPartitionedAccelerationStructuresBuildSizesNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPartitionedAccelerationStructureInstancesInputNV *")]
            Ref<PartitionedAccelerationStructureInstancesInputNV> pInfo,
        Ref<AccelerationStructureBuildSizesInfoKHR> pSizeInfo
    ) => DllImport.GetPartitionedAccelerationStructuresBuildSizesNV(device, pInfo, pSizeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPastPresentationTimingGoogle(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("uint32_t *")] uint* pPresentationTimingCount,
        PastPresentationTimingGoogle* pPresentationTimings
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SwapchainKHRHandle*,
                uint*,
                PastPresentationTimingGoogle*,
                Result>)(
                _slots[517] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[517] = nativeContext.LoadFunction(
                        "vkGetPastPresentationTimingGOOGLE",
                        "vulkan"
                    )
            )
        )(device, swapchain, pPresentationTimingCount, pPresentationTimings);

    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPastPresentationTimingGOOGLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPastPresentationTimingGoogle(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("uint32_t *")] uint* pPresentationTimingCount,
        PastPresentationTimingGoogle* pPresentationTimings
    ) =>
        DllImport.GetPastPresentationTimingGoogle(
            device,
            swapchain,
            pPresentationTimingCount,
            pPresentationTimings
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPastPresentationTimingGoogle(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("uint32_t *")] Ref<uint> pPresentationTimingCount,
        Ref<PastPresentationTimingGoogle> pPresentationTimings
    )
    {
        fixed (PastPresentationTimingGoogle* __dsl_pPresentationTimings = pPresentationTimings)
        fixed (uint* __dsl_pPresentationTimingCount = pPresentationTimingCount)
        fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetPastPresentationTimingGoogle(
                    __dsl_device,
                    __dsl_swapchain,
                    __dsl_pPresentationTimingCount,
                    __dsl_pPresentationTimings
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPastPresentationTimingGOOGLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPastPresentationTimingGoogle(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("uint32_t *")] Ref<uint> pPresentationTimingCount,
        Ref<PastPresentationTimingGoogle> pPresentationTimings
    ) =>
        DllImport.GetPastPresentationTimingGoogle(
            device,
            swapchain,
            pPresentationTimingCount,
            pPresentationTimings
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPerformanceParameterIntel(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        PerformanceParameterTypeIntel parameter,
        PerformanceValueIntel* pValue
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PerformanceParameterTypeIntel,
                PerformanceValueIntel*,
                Result>)(
                _slots[518] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[518] = nativeContext.LoadFunction(
                        "vkGetPerformanceParameterINTEL",
                        "vulkan"
                    )
            )
        )(device, parameter, pValue);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPerformanceParameterINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPerformanceParameterIntel(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        PerformanceParameterTypeIntel parameter,
        PerformanceValueIntel* pValue
    ) => DllImport.GetPerformanceParameterIntel(device, parameter, pValue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPerformanceParameterIntel(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        PerformanceParameterTypeIntel parameter,
        Ref<PerformanceValueIntel> pValue
    )
    {
        fixed (PerformanceValueIntel* __dsl_pValue = pValue)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetPerformanceParameterIntel(__dsl_device, parameter, __dsl_pValue);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPerformanceParameterINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPerformanceParameterIntel(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        PerformanceParameterTypeIntel parameter,
        Ref<PerformanceValueIntel> pValue
    ) => DllImport.GetPerformanceParameterIntel(device, parameter, pValue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceCalibrateableTimeDomainsEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pTimeDomainCount,
        TimeDomainKHR* pTimeDomains
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, uint*, TimeDomainKHR*, Result>)(
                _slots[519] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[519] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT",
                        "vulkan"
                    )
            )
        )(physicalDevice, pTimeDomainCount, pTimeDomains);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCalibrateableTimeDomainsEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pTimeDomainCount,
        TimeDomainKHR* pTimeDomains
    ) =>
        DllImport.GetPhysicalDeviceCalibrateableTimeDomainsEXT(
            physicalDevice,
            pTimeDomainCount,
            pTimeDomains
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceCalibrateableTimeDomainsEXT(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pTimeDomainCount,
        Ref<TimeDomainKHR> pTimeDomains
    )
    {
        fixed (TimeDomainKHR* __dsl_pTimeDomains = pTimeDomains)
        fixed (uint* __dsl_pTimeDomainCount = pTimeDomainCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceCalibrateableTimeDomainsEXT(
                    __dsl_physicalDevice,
                    __dsl_pTimeDomainCount,
                    __dsl_pTimeDomains
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_calibrated_timestamps"],
        ImpliesSets = [
            "VK_EXT_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_EXT_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCalibrateableTimeDomainsEXT(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pTimeDomainCount,
        Ref<TimeDomainKHR> pTimeDomains
    ) =>
        DllImport.GetPhysicalDeviceCalibrateableTimeDomainsEXT(
            physicalDevice,
            pTimeDomainCount,
            pTimeDomains
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceCalibrateableTimeDomainsKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pTimeDomainCount,
        TimeDomainKHR* pTimeDomains
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, uint*, TimeDomainKHR*, Result>)(
                _slots[520] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[520] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pTimeDomainCount, pTimeDomains);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCalibrateableTimeDomainsKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pTimeDomainCount,
        TimeDomainKHR* pTimeDomains
    ) =>
        DllImport.GetPhysicalDeviceCalibrateableTimeDomainsKHR(
            physicalDevice,
            pTimeDomainCount,
            pTimeDomains
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceCalibrateableTimeDomainsKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pTimeDomainCount,
        Ref<TimeDomainKHR> pTimeDomains
    )
    {
        fixed (TimeDomainKHR* __dsl_pTimeDomains = pTimeDomains)
        fixed (uint* __dsl_pTimeDomainCount = pTimeDomainCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceCalibrateableTimeDomainsKHR(
                    __dsl_physicalDevice,
                    __dsl_pTimeDomainCount,
                    __dsl_pTimeDomains
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_calibrated_timestamps"],
        ImpliesSets = [
            "VK_KHR_calibrated_timestamps+VK_KHR_get_physical_device_properties2",
            "VK_KHR_calibrated_timestamps+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCalibrateableTimeDomainsKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pTimeDomainCount,
        Ref<TimeDomainKHR> pTimeDomains
    ) =>
        DllImport.GetPhysicalDeviceCalibrateableTimeDomainsKHR(
            physicalDevice,
            pTimeDomainCount,
            pTimeDomains
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeMatrixFlexibleDimensionsPropertiesNV* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                uint*,
                CooperativeMatrixFlexibleDimensionsPropertiesNV*,
                Result>)(
                _slots[521] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[521] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix2"],
        ImpliesSets = ["VK_KHR_cooperative_matrix"]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeMatrixFlexibleDimensionsPropertiesNV* pProperties
    ) =>
        DllImport.GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeMatrixFlexibleDimensionsPropertiesNV> pProperties
    )
    {
        fixed (CooperativeMatrixFlexibleDimensionsPropertiesNV* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix2"],
        ImpliesSets = ["VK_KHR_cooperative_matrix"]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeMatrixFlexibleDimensionsPropertiesNV> pProperties
    ) =>
        DllImport.GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeMatrixPropertiesKHR* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                uint*,
                CooperativeMatrixPropertiesKHR*,
                Result>)(
                _slots[522] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[522] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_cooperative_matrix"],
        ImpliesSets = [
            "VK_KHR_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_KHR_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeMatrixPropertiesKHR* pProperties
    ) =>
        DllImport.GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeMatrixPropertiesKHR> pProperties
    )
    {
        fixed (CooperativeMatrixPropertiesKHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_cooperative_matrix"],
        ImpliesSets = [
            "VK_KHR_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_KHR_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeMatrixPropertiesKHR> pProperties
    ) =>
        DllImport.GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceCooperativeMatrixPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeMatrixPropertiesNV* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                uint*,
                CooperativeMatrixPropertiesNV*,
                Result>)(
                _slots[523] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[523] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix"],
        ImpliesSets = [
            "VK_NV_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_NV_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeMatrixPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeMatrixPropertiesNV* pProperties
    ) =>
        DllImport.GetPhysicalDeviceCooperativeMatrixPropertiesNV(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceCooperativeMatrixPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeMatrixPropertiesNV> pProperties
    )
    {
        fixed (CooperativeMatrixPropertiesNV* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceCooperativeMatrixPropertiesNV(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_cooperative_matrix"],
        ImpliesSets = [
            "VK_NV_cooperative_matrix+VK_KHR_get_physical_device_properties2",
            "VK_NV_cooperative_matrix+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeMatrixPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeMatrixPropertiesNV> pProperties
    ) =>
        DllImport.GetPhysicalDeviceCooperativeMatrixPropertiesNV(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceCooperativeVectorPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeVectorPropertiesNV* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                uint*,
                CooperativeVectorPropertiesNV*,
                Result>)(
                _slots[524] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[524] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceCooperativeVectorPropertiesNV",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeVectorPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeVectorPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        CooperativeVectorPropertiesNV* pProperties
    ) =>
        DllImport.GetPhysicalDeviceCooperativeVectorPropertiesNV(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceCooperativeVectorPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeVectorPropertiesNV> pProperties
    )
    {
        fixed (CooperativeVectorPropertiesNV* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceCooperativeVectorPropertiesNV(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_cooperative_vector"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceCooperativeVectorPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceCooperativeVectorPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<CooperativeVectorPropertiesNV> pProperties
    ) =>
        DllImport.GetPhysicalDeviceCooperativeVectorPropertiesNV(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceDisplayPlaneProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayPlaneProperties2KHR* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                uint*,
                DisplayPlaneProperties2KHR*,
                Result>)(
                _slots[525] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[525] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceDisplayPlaneProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlaneProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayPlaneProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayPlaneProperties2KHR* pProperties
    ) =>
        DllImport.GetPhysicalDeviceDisplayPlaneProperties2KHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceDisplayPlaneProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayPlaneProperties2KHR> pProperties
    )
    {
        fixed (DisplayPlaneProperties2KHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceDisplayPlaneProperties2KHR(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlaneProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayPlaneProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayPlaneProperties2KHR> pProperties
    ) =>
        DllImport.GetPhysicalDeviceDisplayPlaneProperties2KHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceDisplayPlanePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayPlanePropertiesKHR* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, uint*, DisplayPlanePropertiesKHR*, Result>)(
                _slots[526] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[526] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceDisplayPlanePropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlanePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayPlanePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayPlanePropertiesKHR* pProperties
    ) =>
        DllImport.GetPhysicalDeviceDisplayPlanePropertiesKHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceDisplayPlanePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayPlanePropertiesKHR> pProperties
    )
    {
        fixed (DisplayPlanePropertiesKHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceDisplayPlanePropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPlanePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayPlanePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayPlanePropertiesKHR> pProperties
    ) =>
        DllImport.GetPhysicalDeviceDisplayPlanePropertiesKHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceDisplayProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayProperties2KHR* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, uint*, DisplayProperties2KHR*, Result>)(
                _slots[527] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[527] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceDisplayProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayProperties2KHR* pProperties
    ) =>
        DllImport.GetPhysicalDeviceDisplayProperties2KHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceDisplayProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayProperties2KHR> pProperties
    )
    {
        fixed (DisplayProperties2KHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceDisplayProperties2KHR(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_display_properties2"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayProperties2KHR> pProperties
    ) =>
        DllImport.GetPhysicalDeviceDisplayProperties2KHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceDisplayPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayPropertiesKHR* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, uint*, DisplayPropertiesKHR*, Result>)(
                _slots[528] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[528] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceDisplayPropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPropertyCount, pProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        DisplayPropertiesKHR* pProperties
    ) =>
        DllImport.GetPhysicalDeviceDisplayPropertiesKHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceDisplayPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayPropertiesKHR> pProperties
    )
    {
        fixed (DisplayPropertiesKHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceDisplayPropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pPropertyCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_display"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceDisplayPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceDisplayPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<DisplayPropertiesKHR> pProperties
    ) =>
        DllImport.GetPhysicalDeviceDisplayPropertiesKHR(
            physicalDevice,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceExternalBufferProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            PhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
        ExternalBufferProperties* pExternalBufferProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                PhysicalDeviceExternalBufferInfo*,
                ExternalBufferProperties*,
                void>)(
                _slots[529] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[529] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalBufferProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalBufferProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            PhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
        ExternalBufferProperties* pExternalBufferProperties
    ) =>
        DllImport.GetPhysicalDeviceExternalBufferProperties(
            physicalDevice,
            pExternalBufferInfo,
            pExternalBufferProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceExternalBufferProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            Ref<PhysicalDeviceExternalBufferInfo> pExternalBufferInfo,
        Ref<ExternalBufferProperties> pExternalBufferProperties
    )
    {
        fixed (
            ExternalBufferProperties* __dsl_pExternalBufferProperties = pExternalBufferProperties
        )
        fixed (PhysicalDeviceExternalBufferInfo* __dsl_pExternalBufferInfo = pExternalBufferInfo)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceExternalBufferProperties(
                __dsl_physicalDevice,
                __dsl_pExternalBufferInfo,
                __dsl_pExternalBufferProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalBufferProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            Ref<PhysicalDeviceExternalBufferInfo> pExternalBufferInfo,
        Ref<ExternalBufferProperties> pExternalBufferProperties
    ) =>
        DllImport.GetPhysicalDeviceExternalBufferProperties(
            physicalDevice,
            pExternalBufferInfo,
            pExternalBufferProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceExternalBufferPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            PhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
        ExternalBufferProperties* pExternalBufferProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                PhysicalDeviceExternalBufferInfo*,
                ExternalBufferProperties*,
                void>)(
                _slots[530] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[530] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalBufferPropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalBufferPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            PhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
        ExternalBufferProperties* pExternalBufferProperties
    ) =>
        DllImport.GetPhysicalDeviceExternalBufferPropertiesKHR(
            physicalDevice,
            pExternalBufferInfo,
            pExternalBufferProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceExternalBufferPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            Ref<PhysicalDeviceExternalBufferInfo> pExternalBufferInfo,
        Ref<ExternalBufferProperties> pExternalBufferProperties
    )
    {
        fixed (
            ExternalBufferProperties* __dsl_pExternalBufferProperties = pExternalBufferProperties
        )
        fixed (PhysicalDeviceExternalBufferInfo* __dsl_pExternalBufferInfo = pExternalBufferInfo)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceExternalBufferPropertiesKHR(
                __dsl_physicalDevice,
                __dsl_pExternalBufferInfo,
                __dsl_pExternalBufferProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_memory_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_memory_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_memory_capabilities+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalBufferPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalBufferPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalBufferInfo *")]
            Ref<PhysicalDeviceExternalBufferInfo> pExternalBufferInfo,
        Ref<ExternalBufferProperties> pExternalBufferProperties
    ) =>
        DllImport.GetPhysicalDeviceExternalBufferPropertiesKHR(
            physicalDevice,
            pExternalBufferInfo,
            pExternalBufferProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceExternalFenceProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            PhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
        ExternalFenceProperties* pExternalFenceProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                PhysicalDeviceExternalFenceInfo*,
                ExternalFenceProperties*,
                void>)(
                _slots[531] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[531] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalFenceProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFenceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalFenceProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            PhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
        ExternalFenceProperties* pExternalFenceProperties
    ) =>
        DllImport.GetPhysicalDeviceExternalFenceProperties(
            physicalDevice,
            pExternalFenceInfo,
            pExternalFenceProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceExternalFenceProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            Ref<PhysicalDeviceExternalFenceInfo> pExternalFenceInfo,
        Ref<ExternalFenceProperties> pExternalFenceProperties
    )
    {
        fixed (ExternalFenceProperties* __dsl_pExternalFenceProperties = pExternalFenceProperties)
        fixed (PhysicalDeviceExternalFenceInfo* __dsl_pExternalFenceInfo = pExternalFenceInfo)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceExternalFenceProperties(
                __dsl_physicalDevice,
                __dsl_pExternalFenceInfo,
                __dsl_pExternalFenceProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFenceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalFenceProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            Ref<PhysicalDeviceExternalFenceInfo> pExternalFenceInfo,
        Ref<ExternalFenceProperties> pExternalFenceProperties
    ) =>
        DllImport.GetPhysicalDeviceExternalFenceProperties(
            physicalDevice,
            pExternalFenceInfo,
            pExternalFenceProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceExternalFencePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            PhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
        ExternalFenceProperties* pExternalFenceProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                PhysicalDeviceExternalFenceInfo*,
                ExternalFenceProperties*,
                void>)(
                _slots[532] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[532] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalFencePropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_fence_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_fence_capabilities+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFencePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalFencePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            PhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
        ExternalFenceProperties* pExternalFenceProperties
    ) =>
        DllImport.GetPhysicalDeviceExternalFencePropertiesKHR(
            physicalDevice,
            pExternalFenceInfo,
            pExternalFenceProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceExternalFencePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            Ref<PhysicalDeviceExternalFenceInfo> pExternalFenceInfo,
        Ref<ExternalFenceProperties> pExternalFenceProperties
    )
    {
        fixed (ExternalFenceProperties* __dsl_pExternalFenceProperties = pExternalFenceProperties)
        fixed (PhysicalDeviceExternalFenceInfo* __dsl_pExternalFenceInfo = pExternalFenceInfo)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceExternalFencePropertiesKHR(
                __dsl_physicalDevice,
                __dsl_pExternalFenceInfo,
                __dsl_pExternalFenceProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_fence_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_fence_capabilities+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalFencePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalFencePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalFenceInfo *")]
            Ref<PhysicalDeviceExternalFenceInfo> pExternalFenceInfo,
        Ref<ExternalFenceProperties> pExternalFenceProperties
    ) =>
        DllImport.GetPhysicalDeviceExternalFencePropertiesKHR(
            physicalDevice,
            pExternalFenceInfo,
            pExternalFenceProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceExternalImageFormatPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] uint usage,
        [NativeTypeName("VkImageCreateFlags")] uint flags,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagsNV")] uint externalHandleType,
        ExternalImageFormatPropertiesNV* pExternalImageFormatProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                Format,
                ImageType,
                ImageTiling,
                uint,
                uint,
                uint,
                ExternalImageFormatPropertiesNV*,
                Result>)(
                _slots[533] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[533] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalImageFormatPropertiesNV",
                        "vulkan"
                    )
            )
        )(
            physicalDevice,
            format,
            type,
            tiling,
            usage,
            flags,
            externalHandleType,
            pExternalImageFormatProperties
        );

    [SupportedApiProfile("vulkan", ["VK_NV_external_memory_capabilities"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalImageFormatPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceExternalImageFormatPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] uint usage,
        [NativeTypeName("VkImageCreateFlags")] uint flags,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagsNV")] uint externalHandleType,
        ExternalImageFormatPropertiesNV* pExternalImageFormatProperties
    ) =>
        DllImport.GetPhysicalDeviceExternalImageFormatPropertiesNV(
            physicalDevice,
            format,
            type,
            tiling,
            usage,
            flags,
            externalHandleType,
            pExternalImageFormatProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceExternalImageFormatPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] uint usage,
        [NativeTypeName("VkImageCreateFlags")] uint flags,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagsNV")] uint externalHandleType,
        Ref<ExternalImageFormatPropertiesNV> pExternalImageFormatProperties
    )
    {
        fixed (
            ExternalImageFormatPropertiesNV* __dsl_pExternalImageFormatProperties =
                pExternalImageFormatProperties
        )
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceExternalImageFormatPropertiesNV(
                    __dsl_physicalDevice,
                    format,
                    type,
                    tiling,
                    usage,
                    flags,
                    externalHandleType,
                    __dsl_pExternalImageFormatProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_NV_external_memory_capabilities"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalImageFormatPropertiesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceExternalImageFormatPropertiesNV(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] uint usage,
        [NativeTypeName("VkImageCreateFlags")] uint flags,
        [NativeTypeName("VkExternalMemoryHandleTypeFlagsNV")] uint externalHandleType,
        Ref<ExternalImageFormatPropertiesNV> pExternalImageFormatProperties
    ) =>
        DllImport.GetPhysicalDeviceExternalImageFormatPropertiesNV(
            physicalDevice,
            format,
            type,
            tiling,
            usage,
            flags,
            externalHandleType,
            pExternalImageFormatProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceExternalSemaphoreProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
        ExternalSemaphoreProperties* pExternalSemaphoreProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                PhysicalDeviceExternalSemaphoreInfo*,
                ExternalSemaphoreProperties*,
                void>)(
                _slots[534] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[534] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalSemaphoreProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphoreProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalSemaphoreProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
        ExternalSemaphoreProperties* pExternalSemaphoreProperties
    ) =>
        DllImport.GetPhysicalDeviceExternalSemaphoreProperties(
            physicalDevice,
            pExternalSemaphoreInfo,
            pExternalSemaphoreProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceExternalSemaphoreProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            Ref<PhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo,
        Ref<ExternalSemaphoreProperties> pExternalSemaphoreProperties
    )
    {
        fixed (
            ExternalSemaphoreProperties* __dsl_pExternalSemaphoreProperties =
                pExternalSemaphoreProperties
        )
        fixed (
            PhysicalDeviceExternalSemaphoreInfo* __dsl_pExternalSemaphoreInfo =
                pExternalSemaphoreInfo
        )
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceExternalSemaphoreProperties(
                __dsl_physicalDevice,
                __dsl_pExternalSemaphoreInfo,
                __dsl_pExternalSemaphoreProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphoreProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalSemaphoreProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            Ref<PhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo,
        Ref<ExternalSemaphoreProperties> pExternalSemaphoreProperties
    ) =>
        DllImport.GetPhysicalDeviceExternalSemaphoreProperties(
            physicalDevice,
            pExternalSemaphoreInfo,
            pExternalSemaphoreProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceExternalSemaphorePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
        ExternalSemaphoreProperties* pExternalSemaphoreProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                PhysicalDeviceExternalSemaphoreInfo*,
                ExternalSemaphoreProperties*,
                void>)(
                _slots[535] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[535] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_semaphore_capabilities+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalSemaphorePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
        ExternalSemaphoreProperties* pExternalSemaphoreProperties
    ) =>
        DllImport.GetPhysicalDeviceExternalSemaphorePropertiesKHR(
            physicalDevice,
            pExternalSemaphoreInfo,
            pExternalSemaphoreProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceExternalSemaphorePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            Ref<PhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo,
        Ref<ExternalSemaphoreProperties> pExternalSemaphoreProperties
    )
    {
        fixed (
            ExternalSemaphoreProperties* __dsl_pExternalSemaphoreProperties =
                pExternalSemaphoreProperties
        )
        fixed (
            PhysicalDeviceExternalSemaphoreInfo* __dsl_pExternalSemaphoreInfo =
                pExternalSemaphoreInfo
        )
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceExternalSemaphorePropertiesKHR(
                __dsl_physicalDevice,
                __dsl_pExternalSemaphoreInfo,
                __dsl_pExternalSemaphoreProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_capabilities"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_capabilities+VK_KHR_get_physical_device_properties2",
            "VK_KHR_external_semaphore_capabilities+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceExternalSemaphorePropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceExternalSemaphoreInfo *")]
            Ref<PhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo,
        Ref<ExternalSemaphoreProperties> pExternalSemaphoreProperties
    ) =>
        DllImport.GetPhysicalDeviceExternalSemaphorePropertiesKHR(
            physicalDevice,
            pExternalSemaphoreInfo,
            pExternalSemaphoreProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceFeatures(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceFeatures* pFeatures
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, PhysicalDeviceFeatures*, void>)(
                _slots[536] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[536] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceFeatures",
                        "vulkan"
                    )
            )
        )(physicalDevice, pFeatures);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFeatures(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceFeatures* pFeatures
    ) => DllImport.GetPhysicalDeviceFeatures(physicalDevice, pFeatures);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceFeatures(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceFeatures> pFeatures
    )
    {
        fixed (PhysicalDeviceFeatures* __dsl_pFeatures = pFeatures)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceFeatures(__dsl_physicalDevice, __dsl_pFeatures);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFeatures(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceFeatures> pFeatures
    ) => DllImport.GetPhysicalDeviceFeatures(physicalDevice, pFeatures);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceFeatures2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceFeatures2* pFeatures
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, PhysicalDeviceFeatures2*, void>)(
                _slots[537] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[537] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceFeatures2",
                        "vulkan"
                    )
            )
        )(physicalDevice, pFeatures);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFeatures2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceFeatures2* pFeatures
    ) => DllImport.GetPhysicalDeviceFeatures2(physicalDevice, pFeatures);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceFeatures2(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceFeatures2> pFeatures
    )
    {
        fixed (PhysicalDeviceFeatures2* __dsl_pFeatures = pFeatures)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceFeatures2(__dsl_physicalDevice, __dsl_pFeatures);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFeatures2(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceFeatures2> pFeatures
    ) => DllImport.GetPhysicalDeviceFeatures2(physicalDevice, pFeatures);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceFeatures2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceFeatures2* pFeatures
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, PhysicalDeviceFeatures2*, void>)(
                _slots[538] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[538] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceFeatures2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pFeatures);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFeatures2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceFeatures2* pFeatures
    ) => DllImport.GetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceFeatures2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceFeatures2> pFeatures
    )
    {
        fixed (PhysicalDeviceFeatures2* __dsl_pFeatures = pFeatures)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceFeatures2KHR(__dsl_physicalDevice, __dsl_pFeatures);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFeatures2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFeatures2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceFeatures2> pFeatures
    ) => DllImport.GetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        Format format,
        FormatProperties* pFormatProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, Format, FormatProperties*, void>)(
                _slots[539] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[539] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceFormatProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, format, pFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        Format format,
        FormatProperties* pFormatProperties
    ) => DllImport.GetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Format format,
        Ref<FormatProperties> pFormatProperties
    )
    {
        fixed (FormatProperties* __dsl_pFormatProperties = pFormatProperties)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceFormatProperties(
                __dsl_physicalDevice,
                format,
                __dsl_pFormatProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Format format,
        Ref<FormatProperties> pFormatProperties
    ) => DllImport.GetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        Format format,
        FormatProperties2* pFormatProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, Format, FormatProperties2*, void>)(
                _slots[540] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[540] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceFormatProperties2",
                        "vulkan"
                    )
            )
        )(physicalDevice, format, pFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        Format format,
        FormatProperties2* pFormatProperties
    ) => DllImport.GetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Format format,
        Ref<FormatProperties2> pFormatProperties
    )
    {
        fixed (FormatProperties2* __dsl_pFormatProperties = pFormatProperties)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceFormatProperties2(
                __dsl_physicalDevice,
                format,
                __dsl_pFormatProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Format format,
        Ref<FormatProperties2> pFormatProperties
    ) => DllImport.GetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        Format format,
        FormatProperties2* pFormatProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, Format, FormatProperties2*, void>)(
                _slots[541] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[541] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceFormatProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, format, pFormatProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        Format format,
        FormatProperties2* pFormatProperties
    ) => DllImport.GetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Format format,
        Ref<FormatProperties2> pFormatProperties
    )
    {
        fixed (FormatProperties2* __dsl_pFormatProperties = pFormatProperties)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceFormatProperties2KHR(
                __dsl_physicalDevice,
                format,
                __dsl_pFormatProperties
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Format format,
        Ref<FormatProperties2> pFormatProperties
    ) => DllImport.GetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceFragmentShadingRatesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pFragmentShadingRateCount,
        PhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                uint*,
                PhysicalDeviceFragmentShadingRateKHR*,
                Result>)(
                _slots[542] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[542] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceFragmentShadingRatesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFragmentShadingRatesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceFragmentShadingRatesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pFragmentShadingRateCount,
        PhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates
    ) =>
        DllImport.GetPhysicalDeviceFragmentShadingRatesKHR(
            physicalDevice,
            pFragmentShadingRateCount,
            pFragmentShadingRates
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceFragmentShadingRatesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pFragmentShadingRateCount,
        Ref<PhysicalDeviceFragmentShadingRateKHR> pFragmentShadingRates
    )
    {
        fixed (
            PhysicalDeviceFragmentShadingRateKHR* __dsl_pFragmentShadingRates =
                pFragmentShadingRates
        )
        fixed (uint* __dsl_pFragmentShadingRateCount = pFragmentShadingRateCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceFragmentShadingRatesKHR(
                    __dsl_physicalDevice,
                    __dsl_pFragmentShadingRateCount,
                    __dsl_pFragmentShadingRates
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_fragment_shading_rate"],
        ImpliesSets = [
            "VK_KHR_create_renderpass2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_create_renderpass2+VK_VERSION_1_1",
            "VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceFragmentShadingRatesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceFragmentShadingRatesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pFragmentShadingRateCount,
        Ref<PhysicalDeviceFragmentShadingRateKHR> pFragmentShadingRates
    ) =>
        DllImport.GetPhysicalDeviceFragmentShadingRatesKHR(
            physicalDevice,
            pFragmentShadingRateCount,
            pFragmentShadingRates
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] uint usage,
        [NativeTypeName("VkImageCreateFlags")] uint flags,
        ImageFormatProperties* pImageFormatProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                Format,
                ImageType,
                ImageTiling,
                uint,
                uint,
                ImageFormatProperties*,
                Result>)(
                _slots[543] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[543] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceImageFormatProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] uint usage,
        [NativeTypeName("VkImageCreateFlags")] uint flags,
        ImageFormatProperties* pImageFormatProperties
    ) =>
        DllImport.GetPhysicalDeviceImageFormatProperties(
            physicalDevice,
            format,
            type,
            tiling,
            usage,
            flags,
            pImageFormatProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] uint usage,
        [NativeTypeName("VkImageCreateFlags")] uint flags,
        Ref<ImageFormatProperties> pImageFormatProperties
    )
    {
        fixed (ImageFormatProperties* __dsl_pImageFormatProperties = pImageFormatProperties)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceImageFormatProperties(
                    __dsl_physicalDevice,
                    format,
                    type,
                    tiling,
                    usage,
                    flags,
                    __dsl_pImageFormatProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Format format,
        ImageType type,
        ImageTiling tiling,
        [NativeTypeName("VkImageUsageFlags")] uint usage,
        [NativeTypeName("VkImageCreateFlags")] uint flags,
        Ref<ImageFormatProperties> pImageFormatProperties
    ) =>
        DllImport.GetPhysicalDeviceImageFormatProperties(
            physicalDevice,
            format,
            type,
            tiling,
            usage,
            flags,
            pImageFormatProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            PhysicalDeviceImageFormatInfo2* pImageFormatInfo,
        ImageFormatProperties2* pImageFormatProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                PhysicalDeviceImageFormatInfo2*,
                ImageFormatProperties2*,
                Result>)(
                _slots[544] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[544] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceImageFormatProperties2",
                        "vulkan"
                    )
            )
        )(physicalDevice, pImageFormatInfo, pImageFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            PhysicalDeviceImageFormatInfo2* pImageFormatInfo,
        ImageFormatProperties2* pImageFormatProperties
    ) =>
        DllImport.GetPhysicalDeviceImageFormatProperties2(
            physicalDevice,
            pImageFormatInfo,
            pImageFormatProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            Ref<PhysicalDeviceImageFormatInfo2> pImageFormatInfo,
        Ref<ImageFormatProperties2> pImageFormatProperties
    )
    {
        fixed (ImageFormatProperties2* __dsl_pImageFormatProperties = pImageFormatProperties)
        fixed (PhysicalDeviceImageFormatInfo2* __dsl_pImageFormatInfo = pImageFormatInfo)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceImageFormatProperties2(
                    __dsl_physicalDevice,
                    __dsl_pImageFormatInfo,
                    __dsl_pImageFormatProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            Ref<PhysicalDeviceImageFormatInfo2> pImageFormatInfo,
        Ref<ImageFormatProperties2> pImageFormatProperties
    ) =>
        DllImport.GetPhysicalDeviceImageFormatProperties2(
            physicalDevice,
            pImageFormatInfo,
            pImageFormatProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            PhysicalDeviceImageFormatInfo2* pImageFormatInfo,
        ImageFormatProperties2* pImageFormatProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                PhysicalDeviceImageFormatInfo2*,
                ImageFormatProperties2*,
                Result>)(
                _slots[545] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[545] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceImageFormatProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pImageFormatInfo, pImageFormatProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            PhysicalDeviceImageFormatInfo2* pImageFormatInfo,
        ImageFormatProperties2* pImageFormatProperties
    ) =>
        DllImport.GetPhysicalDeviceImageFormatProperties2KHR(
            physicalDevice,
            pImageFormatInfo,
            pImageFormatProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            Ref<PhysicalDeviceImageFormatInfo2> pImageFormatInfo,
        Ref<ImageFormatProperties2> pImageFormatProperties
    )
    {
        fixed (ImageFormatProperties2* __dsl_pImageFormatProperties = pImageFormatProperties)
        fixed (PhysicalDeviceImageFormatInfo2* __dsl_pImageFormatInfo = pImageFormatInfo)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceImageFormatProperties2KHR(
                    __dsl_physicalDevice,
                    __dsl_pImageFormatInfo,
                    __dsl_pImageFormatProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceImageFormatInfo2 *")]
            Ref<PhysicalDeviceImageFormatInfo2> pImageFormatInfo,
        Ref<ImageFormatProperties2> pImageFormatProperties
    ) =>
        DllImport.GetPhysicalDeviceImageFormatProperties2KHR(
            physicalDevice,
            pImageFormatInfo,
            pImageFormatProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceMemoryProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceMemoryProperties* pMemoryProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, PhysicalDeviceMemoryProperties*, void>)(
                _slots[546] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[546] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceMemoryProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pMemoryProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMemoryProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceMemoryProperties* pMemoryProperties
    ) => DllImport.GetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceMemoryProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceMemoryProperties> pMemoryProperties
    )
    {
        fixed (PhysicalDeviceMemoryProperties* __dsl_pMemoryProperties = pMemoryProperties)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceMemoryProperties(
                __dsl_physicalDevice,
                __dsl_pMemoryProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMemoryProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceMemoryProperties> pMemoryProperties
    ) => DllImport.GetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceMemoryProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceMemoryProperties2* pMemoryProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, PhysicalDeviceMemoryProperties2*, void>)(
                _slots[547] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[547] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceMemoryProperties2",
                        "vulkan"
                    )
            )
        )(physicalDevice, pMemoryProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMemoryProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceMemoryProperties2* pMemoryProperties
    ) => DllImport.GetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceMemoryProperties2(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceMemoryProperties2> pMemoryProperties
    )
    {
        fixed (PhysicalDeviceMemoryProperties2* __dsl_pMemoryProperties = pMemoryProperties)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceMemoryProperties2(
                __dsl_physicalDevice,
                __dsl_pMemoryProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMemoryProperties2(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceMemoryProperties2> pMemoryProperties
    ) => DllImport.GetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceMemoryProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceMemoryProperties2* pMemoryProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, PhysicalDeviceMemoryProperties2*, void>)(
                _slots[548] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[548] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceMemoryProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pMemoryProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMemoryProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceMemoryProperties2* pMemoryProperties
    ) => DllImport.GetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceMemoryProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceMemoryProperties2> pMemoryProperties
    )
    {
        fixed (PhysicalDeviceMemoryProperties2* __dsl_pMemoryProperties = pMemoryProperties)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceMemoryProperties2KHR(
                __dsl_physicalDevice,
                __dsl_pMemoryProperties
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMemoryProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMemoryProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceMemoryProperties2> pMemoryProperties
    ) => DllImport.GetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceMultisamplePropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
        MultisamplePropertiesEXT* pMultisampleProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                SampleCountFlags,
                MultisamplePropertiesEXT*,
                void>)(
                _slots[549] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[549] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceMultisamplePropertiesEXT",
                        "vulkan"
                    )
            )
        )(physicalDevice, samples, pMultisampleProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMultisamplePropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMultisamplePropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
        MultisamplePropertiesEXT* pMultisampleProperties
    ) =>
        DllImport.GetPhysicalDeviceMultisamplePropertiesEXT(
            physicalDevice,
            samples,
            pMultisampleProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceMultisamplePropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
        Ref<MultisamplePropertiesEXT> pMultisampleProperties
    )
    {
        fixed (MultisamplePropertiesEXT* __dsl_pMultisampleProperties = pMultisampleProperties)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceMultisamplePropertiesEXT(
                __dsl_physicalDevice,
                samples,
                __dsl_pMultisampleProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_sample_locations"],
        ImpliesSets = [
            "VK_EXT_sample_locations+VK_KHR_get_physical_device_properties2",
            "VK_EXT_sample_locations+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceMultisamplePropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceMultisamplePropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
        Ref<MultisamplePropertiesEXT> pMultisampleProperties
    ) =>
        DllImport.GetPhysicalDeviceMultisamplePropertiesEXT(
            physicalDevice,
            samples,
            pMultisampleProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceOpticalFlowImageFormatsNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkOpticalFlowImageFormatInfoNV *")]
            OpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pFormatCount,
        OpticalFlowImageFormatPropertiesNV* pImageFormatProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                OpticalFlowImageFormatInfoNV*,
                uint*,
                OpticalFlowImageFormatPropertiesNV*,
                Result>)(
                _slots[550] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[550] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceOpticalFlowImageFormatsNV",
                        "vulkan"
                    )
            )
        )(physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount, pImageFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceOpticalFlowImageFormatsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceOpticalFlowImageFormatsNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkOpticalFlowImageFormatInfoNV *")]
            OpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pFormatCount,
        OpticalFlowImageFormatPropertiesNV* pImageFormatProperties
    ) =>
        DllImport.GetPhysicalDeviceOpticalFlowImageFormatsNV(
            physicalDevice,
            pOpticalFlowImageFormatInfo,
            pFormatCount,
            pImageFormatProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceOpticalFlowImageFormatsNV(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkOpticalFlowImageFormatInfoNV *")]
            Ref<OpticalFlowImageFormatInfoNV> pOpticalFlowImageFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pFormatCount,
        Ref<OpticalFlowImageFormatPropertiesNV> pImageFormatProperties
    )
    {
        fixed (
            OpticalFlowImageFormatPropertiesNV* __dsl_pImageFormatProperties =
                pImageFormatProperties
        )
        fixed (uint* __dsl_pFormatCount = pFormatCount)
        fixed (
            OpticalFlowImageFormatInfoNV* __dsl_pOpticalFlowImageFormatInfo =
                pOpticalFlowImageFormatInfo
        )
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceOpticalFlowImageFormatsNV(
                    __dsl_physicalDevice,
                    __dsl_pOpticalFlowImageFormatInfo,
                    __dsl_pFormatCount,
                    __dsl_pImageFormatProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_optical_flow"],
        ImpliesSets = [
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_format_feature_flags2+VK_KHR_synchronization2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceOpticalFlowImageFormatsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceOpticalFlowImageFormatsNV(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkOpticalFlowImageFormatInfoNV *")]
            Ref<OpticalFlowImageFormatInfoNV> pOpticalFlowImageFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pFormatCount,
        Ref<OpticalFlowImageFormatPropertiesNV> pImageFormatProperties
    ) =>
        DllImport.GetPhysicalDeviceOpticalFlowImageFormatsNV(
            physicalDevice,
            pOpticalFlowImageFormatInfo,
            pFormatCount,
            pImageFormatProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDevicePresentRectanglesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        [NativeTypeName("uint32_t *")] uint* pRectCount,
        Rect2D* pRects
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, SurfaceKHRHandle*, uint*, Rect2D*, Result>)(
                _slots[551] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[551] = nativeContext.LoadFunction(
                        "vkGetPhysicalDevicePresentRectanglesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, surface, pRectCount, pRects);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDevicePresentRectanglesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDevicePresentRectanglesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        [NativeTypeName("uint32_t *")] uint* pRectCount,
        Rect2D* pRects
    ) =>
        DllImport.GetPhysicalDevicePresentRectanglesKHR(
            physicalDevice,
            surface,
            pRectCount,
            pRects
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDevicePresentRectanglesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        [NativeTypeName("uint32_t *")] Ref<uint> pRectCount,
        Ref<Rect2D> pRects
    )
    {
        fixed (Rect2D* __dsl_pRects = pRects)
        fixed (uint* __dsl_pRectCount = pRectCount)
        fixed (SurfaceKHRHandle* __dsl_surface = surface)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDevicePresentRectanglesKHR(
                    __dsl_physicalDevice,
                    __dsl_surface,
                    __dsl_pRectCount,
                    __dsl_pRects
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_swapchain", "VK_VERSION_1_1"],
        ImpliesSets = ["VK_KHR_surface"],
        RequireAll = true
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDevicePresentRectanglesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDevicePresentRectanglesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        [NativeTypeName("uint32_t *")] Ref<uint> pRectCount,
        Ref<Rect2D> pRects
    ) =>
        DllImport.GetPhysicalDevicePresentRectanglesKHR(
            physicalDevice,
            surface,
            pRectCount,
            pRects
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceProperties* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, PhysicalDeviceProperties*, void>)(
                _slots[552] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[552] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceProperties* pProperties
    ) => DllImport.GetPhysicalDeviceProperties(physicalDevice, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceProperties> pProperties
    )
    {
        fixed (PhysicalDeviceProperties* __dsl_pProperties = pProperties)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceProperties(__dsl_physicalDevice, __dsl_pProperties);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceProperties> pProperties
    ) => DllImport.GetPhysicalDeviceProperties(physicalDevice, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceProperties2* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, PhysicalDeviceProperties2*, void>)(
                _slots[553] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[553] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceProperties2",
                        "vulkan"
                    )
            )
        )(physicalDevice, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceProperties2* pProperties
    ) => DllImport.GetPhysicalDeviceProperties2(physicalDevice, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceProperties2(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceProperties2> pProperties
    )
    {
        fixed (PhysicalDeviceProperties2* __dsl_pProperties = pProperties)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceProperties2(__dsl_physicalDevice, __dsl_pProperties);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceProperties2(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceProperties2> pProperties
    ) => DllImport.GetPhysicalDeviceProperties2(physicalDevice, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceProperties2* pProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, PhysicalDeviceProperties2*, void>)(
                _slots[554] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[554] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        PhysicalDeviceProperties2* pProperties
    ) => DllImport.GetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceProperties2> pProperties
    )
    {
        fixed (PhysicalDeviceProperties2* __dsl_pProperties = pProperties)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceProperties2KHR(
                __dsl_physicalDevice,
                __dsl_pProperties
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Ref<PhysicalDeviceProperties2> pProperties
    ) => DllImport.GetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkQueryPoolPerformanceCreateInfoKHR *")]
            QueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo,
        [NativeTypeName("uint32_t *")] uint* pNumPasses
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                QueryPoolPerformanceCreateInfoKHR*,
                uint*,
                void>)(
                _slots[555] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[555] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkQueryPoolPerformanceCreateInfoKHR *")]
            QueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo,
        [NativeTypeName("uint32_t *")] uint* pNumPasses
    ) =>
        DllImport.GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
            physicalDevice,
            pPerformanceQueryCreateInfo,
            pNumPasses
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkQueryPoolPerformanceCreateInfoKHR *")]
            Ref<QueryPoolPerformanceCreateInfoKHR> pPerformanceQueryCreateInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pNumPasses
    )
    {
        fixed (uint* __dsl_pNumPasses = pNumPasses)
        fixed (
            QueryPoolPerformanceCreateInfoKHR* __dsl_pPerformanceQueryCreateInfo =
                pPerformanceQueryCreateInfo
        )
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
                __dsl_physicalDevice,
                __dsl_pPerformanceQueryCreateInfo,
                __dsl_pNumPasses
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkQueryPoolPerformanceCreateInfoKHR *")]
            Ref<QueryPoolPerformanceCreateInfoKHR> pPerformanceQueryCreateInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pNumPasses
    ) =>
        DllImport.GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
            physicalDevice,
            pPerformanceQueryCreateInfo,
            pNumPasses
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceQueueFamilyProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
        QueueFamilyProperties* pQueueFamilyProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, uint*, QueueFamilyProperties*, void>)(
                _slots[556] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[556] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceQueueFamilyProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
        QueueFamilyProperties* pQueueFamilyProperties
    ) =>
        DllImport.GetPhysicalDeviceQueueFamilyProperties(
            physicalDevice,
            pQueueFamilyPropertyCount,
            pQueueFamilyProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceQueueFamilyProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
        Ref<QueueFamilyProperties> pQueueFamilyProperties
    )
    {
        fixed (QueueFamilyProperties* __dsl_pQueueFamilyProperties = pQueueFamilyProperties)
        fixed (uint* __dsl_pQueueFamilyPropertyCount = pQueueFamilyPropertyCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceQueueFamilyProperties(
                __dsl_physicalDevice,
                __dsl_pQueueFamilyPropertyCount,
                __dsl_pQueueFamilyProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
        Ref<QueueFamilyProperties> pQueueFamilyProperties
    ) =>
        DllImport.GetPhysicalDeviceQueueFamilyProperties(
            physicalDevice,
            pQueueFamilyPropertyCount,
            pQueueFamilyProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceQueueFamilyProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
        QueueFamilyProperties2* pQueueFamilyProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, uint*, QueueFamilyProperties2*, void>)(
                _slots[557] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[557] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceQueueFamilyProperties2",
                        "vulkan"
                    )
            )
        )(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
        QueueFamilyProperties2* pQueueFamilyProperties
    ) =>
        DllImport.GetPhysicalDeviceQueueFamilyProperties2(
            physicalDevice,
            pQueueFamilyPropertyCount,
            pQueueFamilyProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceQueueFamilyProperties2(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
        Ref<QueueFamilyProperties2> pQueueFamilyProperties
    )
    {
        fixed (QueueFamilyProperties2* __dsl_pQueueFamilyProperties = pQueueFamilyProperties)
        fixed (uint* __dsl_pQueueFamilyPropertyCount = pQueueFamilyPropertyCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceQueueFamilyProperties2(
                __dsl_physicalDevice,
                __dsl_pQueueFamilyPropertyCount,
                __dsl_pQueueFamilyProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyProperties2(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
        Ref<QueueFamilyProperties2> pQueueFamilyProperties
    ) =>
        DllImport.GetPhysicalDeviceQueueFamilyProperties2(
            physicalDevice,
            pQueueFamilyPropertyCount,
            pQueueFamilyProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceQueueFamilyProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
        QueueFamilyProperties2* pQueueFamilyProperties
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, uint*, QueueFamilyProperties2*, void>)(
                _slots[558] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[558] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceQueueFamilyProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pQueueFamilyPropertyCount,
        QueueFamilyProperties2* pQueueFamilyProperties
    ) =>
        DllImport.GetPhysicalDeviceQueueFamilyProperties2KHR(
            physicalDevice,
            pQueueFamilyPropertyCount,
            pQueueFamilyProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceQueueFamilyProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
        Ref<QueueFamilyProperties2> pQueueFamilyProperties
    )
    {
        fixed (QueueFamilyProperties2* __dsl_pQueueFamilyProperties = pQueueFamilyProperties)
        fixed (uint* __dsl_pQueueFamilyPropertyCount = pQueueFamilyPropertyCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceQueueFamilyProperties2KHR(
                __dsl_physicalDevice,
                __dsl_pQueueFamilyPropertyCount,
                __dsl_pQueueFamilyProperties
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceQueueFamilyProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pQueueFamilyPropertyCount,
        Ref<QueueFamilyProperties2> pQueueFamilyProperties
    ) =>
        DllImport.GetPhysicalDeviceQueueFamilyProperties2KHR(
            physicalDevice,
            pQueueFamilyPropertyCount,
            pQueueFamilyProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceSparseImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        Format format,
        ImageType type,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
        [NativeTypeName("VkImageUsageFlags")] uint usage,
        ImageTiling tiling,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        SparseImageFormatProperties* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                Format,
                ImageType,
                SampleCountFlags,
                uint,
                ImageTiling,
                uint*,
                SparseImageFormatProperties*,
                void>)(
                _slots[559] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[559] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSparseImageFormatProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceSparseImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        Format format,
        ImageType type,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
        [NativeTypeName("VkImageUsageFlags")] uint usage,
        ImageTiling tiling,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        SparseImageFormatProperties* pProperties
    ) =>
        DllImport.GetPhysicalDeviceSparseImageFormatProperties(
            physicalDevice,
            format,
            type,
            samples,
            usage,
            tiling,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceSparseImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Format format,
        ImageType type,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
        [NativeTypeName("VkImageUsageFlags")] uint usage,
        ImageTiling tiling,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<SparseImageFormatProperties> pProperties
    )
    {
        fixed (SparseImageFormatProperties* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceSparseImageFormatProperties(
                __dsl_physicalDevice,
                format,
                type,
                samples,
                usage,
                tiling,
                __dsl_pPropertyCount,
                __dsl_pProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceSparseImageFormatProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        Format format,
        ImageType type,
        [NativeTypeName("VkSampleCountFlagBits")] SampleCountFlags samples,
        [NativeTypeName("VkImageUsageFlags")] uint usage,
        ImageTiling tiling,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<SparseImageFormatProperties> pProperties
    ) =>
        DllImport.GetPhysicalDeviceSparseImageFormatProperties(
            physicalDevice,
            format,
            type,
            samples,
            usage,
            tiling,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceSparseImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            PhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        SparseImageFormatProperties2* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                PhysicalDeviceSparseImageFormatInfo2*,
                uint*,
                SparseImageFormatProperties2*,
                void>)(
                _slots[560] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[560] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSparseImageFormatProperties2",
                        "vulkan"
                    )
            )
        )(physicalDevice, pFormatInfo, pPropertyCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceSparseImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            PhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        SparseImageFormatProperties2* pProperties
    ) =>
        DllImport.GetPhysicalDeviceSparseImageFormatProperties2(
            physicalDevice,
            pFormatInfo,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceSparseImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            Ref<PhysicalDeviceSparseImageFormatInfo2> pFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<SparseImageFormatProperties2> pProperties
    )
    {
        fixed (SparseImageFormatProperties2* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (PhysicalDeviceSparseImageFormatInfo2* __dsl_pFormatInfo = pFormatInfo)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceSparseImageFormatProperties2(
                __dsl_physicalDevice,
                __dsl_pFormatInfo,
                __dsl_pPropertyCount,
                __dsl_pProperties
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceSparseImageFormatProperties2(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            Ref<PhysicalDeviceSparseImageFormatInfo2> pFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<SparseImageFormatProperties2> pProperties
    ) =>
        DllImport.GetPhysicalDeviceSparseImageFormatProperties2(
            physicalDevice,
            pFormatInfo,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceSparseImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            PhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        SparseImageFormatProperties2* pProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                PhysicalDeviceSparseImageFormatInfo2*,
                uint*,
                SparseImageFormatProperties2*,
                void>)(
                _slots[561] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[561] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSparseImageFormatProperties2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pFormatInfo, pPropertyCount, pProperties);

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            PhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pPropertyCount,
        SparseImageFormatProperties2* pProperties
    ) =>
        DllImport.GetPhysicalDeviceSparseImageFormatProperties2KHR(
            physicalDevice,
            pFormatInfo,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPhysicalDeviceSparseImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            Ref<PhysicalDeviceSparseImageFormatInfo2> pFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<SparseImageFormatProperties2> pProperties
    )
    {
        fixed (SparseImageFormatProperties2* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pPropertyCount = pPropertyCount)
        fixed (PhysicalDeviceSparseImageFormatInfo2* __dsl_pFormatInfo = pFormatInfo)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            ((IVulkan)this).GetPhysicalDeviceSparseImageFormatProperties2KHR(
                __dsl_physicalDevice,
                __dsl_pFormatInfo,
                __dsl_pPropertyCount,
                __dsl_pProperties
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_get_physical_device_properties2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSparseImageFormatInfo2 *")]
            Ref<PhysicalDeviceSparseImageFormatInfo2> pFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pPropertyCount,
        Ref<SparseImageFormatProperties2> pProperties
    ) =>
        DllImport.GetPhysicalDeviceSparseImageFormatProperties2KHR(
            physicalDevice,
            pFormatInfo,
            pPropertyCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pCombinationCount,
        FramebufferMixedSamplesCombinationNV* pCombinations
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                uint*,
                FramebufferMixedSamplesCombinationNV*,
                Result>)(
                _slots[562] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[562] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV",
                        "vulkan"
                    )
            )
        )(physicalDevice, pCombinationCount, pCombinations);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_coverage_reduction_mode"],
        ImpliesSets = [
            "VK_NV_framebuffer_mixed_samples+VK_KHR_get_physical_device_properties2",
            "VK_NV_framebuffer_mixed_samples+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pCombinationCount,
        FramebufferMixedSamplesCombinationNV* pCombinations
    ) =>
        DllImport.GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
            physicalDevice,
            pCombinationCount,
            pCombinations
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pCombinationCount,
        Ref<FramebufferMixedSamplesCombinationNV> pCombinations
    )
    {
        fixed (FramebufferMixedSamplesCombinationNV* __dsl_pCombinations = pCombinations)
        fixed (uint* __dsl_pCombinationCount = pCombinationCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
                    __dsl_physicalDevice,
                    __dsl_pCombinationCount,
                    __dsl_pCombinations
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_coverage_reduction_mode"],
        ImpliesSets = [
            "VK_NV_framebuffer_mixed_samples+VK_KHR_get_physical_device_properties2",
            "VK_NV_framebuffer_mixed_samples+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pCombinationCount,
        Ref<FramebufferMixedSamplesCombinationNV> pCombinations
    ) =>
        DllImport.GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
            physicalDevice,
            pCombinationCount,
            pCombinations
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSurfaceCapabilities2EXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        SurfaceCapabilities2EXT* pSurfaceCapabilities
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                SurfaceKHRHandle*,
                SurfaceCapabilities2EXT*,
                Result>)(
                _slots[563] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[563] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSurfaceCapabilities2EXT",
                        "vulkan"
                    )
            )
        )(physicalDevice, surface, pSurfaceCapabilities);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_surface_counter"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceCapabilities2EXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        SurfaceCapabilities2EXT* pSurfaceCapabilities
    ) =>
        DllImport.GetPhysicalDeviceSurfaceCapabilities2EXT(
            physicalDevice,
            surface,
            pSurfaceCapabilities
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSurfaceCapabilities2EXT(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        Ref<SurfaceCapabilities2EXT> pSurfaceCapabilities
    )
    {
        fixed (SurfaceCapabilities2EXT* __dsl_pSurfaceCapabilities = pSurfaceCapabilities)
        fixed (SurfaceKHRHandle* __dsl_surface = surface)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceSurfaceCapabilities2EXT(
                    __dsl_physicalDevice,
                    __dsl_surface,
                    __dsl_pSurfaceCapabilities
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_surface_counter"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2EXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceCapabilities2EXT(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        Ref<SurfaceCapabilities2EXT> pSurfaceCapabilities
    ) =>
        DllImport.GetPhysicalDeviceSurfaceCapabilities2EXT(
            physicalDevice,
            surface,
            pSurfaceCapabilities
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSurfaceCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
        SurfaceCapabilities2KHR* pSurfaceCapabilities
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                PhysicalDeviceSurfaceInfo2KHR*,
                SurfaceCapabilities2KHR*,
                Result>)(
                _slots[564] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[564] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSurfaceCapabilities2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
        SurfaceCapabilities2KHR* pSurfaceCapabilities
    ) =>
        DllImport.GetPhysicalDeviceSurfaceCapabilities2KHR(
            physicalDevice,
            pSurfaceInfo,
            pSurfaceCapabilities
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSurfaceCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            Ref<PhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo,
        Ref<SurfaceCapabilities2KHR> pSurfaceCapabilities
    )
    {
        fixed (SurfaceCapabilities2KHR* __dsl_pSurfaceCapabilities = pSurfaceCapabilities)
        fixed (PhysicalDeviceSurfaceInfo2KHR* __dsl_pSurfaceInfo = pSurfaceInfo)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceSurfaceCapabilities2KHR(
                    __dsl_physicalDevice,
                    __dsl_pSurfaceInfo,
                    __dsl_pSurfaceCapabilities
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceCapabilities2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            Ref<PhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo,
        Ref<SurfaceCapabilities2KHR> pSurfaceCapabilities
    ) =>
        DllImport.GetPhysicalDeviceSurfaceCapabilities2KHR(
            physicalDevice,
            pSurfaceInfo,
            pSurfaceCapabilities
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSurfaceCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        SurfaceCapabilitiesKHR* pSurfaceCapabilities
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                SurfaceKHRHandle*,
                SurfaceCapabilitiesKHR*,
                Result>)(
                _slots[565] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[565] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSurfaceCapabilitiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, surface, pSurfaceCapabilities);

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        SurfaceCapabilitiesKHR* pSurfaceCapabilities
    ) =>
        DllImport.GetPhysicalDeviceSurfaceCapabilitiesKHR(
            physicalDevice,
            surface,
            pSurfaceCapabilities
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSurfaceCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        Ref<SurfaceCapabilitiesKHR> pSurfaceCapabilities
    )
    {
        fixed (SurfaceCapabilitiesKHR* __dsl_pSurfaceCapabilities = pSurfaceCapabilities)
        fixed (SurfaceKHRHandle* __dsl_surface = surface)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceSurfaceCapabilitiesKHR(
                    __dsl_physicalDevice,
                    __dsl_surface,
                    __dsl_pSurfaceCapabilities
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        Ref<SurfaceCapabilitiesKHR> pSurfaceCapabilities
    ) =>
        DllImport.GetPhysicalDeviceSurfaceCapabilitiesKHR(
            physicalDevice,
            surface,
            pSurfaceCapabilities
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSurfaceFormats2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
        [NativeTypeName("uint32_t *")] uint* pSurfaceFormatCount,
        SurfaceFormat2KHR* pSurfaceFormats
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                PhysicalDeviceSurfaceInfo2KHR*,
                uint*,
                SurfaceFormat2KHR*,
                Result>)(
                _slots[566] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[566] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSurfaceFormats2KHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormats2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceFormats2KHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
        [NativeTypeName("uint32_t *")] uint* pSurfaceFormatCount,
        SurfaceFormat2KHR* pSurfaceFormats
    ) =>
        DllImport.GetPhysicalDeviceSurfaceFormats2KHR(
            physicalDevice,
            pSurfaceInfo,
            pSurfaceFormatCount,
            pSurfaceFormats
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSurfaceFormats2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            Ref<PhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSurfaceFormatCount,
        Ref<SurfaceFormat2KHR> pSurfaceFormats
    )
    {
        fixed (SurfaceFormat2KHR* __dsl_pSurfaceFormats = pSurfaceFormats)
        fixed (uint* __dsl_pSurfaceFormatCount = pSurfaceFormatCount)
        fixed (PhysicalDeviceSurfaceInfo2KHR* __dsl_pSurfaceInfo = pSurfaceInfo)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceSurfaceFormats2KHR(
                    __dsl_physicalDevice,
                    __dsl_pSurfaceInfo,
                    __dsl_pSurfaceFormatCount,
                    __dsl_pSurfaceFormats
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_get_surface_capabilities2"],
        ImpliesSets = ["VK_KHR_surface"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormats2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceFormats2KHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceSurfaceInfo2KHR *")]
            Ref<PhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pSurfaceFormatCount,
        Ref<SurfaceFormat2KHR> pSurfaceFormats
    ) =>
        DllImport.GetPhysicalDeviceSurfaceFormats2KHR(
            physicalDevice,
            pSurfaceInfo,
            pSurfaceFormatCount,
            pSurfaceFormats
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSurfaceFormatsKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        [NativeTypeName("uint32_t *")] uint* pSurfaceFormatCount,
        SurfaceFormatKHR* pSurfaceFormats
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                SurfaceKHRHandle*,
                uint*,
                SurfaceFormatKHR*,
                Result>)(
                _slots[567] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[567] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSurfaceFormatsKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormatsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceFormatsKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        [NativeTypeName("uint32_t *")] uint* pSurfaceFormatCount,
        SurfaceFormatKHR* pSurfaceFormats
    ) =>
        DllImport.GetPhysicalDeviceSurfaceFormatsKHR(
            physicalDevice,
            surface,
            pSurfaceFormatCount,
            pSurfaceFormats
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSurfaceFormatsKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        [NativeTypeName("uint32_t *")] Ref<uint> pSurfaceFormatCount,
        Ref<SurfaceFormatKHR> pSurfaceFormats
    )
    {
        fixed (SurfaceFormatKHR* __dsl_pSurfaceFormats = pSurfaceFormats)
        fixed (uint* __dsl_pSurfaceFormatCount = pSurfaceFormatCount)
        fixed (SurfaceKHRHandle* __dsl_surface = surface)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceSurfaceFormatsKHR(
                    __dsl_physicalDevice,
                    __dsl_surface,
                    __dsl_pSurfaceFormatCount,
                    __dsl_pSurfaceFormats
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceFormatsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceFormatsKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        [NativeTypeName("uint32_t *")] Ref<uint> pSurfaceFormatCount,
        Ref<SurfaceFormatKHR> pSurfaceFormats
    ) =>
        DllImport.GetPhysicalDeviceSurfaceFormatsKHR(
            physicalDevice,
            surface,
            pSurfaceFormatCount,
            pSurfaceFormats
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSurfacePresentModesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        [NativeTypeName("uint32_t *")] uint* pPresentModeCount,
        PresentModeKHR* pPresentModes
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                SurfaceKHRHandle*,
                uint*,
                PresentModeKHR*,
                Result>)(
                _slots[568] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[568] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSurfacePresentModesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, surface, pPresentModeCount, pPresentModes);

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfacePresentModesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfacePresentModesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        [NativeTypeName("uint32_t *")] uint* pPresentModeCount,
        PresentModeKHR* pPresentModes
    ) =>
        DllImport.GetPhysicalDeviceSurfacePresentModesKHR(
            physicalDevice,
            surface,
            pPresentModeCount,
            pPresentModes
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSurfacePresentModesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        [NativeTypeName("uint32_t *")] Ref<uint> pPresentModeCount,
        Ref<PresentModeKHR> pPresentModes
    )
    {
        fixed (PresentModeKHR* __dsl_pPresentModes = pPresentModes)
        fixed (uint* __dsl_pPresentModeCount = pPresentModeCount)
        fixed (SurfaceKHRHandle* __dsl_surface = surface)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceSurfacePresentModesKHR(
                    __dsl_physicalDevice,
                    __dsl_surface,
                    __dsl_pPresentModeCount,
                    __dsl_pPresentModes
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfacePresentModesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfacePresentModesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        [NativeTypeName("uint32_t *")] Ref<uint> pPresentModeCount,
        Ref<PresentModeKHR> pPresentModes
    ) =>
        DllImport.GetPhysicalDeviceSurfacePresentModesKHR(
            physicalDevice,
            surface,
            pPresentModeCount,
            pPresentModes
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSurfaceSupportKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        [NativeTypeName("VkBool32 *")] uint* pSupported
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, uint, SurfaceKHRHandle*, uint*, Result>)(
                _slots[569] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[569] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceSurfaceSupportKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, queueFamilyIndex, surface, pSupported);

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceSupportKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceSupportKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("VkSurfaceKHR")] SurfaceKHRHandle* surface,
        [NativeTypeName("VkBool32 *")] uint* pSupported
    ) =>
        DllImport.GetPhysicalDeviceSurfaceSupportKHR(
            physicalDevice,
            queueFamilyIndex,
            surface,
            pSupported
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceSurfaceSupportKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        [NativeTypeName("VkBool32 *")] Ref<uint> pSupported
    )
    {
        fixed (uint* __dsl_pSupported = pSupported)
        fixed (SurfaceKHRHandle* __dsl_surface = surface)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceSurfaceSupportKHR(
                    __dsl_physicalDevice,
                    queueFamilyIndex,
                    __dsl_surface,
                    __dsl_pSupported
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceSurfaceSupportKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceSurfaceSupportKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t")] uint queueFamilyIndex,
        [NativeTypeName("VkSurfaceKHR")] Ref<SurfaceKHRHandle> surface,
        [NativeTypeName("VkBool32 *")] Ref<uint> pSupported
    ) =>
        DllImport.GetPhysicalDeviceSurfaceSupportKHR(
            physicalDevice,
            queueFamilyIndex,
            surface,
            pSupported
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceToolProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pToolCount,
        PhysicalDeviceToolProperties* pToolProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                uint*,
                PhysicalDeviceToolProperties*,
                Result>)(
                _slots[570] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[570] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceToolProperties",
                        "vulkan"
                    )
            )
        )(physicalDevice, pToolCount, pToolProperties);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceToolProperties(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pToolCount,
        PhysicalDeviceToolProperties* pToolProperties
    ) => DllImport.GetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceToolProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pToolCount,
        Ref<PhysicalDeviceToolProperties> pToolProperties
    )
    {
        fixed (PhysicalDeviceToolProperties* __dsl_pToolProperties = pToolProperties)
        fixed (uint* __dsl_pToolCount = pToolCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceToolProperties(
                    __dsl_physicalDevice,
                    __dsl_pToolCount,
                    __dsl_pToolProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceToolProperties(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pToolCount,
        Ref<PhysicalDeviceToolProperties> pToolProperties
    ) => DllImport.GetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceToolPropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pToolCount,
        PhysicalDeviceToolProperties* pToolProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                uint*,
                PhysicalDeviceToolProperties*,
                Result>)(
                _slots[571] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[571] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceToolPropertiesEXT",
                        "vulkan"
                    )
            )
        )(physicalDevice, pToolCount, pToolProperties);

    [SupportedApiProfile("vulkan", ["VK_EXT_tooling_info"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceToolPropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("uint32_t *")] uint* pToolCount,
        PhysicalDeviceToolProperties* pToolProperties
    ) => DllImport.GetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceToolPropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pToolCount,
        Ref<PhysicalDeviceToolProperties> pToolProperties
    )
    {
        fixed (PhysicalDeviceToolProperties* __dsl_pToolProperties = pToolProperties)
        fixed (uint* __dsl_pToolCount = pToolCount)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceToolPropertiesEXT(
                    __dsl_physicalDevice,
                    __dsl_pToolCount,
                    __dsl_pToolProperties
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_tooling_info"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceToolPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceToolPropertiesEXT(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("uint32_t *")] Ref<uint> pToolCount,
        Ref<PhysicalDeviceToolProperties> pToolProperties
    ) => DllImport.GetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceVideoCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkVideoProfileInfoKHR *")] VideoProfileInfoKHR* pVideoProfile,
        VideoCapabilitiesKHR* pCapabilities
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                VideoProfileInfoKHR*,
                VideoCapabilitiesKHR*,
                Result>)(
                _slots[572] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[572] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceVideoCapabilitiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pVideoProfile, pCapabilities);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceVideoCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkVideoProfileInfoKHR *")] VideoProfileInfoKHR* pVideoProfile,
        VideoCapabilitiesKHR* pCapabilities
    ) =>
        DllImport.GetPhysicalDeviceVideoCapabilitiesKHR(
            physicalDevice,
            pVideoProfile,
            pCapabilities
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceVideoCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkVideoProfileInfoKHR *")] Ref<VideoProfileInfoKHR> pVideoProfile,
        Ref<VideoCapabilitiesKHR> pCapabilities
    )
    {
        fixed (VideoCapabilitiesKHR* __dsl_pCapabilities = pCapabilities)
        fixed (VideoProfileInfoKHR* __dsl_pVideoProfile = pVideoProfile)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceVideoCapabilitiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pVideoProfile,
                    __dsl_pCapabilities
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoCapabilitiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceVideoCapabilitiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkVideoProfileInfoKHR *")] Ref<VideoProfileInfoKHR> pVideoProfile,
        Ref<VideoCapabilitiesKHR> pCapabilities
    ) =>
        DllImport.GetPhysicalDeviceVideoCapabilitiesKHR(
            physicalDevice,
            pVideoProfile,
            pCapabilities
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *")]
            PhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo,
        VideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                PhysicalDeviceVideoEncodeQualityLevelInfoKHR*,
                VideoEncodeQualityLevelPropertiesKHR*,
                Result>)(
                _slots[573] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[573] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pQualityLevelInfo, pQualityLevelProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *")]
            PhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo,
        VideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties
    ) =>
        DllImport.GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
            physicalDevice,
            pQualityLevelInfo,
            pQualityLevelProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *")]
            Ref<PhysicalDeviceVideoEncodeQualityLevelInfoKHR> pQualityLevelInfo,
        Ref<VideoEncodeQualityLevelPropertiesKHR> pQualityLevelProperties
    )
    {
        fixed (
            VideoEncodeQualityLevelPropertiesKHR* __dsl_pQualityLevelProperties =
                pQualityLevelProperties
        )
        fixed (
            PhysicalDeviceVideoEncodeQualityLevelInfoKHR* __dsl_pQualityLevelInfo =
                pQualityLevelInfo
        )
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pQualityLevelInfo,
                    __dsl_pQualityLevelProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_encode_queue"],
        ImpliesSets = [
            "VK_KHR_video_queue+VK_KHR_synchronization2",
            "VK_KHR_video_queue+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction(
        "vulkan",
        EntryPoint = "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"
    )]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *")]
            Ref<PhysicalDeviceVideoEncodeQualityLevelInfoKHR> pQualityLevelInfo,
        Ref<VideoEncodeQualityLevelPropertiesKHR> pQualityLevelProperties
    ) =>
        DllImport.GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
            physicalDevice,
            pQualityLevelInfo,
            pQualityLevelProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceVideoFormatPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoFormatInfoKHR *")]
            PhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pVideoFormatPropertyCount,
        VideoFormatPropertiesKHR* pVideoFormatProperties
    ) =>
        (
            (delegate* unmanaged<
                PhysicalDeviceHandle*,
                PhysicalDeviceVideoFormatInfoKHR*,
                uint*,
                VideoFormatPropertiesKHR*,
                Result>)(
                _slots[574] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[574] = nativeContext.LoadFunction(
                        "vkGetPhysicalDeviceVideoFormatPropertiesKHR",
                        "vulkan"
                    )
            )
        )(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoFormatPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceVideoFormatPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoFormatInfoKHR *")]
            PhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo,
        [NativeTypeName("uint32_t *")] uint* pVideoFormatPropertyCount,
        VideoFormatPropertiesKHR* pVideoFormatProperties
    ) =>
        DllImport.GetPhysicalDeviceVideoFormatPropertiesKHR(
            physicalDevice,
            pVideoFormatInfo,
            pVideoFormatPropertyCount,
            pVideoFormatProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPhysicalDeviceVideoFormatPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoFormatInfoKHR *")]
            Ref<PhysicalDeviceVideoFormatInfoKHR> pVideoFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pVideoFormatPropertyCount,
        Ref<VideoFormatPropertiesKHR> pVideoFormatProperties
    )
    {
        fixed (VideoFormatPropertiesKHR* __dsl_pVideoFormatProperties = pVideoFormatProperties)
        fixed (uint* __dsl_pVideoFormatPropertyCount = pVideoFormatPropertyCount)
        fixed (PhysicalDeviceVideoFormatInfoKHR* __dsl_pVideoFormatInfo = pVideoFormatInfo)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)
                ((IVulkan)this).GetPhysicalDeviceVideoFormatPropertiesKHR(
                    __dsl_physicalDevice,
                    __dsl_pVideoFormatInfo,
                    __dsl_pVideoFormatPropertyCount,
                    __dsl_pVideoFormatProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPhysicalDeviceVideoFormatPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPhysicalDeviceVideoFormatPropertiesKHR(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("const VkPhysicalDeviceVideoFormatInfoKHR *")]
            Ref<PhysicalDeviceVideoFormatInfoKHR> pVideoFormatInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pVideoFormatPropertyCount,
        Ref<VideoFormatPropertiesKHR> pVideoFormatProperties
    ) =>
        DllImport.GetPhysicalDeviceVideoFormatPropertiesKHR(
            physicalDevice,
            pVideoFormatInfo,
            pVideoFormatPropertyCount,
            pVideoFormatProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPipelineBinaryDataKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineBinaryDataInfoKHR *")] PipelineBinaryDataInfoKHR* pInfo,
        PipelineBinaryKeyKHR* pPipelineBinaryKey,
        [NativeTypeName("size_t *")] nuint* pPipelineBinaryDataSize,
        void* pPipelineBinaryData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineBinaryDataInfoKHR*,
                PipelineBinaryKeyKHR*,
                nuint*,
                void*,
                Result>)(
                _slots[575] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[575] = nativeContext.LoadFunction(
                        "vkGetPipelineBinaryDataKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pPipelineBinaryKey, pPipelineBinaryDataSize, pPipelineBinaryData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineBinaryDataKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineBinaryDataKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineBinaryDataInfoKHR *")] PipelineBinaryDataInfoKHR* pInfo,
        PipelineBinaryKeyKHR* pPipelineBinaryKey,
        [NativeTypeName("size_t *")] nuint* pPipelineBinaryDataSize,
        void* pPipelineBinaryData
    ) =>
        DllImport.GetPipelineBinaryDataKHR(
            device,
            pInfo,
            pPipelineBinaryKey,
            pPipelineBinaryDataSize,
            pPipelineBinaryData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPipelineBinaryDataKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineBinaryDataInfoKHR *")]
            Ref<PipelineBinaryDataInfoKHR> pInfo,
        Ref<PipelineBinaryKeyKHR> pPipelineBinaryKey,
        [NativeTypeName("size_t *")] Ref<nuint> pPipelineBinaryDataSize,
        Ref pPipelineBinaryData
    )
    {
        fixed (void* __dsl_pPipelineBinaryData = pPipelineBinaryData)
        fixed (nuint* __dsl_pPipelineBinaryDataSize = pPipelineBinaryDataSize)
        fixed (PipelineBinaryKeyKHR* __dsl_pPipelineBinaryKey = pPipelineBinaryKey)
        fixed (PipelineBinaryDataInfoKHR* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetPipelineBinaryDataKHR(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pPipelineBinaryKey,
                    __dsl_pPipelineBinaryDataSize,
                    __dsl_pPipelineBinaryData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineBinaryDataKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineBinaryDataKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineBinaryDataInfoKHR *")]
            Ref<PipelineBinaryDataInfoKHR> pInfo,
        Ref<PipelineBinaryKeyKHR> pPipelineBinaryKey,
        [NativeTypeName("size_t *")] Ref<nuint> pPipelineBinaryDataSize,
        Ref pPipelineBinaryData
    ) =>
        DllImport.GetPipelineBinaryDataKHR(
            device,
            pInfo,
            pPipelineBinaryKey,
            pPipelineBinaryDataSize,
            pPipelineBinaryData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPipelineCacheData(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, PipelineCacheHandle*, nuint*, void*, Result>)(
                _slots[576] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[576] = nativeContext.LoadFunction("vkGetPipelineCacheData", "vulkan")
            )
        )(device, pipelineCache, pDataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineCacheData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineCacheData(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* pipelineCache,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) => DllImport.GetPipelineCacheData(device, pipelineCache, pDataSize, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPipelineCacheData(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (nuint* __dsl_pDataSize = pDataSize)
        fixed (PipelineCacheHandle* __dsl_pipelineCache = pipelineCache)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetPipelineCacheData(
                    __dsl_device,
                    __dsl_pipelineCache,
                    __dsl_pDataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineCacheData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineCacheData(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> pipelineCache,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    ) => DllImport.GetPipelineCacheData(device, pipelineCache, pDataSize, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPipelineExecutableInternalRepresentationsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            PipelineExecutableInfoKHR* pExecutableInfo,
        [NativeTypeName("uint32_t *")] uint* pInternalRepresentationCount,
        PipelineExecutableInternalRepresentationKHR* pInternalRepresentations
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineExecutableInfoKHR*,
                uint*,
                PipelineExecutableInternalRepresentationKHR*,
                Result>)(
                _slots[577] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[577] = nativeContext.LoadFunction(
                        "vkGetPipelineExecutableInternalRepresentationsKHR",
                        "vulkan"
                    )
            )
        )(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableInternalRepresentationsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineExecutableInternalRepresentationsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            PipelineExecutableInfoKHR* pExecutableInfo,
        [NativeTypeName("uint32_t *")] uint* pInternalRepresentationCount,
        PipelineExecutableInternalRepresentationKHR* pInternalRepresentations
    ) =>
        DllImport.GetPipelineExecutableInternalRepresentationsKHR(
            device,
            pExecutableInfo,
            pInternalRepresentationCount,
            pInternalRepresentations
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPipelineExecutableInternalRepresentationsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            Ref<PipelineExecutableInfoKHR> pExecutableInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pInternalRepresentationCount,
        Ref<PipelineExecutableInternalRepresentationKHR> pInternalRepresentations
    )
    {
        fixed (
            PipelineExecutableInternalRepresentationKHR* __dsl_pInternalRepresentations =
                pInternalRepresentations
        )
        fixed (uint* __dsl_pInternalRepresentationCount = pInternalRepresentationCount)
        fixed (PipelineExecutableInfoKHR* __dsl_pExecutableInfo = pExecutableInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetPipelineExecutableInternalRepresentationsKHR(
                    __dsl_device,
                    __dsl_pExecutableInfo,
                    __dsl_pInternalRepresentationCount,
                    __dsl_pInternalRepresentations
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableInternalRepresentationsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineExecutableInternalRepresentationsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            Ref<PipelineExecutableInfoKHR> pExecutableInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pInternalRepresentationCount,
        Ref<PipelineExecutableInternalRepresentationKHR> pInternalRepresentations
    ) =>
        DllImport.GetPipelineExecutableInternalRepresentationsKHR(
            device,
            pExecutableInfo,
            pInternalRepresentationCount,
            pInternalRepresentations
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPipelineExecutablePropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineInfoKHR *")] PipelineInfoKHR* pPipelineInfo,
        [NativeTypeName("uint32_t *")] uint* pExecutableCount,
        PipelineExecutablePropertiesKHR* pProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineInfoKHR*,
                uint*,
                PipelineExecutablePropertiesKHR*,
                Result>)(
                _slots[578] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[578] = nativeContext.LoadFunction(
                        "vkGetPipelineExecutablePropertiesKHR",
                        "vulkan"
                    )
            )
        )(device, pPipelineInfo, pExecutableCount, pProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutablePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineExecutablePropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineInfoKHR *")] PipelineInfoKHR* pPipelineInfo,
        [NativeTypeName("uint32_t *")] uint* pExecutableCount,
        PipelineExecutablePropertiesKHR* pProperties
    ) =>
        DllImport.GetPipelineExecutablePropertiesKHR(
            device,
            pPipelineInfo,
            pExecutableCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPipelineExecutablePropertiesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineInfoKHR *")] Ref<PipelineInfoKHR> pPipelineInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pExecutableCount,
        Ref<PipelineExecutablePropertiesKHR> pProperties
    )
    {
        fixed (PipelineExecutablePropertiesKHR* __dsl_pProperties = pProperties)
        fixed (uint* __dsl_pExecutableCount = pExecutableCount)
        fixed (PipelineInfoKHR* __dsl_pPipelineInfo = pPipelineInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetPipelineExecutablePropertiesKHR(
                    __dsl_device,
                    __dsl_pPipelineInfo,
                    __dsl_pExecutableCount,
                    __dsl_pProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutablePropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineExecutablePropertiesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineInfoKHR *")] Ref<PipelineInfoKHR> pPipelineInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pExecutableCount,
        Ref<PipelineExecutablePropertiesKHR> pProperties
    ) =>
        DllImport.GetPipelineExecutablePropertiesKHR(
            device,
            pPipelineInfo,
            pExecutableCount,
            pProperties
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPipelineExecutableStatisticsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            PipelineExecutableInfoKHR* pExecutableInfo,
        [NativeTypeName("uint32_t *")] uint* pStatisticCount,
        PipelineExecutableStatisticKHR* pStatistics
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineExecutableInfoKHR*,
                uint*,
                PipelineExecutableStatisticKHR*,
                Result>)(
                _slots[579] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[579] = nativeContext.LoadFunction(
                        "vkGetPipelineExecutableStatisticsKHR",
                        "vulkan"
                    )
            )
        )(device, pExecutableInfo, pStatisticCount, pStatistics);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableStatisticsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineExecutableStatisticsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            PipelineExecutableInfoKHR* pExecutableInfo,
        [NativeTypeName("uint32_t *")] uint* pStatisticCount,
        PipelineExecutableStatisticKHR* pStatistics
    ) =>
        DllImport.GetPipelineExecutableStatisticsKHR(
            device,
            pExecutableInfo,
            pStatisticCount,
            pStatistics
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPipelineExecutableStatisticsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            Ref<PipelineExecutableInfoKHR> pExecutableInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pStatisticCount,
        Ref<PipelineExecutableStatisticKHR> pStatistics
    )
    {
        fixed (PipelineExecutableStatisticKHR* __dsl_pStatistics = pStatistics)
        fixed (uint* __dsl_pStatisticCount = pStatisticCount)
        fixed (PipelineExecutableInfoKHR* __dsl_pExecutableInfo = pExecutableInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetPipelineExecutableStatisticsKHR(
                    __dsl_device,
                    __dsl_pExecutableInfo,
                    __dsl_pStatisticCount,
                    __dsl_pStatistics
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_executable_properties"],
        ImpliesSets = [
            "VK_KHR_pipeline_executable_properties+VK_KHR_get_physical_device_properties2",
            "VK_KHR_pipeline_executable_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineExecutableStatisticsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineExecutableStatisticsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineExecutableInfoKHR *")]
            Ref<PipelineExecutableInfoKHR> pExecutableInfo,
        [NativeTypeName("uint32_t *")] Ref<uint> pStatisticCount,
        Ref<PipelineExecutableStatisticKHR> pStatistics
    ) =>
        DllImport.GetPipelineExecutableStatisticsKHR(
            device,
            pExecutableInfo,
            pStatisticCount,
            pStatistics
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetPipelineIndirectDeviceAddressNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineIndirectDeviceAddressInfoNV *")]
            PipelineIndirectDeviceAddressInfoNV* pInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, PipelineIndirectDeviceAddressInfoNV*, ulong>)(
                _slots[580] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[580] = nativeContext.LoadFunction(
                        "vkGetPipelineIndirectDeviceAddressNV",
                        "vulkan"
                    )
            )
        )(device, pInfo);

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectDeviceAddressNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetPipelineIndirectDeviceAddressNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineIndirectDeviceAddressInfoNV *")]
            PipelineIndirectDeviceAddressInfoNV* pInfo
    ) => DllImport.GetPipelineIndirectDeviceAddressNV(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetPipelineIndirectDeviceAddressNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineIndirectDeviceAddressInfoNV *")]
            Ref<PipelineIndirectDeviceAddressInfoNV> pInfo
    )
    {
        fixed (PipelineIndirectDeviceAddressInfoNV* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (ulong)
                ((IVulkan)this).GetPipelineIndirectDeviceAddressNV(__dsl_device, __dsl_pInfo);
        }
    }

    [return: NativeTypeName("VkDeviceAddress")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectDeviceAddressNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetPipelineIndirectDeviceAddressNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineIndirectDeviceAddressInfoNV *")]
            Ref<PipelineIndirectDeviceAddressInfoNV> pInfo
    ) => DllImport.GetPipelineIndirectDeviceAddressNV(device, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPipelineIndirectMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            ComputePipelineCreateInfo* pCreateInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ComputePipelineCreateInfo*,
                MemoryRequirements2*,
                void>)(
                _slots[581] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[581] = nativeContext.LoadFunction(
                        "vkGetPipelineIndirectMemoryRequirementsNV",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPipelineIndirectMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            ComputePipelineCreateInfo* pCreateInfo,
        MemoryRequirements2* pMemoryRequirements
    ) =>
        DllImport.GetPipelineIndirectMemoryRequirementsNV(device, pCreateInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPipelineIndirectMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            Ref<ComputePipelineCreateInfo> pCreateInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    )
    {
        fixed (MemoryRequirements2* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (ComputePipelineCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetPipelineIndirectMemoryRequirementsNV(
                __dsl_device,
                __dsl_pCreateInfo,
                __dsl_pMemoryRequirements
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_generated_commands_compute"],
        ImpliesSets = ["VK_NV_device_generated_commands"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineIndirectMemoryRequirementsNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPipelineIndirectMemoryRequirementsNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkComputePipelineCreateInfo *")]
            Ref<ComputePipelineCreateInfo> pCreateInfo,
        Ref<MemoryRequirements2> pMemoryRequirements
    ) =>
        DllImport.GetPipelineIndirectMemoryRequirementsNV(device, pCreateInfo, pMemoryRequirements);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPipelineKeyKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineCreateInfoKHR *")]
            PipelineCreateInfoKHR* pPipelineCreateInfo,
        PipelineBinaryKeyKHR* pPipelineKey
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineCreateInfoKHR*,
                PipelineBinaryKeyKHR*,
                Result>)(
                _slots[582] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[582] = nativeContext.LoadFunction("vkGetPipelineKeyKHR", "vulkan")
            )
        )(device, pPipelineCreateInfo, pPipelineKey);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineKeyKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineKeyKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineCreateInfoKHR *")]
            PipelineCreateInfoKHR* pPipelineCreateInfo,
        PipelineBinaryKeyKHR* pPipelineKey
    ) => DllImport.GetPipelineKeyKHR(device, pPipelineCreateInfo, pPipelineKey);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPipelineKeyKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineCreateInfoKHR *")]
            Ref<PipelineCreateInfoKHR> pPipelineCreateInfo,
        Ref<PipelineBinaryKeyKHR> pPipelineKey
    )
    {
        fixed (PipelineBinaryKeyKHR* __dsl_pPipelineKey = pPipelineKey)
        fixed (PipelineCreateInfoKHR* __dsl_pPipelineCreateInfo = pPipelineCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetPipelineKeyKHR(
                    __dsl_device,
                    __dsl_pPipelineCreateInfo,
                    __dsl_pPipelineKey
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelineKeyKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelineKeyKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineCreateInfoKHR *")]
            Ref<PipelineCreateInfoKHR> pPipelineCreateInfo,
        Ref<PipelineBinaryKeyKHR> pPipelineKey
    ) => DllImport.GetPipelineKeyKHR(device, pPipelineCreateInfo, pPipelineKey);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPipelinePropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineInfoEXT *")] PipelineInfoKHR* pPipelineInfo,
        BaseOutStructure* pPipelineProperties
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, PipelineInfoKHR*, BaseOutStructure*, Result>)(
                _slots[583] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[583] = nativeContext.LoadFunction(
                        "vkGetPipelinePropertiesEXT",
                        "vulkan"
                    )
            )
        )(device, pPipelineInfo, pPipelineProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_properties"],
        ImpliesSets = [
            "VK_EXT_pipeline_properties+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_properties+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelinePropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelinePropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkPipelineInfoEXT *")] PipelineInfoKHR* pPipelineInfo,
        BaseOutStructure* pPipelineProperties
    ) => DllImport.GetPipelinePropertiesEXT(device, pPipelineInfo, pPipelineProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetPipelinePropertiesEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineInfoEXT *")] Ref<PipelineInfoKHR> pPipelineInfo,
        Ref<BaseOutStructure> pPipelineProperties
    )
    {
        fixed (BaseOutStructure* __dsl_pPipelineProperties = pPipelineProperties)
        fixed (PipelineInfoKHR* __dsl_pPipelineInfo = pPipelineInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetPipelinePropertiesEXT(
                    __dsl_device,
                    __dsl_pPipelineInfo,
                    __dsl_pPipelineProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pipeline_properties"],
        ImpliesSets = [
            "VK_EXT_pipeline_properties+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_properties+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPipelinePropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetPipelinePropertiesEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkPipelineInfoEXT *")] Ref<PipelineInfoKHR> pPipelineInfo,
        Ref<BaseOutStructure> pPipelineProperties
    ) => DllImport.GetPipelinePropertiesEXT(device, pPipelineInfo, pPipelineProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPrivateData(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
        [NativeTypeName("uint64_t *")] ulong* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ObjectType,
                ulong,
                PrivateDataSlotHandle*,
                ulong*,
                void>)(
                _slots[584] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[584] = nativeContext.LoadFunction("vkGetPrivateData", "vulkan")
            )
        )(device, objectType, objectHandle, privateDataSlot, pData);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkGetPrivateData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPrivateData(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
        [NativeTypeName("uint64_t *")] ulong* pData
    ) => DllImport.GetPrivateData(device, objectType, objectHandle, privateDataSlot, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPrivateData(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
        [NativeTypeName("uint64_t *")] Ref<ulong> pData
    )
    {
        fixed (ulong* __dsl_pData = pData)
        fixed (PrivateDataSlotHandle* __dsl_privateDataSlot = privateDataSlot)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetPrivateData(
                __dsl_device,
                objectType,
                objectHandle,
                __dsl_privateDataSlot,
                __dsl_pData
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPrivateData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPrivateData(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
        [NativeTypeName("uint64_t *")] Ref<ulong> pData
    ) => DllImport.GetPrivateData(device, objectType, objectHandle, privateDataSlot, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPrivateDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
        [NativeTypeName("uint64_t *")] ulong* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ObjectType,
                ulong,
                PrivateDataSlotHandle*,
                ulong*,
                void>)(
                _slots[585] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[585] = nativeContext.LoadFunction("vkGetPrivateDataEXT", "vulkan")
            )
        )(device, objectType, objectHandle, privateDataSlot, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetPrivateDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPrivateDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
        [NativeTypeName("uint64_t *")] ulong* pData
    ) => DllImport.GetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetPrivateDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
        [NativeTypeName("uint64_t *")] Ref<ulong> pData
    )
    {
        fixed (ulong* __dsl_pData = pData)
        fixed (PrivateDataSlotHandle* __dsl_privateDataSlot = privateDataSlot)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetPrivateDataEXT(
                __dsl_device,
                objectType,
                objectHandle,
                __dsl_privateDataSlot,
                __dsl_pData
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetPrivateDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetPrivateDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
        [NativeTypeName("uint64_t *")] Ref<ulong> pData
    ) => DllImport.GetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetQueryPoolResults(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData,
        [NativeTypeName("VkDeviceSize")] ulong stride,
        [NativeTypeName("VkQueryResultFlags")] uint flags
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                QueryPoolHandle*,
                uint,
                uint,
                nuint,
                void*,
                ulong,
                uint,
                Result>)(
                _slots[586] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[586] = nativeContext.LoadFunction("vkGetQueryPoolResults", "vulkan")
            )
        )(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueryPoolResults")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetQueryPoolResults(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData,
        [NativeTypeName("VkDeviceSize")] ulong stride,
        [NativeTypeName("VkQueryResultFlags")] uint flags
    ) =>
        DllImport.GetQueryPoolResults(
            device,
            queryPool,
            firstQuery,
            queryCount,
            dataSize,
            pData,
            stride,
            flags
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetQueryPoolResults(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData,
        [NativeTypeName("VkDeviceSize")] ulong stride,
        [NativeTypeName("VkQueryResultFlags")] uint flags
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetQueryPoolResults(
                    __dsl_device,
                    __dsl_queryPool,
                    firstQuery,
                    queryCount,
                    dataSize,
                    __dsl_pData,
                    stride,
                    flags
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueryPoolResults")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetQueryPoolResults(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData,
        [NativeTypeName("VkDeviceSize")] ulong stride,
        [NativeTypeName("VkQueryResultFlags")] uint flags
    ) =>
        DllImport.GetQueryPoolResults(
            device,
            queryPool,
            firstQuery,
            queryCount,
            dataSize,
            pData,
            stride,
            flags
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetQueueCheckpointData2NV(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("uint32_t *")] uint* pCheckpointDataCount,
        CheckpointData2NV* pCheckpointData
    ) =>
        (
            (delegate* unmanaged<QueueHandle*, uint*, CheckpointData2NV*, void>)(
                _slots[587] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[587] = nativeContext.LoadFunction(
                        "vkGetQueueCheckpointData2NV",
                        "vulkan"
                    )
            )
        )(queue, pCheckpointDataCount, pCheckpointData);

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_synchronization2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointData2NV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetQueueCheckpointData2NV(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("uint32_t *")] uint* pCheckpointDataCount,
        CheckpointData2NV* pCheckpointData
    ) => DllImport.GetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetQueueCheckpointData2NV(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("uint32_t *")] Ref<uint> pCheckpointDataCount,
        Ref<CheckpointData2NV> pCheckpointData
    )
    {
        fixed (CheckpointData2NV* __dsl_pCheckpointData = pCheckpointData)
        fixed (uint* __dsl_pCheckpointDataCount = pCheckpointDataCount)
        fixed (QueueHandle* __dsl_queue = queue)
        {
            ((IVulkan)this).GetQueueCheckpointData2NV(
                __dsl_queue,
                __dsl_pCheckpointDataCount,
                __dsl_pCheckpointData
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_synchronization2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_3",
        ],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointData2NV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetQueueCheckpointData2NV(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("uint32_t *")] Ref<uint> pCheckpointDataCount,
        Ref<CheckpointData2NV> pCheckpointData
    ) => DllImport.GetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetQueueCheckpointDataNV(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("uint32_t *")] uint* pCheckpointDataCount,
        CheckpointDataNV* pCheckpointData
    ) =>
        (
            (delegate* unmanaged<QueueHandle*, uint*, CheckpointDataNV*, void>)(
                _slots[588] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[588] = nativeContext.LoadFunction(
                        "vkGetQueueCheckpointDataNV",
                        "vulkan"
                    )
            )
        )(queue, pCheckpointDataCount, pCheckpointData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointDataNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetQueueCheckpointDataNV(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("uint32_t *")] uint* pCheckpointDataCount,
        CheckpointDataNV* pCheckpointData
    ) => DllImport.GetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetQueueCheckpointDataNV(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("uint32_t *")] Ref<uint> pCheckpointDataCount,
        Ref<CheckpointDataNV> pCheckpointData
    )
    {
        fixed (CheckpointDataNV* __dsl_pCheckpointData = pCheckpointData)
        fixed (uint* __dsl_pCheckpointDataCount = pCheckpointDataCount)
        fixed (QueueHandle* __dsl_queue = queue)
        {
            ((IVulkan)this).GetQueueCheckpointDataNV(
                __dsl_queue,
                __dsl_pCheckpointDataCount,
                __dsl_pCheckpointData
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_device_diagnostic_checkpoints"],
        ImpliesSets = [
            "VK_NV_device_diagnostic_checkpoints+VK_KHR_get_physical_device_properties2",
            "VK_NV_device_diagnostic_checkpoints+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetQueueCheckpointDataNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetQueueCheckpointDataNV(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("uint32_t *")] Ref<uint> pCheckpointDataCount,
        Ref<CheckpointDataNV> pCheckpointData
    ) => DllImport.GetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetRayTracingCaptureReplayShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, PipelineHandle*, uint, uint, nuint, void*, Result>)(
                _slots[589] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[589] = nativeContext.LoadFunction(
                        "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR",
                        "vulkan"
                    )
            )
        )(device, pipeline, firstGroup, groupCount, dataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRayTracingCaptureReplayShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        DllImport.GetRayTracingCaptureReplayShaderGroupHandlesKHR(
            device,
            pipeline,
            firstGroup,
            groupCount,
            dataSize,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetRayTracingCaptureReplayShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (PipelineHandle* __dsl_pipeline = pipeline)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetRayTracingCaptureReplayShaderGroupHandlesKHR(
                    __dsl_device,
                    __dsl_pipeline,
                    firstGroup,
                    groupCount,
                    dataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRayTracingCaptureReplayShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    ) =>
        DllImport.GetRayTracingCaptureReplayShaderGroupHandlesKHR(
            device,
            pipeline,
            firstGroup,
            groupCount,
            dataSize,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetRayTracingShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, PipelineHandle*, uint, uint, nuint, void*, Result>)(
                _slots[590] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[590] = nativeContext.LoadFunction(
                        "vkGetRayTracingShaderGroupHandlesKHR",
                        "vulkan"
                    )
            )
        )(device, pipeline, firstGroup, groupCount, dataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRayTracingShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        DllImport.GetRayTracingShaderGroupHandlesKHR(
            device,
            pipeline,
            firstGroup,
            groupCount,
            dataSize,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetRayTracingShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (PipelineHandle* __dsl_pipeline = pipeline)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetRayTracingShaderGroupHandlesKHR(
                    __dsl_device,
                    __dsl_pipeline,
                    firstGroup,
                    groupCount,
                    dataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRayTracingShaderGroupHandlesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    ) =>
        DllImport.GetRayTracingShaderGroupHandlesKHR(
            device,
            pipeline,
            firstGroup,
            groupCount,
            dataSize,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetRayTracingShaderGroupHandlesNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, PipelineHandle*, uint, uint, nuint, void*, Result>)(
                _slots[591] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[591] = nativeContext.LoadFunction(
                        "vkGetRayTracingShaderGroupHandlesNV",
                        "vulkan"
                    )
            )
        )(device, pipeline, firstGroup, groupCount, dataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRayTracingShaderGroupHandlesNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData
    ) =>
        DllImport.GetRayTracingShaderGroupHandlesNV(
            device,
            pipeline,
            firstGroup,
            groupCount,
            dataSize,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetRayTracingShaderGroupHandlesNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (PipelineHandle* __dsl_pipeline = pipeline)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetRayTracingShaderGroupHandlesNV(
                    __dsl_device,
                    __dsl_pipeline,
                    firstGroup,
                    groupCount,
                    dataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_ray_tracing"],
        ImpliesSets = [
            "VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2",
            "VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupHandlesNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRayTracingShaderGroupHandlesNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("uint32_t")] uint firstGroup,
        [NativeTypeName("uint32_t")] uint groupCount,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData
    ) =>
        DllImport.GetRayTracingShaderGroupHandlesNV(
            device,
            pipeline,
            firstGroup,
            groupCount,
            dataSize,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetRayTracingShaderGroupStackSizeKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("uint32_t")] uint group,
        ShaderGroupShaderKHR groupShader
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineHandle*,
                uint,
                ShaderGroupShaderKHR,
                ulong>)(
                _slots[592] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[592] = nativeContext.LoadFunction(
                        "vkGetRayTracingShaderGroupStackSizeKHR",
                        "vulkan"
                    )
            )
        )(device, pipeline, group, groupShader);

    [return: NativeTypeName("VkDeviceSize")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupStackSizeKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetRayTracingShaderGroupStackSizeKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("uint32_t")] uint group,
        ShaderGroupShaderKHR groupShader
    ) => DllImport.GetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong IVulkan.GetRayTracingShaderGroupStackSizeKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("uint32_t")] uint group,
        ShaderGroupShaderKHR groupShader
    )
    {
        fixed (PipelineHandle* __dsl_pipeline = pipeline)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (ulong)
                ((IVulkan)this).GetRayTracingShaderGroupStackSizeKHR(
                    __dsl_device,
                    __dsl_pipeline,
                    group,
                    groupShader
                );
        }
    }

    [return: NativeTypeName("VkDeviceSize")]
    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_ray_tracing_pipeline"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_spirv_1_4",
            "VK_KHR_acceleration_structure+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRayTracingShaderGroupStackSizeKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetRayTracingShaderGroupStackSizeKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("uint32_t")] uint group,
        ShaderGroupShaderKHR groupShader
    ) => DllImport.GetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetRefreshCycleDurationGoogle(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        RefreshCycleDurationGoogle* pDisplayTimingProperties
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SwapchainKHRHandle*,
                RefreshCycleDurationGoogle*,
                Result>)(
                _slots[593] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[593] = nativeContext.LoadFunction(
                        "vkGetRefreshCycleDurationGOOGLE",
                        "vulkan"
                    )
            )
        )(device, swapchain, pDisplayTimingProperties);

    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRefreshCycleDurationGOOGLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRefreshCycleDurationGoogle(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        RefreshCycleDurationGoogle* pDisplayTimingProperties
    ) => DllImport.GetRefreshCycleDurationGoogle(device, swapchain, pDisplayTimingProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetRefreshCycleDurationGoogle(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        Ref<RefreshCycleDurationGoogle> pDisplayTimingProperties
    )
    {
        fixed (
            RefreshCycleDurationGoogle* __dsl_pDisplayTimingProperties = pDisplayTimingProperties
        )
        fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetRefreshCycleDurationGoogle(
                    __dsl_device,
                    __dsl_swapchain,
                    __dsl_pDisplayTimingProperties
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_GOOGLE_display_timing"],
        ImpliesSets = ["VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRefreshCycleDurationGOOGLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetRefreshCycleDurationGoogle(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        Ref<RefreshCycleDurationGoogle> pDisplayTimingProperties
    ) => DllImport.GetRefreshCycleDurationGoogle(device, swapchain, pDisplayTimingProperties);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetRenderAreaGranularity(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle* renderPass,
        Extent2D* pGranularity
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, RenderPassHandle*, Extent2D*, void>)(
                _slots[594] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[594] = nativeContext.LoadFunction(
                        "vkGetRenderAreaGranularity",
                        "vulkan"
                    )
            )
        )(device, renderPass, pGranularity);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderAreaGranularity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRenderAreaGranularity(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkRenderPass")] RenderPassHandle* renderPass,
        Extent2D* pGranularity
    ) => DllImport.GetRenderAreaGranularity(device, renderPass, pGranularity);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetRenderAreaGranularity(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkRenderPass")] Ref<RenderPassHandle> renderPass,
        Ref<Extent2D> pGranularity
    )
    {
        fixed (Extent2D* __dsl_pGranularity = pGranularity)
        fixed (RenderPassHandle* __dsl_renderPass = renderPass)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetRenderAreaGranularity(
                __dsl_device,
                __dsl_renderPass,
                __dsl_pGranularity
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderAreaGranularity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRenderAreaGranularity(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkRenderPass")] Ref<RenderPassHandle> renderPass,
        Ref<Extent2D> pGranularity
    ) => DllImport.GetRenderAreaGranularity(device, renderPass, pGranularity);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetRenderingAreaGranularity(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkRenderingAreaInfo *")] RenderingAreaInfo* pRenderingAreaInfo,
        Extent2D* pGranularity
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, RenderingAreaInfo*, Extent2D*, void>)(
                _slots[595] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[595] = nativeContext.LoadFunction(
                        "vkGetRenderingAreaGranularity",
                        "vulkan"
                    )
            )
        )(device, pRenderingAreaInfo, pGranularity);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRenderingAreaGranularity(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkRenderingAreaInfo *")] RenderingAreaInfo* pRenderingAreaInfo,
        Extent2D* pGranularity
    ) => DllImport.GetRenderingAreaGranularity(device, pRenderingAreaInfo, pGranularity);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetRenderingAreaGranularity(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkRenderingAreaInfo *")] Ref<RenderingAreaInfo> pRenderingAreaInfo,
        Ref<Extent2D> pGranularity
    )
    {
        fixed (Extent2D* __dsl_pGranularity = pGranularity)
        fixed (RenderingAreaInfo* __dsl_pRenderingAreaInfo = pRenderingAreaInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetRenderingAreaGranularity(
                __dsl_device,
                __dsl_pRenderingAreaInfo,
                __dsl_pGranularity
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRenderingAreaGranularity(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkRenderingAreaInfo *")] Ref<RenderingAreaInfo> pRenderingAreaInfo,
        Ref<Extent2D> pGranularity
    ) => DllImport.GetRenderingAreaGranularity(device, pRenderingAreaInfo, pGranularity);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetRenderingAreaGranularityKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkRenderingAreaInfo *")] RenderingAreaInfo* pRenderingAreaInfo,
        Extent2D* pGranularity
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, RenderingAreaInfo*, Extent2D*, void>)(
                _slots[596] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[596] = nativeContext.LoadFunction(
                        "vkGetRenderingAreaGranularityKHR",
                        "vulkan"
                    )
            )
        )(device, pRenderingAreaInfo, pGranularity);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularityKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRenderingAreaGranularityKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkRenderingAreaInfo *")] RenderingAreaInfo* pRenderingAreaInfo,
        Extent2D* pGranularity
    ) => DllImport.GetRenderingAreaGranularityKHR(device, pRenderingAreaInfo, pGranularity);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetRenderingAreaGranularityKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkRenderingAreaInfo *")] Ref<RenderingAreaInfo> pRenderingAreaInfo,
        Ref<Extent2D> pGranularity
    )
    {
        fixed (Extent2D* __dsl_pGranularity = pGranularity)
        fixed (RenderingAreaInfo* __dsl_pRenderingAreaInfo = pRenderingAreaInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetRenderingAreaGranularityKHR(
                __dsl_device,
                __dsl_pRenderingAreaInfo,
                __dsl_pGranularity
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_maintenance5"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_dynamic_rendering", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetRenderingAreaGranularityKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRenderingAreaGranularityKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkRenderingAreaInfo *")] Ref<RenderingAreaInfo> pRenderingAreaInfo,
        Ref<Extent2D> pGranularity
    ) => DllImport.GetRenderingAreaGranularityKHR(device, pRenderingAreaInfo, pGranularity);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetSamplerOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSamplerCaptureDescriptorDataInfoEXT *")]
            SamplerCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SamplerCaptureDescriptorDataInfoEXT*,
                void*,
                Result>)(
                _slots[597] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[597] = nativeContext.LoadFunction(
                        "vkGetSamplerOpaqueCaptureDescriptorDataEXT",
                        "vulkan"
                    )
            )
        )(device, pInfo, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSamplerOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSamplerOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSamplerCaptureDescriptorDataInfoEXT *")]
            SamplerCaptureDescriptorDataInfoEXT* pInfo,
        void* pData
    ) => DllImport.GetSamplerOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetSamplerOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSamplerCaptureDescriptorDataInfoEXT *")]
            Ref<SamplerCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (SamplerCaptureDescriptorDataInfoEXT* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetSamplerOpaqueCaptureDescriptorDataEXT(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_descriptor_buffer"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing+VK_VERSION_1_1",
            "VK_KHR_synchronization2+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSamplerOpaqueCaptureDescriptorDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSamplerOpaqueCaptureDescriptorDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSamplerCaptureDescriptorDataInfoEXT *")]
            Ref<SamplerCaptureDescriptorDataInfoEXT> pInfo,
        Ref pData
    ) => DllImport.GetSamplerOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetSemaphoreCounterValue(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle* semaphore,
        [NativeTypeName("uint64_t *")] ulong* pValue
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SemaphoreHandle*, ulong*, Result>)(
                _slots[598] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[598] = nativeContext.LoadFunction(
                        "vkGetSemaphoreCounterValue",
                        "vulkan"
                    )
            )
        )(device, semaphore, pValue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSemaphoreCounterValue(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle* semaphore,
        [NativeTypeName("uint64_t *")] ulong* pValue
    ) => DllImport.GetSemaphoreCounterValue(device, semaphore, pValue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetSemaphoreCounterValue(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSemaphore")] Ref<SemaphoreHandle> semaphore,
        [NativeTypeName("uint64_t *")] Ref<ulong> pValue
    )
    {
        fixed (ulong* __dsl_pValue = pValue)
        fixed (SemaphoreHandle* __dsl_semaphore = semaphore)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetSemaphoreCounterValue(
                    __dsl_device,
                    __dsl_semaphore,
                    __dsl_pValue
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSemaphoreCounterValue(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSemaphore")] Ref<SemaphoreHandle> semaphore,
        [NativeTypeName("uint64_t *")] Ref<ulong> pValue
    ) => DllImport.GetSemaphoreCounterValue(device, semaphore, pValue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetSemaphoreCounterValueKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle* semaphore,
        [NativeTypeName("uint64_t *")] ulong* pValue
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SemaphoreHandle*, ulong*, Result>)(
                _slots[599] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[599] = nativeContext.LoadFunction(
                        "vkGetSemaphoreCounterValueKHR",
                        "vulkan"
                    )
            )
        )(device, semaphore, pValue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValueKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSemaphoreCounterValueKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSemaphore")] SemaphoreHandle* semaphore,
        [NativeTypeName("uint64_t *")] ulong* pValue
    ) => DllImport.GetSemaphoreCounterValueKHR(device, semaphore, pValue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetSemaphoreCounterValueKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSemaphore")] Ref<SemaphoreHandle> semaphore,
        [NativeTypeName("uint64_t *")] Ref<ulong> pValue
    )
    {
        fixed (ulong* __dsl_pValue = pValue)
        fixed (SemaphoreHandle* __dsl_semaphore = semaphore)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetSemaphoreCounterValueKHR(
                    __dsl_device,
                    __dsl_semaphore,
                    __dsl_pValue
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreCounterValueKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSemaphoreCounterValueKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSemaphore")] Ref<SemaphoreHandle> semaphore,
        [NativeTypeName("uint64_t *")] Ref<ulong> pValue
    ) => DllImport.GetSemaphoreCounterValueKHR(device, semaphore, pValue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSemaphoreGetFdInfoKHR *")] SemaphoreGetFdInfoKHR* pGetFdInfo,
        int* pFd
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SemaphoreGetFdInfoKHR*, int*, Result>)(
                _slots[600] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[600] = nativeContext.LoadFunction("vkGetSemaphoreFdKHR", "vulkan")
            )
        )(device, pGetFdInfo, pFd);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSemaphoreGetFdInfoKHR *")] SemaphoreGetFdInfoKHR* pGetFdInfo,
        int* pFd
    ) => DllImport.GetSemaphoreFdKHR(device, pGetFdInfo, pFd);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSemaphoreGetFdInfoKHR *")] Ref<SemaphoreGetFdInfoKHR> pGetFdInfo,
        Ref<int> pFd
    )
    {
        fixed (int* __dsl_pFd = pFd)
        fixed (SemaphoreGetFdInfoKHR* __dsl_pGetFdInfo = pGetFdInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetSemaphoreFdKHR(__dsl_device, __dsl_pGetFdInfo, __dsl_pFd);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSemaphoreFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSemaphoreGetFdInfoKHR *")] Ref<SemaphoreGetFdInfoKHR> pGetFdInfo,
        Ref<int> pFd
    ) => DllImport.GetSemaphoreFdKHR(device, pGetFdInfo, pFd);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetShaderBinaryDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkShaderEXT")] ShaderEXTHandle* shader,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ShaderEXTHandle*, nuint*, void*, Result>)(
                _slots[601] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[601] = nativeContext.LoadFunction("vkGetShaderBinaryDataEXT", "vulkan")
            )
        )(device, shader, pDataSize, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderBinaryDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetShaderBinaryDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkShaderEXT")] ShaderEXTHandle* shader,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) => DllImport.GetShaderBinaryDataEXT(device, shader, pDataSize, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetShaderBinaryDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkShaderEXT")] Ref<ShaderEXTHandle> shader,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (nuint* __dsl_pDataSize = pDataSize)
        fixed (ShaderEXTHandle* __dsl_shader = shader)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetShaderBinaryDataEXT(
                    __dsl_device,
                    __dsl_shader,
                    __dsl_pDataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_object"],
        ImpliesSets = [
            "VK_KHR_dynamic_rendering+VK_KHR_get_physical_device_properties2",
            "VK_KHR_dynamic_rendering+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderBinaryDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetShaderBinaryDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkShaderEXT")] Ref<ShaderEXTHandle> shader,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    ) => DllImport.GetShaderBinaryDataEXT(device, shader, pDataSize, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetShaderInfoAMD(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("VkShaderStageFlagBits")] ShaderStageFlags shaderStage,
        ShaderInfoTypeAMD infoType,
        [NativeTypeName("size_t *")] nuint* pInfoSize,
        void* pInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineHandle*,
                ShaderStageFlags,
                ShaderInfoTypeAMD,
                nuint*,
                void*,
                Result>)(
                _slots[602] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[602] = nativeContext.LoadFunction("vkGetShaderInfoAMD", "vulkan")
            )
        )(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);

    [SupportedApiProfile("vulkan", ["VK_AMD_shader_info"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderInfoAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetShaderInfoAMD(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipeline")] PipelineHandle* pipeline,
        [NativeTypeName("VkShaderStageFlagBits")] ShaderStageFlags shaderStage,
        ShaderInfoTypeAMD infoType,
        [NativeTypeName("size_t *")] nuint* pInfoSize,
        void* pInfo
    ) => DllImport.GetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetShaderInfoAMD(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("VkShaderStageFlagBits")] ShaderStageFlags shaderStage,
        ShaderInfoTypeAMD infoType,
        [NativeTypeName("size_t *")] Ref<nuint> pInfoSize,
        Ref pInfo
    )
    {
        fixed (void* __dsl_pInfo = pInfo)
        fixed (nuint* __dsl_pInfoSize = pInfoSize)
        fixed (PipelineHandle* __dsl_pipeline = pipeline)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetShaderInfoAMD(
                    __dsl_device,
                    __dsl_pipeline,
                    shaderStage,
                    infoType,
                    __dsl_pInfoSize,
                    __dsl_pInfo
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_AMD_shader_info"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderInfoAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetShaderInfoAMD(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipeline")] Ref<PipelineHandle> pipeline,
        [NativeTypeName("VkShaderStageFlagBits")] ShaderStageFlags shaderStage,
        ShaderInfoTypeAMD infoType,
        [NativeTypeName("size_t *")] Ref<nuint> pInfoSize,
        Ref pInfo
    ) => DllImport.GetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetShaderModuleCreateInfoIdentifierEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")] ShaderModuleCreateInfo* pCreateInfo,
        ShaderModuleIdentifierEXT* pIdentifier
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ShaderModuleCreateInfo*,
                ShaderModuleIdentifierEXT*,
                void>)(
                _slots[603] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[603] = nativeContext.LoadFunction(
                        "vkGetShaderModuleCreateInfoIdentifierEXT",
                        "vulkan"
                    )
            )
        )(device, pCreateInfo, pIdentifier);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleCreateInfoIdentifierEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetShaderModuleCreateInfoIdentifierEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")] ShaderModuleCreateInfo* pCreateInfo,
        ShaderModuleIdentifierEXT* pIdentifier
    ) => DllImport.GetShaderModuleCreateInfoIdentifierEXT(device, pCreateInfo, pIdentifier);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetShaderModuleCreateInfoIdentifierEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")]
            Ref<ShaderModuleCreateInfo> pCreateInfo,
        Ref<ShaderModuleIdentifierEXT> pIdentifier
    )
    {
        fixed (ShaderModuleIdentifierEXT* __dsl_pIdentifier = pIdentifier)
        fixed (ShaderModuleCreateInfo* __dsl_pCreateInfo = pCreateInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetShaderModuleCreateInfoIdentifierEXT(
                __dsl_device,
                __dsl_pCreateInfo,
                __dsl_pIdentifier
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleCreateInfoIdentifierEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetShaderModuleCreateInfoIdentifierEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkShaderModuleCreateInfo *")]
            Ref<ShaderModuleCreateInfo> pCreateInfo,
        Ref<ShaderModuleIdentifierEXT> pIdentifier
    ) => DllImport.GetShaderModuleCreateInfoIdentifierEXT(device, pCreateInfo, pIdentifier);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetShaderModuleIdentifierEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkShaderModule")] ShaderModuleHandle* shaderModule,
        ShaderModuleIdentifierEXT* pIdentifier
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ShaderModuleHandle*,
                ShaderModuleIdentifierEXT*,
                void>)(
                _slots[604] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[604] = nativeContext.LoadFunction(
                        "vkGetShaderModuleIdentifierEXT",
                        "vulkan"
                    )
            )
        )(device, shaderModule, pIdentifier);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleIdentifierEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetShaderModuleIdentifierEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkShaderModule")] ShaderModuleHandle* shaderModule,
        ShaderModuleIdentifierEXT* pIdentifier
    ) => DllImport.GetShaderModuleIdentifierEXT(device, shaderModule, pIdentifier);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.GetShaderModuleIdentifierEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkShaderModule")] Ref<ShaderModuleHandle> shaderModule,
        Ref<ShaderModuleIdentifierEXT> pIdentifier
    )
    {
        fixed (ShaderModuleIdentifierEXT* __dsl_pIdentifier = pIdentifier)
        fixed (ShaderModuleHandle* __dsl_shaderModule = shaderModule)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).GetShaderModuleIdentifierEXT(
                __dsl_device,
                __dsl_shaderModule,
                __dsl_pIdentifier
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_shader_module_identifier"],
        ImpliesSets = [
            "VK_EXT_pipeline_creation_cache_control+VK_KHR_get_physical_device_properties2",
            "VK_EXT_pipeline_creation_cache_control+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetShaderModuleIdentifierEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetShaderModuleIdentifierEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkShaderModule")] Ref<ShaderModuleHandle> shaderModule,
        Ref<ShaderModuleIdentifierEXT> pIdentifier
    ) => DllImport.GetShaderModuleIdentifierEXT(device, shaderModule, pIdentifier);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetSwapchainCounterEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("VkSurfaceCounterFlagBitsEXT")] SurfaceCounterFlagsEXT counter,
        [NativeTypeName("uint64_t *")] ulong* pCounterValue
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SwapchainKHRHandle*,
                SurfaceCounterFlagsEXT,
                ulong*,
                Result>)(
                _slots[605] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[605] = nativeContext.LoadFunction("vkGetSwapchainCounterEXT", "vulkan")
            )
        )(device, swapchain, counter, pCounterValue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainCounterEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSwapchainCounterEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("VkSurfaceCounterFlagBitsEXT")] SurfaceCounterFlagsEXT counter,
        [NativeTypeName("uint64_t *")] ulong* pCounterValue
    ) => DllImport.GetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetSwapchainCounterEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("VkSurfaceCounterFlagBitsEXT")] SurfaceCounterFlagsEXT counter,
        [NativeTypeName("uint64_t *")] Ref<ulong> pCounterValue
    )
    {
        fixed (ulong* __dsl_pCounterValue = pCounterValue)
        fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetSwapchainCounterEXT(
                    __dsl_device,
                    __dsl_swapchain,
                    counter,
                    __dsl_pCounterValue
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainCounterEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSwapchainCounterEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("VkSurfaceCounterFlagBitsEXT")] SurfaceCounterFlagsEXT counter,
        [NativeTypeName("uint64_t *")] Ref<ulong> pCounterValue
    ) => DllImport.GetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetSwapchainImagesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("uint32_t *")] uint* pSwapchainImageCount,
        [NativeTypeName("VkImage *")] ImageHandle** pSwapchainImages
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SwapchainKHRHandle*, uint*, ImageHandle**, Result>)(
                _slots[606] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[606] = nativeContext.LoadFunction("vkGetSwapchainImagesKHR", "vulkan")
            )
        )(device, swapchain, pSwapchainImageCount, pSwapchainImages);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainImagesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSwapchainImagesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("uint32_t *")] uint* pSwapchainImageCount,
        [NativeTypeName("VkImage *")] ImageHandle** pSwapchainImages
    ) => DllImport.GetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetSwapchainImagesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("uint32_t *")] Ref<uint> pSwapchainImageCount,
        [NativeTypeName("VkImage *")] Ref2D<ImageHandle> pSwapchainImages
    )
    {
        fixed (ImageHandle** __dsl_pSwapchainImages = pSwapchainImages)
        fixed (uint* __dsl_pSwapchainImageCount = pSwapchainImageCount)
        fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetSwapchainImagesKHR(
                    __dsl_device,
                    __dsl_swapchain,
                    __dsl_pSwapchainImageCount,
                    __dsl_pSwapchainImages
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainImagesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSwapchainImagesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("uint32_t *")] Ref<uint> pSwapchainImageCount,
        [NativeTypeName("VkImage *")] Ref2D<ImageHandle> pSwapchainImages
    ) => DllImport.GetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetSwapchainStatusKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SwapchainKHRHandle*, Result>)(
                _slots[607] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[607] = nativeContext.LoadFunction("vkGetSwapchainStatusKHR", "vulkan")
            )
        )(device, swapchain);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shared_presentable_image"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainStatusKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSwapchainStatusKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain
    ) => DllImport.GetSwapchainStatusKHR(device, swapchain);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetSwapchainStatusKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain
    )
    {
        fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).GetSwapchainStatusKHR(__dsl_device, __dsl_swapchain);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_shared_presentable_image"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetSwapchainStatusKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetSwapchainStatusKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain
    ) => DllImport.GetSwapchainStatusKHR(device, swapchain);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetValidationCacheDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle* validationCache,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ValidationCacheEXTHandle*, nuint*, void*, Result>)(
                _slots[608] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[608] = nativeContext.LoadFunction(
                        "vkGetValidationCacheDataEXT",
                        "vulkan"
                    )
            )
        )(device, validationCache, pDataSize, pData);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [NativeFunction("vulkan", EntryPoint = "vkGetValidationCacheDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetValidationCacheDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle* validationCache,
        [NativeTypeName("size_t *")] nuint* pDataSize,
        void* pData
    ) => DllImport.GetValidationCacheDataEXT(device, validationCache, pDataSize, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetValidationCacheDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkValidationCacheEXT")] Ref<ValidationCacheEXTHandle> validationCache,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (nuint* __dsl_pDataSize = pDataSize)
        fixed (ValidationCacheEXTHandle* __dsl_validationCache = validationCache)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetValidationCacheDataEXT(
                    __dsl_device,
                    __dsl_validationCache,
                    __dsl_pDataSize,
                    __dsl_pData
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetValidationCacheDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetValidationCacheDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkValidationCacheEXT")] Ref<ValidationCacheEXTHandle> validationCache,
        [NativeTypeName("size_t *")] Ref<nuint> pDataSize,
        Ref pData
    ) => DllImport.GetValidationCacheDataEXT(device, validationCache, pDataSize, pData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetVideoSessionMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle* videoSession,
        [NativeTypeName("uint32_t *")] uint* pMemoryRequirementsCount,
        VideoSessionMemoryRequirementsKHR* pMemoryRequirements
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                VideoSessionKHRHandle*,
                uint*,
                VideoSessionMemoryRequirementsKHR*,
                Result>)(
                _slots[609] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[609] = nativeContext.LoadFunction(
                        "vkGetVideoSessionMemoryRequirementsKHR",
                        "vulkan"
                    )
            )
        )(device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkGetVideoSessionMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetVideoSessionMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkVideoSessionKHR")] VideoSessionKHRHandle* videoSession,
        [NativeTypeName("uint32_t *")] uint* pMemoryRequirementsCount,
        VideoSessionMemoryRequirementsKHR* pMemoryRequirements
    ) =>
        DllImport.GetVideoSessionMemoryRequirementsKHR(
            device,
            videoSession,
            pMemoryRequirementsCount,
            pMemoryRequirements
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.GetVideoSessionMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkVideoSessionKHR")] Ref<VideoSessionKHRHandle> videoSession,
        [NativeTypeName("uint32_t *")] Ref<uint> pMemoryRequirementsCount,
        Ref<VideoSessionMemoryRequirementsKHR> pMemoryRequirements
    )
    {
        fixed (VideoSessionMemoryRequirementsKHR* __dsl_pMemoryRequirements = pMemoryRequirements)
        fixed (uint* __dsl_pMemoryRequirementsCount = pMemoryRequirementsCount)
        fixed (VideoSessionKHRHandle* __dsl_videoSession = videoSession)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).GetVideoSessionMemoryRequirementsKHR(
                    __dsl_device,
                    __dsl_videoSession,
                    __dsl_pMemoryRequirementsCount,
                    __dsl_pMemoryRequirements
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkGetVideoSessionMemoryRequirementsKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result GetVideoSessionMemoryRequirementsKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkVideoSessionKHR")] Ref<VideoSessionKHRHandle> videoSession,
        [NativeTypeName("uint32_t *")] Ref<uint> pMemoryRequirementsCount,
        Ref<VideoSessionMemoryRequirementsKHR> pMemoryRequirements
    ) =>
        DllImport.GetVideoSessionMemoryRequirementsKHR(
            device,
            videoSession,
            pMemoryRequirementsCount,
            pMemoryRequirements
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ImportFenceFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImportFenceFdInfoKHR *")] ImportFenceFdInfoKHR* pImportFenceFdInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ImportFenceFdInfoKHR*, Result>)(
                _slots[610] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[610] = nativeContext.LoadFunction("vkImportFenceFdKHR", "vulkan")
            )
        )(device, pImportFenceFdInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkImportFenceFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ImportFenceFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImportFenceFdInfoKHR *")] ImportFenceFdInfoKHR* pImportFenceFdInfo
    ) => DllImport.ImportFenceFdKHR(device, pImportFenceFdInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ImportFenceFdKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImportFenceFdInfoKHR *")]
            Ref<ImportFenceFdInfoKHR> pImportFenceFdInfo
    )
    {
        fixed (ImportFenceFdInfoKHR* __dsl_pImportFenceFdInfo = pImportFenceFdInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).ImportFenceFdKHR(__dsl_device, __dsl_pImportFenceFdInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_fence_fd"],
        ImpliesSets = [
            "VK_KHR_external_fence_fd+VK_KHR_external_fence",
            "VK_KHR_external_fence_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkImportFenceFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ImportFenceFdKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImportFenceFdInfoKHR *")]
            Ref<ImportFenceFdInfoKHR> pImportFenceFdInfo
    ) => DllImport.ImportFenceFdKHR(device, pImportFenceFdInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ImportSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImportSemaphoreFdInfoKHR *")]
            ImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ImportSemaphoreFdInfoKHR*, Result>)(
                _slots[611] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[611] = nativeContext.LoadFunction("vkImportSemaphoreFdKHR", "vulkan")
            )
        )(device, pImportSemaphoreFdInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkImportSemaphoreFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ImportSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkImportSemaphoreFdInfoKHR *")]
            ImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo
    ) => DllImport.ImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ImportSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImportSemaphoreFdInfoKHR *")]
            Ref<ImportSemaphoreFdInfoKHR> pImportSemaphoreFdInfo
    )
    {
        fixed (ImportSemaphoreFdInfoKHR* __dsl_pImportSemaphoreFdInfo = pImportSemaphoreFdInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).ImportSemaphoreFdKHR(__dsl_device, __dsl_pImportSemaphoreFdInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_external_semaphore_fd"],
        ImpliesSets = [
            "VK_KHR_external_semaphore_fd+VK_KHR_external_semaphore",
            "VK_KHR_external_semaphore_fd+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkImportSemaphoreFdKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ImportSemaphoreFdKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkImportSemaphoreFdInfoKHR *")]
            Ref<ImportSemaphoreFdInfoKHR> pImportSemaphoreFdInfo
    ) => DllImport.ImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.InitializePerformanceApiIntel(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkInitializePerformanceApiInfoINTEL *")]
            InitializePerformanceApiInfoIntel* pInitializeInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, InitializePerformanceApiInfoIntel*, Result>)(
                _slots[612] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[612] = nativeContext.LoadFunction(
                        "vkInitializePerformanceApiINTEL",
                        "vulkan"
                    )
            )
        )(device, pInitializeInfo);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkInitializePerformanceApiINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result InitializePerformanceApiIntel(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkInitializePerformanceApiInfoINTEL *")]
            InitializePerformanceApiInfoIntel* pInitializeInfo
    ) => DllImport.InitializePerformanceApiIntel(device, pInitializeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.InitializePerformanceApiIntel(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkInitializePerformanceApiInfoINTEL *")]
            Ref<InitializePerformanceApiInfoIntel> pInitializeInfo
    )
    {
        fixed (InitializePerformanceApiInfoIntel* __dsl_pInitializeInfo = pInitializeInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).InitializePerformanceApiIntel(__dsl_device, __dsl_pInitializeInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkInitializePerformanceApiINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result InitializePerformanceApiIntel(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkInitializePerformanceApiInfoINTEL *")]
            Ref<InitializePerformanceApiInfoIntel> pInitializeInfo
    ) => DllImport.InitializePerformanceApiIntel(device, pInitializeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.InvalidateMappedMemoryRanges(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] MappedMemoryRange* pMemoryRanges
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, uint, MappedMemoryRange*, Result>)(
                _slots[613] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[613] = nativeContext.LoadFunction(
                        "vkInvalidateMappedMemoryRanges",
                        "vulkan"
                    )
            )
        )(device, memoryRangeCount, pMemoryRanges);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkInvalidateMappedMemoryRanges")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result InvalidateMappedMemoryRanges(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] MappedMemoryRange* pMemoryRanges
    ) => DllImport.InvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.InvalidateMappedMemoryRanges(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] Ref<MappedMemoryRange> pMemoryRanges
    )
    {
        fixed (MappedMemoryRange* __dsl_pMemoryRanges = pMemoryRanges)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).InvalidateMappedMemoryRanges(
                    __dsl_device,
                    memoryRangeCount,
                    __dsl_pMemoryRanges
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkInvalidateMappedMemoryRanges")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result InvalidateMappedMemoryRanges(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint memoryRangeCount,
        [NativeTypeName("const VkMappedMemoryRange *")] Ref<MappedMemoryRange> pMemoryRanges
    ) => DllImport.InvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.LatencySleepNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("const VkLatencySleepInfoNV *")] LatencySleepInfoNV* pSleepInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SwapchainKHRHandle*, LatencySleepInfoNV*, Result>)(
                _slots[614] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[614] = nativeContext.LoadFunction("vkLatencySleepNV", "vulkan")
            )
        )(device, swapchain, pSleepInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkLatencySleepNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result LatencySleepNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("const VkLatencySleepInfoNV *")] LatencySleepInfoNV* pSleepInfo
    ) => DllImport.LatencySleepNV(device, swapchain, pSleepInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.LatencySleepNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("const VkLatencySleepInfoNV *")] Ref<LatencySleepInfoNV> pSleepInfo
    )
    {
        fixed (LatencySleepInfoNV* __dsl_pSleepInfo = pSleepInfo)
        fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).LatencySleepNV(__dsl_device, __dsl_swapchain, __dsl_pSleepInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkLatencySleepNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result LatencySleepNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("const VkLatencySleepInfoNV *")] Ref<LatencySleepInfoNV> pSleepInfo
    ) => DllImport.LatencySleepNV(device, swapchain, pSleepInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.MapMemory(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        [NativeTypeName("VkMemoryMapFlags")] uint flags,
        void** ppData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeviceMemoryHandle*,
                ulong,
                ulong,
                uint,
                void**,
                Result>)(
                _slots[615] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[615] = nativeContext.LoadFunction("vkMapMemory", "vulkan")
            )
        )(device, memory, offset, size, flags, ppData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MapMemory(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        [NativeTypeName("VkMemoryMapFlags")] uint flags,
        void** ppData
    ) => DllImport.MapMemory(device, memory, offset, size, flags, ppData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.MapMemory(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        [NativeTypeName("VkMemoryMapFlags")] uint flags,
        Ref2D ppData
    )
    {
        fixed (void** __dsl_ppData = ppData)
        fixed (DeviceMemoryHandle* __dsl_memory = memory)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).MapMemory(
                    __dsl_device,
                    __dsl_memory,
                    offset,
                    size,
                    flags,
                    __dsl_ppData
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MapMemory(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
        [NativeTypeName("VkDeviceSize")] ulong offset,
        [NativeTypeName("VkDeviceSize")] ulong size,
        [NativeTypeName("VkMemoryMapFlags")] uint flags,
        Ref2D ppData
    ) => DllImport.MapMemory(device, memory, offset, size, flags, ppData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.MapMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMemoryMapInfo *")] MemoryMapInfo* pMemoryMapInfo,
        void** ppData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, MemoryMapInfo*, void**, Result>)(
                _slots[616] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[616] = nativeContext.LoadFunction("vkMapMemory2", "vulkan")
            )
        )(device, pMemoryMapInfo, ppData);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MapMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMemoryMapInfo *")] MemoryMapInfo* pMemoryMapInfo,
        void** ppData
    ) => DllImport.MapMemory2(device, pMemoryMapInfo, ppData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.MapMemory2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMemoryMapInfo *")] Ref<MemoryMapInfo> pMemoryMapInfo,
        Ref2D ppData
    )
    {
        fixed (void** __dsl_ppData = ppData)
        fixed (MemoryMapInfo* __dsl_pMemoryMapInfo = pMemoryMapInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).MapMemory2(__dsl_device, __dsl_pMemoryMapInfo, __dsl_ppData);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MapMemory2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMemoryMapInfo *")] Ref<MemoryMapInfo> pMemoryMapInfo,
        Ref2D ppData
    ) => DllImport.MapMemory2(device, pMemoryMapInfo, ppData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.MapMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMemoryMapInfo *")] MemoryMapInfo* pMemoryMapInfo,
        void** ppData
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, MemoryMapInfo*, void**, Result>)(
                _slots[617] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[617] = nativeContext.LoadFunction("vkMapMemory2KHR", "vulkan")
            )
        )(device, pMemoryMapInfo, ppData);

    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MapMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMemoryMapInfo *")] MemoryMapInfo* pMemoryMapInfo,
        void** ppData
    ) => DllImport.MapMemory2KHR(device, pMemoryMapInfo, ppData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.MapMemory2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMemoryMapInfo *")] Ref<MemoryMapInfo> pMemoryMapInfo,
        Ref2D ppData
    )
    {
        fixed (void** __dsl_ppData = ppData)
        fixed (MemoryMapInfo* __dsl_pMemoryMapInfo = pMemoryMapInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).MapMemory2KHR(__dsl_device, __dsl_pMemoryMapInfo, __dsl_ppData);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMapMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MapMemory2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMemoryMapInfo *")] Ref<MemoryMapInfo> pMemoryMapInfo,
        Ref2D ppData
    ) => DllImport.MapMemory2KHR(device, pMemoryMapInfo, ppData);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.MergePipelineCaches(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkPipelineCache *")] PipelineCacheHandle** pSrcCaches
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                PipelineCacheHandle*,
                uint,
                PipelineCacheHandle**,
                Result>)(
                _slots[618] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[618] = nativeContext.LoadFunction("vkMergePipelineCaches", "vulkan")
            )
        )(device, dstCache, srcCacheCount, pSrcCaches);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkMergePipelineCaches")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MergePipelineCaches(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPipelineCache")] PipelineCacheHandle* dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkPipelineCache *")] PipelineCacheHandle** pSrcCaches
    ) => DllImport.MergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.MergePipelineCaches(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkPipelineCache *")] Ref2D<PipelineCacheHandle> pSrcCaches
    )
    {
        fixed (PipelineCacheHandle** __dsl_pSrcCaches = pSrcCaches)
        fixed (PipelineCacheHandle* __dsl_dstCache = dstCache)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).MergePipelineCaches(
                    __dsl_device,
                    __dsl_dstCache,
                    srcCacheCount,
                    __dsl_pSrcCaches
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMergePipelineCaches")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MergePipelineCaches(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPipelineCache")] Ref<PipelineCacheHandle> dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkPipelineCache *")] Ref2D<PipelineCacheHandle> pSrcCaches
    ) => DllImport.MergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.MergeValidationCachesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle* dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkValidationCacheEXT *")] ValidationCacheEXTHandle** pSrcCaches
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ValidationCacheEXTHandle*,
                uint,
                ValidationCacheEXTHandle**,
                Result>)(
                _slots[619] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[619] = nativeContext.LoadFunction(
                        "vkMergeValidationCachesEXT",
                        "vulkan"
                    )
            )
        )(device, dstCache, srcCacheCount, pSrcCaches);

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [NativeFunction("vulkan", EntryPoint = "vkMergeValidationCachesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MergeValidationCachesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkValidationCacheEXT")] ValidationCacheEXTHandle* dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkValidationCacheEXT *")] ValidationCacheEXTHandle** pSrcCaches
    ) => DllImport.MergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.MergeValidationCachesEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkValidationCacheEXT")] Ref<ValidationCacheEXTHandle> dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkValidationCacheEXT *")] Ref2D<ValidationCacheEXTHandle> pSrcCaches
    )
    {
        fixed (ValidationCacheEXTHandle** __dsl_pSrcCaches = pSrcCaches)
        fixed (ValidationCacheEXTHandle* __dsl_dstCache = dstCache)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).MergeValidationCachesEXT(
                    __dsl_device,
                    __dsl_dstCache,
                    srcCacheCount,
                    __dsl_pSrcCaches
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_validation_cache"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkMergeValidationCachesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result MergeValidationCachesEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkValidationCacheEXT")] Ref<ValidationCacheEXTHandle> dstCache,
        [NativeTypeName("uint32_t")] uint srcCacheCount,
        [NativeTypeName("const VkValidationCacheEXT *")] Ref2D<ValidationCacheEXTHandle> pSrcCaches
    ) => DllImport.MergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.QueueBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) =>
        (
            (delegate* unmanaged<QueueHandle*, DebugUtilsLabelEXT*, void>)(
                _slots[620] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[620] = nativeContext.LoadFunction(
                        "vkQueueBeginDebugUtilsLabelEXT",
                        "vulkan"
                    )
            )
        )(queue, pLabelInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueueBeginDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) => DllImport.QueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.QueueBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    )
    {
        fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
        fixed (QueueHandle* __dsl_queue = queue)
        {
            ((IVulkan)this).QueueBeginDebugUtilsLabelEXT(__dsl_queue, __dsl_pLabelInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueBeginDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueBeginDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    ) => DllImport.QueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.QueueBindSparse(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindSparseInfo *")] BindSparseInfo* pBindInfo,
        [NativeTypeName("VkFence")] FenceHandle* fence
    ) =>
        (
            (delegate* unmanaged<QueueHandle*, uint, BindSparseInfo*, FenceHandle*, Result>)(
                _slots[621] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[621] = nativeContext.LoadFunction("vkQueueBindSparse", "vulkan")
            )
        )(queue, bindInfoCount, pBindInfo, fence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueBindSparse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueBindSparse(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindSparseInfo *")] BindSparseInfo* pBindInfo,
        [NativeTypeName("VkFence")] FenceHandle* fence
    ) => DllImport.QueueBindSparse(queue, bindInfoCount, pBindInfo, fence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.QueueBindSparse(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindSparseInfo *")] Ref<BindSparseInfo> pBindInfo,
        [NativeTypeName("VkFence")] Ref<FenceHandle> fence
    )
    {
        fixed (FenceHandle* __dsl_fence = fence)
        fixed (BindSparseInfo* __dsl_pBindInfo = pBindInfo)
        fixed (QueueHandle* __dsl_queue = queue)
        {
            return (Result)
                ((IVulkan)this).QueueBindSparse(
                    __dsl_queue,
                    bindInfoCount,
                    __dsl_pBindInfo,
                    __dsl_fence
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueBindSparse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueBindSparse(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("uint32_t")] uint bindInfoCount,
        [NativeTypeName("const VkBindSparseInfo *")] Ref<BindSparseInfo> pBindInfo,
        [NativeTypeName("VkFence")] Ref<FenceHandle> fence
    ) => DllImport.QueueBindSparse(queue, bindInfoCount, pBindInfo, fence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.QueueEndDebugUtilsLabelEXT([NativeTypeName("VkQueue")] QueueHandle* queue) =>
        (
            (delegate* unmanaged<QueueHandle*, void>)(
                _slots[622] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[622] = nativeContext.LoadFunction(
                        "vkQueueEndDebugUtilsLabelEXT",
                        "vulkan"
                    )
            )
        )(queue);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueueEndDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueEndDebugUtilsLabelEXT([NativeTypeName("VkQueue")] QueueHandle* queue) =>
        DllImport.QueueEndDebugUtilsLabelEXT(queue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.QueueEndDebugUtilsLabelEXT([NativeTypeName("VkQueue")] Ref<QueueHandle> queue)
    {
        fixed (QueueHandle* __dsl_queue = queue)
        {
            ((IVulkan)this).QueueEndDebugUtilsLabelEXT(__dsl_queue);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueEndDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueEndDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue
    ) => DllImport.QueueEndDebugUtilsLabelEXT(queue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.QueueInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) =>
        (
            (delegate* unmanaged<QueueHandle*, DebugUtilsLabelEXT*, void>)(
                _slots[623] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[623] = nativeContext.LoadFunction(
                        "vkQueueInsertDebugUtilsLabelEXT",
                        "vulkan"
                    )
            )
        )(queue, pLabelInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueueInsertDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] DebugUtilsLabelEXT* pLabelInfo
    ) => DllImport.QueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.QueueInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    )
    {
        fixed (DebugUtilsLabelEXT* __dsl_pLabelInfo = pLabelInfo)
        fixed (QueueHandle* __dsl_queue = queue)
        {
            ((IVulkan)this).QueueInsertDebugUtilsLabelEXT(__dsl_queue, __dsl_pLabelInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueInsertDebugUtilsLabelEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueInsertDebugUtilsLabelEXT(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("const VkDebugUtilsLabelEXT *")] Ref<DebugUtilsLabelEXT> pLabelInfo
    ) => DllImport.QueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.QueueNotifyOutOfBandNV(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("const VkOutOfBandQueueTypeInfoNV *")]
            OutOfBandQueueTypeInfoNV* pQueueTypeInfo
    ) =>
        (
            (delegate* unmanaged<QueueHandle*, OutOfBandQueueTypeInfoNV*, void>)(
                _slots[624] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[624] = nativeContext.LoadFunction("vkQueueNotifyOutOfBandNV", "vulkan")
            )
        )(queue, pQueueTypeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueNotifyOutOfBandNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueNotifyOutOfBandNV(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("const VkOutOfBandQueueTypeInfoNV *")]
            OutOfBandQueueTypeInfoNV* pQueueTypeInfo
    ) => DllImport.QueueNotifyOutOfBandNV(queue, pQueueTypeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.QueueNotifyOutOfBandNV(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("const VkOutOfBandQueueTypeInfoNV *")]
            Ref<OutOfBandQueueTypeInfoNV> pQueueTypeInfo
    )
    {
        fixed (OutOfBandQueueTypeInfoNV* __dsl_pQueueTypeInfo = pQueueTypeInfo)
        fixed (QueueHandle* __dsl_queue = queue)
        {
            ((IVulkan)this).QueueNotifyOutOfBandNV(__dsl_queue, __dsl_pQueueTypeInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueNotifyOutOfBandNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QueueNotifyOutOfBandNV(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("const VkOutOfBandQueueTypeInfoNV *")]
            Ref<OutOfBandQueueTypeInfoNV> pQueueTypeInfo
    ) => DllImport.QueueNotifyOutOfBandNV(queue, pQueueTypeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.QueuePresentKHR(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("const VkPresentInfoKHR *")] PresentInfoKHR* pPresentInfo
    ) =>
        (
            (delegate* unmanaged<QueueHandle*, PresentInfoKHR*, Result>)(
                _slots[625] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[625] = nativeContext.LoadFunction("vkQueuePresentKHR", "vulkan")
            )
        )(queue, pPresentInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueuePresentKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueuePresentKHR(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("const VkPresentInfoKHR *")] PresentInfoKHR* pPresentInfo
    ) => DllImport.QueuePresentKHR(queue, pPresentInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.QueuePresentKHR(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("const VkPresentInfoKHR *")] Ref<PresentInfoKHR> pPresentInfo
    )
    {
        fixed (PresentInfoKHR* __dsl_pPresentInfo = pPresentInfo)
        fixed (QueueHandle* __dsl_queue = queue)
        {
            return (Result)((IVulkan)this).QueuePresentKHR(__dsl_queue, __dsl_pPresentInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_swapchain"], ImpliesSets = ["VK_KHR_surface"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueuePresentKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueuePresentKHR(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("const VkPresentInfoKHR *")] Ref<PresentInfoKHR> pPresentInfo
    ) => DllImport.QueuePresentKHR(queue, pPresentInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.QueueSetPerformanceConfigurationIntel(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("VkPerformanceConfigurationINTEL")]
            PerformanceConfigurationIntelHandle* configuration
    ) =>
        (
            (delegate* unmanaged<QueueHandle*, PerformanceConfigurationIntelHandle*, Result>)(
                _slots[626] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[626] = nativeContext.LoadFunction(
                        "vkQueueSetPerformanceConfigurationINTEL",
                        "vulkan"
                    )
            )
        )(queue, configuration);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSetPerformanceConfigurationINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSetPerformanceConfigurationIntel(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("VkPerformanceConfigurationINTEL")]
            PerformanceConfigurationIntelHandle* configuration
    ) => DllImport.QueueSetPerformanceConfigurationIntel(queue, configuration);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.QueueSetPerformanceConfigurationIntel(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("VkPerformanceConfigurationINTEL")]
            Ref<PerformanceConfigurationIntelHandle> configuration
    )
    {
        fixed (PerformanceConfigurationIntelHandle* __dsl_configuration = configuration)
        fixed (QueueHandle* __dsl_queue = queue)
        {
            return (Result)
                ((IVulkan)this).QueueSetPerformanceConfigurationIntel(
                    __dsl_queue,
                    __dsl_configuration
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSetPerformanceConfigurationINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSetPerformanceConfigurationIntel(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("VkPerformanceConfigurationINTEL")]
            Ref<PerformanceConfigurationIntelHandle> configuration
    ) => DllImport.QueueSetPerformanceConfigurationIntel(queue, configuration);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.QueueSubmit(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo *")] SubmitInfo* pSubmits,
        [NativeTypeName("VkFence")] FenceHandle* fence
    ) =>
        (
            (delegate* unmanaged<QueueHandle*, uint, SubmitInfo*, FenceHandle*, Result>)(
                _slots[627] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[627] = nativeContext.LoadFunction("vkQueueSubmit", "vulkan")
            )
        )(queue, submitCount, pSubmits, fence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSubmit(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo *")] SubmitInfo* pSubmits,
        [NativeTypeName("VkFence")] FenceHandle* fence
    ) => DllImport.QueueSubmit(queue, submitCount, pSubmits, fence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.QueueSubmit(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo *")] Ref<SubmitInfo> pSubmits,
        [NativeTypeName("VkFence")] Ref<FenceHandle> fence
    )
    {
        fixed (FenceHandle* __dsl_fence = fence)
        fixed (SubmitInfo* __dsl_pSubmits = pSubmits)
        fixed (QueueHandle* __dsl_queue = queue)
        {
            return (Result)
                ((IVulkan)this).QueueSubmit(__dsl_queue, submitCount, __dsl_pSubmits, __dsl_fence);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSubmit(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo *")] Ref<SubmitInfo> pSubmits,
        [NativeTypeName("VkFence")] Ref<FenceHandle> fence
    ) => DllImport.QueueSubmit(queue, submitCount, pSubmits, fence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.QueueSubmit2(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] SubmitInfo2* pSubmits,
        [NativeTypeName("VkFence")] FenceHandle* fence
    ) =>
        (
            (delegate* unmanaged<QueueHandle*, uint, SubmitInfo2*, FenceHandle*, Result>)(
                _slots[628] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[628] = nativeContext.LoadFunction("vkQueueSubmit2", "vulkan")
            )
        )(queue, submitCount, pSubmits, fence);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSubmit2(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] SubmitInfo2* pSubmits,
        [NativeTypeName("VkFence")] FenceHandle* fence
    ) => DllImport.QueueSubmit2(queue, submitCount, pSubmits, fence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.QueueSubmit2(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] Ref<SubmitInfo2> pSubmits,
        [NativeTypeName("VkFence")] Ref<FenceHandle> fence
    )
    {
        fixed (FenceHandle* __dsl_fence = fence)
        fixed (SubmitInfo2* __dsl_pSubmits = pSubmits)
        fixed (QueueHandle* __dsl_queue = queue)
        {
            return (Result)
                ((IVulkan)this).QueueSubmit2(__dsl_queue, submitCount, __dsl_pSubmits, __dsl_fence);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSubmit2(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] Ref<SubmitInfo2> pSubmits,
        [NativeTypeName("VkFence")] Ref<FenceHandle> fence
    ) => DllImport.QueueSubmit2(queue, submitCount, pSubmits, fence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.QueueSubmit2KHR(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] SubmitInfo2* pSubmits,
        [NativeTypeName("VkFence")] FenceHandle* fence
    ) =>
        (
            (delegate* unmanaged<QueueHandle*, uint, SubmitInfo2*, FenceHandle*, Result>)(
                _slots[629] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[629] = nativeContext.LoadFunction("vkQueueSubmit2KHR", "vulkan")
            )
        )(queue, submitCount, pSubmits, fence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSubmit2KHR(
        [NativeTypeName("VkQueue")] QueueHandle* queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] SubmitInfo2* pSubmits,
        [NativeTypeName("VkFence")] FenceHandle* fence
    ) => DllImport.QueueSubmit2KHR(queue, submitCount, pSubmits, fence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.QueueSubmit2KHR(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] Ref<SubmitInfo2> pSubmits,
        [NativeTypeName("VkFence")] Ref<FenceHandle> fence
    )
    {
        fixed (FenceHandle* __dsl_fence = fence)
        fixed (SubmitInfo2* __dsl_pSubmits = pSubmits)
        fixed (QueueHandle* __dsl_queue = queue)
        {
            return (Result)
                ((IVulkan)this).QueueSubmit2KHR(
                    __dsl_queue,
                    submitCount,
                    __dsl_pSubmits,
                    __dsl_fence
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_synchronization2"],
        ImpliesSets = [
            "VK_KHR_synchronization2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_synchronization2+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueSubmit2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueSubmit2KHR(
        [NativeTypeName("VkQueue")] Ref<QueueHandle> queue,
        [NativeTypeName("uint32_t")] uint submitCount,
        [NativeTypeName("const VkSubmitInfo2 *")] Ref<SubmitInfo2> pSubmits,
        [NativeTypeName("VkFence")] Ref<FenceHandle> fence
    ) => DllImport.QueueSubmit2KHR(queue, submitCount, pSubmits, fence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.QueueWaitIdle([NativeTypeName("VkQueue")] QueueHandle* queue) =>
        (
            (delegate* unmanaged<QueueHandle*, Result>)(
                _slots[630] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[630] = nativeContext.LoadFunction("vkQueueWaitIdle", "vulkan")
            )
        )(queue);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkQueueWaitIdle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueWaitIdle([NativeTypeName("VkQueue")] QueueHandle* queue) =>
        DllImport.QueueWaitIdle(queue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.QueueWaitIdle([NativeTypeName("VkQueue")] Ref<QueueHandle> queue)
    {
        fixed (QueueHandle* __dsl_queue = queue)
        {
            return (Result)((IVulkan)this).QueueWaitIdle(__dsl_queue);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkQueueWaitIdle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result QueueWaitIdle([NativeTypeName("VkQueue")] Ref<QueueHandle> queue) =>
        DllImport.QueueWaitIdle(queue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.RegisterDeviceEventEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceEventInfoEXT *")] DeviceEventInfoEXT* pDeviceEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFence *")] FenceHandle** pFence
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DeviceEventInfoEXT*,
                AllocationCallbacks*,
                FenceHandle**,
                Result>)(
                _slots[631] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[631] = nativeContext.LoadFunction("vkRegisterDeviceEventEXT", "vulkan")
            )
        )(device, pDeviceEventInfo, pAllocator, pFence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkRegisterDeviceEventEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result RegisterDeviceEventEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDeviceEventInfoEXT *")] DeviceEventInfoEXT* pDeviceEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFence *")] FenceHandle** pFence
    ) => DllImport.RegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.RegisterDeviceEventEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceEventInfoEXT *")] Ref<DeviceEventInfoEXT> pDeviceEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFence *")] Ref2D<FenceHandle> pFence
    )
    {
        fixed (FenceHandle** __dsl_pFence = pFence)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DeviceEventInfoEXT* __dsl_pDeviceEventInfo = pDeviceEventInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).RegisterDeviceEventEXT(
                    __dsl_device,
                    __dsl_pDeviceEventInfo,
                    __dsl_pAllocator,
                    __dsl_pFence
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkRegisterDeviceEventEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result RegisterDeviceEventEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDeviceEventInfoEXT *")] Ref<DeviceEventInfoEXT> pDeviceEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFence *")] Ref2D<FenceHandle> pFence
    ) => DllImport.RegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.RegisterDisplayEventEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
        [NativeTypeName("const VkDisplayEventInfoEXT *")] DisplayEventInfoEXT* pDisplayEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFence *")] FenceHandle** pFence
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DisplayKHRHandle*,
                DisplayEventInfoEXT*,
                AllocationCallbacks*,
                FenceHandle**,
                Result>)(
                _slots[632] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[632] = nativeContext.LoadFunction(
                        "vkRegisterDisplayEventEXT",
                        "vulkan"
                    )
            )
        )(device, display, pDisplayEventInfo, pAllocator, pFence);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkRegisterDisplayEventEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result RegisterDisplayEventEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display,
        [NativeTypeName("const VkDisplayEventInfoEXT *")] DisplayEventInfoEXT* pDisplayEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator,
        [NativeTypeName("VkFence *")] FenceHandle** pFence
    ) => DllImport.RegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.RegisterDisplayEventEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
        [NativeTypeName("const VkDisplayEventInfoEXT *")]
            Ref<DisplayEventInfoEXT> pDisplayEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFence *")] Ref2D<FenceHandle> pFence
    )
    {
        fixed (FenceHandle** __dsl_pFence = pFence)
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (DisplayEventInfoEXT* __dsl_pDisplayEventInfo = pDisplayEventInfo)
        fixed (DisplayKHRHandle* __dsl_display = display)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).RegisterDisplayEventEXT(
                    __dsl_device,
                    __dsl_display,
                    __dsl_pDisplayEventInfo,
                    __dsl_pAllocator,
                    __dsl_pFence
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_display_control"],
        ImpliesSets = ["VK_EXT_display_surface_counter", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkRegisterDisplayEventEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result RegisterDisplayEventEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display,
        [NativeTypeName("const VkDisplayEventInfoEXT *")]
            Ref<DisplayEventInfoEXT> pDisplayEventInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator,
        [NativeTypeName("VkFence *")] Ref2D<FenceHandle> pFence
    ) => DllImport.RegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ReleaseCapturedPipelineDataKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkReleaseCapturedPipelineDataInfoKHR *")]
            ReleaseCapturedPipelineDataInfoKHR* pInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ReleaseCapturedPipelineDataInfoKHR*,
                AllocationCallbacks*,
                Result>)(
                _slots[633] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[633] = nativeContext.LoadFunction(
                        "vkReleaseCapturedPipelineDataKHR",
                        "vulkan"
                    )
            )
        )(device, pInfo, pAllocator);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseCapturedPipelineDataKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleaseCapturedPipelineDataKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkReleaseCapturedPipelineDataInfoKHR *")]
            ReleaseCapturedPipelineDataInfoKHR* pInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] AllocationCallbacks* pAllocator
    ) => DllImport.ReleaseCapturedPipelineDataKHR(device, pInfo, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ReleaseCapturedPipelineDataKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkReleaseCapturedPipelineDataInfoKHR *")]
            Ref<ReleaseCapturedPipelineDataInfoKHR> pInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    )
    {
        fixed (AllocationCallbacks* __dsl_pAllocator = pAllocator)
        fixed (ReleaseCapturedPipelineDataInfoKHR* __dsl_pInfo = pInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).ReleaseCapturedPipelineDataKHR(
                    __dsl_device,
                    __dsl_pInfo,
                    __dsl_pAllocator
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_pipeline_binary"],
        ImpliesSets = [
            "VK_KHR_pipeline_binary+VK_KHR_maintenance5",
            "VK_KHR_pipeline_binary+VK_VERSION_1_4",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseCapturedPipelineDataKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleaseCapturedPipelineDataKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkReleaseCapturedPipelineDataInfoKHR *")]
            Ref<ReleaseCapturedPipelineDataInfoKHR> pInfo,
        [NativeTypeName("const VkAllocationCallbacks *")] Ref<AllocationCallbacks> pAllocator
    ) => DllImport.ReleaseCapturedPipelineDataKHR(device, pInfo, pAllocator);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ReleaseDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display
    ) =>
        (
            (delegate* unmanaged<PhysicalDeviceHandle*, DisplayKHRHandle*, Result>)(
                _slots[634] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[634] = nativeContext.LoadFunction("vkReleaseDisplayEXT", "vulkan")
            )
        )(physicalDevice, display);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_direct_mode_display"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseDisplayEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleaseDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] PhysicalDeviceHandle* physicalDevice,
        [NativeTypeName("VkDisplayKHR")] DisplayKHRHandle* display
    ) => DllImport.ReleaseDisplayEXT(physicalDevice, display);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ReleaseDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display
    )
    {
        fixed (DisplayKHRHandle* __dsl_display = display)
        fixed (PhysicalDeviceHandle* __dsl_physicalDevice = physicalDevice)
        {
            return (Result)((IVulkan)this).ReleaseDisplayEXT(__dsl_physicalDevice, __dsl_display);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_direct_mode_display"],
        ImpliesSets = ["VK_KHR_display"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseDisplayEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleaseDisplayEXT(
        [NativeTypeName("VkPhysicalDevice")] Ref<PhysicalDeviceHandle> physicalDevice,
        [NativeTypeName("VkDisplayKHR")] Ref<DisplayKHRHandle> display
    ) => DllImport.ReleaseDisplayEXT(physicalDevice, display);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ReleasePerformanceConfigurationIntel(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPerformanceConfigurationINTEL")]
            PerformanceConfigurationIntelHandle* configuration
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, PerformanceConfigurationIntelHandle*, Result>)(
                _slots[635] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[635] = nativeContext.LoadFunction(
                        "vkReleasePerformanceConfigurationINTEL",
                        "vulkan"
                    )
            )
        )(device, configuration);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkReleasePerformanceConfigurationINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleasePerformanceConfigurationIntel(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkPerformanceConfigurationINTEL")]
            PerformanceConfigurationIntelHandle* configuration
    ) => DllImport.ReleasePerformanceConfigurationIntel(device, configuration);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ReleasePerformanceConfigurationIntel(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPerformanceConfigurationINTEL")]
            Ref<PerformanceConfigurationIntelHandle> configuration
    )
    {
        fixed (PerformanceConfigurationIntelHandle* __dsl_configuration = configuration)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).ReleasePerformanceConfigurationIntel(
                    __dsl_device,
                    __dsl_configuration
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkReleasePerformanceConfigurationINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleasePerformanceConfigurationIntel(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkPerformanceConfigurationINTEL")]
            Ref<PerformanceConfigurationIntelHandle> configuration
    ) => DllImport.ReleasePerformanceConfigurationIntel(device, configuration);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.ReleaseProfilingLockKHR([NativeTypeName("VkDevice")] DeviceHandle* device) =>
        (
            (delegate* unmanaged<DeviceHandle*, void>)(
                _slots[636] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[636] = nativeContext.LoadFunction(
                        "vkReleaseProfilingLockKHR",
                        "vulkan"
                    )
            )
        )(device);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseProfilingLockKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ReleaseProfilingLockKHR([NativeTypeName("VkDevice")] DeviceHandle* device) =>
        DllImport.ReleaseProfilingLockKHR(device);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.ReleaseProfilingLockKHR([NativeTypeName("VkDevice")] Ref<DeviceHandle> device)
    {
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).ReleaseProfilingLockKHR(__dsl_device);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_performance_query"],
        ImpliesSets = [
            "VK_KHR_performance_query+VK_KHR_get_physical_device_properties2",
            "VK_KHR_performance_query+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseProfilingLockKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ReleaseProfilingLockKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device
    ) => DllImport.ReleaseProfilingLockKHR(device);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ReleaseSwapchainImagesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkReleaseSwapchainImagesInfoEXT *")]
            ReleaseSwapchainImagesInfoEXT* pReleaseInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, ReleaseSwapchainImagesInfoEXT*, Result>)(
                _slots[637] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[637] = nativeContext.LoadFunction(
                        "vkReleaseSwapchainImagesEXT",
                        "vulkan"
                    )
            )
        )(device, pReleaseInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_swapchain_maintenance1"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleaseSwapchainImagesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkReleaseSwapchainImagesInfoEXT *")]
            ReleaseSwapchainImagesInfoEXT* pReleaseInfo
    ) => DllImport.ReleaseSwapchainImagesEXT(device, pReleaseInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ReleaseSwapchainImagesEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkReleaseSwapchainImagesInfoEXT *")]
            Ref<ReleaseSwapchainImagesInfoEXT> pReleaseInfo
    )
    {
        fixed (ReleaseSwapchainImagesInfoEXT* __dsl_pReleaseInfo = pReleaseInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).ReleaseSwapchainImagesEXT(__dsl_device, __dsl_pReleaseInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_swapchain_maintenance1"],
        ImpliesSets = [
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_KHR_get_physical_device_properties2",
            "VK_KHR_swapchain+VK_EXT_surface_maintenance1+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkReleaseSwapchainImagesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ReleaseSwapchainImagesEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkReleaseSwapchainImagesInfoEXT *")]
            Ref<ReleaseSwapchainImagesInfoEXT> pReleaseInfo
    ) => DllImport.ReleaseSwapchainImagesEXT(device, pReleaseInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ResetCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkCommandBufferResetFlags")] uint flags
    ) =>
        (
            (delegate* unmanaged<CommandBufferHandle*, uint, Result>)(
                _slots[638] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[638] = nativeContext.LoadFunction("vkResetCommandBuffer", "vulkan")
            )
        )(commandBuffer, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetCommandBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] CommandBufferHandle* commandBuffer,
        [NativeTypeName("VkCommandBufferResetFlags")] uint flags
    ) => DllImport.ResetCommandBuffer(commandBuffer, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ResetCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkCommandBufferResetFlags")] uint flags
    )
    {
        fixed (CommandBufferHandle* __dsl_commandBuffer = commandBuffer)
        {
            return (Result)((IVulkan)this).ResetCommandBuffer(__dsl_commandBuffer, flags);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkResetCommandBuffer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetCommandBuffer(
        [NativeTypeName("VkCommandBuffer")] Ref<CommandBufferHandle> commandBuffer,
        [NativeTypeName("VkCommandBufferResetFlags")] uint flags
    ) => DllImport.ResetCommandBuffer(commandBuffer, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ResetCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
        [NativeTypeName("VkCommandPoolResetFlags")] uint flags
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CommandPoolHandle*, uint, Result>)(
                _slots[639] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[639] = nativeContext.LoadFunction("vkResetCommandPool", "vulkan")
            )
        )(device, commandPool, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
        [NativeTypeName("VkCommandPoolResetFlags")] uint flags
    ) => DllImport.ResetCommandPool(device, commandPool, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ResetCommandPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
        [NativeTypeName("VkCommandPoolResetFlags")] uint flags
    )
    {
        fixed (CommandPoolHandle* __dsl_commandPool = commandPool)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).ResetCommandPool(__dsl_device, __dsl_commandPool, flags);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkResetCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetCommandPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
        [NativeTypeName("VkCommandPoolResetFlags")] uint flags
    ) => DllImport.ResetCommandPool(device, commandPool, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ResetDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle* descriptorPool,
        [NativeTypeName("VkDescriptorPoolResetFlags")] uint flags
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DescriptorPoolHandle*, uint, Result>)(
                _slots[640] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[640] = nativeContext.LoadFunction("vkResetDescriptorPool", "vulkan")
            )
        )(device, descriptorPool, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetDescriptorPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorPool")] DescriptorPoolHandle* descriptorPool,
        [NativeTypeName("VkDescriptorPoolResetFlags")] uint flags
    ) => DllImport.ResetDescriptorPool(device, descriptorPool, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ResetDescriptorPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorPool")] Ref<DescriptorPoolHandle> descriptorPool,
        [NativeTypeName("VkDescriptorPoolResetFlags")] uint flags
    )
    {
        fixed (DescriptorPoolHandle* __dsl_descriptorPool = descriptorPool)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).ResetDescriptorPool(__dsl_device, __dsl_descriptorPool, flags);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkResetDescriptorPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetDescriptorPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorPool")] Ref<DescriptorPoolHandle> descriptorPool,
        [NativeTypeName("VkDescriptorPoolResetFlags")] uint flags
    ) => DllImport.ResetDescriptorPool(device, descriptorPool, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ResetEvent(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkEvent")] EventHandle* @event
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, EventHandle*, Result>)(
                _slots[641] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[641] = nativeContext.LoadFunction("vkResetEvent", "vulkan")
            )
        )(device, @event);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetEvent(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkEvent")] EventHandle* @event
    ) => DllImport.ResetEvent(device, @event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ResetEvent(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event
    )
    {
        fixed (EventHandle* __dsl_event = @event)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).ResetEvent(__dsl_device, __dsl_event);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkResetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetEvent(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event
    ) => DllImport.ResetEvent(device, @event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ResetFences(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] FenceHandle** pFences
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, uint, FenceHandle**, Result>)(
                _slots[642] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[642] = nativeContext.LoadFunction("vkResetFences", "vulkan")
            )
        )(device, fenceCount, pFences);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetFences")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetFences(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] FenceHandle** pFences
    ) => DllImport.ResetFences(device, fenceCount, pFences);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.ResetFences(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] Ref2D<FenceHandle> pFences
    )
    {
        fixed (FenceHandle** __dsl_pFences = pFences)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).ResetFences(__dsl_device, fenceCount, __dsl_pFences);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkResetFences")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result ResetFences(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] Ref2D<FenceHandle> pFences
    ) => DllImport.ResetFences(device, fenceCount, pFences);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.ResetQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, QueryPoolHandle*, uint, uint, void>)(
                _slots[643] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[643] = nativeContext.LoadFunction("vkResetQueryPool", "vulkan")
            )
        )(device, queryPool, firstQuery, queryCount);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ResetQueryPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) => DllImport.ResetQueryPool(device, queryPool, firstQuery, queryCount);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.ResetQueryPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).ResetQueryPool(__dsl_device, __dsl_queryPool, firstQuery, queryCount);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkResetQueryPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ResetQueryPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) => DllImport.ResetQueryPool(device, queryPool, firstQuery, queryCount);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.ResetQueryPoolEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, QueryPoolHandle*, uint, uint, void>)(
                _slots[644] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[644] = nativeContext.LoadFunction("vkResetQueryPoolEXT", "vulkan")
            )
        )(device, queryPool, firstQuery, queryCount);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_query_reset"],
        ImpliesSets = [
            "VK_EXT_host_query_reset+VK_KHR_get_physical_device_properties2",
            "VK_EXT_host_query_reset+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkResetQueryPoolEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ResetQueryPoolEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkQueryPool")] QueryPoolHandle* queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) => DllImport.ResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.ResetQueryPoolEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    )
    {
        fixed (QueryPoolHandle* __dsl_queryPool = queryPool)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).ResetQueryPoolEXT(
                __dsl_device,
                __dsl_queryPool,
                firstQuery,
                queryCount
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_query_reset"],
        ImpliesSets = [
            "VK_EXT_host_query_reset+VK_KHR_get_physical_device_properties2",
            "VK_EXT_host_query_reset+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkResetQueryPoolEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ResetQueryPoolEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkQueryPool")] Ref<QueryPoolHandle> queryPool,
        [NativeTypeName("uint32_t")] uint firstQuery,
        [NativeTypeName("uint32_t")] uint queryCount
    ) => DllImport.ResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SetDebugUtilsObjectNameEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDebugUtilsObjectNameInfoEXT *")]
            DebugUtilsObjectNameInfoEXT* pNameInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DebugUtilsObjectNameInfoEXT*, Result>)(
                _slots[645] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[645] = nativeContext.LoadFunction(
                        "vkSetDebugUtilsObjectNameEXT",
                        "vulkan"
                    )
            )
        )(device, pNameInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectNameEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetDebugUtilsObjectNameEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDebugUtilsObjectNameInfoEXT *")]
            DebugUtilsObjectNameInfoEXT* pNameInfo
    ) => DllImport.SetDebugUtilsObjectNameEXT(device, pNameInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SetDebugUtilsObjectNameEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDebugUtilsObjectNameInfoEXT *")]
            Ref<DebugUtilsObjectNameInfoEXT> pNameInfo
    )
    {
        fixed (DebugUtilsObjectNameInfoEXT* __dsl_pNameInfo = pNameInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).SetDebugUtilsObjectNameEXT(__dsl_device, __dsl_pNameInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectNameEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetDebugUtilsObjectNameEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDebugUtilsObjectNameInfoEXT *")]
            Ref<DebugUtilsObjectNameInfoEXT> pNameInfo
    ) => DllImport.SetDebugUtilsObjectNameEXT(device, pNameInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SetDebugUtilsObjectTagEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDebugUtilsObjectTagInfoEXT *")]
            DebugUtilsObjectTagInfoEXT* pTagInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DebugUtilsObjectTagInfoEXT*, Result>)(
                _slots[646] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[646] = nativeContext.LoadFunction(
                        "vkSetDebugUtilsObjectTagEXT",
                        "vulkan"
                    )
            )
        )(device, pTagInfo);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectTagEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetDebugUtilsObjectTagEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkDebugUtilsObjectTagInfoEXT *")]
            DebugUtilsObjectTagInfoEXT* pTagInfo
    ) => DllImport.SetDebugUtilsObjectTagEXT(device, pTagInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SetDebugUtilsObjectTagEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDebugUtilsObjectTagInfoEXT *")]
            Ref<DebugUtilsObjectTagInfoEXT> pTagInfo
    )
    {
        fixed (DebugUtilsObjectTagInfoEXT* __dsl_pTagInfo = pTagInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).SetDebugUtilsObjectTagEXT(__dsl_device, __dsl_pTagInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetDebugUtilsObjectTagEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetDebugUtilsObjectTagEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkDebugUtilsObjectTagInfoEXT *")]
            Ref<DebugUtilsObjectTagInfoEXT> pTagInfo
    ) => DllImport.SetDebugUtilsObjectTagEXT(device, pTagInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.SetDeviceMemoryPriorityEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
        float priority
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DeviceMemoryHandle*, float, void>)(
                _slots[647] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[647] = nativeContext.LoadFunction(
                        "vkSetDeviceMemoryPriorityEXT",
                        "vulkan"
                    )
            )
        )(device, memory, priority);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pageable_device_local_memory"],
        ImpliesSets = ["VK_EXT_memory_priority"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetDeviceMemoryPriorityEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetDeviceMemoryPriorityEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory,
        float priority
    ) => DllImport.SetDeviceMemoryPriorityEXT(device, memory, priority);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.SetDeviceMemoryPriorityEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
        float priority
    )
    {
        fixed (DeviceMemoryHandle* __dsl_memory = memory)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).SetDeviceMemoryPriorityEXT(__dsl_device, __dsl_memory, priority);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_pageable_device_local_memory"],
        ImpliesSets = ["VK_EXT_memory_priority"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetDeviceMemoryPriorityEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetDeviceMemoryPriorityEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory,
        float priority
    ) => DllImport.SetDeviceMemoryPriorityEXT(device, memory, priority);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SetEvent(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkEvent")] EventHandle* @event
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, EventHandle*, Result>)(
                _slots[648] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[648] = nativeContext.LoadFunction("vkSetEvent", "vulkan")
            )
        )(device, @event);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetEvent(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkEvent")] EventHandle* @event
    ) => DllImport.SetEvent(device, @event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SetEvent(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event
    )
    {
        fixed (EventHandle* __dsl_event = @event)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).SetEvent(__dsl_device, __dsl_event);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetEvent(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkEvent")] Ref<EventHandle> @event
    ) => DllImport.SetEvent(device, @event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.SetHdrMetadataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainKHR *")] SwapchainKHRHandle** pSwapchains,
        [NativeTypeName("const VkHdrMetadataEXT *")] HdrMetadataEXT* pMetadata
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, uint, SwapchainKHRHandle**, HdrMetadataEXT*, void>)(
                _slots[649] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[649] = nativeContext.LoadFunction("vkSetHdrMetadataEXT", "vulkan")
            )
        )(device, swapchainCount, pSwapchains, pMetadata);

    [SupportedApiProfile("vulkan", ["VK_EXT_hdr_metadata"], ImpliesSets = ["VK_KHR_swapchain"])]
    [NativeFunction("vulkan", EntryPoint = "vkSetHdrMetadataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetHdrMetadataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainKHR *")] SwapchainKHRHandle** pSwapchains,
        [NativeTypeName("const VkHdrMetadataEXT *")] HdrMetadataEXT* pMetadata
    ) => DllImport.SetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.SetHdrMetadataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainKHR *")] Ref2D<SwapchainKHRHandle> pSwapchains,
        [NativeTypeName("const VkHdrMetadataEXT *")] Ref<HdrMetadataEXT> pMetadata
    )
    {
        fixed (HdrMetadataEXT* __dsl_pMetadata = pMetadata)
        fixed (SwapchainKHRHandle** __dsl_pSwapchains = pSwapchains)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).SetHdrMetadataEXT(
                __dsl_device,
                swapchainCount,
                __dsl_pSwapchains,
                __dsl_pMetadata
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_hdr_metadata"], ImpliesSets = ["VK_KHR_swapchain"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetHdrMetadataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetHdrMetadataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint swapchainCount,
        [NativeTypeName("const VkSwapchainKHR *")] Ref2D<SwapchainKHRHandle> pSwapchains,
        [NativeTypeName("const VkHdrMetadataEXT *")] Ref<HdrMetadataEXT> pMetadata
    ) => DllImport.SetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.SetLatencyMarkerNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("const VkSetLatencyMarkerInfoNV *")]
            SetLatencyMarkerInfoNV* pLatencyMarkerInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SwapchainKHRHandle*,
                SetLatencyMarkerInfoNV*,
                void>)(
                _slots[650] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[650] = nativeContext.LoadFunction("vkSetLatencyMarkerNV", "vulkan")
            )
        )(device, swapchain, pLatencyMarkerInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetLatencyMarkerNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetLatencyMarkerNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("const VkSetLatencyMarkerInfoNV *")]
            SetLatencyMarkerInfoNV* pLatencyMarkerInfo
    ) => DllImport.SetLatencyMarkerNV(device, swapchain, pLatencyMarkerInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.SetLatencyMarkerNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("const VkSetLatencyMarkerInfoNV *")]
            Ref<SetLatencyMarkerInfoNV> pLatencyMarkerInfo
    )
    {
        fixed (SetLatencyMarkerInfoNV* __dsl_pLatencyMarkerInfo = pLatencyMarkerInfo)
        fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).SetLatencyMarkerNV(
                __dsl_device,
                __dsl_swapchain,
                __dsl_pLatencyMarkerInfo
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetLatencyMarkerNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetLatencyMarkerNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("const VkSetLatencyMarkerInfoNV *")]
            Ref<SetLatencyMarkerInfoNV> pLatencyMarkerInfo
    ) => DllImport.SetLatencyMarkerNV(device, swapchain, pLatencyMarkerInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SetLatencySleepModeNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("const VkLatencySleepModeInfoNV *")] LatencySleepModeInfoNV* pSleepModeInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                SwapchainKHRHandle*,
                LatencySleepModeInfoNV*,
                Result>)(
                _slots[651] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[651] = nativeContext.LoadFunction("vkSetLatencySleepModeNV", "vulkan")
            )
        )(device, swapchain, pSleepModeInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetLatencySleepModeNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetLatencySleepModeNV(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("const VkLatencySleepModeInfoNV *")] LatencySleepModeInfoNV* pSleepModeInfo
    ) => DllImport.SetLatencySleepModeNV(device, swapchain, pSleepModeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SetLatencySleepModeNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("const VkLatencySleepModeInfoNV *")]
            Ref<LatencySleepModeInfoNV> pSleepModeInfo
    )
    {
        fixed (LatencySleepModeInfoNV* __dsl_pSleepModeInfo = pSleepModeInfo)
        fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).SetLatencySleepModeNV(
                    __dsl_device,
                    __dsl_swapchain,
                    __dsl_pSleepModeInfo
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_NV_low_latency2"],
        ImpliesSets = [
            "VK_NV_low_latency2+VK_KHR_timeline_semaphore",
            "VK_NV_low_latency2+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetLatencySleepModeNV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetLatencySleepModeNV(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("const VkLatencySleepModeInfoNV *")]
            Ref<LatencySleepModeInfoNV> pSleepModeInfo
    ) => DllImport.SetLatencySleepModeNV(device, swapchain, pSleepModeInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.SetLocalDimmingAMD(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapChain,
        [NativeTypeName("VkBool32")] uint localDimmingEnable
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SwapchainKHRHandle*, uint, void>)(
                _slots[652] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[652] = nativeContext.LoadFunction("vkSetLocalDimmingAMD", "vulkan")
            )
        )(device, swapChain, localDimmingEnable);

    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_display_native_hdr"],
        ImpliesSets = [
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetLocalDimmingAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetLocalDimmingAMD(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapChain,
        [NativeTypeName("VkBool32")] uint localDimmingEnable
    ) => DllImport.SetLocalDimmingAMD(device, swapChain, localDimmingEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.SetLocalDimmingAMD(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapChain,
        [NativeTypeName("VkBool32")] uint localDimmingEnable
    )
    {
        fixed (SwapchainKHRHandle* __dsl_swapChain = swapChain)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).SetLocalDimmingAMD(__dsl_device, __dsl_swapChain, localDimmingEnable);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_AMD_display_native_hdr"],
        ImpliesSets = [
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_KHR_get_physical_device_properties2",
            "VK_KHR_get_surface_capabilities2+VK_KHR_swapchain+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetLocalDimmingAMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetLocalDimmingAMD(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapChain,
        [NativeTypeName("VkBool32")] uint localDimmingEnable
    ) => DllImport.SetLocalDimmingAMD(device, swapChain, localDimmingEnable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SetPrivateData(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
        [NativeTypeName("uint64_t")] ulong data
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ObjectType,
                ulong,
                PrivateDataSlotHandle*,
                ulong,
                Result>)(
                _slots[653] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[653] = nativeContext.LoadFunction("vkSetPrivateData", "vulkan")
            )
        )(device, objectType, objectHandle, privateDataSlot, data);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [NativeFunction("vulkan", EntryPoint = "vkSetPrivateData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetPrivateData(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
        [NativeTypeName("uint64_t")] ulong data
    ) => DllImport.SetPrivateData(device, objectType, objectHandle, privateDataSlot, data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SetPrivateData(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
        [NativeTypeName("uint64_t")] ulong data
    )
    {
        fixed (PrivateDataSlotHandle* __dsl_privateDataSlot = privateDataSlot)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).SetPrivateData(
                    __dsl_device,
                    objectType,
                    objectHandle,
                    __dsl_privateDataSlot,
                    data
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_3", "VK_VERSION_1_4"], MinVersion = "1.3")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetPrivateData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetPrivateData(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
        [NativeTypeName("uint64_t")] ulong data
    ) => DllImport.SetPrivateData(device, objectType, objectHandle, privateDataSlot, data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SetPrivateDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
        [NativeTypeName("uint64_t")] ulong data
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                ObjectType,
                ulong,
                PrivateDataSlotHandle*,
                ulong,
                Result>)(
                _slots[654] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[654] = nativeContext.LoadFunction("vkSetPrivateDataEXT", "vulkan")
            )
        )(device, objectType, objectHandle, privateDataSlot, data);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSetPrivateDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetPrivateDataEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] PrivateDataSlotHandle* privateDataSlot,
        [NativeTypeName("uint64_t")] ulong data
    ) => DllImport.SetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SetPrivateDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
        [NativeTypeName("uint64_t")] ulong data
    )
    {
        fixed (PrivateDataSlotHandle* __dsl_privateDataSlot = privateDataSlot)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).SetPrivateDataEXT(
                    __dsl_device,
                    objectType,
                    objectHandle,
                    __dsl_privateDataSlot,
                    data
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_private_data"],
        ImpliesSets = [
            "VK_EXT_private_data+VK_KHR_get_physical_device_properties2",
            "VK_EXT_private_data+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSetPrivateDataEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SetPrivateDataEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        ObjectType objectType,
        [NativeTypeName("uint64_t")] ulong objectHandle,
        [NativeTypeName("VkPrivateDataSlot")] Ref<PrivateDataSlotHandle> privateDataSlot,
        [NativeTypeName("uint64_t")] ulong data
    ) => DllImport.SetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SignalSemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] SemaphoreSignalInfo* pSignalInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SemaphoreSignalInfo*, Result>)(
                _slots[655] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[655] = nativeContext.LoadFunction("vkSignalSemaphore", "vulkan")
            )
        )(device, pSignalInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SignalSemaphore(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] SemaphoreSignalInfo* pSignalInfo
    ) => DllImport.SignalSemaphore(device, pSignalInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SignalSemaphore(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] Ref<SemaphoreSignalInfo> pSignalInfo
    )
    {
        fixed (SemaphoreSignalInfo* __dsl_pSignalInfo = pSignalInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).SignalSemaphore(__dsl_device, __dsl_pSignalInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SignalSemaphore(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] Ref<SemaphoreSignalInfo> pSignalInfo
    ) => DllImport.SignalSemaphore(device, pSignalInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SignalSemaphoreKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] SemaphoreSignalInfo* pSignalInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SemaphoreSignalInfo*, Result>)(
                _slots[656] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[656] = nativeContext.LoadFunction("vkSignalSemaphoreKHR", "vulkan")
            )
        )(device, pSignalInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphoreKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SignalSemaphoreKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] SemaphoreSignalInfo* pSignalInfo
    ) => DllImport.SignalSemaphoreKHR(device, pSignalInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.SignalSemaphoreKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] Ref<SemaphoreSignalInfo> pSignalInfo
    )
    {
        fixed (SemaphoreSignalInfo* __dsl_pSignalInfo = pSignalInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).SignalSemaphoreKHR(__dsl_device, __dsl_pSignalInfo);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSignalSemaphoreKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result SignalSemaphoreKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSemaphoreSignalInfo *")] Ref<SemaphoreSignalInfo> pSignalInfo
    ) => DllImport.SignalSemaphoreKHR(device, pSignalInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.SubmitDebugUtilsMessageEXT(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("VkDebugUtilsMessageSeverityFlagBitsEXT")]
            DebugUtilsMessageSeverityFlagsEXT messageSeverity,
        [NativeTypeName("VkDebugUtilsMessageTypeFlagsEXT")] uint messageTypes,
        [NativeTypeName("const VkDebugUtilsMessengerCallbackDataEXT *")]
            DebugUtilsMessengerCallbackDataEXT* pCallbackData
    ) =>
        (
            (delegate* unmanaged<
                InstanceHandle*,
                DebugUtilsMessageSeverityFlagsEXT,
                uint,
                DebugUtilsMessengerCallbackDataEXT*,
                void>)(
                _slots[657] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[657] = nativeContext.LoadFunction(
                        "vkSubmitDebugUtilsMessageEXT",
                        "vulkan"
                    )
            )
        )(instance, messageSeverity, messageTypes, pCallbackData);

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [NativeFunction("vulkan", EntryPoint = "vkSubmitDebugUtilsMessageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SubmitDebugUtilsMessageEXT(
        [NativeTypeName("VkInstance")] InstanceHandle* instance,
        [NativeTypeName("VkDebugUtilsMessageSeverityFlagBitsEXT")]
            DebugUtilsMessageSeverityFlagsEXT messageSeverity,
        [NativeTypeName("VkDebugUtilsMessageTypeFlagsEXT")] uint messageTypes,
        [NativeTypeName("const VkDebugUtilsMessengerCallbackDataEXT *")]
            DebugUtilsMessengerCallbackDataEXT* pCallbackData
    ) =>
        DllImport.SubmitDebugUtilsMessageEXT(
            instance,
            messageSeverity,
            messageTypes,
            pCallbackData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.SubmitDebugUtilsMessageEXT(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("VkDebugUtilsMessageSeverityFlagBitsEXT")]
            DebugUtilsMessageSeverityFlagsEXT messageSeverity,
        [NativeTypeName("VkDebugUtilsMessageTypeFlagsEXT")] uint messageTypes,
        [NativeTypeName("const VkDebugUtilsMessengerCallbackDataEXT *")]
            Ref<DebugUtilsMessengerCallbackDataEXT> pCallbackData
    )
    {
        fixed (DebugUtilsMessengerCallbackDataEXT* __dsl_pCallbackData = pCallbackData)
        fixed (InstanceHandle* __dsl_instance = instance)
        {
            ((IVulkan)this).SubmitDebugUtilsMessageEXT(
                __dsl_instance,
                messageSeverity,
                messageTypes,
                __dsl_pCallbackData
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_EXT_debug_utils"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkSubmitDebugUtilsMessageEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SubmitDebugUtilsMessageEXT(
        [NativeTypeName("VkInstance")] Ref<InstanceHandle> instance,
        [NativeTypeName("VkDebugUtilsMessageSeverityFlagBitsEXT")]
            DebugUtilsMessageSeverityFlagsEXT messageSeverity,
        [NativeTypeName("VkDebugUtilsMessageTypeFlagsEXT")] uint messageTypes,
        [NativeTypeName("const VkDebugUtilsMessengerCallbackDataEXT *")]
            Ref<DebugUtilsMessengerCallbackDataEXT> pCallbackData
    ) =>
        DllImport.SubmitDebugUtilsMessageEXT(
            instance,
            messageSeverity,
            messageTypes,
            pCallbackData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.TransitionImageLayout(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            HostImageLayoutTransitionInfo* pTransitions
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, uint, HostImageLayoutTransitionInfo*, Result>)(
                _slots[658] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[658] = nativeContext.LoadFunction("vkTransitionImageLayout", "vulkan")
            )
        )(device, transitionCount, pTransitions);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result TransitionImageLayout(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            HostImageLayoutTransitionInfo* pTransitions
    ) => DllImport.TransitionImageLayout(device, transitionCount, pTransitions);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.TransitionImageLayout(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            Ref<HostImageLayoutTransitionInfo> pTransitions
    )
    {
        fixed (HostImageLayoutTransitionInfo* __dsl_pTransitions = pTransitions)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).TransitionImageLayout(
                    __dsl_device,
                    transitionCount,
                    __dsl_pTransitions
                );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result TransitionImageLayout(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            Ref<HostImageLayoutTransitionInfo> pTransitions
    ) => DllImport.TransitionImageLayout(device, transitionCount, pTransitions);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.TransitionImageLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            HostImageLayoutTransitionInfo* pTransitions
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, uint, HostImageLayoutTransitionInfo*, Result>)(
                _slots[659] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[659] = nativeContext.LoadFunction(
                        "vkTransitionImageLayoutEXT",
                        "vulkan"
                    )
            )
        )(device, transitionCount, pTransitions);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result TransitionImageLayoutEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            HostImageLayoutTransitionInfo* pTransitions
    ) => DllImport.TransitionImageLayoutEXT(device, transitionCount, pTransitions);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.TransitionImageLayoutEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            Ref<HostImageLayoutTransitionInfo> pTransitions
    )
    {
        fixed (HostImageLayoutTransitionInfo* __dsl_pTransitions = pTransitions)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).TransitionImageLayoutEXT(
                    __dsl_device,
                    transitionCount,
                    __dsl_pTransitions
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_host_image_copy"],
        ImpliesSets = [
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_KHR_get_physical_device_properties2",
            "VK_KHR_copy_commands2+VK_KHR_format_feature_flags2+VK_VERSION_1_1",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkTransitionImageLayoutEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result TransitionImageLayoutEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint transitionCount,
        [NativeTypeName("const VkHostImageLayoutTransitionInfo *")]
            Ref<HostImageLayoutTransitionInfo> pTransitions
    ) => DllImport.TransitionImageLayoutEXT(device, transitionCount, pTransitions);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.TrimCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
        [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CommandPoolHandle*, uint, void>)(
                _slots[660] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[660] = nativeContext.LoadFunction("vkTrimCommandPool", "vulkan")
            )
        )(device, commandPool, flags);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkTrimCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void TrimCommandPool(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
        [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
    ) => DllImport.TrimCommandPool(device, commandPool, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.TrimCommandPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
        [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
    )
    {
        fixed (CommandPoolHandle* __dsl_commandPool = commandPool)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).TrimCommandPool(__dsl_device, __dsl_commandPool, flags);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkTrimCommandPool")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void TrimCommandPool(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
        [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
    ) => DllImport.TrimCommandPool(device, commandPool, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.TrimCommandPoolKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
        [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, CommandPoolHandle*, uint, void>)(
                _slots[661] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[661] = nativeContext.LoadFunction("vkTrimCommandPoolKHR", "vulkan")
            )
        )(device, commandPool, flags);

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance1"])]
    [NativeFunction("vulkan", EntryPoint = "vkTrimCommandPoolKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void TrimCommandPoolKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkCommandPool")] CommandPoolHandle* commandPool,
        [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
    ) => DllImport.TrimCommandPoolKHR(device, commandPool, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.TrimCommandPoolKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
        [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
    )
    {
        fixed (CommandPoolHandle* __dsl_commandPool = commandPool)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).TrimCommandPoolKHR(__dsl_device, __dsl_commandPool, flags);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_maintenance1"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkTrimCommandPoolKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void TrimCommandPoolKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkCommandPool")] Ref<CommandPoolHandle> commandPool,
        [NativeTypeName("VkCommandPoolTrimFlags")] uint flags
    ) => DllImport.TrimCommandPoolKHR(device, commandPool, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UninitializePerformanceApiIntel(
        [NativeTypeName("VkDevice")] DeviceHandle* device
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, void>)(
                _slots[662] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[662] = nativeContext.LoadFunction(
                        "vkUninitializePerformanceApiINTEL",
                        "vulkan"
                    )
            )
        )(device);

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [NativeFunction("vulkan", EntryPoint = "vkUninitializePerformanceApiINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UninitializePerformanceApiIntel(
        [NativeTypeName("VkDevice")] DeviceHandle* device
    ) => DllImport.UninitializePerformanceApiIntel(device);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UninitializePerformanceApiIntel(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device
    )
    {
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).UninitializePerformanceApiIntel(__dsl_device);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_INTEL_performance_query"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUninitializePerformanceApiINTEL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UninitializePerformanceApiIntel(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device
    ) => DllImport.UninitializePerformanceApiIntel(device);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UnmapMemory(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, DeviceMemoryHandle*, void>)(
                _slots[663] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[663] = nativeContext.LoadFunction("vkUnmapMemory", "vulkan")
            )
        )(device, memory);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnmapMemory(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDeviceMemory")] DeviceMemoryHandle* memory
    ) => DllImport.UnmapMemory(device, memory);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UnmapMemory(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory
    )
    {
        fixed (DeviceMemoryHandle* __dsl_memory = memory)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).UnmapMemory(__dsl_device, __dsl_memory);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnmapMemory(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDeviceMemory")] Ref<DeviceMemoryHandle> memory
    ) => DllImport.UnmapMemory(device, memory);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.UnmapMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] MemoryUnmapInfo* pMemoryUnmapInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, MemoryUnmapInfo*, Result>)(
                _slots[664] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[664] = nativeContext.LoadFunction("vkUnmapMemory2", "vulkan")
            )
        )(device, pMemoryUnmapInfo);

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result UnmapMemory2(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] MemoryUnmapInfo* pMemoryUnmapInfo
    ) => DllImport.UnmapMemory2(device, pMemoryUnmapInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.UnmapMemory2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] Ref<MemoryUnmapInfo> pMemoryUnmapInfo
    )
    {
        fixed (MemoryUnmapInfo* __dsl_pMemoryUnmapInfo = pMemoryUnmapInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).UnmapMemory2(__dsl_device, __dsl_pMemoryUnmapInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_VERSION_1_4"], MinVersion = "1.4")]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result UnmapMemory2(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] Ref<MemoryUnmapInfo> pMemoryUnmapInfo
    ) => DllImport.UnmapMemory2(device, pMemoryUnmapInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.UnmapMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] MemoryUnmapInfo* pMemoryUnmapInfo
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, MemoryUnmapInfo*, Result>)(
                _slots[665] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[665] = nativeContext.LoadFunction("vkUnmapMemory2KHR", "vulkan")
            )
        )(device, pMemoryUnmapInfo);

    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result UnmapMemory2KHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] MemoryUnmapInfo* pMemoryUnmapInfo
    ) => DllImport.UnmapMemory2KHR(device, pMemoryUnmapInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.UnmapMemory2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] Ref<MemoryUnmapInfo> pMemoryUnmapInfo
    )
    {
        fixed (MemoryUnmapInfo* __dsl_pMemoryUnmapInfo = pMemoryUnmapInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).UnmapMemory2KHR(__dsl_device, __dsl_pMemoryUnmapInfo);
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_map_memory2"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUnmapMemory2KHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result UnmapMemory2KHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkMemoryUnmapInfo *")] Ref<MemoryUnmapInfo> pMemoryUnmapInfo
    ) => DllImport.UnmapMemory2KHR(device, pMemoryUnmapInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UpdateDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites,
        [NativeTypeName("uint32_t")] uint descriptorCopyCount,
        [NativeTypeName("const VkCopyDescriptorSet *")] CopyDescriptorSet* pDescriptorCopies
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                uint,
                WriteDescriptorSet*,
                uint,
                CopyDescriptorSet*,
                void>)(
                _slots[666] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[666] = nativeContext.LoadFunction("vkUpdateDescriptorSets", "vulkan")
            )
        )(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateDescriptorSets(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] WriteDescriptorSet* pDescriptorWrites,
        [NativeTypeName("uint32_t")] uint descriptorCopyCount,
        [NativeTypeName("const VkCopyDescriptorSet *")] CopyDescriptorSet* pDescriptorCopies
    ) =>
        DllImport.UpdateDescriptorSets(
            device,
            descriptorWriteCount,
            pDescriptorWrites,
            descriptorCopyCount,
            pDescriptorCopies
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UpdateDescriptorSets(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] Ref<WriteDescriptorSet> pDescriptorWrites,
        [NativeTypeName("uint32_t")] uint descriptorCopyCount,
        [NativeTypeName("const VkCopyDescriptorSet *")] Ref<CopyDescriptorSet> pDescriptorCopies
    )
    {
        fixed (CopyDescriptorSet* __dsl_pDescriptorCopies = pDescriptorCopies)
        fixed (WriteDescriptorSet* __dsl_pDescriptorWrites = pDescriptorWrites)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).UpdateDescriptorSets(
                __dsl_device,
                descriptorWriteCount,
                __dsl_pDescriptorWrites,
                descriptorCopyCount,
                __dsl_pDescriptorCopies
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSets")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateDescriptorSets(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint descriptorWriteCount,
        [NativeTypeName("const VkWriteDescriptorSet *")] Ref<WriteDescriptorSet> pDescriptorWrites,
        [NativeTypeName("uint32_t")] uint descriptorCopyCount,
        [NativeTypeName("const VkCopyDescriptorSet *")] Ref<CopyDescriptorSet> pDescriptorCopies
    ) =>
        DllImport.UpdateDescriptorSets(
            device,
            descriptorWriteCount,
            pDescriptorWrites,
            descriptorCopyCount,
            pDescriptorCopies
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UpdateDescriptorSetWithTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle* descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
        [NativeTypeName("const void *")] void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DescriptorSetHandle*,
                DescriptorUpdateTemplateHandle*,
                void*,
                void>)(
                _slots[667] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[667] = nativeContext.LoadFunction(
                        "vkUpdateDescriptorSetWithTemplate",
                        "vulkan"
                    )
            )
        )(device, descriptorSet, descriptorUpdateTemplate, pData);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateDescriptorSetWithTemplate(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle* descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
        [NativeTypeName("const void *")] void* pData
    ) =>
        DllImport.UpdateDescriptorSetWithTemplate(
            device,
            descriptorSet,
            descriptorUpdateTemplate,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UpdateDescriptorSetWithTemplate(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorSet")] Ref<DescriptorSetHandle> descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
        [NativeTypeName("const void *")] Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (
            DescriptorUpdateTemplateHandle* __dsl_descriptorUpdateTemplate =
                descriptorUpdateTemplate
        )
        fixed (DescriptorSetHandle* __dsl_descriptorSet = descriptorSet)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).UpdateDescriptorSetWithTemplate(
                __dsl_device,
                __dsl_descriptorSet,
                __dsl_descriptorUpdateTemplate,
                __dsl_pData
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.1"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateDescriptorSetWithTemplate(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorSet")] Ref<DescriptorSetHandle> descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
        [NativeTypeName("const void *")] Ref pData
    ) =>
        DllImport.UpdateDescriptorSetWithTemplate(
            device,
            descriptorSet,
            descriptorUpdateTemplate,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UpdateDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle* descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
        [NativeTypeName("const void *")] void* pData
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                DescriptorSetHandle*,
                DescriptorUpdateTemplateHandle*,
                void*,
                void>)(
                _slots[668] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[668] = nativeContext.LoadFunction(
                        "vkUpdateDescriptorSetWithTemplateKHR",
                        "vulkan"
                    )
            )
        )(device, descriptorSet, descriptorUpdateTemplate, pData);

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkDescriptorSet")] DescriptorSetHandle* descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            DescriptorUpdateTemplateHandle* descriptorUpdateTemplate,
        [NativeTypeName("const void *")] void* pData
    ) =>
        DllImport.UpdateDescriptorSetWithTemplateKHR(
            device,
            descriptorSet,
            descriptorUpdateTemplate,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UpdateDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorSet")] Ref<DescriptorSetHandle> descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
        [NativeTypeName("const void *")] Ref pData
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (
            DescriptorUpdateTemplateHandle* __dsl_descriptorUpdateTemplate =
                descriptorUpdateTemplate
        )
        fixed (DescriptorSetHandle* __dsl_descriptorSet = descriptorSet)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).UpdateDescriptorSetWithTemplateKHR(
                __dsl_device,
                __dsl_descriptorSet,
                __dsl_descriptorUpdateTemplate,
                __dsl_pData
            );
        }
    }

    [SupportedApiProfile("vulkan", ["VK_KHR_descriptor_update_template"])]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateDescriptorSetWithTemplateKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateDescriptorSetWithTemplateKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkDescriptorSet")] Ref<DescriptorSetHandle> descriptorSet,
        [NativeTypeName("VkDescriptorUpdateTemplate")]
            Ref<DescriptorUpdateTemplateHandle> descriptorUpdateTemplate,
        [NativeTypeName("const void *")] Ref pData
    ) =>
        DllImport.UpdateDescriptorSetWithTemplateKHR(
            device,
            descriptorSet,
            descriptorUpdateTemplate,
            pData
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UpdateIndirectExecutionSetPipelineEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle* indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
            WriteIndirectExecutionSetPipelineEXT* pExecutionSetWrites
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                IndirectExecutionSetEXTHandle*,
                uint,
                WriteIndirectExecutionSetPipelineEXT*,
                void>)(
                _slots[669] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[669] = nativeContext.LoadFunction(
                        "vkUpdateIndirectExecutionSetPipelineEXT",
                        "vulkan"
                    )
            )
        )(device, indirectExecutionSet, executionSetWriteCount, pExecutionSetWrites);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateIndirectExecutionSetPipelineEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle* indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
            WriteIndirectExecutionSetPipelineEXT* pExecutionSetWrites
    ) =>
        DllImport.UpdateIndirectExecutionSetPipelineEXT(
            device,
            indirectExecutionSet,
            executionSetWriteCount,
            pExecutionSetWrites
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UpdateIndirectExecutionSetPipelineEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
            Ref<WriteIndirectExecutionSetPipelineEXT> pExecutionSetWrites
    )
    {
        fixed (
            WriteIndirectExecutionSetPipelineEXT* __dsl_pExecutionSetWrites = pExecutionSetWrites
        )
        fixed (IndirectExecutionSetEXTHandle* __dsl_indirectExecutionSet = indirectExecutionSet)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).UpdateIndirectExecutionSetPipelineEXT(
                __dsl_device,
                __dsl_indirectExecutionSet,
                executionSetWriteCount,
                __dsl_pExecutionSetWrites
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateIndirectExecutionSetPipelineEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
            Ref<WriteIndirectExecutionSetPipelineEXT> pExecutionSetWrites
    ) =>
        DllImport.UpdateIndirectExecutionSetPipelineEXT(
            device,
            indirectExecutionSet,
            executionSetWriteCount,
            pExecutionSetWrites
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UpdateIndirectExecutionSetPipelineEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
        [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
            WriteIndirectExecutionSetPipelineEXT pExecutionSetWrites
    )
    {
        fixed (IndirectExecutionSetEXTHandle* __dsl_indirectExecutionSet = indirectExecutionSet)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).UpdateIndirectExecutionSetPipelineEXT(
                __dsl_device,
                __dsl_indirectExecutionSet,
                1,
                (WriteIndirectExecutionSetPipelineEXT*)&pExecutionSetWrites
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetPipelineEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateIndirectExecutionSetPipelineEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
        [NativeTypeName("const VkWriteIndirectExecutionSetPipelineEXT *")]
            WriteIndirectExecutionSetPipelineEXT pExecutionSetWrites
    ) =>
        DllImport.UpdateIndirectExecutionSetPipelineEXT(
            device,
            indirectExecutionSet,
            pExecutionSetWrites
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UpdateIndirectExecutionSetShaderEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle* indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
            WriteIndirectExecutionSetShaderEXT* pExecutionSetWrites
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                IndirectExecutionSetEXTHandle*,
                uint,
                WriteIndirectExecutionSetShaderEXT*,
                void>)(
                _slots[670] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[670] = nativeContext.LoadFunction(
                        "vkUpdateIndirectExecutionSetShaderEXT",
                        "vulkan"
                    )
            )
        )(device, indirectExecutionSet, executionSetWriteCount, pExecutionSetWrites);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateIndirectExecutionSetShaderEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            IndirectExecutionSetEXTHandle* indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
            WriteIndirectExecutionSetShaderEXT* pExecutionSetWrites
    ) =>
        DllImport.UpdateIndirectExecutionSetShaderEXT(
            device,
            indirectExecutionSet,
            executionSetWriteCount,
            pExecutionSetWrites
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UpdateIndirectExecutionSetShaderEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
            Ref<WriteIndirectExecutionSetShaderEXT> pExecutionSetWrites
    )
    {
        fixed (WriteIndirectExecutionSetShaderEXT* __dsl_pExecutionSetWrites = pExecutionSetWrites)
        fixed (IndirectExecutionSetEXTHandle* __dsl_indirectExecutionSet = indirectExecutionSet)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).UpdateIndirectExecutionSetShaderEXT(
                __dsl_device,
                __dsl_indirectExecutionSet,
                executionSetWriteCount,
                __dsl_pExecutionSetWrites
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateIndirectExecutionSetShaderEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
        [NativeTypeName("uint32_t")] uint executionSetWriteCount,
        [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
            Ref<WriteIndirectExecutionSetShaderEXT> pExecutionSetWrites
    ) =>
        DllImport.UpdateIndirectExecutionSetShaderEXT(
            device,
            indirectExecutionSet,
            executionSetWriteCount,
            pExecutionSetWrites
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void IVulkan.UpdateIndirectExecutionSetShaderEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
        [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
            WriteIndirectExecutionSetShaderEXT pExecutionSetWrites
    )
    {
        fixed (IndirectExecutionSetEXTHandle* __dsl_indirectExecutionSet = indirectExecutionSet)
        fixed (DeviceHandle* __dsl_device = device)
        {
            ((IVulkan)this).UpdateIndirectExecutionSetShaderEXT(
                __dsl_device,
                __dsl_indirectExecutionSet,
                1,
                (WriteIndirectExecutionSetShaderEXT*)&pExecutionSetWrites
            );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_device_generated_commands"],
        ImpliesSets = [
            "VK_KHR_maintenance5+VK_KHR_buffer_device_address",
            "VK_KHR_maintenance5+VK_VERSION_1_2",
            "VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateIndirectExecutionSetShaderEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateIndirectExecutionSetShaderEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkIndirectExecutionSetEXT")]
            Ref<IndirectExecutionSetEXTHandle> indirectExecutionSet,
        [NativeTypeName("const VkWriteIndirectExecutionSetShaderEXT *")]
            WriteIndirectExecutionSetShaderEXT pExecutionSetWrites
    ) =>
        DllImport.UpdateIndirectExecutionSetShaderEXT(
            device,
            indirectExecutionSet,
            pExecutionSetWrites
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.UpdateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            VideoSessionParametersKHRHandle* videoSessionParameters,
        [NativeTypeName("const VkVideoSessionParametersUpdateInfoKHR *")]
            VideoSessionParametersUpdateInfoKHR* pUpdateInfo
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                VideoSessionParametersKHRHandle*,
                VideoSessionParametersUpdateInfoKHR*,
                Result>)(
                _slots[671] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[671] = nativeContext.LoadFunction(
                        "vkUpdateVideoSessionParametersKHR",
                        "vulkan"
                    )
            )
        )(device, videoSessionParameters, pUpdateInfo);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result UpdateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            VideoSessionParametersKHRHandle* videoSessionParameters,
        [NativeTypeName("const VkVideoSessionParametersUpdateInfoKHR *")]
            VideoSessionParametersUpdateInfoKHR* pUpdateInfo
    ) => DllImport.UpdateVideoSessionParametersKHR(device, videoSessionParameters, pUpdateInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.UpdateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            Ref<VideoSessionParametersKHRHandle> videoSessionParameters,
        [NativeTypeName("const VkVideoSessionParametersUpdateInfoKHR *")]
            Ref<VideoSessionParametersUpdateInfoKHR> pUpdateInfo
    )
    {
        fixed (VideoSessionParametersUpdateInfoKHR* __dsl_pUpdateInfo = pUpdateInfo)
        fixed (
            VideoSessionParametersKHRHandle* __dsl_videoSessionParameters = videoSessionParameters
        )
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).UpdateVideoSessionParametersKHR(
                    __dsl_device,
                    __dsl_videoSessionParameters,
                    __dsl_pUpdateInfo
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_video_queue"],
        ImpliesSets = ["VK_VERSION_1_1+VK_KHR_synchronization2", "VK_VERSION_1_3"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkUpdateVideoSessionParametersKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result UpdateVideoSessionParametersKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkVideoSessionParametersKHR")]
            Ref<VideoSessionParametersKHRHandle> videoSessionParameters,
        [NativeTypeName("const VkVideoSessionParametersUpdateInfoKHR *")]
            Ref<VideoSessionParametersUpdateInfoKHR> pUpdateInfo
    ) => DllImport.UpdateVideoSessionParametersKHR(device, videoSessionParameters, pUpdateInfo);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.WaitForFences(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] FenceHandle** pFences,
        [NativeTypeName("VkBool32")] uint waitAll,
        [NativeTypeName("uint64_t")] ulong timeout
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, uint, FenceHandle**, uint, ulong, Result>)(
                _slots[672] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[672] = nativeContext.LoadFunction("vkWaitForFences", "vulkan")
            )
        )(device, fenceCount, pFences, waitAll, timeout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWaitForFences")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitForFences(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] FenceHandle** pFences,
        [NativeTypeName("VkBool32")] uint waitAll,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => DllImport.WaitForFences(device, fenceCount, pFences, waitAll, timeout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.WaitForFences(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] Ref2D<FenceHandle> pFences,
        [NativeTypeName("VkBool32")] uint waitAll,
        [NativeTypeName("uint64_t")] ulong timeout
    )
    {
        fixed (FenceHandle** __dsl_pFences = pFences)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).WaitForFences(
                    __dsl_device,
                    fenceCount,
                    __dsl_pFences,
                    waitAll,
                    timeout
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.0"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWaitForFences")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitForFences(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint fenceCount,
        [NativeTypeName("const VkFence *")] Ref2D<FenceHandle> pFences,
        [NativeTypeName("VkBool32")] uint waitAll,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => DllImport.WaitForFences(device, fenceCount, pFences, waitAll, timeout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.WaitForPresentKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("uint64_t")] ulong presentId,
        [NativeTypeName("uint64_t")] ulong timeout
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SwapchainKHRHandle*, ulong, ulong, Result>)(
                _slots[673] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[673] = nativeContext.LoadFunction("vkWaitForPresentKHR", "vulkan")
            )
        )(device, swapchain, presentId, timeout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_present_wait"],
        ImpliesSets = ["VK_KHR_present_id", "VK_KHR_swapchain"]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWaitForPresentKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitForPresentKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("VkSwapchainKHR")] SwapchainKHRHandle* swapchain,
        [NativeTypeName("uint64_t")] ulong presentId,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => DllImport.WaitForPresentKHR(device, swapchain, presentId, timeout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.WaitForPresentKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("uint64_t")] ulong presentId,
        [NativeTypeName("uint64_t")] ulong timeout
    )
    {
        fixed (SwapchainKHRHandle* __dsl_swapchain = swapchain)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).WaitForPresentKHR(
                    __dsl_device,
                    __dsl_swapchain,
                    presentId,
                    timeout
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_present_wait"],
        ImpliesSets = ["VK_KHR_present_id", "VK_KHR_swapchain"]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWaitForPresentKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitForPresentKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("VkSwapchainKHR")] Ref<SwapchainKHRHandle> swapchain,
        [NativeTypeName("uint64_t")] ulong presentId,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => DllImport.WaitForPresentKHR(device, swapchain, presentId, timeout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.WaitSemaphores(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] SemaphoreWaitInfo* pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SemaphoreWaitInfo*, ulong, Result>)(
                _slots[674] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[674] = nativeContext.LoadFunction("vkWaitSemaphores", "vulkan")
            )
        )(device, pWaitInfo, timeout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphores")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitSemaphores(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] SemaphoreWaitInfo* pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => DllImport.WaitSemaphores(device, pWaitInfo, timeout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.WaitSemaphores(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] Ref<SemaphoreWaitInfo> pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    )
    {
        fixed (SemaphoreWaitInfo* __dsl_pWaitInfo = pWaitInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)((IVulkan)this).WaitSemaphores(__dsl_device, __dsl_pWaitInfo, timeout);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_VERSION_1_2", "VK_VERSION_1_3", "VK_VERSION_1_4"],
        MinVersion = "1.2"
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphores")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitSemaphores(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] Ref<SemaphoreWaitInfo> pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => DllImport.WaitSemaphores(device, pWaitInfo, timeout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.WaitSemaphoresKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] SemaphoreWaitInfo* pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    ) =>
        (
            (delegate* unmanaged<DeviceHandle*, SemaphoreWaitInfo*, ulong, Result>)(
                _slots[675] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[675] = nativeContext.LoadFunction("vkWaitSemaphoresKHR", "vulkan")
            )
        )(device, pWaitInfo, timeout);

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphoresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitSemaphoresKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] SemaphoreWaitInfo* pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => DllImport.WaitSemaphoresKHR(device, pWaitInfo, timeout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.WaitSemaphoresKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] Ref<SemaphoreWaitInfo> pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    )
    {
        fixed (SemaphoreWaitInfo* __dsl_pWaitInfo = pWaitInfo)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).WaitSemaphoresKHR(__dsl_device, __dsl_pWaitInfo, timeout);
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_timeline_semaphore"],
        ImpliesSets = [
            "VK_KHR_timeline_semaphore+VK_KHR_get_physical_device_properties2",
            "VK_KHR_timeline_semaphore+VK_VERSION_1_1",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWaitSemaphoresKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WaitSemaphoresKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("const VkSemaphoreWaitInfo *")] Ref<SemaphoreWaitInfo> pWaitInfo,
        [NativeTypeName("uint64_t")] ulong timeout
    ) => DllImport.WaitSemaphoresKHR(device, pWaitInfo, timeout);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.WriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            AccelerationStructureKHRHandle** pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData,
        [NativeTypeName("size_t")] nuint stride
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                uint,
                AccelerationStructureKHRHandle**,
                QueryType,
                nuint,
                void*,
                nuint,
                Result>)(
                _slots[676] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[676] = nativeContext.LoadFunction(
                        "vkWriteAccelerationStructuresPropertiesKHR",
                        "vulkan"
                    )
            )
        )(
            device,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            dataSize,
            pData,
            stride
        );

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            AccelerationStructureKHRHandle** pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData,
        [NativeTypeName("size_t")] nuint stride
    ) =>
        DllImport.WriteAccelerationStructuresPropertiesKHR(
            device,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            dataSize,
            pData,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.WriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            Ref2D<AccelerationStructureKHRHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData,
        [NativeTypeName("size_t")] nuint stride
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (
            AccelerationStructureKHRHandle** __dsl_pAccelerationStructures = pAccelerationStructures
        )
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).WriteAccelerationStructuresPropertiesKHR(
                    __dsl_device,
                    accelerationStructureCount,
                    __dsl_pAccelerationStructures,
                    queryType,
                    dataSize,
                    __dsl_pData,
                    stride
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_KHR_acceleration_structure"],
        ImpliesSets = [
            "VK_KHR_deferred_host_operations+VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address",
            "VK_KHR_deferred_host_operations+VK_VERSION_1_2",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWriteAccelerationStructuresPropertiesKHR")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WriteAccelerationStructuresPropertiesKHR(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint accelerationStructureCount,
        [NativeTypeName("const VkAccelerationStructureKHR *")]
            Ref2D<AccelerationStructureKHRHandle> pAccelerationStructures,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData,
        [NativeTypeName("size_t")] nuint stride
    ) =>
        DllImport.WriteAccelerationStructuresPropertiesKHR(
            device,
            accelerationStructureCount,
            pAccelerationStructures,
            queryType,
            dataSize,
            pData,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.WriteMicromapsPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle** pMicromaps,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData,
        [NativeTypeName("size_t")] nuint stride
    ) =>
        (
            (delegate* unmanaged<
                DeviceHandle*,
                uint,
                MicromapEXTHandle**,
                QueryType,
                nuint,
                void*,
                nuint,
                Result>)(
                _slots[677] is not null and var loadedFnPtr
                    ? loadedFnPtr
                    : _slots[677] = nativeContext.LoadFunction(
                        "vkWriteMicromapsPropertiesEXT",
                        "vulkan"
                    )
            )
        )(device, micromapCount, pMicromaps, queryType, dataSize, pData, stride);

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [NativeFunction("vulkan", EntryPoint = "vkWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WriteMicromapsPropertiesEXT(
        [NativeTypeName("VkDevice")] DeviceHandle* device,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] MicromapEXTHandle** pMicromaps,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        void* pData,
        [NativeTypeName("size_t")] nuint stride
    ) =>
        DllImport.WriteMicromapsPropertiesEXT(
            device,
            micromapCount,
            pMicromaps,
            queryType,
            dataSize,
            pData,
            stride
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Result IVulkan.WriteMicromapsPropertiesEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] Ref2D<MicromapEXTHandle> pMicromaps,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData,
        [NativeTypeName("size_t")] nuint stride
    )
    {
        fixed (void* __dsl_pData = pData)
        fixed (MicromapEXTHandle** __dsl_pMicromaps = pMicromaps)
        fixed (DeviceHandle* __dsl_device = device)
        {
            return (Result)
                ((IVulkan)this).WriteMicromapsPropertiesEXT(
                    __dsl_device,
                    micromapCount,
                    __dsl_pMicromaps,
                    queryType,
                    dataSize,
                    __dsl_pData,
                    stride
                );
        }
    }

    [SupportedApiProfile(
        "vulkan",
        ["VK_EXT_opacity_micromap"],
        ImpliesSets = [
            "VK_KHR_acceleration_structure+VK_KHR_synchronization2",
            "VK_KHR_acceleration_structure+VK_VERSION_1_3",
        ]
    )]
    [Transformed]
    [NativeFunction("vulkan", EntryPoint = "vkWriteMicromapsPropertiesEXT")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Result WriteMicromapsPropertiesEXT(
        [NativeTypeName("VkDevice")] Ref<DeviceHandle> device,
        [NativeTypeName("uint32_t")] uint micromapCount,
        [NativeTypeName("const VkMicromapEXT *")] Ref2D<MicromapEXTHandle> pMicromaps,
        QueryType queryType,
        [NativeTypeName("size_t")] nuint dataSize,
        Ref pData,
        [NativeTypeName("size_t")] nuint stride
    ) =>
        DllImport.WriteMicromapsPropertiesEXT(
            device,
            micromapCount,
            pMicromaps,
            queryType,
            dataSize,
            pData,
            stride
        );
}
