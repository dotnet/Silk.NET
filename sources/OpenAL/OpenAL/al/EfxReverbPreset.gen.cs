// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Generated using the OpenAL Soft headers and corresponding dependencies.
// Original source is licensed under the LGPL 2.0 license. Please note that while bindings are able to be MIT due to
// being header-derived only, implementations of the headers may have a less permissive license.
using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Silk.NET.OpenAL;

public unsafe partial class EfxReverbPreset
{
    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Generic
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x52,
                0xB8,
                0xBE,
                0x3F,
                0xE1,
                0x7A,
                0x54,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xCD,
                0xCC,
                0x4C,
                0x3D,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA3,
                0x23,
                0xA1,
                0x3F,
                0x58,
                0x39,
                0x34,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties PaddedCell
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0xB2,
                0x9D,
                0x2F,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x6F,
                0x12,
                0x83,
                0x3A,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x7B,
                0x14,
                0x2E,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x6F,
                0x12,
                0x83,
                0x3A,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xDE,
                0x71,
                0xA2,
                0x3F,
                0x6F,
                0x12,
                0x03,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Room
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x91,
                0x7E,
                0xDB,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x4B,
                0xC8,
                0x17,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xCD,
                0xCC,
                0xCC,
                0x3E,
                0xE1,
                0x7A,
                0x54,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x3E,
                0xE8,
                0x19,
                0x3E,
                0x6F,
                0x12,
                0x03,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x1B,
                0x0D,
                0x88,
                0x3F,
                0xA6,
                0x9B,
                0x44,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Bathroom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0xB2,
                0x9D,
                0x2F,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x49,
                0x9D,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x52,
                0xB8,
                0xBE,
                0x3F,
                0x71,
                0x3D,
                0x0A,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x90,
                0x31,
                0x27,
                0x3F,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x63,
                0x7F,
                0x51,
                0x40,
                0x58,
                0x39,
                0x34,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties LivingRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x75,
                0x02,
                0x7A,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x6F,
                0x12,
                0x83,
                0x3A,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x00,
                0x3F,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xBC,
                0x05,
                0x52,
                0x3E,
                0xA6,
                0x9B,
                0x44,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xB2,
                0x9D,
                0x8F,
                0x3E,
                0x6F,
                0x12,
                0x83,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties StoneRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x0A,
                0xD7,
                0x13,
                0x40,
                0x0A,
                0xD7,
                0x23,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xDC,
                0xD7,
                0xE1,
                0x3E,
                0xA6,
                0x9B,
                0x44,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA1,
                0xD6,
                0x8C,
                0x3F,
                0x96,
                0x43,
                0x8B,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Auditorium
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x5D,
                0xFE,
                0x13,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x71,
                0x3D,
                0x8A,
                0x40,
                0x3D,
                0x0A,
                0x17,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x3B,
                0x70,
                0xCE,
                0x3E,
                0x0A,
                0xD7,
                0xA3,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x50,
                0x8D,
                0x37,
                0x3F,
                0x8F,
                0xC2,
                0xF5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties ConcertHall
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x48,
                0xE1,
                0x7A,
                0x40,
                0x33,
                0x33,
                0x33,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x59,
                0x86,
                0x78,
                0x3E,
                0x0A,
                0xD7,
                0xA3,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x44,
                0x69,
                0x7F,
                0x3F,
                0x68,
                0x91,
                0xED,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Cave
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x71,
                0x3D,
                0x3A,
                0x40,
                0x66,
                0x66,
                0xA6,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x00,
                0x3F,
                0x8F,
                0xC2,
                0x75,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x14,
                0xD0,
                0x34,
                0x3F,
                0x58,
                0x39,
                0xB4,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Arena
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xEF,
                0x38,
                0xE5,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x14,
                0xAE,
                0xE7,
                0x40,
                0xC3,
                0xF5,
                0xA8,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x02,
                0xBC,
                0x85,
                0x3E,
                0x0A,
                0xD7,
                0xA3,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x7C,
                0x61,
                0x82,
                0x3F,
                0x8F,
                0xC2,
                0xF5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Hangar
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xCD,
                0xCC,
                0x20,
                0x41,
                0x1F,
                0x85,
                0x6B,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x00,
                0x3F,
                0x0A,
                0xD7,
                0xA3,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x9C,
                0xC4,
                0xA0,
                0x3F,
                0x8F,
                0xC2,
                0xF5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CarpetedHallway
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x91,
                0x7E,
                0xDB,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x9A,
                0x99,
                0x99,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xFE,
                0xD4,
                0xF8,
                0x3D,
                0x6F,
                0x12,
                0x03,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3F,
                0xC6,
                0x1C,
                0x3E,
                0x8F,
                0xC2,
                0xF5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Hallway
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0xBE,
                0x9F,
                0xBA,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x52,
                0xB8,
                0xBE,
                0x3F,
                0x3D,
                0x0A,
                0x17,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xFF,
                0xB2,
                0x7B,
                0x3E,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x08,
                0xAC,
                0xD4,
                0x3F,
                0x58,
                0x39,
                0x34,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties StoneCorridor
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x01,
                0xDE,
                0x42,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xCD,
                0xCC,
                0x2C,
                0x40,
                0x71,
                0x3D,
                0x4A,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xFF,
                0x21,
                0x7D,
                0x3E,
                0xF4,
                0xFD,
                0x54,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xD0,
                0xB3,
                0xC9,
                0x3F,
                0x0A,
                0xD7,
                0xA3,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Alley
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x9A,
                0x99,
                0x99,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xC8,
                0x98,
                0x3B,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x52,
                0xB8,
                0xBE,
                0x3F,
                0xF6,
                0x28,
                0x5C,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x89,
                0xD2,
                0x7E,
                0x3F,
                0x58,
                0x39,
                0x34,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3E,
                0x33,
                0x33,
                0x73,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Forest
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x9A,
                0x99,
                0x99,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x34,
                0x80,
                0xB7,
                0x3C,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x52,
                0xB8,
                0xBE,
                0x3F,
                0x71,
                0x3D,
                0x0A,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x3D,
                0x0A,
                0x57,
                0x3D,
                0x54,
                0xE3,
                0x25,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xC1,
                0xA8,
                0x44,
                0x3F,
                0x58,
                0x39,
                0xB4,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties City
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x00,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x52,
                0xB8,
                0xBE,
                0x3F,
                0x1F,
                0x85,
                0x2B,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x06,
                0x81,
                0x95,
                0x3D,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xF3,
                0x1F,
                0x12,
                0x3E,
                0x58,
                0x39,
                0x34,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Mountains
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x71,
                0x3D,
                0x8A,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xF9,
                0x31,
                0x66,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x52,
                0xB8,
                0xBE,
                0x3F,
                0x3D,
                0x0A,
                0x57,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x0B,
                0xB5,
                0x26,
                0x3D,
                0x9A,
                0x99,
                0x99,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x6F,
                0x81,
                0x44,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Quarry
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x52,
                0xB8,
                0xBE,
                0x3F,
                0xE1,
                0x7A,
                0x54,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x00,
                0x00,
                0x23,
                0xDB,
                0x79,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x56,
                0x9F,
                0xE3,
                0x3F,
                0xCD,
                0xCC,
                0xCC,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3E,
                0x33,
                0x33,
                0x33,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Plain
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x3D,
                0x0A,
                0x57,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x52,
                0xB8,
                0xBE,
                0x3F,
                0x00,
                0x00,
                0x00,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xB2,
                0x9D,
                0x6F,
                0x3D,
                0xC7,
                0x4B,
                0x37,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xF7,
                0x06,
                0xDF,
                0x3D,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Parkinglot
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x33,
                0x33,
                0xD3,
                0x3F,
                0x00,
                0x00,
                0xC0,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x61,
                0x32,
                0x55,
                0x3E,
                0x6F,
                0x12,
                0x03,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x4B,
                0xC8,
                0x87,
                0x3E,
                0xA6,
                0x9B,
                0x44,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Sewerpipe
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x36,
                0x3C,
                0x9D,
                0x3E,
                0xCD,
                0xCC,
                0x4C,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x0A,
                0xD7,
                0x33,
                0x40,
                0x29,
                0x5C,
                0x0F,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xEC,
                0xC0,
                0xD1,
                0x3F,
                0x42,
                0x60,
                0x65,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x7D,
                0xD0,
                0x4F,
                0x40,
                0x31,
                0x08,
                0xAC,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Underwater
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0xBE,
                0x9F,
                0xBA,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x52,
                0xB8,
                0xBE,
                0x3F,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x1E,
                0xA7,
                0x18,
                0x3F,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x44,
                0x8B,
                0xE2,
                0x40,
                0x58,
                0x39,
                0x34,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3D,
                0x0A,
                0x97,
                0x3F,
                0x0E,
                0x2D,
                0xB2,
                0x3E,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Drugged
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x91,
                0x7E,
                0xDB,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x71,
                0x3D,
                0x06,
                0x41,
                0x85,
                0xEB,
                0xB1,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x89,
                0x41,
                0x60,
                0x3F,
                0x6F,
                0x12,
                0x03,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x1C,
                0xEB,
                0x46,
                0x40,
                0x8F,
                0xC2,
                0xF5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Dizzy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0xBE,
                0x9F,
                0xBA,
                0x3E,
                0x9A,
                0x99,
                0x19,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x37,
                0x89,
                0x21,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x0A,
                0xD7,
                0x89,
                0x41,
                0x29,
                0x5C,
                0x0F,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x72,
                0x8A,
                0x0E,
                0x3E,
                0x0A,
                0xD7,
                0xA3,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3F,
                0xC6,
                0xFC,
                0x3E,
                0x8F,
                0xC2,
                0xF5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x29,
                0x5C,
                0x4F,
                0x3F,
                0x52,
                0xB8,
                0x9E,
                0x3E,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Psychotic
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x74,
                0x24,
                0x57,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x85,
                0xEB,
                0xF1,
                0x40,
                0xC3,
                0xF5,
                0x68,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x6C,
                0x09,
                0xF9,
                0x3E,
                0x0A,
                0xD7,
                0xA3,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xEA,
                0x04,
                0x1C,
                0x40,
                0x8F,
                0xC2,
                0xF5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x40,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CastleSmallroom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x0A,
                0xD7,
                0x63,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0xF6,
                0x28,
                0x9C,
                0x3F,
                0xE1,
                0x7A,
                0x54,
                0x3F,
                0x52,
                0xB8,
                0x9E,
                0x3E,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x58,
                0x39,
                0xB4,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xFE,
                0x65,
                0xFF,
                0x3F,
                0x58,
                0x39,
                0x34,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xDF,
                0x4F,
                0x0D,
                0x3E,
                0x0A,
                0xD7,
                0xA3,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x84,
                0xA1,
                0x45,
                0x00,
                0x80,
                0x0B,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CastleShortpassage
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x0A,
                0xD7,
                0x63,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0xE1,
                0x7A,
                0x14,
                0x40,
                0xE1,
                0x7A,
                0x54,
                0x3F,
                0x52,
                0xB8,
                0x9E,
                0x3E,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA3,
                0x23,
                0xA1,
                0x3F,
                0x7F,
                0x6A,
                0xBC,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xDF,
                0x4F,
                0x0D,
                0x3E,
                0x0A,
                0xD7,
                0xA3,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x84,
                0xA1,
                0x45,
                0x00,
                0x80,
                0x0B,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CastleMediumroom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x7B,
                0x14,
                0x6E,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x17,
                0x48,
                0x90,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x5C,
                0x8F,
                0x02,
                0x40,
                0xE1,
                0x7A,
                0x54,
                0x3F,
                0x1F,
                0x85,
                0xEB,
                0x3E,
                0x37,
                0x89,
                0x21,
                0x3F,
                0x58,
                0x39,
                0xB4,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0xDE,
                0xCA,
                0x3F,
                0x58,
                0x39,
                0x34,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x52,
                0xB8,
                0x1E,
                0x3E,
                0x8F,
                0xC2,
                0xF5,
                0x3C,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x84,
                0xA1,
                0x45,
                0x00,
                0x80,
                0x0B,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CastleLargeroom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x85,
                0xEB,
                0x51,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x17,
                0x48,
                0x90,
                0x3E,
                0xEE,
                0xEB,
                0x00,
                0x3E,
                0x85,
                0xEB,
                0x21,
                0x40,
                0xE1,
                0x7A,
                0x54,
                0x3F,
                0x00,
                0x00,
                0x00,
                0x3F,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0x96,
                0x43,
                0x0B,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA3,
                0x23,
                0xA1,
                0x3F,
                0x6F,
                0x12,
                0x83,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA4,
                0x70,
                0x3D,
                0x3E,
                0x29,
                0x5C,
                0x8F,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x84,
                0xA1,
                0x45,
                0x00,
                0x80,
                0x0B,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CastleLongpassage
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x0A,
                0xD7,
                0x63,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x48,
                0xE1,
                0x5A,
                0x40,
                0xE1,
                0x7A,
                0x54,
                0x3F,
                0x52,
                0xB8,
                0x9E,
                0x3E,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xCD,
                0xCC,
                0xB4,
                0x3F,
                0x7F,
                0x6A,
                0xBC,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xDF,
                0x4F,
                0x0D,
                0x3E,
                0x0A,
                0xD7,
                0xA3,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x84,
                0xA1,
                0x45,
                0x00,
                0x80,
                0x0B,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CastleHall
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x29,
                0x5C,
                0x4F,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x17,
                0x48,
                0x90,
                0x3E,
                0x34,
                0x11,
                0x36,
                0x3E,
                0xC3,
                0xF5,
                0x48,
                0x40,
                0x71,
                0x3D,
                0x4A,
                0x3F,
                0x52,
                0xB8,
                0x1E,
                0x3F,
                0x34,
                0x11,
                0x36,
                0x3E,
                0x42,
                0x60,
                0x65,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xB2,
                0x9D,
                0x8F,
                0x3F,
                0xA6,
                0x9B,
                0xC4,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x84,
                0xA1,
                0x45,
                0x00,
                0x80,
                0x0B,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CastleCupboard
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x0A,
                0xD7,
                0x63,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x17,
                0x48,
                0x90,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x1F,
                0x85,
                0x2B,
                0x3F,
                0x52,
                0xB8,
                0x5E,
                0x3F,
                0x52,
                0xB8,
                0x9E,
                0x3E,
                0xCD,
                0xCC,
                0xB4,
                0x3F,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x12,
                0x14,
                0x63,
                0x40,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xDF,
                0x4F,
                0x0D,
                0x3E,
                0x0A,
                0xD7,
                0xA3,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x84,
                0xA1,
                0x45,
                0x00,
                0x80,
                0x0B,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CastleCourtyard
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x3D,
                0x0A,
                0xD7,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0xBA,
                0x49,
                0x4C,
                0x3E,
                0xEC,
                0x51,
                0x08,
                0x40,
                0xF6,
                0x28,
                0x1C,
                0x3F,
                0x1F,
                0x85,
                0x6B,
                0x3E,
                0x0B,
                0x46,
                0x65,
                0x3E,
                0x0A,
                0xD7,
                0x23,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0xBC,
                0x74,
                0x13,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0xA4,
                0x70,
                0xBD,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CastleAlcove
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x0A,
                0xD7,
                0x63,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x85,
                0xEB,
                0xD1,
                0x3F,
                0x52,
                0xB8,
                0x5E,
                0x3F,
                0x52,
                0xB8,
                0x9E,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xCD,
                0xCC,
                0xB4,
                0x3F,
                0x96,
                0x43,
                0x0B,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xDF,
                0x4F,
                0x0D,
                0x3E,
                0x0A,
                0xD7,
                0xA3,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x84,
                0xA1,
                0x45,
                0x00,
                0x80,
                0x0B,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties FactorySmallRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0xBE,
                0x9F,
                0xBA,
                0x3E,
                0x85,
                0xEB,
                0x51,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0xF6,
                0x28,
                0xDC,
                0x3F,
                0x66,
                0x66,
                0x26,
                0x3F,
                0x14,
                0xAE,
                0xA7,
                0x3F,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x56,
                0x9F,
                0xE3,
                0x3F,
                0xA6,
                0x9B,
                0xC4,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x46,
                0xB6,
                0xF3,
                0x3D,
                0x29,
                0x5C,
                0x8F,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x29,
                0x6B,
                0x45,
                0x00,
                0x40,
                0xB5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties FactoryShortPassage
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0xBE,
                0x9F,
                0xBA,
                0x3E,
                0x0A,
                0xD7,
                0x23,
                0x3F,
                0x49,
                0x9D,
                0x80,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0x85,
                0xEB,
                0x21,
                0x40,
                0x66,
                0x66,
                0x26,
                0x3F,
                0x14,
                0xAE,
                0xA7,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA3,
                0x23,
                0xA1,
                0x3F,
                0xE3,
                0xA5,
                0x1B,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x71,
                0x3D,
                0x0A,
                0x3E,
                0x1F,
                0x85,
                0x6B,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x29,
                0x6B,
                0x45,
                0x00,
                0x40,
                0xB5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties FactoryMediumRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x91,
                0x7E,
                0xDB,
                0x3E,
                0x85,
                0xEB,
                0x51,
                0x3F,
                0x49,
                0x9D,
                0x80,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0xD7,
                0xA3,
                0x30,
                0x40,
                0x66,
                0x66,
                0x26,
                0x3F,
                0x14,
                0xAE,
                0xA7,
                0x3F,
                0x17,
                0x48,
                0x90,
                0x3E,
                0x58,
                0x39,
                0xB4,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xCD,
                0xCC,
                0xB4,
                0x3F,
                0x7F,
                0x6A,
                0xBC,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x0E,
                0x2D,
                0x32,
                0x3E,
                0x29,
                0x5C,
                0x8F,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x29,
                0x6B,
                0x45,
                0x00,
                0x40,
                0xB5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties FactoryLargeRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x91,
                0x7E,
                0xDB,
                0x3E,
                0x00,
                0x00,
                0x40,
                0x3F,
                0x49,
                0x9D,
                0x80,
                0x3E,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x37,
                0x89,
                0x21,
                0x3F,
                0x14,
                0xAE,
                0x87,
                0x40,
                0x5C,
                0x8F,
                0x02,
                0x3F,
                0x14,
                0xAE,
                0xA7,
                0x3F,
                0x34,
                0x11,
                0x36,
                0x3E,
                0x77,
                0xBE,
                0x1F,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xB2,
                0x9D,
                0x8F,
                0x3F,
                0x7F,
                0x6A,
                0xBC,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x44,
                0x8B,
                0x6C,
                0x3E,
                0x29,
                0x5C,
                0x8F,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x29,
                0x6B,
                0x45,
                0x00,
                0x40,
                0xB5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties FactoryLongPassage
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0xBE,
                0x9F,
                0xBA,
                0x3E,
                0x0A,
                0xD7,
                0x23,
                0x3F,
                0x49,
                0x9D,
                0x80,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0x85,
                0xEB,
                0x81,
                0x40,
                0x66,
                0x66,
                0x26,
                0x3F,
                0x14,
                0xAE,
                0xA7,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x0A,
                0xD7,
                0xA3,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA3,
                0x23,
                0xA1,
                0x3F,
                0x50,
                0x8D,
                0x17,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x71,
                0x3D,
                0x0A,
                0x3E,
                0x1F,
                0x85,
                0x6B,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x29,
                0x6B,
                0x45,
                0x00,
                0x40,
                0xB5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties FactoryHall
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x91,
                0x7E,
                0xDB,
                0x3E,
                0x00,
                0x00,
                0x40,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x37,
                0x89,
                0x21,
                0x3F,
                0x8F,
                0xC2,
                0xED,
                0x40,
                0x5C,
                0x8F,
                0x02,
                0x3F,
                0x14,
                0xAE,
                0xA7,
                0x3F,
                0x93,
                0x3A,
                0x81,
                0x3D,
                0x06,
                0x81,
                0x95,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x1B,
                0x2F,
                0xDD,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x29,
                0x5C,
                0x8F,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x29,
                0x6B,
                0x45,
                0x00,
                0x40,
                0xB5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties FactoryCupboard
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x36,
                0x3C,
                0x9D,
                0x3E,
                0xAE,
                0x47,
                0x21,
                0x3F,
                0x49,
                0x9D,
                0x80,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0x48,
                0xE1,
                0xFA,
                0x3E,
                0x66,
                0x66,
                0x26,
                0x3F,
                0x14,
                0xAE,
                0xA7,
                0x3F,
                0xA3,
                0x23,
                0xA1,
                0x3F,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xFE,
                0x65,
                0xFF,
                0x3F,
                0x6F,
                0x12,
                0x03,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xD1,
                0x22,
                0xDB,
                0x3D,
                0x29,
                0x5C,
                0x8F,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x29,
                0x6B,
                0x45,
                0x00,
                0x40,
                0xB5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties FactoryCourtyard
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x36,
                0x3C,
                0x9D,
                0x3E,
                0x85,
                0xEB,
                0x11,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x37,
                0x89,
                0x21,
                0x3F,
                0xE1,
                0x7A,
                0x14,
                0x40,
                0xE1,
                0x7A,
                0x94,
                0x3E,
                0x29,
                0x5C,
                0x0F,
                0x3F,
                0x0B,
                0x46,
                0x65,
                0x3E,
                0x29,
                0x5C,
                0x0F,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0x77,
                0xBE,
                0x1F,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0xE1,
                0x7A,
                0x94,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x29,
                0x6B,
                0x45,
                0x00,
                0x40,
                0xB5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties FactoryAlcove
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0xBE,
                0x9F,
                0xBA,
                0x3E,
                0x3D,
                0x0A,
                0x17,
                0x3F,
                0x49,
                0x9D,
                0x80,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0xC3,
                0xF5,
                0x48,
                0x40,
                0x66,
                0x66,
                0x26,
                0x3F,
                0x14,
                0xAE,
                0xA7,
                0x3F,
                0xCD,
                0xCC,
                0xB4,
                0x3F,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xE3,
                0xA5,
                0x1B,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xD5,
                0x78,
                0xE9,
                0x3D,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x29,
                0x6B,
                0x45,
                0x00,
                0x40,
                0xB5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties IcePalaceSmallRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x3D,
                0x0A,
                0x57,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0x17,
                0x48,
                0x90,
                0x3E,
                0xAE,
                0x47,
                0xC1,
                0x3F,
                0x0A,
                0xD7,
                0xC3,
                0x3F,
                0x71,
                0x3D,
                0x8A,
                0x3E,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xCD,
                0xCC,
                0xB4,
                0x3F,
                0x58,
                0x39,
                0x34,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x9E,
                0xEF,
                0x27,
                0x3E,
                0x29,
                0x5C,
                0x0F,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x32,
                0x42,
                0x46,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties IcePalaceShortPassage
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x40,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0x17,
                0x48,
                0x90,
                0x3E,
                0xB8,
                0x1E,
                0xE5,
                0x3F,
                0x48,
                0xE1,
                0xBA,
                0x3F,
                0x29,
                0x5C,
                0x8F,
                0x3E,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xB2,
                0x9D,
                0x8F,
                0x3F,
                0xE3,
                0xA5,
                0x9B,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x7D,
                0x3F,
                0x35,
                0x3E,
                0xEC,
                0x51,
                0xB8,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x32,
                0x42,
                0x46,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties IcePalaceMediumRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x52,
                0xB8,
                0x5E,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0x7B,
                0x14,
                0x0E,
                0x40,
                0x0A,
                0xD7,
                0xC3,
                0x3F,
                0x0A,
                0xD7,
                0xA3,
                0x3E,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0x77,
                0xBE,
                0x1F,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xB2,
                0x9D,
                0x8F,
                0x3F,
                0x1B,
                0x2F,
                0xDD,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xC9,
                0x76,
                0x3E,
                0x3E,
                0x8F,
                0xC2,
                0xF5,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x32,
                0x42,
                0x46,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties IcePalaceLargeRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x29,
                0x5C,
                0x4F,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0xC3,
                0xF5,
                0x48,
                0x40,
                0x0A,
                0xD7,
                0xC3,
                0x3F,
                0x0A,
                0xD7,
                0xA3,
                0x3E,
                0x49,
                0x9D,
                0x80,
                0x3E,
                0x77,
                0xBE,
                0x1F,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x1B,
                0x2F,
                0xDD,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xD1,
                0x22,
                0x5B,
                0x3E,
                0xAE,
                0x47,
                0xE1,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x32,
                0x42,
                0x46,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties IcePalaceLongPassage
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0xB8,
                0x1E,
                0x45,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0xD7,
                0xA3,
                0x40,
                0x40,
                0x48,
                0xE1,
                0xBA,
                0x3F,
                0x29,
                0x5C,
                0x8F,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0xA6,
                0x9B,
                0x44,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA3,
                0x23,
                0xA1,
                0x3F,
                0xCD,
                0xCC,
                0xCC,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xC9,
                0x76,
                0x3E,
                0x3E,
                0x0A,
                0xD7,
                0x23,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x32,
                0x42,
                0x46,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties IcePalaceHall
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x5C,
                0x8F,
                0x42,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0x14,
                0xAE,
                0xAF,
                0x40,
                0x0A,
                0xD7,
                0xC3,
                0x3F,
                0x5C,
                0x8F,
                0xC2,
                0x3E,
                0x1D,
                0xC9,
                0xE5,
                0x3D,
                0x1B,
                0x2F,
                0x5D,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x37,
                0x89,
                0x21,
                0x3F,
                0xF4,
                0xFD,
                0x54,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x8B,
                0x6C,
                0x67,
                0x3E,
                0xAE,
                0x47,
                0xE1,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x32,
                0x42,
                0x46,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties IcePalaceCupboard
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0xE1,
                0x7A,
                0x54,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0x0B,
                0x46,
                0x65,
                0x3E,
                0x5C,
                0x8F,
                0x42,
                0x3F,
                0x0A,
                0xD7,
                0xC3,
                0x3F,
                0xB8,
                0x1E,
                0x85,
                0x3E,
                0xB2,
                0x9D,
                0x8F,
                0x3F,
                0xA6,
                0x9B,
                0x44,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xFE,
                0x65,
                0xFF,
                0x3F,
                0x6F,
                0x12,
                0x83,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x98,
                0x6E,
                0x12,
                0x3E,
                0x0A,
                0xD7,
                0xA3,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x32,
                0x42,
                0x46,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties IcePalaceCourtyard
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x3D,
                0x0A,
                0x17,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x17,
                0x48,
                0x90,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x5C,
                0x8F,
                0x02,
                0x40,
                0x9A,
                0x99,
                0x99,
                0x3F,
                0x5C,
                0x8F,
                0xC2,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xE9,
                0x26,
                0x31,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xC5,
                0x20,
                0x30,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xD7,
                0xA3,
                0x70,
                0x3E,
                0x8F,
                0xC2,
                0xF5,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x32,
                0x42,
                0x46,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties IcePalaceAlcove
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x3D,
                0x0A,
                0x57,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0x17,
                0x48,
                0x90,
                0x3E,
                0xD7,
                0xA3,
                0x30,
                0x40,
                0x48,
                0xE1,
                0xBA,
                0x3F,
                0x29,
                0x5C,
                0x8F,
                0x3E,
                0xB2,
                0x9D,
                0x8F,
                0x3F,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x8F,
                0xC2,
                0xF5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x2F,
                0xDD,
                0x24,
                0x3E,
                0xEC,
                0x51,
                0xB8,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x32,
                0x42,
                0x46,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SpaceStationSmallRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x2B,
                0xF6,
                0x57,
                0x3E,
                0x33,
                0x33,
                0x33,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0xF6,
                0x28,
                0xDC,
                0x3F,
                0x85,
                0xEB,
                0x51,
                0x3F,
                0xCD,
                0xCC,
                0x0C,
                0x3F,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xCD,
                0xCC,
                0xB4,
                0x3F,
                0xF4,
                0xFD,
                0x54,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x12,
                0x83,
                0x40,
                0x3E,
                0xB8,
                0x1E,
                0x85,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x41,
                0x4F,
                0x45,
                0x9A,
                0x19,
                0xE5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SpaceStationShortPassage
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x2B,
                0xF6,
                0x57,
                0x3E,
                0x52,
                0xB8,
                0x5E,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x37,
                0x89,
                0x21,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0xE1,
                0x7A,
                0x64,
                0x40,
                0x00,
                0x00,
                0x00,
                0x3F,
                0xCD,
                0xCC,
                0x0C,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xA6,
                0x9B,
                0x44,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xB2,
                0x9D,
                0x8F,
                0x3F,
                0x6F,
                0x12,
                0x83,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xC5,
                0x20,
                0x30,
                0x3E,
                0xCD,
                0xCC,
                0x4C,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x41,
                0x4F,
                0x45,
                0x9A,
                0x19,
                0xE5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SpaceStationMediumRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x2B,
                0xF6,
                0x57,
                0x3E,
                0x00,
                0x00,
                0x40,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x37,
                0x89,
                0x21,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0xD7,
                0xA3,
                0x40,
                0x40,
                0x00,
                0x00,
                0x00,
                0x3F,
                0xCD,
                0xCC,
                0x0C,
                0x3F,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0x96,
                0x43,
                0x0B,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xB2,
                0x9D,
                0x8F,
                0x3F,
                0x29,
                0x5C,
                0x0F,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x19,
                0x04,
                0x56,
                0x3E,
                0x52,
                0xB8,
                0x9E,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x41,
                0x4F,
                0x45,
                0x9A,
                0x19,
                0xE5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SpaceStationLargeRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0xBE,
                0x9F,
                0xBA,
                0x3E,
                0x29,
                0x5C,
                0x4F,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x37,
                0x89,
                0x21,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0xC3,
                0xF5,
                0x78,
                0x40,
                0x5C,
                0x8F,
                0xC2,
                0x3E,
                0xF6,
                0x28,
                0x1C,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x42,
                0x60,
                0x65,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x29,
                0x5C,
                0x0F,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x8D,
                0x97,
                0x6E,
                0x3E,
                0x29,
                0x5C,
                0x8F,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x41,
                0x4F,
                0x45,
                0x9A,
                0x19,
                0xE5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SpaceStationLongPassage
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x91,
                0x7E,
                0xDB,
                0x3E,
                0x85,
                0xEB,
                0x51,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x37,
                0x89,
                0x21,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x0A,
                0xD7,
                0x93,
                0x40,
                0x52,
                0xB8,
                0x1E,
                0x3F,
                0xCD,
                0xCC,
                0x0C,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xA6,
                0x9B,
                0x44,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA3,
                0x23,
                0xA1,
                0x3F,
                0xB6,
                0xF3,
                0xFD,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x1F,
                0x85,
                0x6B,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x41,
                0x4F,
                0x45,
                0x9A,
                0x19,
                0xE5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SpaceStationHall
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x91,
                0x7E,
                0xDB,
                0x3E,
                0x52,
                0xB8,
                0x5E,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x37,
                0x89,
                0x21,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x1F,
                0x85,
                0xE3,
                0x40,
                0x5C,
                0x8F,
                0xC2,
                0x3E,
                0xF6,
                0x28,
                0x1C,
                0x3F,
                0x34,
                0x11,
                0x36,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x37,
                0x89,
                0x21,
                0x3F,
                0x12,
                0x83,
                0x40,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x41,
                0x4F,
                0x45,
                0x9A,
                0x19,
                0xE5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SpaceStationCupboard
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0xB2,
                0x9D,
                0x2F,
                0x3E,
                0x29,
                0x5C,
                0x0F,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x71,
                0x3D,
                0x4A,
                0x3F,
                0x29,
                0x5C,
                0x4F,
                0x3F,
                0xCD,
                0xCC,
                0x0C,
                0x3F,
                0xCD,
                0xCC,
                0xB4,
                0x3F,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x56,
                0x9F,
                0xE3,
                0x3F,
                0xBC,
                0x74,
                0x93,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x10,
                0x58,
                0x39,
                0x3E,
                0x52,
                0xB8,
                0x9E,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x41,
                0x4F,
                0x45,
                0x9A,
                0x19,
                0xE5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SpaceStationAlcove
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x2B,
                0xF6,
                0x57,
                0x3E,
                0x14,
                0xAE,
                0x47,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0xE1,
                0x7A,
                0x94,
                0x3F,
                0x29,
                0x5C,
                0x4F,
                0x3F,
                0xCD,
                0xCC,
                0x0C,
                0x3F,
                0xCD,
                0xCC,
                0xB4,
                0x3F,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xBC,
                0x74,
                0x93,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA6,
                0x9B,
                0x44,
                0x3E,
                0x3D,
                0x0A,
                0x57,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x9A,
                0x41,
                0x4F,
                0x45,
                0x9A,
                0x19,
                0xE5,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties WoodenSmallRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x1D,
                0xC9,
                0xE5,
                0x3D,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x71,
                0x3D,
                0x4A,
                0x3F,
                0x0A,
                0xD7,
                0xA3,
                0x3E,
                0x52,
                0xB8,
                0x5E,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x6F,
                0x12,
                0x03,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x68,
                0x91,
                0xED,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x08,
                0x93,
                0x45,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties WoodenShortPassage
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xEE,
                0xEB,
                0x00,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x00,
                0x00,
                0xE0,
                0x3F,
                0x00,
                0x00,
                0x00,
                0x3F,
                0x52,
                0xB8,
                0x5E,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0xA6,
                0x9B,
                0x44,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x37,
                0x89,
                0x21,
                0x3F,
                0xA6,
                0x9B,
                0xC4,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x08,
                0x93,
                0x45,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties WoodenMediumRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x17,
                0x48,
                0x90,
                0x3E,
                0xF6,
                0x28,
                0xBC,
                0x3F,
                0x3D,
                0x0A,
                0xD7,
                0x3E,
                0x85,
                0xEB,
                0x51,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x39,
                0xB4,
                0x48,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x68,
                0x91,
                0xED,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x08,
                0x93,
                0x45,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties WoodenLargeRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x10,
                0x7A,
                0xB6,
                0x3D,
                0x17,
                0x48,
                0x90,
                0x3E,
                0x9A,
                0x99,
                0x29,
                0x40,
                0xC3,
                0xF5,
                0xA8,
                0x3E,
                0x85,
                0xEB,
                0x51,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x02,
                0x2B,
                0x87,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0x39,
                0xB4,
                0x48,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x08,
                0x93,
                0x45,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties WoodenLongPassage
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x52,
                0xB8,
                0xFE,
                0x3F,
                0xCD,
                0xCC,
                0xCC,
                0x3E,
                0x71,
                0x3D,
                0x4A,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x0A,
                0xD7,
                0xA3,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0xBC,
                0x74,
                0x13,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x08,
                0x93,
                0x45,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties WoodenHall
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x78,
                0x9C,
                0xA2,
                0x3D,
                0x17,
                0x48,
                0x90,
                0x3E,
                0xCD,
                0xCC,
                0x5C,
                0x40,
                0x9A,
                0x99,
                0x99,
                0x3E,
                0x85,
                0xEB,
                0x51,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x58,
                0x39,
                0xB4,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0x25,
                0x06,
                0x81,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x08,
                0x93,
                0x45,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties WoodenCupboard
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xF2,
                0xB0,
                0x10,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x29,
                0x5C,
                0x0F,
                0x3F,
                0x1F,
                0x85,
                0xEB,
                0x3E,
                0xC3,
                0xF5,
                0x68,
                0x3F,
                0xB2,
                0x9D,
                0x8F,
                0x3F,
                0xA6,
                0x9B,
                0x44,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xB2,
                0x9D,
                0x8F,
                0x3F,
                0x42,
                0x60,
                0xE5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x08,
                0x93,
                0x45,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties WoodenCourtyard
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x66,
                0x66,
                0x26,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x78,
                0x9C,
                0xA2,
                0x3D,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xB8,
                0x1E,
                0xE5,
                0x3F,
                0x33,
                0x33,
                0xB3,
                0x3E,
                0x71,
                0x3D,
                0x4A,
                0x3F,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0x6D,
                0xE7,
                0xFB,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x6F,
                0x12,
                0x03,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x08,
                0x93,
                0x45,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties WoodenAlcove
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xEE,
                0xEB,
                0x00,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xF6,
                0x28,
                0x9C,
                0x3F,
                0x52,
                0xB8,
                0x1E,
                0x3F,
                0xC3,
                0xF5,
                0x68,
                0x3F,
                0xB2,
                0x9D,
                0x8F,
                0x3F,
                0xA6,
                0x9B,
                0x44,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0xA6,
                0x9B,
                0xC4,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x08,
                0x93,
                0x45,
                0x33,
                0x33,
                0xC7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SportEmptyStadium
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0xEC,
                0x51,
                0xC8,
                0x40,
                0x5C,
                0x8F,
                0x02,
                0x3F,
                0xCD,
                0xCC,
                0x8C,
                0x3F,
                0x93,
                0x3A,
                0x81,
                0x3D,
                0x5A,
                0x64,
                0x3B,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0xE3,
                0xA5,
                0x1B,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SportSquashCourt
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x40,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0x7B,
                0x14,
                0x0E,
                0x40,
                0xC3,
                0xF5,
                0x68,
                0x3F,
                0xE1,
                0x7A,
                0x94,
                0x3F,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0x58,
                0x39,
                0x34,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x25,
                0x06,
                0x01,
                0x3E,
                0x5C,
                0x8F,
                0x42,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x33,
                0x47,
                0xE0,
                0x45,
                0x33,
                0x33,
                0x53,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SportSmallSwimmingPool
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x33,
                0x33,
                0x33,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0xD7,
                0xA3,
                0x30,
                0x40,
                0x00,
                0x00,
                0xA0,
                0x3F,
                0x85,
                0xEB,
                0x91,
                0x3F,
                0x37,
                0x89,
                0x21,
                0x3F,
                0x0A,
                0xD7,
                0xA3,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0x8F,
                0xC2,
                0xF5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xC7,
                0x4B,
                0x37,
                0x3E,
                0x9A,
                0x99,
                0x19,
                0x3E,
                0xB8,
                0x1E,
                0x65,
                0x3F,
                0x5C,
                0x8F,
                0x42,
                0x3E,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SportLargeSwimmingPool
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x85,
                0xEB,
                0x51,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x14,
                0xAE,
                0xAF,
                0x40,
                0x14,
                0xAE,
                0xA7,
                0x3F,
                0x85,
                0xEB,
                0x91,
                0x3F,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0x77,
                0xBE,
                0x1F,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0x39,
                0xB4,
                0x48,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xF8,
                0x53,
                0x63,
                0x3E,
                0xCD,
                0xCC,
                0x0C,
                0x3F,
                0x1D,
                0x5A,
                0x94,
                0x3F,
                0x3D,
                0x0A,
                0x57,
                0x3E,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SportGymnasium
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x29,
                0x5C,
                0x4F,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0xC3,
                0xF5,
                0x48,
                0x40,
                0x14,
                0xAE,
                0x87,
                0x3F,
                0xCD,
                0xCC,
                0xAC,
                0x3F,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0x68,
                0x91,
                0xED,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0xEC,
                0x51,
                0x38,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x06,
                0x81,
                0x15,
                0x3E,
                0x29,
                0x5C,
                0x0F,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x33,
                0x47,
                0xE0,
                0x45,
                0x33,
                0x33,
                0x53,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SportFullStadium
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x97,
                0xFF,
                0x90,
                0x3D,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0x00,
                0x00,
                0xA8,
                0x40,
                0x7B,
                0x14,
                0x2E,
                0x3E,
                0xCD,
                0xCC,
                0x4C,
                0x3F,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x12,
                0x83,
                0x40,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x17,
                0x48,
                0x90,
                0x3E,
                0xE3,
                0xA5,
                0x1B,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SportStadiumTannoy
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x14,
                0xAE,
                0x47,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0x85,
                0xEB,
                0x21,
                0x40,
                0xAE,
                0x47,
                0x61,
                0x3F,
                0x7B,
                0x14,
                0x2E,
                0x3F,
                0x17,
                0x48,
                0x90,
                0x3E,
                0x1F,
                0x85,
                0x6B,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0x25,
                0x06,
                0x81,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0xCD,
                0xCC,
                0x4C,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties PrefabWorkshop
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x91,
                0x7E,
                0xDB,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xF2,
                0xB0,
                0x10,
                0x3E,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0x5C,
                0x8F,
                0x42,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xA6,
                0x9B,
                0x44,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xB2,
                0x9D,
                0x8F,
                0x3F,
                0xA6,
                0x9B,
                0x44,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties PrefabSchoolRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x29,
                0xED,
                0xCD,
                0x3E,
                0xD7,
                0xA3,
                0x30,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x37,
                0x89,
                0x21,
                0x3F,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0x48,
                0xE1,
                0x7A,
                0x3F,
                0x66,
                0x66,
                0xE6,
                0x3E,
                0xEC,
                0x51,
                0x38,
                0x3E,
                0xCD,
                0xCC,
                0xB4,
                0x3F,
                0x96,
                0x43,
                0x8B,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xCD,
                0xCC,
                0xB4,
                0x3F,
                0x8F,
                0xC2,
                0x75,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x5C,
                0x8F,
                0xC2,
                0x3D,
                0x29,
                0x5C,
                0x0F,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x33,
                0x47,
                0xE0,
                0x45,
                0x33,
                0x33,
                0x53,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties PrefabPractiseRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x29,
                0xED,
                0xCD,
                0x3E,
                0x52,
                0xB8,
                0x5E,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0x29,
                0x5C,
                0x8F,
                0x3F,
                0x29,
                0x5C,
                0x0F,
                0x3F,
                0xEC,
                0x51,
                0x38,
                0x3E,
                0xA3,
                0x23,
                0xA1,
                0x3F,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xCD,
                0xCC,
                0xB4,
                0x3F,
                0x58,
                0x39,
                0x34,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x5C,
                0x8F,
                0xC2,
                0x3D,
                0x29,
                0x5C,
                0x0F,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x33,
                0x47,
                0xE0,
                0x45,
                0x33,
                0x33,
                0x53,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties PrefabOuthouse
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x85,
                0xEB,
                0x51,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x1D,
                0xC9,
                0xE5,
                0x3D,
                0xD3,
                0x4D,
                0x22,
                0x3E,
                0xD7,
                0xA3,
                0xB0,
                0x3F,
                0x5C,
                0x8F,
                0xC2,
                0x3E,
                0x33,
                0x33,
                0xB3,
                0x3E,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0xA6,
                0x9B,
                0xC4,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x37,
                0x89,
                0x21,
                0x3F,
                0x58,
                0x39,
                0x34,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xD9,
                0xCE,
                0xF7,
                0x3D,
                0x7B,
                0x14,
                0x2E,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x66,
                0x66,
                0x32,
                0x45,
                0x00,
                0x00,
                0xD7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties PrefabCaravan
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x10,
                0x7A,
                0xB6,
                0x3D,
                0xEE,
                0xEB,
                0x00,
                0x3E,
                0xF6,
                0x28,
                0xDC,
                0x3E,
                0x00,
                0x00,
                0xC0,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xA6,
                0x9B,
                0x44,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xFE,
                0x65,
                0xFF,
                0x3F,
                0xA6,
                0x9B,
                0x44,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties DomeTomb
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x71,
                0x3D,
                0x4A,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x58,
                0xA8,
                0xB5,
                0x3E,
                0x0B,
                0x46,
                0x65,
                0x3E,
                0x8F,
                0xC2,
                0x85,
                0x40,
                0x3D,
                0x0A,
                0x57,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0xA6,
                0x0A,
                0xC6,
                0x3E,
                0x8F,
                0xC2,
                0xF5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xEB,
                0xE2,
                0xD6,
                0x3F,
                0x58,
                0x39,
                0xB4,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x7D,
                0x3F,
                0x35,
                0x3E,
                0x5C,
                0x8F,
                0x42,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x66,
                0x66,
                0x32,
                0x45,
                0x00,
                0x00,
                0xA0,
                0x41,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties PipeSmall
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x58,
                0xA8,
                0xB5,
                0x3E,
                0x0B,
                0x46,
                0x65,
                0x3E,
                0xAE,
                0x47,
                0xA1,
                0x40,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0x6F,
                0x12,
                0x03,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xF8,
                0xC2,
                0x20,
                0x40,
                0x8F,
                0xC2,
                0x75,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x66,
                0x66,
                0x32,
                0x45,
                0x00,
                0x00,
                0xA0,
                0x41,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties DomeSaintPauls
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x52,
                0xB8,
                0x5E,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x58,
                0xA8,
                0xB5,
                0x3E,
                0x0B,
                0x46,
                0x65,
                0x3E,
                0x14,
                0xAE,
                0x27,
                0x41,
                0x5C,
                0x8F,
                0x42,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x34,
                0x11,
                0x36,
                0x3E,
                0xEC,
                0x51,
                0xB8,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA3,
                0x23,
                0xA1,
                0x3F,
                0x31,
                0x08,
                0x2C,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x8F,
                0xC2,
                0xF5,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x66,
                0x66,
                0x32,
                0x45,
                0x00,
                0x00,
                0xA0,
                0x41,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties PipeLongThin
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x6F,
                0x12,
                0x83,
                0x3E,
                0xC3,
                0xF5,
                0x68,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0x17,
                0x48,
                0x90,
                0x3E,
                0x29,
                0x5C,
                0x13,
                0x41,
                0xEC,
                0x51,
                0x38,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x58,
                0x39,
                0xB4,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x66,
                0x66,
                0x32,
                0x45,
                0x00,
                0x00,
                0xA0,
                0x41,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties PipeLarge
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x58,
                0xA8,
                0xB5,
                0x3E,
                0x0B,
                0x46,
                0x65,
                0x3E,
                0x33,
                0x33,
                0x07,
                0x41,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0x7F,
                0x6A,
                0x3C,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0xDE,
                0xCA,
                0x3F,
                0x6F,
                0x12,
                0x03,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x66,
                0x66,
                0x32,
                0x45,
                0x00,
                0x00,
                0xA0,
                0x41,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties PipeResonant
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x5F,
                0x98,
                0x0C,
                0x3E,
                0xC3,
                0xF5,
                0x68,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0x17,
                0x48,
                0x90,
                0x3E,
                0x85,
                0xEB,
                0xD9,
                0x40,
                0xEC,
                0x51,
                0x38,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x58,
                0x39,
                0xB4,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x66,
                0x66,
                0x32,
                0x45,
                0x00,
                0x00,
                0xA0,
                0x41,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties OutdoorsBackyard
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x66,
                0x66,
                0xE6,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x49,
                0x9D,
                0x80,
                0x3E,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0x29,
                0x5C,
                0x8F,
                0x3F,
                0x7B,
                0x14,
                0xAE,
                0x3E,
                0x1F,
                0x85,
                0xEB,
                0x3E,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0xDF,
                0x4F,
                0x8D,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x7F,
                0x6A,
                0xBC,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x64,
                0x3B,
                0x5F,
                0x3E,
                0x7B,
                0x14,
                0xAE,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x78,
                0x89,
                0x45,
                0x66,
                0xE6,
                0x72,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties OutdoorsRollingPlains
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x00,
                0x00,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x34,
                0x80,
                0x37,
                0x3C,
                0x37,
                0x89,
                0x21,
                0x3F,
                0xEC,
                0x51,
                0x08,
                0x40,
                0x3D,
                0x0A,
                0x57,
                0x3E,
                0x1F,
                0x85,
                0xEB,
                0x3E,
                0x34,
                0x11,
                0x36,
                0x3E,
                0x9A,
                0x99,
                0x99,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0xE3,
                0xA5,
                0x9B,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x78,
                0x89,
                0x45,
                0x66,
                0xE6,
                0x72,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties OutdoorsDeepCanyon
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0xA4,
                0x70,
                0x3D,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x34,
                0x11,
                0x36,
                0x3E,
                0x37,
                0x89,
                0x21,
                0x3F,
                0xC3,
                0xF5,
                0x78,
                0x40,
                0x3D,
                0x0A,
                0x57,
                0x3E,
                0x1F,
                0x85,
                0xEB,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x1D,
                0x5A,
                0x64,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x58,
                0xA8,
                0xB5,
                0x3E,
                0xE3,
                0xA5,
                0x9B,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x78,
                0x89,
                0x45,
                0x66,
                0xE6,
                0x72,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties OutdoorsCreek
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x33,
                0x33,
                0xB3,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x34,
                0x11,
                0x36,
                0x3E,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0xEC,
                0x51,
                0x08,
                0x40,
                0x3D,
                0x0A,
                0x57,
                0x3E,
                0x1F,
                0x85,
                0xEB,
                0x3E,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0x1F,
                0x85,
                0xEB,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0xBA,
                0x49,
                0x4C,
                0x3E,
                0xB6,
                0xF3,
                0xFD,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x64,
                0x3B,
                0x5F,
                0x3E,
                0x7B,
                0x14,
                0xAE,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x78,
                0x89,
                0x45,
                0x66,
                0xE6,
                0x72,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties OutdoorsValley
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x29,
                0x5C,
                0x8F,
                0x3E,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xB0,
                0x03,
                0xE7,
                0x3C,
                0xD3,
                0x4D,
                0x22,
                0x3E,
                0xEC,
                0x51,
                0x38,
                0x40,
                0xB8,
                0x1E,
                0x85,
                0x3E,
                0x33,
                0x33,
                0xB3,
                0x3E,
                0xF2,
                0xB0,
                0x10,
                0x3E,
                0xF0,
                0xA7,
                0x86,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x7B,
                0x14,
                0xAE,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x66,
                0x66,
                0x32,
                0x45,
                0x00,
                0x00,
                0xD7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties MoodHeaven
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0xD7,
                0xA3,
                0x70,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0xAE,
                0x47,
                0xA1,
                0x40,
                0x29,
                0x5C,
                0x8F,
                0x3F,
                0x29,
                0x5C,
                0x0F,
                0x3F,
                0x59,
                0x86,
                0x78,
                0x3E,
                0x0A,
                0xD7,
                0xA3,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA3,
                0x23,
                0xA1,
                0x3F,
                0x68,
                0x91,
                0xED,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x0A,
                0xD7,
                0xA3,
                0x3D,
                0xEE,
                0x7C,
                0x2F,
                0x40,
                0xCD,
                0xCC,
                0x4C,
                0x3D,
                0x44,
                0x69,
                0x7F,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties MoodHell
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x85,
                0xEB,
                0x11,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x58,
                0xA8,
                0xB5,
                0x3E,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0xE1,
                0x7A,
                0x64,
                0x40,
                0x48,
                0xE1,
                0xFA,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x40,
                0x00,
                0x00,
                0x00,
                0x00,
                0x0A,
                0xD7,
                0xA3,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xCD,
                0xCC,
                0xB4,
                0x3F,
                0x8F,
                0xC2,
                0xF5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xAE,
                0x47,
                0xE1,
                0x3D,
                0x0A,
                0xD7,
                0x23,
                0x3D,
                0xDB,
                0xF9,
                0x06,
                0x40,
                0xB8,
                0x1E,
                0x05,
                0x3F,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x80,
                0x0B,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties MoodMemory
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x9A,
                0x99,
                0x59,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x37,
                0x89,
                0x21,
                0x3F,
                0x58,
                0xA8,
                0xB5,
                0x3E,
                0x85,
                0xEB,
                0x81,
                0x40,
                0x85,
                0xEB,
                0x51,
                0x3F,
                0x29,
                0x5C,
                0x0F,
                0x3F,
                0x53,
                0x05,
                0x23,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xB2,
                0x9D,
                0x8F,
                0x3F,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x21,
                0xB0,
                0xF2,
                0x3E,
                0x66,
                0x66,
                0xE6,
                0x3E,
                0xE4,
                0x14,
                0x7D,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties DrivingCommentator
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x00,
                0x00,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0x48,
                0xE1,
                0x1A,
                0x40,
                0xAE,
                0x47,
                0x61,
                0x3F,
                0x7B,
                0x14,
                0x2E,
                0x3F,
                0xBA,
                0x49,
                0x4C,
                0x3E,
                0xC9,
                0x76,
                0xBE,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x49,
                0x9D,
                0x80,
                0x3E,
                0x96,
                0x43,
                0x8B,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0xE4,
                0x14,
                0x7D,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties DrivingPitGarage
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x91,
                0x7E,
                0xDB,
                0x3E,
                0x3D,
                0x0A,
                0x17,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0xF6,
                0x28,
                0xDC,
                0x3F,
                0x7B,
                0x14,
                0x6E,
                0x3F,
                0x52,
                0xB8,
                0x5E,
                0x3F,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA3,
                0x23,
                0xA1,
                0x3F,
                0x6F,
                0x12,
                0x83,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0xAE,
                0x47,
                0xE1,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties DrivingInCarRacer
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0xC3,
                0x64,
                0xAA,
                0x3D,
                0xCD,
                0xCC,
                0x4C,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0x7B,
                0x14,
                0x2E,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x40,
                0x85,
                0xEB,
                0xD1,
                0x3E,
                0x56,
                0x9F,
                0xE3,
                0x3F,
                0x42,
                0x60,
                0xE5,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x8F,
                0xC2,
                0x75,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x70,
                0x20,
                0x46,
                0x00,
                0x00,
                0x7B,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties DrivingInCarSports
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0xC3,
                0x64,
                0xAA,
                0x3D,
                0xCD,
                0xCC,
                0x4C,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x37,
                0x89,
                0x21,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x7B,
                0x14,
                0x2E,
                0x3E,
                0x00,
                0x00,
                0x40,
                0x3F,
                0x85,
                0xEB,
                0xD1,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x70,
                0x20,
                0x46,
                0x00,
                0x00,
                0x7B,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties DrivingInCarLuxury
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x6F,
                0x12,
                0x83,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xCD,
                0xCC,
                0xCC,
                0x3D,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0xB8,
                0x1E,
                0x05,
                0x3E,
                0x85,
                0xEB,
                0xD1,
                0x3E,
                0x1F,
                0x85,
                0xEB,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0xDE,
                0xCA,
                0x3F,
                0x0A,
                0xD7,
                0x23,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0x70,
                0x20,
                0x46,
                0x00,
                0x00,
                0x7B,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties DrivingFullGrandStand
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x17,
                0x48,
                0x90,
                0x3E,
                0x37,
                0x89,
                0x21,
                0x3F,
                0xD7,
                0xA3,
                0x40,
                0x40,
                0x29,
                0x5C,
                0xAF,
                0x3F,
                0x0A,
                0xD7,
                0xA3,
                0x3F,
                0x58,
                0xA8,
                0xB5,
                0x3E,
                0xEC,
                0x51,
                0xB8,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x34,
                0x11,
                0x36,
                0x3E,
                0x39,
                0xB4,
                0x48,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0xD0,
                0x22,
                0x46,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties DrivingEmptyGrandStand
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0x0A,
                0xD7,
                0x93,
                0x40,
                0x00,
                0x00,
                0xE0,
                0x3F,
                0x33,
                0x33,
                0xB3,
                0x3F,
                0x61,
                0x32,
                0x55,
                0x3E,
                0xEC,
                0x51,
                0xB8,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x49,
                0x9D,
                0x80,
                0x3E,
                0x39,
                0xB4,
                0x48,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0xCD,
                0xD0,
                0x22,
                0x46,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties DrivingTunnel
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x29,
                0x5C,
                0x4F,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x48,
                0xE1,
                0x5A,
                0x40,
                0xD7,
                0xA3,
                0x70,
                0x3F,
                0x14,
                0xAE,
                0xA7,
                0x3F,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x60,
                0xE5,
                0x50,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x12,
                0x83,
                0x40,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xD1,
                0x22,
                0x5B,
                0x3E,
                0xCD,
                0xCC,
                0x4C,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0xCD,
                0x4C,
                0x1B,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CityStreets
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x14,
                0xAE,
                0x47,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0xB8,
                0x1E,
                0xE5,
                0x3F,
                0x29,
                0x5C,
                0x8F,
                0x3F,
                0xC3,
                0xF5,
                0x68,
                0x3F,
                0x17,
                0x48,
                0x90,
                0x3E,
                0x7F,
                0x6A,
                0x3C,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xBA,
                0x49,
                0x4C,
                0x3E,
                0x42,
                0x60,
                0xE5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0xCD,
                0xCC,
                0x4C,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CitySubway
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0xA4,
                0x70,
                0x3D,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0xD7,
                0xA3,
                0x40,
                0x40,
                0xA4,
                0x70,
                0x9D,
                0x3F,
                0xC3,
                0xF5,
                0x68,
                0x3F,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0x7F,
                0x6A,
                0x3C,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA3,
                0x23,
                0xA1,
                0x3F,
                0x42,
                0x60,
                0xE5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3E,
                0x3D,
                0x0A,
                0x57,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CityMuseum
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x85,
                0xEB,
                0x51,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x34,
                0x11,
                0x36,
                0x3E,
                0x34,
                0x11,
                0x36,
                0x3E,
                0x85,
                0xEB,
                0x51,
                0x40,
                0x33,
                0x33,
                0xB3,
                0x3F,
                0x85,
                0xEB,
                0x11,
                0x3F,
                0x49,
                0x9D,
                0x80,
                0x3E,
                0x77,
                0xBE,
                0x1F,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x96,
                0x43,
                0x0B,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xB8,
                0x1E,
                0x05,
                0x3E,
                0x7B,
                0x14,
                0x2E,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x66,
                0x66,
                0x32,
                0x45,
                0x00,
                0x00,
                0xD7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CityLibrary
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x85,
                0xEB,
                0x51,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x17,
                0x48,
                0x90,
                0x3E,
                0x10,
                0x7A,
                0xB6,
                0x3D,
                0xD7,
                0xA3,
                0x30,
                0x40,
                0x0A,
                0xD7,
                0x63,
                0x3F,
                0x85,
                0xEB,
                0xD1,
                0x3E,
                0x58,
                0xA8,
                0xB5,
                0x3E,
                0x68,
                0x91,
                0xED,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x0A,
                0xD7,
                0xA3,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xB8,
                0x1E,
                0x05,
                0x3E,
                0x7B,
                0x14,
                0x2E,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x66,
                0x66,
                0x32,
                0x45,
                0x00,
                0x00,
                0xD7,
                0x42,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CityUnderpass
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x85,
                0xEB,
                0x51,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0xE1,
                0x7A,
                0x64,
                0x40,
                0x29,
                0x5C,
                0x8F,
                0x3F,
                0xC3,
                0xF5,
                0x68,
                0x3F,
                0xC3,
                0xD3,
                0xCB,
                0x3E,
                0xFC,
                0xA9,
                0x71,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x50,
                0x8D,
                0x17,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x29,
                0x5C,
                0x0F,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0xB6,
                0xF3,
                0x7D,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties CityAbandoned
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0xD7,
                0xA3,
                0x30,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x85,
                0xEB,
                0x51,
                0x40,
                0x8F,
                0xC2,
                0x95,
                0x3F,
                0xC3,
                0xF5,
                0x68,
                0x3F,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0x58,
                0x39,
                0x34,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x17,
                0x48,
                0x90,
                0x3E,
                0xA6,
                0x9B,
                0xC4,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0xCD,
                0xCC,
                0x4C,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x2D,
                0x21,
                0x7F,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties DustyRoom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0xBE,
                0x9F,
                0xBA,
                0x3E,
                0x29,
                0x5C,
                0x0F,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0xEF,
                0x38,
                0x35,
                0x3F,
                0xB8,
                0x1E,
                0xE5,
                0x3F,
                0x5C,
                0x8F,
                0xC2,
                0x3E,
                0x3D,
                0x0A,
                0x57,
                0x3E,
                0xA5,
                0x4E,
                0x00,
                0x3F,
                0x6F,
                0x12,
                0x03,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xA3,
                0x23,
                0xA1,
                0x3F,
                0xA6,
                0x9B,
                0xC4,
                0x3B,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x17,
                0xD9,
                0x4E,
                0x3E,
                0xCD,
                0xCC,
                0x4C,
                0x3D,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0xE4,
                0x14,
                0x7D,
                0x3F,
                0x00,
                0xD8,
                0x4B,
                0x46,
                0xCD,
                0x4C,
                0x23,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties Chapel
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x3D,
                0x0A,
                0x57,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xE5,
                0xF2,
                0x0F,
                0x3F,
                0x00,
                0x00,
                0x80,
                0x3F,
                0x0A,
                0xD7,
                0x93,
                0x40,
                0x0A,
                0xD7,
                0x23,
                0x3F,
                0xA4,
                0x70,
                0x9D,
                0x3F,
                0xDD,
                0xB5,
                0xE4,
                0x3E,
                0x6F,
                0x12,
                0x03,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x3F,
                0x57,
                0x4B,
                0x3F,
                0x39,
                0xB4,
                0x48,
                0x3D,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x80,
                0x3E,
                0xAE,
                0x47,
                0xE1,
                0x3D,
                0x72,
                0x8A,
                0x7E,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }

    [NativeTypeName("const EFXEAXREVERBPROPERTIES")]
    public static ref readonly EfxEaxReverbProperties SmallWaterroom
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            ReadOnlySpan<byte> data =
            [
                0x00,
                0x00,
                0x80,
                0x3F,
                0x33,
                0x33,
                0x33,
                0x3F,
                0xF7,
                0xE4,
                0xA1,
                0x3E,
                0xEF,
                0x38,
                0xE5,
                0x3E,
                0x00,
                0x00,
                0x80,
                0x3F,
                0xAE,
                0x47,
                0xC1,
                0x3F,
                0x00,
                0x00,
                0xA0,
                0x3F,
                0x85,
                0xEB,
                0x91,
                0x3F,
                0x3D,
                0x2C,
                0x64,
                0x3F,
                0x0A,
                0xD7,
                0xA3,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xCD,
                0xCC,
                0xB4,
                0x3F,
                0x8F,
                0xC2,
                0xF5,
                0x3C,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0xC7,
                0x4B,
                0x37,
                0x3E,
                0x9A,
                0x99,
                0x19,
                0x3E,
                0xB8,
                0x1E,
                0x65,
                0x3F,
                0x5C,
                0x8F,
                0x42,
                0x3E,
                0xB6,
                0xF3,
                0x7D,
                0x3F,
                0x00,
                0x40,
                0x9C,
                0x45,
                0x00,
                0x00,
                0x7A,
                0x43,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
            ];
            Debug.Assert(data.Length == Unsafe.SizeOf<EfxEaxReverbProperties>());
            return ref Unsafe.As<byte, EfxEaxReverbProperties>(
                ref MemoryMarshal.GetReference(data)
            );
        }
    }
}
