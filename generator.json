{
    "tasks": [
        {
            "profileName": "OpenGL",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/main/xml/gl.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "glcore",
            "controlDescriptors": [
                "allow-redefinitions"
            ],
            "converter": {
                "reader": "gl",
                "constructor": "gl",
                "className": "GL"
            },
            "prefix": "gl",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "glcore"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenGL",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "rename": {
                "Buffer": "BufferKind"
            },
            "exclude": [
                "Boolean"
            ],
            "namespace": "Silk.NET.OpenGL",
            "overloadExclusions": {
                "RefOverloader": [
                    "glBinormalPointerEXT",
                    "glColorPointer",
                    "glColorPointerEXT",
                    "glEdgeFlagPointer",
                    "glFogCoordPointer",
                    "glFogCoordPointerEXT",
                    "glIndexPointer",
                    "glIndexPointerEXT",
                    "glInterleavedArrays",
                    "glMatrixIndexPointerARB",
                    "glMatrixIndexPointerOES",
                    "glNormalPointer",
                    "glNormalPointerEXT",
                    "glPointSizePointerOES",
                    "glSecondaryColorPointer",
                    "glSecondaryColorPointerEXT",
                    "glTangentPointerEXT",
                    "glTexCoordPointer",
                    "glTexCoordPointerEXT",
                    "glTexCoordPointer",
                    "glVariantPointerEXT",
                    "glVertexAttribIPointer",
                    "glVertexAttribIPointerEXT",
                    "glVertexAttribLPointer",
                    "glVertexAttribLPointerEXT",
                    "glVertexAttribPointer",
                    "glVertexAttribPointerARB",
                    "glVertexAttribPointerNV",
                    "glVertexPointer",
                    "glVertexPointerEXT",
                    "glVertexWeightPointerEXT",
                    "glWeightPointerARB",
                    "glWeightPointerOES",
                    "glElementPointerAPPLE",
                    "glElementPointerATI",
                    "glMultiTexCoordPointerEXT",
                    "glPointSizePointerOES"
                ]
            },
            "glIntAsPtr": {
                "EdgeFlagPointer": ["pointer"],
                "EdgeFlagPointerEXT": ["pointer"],
                "EdgeFlagPointerListIBM": ["pointer"],
                "VertexPointer": ["pointer"],
                "VertexPointerEXT": ["pointer"],
                "VertexPointerListIBM": ["pointer"],
                "VertexPointervINTEL": ["pointer"],
                "ColorPointer": ["pointer"],
                "ColorPointerEXT": ["pointer"],
                "ColorPointerListIBM": ["pointer"],
                "ColorPointervINTEL": ["pointer"],
                "IndexPointer": ["pointer"],
                "IndexPointerEXT": ["pointer"],
                "IndexPointerListIBM": ["pointer"],
                "NormalPointer": ["pointer"],
                "NormalPointerEXT": ["pointer"],
                "NormalPointerListIBM": ["pointer"],
                "NormalPointervINTEL": ["pointer"],
                "TexCoordPointer": ["pointer"],
                "TexCoordPointerEXT": ["pointer"],
                "TexCoordPointerListIBM": ["pointer"],
                "TexCoordPointervINTEL": ["pointer"],
                "MultiTexCoordPointerEXT": ["pointer"],
                "FogCoordPointer": ["pointer"],
                "FogCoordPointerEXT": ["pointer"],
                "FogCoordPointerListIBM": ["pointer"],
                "SecondaryColorPointer": ["pointer"],
                "SecondaryColorPointerEXT": ["pointer"],
                "SecondaryColorPointerListIBM": ["pointer"],
                "VertexAttribPointer": ["pointer"],
                "VertexAttribPointerARB": ["pointer"],
                "VertexAttribPointerNV": ["pointer"],
                "VertexAttribIPointer": ["pointer"],
                "VertexAttribIPointerEXT": ["pointer"],
                "TangentPointerEXT": ["pointer"],
                "BinormalPointerEXT": ["pointer"]
            },
            "extensionsNamespace": "Silk.NET.OpenGL.Extensions",
            "typeMaps": [
                {
                    "$include.glTypeMap": "build/gl_typemap.json"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.khronosTypeMap": "build/khronos_typemap.json"
                }
            ]
        },
        {
            "profileName": "OpenGL (Compatibility Profile)",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/main/xml/gl.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "gl",
            "controlDescriptors": [
                "allow-redefinitions"
            ],
            "converter": {
                "reader": "gl",
                "constructor": "gl",
                "className": "GL"
            },
            "prefix": "gl",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "gl"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenGL",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "rename": {
                "Buffer": "BufferKind"
            },
            "exclude": [
                "Boolean"
            ],
            "namespace": "Silk.NET.OpenGL.Legacy",
            "glIntAsPtr": {
                "EdgeFlagPointer": ["pointer"],
                "EdgeFlagPointerEXT": ["pointer"],
                "EdgeFlagPointerListIBM": ["pointer"],
                "VertexPointer": ["pointer"],
                "VertexPointerEXT": ["pointer"],
                "VertexPointerListIBM": ["pointer"],
                "VertexPointervINTEL": ["pointer"],
                "ColorPointer": ["pointer"],
                "ColorPointerEXT": ["pointer"],
                "ColorPointerListIBM": ["pointer"],
                "ColorPointervINTEL": ["pointer"],
                "IndexPointer": ["pointer"],
                "IndexPointerEXT": ["pointer"],
                "IndexPointerListIBM": ["pointer"],
                "NormalPointer": ["pointer"],
                "NormalPointerEXT": ["pointer"],
                "NormalPointerListIBM": ["pointer"],
                "NormalPointervINTEL": ["pointer"],
                "TexCoordPointer": ["pointer"],
                "TexCoordPointerEXT": ["pointer"],
                "TexCoordPointerListIBM": ["pointer"],
                "TexCoordPointervINTEL": ["pointer"],
                "MultiTexCoordPointerEXT": ["pointer"],
                "FogCoordPointer": ["pointer"],
                "FogCoordPointerEXT": ["pointer"],
                "FogCoordPointerListIBM": ["pointer"],
                "SecondaryColorPointer": ["pointer"],
                "SecondaryColorPointerEXT": ["pointer"],
                "SecondaryColorPointerListIBM": ["pointer"],
                "VertexAttribPointer": ["pointer"],
                "VertexAttribPointerARB": ["pointer"],
                "VertexAttribPointerNV": ["pointer"],
                "VertexAttribIPointer": ["pointer"],
                "VertexAttribIPointerEXT": ["pointer"],
                "TangentPointerEXT": ["pointer"],
                "BinormalPointerEXT": ["pointer"]
            },
            "extensionsNamespace": "Silk.NET.OpenGL.Legacy.Extensions",
            "overloadExclusions": {
                "RefOverloader": [
                    "glBinormalPointerEXT",
                    "glColorPointer",
                    "glColorPointerEXT",
                    "glEdgeFlagPointer",
                    "glFogCoordPointer",
                    "glFogCoordPointerEXT",
                    "glIndexPointer",
                    "glIndexPointerEXT",
                    "glInterleavedArrays",
                    "glMatrixIndexPointerARB",
                    "glMatrixIndexPointerOES",
                    "glNormalPointer",
                    "glNormalPointerEXT",
                    "glPointSizePointerOES",
                    "glSecondaryColorPointer",
                    "glSecondaryColorPointerEXT",
                    "glTangentPointerEXT",
                    "glTexCoordPointer",
                    "glTexCoordPointerEXT",
                    "glTexCoordPointer",
                    "glVariantPointerEXT",
                    "glVertexAttribIPointer",
                    "glVertexAttribIPointerEXT",
                    "glVertexAttribLPointer",
                    "glVertexAttribLPointerEXT",
                    "glVertexAttribPointer",
                    "glVertexAttribPointerARB",
                    "glVertexAttribPointerNV",
                    "glVertexPointer",
                    "glVertexPointerEXT",
                    "glVertexWeightPointerEXT",
                    "glWeightPointerARB",
                    "glWeightPointerOES",
                    "glElementPointerAPPLE",
                    "glElementPointerATI",
                    "glMultiTexCoordPointerEXT",
                    "glPointSizePointerOES"
                ]
            },
            "typeMaps": [
                {
                    "$include.glTypeMap": "build/gl_typemap.json"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.khronosTypeMap": "build/khronos_typemap.json"
                }
            ]
        },
        {
            "profileName": "OpenGLES",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/main/xml/gl.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "gles2",
            "controlDescriptors": [
                "allow-redefinitions"
            ],
            "converter": {
                "reader": "gl",
                "constructor": "gl",
                "className": "GL"
            },
            "prefix": "gl",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "gles2"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenGL",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "rename": {
                "Buffer": "BufferKind"
            },
            "exclude": [
                "Boolean"
            ],
            "namespace": "Silk.NET.OpenGLES",
            "glIntAsPtr": {
                "EdgeFlagPointer": ["pointer"],
                "EdgeFlagPointerEXT": ["pointer"],
                "EdgeFlagPointerListIBM": ["pointer"],
                "VertexPointer": ["pointer"],
                "VertexPointerEXT": ["pointer"],
                "VertexPointerListIBM": ["pointer"],
                "VertexPointervINTEL": ["pointer"],
                "ColorPointer": ["pointer"],
                "ColorPointerEXT": ["pointer"],
                "ColorPointerListIBM": ["pointer"],
                "ColorPointervINTEL": ["pointer"],
                "IndexPointer": ["pointer"],
                "IndexPointerEXT": ["pointer"],
                "IndexPointerListIBM": ["pointer"],
                "NormalPointer": ["pointer"],
                "NormalPointerEXT": ["pointer"],
                "NormalPointerListIBM": ["pointer"],
                "NormalPointervINTEL": ["pointer"],
                "TexCoordPointer": ["pointer"],
                "TexCoordPointerEXT": ["pointer"],
                "TexCoordPointerListIBM": ["pointer"],
                "TexCoordPointervINTEL": ["pointer"],
                "MultiTexCoordPointerEXT": ["pointer"],
                "FogCoordPointer": ["pointer"],
                "FogCoordPointerEXT": ["pointer"],
                "FogCoordPointerListIBM": ["pointer"],
                "SecondaryColorPointer": ["pointer"],
                "SecondaryColorPointerEXT": ["pointer"],
                "SecondaryColorPointerListIBM": ["pointer"],
                "VertexAttribPointer": ["pointer"],
                "VertexAttribPointerARB": ["pointer"],
                "VertexAttribPointerNV": ["pointer"],
                "VertexAttribIPointer": ["pointer"],
                "VertexAttribIPointerEXT": ["pointer"],
                "TangentPointerEXT": ["pointer"],
                "BinormalPointerEXT": ["pointer"]
            },
            "extensionsNamespace": "Silk.NET.OpenGLES.Extensions",
            "overloadExclusions": {
                "RefOverloader": [
                    "glBinormalPointerEXT",
                    "glColorPointer",
                    "glColorPointerEXT",
                    "glEdgeFlagPointer",
                    "glFogCoordPointer",
                    "glFogCoordPointerEXT",
                    "glIndexPointer",
                    "glIndexPointerEXT",
                    "glInterleavedArrays",
                    "glMatrixIndexPointerARB",
                    "glMatrixIndexPointerOES",
                    "glNormalPointer",
                    "glNormalPointerEXT",
                    "glPointSizePointerOES",
                    "glSecondaryColorPointer",
                    "glSecondaryColorPointerEXT",
                    "glTangentPointerEXT",
                    "glTexCoordPointer",
                    "glTexCoordPointerEXT",
                    "glTexCoordPointer",
                    "glVariantPointerEXT",
                    "glVertexAttribIPointer",
                    "glVertexAttribIPointerEXT",
                    "glVertexAttribLPointer",
                    "glVertexAttribLPointerEXT",
                    "glVertexAttribPointer",
                    "glVertexAttribPointerARB",
                    "glVertexAttribPointerNV",
                    "glVertexPointer",
                    "glVertexPointerEXT",
                    "glVertexWeightPointerEXT",
                    "glWeightPointerARB",
                    "glWeightPointerOES",
                    "glElementPointerAPPLE",
                    "glElementPointerATI",
                    "glMultiTexCoordPointerEXT",
                    "glPointSizePointerOES"
                ]
            },
            "typeMaps": [
                {
                    "$include.glTypeMap": "build/gl_typemap.json"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.khronosTypeMap": "build/khronos_typemap.json"
                }
            ]
        },
        {
            "profileName": "OpenCL",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenCL-Docs/main/xml/cl.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "cl",
            "controlDescriptors": [
                "allow-redefinitions"
            ],
            "converter": {
                "reader": "cl",
                "constructor": "cl",
                "className": "CL"
            },
            "prefix": "cl",
            "clang": {},
            "rename": {
                "cl_kernel_arg_type_qualifer": "cl_kernel_arg_type_qualifier",
                "ck_khr_mipmap_image": "cl_khr_mipmap_image",
                "CL_DRIVER_VERSION": "CL_DEVICE_DRIVER_VERSION",
                "CL_DRIVER_UUID_KHR": "CL_DEVICE_DRIVER_UUID_KHR",
                "CL_PRINTF_CALLBACK_ARM": "CL_CONTEXT_PRINTF_CALLBACK_ARM",
                "CL_PRINTF_BUFFERSIZE_ARM": "CL_CONTEXT_PRINTF_BUFFERSIZE_ARM"
            },
            "exclude": [
                "cl_image_desc"
            ],
            "bakery": {
                "profileNames": [
                    "opencl"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenCL",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.OpenCL",
            "extensionsNamespace": "Silk.NET.OpenCL.Extensions",
            "nameContainer": {
                "linux-x64": "libOpenCL.so.1",
                "win-x64": "opencl.dll",
                "win-x86": "opencl.dll",
                "osx-x64": "/System/Library/Frameworks/OpenCL.framework/OpenCL",
                "android": "libOpenCL.so",
                "iOS": "/System/Library/Frameworks/OpenCL.framework/OpenCL",
                "className": "OpenCLLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "char": "byte",
                    "ID3D10Buffer*": "void*",
                    "ID3D10Texture2D*": "void*",
                    "ID3D10Texture3D*": "void*",
                    "ID3D11Buffer*": "void*",
                    "ID3D11Texture2D*": "void*",
                    "ID3D11Texture3D*": "void*",
                    "ID3D11Device*": "void*",
                    "ID3D12Device*": "void*",
                    "ID3D12Resource*": "void*",
                    "ID3D12CommandQueue*": "void*",
                    "IDirect3DSurface9*": "void*",
                    "DXGI_FORMAT": "uint",
                    "VAImageFormat*": "void*",
                    "D3DFORMAT": "uint"
                },
                {
                    "cl_icd_dispatch": "void",
                    "cl_svm_mem_flags": "cl_mem_flags",
                    "CL_CALLBACK_EnqueueSVMFreeARM_pfn_free_func*": "FreeCallback",
                    "CL_CALLBACK_EnqueueSVMFree_pfn_free_func*": "FreeCallback",
                    "CL_CALLBACK_CreateContext_pfn_notify*": "NotifyCallback",
                    "CL_CALLBACK_CreateContextFromType_pfn_notify*": "NotifyCallback",
                    "CL_CALLBACK_SetContextDestructorCallback_pfn_notify*": "ObjectNotifyCallback",
                    "CL_CALLBACK_SetMemObjectDestructorCallback_pfn_notify*": "ObjectNotifyCallback",
                    "CL_CALLBACK_SetMemObjectDestructorAPPLE_pfn_notify*": "ObjectNotifyCallback",
                    "CL_CALLBACK_CompileProgram_pfn_notify*": "ObjectNotifyCallback",
                    "CL_CALLBACK_LinkProgram_pfn_notify*": "ObjectNotifyCallback",
                    "CL_CALLBACK_SetProgramReleaseCallback_pfn_notify*": "ObjectNotifyCallback",
                    "CL_CALLBACK_SetEventCallback_pfn_notify*": "EventNotifyCallback",
                    "CL_CALLBACK_EnqueueNativeKernel_user_func*": "UserFunction",
                    "CL_CALLBACK_BuildProgram_pfn_notify*": "ObjectNotifyCallback",
                    "cl_image_desc": "ImageDesc"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.khronosTypeMap": "build/khronos_typemap.json"
                }
            ]
        },
        {
            "profileName": "Vulkan",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/Vulkan-Docs/main/xml/vk.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "vulkan",
            "controlDescriptors": [
                "allow-redefinitions"
            ],
            "converter": {
                "reader": "vk",
                "constructor": "vk",
                "className": "Vk"
            },
            "prefix": "vk",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "vulkan"
                ]
            },
            "exclude": [
                "VkAabbPositionsKHR",
                "VkAabbPositionsNV",
                "// The below types are part of VK_ANDROID_native_buffer which is an Android internal extension (not user facing)",
                "VkNativeBufferANDROID",
                "VkSwapchainImageCreateInfoANDROID",
                "VkPhysicalDevicePresentationPropertiesANDROID"
            ],
            "output": {
                "mode": "Default",
                "path": "src/Vulkan",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props",
                "inject": [
                    {
                        "functions": [
                            "vkCreateInstance"
                        ],
                        "stage": "end",
                        "code": "if (%$RESULT$% == Result.Success) { CurrentInstance = *%$PARAM(pInstance)$%; }"
                    },
                    {
                        "functions": [
                            "vkCreateDevice"
                        ],
                        "stage": "end",
                        "code": "if (%$RESULT$% == Result.Success) { CurrentDevice = *%$PARAM(pDevice)$%; }"
                    }
                ]
            },
            "namespace": "Silk.NET.Vulkan",
            "extensionsNamespace": "Silk.NET.Vulkan.Extensions",
            "nameContainer": {
                "linux-x64": "libvulkan.so.1",
                "win-x64": "vulkan-1.dll",
                "win-x86": "vulkan-1.dll",
                "osx-x64": "libMoltenVK.dylib",
                "android": "libvulkan.so",
                "iOS": "__Internal",
                "className": "VulkanLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "PFN_vkInternalAllocationNotification": "PfnInternalAllocationNotification",
                    "PFN_vkInternalFreeNotification": "PfnInternalFreeNotification",
                    "PFN_vkReallocationFunction": "PfnReallocationFunction",
                    "PFN_vkAllocationFunction": "PfnAllocationFunction",
                    "PFN_vkFreeFunction": "PfnFreeFunction",
                    "PFN_vkVoidFunction": "PfnVoidFunction",
                    "PFN_vkDebugReportCallbackEXT": "PfnDebugReportCallbackEXT",
                    "PFN_vkDebugUtilsMessengerCallbackEXT": "PfnDebugUtilsMessengerCallbackEXT",
                    "PFN_vkDeviceMemoryReportCallbackEXT": "PfnDeviceMemoryReportCallbackEXT",
                    "PFN_vkGetInstanceProcAddr": "PfnVoidFunction",
                    "PFN_vkGetInstanceProcAddrLUNARG": "PfnVoidFunction",
                    "PFN_vkFaultCallbackFunction": "PfnFaultCallbackFunction",
                    "char": "byte",
                    "Window": "nint",
                    "VkAabbPositionsKHR": "Silk.NET.Maths.Box3D<float>",
                    "VkAabbPositionsNV": "Silk.NET.Maths.Box3D<float>",
                    "_screen_buffer": "void"
                },
                {
                    "StdVideoDecodeH264PictureInfo": "Video.StdVideoDecodeH264PictureInfo",
                    "StdVideoDecodeH264PictureInfoFlags": "Video.StdVideoDecodeH264PictureInfoFlags",
                    "StdVideoDecodeH264ReferenceInfo": "Video.StdVideoDecodeH264ReferenceInfo",
                    "StdVideoDecodeH264ReferenceInfoFlags": "Video.StdVideoDecodeH264ReferenceInfoFlags",
                    "StdVideoDecodeH265PictureInfo": "Video.StdVideoDecodeH265PictureInfo",
                    "StdVideoDecodeH265PictureInfoFlags": "Video.StdVideoDecodeH265PictureInfoFlags",
                    "StdVideoDecodeH265ReferenceInfo": "Video.StdVideoDecodeH265ReferenceInfo",
                    "StdVideoDecodeH265ReferenceInfoFlags": "Video.StdVideoDecodeH265ReferenceInfoFlags",
                    "StdVideoEncodeH264PictureInfo": "Video.StdVideoEncodeH264PictureInfo",
                    "StdVideoEncodeH264PictureInfoFlags": "Video.StdVideoEncodeH264PictureInfoFlags",
                    "StdVideoEncodeH264ReferenceInfo": "Video.StdVideoEncodeH264ReferenceInfo",
                    "StdVideoEncodeH264ReferenceInfoFlags": "Video.StdVideoEncodeH264ReferenceInfoFlags",
                    "StdVideoEncodeH264ReferenceListsInfo": "Video.StdVideoEncodeH264ReferenceListsInfo",
                    "StdVideoEncodeH264ReferenceListsInfoFlags": "Video.StdVideoEncodeH264ReferenceListsInfoFlags",
                    "StdVideoEncodeH264RefListModEntry": "Video.StdVideoEncodeH264RefListModEntry",
                    "StdVideoEncodeH264RefPicMarkingEntry": "Video.StdVideoEncodeH264RefPicMarkingEntry",
                    "StdVideoEncodeH264SliceHeader": "Video.StdVideoEncodeH264SliceHeader",
                    "StdVideoEncodeH264SliceHeaderFlags": "Video.StdVideoEncodeH264SliceHeaderFlags",
                    "StdVideoEncodeH264WeightTable": "Video.StdVideoEncodeH264WeightTable",
                    "StdVideoEncodeH264WeightTableFlags": "Video.StdVideoEncodeH264WeightTableFlags",
                    "StdVideoEncodeH265PictureInfo": "Video.StdVideoEncodeH265PictureInfo",
                    "StdVideoEncodeH265PictureInfoFlags": "Video.StdVideoEncodeH265PictureInfoFlags",
                    "StdVideoEncodeH265ReferenceInfo": "Video.StdVideoEncodeH265ReferenceInfo",
                    "StdVideoEncodeH265ReferenceInfoFlags": "Video.StdVideoEncodeH265ReferenceInfoFlags",
                    "StdVideoEncodeH265ReferenceListsInfo": "Video.StdVideoEncodeH265ReferenceListsInfo",
                    "StdVideoEncodeH265ReferenceListsInfoFlags": "Video.StdVideoEncodeH265ReferenceListsInfoFlags",
                    "StdVideoEncodeH265SliceSegmentHeader": "Video.StdVideoEncodeH265SliceSegmentHeader",
                    "StdVideoEncodeH265SliceSegmentHeaderFlags": "Video.StdVideoEncodeH265SliceSegmentHeaderFlags",
                    "StdVideoEncodeH265SliceSegmentLongTermRefPics": "Video.StdVideoEncodeH265SliceSegmentLongTermRefPics",
                    "StdVideoEncodeH265WeightTable": "Video.StdVideoEncodeH265WeightTable",
                    "StdVideoEncodeH265WeightTableFlags": "Video.StdVideoEncodeH265WeightTableFlags",
                    "StdVideoH264HrdParameters": "Video.StdVideoH264HrdParameters",
                    "StdVideoH264PictureParameterSet": "Video.StdVideoH264PictureParameterSet",
                    "StdVideoH264PpsFlags": "Video.StdVideoH264PpsFlags",
                    "StdVideoH264ScalingLists": "Video.StdVideoH264ScalingLists",
                    "StdVideoH264SequenceParameterSet": "Video.StdVideoH264SequenceParameterSet",
                    "StdVideoH264SequenceParameterSetVui": "Video.StdVideoH264SequenceParameterSetVui",
                    "StdVideoH264SpsFlags": "Video.StdVideoH264SpsFlags",
                    "StdVideoH264SpsVuiFlags": "Video.StdVideoH264SpsVuiFlags",
                    "StdVideoH265DecPicBufMgr": "Video.StdVideoH265DecPicBufMgr",
                    "StdVideoH265HrdFlags": "Video.StdVideoH265HrdFlags",
                    "StdVideoH265HrdParameters": "Video.StdVideoH265HrdParameters",
                    "StdVideoH265LongTermRefPicsSps": "Video.StdVideoH265LongTermRefPicsSps",
                    "StdVideoH265PictureParameterSet": "Video.StdVideoH265PictureParameterSet",
                    "StdVideoH265PpsFlags": "Video.StdVideoH265PpsFlags",
                    "StdVideoH265PredictorPaletteEntries": "Video.StdVideoH265PredictorPaletteEntries",
                    "StdVideoH265ProfileTierLevel": "Video.StdVideoH265ProfileTierLevel",
                    "StdVideoH265ProfileTierLevelFlags": "Video.StdVideoH265ProfileTierLevelFlags",
                    "StdVideoH265ScalingLists": "Video.StdVideoH265ScalingLists",
                    "StdVideoH265SequenceParameterSet": "Video.StdVideoH265SequenceParameterSet",
                    "StdVideoH265SequenceParameterSetVui": "Video.StdVideoH265SequenceParameterSetVui",
                    "StdVideoH265ShortTermRefPicSet": "Video.StdVideoH265ShortTermRefPicSet",
                    "StdVideoH265ShortTermRefPicSetFlags": "Video.StdVideoH265ShortTermRefPicSetFlags",
                    "StdVideoH265SpsFlags": "Video.StdVideoH265SpsFlags",
                    "StdVideoH265SpsVuiFlags": "Video.StdVideoH265SpsVuiFlags",
                    "StdVideoH265SubLayerHrdParameters": "Video.StdVideoH265SubLayerHrdParameters",
                    "StdVideoH265VideoParameterSet": "Video.StdVideoH265VideoParameterSet",
                    "StdVideoH265VpsFlags": "Video.StdVideoH265VpsFlags",
                    "StdVideoDecodeH264FieldOrderCount": "Video.StdVideoDecodeH264FieldOrderCount",
                    "StdVideoH264AspectRatioIdc": "Video.StdVideoH264AspectRatioIdc",
                    "StdVideoH264CabacInitIdc": "Video.StdVideoH264CabacInitIdc",
                    "StdVideoH264ChromaFormatIdc": "Video.StdVideoH264ChromaFormatIdc",
                    "StdVideoH264DisableDeblockingFilterIdc": "Video.StdVideoH264DisableDeblockingFilterIdc",
                    "StdVideoH264LevelIdc": "Video.StdVideoH264LevelIdc",
                    "StdVideoH264MemMgmtControlOp": "Video.StdVideoH264MemMgmtControlOp",
                    "StdVideoH264ModificationOfPicNumsIdc": "Video.StdVideoH264ModificationOfPicNumsIdc",
                    "StdVideoH264NonVclNaluType": "Video.StdVideoH264NonVclNaluType",
                    "StdVideoH264PictureType": "Video.StdVideoH264PictureType",
                    "StdVideoH264PocType": "Video.StdVideoH264PocType",
                    "StdVideoH264ProfileIdc": "Video.StdVideoH264ProfileIdc",
                    "StdVideoH264SliceType": "Video.StdVideoH264SliceType",
                    "StdVideoH264WeightedBipredIdc": "Video.StdVideoH264WeightedBipredIdc",
                    "StdVideoH265AspectRatioIdc": "Video.StdVideoH265AspectRatioIdc",
                    "StdVideoH265ChromaFormatIdc": "Video.StdVideoH265ChromaFormatIdc",
                    "StdVideoH265LevelIdc": "Video.StdVideoH265LevelIdc",
                    "StdVideoH265PictureType": "Video.StdVideoH265PictureType",
                    "StdVideoH265ProfileIdc": "Video.StdVideoH265ProfileIdc",
                    "StdVideoH265SliceType": "Video.StdVideoH265SliceType",
                    "StdVideoAV1Level": "Video.StdVideoAV1Level",
                    "StdVideoAV1SequenceHeader": "Video.StdVideoAV1SequenceHeader",
                    "StdVideoDecodeAV1PictureInfo": "Video.StdVideoDecodeAV1PictureInfo",
                    "StdVideoAV1Profile": "Video.StdVideoAV1Profile",
                    "StdVideoDecodeAV1ReferenceInfo": "Video.StdVideoDecodeAV1ReferenceInfo"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.khronosTypeMap": "build/khronos_typemap.json"
                }
            ]
        },
        {
            "profileName": "VulkanVideo",
            "sources": [
                "src/Vulkan/vk_video.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "vulkan_video",
            "controlDescriptors": [
                "convert-windows-only",
                "no-csproj",
                "no-extra-dir",
                "no-name-container"
            ],
            "prefix": "",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/submodules/Vulkan-Headers/include"
                ],
                "traverse": [
                    "build/submodules/Vulkan-Headers/include/vk_video/*.h"
                ],
                "classes": {
                    "vk_video.h": "[Core]VkVideo"
                }
            },
            "exclude": [],
            "rename": {},
            "bakery": {
                "profileNames": [
                    "vk_video"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Vulkan/Silk.NET.Vulkan/Video",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Vulkan.Video",
            "extensionsNamespace": "Silk.NET.Vulkan.Video.Extensions",
            "typeMaps": [
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "Assimp",
            "sources": [
                "src/Assimp/Include/assimp.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "assimp",
            "controlDescriptors": [
                "convert-windows-only",
                "BUG: The descriptor below is because MSVC is currently invalid.",
                "     The combination of convert-windows-only and convert-macos-only means that it will never convert",
                "     Remove this once 16.9 Preview 2 has released."
            ],
            "converter": {},
            "prefix": "ai",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/submodules/Assimp/include",
                    "-Isrc/Assimp/Include"
                ],
                "traverse": [
                    "build/submodules/Assimp/include/assimp/cexport.h",
                    "build/submodules/Assimp/include/assimp/cfileio.h",
                    "build/submodules/Assimp/include/assimp/cimport.h",
                    "build/submodules/Assimp/include/assimp/types.h",
                    "build/submodules/Assimp/include/assimp/importerdesc.h",
                    "build/submodules/Assimp/include/assimp/material.h",
                    "build/submodules/Assimp/include/assimp/version.h",
                    "build/submodules/Assimp/include/assimp/texture.h",
                    "build/submodules/Assimp/include/assimp/mesh.h",
                    "build/submodules/Assimp/include/assimp/light.h",
                    "build/submodules/Assimp/include/assimp/camera.h",
                    "build/submodules/Assimp/include/assimp/anim.h",
                    "build/submodules/Assimp/include/assimp/metadata.h",
                    "build/submodules/Assimp/include/assimp/scene.h",
                    "build/submodules/Assimp/include/assimp/aabb.h"
                ],
                "classes": {
                    "assimp.h": "[Core]Assimp"
                }
            },
            "exclude": [
                "aiColor3D",
                "ai_real",
                "_AI_ENFORCE_ENUM_SIZE",
                "_aiAnimBehaviour_Force32Bit",
                "_aiBlendMode_Force32Bit",
                "_AI_DLS_ENFORCE_ENUM_SIZE",
                "_aiLightSource_Force32Bit",
                "FORCE_32BIT",
                "_aiMorphingMethod_Force32Bit",
                "_AI_ORIGIN_ENFORCE_ENUM_SIZE",
                "_aiPrimitiveType_Force32Bit",
                "_aiPTI_Force32Bit",
                "_aiShadingMode_Force32Bit",
                "_aiTextureFlags_Force32Bit",
                "_aiTextureMapMode_Force32Bit",
                "_aiTextureMapping_Force32Bit",
                "_aiTextureOp_Force32Bit",
                "_aiTextureType_Force32Bit",
                "aiAABB",
                "aiMatrix3x3"
            ],
            "rename": {
                "aiString": "AssimpString"
            },
            "bakery": {
                "profileNames": [
                    "assimp"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Assimp",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Assimp",
            "extensionsNamespace": "Silk.NET.Assimp.Extensions",
            "nameContainer": {
                "linux-x64": "libassimp.so.5",
                "win-x64": "Assimp64.dll",
                "win-x86": "Assimp32.dll",
                "osx-x64": "libassimp.5.dylib",
                "android": "libassimp.so.5",
                "iOS": "__Internal",
                "className": "AssimpLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "aiVector3D": "System.Numerics.Vector3",
                    "aiColor4D": "System.Numerics.Vector4",
                    "aiColor3D": "System.Numerics.Vector3",
                    "aiVector2D": "System.Numerics.Vector2",
                    "aiQuaternion": "AssimpQuaternion",
                    "aiMatrix4x4": "System.Numerics.Matrix4x4",
                    "aiMatrix3x3": "Silk.NET.Maths.Matrix3X3<float>",
                    "aiAABB": "Silk.NET.Maths.Box3D<float>",
                    "ai_real": "float"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "OpenXR",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenXR-SDK-Source/main/specification/registry/xr.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "openxr",
            "controlDescriptors": [
                "allow-redefinitions"
            ],
            "converter": {
                "reader": "vk",
                "constructor": "vk",
                "className": "XR"
            },
            "prefix": "xr",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "openxr"
                ]
            },
            "prefixOverrides": {
                "XrPassthroughColorLutChannelsMETA": "XR_PASSTHROUGH_COLOR_LUT_CHANNELS"
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenXR",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props",
                "inject": [
                    {
                        "functions": [
                            "xrCreateInstance"
                        ],
                        "stage": "end",
                        "code": "if (%$RESULT$% == Result.Success) { CurrentInstance = *%$PARAM(instance)$%; }"
                    }
                ]
            },
            "namespace": "Silk.NET.OpenXR",
            "extensionsNamespace": "Silk.NET.OpenXR.Extensions",
            "nameContainer": {
                "linux-x64": "libopenxr_loader.so.1",
                "win-x64": "openxr_loader.dll",
                "win-x86": "openxr_loader.dll",
                "osx-x64": "null",
                "android": "libopenxr_loader.so.1",
                "iOS": "__Internal",
                "className": "OpenXRLibraryNameContainer"
            },
            "exclude": [
                "XrUuidMSFT",
                "XrSceneSphereBoundMSFT",
                "XrVector4sFB"
            ],
            "typeMaps": [
                {
                    "$typemapPrecedesInjections": "true",
                    "XrFutureEXT": "FutureEXT",
                    "PFN_xrGetInstanceProcAddr": "PfnGetInstanceProcAddr",
                    "PFN_xrCreateApiLayerInstance": "PfnCreateApiLayerInstance",
                    "char": "byte",
                    "XR_DEFINE_ATOM": "uint64_t",
                    "LUID": "ulong",
                    "D3D_FEATURE_LEVEL": "uint",
                    "VkInstance": "Silk.NET.Core.Native.VkHandle",
                    "VkPhysicalDevice": "Silk.NET.Core.Native.VkHandle",
                    "VkImage": "ulong",
                    "VkDevice": "Silk.NET.Core.Native.VkHandle",
                    "_comment_0": "Dunno, should we give vkGetInstanceProcAddr its own pfn & delegate?",
                    "PFN_vkGetInstanceProcAddr": "PfnVoidFunction",
                    "PFN_vkGetInstanceProcAddrLUNARG": "PfnVoidFunction",
                    "VkInstanceCreateInfo*": "void*",
                    "VkAllocationCallbacks*": "void*",
                    "VkDeviceCreateInfo*": "void*",
                    "VkResult": "uint",
                    "PFN_xrVoidFunction": "PfnVoidFunction",
                    "PFN_xrDebugUtilsMessengerCallbackEXT": "PfnDebugUtilsMessengerCallbackEXT",
                    "_comment_1": "Dunno, should we give eglGetProcAddress its own pfn & delegate?",
                    "PFNEGLGETPROCADDRESSPROC": "PfnVoidFunction",
                    "ID3D11Buffer*": "void*",
                    "ID3D11Texture2D*": "void*",
                    "ID3D11Texture3D*": "void*",
                    "ID3D11Device*": "void*",
                    "ID3D12Device*": "void*",
                    "ID3D12Resource*": "void*",
                    "ID3D12CommandQueue*": "void*",
                    "IUnknown*": "Silk.NET.Core.Native.IUnknown*",
                    "EGLDisplay": "nint",
                    "EGLConfig": "nint",
                    "EGLContext": "nint",
                    "GLXFBConfig": "nint",
                    "VkFormat": "uint",
                    "EGLenum": "uint",
                    "XrUuidMSFT": "Guid",
                    "XrSceneSphereBoundMSFT": "Silk.NET.Maths.Sphere<float>",
                    "VkSamplerMipmapMode": "uint",
                    "VkComponentSwizzle": "uint",
                    "VkSamplerAddressMode": "uint",
                    "VkFilter": "uint",
                    "XrVector4sFB": "Silk.NET.Maths.Vector4D<short>",
                    "VkImageCreateFlags": "uint",
                    "VkImageUsageFlags": "uint",
                    "PFN_xrEglGetProcAddressMNDX": "void*"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.khronosTypeMap": "build/khronos_typemap.json",
                    "XR_DEFINE_ATOM": "uint64_t",
                    "char": "byte"
                }
            ]
        },
        {
            "profileName": "SDL",
            "sources": [
                "build/submodules/SDL/include/SDL.h",
                "build/submodules/SDL/include/SDL_vulkan.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "sdl",
            "controlDescriptors": [
                "convert-windows-only"
            ],
            "converter": {},
            "prefix": "sdl",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m64",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/submodules/SDL/include",
                    "-D__IPHONEOS__",
                    "-D__ANDROID__",
                    "-D__WIN32__",
                    "-D__WINRT__",
                    "-D__LINUX__"
                ],
                "traverse": [
                    "!build/submodules/SDL/include/SDL_rwops.h",
                    "build/submodules/SDL/include/*.h"
                ],
                "classes": {
                    "SDL.h": "[Core]Sdl",
                    "SDL_vulkan.h": "[Core]Sdl"
                }
            },
            "exclude": [
                "VkSurfaceKHR",
                "VkInstance",
                "ID3D11Device",
                "SDL_main",
                "SDL_SysWMmsg",
                "SDL_Rect",
                "ID3D12Device"
            ],
            "rename": {
                "__AnonymousEnum_SDL_shape_L85_C9": "WindowShapeModeVal",
                "SDL_bool": "SdlBool",
                "_comment_0": "Remove this in 3.0, use native names",
                "__AnonymousRecord_SDL_gamecontroller_L87_C5": "GameControllerBindValue",
                "__AnonymousRecord_SDL_gamecontroller_L91_C9": "GameControllerHatValue",
                "_SDL_Haptic": "Haptic",
                "_SDL_GameController": "GameController",
                "_SDL_Joystick": "Joystick",
                "_SDL_AudioStream": "AudioStream",
                "_SDL_iconv_t": "Icon",
                "_SDL_Sensor": "Sensor"
            },
            "bakery": {
                "profileNames": [
                    "SDL",
                    "SDL_vulkan"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Windowing",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props",
                "conditional": {
                    "$override(0)": [
                        "SDL_Android.*",
                        "SDL_Direct3D9.*",
                        "SDL_DXGI.*",
                        "SDL_GetAndroidSDKVersion",
                        "SDL_IsAndroidTV",
                        "SDL_IsChromebook",
                        "SDL_IsDeXMode",
                        "SDL_RegisterApp",
                        "SDL_RenderGetD3D.*",
                        "SDL_SetWindowsMessageHook",
                        "SDL_UnregisterApp",
                        "SDL_WinRT.*",
                        "__debugbreak"
                    ]
                }
            },
            "namespace": "Silk.NET.SDL",
            "extensionsNamespace": "Silk.NET.SDL.Extensions",
            "nameContainer": {
                "linux-x64": "libSDL2-2.0.so",
                "win-x64": "SDL2.dll",
                "win-x86": "SDL2.dll",
                "osx-x64": "libSDL2-2.0.dylib",
                "android": "libSDL2.so",
                "iOS": "__Internal",
                "className": "SDLLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "$typemapPrecedesInjections": "true",
                    "WindowShapeMode": "WindowShapeModeVal",
                    "SDL_RWops": "RWops",
                    "VkInstance": "Silk.NET.Core.Native.VkHandle",
                    "VkSurfaceKHR": "Silk.NET.Core.Native.VkNonDispatchableHandle",
                    "SDL_SysWMmsg": "SysWMMsg",
                    "SDL_Rect": "Silk.NET.Maths.Rectangle<int>",
                    "SDL_bool": "SdlBool",
                    "ID3D11Device": "Silk.NET.Core.Native.IUnknown",
                    "ID3D12Device": "Silk.NET.Core.Native.IUnknown"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "Core",
            "sources": [
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3dcommon.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/winrt/inspectable.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "core",
            "controlDescriptors": [
                "convert-windows-only",
                "no-csproj",
                "no-extra-dir",
                "no-name-container",
                "typemap-native"
            ],
            "prefix": "",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [],
                "classes": {
                    "d3dcommon.h": "[Core]D3DCommon",
                    "inspectable.h": "[Core]WinRT"
                }
            },
            "exclude": [
                "HSTRING_UserSize",
                "HSTRING_UserMarshal",
                "HSTRING_UserUnmarshal",
                "HSTRING_UserFree",
                "HSTRING_UserSize64",
                "HSTRING_UserMarshal64",
                "HSTRING_UserUnmarshal64",
                "HSTRING_UserFree64",
                "__REQUIRED_RPCNDR_H_VERSION__",
                "__REQUIRED_RPCSAL_H_VERSION__"
            ],
            "rename": {
                "_D3D_CBUFFER_TYPE": "D3DCBufferType",
                "_D3D_SHADER_CBUFFER_FLAGS": "D3DShaderCBufferFlags"
            },
            "bakery": {
                "profileNames": [
                    "d3dcommon",
                    "silk.net.core.native.dcommon",
                    "inspectable"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Core/Silk.NET.Core/Native",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Core.Native",
            "extensionsNamespace": "Silk.NET.Core.Native",
            "typeMaps": [
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "Win32Extras",
            "sources": [
                "src/Core/Silk.NET.Core/win32extras.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "win32extras",
            "controlDescriptors": [
                "convert-windows-only",
                "no-name-container",
                "typemap-native"
            ],
            "prefix": "",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m64",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/wtypes.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/rpcdcep.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/WTypesbase.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/evntrace.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/minwinbase.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/timezoneapi.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/winnt.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/handleapi.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/fileapi.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/objidlbase.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/objidl.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/ocidl.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/oaidl.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/propidlbase.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/propidl.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/Documenttarget.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/evntprov.h"
                ],
                "classes": {
                    "win32extras.h": "[Core]Windows"
                }
            },
            "exclude": [
                "_SECURITY_ATTRIBUTES",
                "_STGMEDIUM_UNION",
                "_GDI_OBJECT",
                "__MIDL_IAdviseSink_0002",
                "__MIDL_IAdviseSink_0003",
                "__MIDL_IOleAutomationTypes_0001",
                "__MIDL___MIDL_itf_d3d11_0000_0034_0001",
                "__MIDL___MIDL_itf_dxva2api_0000_0000_0003",
                "__MIDL___MIDL_itf_dxva2api_0000_0000_0004",
                "__MIDL___MIDL_itf_dxva2api_0000_0000_0005",
                "__MIDL___MIDL_itf_dxva2api_0000_0000_0006",
                "__MIDL___MIDL_itf_dxva2api_0000_0000_0007",
                "__MIDL___MIDL_itf_dxva2api_0000_0000_0008",
                "__MIDL___MIDL_itf_dxva2api_0000_0000_0009",
                "__MIDL___MIDL_itf_dxva2api_0000_0000_0010",
                "__MIDL___MIDL_itf_dxva2api_0000_0000_0011",
                "__MIDL___MIDL_itf_dxva2api_0000_0000_0012",
                "__MIDL___MIDL_itf_dxva2api_0000_0000_0013",
                "__MIDL___MIDL_itf_dxva2api_0000_0006_0001",
                "IClassFactory2",
                "IViewObjectEx",
                "IOleInPlaceSiteEx",
                "IOleInPlaceSiteWindowless",
                "IPicture",
                "IPicture2",
                "IPictureDisp",
                "IFont",
                "IFontDisp",
                "IFontEventsDisp",
                "ISimpleFrameSite",
                "IPersistPropertyBag",
                "IPersistPropertyBag2",
                "IPropertyPage",
                "IPropertyPage2",
                "IPropertyPageSite",
                "IQuickActivate",
                "IPointerInactive",
                "IOleControl",
                "IOleControlSite",
                "IOleInPlaceObjectWindowless",
                "tagVARIANT",
                "tagVARIANTUnion",
                "tagVARIANTUnionUnion",
                "tagVARIANTUnionUnionUnion",
                "tagVARIANTUnionUnionUnionUnion",
                "tagSAFEARRAY",
                "tagSAFEARRAYBOUND",
                "tagQACONTAINER",
                "tagQACONTAINERFLAGS",
                "tagPROPPAGEINFO",
                "tagDISPPARAMS",
                "_wireBRECORD",
                "_wireSAFEARRAY",
                "_wireSAFEARRAY_UNION",
                "_wireSAFEARR_BRECORD",
                "_wireSAFEARR_BSTR",
                "_wireSAFEARR_DISPATCH",
                "_wireSAFEARR_HAVEIID",
                "_wireSAFEARR_UNKNOWN",
                "_wireSAFEARR_VARIANT",
                "_wireVARIANT",
                "_wireVARIANTUnion",
                "_userBITMAP",
                "_userCLIPFORMAT",
                "_userHBITMAP",
                "_userHENHMETAFILE",
                "_userHGLOBAL",
                "_userHMETAFILE",
                "_userHMETAFILEPICT",
                "_userHPALETTE",
                "tagCSPLATFORM",
                "tagCY",
                "tagCYUnion",
                "tagDEC",
                "tagDECUnion1",
                "tagDECUnion1Union",
                "tagDECUnion2",
                "tagDECUnion2Union",
                "tagPOINTF",
                "tagQUERYCONTEXT",
                "tagRemBRUSH",
                "tagRemHBITMAP",
                "tagRemHENHMETAFILE",
                "tagRemHGLOBAL",
                "tagRemHMETAFILEPICT",
                "tagRemHPALETTE",
                "tagpropertykey",
                "tagEXCEPINFO",
                "_RemotableHandle",
                "_remoteMETAFILEPICT",
                "_GDI_NONREMOTE",
                "__MIDL_IWinTypes_0001",
                "__MIDL_IWinTypes_0002",
                "__MIDL_IWinTypes_0003",
                "__MIDL_IWinTypes_0004",
                "__MIDL_IWinTypes_0005",
                "__MIDL_IWinTypes_0006",
                "__MIDL_IWinTypes_0007",
                "__MIDL_IWinTypes_0008",
                "__MIDL_IWinTypes_0009",
                "__MIDL___MIDL_itf_wtypes_0000_0001_0001",
                "__MIDL___MIDL_itf_wtypes_0000_0001_0005"
            ],
            "rename": {
                "ETW_COMPRESSION_RESUMPTION_MODE": "EtwCompressionResumptionMode",
                "tagBLOB": "Blob",
                "tagMULTI_QI": "MultiQi",
                "tagRPCOLEMESSAGE": "RPCOLEMessage",
                "tagSOLE_AUTHENTICATION_LIST": "SoleAuthenticationList",
                "tagSOLE_AUTHENTICATION_SERVICE": "SoleAuthenticationService",
                "tagSOLE_AUTHENTICATION_INFO": "SoleAuthenticationInfo",
                "tagSTATSTG": "STATSTG",
                "tagACTIVATIONTYPE": "ActivationType",
                "tagCLSCTX": "CLSCTX",
                "tagDCOM_CALL_STATE": "DCOMCallState",
                "tagEOLE_AUTHENTICATION_CAPABILITIES": "EoleAuthenticationCapabilities",
                "tagEXTCONN": "EXTCONN",
                "tagGLOBALOPT_EH_VALUES": "GlobalOptEHValues",
                "tagGLOBALOPT_PROPERTIES": "GlobalOptProperties",
                "tagGLOBALOPT_RO_FLAGS": "GlobalOptRoFlags",
                "tagGLOBALOPT_RPCTP_VALUES": "GlobalOptRPCTPValues",
                "tagGLOBALOPT_UNMARSHALING_POLICY_VALUES": "GlobalUnmarshalingPolicyValues",
                "tagLOCKTYPE": "LockType",
                "tagMEMCTX": "MEMCTX",
                "tagMSHCTX": "MSHCTX",
                "tagMSHLFLAGS": "MSHLFlags",
                "tagRPCOPT_PROPERTIES": "RPCOptProperties",
                "tagRPCOPT_SERVER_LOCALITY_VALUES": "RPCOptServerLocalityValues",
                "tagSTGTY": "STGTY",
                "tagSTREAM_SEEK": "StreamSeek",
                "tagADVF": "ADVF",
                "tagApplicationType": "ApplicationType",
                "tagBIND_FLAGS": "BindFlags",
                "tagCALLTYPE": "CallType",
                "tagDATADIR": "DATADIR",
                "tagMKREDUCE": "MKRREDUCE",
                "tagMKSYS": "MKSYS",
                "tagPENDINGMSG": "PendingMsg",
                "tagPENDINGTYPE": "PendingType",
                "tagSERVERCALL": "ServerCall",
                "tagShutdownType": "ShutdownType",
                "tagTYMED": "TYMED",
                "tagBIND_OPTS": "BindOpts",
                "tagBIND_OPTS2": "BindOpts2",
                "tagBIND_OPTS3": "BindOpts3",
                "tagDVTARGETDEVICE": "DVTargetDevice",
                "tagFORMATETC": "FORMATETC",
                "tagINTERFACEINFO": "InterfaceInfo",
                "tagRemSNB": "RemSNB",
                "tagRemSTGMEDIUM": "RemSTGMEDIUM",
                "tagSTATDATA": "STATDATA",
                "tagSTGMEDIUM": "STGMEDIUM",
                "tagStorageLayout": "StorageLayout",
                "tagPROPBAG2": "PropBag2",
                "tagCABOOL": "CABool",
                "tagCABSTR": "CABSTR",
                "tagCABSTRBLOB": "CABSTRBlob",
                "tagCAC": "CAC",
                "tagCACLIPDATA": "CAClipData",
                "tagCACLSID": "CACLSID",
                "tagCACY": "CACY",
                "tagCADATE": "CADate",
                "tagCADBL": "CADBL",
                "tagCAFILETIME": "CAFileTime",
                "tagCAFLT": "CAFLT",
                "tagCAH": "CAH",
                "tagCAI": "CAI",
                "tagCAL": "CAL",
                "tagCALPSTR": "CALPSTR",
                "tagCALPWSTR": "CALPWSTR",
                "tagCAPROPVARIANT": "CAPropVariant",
                "tagCASCODE": "CASCode",
                "tagCAUB": "CAUB",
                "tagCAUH": "CAUH",
                "tagCAUI": "CAUI",
                "tagCAUL": "CAUL",
                "tagPROPVARIANT": "PropVariant",
                "tagPROPVARIANTUnion": "PropVariantUnion",
                "tagPROPVARIANTUnionUnion": "PropVariantUnionUnion",
                "tagPROPVARIANTUnionUnionUnion": "PropVariantUnionUnionUnion",
                "tagSERIALIZEDPROPERTYVALUE": "SerializedPropertyValue",
                "tagSTATPROPSETSTG": "STATPROPSETSTG",
                "tagSTATPROPSTG": "STATPROPSTG",
                "tagVersionedStream": "VersionedStream",
                "tagAspectInfo": "AspectInfo",
                "tagCADWORD": "CADWORD",
                "tagCALPOLESTR": "CALPOLESTR",
                "tagCAUUID": "CAUUID",
                "tagCONNECTDATA": "ConnectData",
                "tagCONTROLINFO": "ControlInfo",
                "tagExtentInfo": "ExtentInfo",
                "tagLICINFO": "LICInfo",
                "tagACTIVATEFLAGS": "ActivateFlags",
                "tagAspectInfoFlag": "AspectInfoFlag",
                "tagCTRLINFO": "CTRLInfo",
                "tagDVASPECT2": "DVASPECT2",
                "tagExtentMode": "ExtentMode",
                "tagGUIDKIND": "GuidKind",
                "tagHITRESULT": "HitResult",
                "tagOLEDCFLAGS": "OLEDCFlags",
                "tagPOINTERINACTIVE": "PointerInactive",
                "tagPROPPAGESTATUS": "PropPageStatus",
                "tagPictureAttributes": "PictureAttributes",
                "tagQACONTAINERFLAGS": "QAContainerFlags",
                "tagREADYSTATE": "ReadyState",
                "tagUASFLAGS": "UASFlags",
                "tagVIEWSTATUS": "ViewStatus",
                "tagXFORMCOORDS": "XFormCoords",
                "tagPROPBAG2_TYPE": "PropBag2Type",
                "tagPROPSPEC": "PropSpec",
                "tagARRAYDESC": "ArrayDesc",
                "tagBINDPTR": "BindPtr",
                "tagCLEANLOCALSTORAGE": "CleanLocalStorage",
                "tagCUSTDATA": "CustomData",
                "tagCUSTDATAITEM": "CustomDataItem",
                "tagELEMDESC": "ElemDesc",
                "tagELEMDESCUnion": "ElemDescUnion",
                "tagFUNCDESC": "FuncDesc",
                "tagIDLDESC": "IdlDesc",
                "tagPARAMDESC": "ParamDesc",
                "tagPARAMDESCEX": "ParamDescEx",
                "tagTLIBATTR": "TLibAttr",
                "tagTYPEATTR": "TypeAttr",
                "tagTYPEDESC": "TypeDesc",
                "tagTYPEDESCUnion": "TypeDescUnion",
                "tagVARDESC": "VarDesc",
                "tagVARDESCUnion": "VarDescUnion",
                "tagCALLCONV": "CallConv",
                "tagCHANGEKIND": "ChangeKind",
                "tagDESCKIND": "DescKind",
                "tagDVASPECT": "DVASPECT",
                "tagFUNCFLAGS": "FuncFlags",
                "tagFUNCKIND": "FuncKind",
                "tagINVOKEKIND": "InvokeKind",
                "tagLIBFLAGS": "LibFlags",
                "tagSF_TYPE": "SFType",
                "tagSTATFLAG": "StatFlag",
                "tagSTGC": "STGC",
                "tagSTGMOVE": "STGMove",
                "tagSYSKIND": "SysKind",
                "tagTYPEFLAGS": "TypeFlags",
                "tagTYPEKIND": "TypeKind",
                "tagTYSPEC": "TypeSpec",
                "tagVARFLAGS": "VarFlags",
                "tagVARKIND": "VarKind",
                "tagQACONTROL": "QAControl",
                "tagBSTRBLOB": "BSTRBlob",
                "tagCLIPDATA": "ClipData",
                "__MIDL___MIDL_itf_documenttarget_0000_0002_0001": "MIDLMIDLItfDocumentTarget000000020001"
            },
            "bakery": {
                "profileNames": [
                    "win32extras"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Core",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Core.Win32Extras",
            "extensionsNamespace": "Silk.NET.Core.Win32Extras",
            "typeMaps": [
                {
                    "WMIDPREQUESTCODE": "Wmidprequestcode",
                    "_SECURITY_ATTRIBUTES": "Silk.NET.Core.Native.SecurityAttributes",
                    "_FILETIME": "Filetime",
                    "_TIME_ZONE_INFORMATION": "TimeZoneInformation",
                    "_WNODE_HEADER": "WnodeHeader",
                    "_EXCEPTION_RECORD": "ExceptionRecord",
                    "_FILE_SEGMENT_ELEMENT": "FileSegmentElement",
                    "_RPC_MESSAGE": "RPCMessage",
                    "IQuickActivate": "Silk.NET.Core.Native.IUnknown",
                    "IClassFactory2": "Silk.NET.Core.Native.IUnknown",
                    "tagEXCEPINFO": "ExceptionInfo",
                    "tagVARIANT": "Variant",
                    "tagDISPPARAMS": "DispatchParams",
                    "tagSAFEARRAY": "SafeArray",
                    "tagCY": "CY",
                    "tagDEC": "TagDecimal",
                    "tagSAFEARRAYBOUND": "SafeArrayBound",
                    "tagQACONTAINER": "void",
                    "PfnTagEXCEPINFOvI": "PfnExceptionInfovI",
                    "tagPOINTF": "Silk.NET.Maths.Vector2<float>",
                    "HPALETTE__": "void",
                    "HBITMAP__": "void",
                    "HICON__": "void",
                    "HFONT__": "void",
                    "HRGN__": "void",
                    "HACCEL__": "void",
                    "HTASK__": "void"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "DXGI",
            "sources": [
                "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgi.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgi1_2.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgi1_3.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgi1_4.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgi1_5.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgi1_6.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/dxgidebug.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgiformat.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/winrt/windows.graphics.directx.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "dxgi",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native"
            ],
            "converter": {},
            "prefix": "DXGI",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgicommon.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgitype.h"
                ],
                "classes": {
                    "dxgi.h": "[Core]DXGI",
                    "dxgi1_2.h": "[Core]DXGI",
                    "dxgi1_3.h": "[Core]DXGI",
                    "dxgi1_4.h": "[Core]DXGI",
                    "dxgi1_5.h": "[Core]DXGI",
                    "dxgi1_6.h": "[Core]DXGI",
                    "dxgidebug.h": "[Core]DXGI",
                    "dxgiformat.h": "[Core]DXGI",
                    "windows.graphics.directx.h": "[Core]DXGI"
                },
                "comRefs": [
                    "Silk.NET.Core.Native.ID3D10Blob",
                    "Silk.NET.Core.Native.ID3DDestructionNotifier",
                    "Silk.NET.Core.Native.ID3DInclude"
                ]
            },
            "exclude": [],
            "rename": {},
            "bakery": {
                "profileNames": [
                    "dxgi",
                    "dxgi1_2",
                    "dxgi1_3",
                    "dxgi1_4",
                    "dxgi1_5",
                    "dxgi1_6",
                    "dxgidebug",
                    "dxgiformat",
                    "windows.graphics.directx"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.DXGI",
            "extensionsNamespace": "Silk.NET.DXGI.Extensions",
            "nameContainer": {
                "linux-x64": "libDXGI.so",
                "win-x64": "DXGI.dll",
                "win-x86": "DXGI.dll",
                "osx-x64": "libDXGI.dylib",
                "android": "libDXGI.so",
                "iOS": "__Internal",
                "className": "DXGILibraryNameContainer"
            },
            "typeMaps": [
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "DXVA",
            "sources": [
                "src/Microsoft/dxva.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "dxva",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native"
            ],
            "converter": {},
            "prefix": "DXVA",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dxva.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dxva2api.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dxva2swdev.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dxva2trace.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dxva9typ.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dxvahd.h"
                ],
                "classes": {
                    "dxva.h": "[Core]DXVA",
                    "dxva2api.h": "[Core]DXVA",
                    "dxva2swdev.h": "[Core]DXVA",
                    "dxva2trace.h": "[Core]DXVA",
                    "dxva9typ.h": "[Core]DXVA",
                    "dxvahd.h": "[Core]DXVA"
                }
            },
            "exclude": [],
            "rename": {
                "_DXVA2_VIDEOSAMPLE": "DXVA2VideoSample"
            },
            "bakery": {
                "profileNames": [
                    "dxva",
                    "dxva2api",
                    "dxva2swdev",
                    "dxva2trace",
                    "dxva2typ",
                    "dxvahd"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.DXVA",
            "extensionsNamespace": "Silk.NET.DXVA.Extensions",
            "nameContainer": {
                "linux-x64": "libdxva2.so",
                "win-x64": "dxva2.dll",
                "win-x86": "dxva2.dll",
                "osx-x64": "libdxva2.dylib",
                "android": "libdxva2.so",
                "iOS": "__Internal",
                "className": "DXVA2LibraryNameContainer"
            },
            "typeMaps": [
                {
                    "IDirect3DDevice9Ex": "Silk.NET.Direct3D9.IDirect3DDevice9Ex",
                    "IDirect3DDevice9": "Silk.NET.Direct3D9.IDirect3DDevice9",
                    "IDirect3DSurface9": "Silk.NET.Direct3D9.IDirect3DSurface9",
                    "_D3DFORMAT": "Silk.NET.Direct3D9.Format",
                    "_D3DPOOL": "Silk.NET.Direct3D9.Pool",
                    "_EVENT_TRACE_HEADER": "Silk.NET.Core.Win32Extras.EventTraceHeader"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "D2D",
            "sources": [
                "build/include/silk.net.direct2d.dcommon.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1_1.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1_2.h",
                "build/include/silk.net.direct2d.d2d1effects.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1effectauthor.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1svg.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1_3.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1effectauthor_1.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "d2d",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native",
                "no-pre-2.17-obsolete-enums"
            ],
            "converter": {},
            "prefix": "D2D1_",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dcommon.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1effects.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1effects_1.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1effects_2.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1helper.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1_1helper.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1_2helper.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1_3helper.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1effecthelpers.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2dbasetypes.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/D2DErr.h"
                ],
                "classes": {
                    "silk.net.direct2d.dcommon.h": "[Core]D2D",
                    "d2d1.h": "[Core]D2D",
                    "d2d1_1.h": "[Core]D2D",
                    "d2d1_2.h": "[Core]D2D",
                    "silk.net.direct2d.d2d1effects.h": "[Core]D2D",
                    "d2d1effectauthor.h": "[Core]D2D",
                    "d2d1svg.h": "[Core]D2D",
                    "d2d1_3.h": "[Core]D2D",
                    "d2d1effectauthor_1.h": "[Core]D2D"
                }
            },
            "exclude": [
                "D2D_VECTOR_2F",
                "D2D_VECTOR_3F",
                "D2D_VECTOR_4F",
                "D2D_POINT_2U",
                "D2D_POINT_2F",
                "D2D_POINT_2L",
                "D2D_RECT_F",
                "D2D_RECT_U",
                "D2D_RECT_L",
                "D2D_SIZE_F",
                "D2D_SIZE_U",
                "D2D_MATRIX_3X2_F",
                "D2D_MATRIX_4X3_F",
                "D2D_MATRIX_4X4_F",
                "D2D_MATRIX_5X4_F",
                "D2D1_POINT_2U",
                "D2D1_POINT_2F",
                "D2D1_POINT_2L",
                "D2D1_RECT_F",
                "D2D1_RECT_U",
                "D2D1_RECT_L",
                "D2D1_SIZE_F",
                "D2D1_SIZE_U",
                "D2D1GetGradientMeshInteriorPointsFromCoonsPatch",
                "IDXGISurface"
            ],
            "rename": {},
            "bakery": {
                "profileNames": [
                    "silk.net.direct2d.dcommon",
                    "d2d1",
                    "d2d1_1",
                    "d2d1_2",
                    "silk.net.direct2d.d2d1effects",
                    "d2d1effectauthor",
                    "d2d1svg",
                    "d2d1_3",
                    "d2d1effectauthor_1"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "innerPath": "Direct2D",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Direct2D",
            "extensionsNamespace": "Silk.NET.Direct2D.Extensions",
            "nameContainer": {
                "linux-x64": "libd2d1.so",
                "win-x64": "d2d1.dll",
                "win-x86": "d2d1.dll",
                "osx-x64": "libd2d1.dylib",
                "android": "libd2d1.so",
                "iOS": "__Internal",
                "className": "D2DLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "IDXGISurface": "Silk.NET.DXGI.IDXGISurface"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "DirectWrite",
            "sources": [
                "build/include/silk.net.directwrite.dcommon.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite_1.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite_2.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite_3.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "dwrite",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native",
                "no-pre-2.17-obsolete-enums",
                "no-csproj",
                "no-extra-dir"
            ],
            "converter": {},
            "prefix": "DWRITE_",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dcommon.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite_1.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite_2.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite_3.h"
                ],
                "classes": {
                    "silk.net.directwrite.dcommon.h": "[Core]DWrite",
                    "dwrite.h": "[Core]DWrite",
                    "dwrite_1.h": "[Core]DWrite",
                    "dwrite_2.h": "[Core]DWrite",
                    "dwrite_3.h": "[Core]DWrite"
                }
            },
            "exclude": [
                "D2D_VECTOR_2F",
                "D2D_VECTOR_3F",
                "D2D_VECTOR_4F",
                "D2D_POINT_2U",
                "D2D_POINT_2F",
                "D2D_POINT_2L",
                "D2D_RECT_F",
                "D2D_RECT_U",
                "D2D_RECT_L",
                "D2D_SIZE_F",
                "D2D_SIZE_U",
                "D2D_MATRIX_3X2_F",
                "D2D_MATRIX_4X3_F",
                "D2D_MATRIX_4X4_F",
                "D2D_MATRIX_5X4_F",
                "D2D1_POINT_2U",
                "D2D1_POINT_2F",
                "D2D1_POINT_2L",
                "D2D1_RECT_F",
                "D2D1_RECT_U",
                "D2D1_RECT_L",
                "D2D1_SIZE_F",
                "D2D1_SIZE_U",
                "D2D1GetGradientMeshInteriorPointsFromCoonsPatch",
                "IDXGISurface",
                "D2D1_ALPHA_MODE",
                "D2D1_PIXEL_FORMAT",
                "ID2D1SimplifiedGeometrySink",
                "_D3DCOLORVALUE",
                "D2D1_GRADIENT_STOP"
            ],
            "rename": {},
            "bakery": {
                "profileNames": [
                    "silk.net.directwrite.dcommon",
                    "dwrite",
                    "dwrite_1",
                    "dwrite_2",
                    "dwrite_3"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft/Silk.NET.Direct2D",
                "innerPath": "DirectWrite",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.DirectWrite",
            "extensionsNamespace": "Silk.NET.DirectWrite.Extensions",
            "overloadExclusions": {
                "RefOverloader": [
                    "GetGlyphs",
                    "GetJustifiedGlyphs",
                    "GetGlyphPlacements",
                    "GetGdiCompatibleGlyphPlacements",
                    "ApplyCharacterSpacing",
                    "GetTextComplexity",
                    "GetJustificationOpportunities",
                    "JustifyGlyphAdvances",
                    "CheckTypographicFeature"
                ]
            },
            "nameContainer": {
                "linux-x64": "libdwrite.so",
                "win-x64": "DWrite.dll",
                "win-x86": "DWrite.dll",
                "osx-x64": "libdwrite.dylib",
                "android": "libdwrite.so",
                "iOS": "__Internal",
                "className": "DWriteLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "IDXGISurface": "Silk.NET.DXGI.IDXGISurface",
                    "D2D1_ALPHA_MODE": "Silk.NET.Direct2D.AlphaMode",
                    "D2D1PixelFormat": "Silk.NET.Direct2D.PixelFormat",
                    "D2D1_GRADIENT_STOP": "Silk.NET.Direct2D.GradientStop",
                    "ID2D1SimplifiedGeometrySink": "Silk.NET.Direct2D.ID2D1SimplifiedGeometrySink",
                    "_FILETIME": "Silk.NET.Core.Win32Extras.Filetime",
                    "tagLOGFONTW": "void",
                    "tagLOGFONTA": "void",
                    "tagFONTSIGNATURE": "void"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "WindowsCodecs",
            "sources": [
                "build/include/silk.net.windowscodecs.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/wincodec.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/wincodecsdk.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "wic",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native",
                "no-pre-2.18-obsolete-enums",
                "no-csproj",
                "no-extra-dir"
            ],
            "converter": {},
            "prefix": "WIC",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/wincodec.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/wincodecsdk.h"
                ],
                "classes": {
                    "silk.net.windowscodecs.h": "[Core]WindowsCodecs",
                    "wincodec.h": "[Core]WindowsCodecs",
                    "wincodecsdk.h": "[Core]WindowsCodecs",
                    "wincodec_proxy.h": "[Core]WindowsCodecs"
                }
            },
            "exclude": [
                "ID2D1Device",
                "ID2D1Image",
                "WICRect"
            ],
            "rename": {
                "WICProgressNotification": "ProgressNotificationEnum"
            },
            "bakery": {
                "profileNames": [
                    "silk.net.windowscodecs",
                    "windowscodecs"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft/Silk.NET.Direct2D",
                "innerPath": "WindowsCodecs",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.WindowsCodecs",
            "extensionsNamespace": "Silk.NET.WindowsCodecs.Extensions",
            "nameContainer": {
                "linux-x64": "libwindowscodecs.so",
                "win-x64": "windowscodecs.dll",
                "win-x86": "windowscodecs.dll",
                "osx-x64": "libwindowscodecs.dylib",
                "android": "libwindowscodecs.so",
                "iOS": "__Internal",
                "className": "WICLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "ID2D1Device": "Silk.NET.Direct2D.ID2D1Device",
                    "ID2D1Image": "Silk.NET.Direct2D.ID2D1Image",
                    "D2D1_PIXEL_FORMAT": "Silk.NET.Direct2D.PixelFormat",
                    "DXGI_JPEG_QUANTIZATION_TABLE": "Silk.NET.DXGI.JpegQuantizationTable",
                    "DXGI_JPEG_AC_HUFFMAN_TABLE": "Silk.NET.DXGI.JpegACHuffmanTable",
                    "DXGI_JPEG_DC_HUFFMAN_TABLE": "Silk.NET.DXGI.JpegDCHuffmanTable",
                    "DXGI_FORMAT": "Silk.NET.DXGI.Format",
                    "_RPC_MESSAGE": "Silk.NET.Core.Win32Extras.RPCMessage",
                    "IRpcStubBuffer": "Silk.NET.Core.Win32Extras.IRpcStubBuffer",
                    "IRpcChannelBuffer": "Silk.NET.Core.Win32Extras.IRpcChannelBuffer",
                    "ISequentialStream": "Silk.NET.Core.Win32Extras.ISequentialStream",
                    "IPersist": "Silk.NET.Core.Win32Extras.IPersist",
                    "IPersistStream": "Silk.NET.Core.Win32Extras.IPersistStream",
                    "IPropertyBag2": "Silk.NET.Core.Win32Extras.IPropertyBag2",
                    "IEnumUnknown": "Silk.NET.Core.Win32Extras.IEnumUnknown",
                    "IEnumString": "Silk.NET.Core.Win32Extras.IEnumString",
                    "tagSAFEARRAY": "Silk.NET.Core.Win32Extras.SafeArray",
                    "tagSTATSTG": "Silk.NET.Core.Win32Extras.STATSTG",
                    "tagPROPVARIANT": "Silk.NET.Core.Win32Extras.PropVariant",
                    "tagPROPBAG2": "Silk.NET.Core.Win32Extras.PropBag2",
                    "HPALETTE__": "void",
                    "HBITMAP__": "void",
                    "HICON__": "void",
                    "WICRect": "Silk.NET.Maths.Rectangle<int>"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "D3D11",
            "sources": [
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11_1.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11_2.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11_3.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11_4.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11shader.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11shadertracing.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11sdklayers.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11on12.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/windows.graphics.directx.direct3d11.interop.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/winrt/windows.graphics.directx.direct3d11.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "d3d11",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native"
            ],
            "converter": {},
            "prefix": "D3D11",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [],
                "classes": {
                    "d3d11.h": "[Core]D3D11",
                    "d3d11_1.h": "[Core]D3D11",
                    "d3d11_2.h": "[Core]D3D11",
                    "d3d11_3.h": "[Core]D3D11",
                    "d3d11_4.h": "[Core]D3D11",
                    "d3d11shader.h": "[Core]D3D11",
                    "d3d11shadertracing.h": "[Core]D3D11",
                    "d3d11sdklayers.h": "[Core]D3D11",
                    "d3d11on12.h": "[D3D11On12:D3D11]D3D11On12",
                    "windows.graphics.directx.direct3d11.interop.h": "[Core]D3D11",
                    "windows.graphics.directx.direct3d11.h": "[Core]D3D11"
                },
                "comRefs": [
                    "Silk.NET.DXGI.IDXGIAdapter",
                    "Silk.NET.DXGI.IDXGISwapChain",
                    "Silk.NET.Core.Native.ID3D10Blob",
                    "Silk.NET.Core.Native.ID3DDestructionNotifier",
                    "Silk.NET.Core.Native.ID3DInclude"
                ]
            },
            "exclude": [
                "ID3D10Blob"
            ],
            "rename": {
                "D3D11_OMAC": "OMAC"
            },
            "bakery": {
                "profileNames": [
                    "d3d11",
                    "d3d11_1",
                    "d3d11_2",
                    "d3d11_3",
                    "d3d11_4",
                    "d3d11shader",
                    "d3d11shadertracing",
                    "d3d11sdklayers",
                    "d3d11on12",
                    "windows.graphics.directx.direct3d11.interop",
                    "windows.graphics.directx.direct3d11"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Direct3D11",
            "extensionsNamespace": "Silk.NET.Direct3D11.Extensions",
            "nameContainer": {
                "linux-x64": "libd3d11.so",
                "win-x64": "d3d11.dll",
                "win-x86": "d3d11.dll",
                "osx-x64": "libd3d11.dylib",
                "android": "libd3d11.so",
                "iOS": "__Internal",
                "className": "D3D11LibraryNameContainer"
            },
            "typeMaps": [
                {
                    "D3D11_AUTHENTICATED_PROTECTION_FLAGS::__MIDL___MIDL_itf_d3d11_0000_0034_0001": "MIDLMIDLItfD3d11000000340001",
                    "ID3D10Blob": "Silk.NET.Core.Native.ID3D10Blob",
                    "D3D12_RESOURCE_STATES": "Silk.NET.Direct3D12.ResourceStates",
                    "ID3D12Fence": "Silk.NET.Direct3D12.ID3D12Fence",
                    "ID3D12CommandQueue": "Silk.NET.Direct3D12.ID3D12CommandQueue",
                    "ABI::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription": "Direct3DSurfaceDescription",
                    "ABI::Windows::Graphics::DirectX::DirectXPixelFormat": "Silk.NET.DXGI.DirectXPixelFormat",
                    "ABI::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription": "Direct3DMultisampleDescription"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "D3D12",
            "sources": [
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d12.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d12shader.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d12video.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d12sdklayers.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "d3d12",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native"
            ],
            "converter": {},
            "prefix": "D3D12",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [],
                "classes": {
                    "d3d12.h": "[Core]D3D12",
                    "d3d12shader.h": "[Core]D3D12",
                    "d3d12video.h": "[Core]D3D12",
                    "d3d12sdklayers.h": "[Core]D3D12"
                },
                "comRefs": [
                    "Silk.NET.DXGI.IDXGIAdapter",
                    "Silk.NET.DXGI.IDXGISwapChain",
                    "Silk.NET.Core.Native.ID3D10Blob",
                    "Silk.NET.Core.Native.ID3DDestructionNotifier",
                    "Silk.NET.Core.Native.ID3DInclude"
                ]
            },
            "exclude": [
                "D3D12_RAYTRACING_AABB"
            ],
            "rename": {
                "D3D12_NODE_MASK": "D3D12NodeMask"
            },
            "bakery": {
                "profileNames": [
                    "d3d12",
                    "d3d12shader",
                    "d3d12video",
                    "d3d12sdklayers"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Direct3D12",
            "extensionsNamespace": "Silk.NET.Direct3D12.Extensions",
            "nameContainer": {
                "linux-x64": "libD3D12.so",
                "win-x64": "D3D12.dll",
                "win-x86": "D3D12.dll",
                "osx-x64": "libD3D12.dylib",
                "android": "libD3D12.so",
                "iOS": "__Internal",
                "className": "D3D12LibraryNameContainer"
            },
            "typeMaps": [
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "D3D9",
            "sources": [
                "src/Microsoft/Silk.NET.Direct3D9/D3D9.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "d3d9",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native"
            ],
            "converter": {},
            "prefix": "D3D",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m64",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d9helper.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/d3d9.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/d3d9caps.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/d3d9types.h"
                ],
                "classes": {
                    "D3D9.h": "[Core]D3D9"
                },
                "comRefs": [
                    "Silk.NET.DXGI.IDXGIAdapter",
                    "Silk.NET.DXGI.IDXGISwapChain",
                    "Silk.NET.Core.Native.ID3D10Blob",
                    "Silk.NET.Core.Native.ID3DDestructionNotifier",
                    "Silk.NET.Core.Native.ID3DInclude"
                ]
            },
            "exclude": [
                "__AnonymousRecord_d3d9types_L93_C9",
                "__AnonymousRecord_d3d9types_L92_C5",
                "_D3DMATRIX",
                "_D3DCOLORVALUE"
            ],
            "rename": {
                "_D3D_OMAC": "D3DOMac"
            },
            "bakery": {
                "profileNames": [
                    "D3D9"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Direct3D9",
            "extensionsNamespace": "Silk.NET.Direct3D9.Extensions",
            "nameContainer": {
                "linux-x64": "libd3d9.so",
                "win-x64": "d3d9.dll",
                "win-x86": "d3d9.dll",
                "osx-x64": "libd3d9.dylib",
                "android": "libd3d9.so",
                "iOS": "__Internal",
                "className": "D3D9LibraryNameContainer"
            },
            "typeMaps": [
                {
                    "_RGNDATA": "RGNData",
                    "_D3DMATRIX": "System.Numerics.Matrix4x4"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "DXC",
            "sources": [
                "src/Microsoft/Silk.NET.Direct3D.Compilers/DXC.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "dxc",
            "controlDescriptors": [
                "convert-windows-only",
                "no-csproj",
                "typemap-native",
                "COMMENT: the below is needed because D3DCompiler and Dxc are in the same project and will fight eachother otherwise",
                "keep-unknown-gen-files"
            ],
            "prefix": "Dxc",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dxcapi.h"
                ],
                "classes": {
                    "DXC.h": "[Core]DXC"
                },
                "comRefs": [
                    "Silk.NET.DXGI.IDXGIAdapter",
                    "Silk.NET.DXGI.IDXGISwapChain",
                    "Silk.NET.Core.Native.ID3D10Blob",
                    "Silk.NET.Core.Native.ID3DDestructionNotifier",
                    "Silk.NET.Core.Native.ID3DInclude"
                ]
            },
            "exclude": [],
            "rename": {},
            "bakery": {
                "profileNames": [
                    "DXC"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Direct3D.Compilers",
            "extensionsNamespace": "Silk.NET.Direct3D.Compilers.Extensions",
            "nameContainer": {
                "linux-x64": "libdxcompiler.so",
                "win-x64": "dxcompiler.dll",
                "win-x86": "dxcompiler.dll",
                "osx-x64": "libdxcompiler.dylib",
                "android": "libdxcompiler.so",
                "iOS": "__Internal",
                "className": "DXCLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "IStream": "void"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "D3DCompiler",
            "sources": [
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3dcompiler.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "d3dcompiler",
            "controlDescriptors": [
                "convert-windows-only",
                "COMMENT: the below is needed because D3DCompiler and Dxc are in the same project and will fight eachother otherwise",
                "keep-unknown-gen-files",
                "typemap-native"
            ],
            "prefix": "D3D",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [],
                "classes": {
                    "d3dcompiler.h": "[Core]D3DCompiler"
                },
                "comRefs": [
                    "Silk.NET.DXGI.IDXGIAdapter",
                    "Silk.NET.DXGI.IDXGISwapChain",
                    "Silk.NET.Core.Native.ID3D10Blob",
                    "Silk.NET.Core.Native.ID3DDestructionNotifier",
                    "Silk.NET.Core.Native.ID3DInclude"
                ]
            },
            "exclude": [],
            "rename": {},
            "bakery": {
                "profileNames": [
                    "d3dcompiler"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Direct3D.Compilers",
            "extensionsNamespace": "Silk.NET.Direct3D.Compilers.Extensions",
            "nameContainer": {
                "linux-x64": "libD3DCompiler_47.so",
                "win-x64": "D3DCompiler_47.dll",
                "win-x86": "D3DCompiler_47.dll",
                "osx-x64": "libD3DCompiler_47.dylib",
                "android": "libD3DCompiler_47.so",
                "iOS": "__Internal",
                "className": "D3DCompilerLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "ID3D11Module": "void",
                    "ID3D11Linker": "void",
                    "ID3D11FunctionLinkingGraph": "void",
                    "IStream": "Silk.NET.Core.Native.IStream"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "DirectStorage",
            "sources": [
                "src/Microsoft/Silk.NET.DirectStorage/silk.net.directstorage.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "dstorage",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native"
            ],
            "prefix": "DStorage",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-I$nuget/Microsoft.Direct3D.DirectStorage/*/Include/DirectStorage",
                    "-I$nuget/Microsoft.Direct3D.DirectStorage/*/native/include"
                ],
                "traverse": [
                    "$nuget/Microsoft.Direct3D.DirectStorage/*/Include/DirectStorage/*.h",
                    "$nuget/Microsoft.Direct3D.DirectStorage/*/native/include/*.h"
                ],
                "classes": {
                    "silk.net.directstorage.h": "[Core]DStorage"
                }
            },
            "exclude": [
                "ID3D12Resource",
                "ID3D12Fence"
            ],
            "rename": {},
            "bakery": {
                "profileNames": [
                    "silk.net.directstorage"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.DirectStorage",
            "extensionsNamespace": "Silk.NET.DirectStorage.Extensions",
            "nameContainer": {
                "linux-x64": "libdstorage.so",
                "win-x64": "dstorage.dll",
                "win-x86": "dstorage.dll",
                "osx-x64": "libdstorage.dylib",
                "android": "libdstorage.so",
                "iOS": "__Internal",
                "className": "DStorageLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "ID3D12Resource": "Silk.NET.Direct3D12.ID3D12Resource",
                    "ID3D12Fence": "Silk.NET.Direct3D12.ID3D12Fence",
                    "ID3D12Device": "Silk.NET.Direct3D12.ID3D12Device",
                    "D3D12_TILED_RESOURCE_COORDINATE": "Silk.NET.Direct3D12.TiledResourceCoordinate",
                    "D3D12_TILE_REGION_SIZE": "Silk.NET.Direct3D12.TileRegionSize",
                    "_BY_HANDLE_FILE_INFORMATION": "Silk.NET.Core.Win32Extras.ByHandleFileInformation",
                    "D3D12_BOX": "Silk.NET.Direct3D12.Box"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ],
            "copy": {
                "$nuget/Microsoft.Direct3D.DirectStorage/*/native/bin/ARM/*.dll": "src/Native/Silk.NET.DirectStorage.Native/runtimes/win-arm/native",
                "$nuget/Microsoft.Direct3D.DirectStorage/*/native/bin/ARM64/*.dll": "src/Native/Silk.NET.DirectStorage.Native/runtimes/win-arm64/native",
                "$nuget/Microsoft.Direct3D.DirectStorage/*/native/bin/x64/*.dll": "src/Native/Silk.NET.DirectStorage.Native/runtimes/win-x64/native",
                "$nuget/Microsoft.Direct3D.DirectStorage/*/native/bin/x86/*.dll": "src/Native/Silk.NET.DirectStorage.Native/runtimes/win-x86/native",
                "$nuget/Microsoft.Direct3D.DirectStorage/*/LICENSE.txt": "src/Native/Silk.NET.DirectStorage.Native/LICENSE.txt",
                "$nuget/Microsoft.Direct3D.DirectStorage/*/$version": "src/Native/Silk.NET.DirectStorage.Native/version.txt"
            }
        },
        {
            "profileName": "DirectComposition",
            "sources": [
                "build/include/silk.net.directcomposition.dcomp.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "dcomp",
            "controlDescriptors": [
                "convert-windows-only",
                "no-pre-2.17-obsolete-enums",
                "typemap-native"
            ],
            "converter": {},
            "prefix": "DComposition",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dcompanimation.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/dcomptypes.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dcomp.h"
                ],
                "classes": {
                    "silk.net.directcomposition.dcomp.h": "[Core]DComp"
                }
            },
            "exclude": [
                "D2D_MATRIX_3X2_F",
                "D2D_RECT_F",
                "D2D1_COMPOSITE_MODE",
                "_D3DCOLORVALUE",
                "D3DMATRIX"
            ],
            "rename": {
                "tagCOMPOSITION_FRAME_STATS": "CompositionFrameStats",
                "tagCOMPOSITION_STATS": "CompositionStats",
                "tagCOMPOSITION_TARGET_ID": "CompositionTargetId",
                "tagCOMPOSITION_TARGET_STATS": "CompositionTargetStats"
            },
            "bakery": {
                "profileNames": [
                    "silk.net.directcomposition.dcomp"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.DirectComposition",
            "extensionsNamespace": "Silk.NET.DirectComposition.Extensions",
            "nameContainer": {
                "linux-x64": "libDComp.so",
                "win-x64": "DComp.dll",
                "win-x86": "DComp.dll",
                "osx-x64": "libDComp.dylib",
                "android": "libDComp.so",
                "iOS": "__Internal",
                "className": "DCompLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "D2D_MATRIX_3X2_F": "Silk.NET.Maths.Matrix3X2<float>",
                    "D2D_RECT_F": "Silk.NET.Maths.Rectangle<float>",
                    "D3DMATRIX": "Silk.NET.Maths.Matrix4X4<float>",
                    "DXGI_RATIONAL": "Silk.NET.DXGI.Rational",
                    "DXGI_ALPHA_MODE": "Silk.NET.DXGI.AlphaMode",
                    "DXGI_HDR_METADATA_TYPE": "Silk.NET.DXGI.HdrMetadataType",
                    "D2D1_BORDER_MODE": "Silk.NET.Direct2D.BorderMode",
                    "D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE": "Silk.NET.Direct2D.D2D12DaffinetransformInterpolationMode",
                    "D2D1_COLORMATRIX_ALPHA_MODE": "Silk.NET.Direct2D.ColormatrixAlphaMode",
                    "D2D1_BLEND_MODE": "Silk.NET.Direct2D.BlendMode",
                    "D2D1_COMPOSITE_MODE": "Silk.NET.Direct2D.CompositeMode",
                    "D2D1_TURBULENCE_NOISE": "Silk.NET.Direct2D.TurbulenceNoise"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "XAudio",
            "_commented_out_sources": [
                "X3DAudio currently can't be parsed due to the same bug that Assimp has.",
                "(intrin.h is invalid for clang, will be fixed in VS 16.9)",
                "build/include/silk.net.xaudio.x3daudio.h"
            ],
            "sources": [
                "build/include/silk.net.xaudio.xaudio2.h",
                "build/include/silk.net.xaudio.xaudio2fx.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "xaudio",
            "controlDescriptors": [
                "convert-windows-only",
                "NOTE we'll handle the loading ourselves as it's a bit quirky here",
                "no-name-container",
                "typemap-native"
            ],
            "prefix": "XAudio2",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/xaudio2fx.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/xaudio2.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/x3daudio2.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/AudioSessionTypes.h"
                ],
                "classes": {
                    "silk.net.xaudio.xaudio2.h": "[Core]XAudio",
                    "silk.net.xaudio.xaudio2fx.h": "[Core]XAudioFX",
                    "silk.net.xaudio.x3daudio.h": "[Core]X3DAudio"
                }
            },
            "exclude": [],
            "rename": {},
            "bakery": {
                "profileNames": [
                    "silk.net.xaudio.xaudio2",
                    "silk.net.xaudio.xaudio2fx",
                    "silk.net.xaudio.x3daudio"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.XAudio",
            "extensionsNamespace": "Silk.NET.XAudio.Extensions",
            "typeMaps": [
                {
                    "tWAVEFORMATEX": "WaveFormatEx"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "XInput",
            "sources": [
                "build/include/silk.net.xinput.xinput.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "xinput",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native"
            ],
            "prefix": "XInput",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/Xinput.h"
                ],
                "classes": {
                    "silk.net.xinput.xinput.h": "[Core]XInput"
                }
            },
            "exclude": [],
            "rename": {},
            "bakery": {
                "profileNames": [
                    "silk.net.xinput.xinput"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.XInput",
            "extensionsNamespace": "Silk.NET.XInput.Extensions",
            "typeMaps": [
                {},
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "webgpu",
            "sources": [
                "build/submodules/webgpu-headers/webgpu.h",
                "build/submodules/wgpu-native/ffi/wgpu.h",
                "build/submodules/dawn/out/Debug/gen/include/dawn/dawn-webgpu.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "webgpu",
            "controlDescriptors": [
                "convert-windows-only",
                "no-pre-2.17-obsolete-enums",
                "typemap-native"
            ],
            "converter": {},
            "prefix": "wgpu",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m64",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/submodules/wgpu-native/ffi/webgpu-headers"
                ],
                "traverse": [
                    "build/submodules/webgpu-headers/*.h",
                    "build/submodules/wgpu-native/*.h"
                ],
                "classes": {
                    "webgpu.h": "[Core]WebGPU",
                    "wgpu.h": "[WGPU:WebGPU]Wgpu",
                    "dawn-webgpu.h": "[Dawn:WebGPU]Dawn"
                }
            },
            "exclude": [],
            "rename": {
                "WGPUInstanceRequestAdapterCallback": "RequestAdapterCallback",
                "WGPUAdapterRequestDeviceCallback": "RequestDeviceCallback",
                "WGPURequestAdapterCallback": "RequestAdapterCallback",
                "WGPURequestDeviceCallback": "RequestDeviceCallback",
                "WGPUBufferMapAsyncCallback": "BufferMapCallback",
                "WGPUBufferMapCallback": "BufferMapCallback",
                "WGPUCompilationInfoCallback": "CompilationInfoCallback",
                "WGPUShaderModuleGetCompilationInfoCallback": "CompilationInfoCallback",
                "WGPUQueueWorkDoneCallback": "QueueWorkDoneCallback",
                "WGPUQueueOnSubmittedWorkDoneCallback": "QueueWorkDoneCallback",
                "WGPUDeviceCreateRenderPipelineAsyncCallback": "CreateRenderPipelineAsyncCallback",
                "WGPUCreateRenderPipelineAsyncCallback": "CreateRenderPipelineAsyncCallback",
                "WGPUDeviceCreateComputePipelineAsyncCallback": "CreateComputePipelineAsyncCallback",
                "WGPUCreateComputePipelineAsyncCallback": "CreateComputePipelineAsyncCallback",
                "WGPUComputePipelineImpl": "ComputePipeline",
                "WGPUAdapterImpl": "Adapter",
                "WGPUBindGroupImpl": "BindGroup",
                "WGPUBindGroupLayoutImpl": "BindGroupLayout",
                "WGPUBufferImpl": "Buffer",
                "WGPUCommandBufferImpl": "CommandBuffer",
                "WGPUCommandEncoderImpl": "CommandEncoder",
                "WGPUComputePassEncoderImpl": "ComputePassEncoder",
                "WGPUDeviceImpl": "Device",
                "WGPUInstanceImpl": "Instance",
                "WGPUPipelineLayoutImpl": "PipelineLayout",
                "WGPUQuerySetImpl": "QuerySet",
                "WGPUQueueImpl": "Queue",
                "WGPURenderBundleEncoderImpl": "RenderBundleEncoder",
                "WGPURenderBundleImpl": "RenderBundle",
                "WGPURenderPassEncoderImpl": "RenderPassEncoder",
                "WGPURenderPipelineImpl": "RenderPipeline",
                "WGPUSamplerImpl": "Sampler",
                "WGPUShaderModuleImpl": "ShaderModule",
                "WGPUSurfaceImpl": "Surface",
                "WGPUSwapChainImpl": "SwapChain",
                "WGPUTextureImpl": "Texture",
                "WGPUTextureViewImpl": "TextureView"
            },
            "bakery": {
                "profileNames": [
                    "webgpu",
                    "wgpu",
                    "dawn-webgpu"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/WebGPU",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.WebGPU",
            "extensionsNamespace": "Silk.NET.WebGPU.Extensions",
            "nameContainer": {
                "linux-x64": "libwgpu_native.so",
                "win-x64": "wgpu_native.dll",
                "win-x86": "wgpu_native.dll",
                "osx-x64": "libwgpu_native.dylib",
                "android": "libwgpu_native.so",
                "className": "WebGPULibraryNameContainer"
            },
            "typeMaps": [
                {
                    "WGPUColorWriteMaskFlags": "Silk.NET.WebGPU.ColorWriteMask",
                    "WGPUBufferUsageFlags": "Silk.NET.WebGPU.BufferUsage",
                    "WGPUMapModeFlags": "Silk.NET.WebGPU.MapMode",
                    "WGPUShaderStageFlags": "Silk.NET.WebGPU.ShaderStage",
                    "WGPUTextureUsageFlags": "Silk.NET.WebGPU.TextureUsage",
                    "WGPUInstanceBackendFlags": "Silk.NET.WebGPU.Extensions.WGPU.InstanceBackend",
                    "WGPUBool": "Silk.NET.Core.Bool32"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.dxTypeMap": "build/dx_typemap.json"
                }
            ]
        },
        {
            "profileName": "SPIRV",
            "sources": [
                "build/submodules/SPIRV-Headers/include/spirv/unified1/spirv.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "spirv",
            "controlDescriptors": [
                "convert-windows-only",
                "no-pre-2.18-obsolete-enums",
                "typemap-native",
                "no-extra-dir",
                "no-name-container"
            ],
            "converter": {},
            "prefix": "spv",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m64",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/submodules/SPIRV-Reflect"
                ],
                "traverse": [
                    "build/submodules/SPIRV-Headers/include/spirv/unified1/spirv.h"
                ],
                "classes": {
                    "spirv.h": "[Core]Spv"
                }
            },
            "exclude": [
                "SPV_VERSION",
                "SPV_REVISION"
            ],
            "prefixOverrides": {
                "SpvImageChannelOrder_": "SpvImageChannelOrder"
            },
            "rename": {},
            "bakery": {
                "profileNames": [
                    "spirv"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/SPIRV/Silk.NET.SPIRV",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.SPIRV",
            "extensionsNamespace": "Silk.NET.SPIRV.Extensions",
            "nameContainer": {
                "linux-x64": "libspirv-reflect.so",
                "win-x64": "spirv-reflect.dll",
                "win-x86": "spirv-reflect.dll",
                "osx-x64": "libspirv-reflect.dylib",
                "android": "libspirv-reflect.so",
                "className": "SPIRVReflectLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "SpvReflectTypeDescription::Traits": "Traits",
                    "SpvReflectShaderModule::Internal": "Internal",
                    "SpvReflectNumericTraits::Scalar": "Scalar",
                    "SpvReflectNumericTraits::Vector": "Vector",
                    "SpvReflectNumericTraits::Matrix": "Matrix",
                    "SpvReflectEntryPoint::LocalSize": "LocalSize"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.dxTypeMap": "build/dx_typemap.json"
                }
            ]
        },
        {
            "profileName": "SPIRVReflect",
            "sources": [
                "build/submodules/SPIRV-Reflect/spirv_reflect.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "spirv-reflect",
            "controlDescriptors": [
                "convert-windows-only",
                "no-pre-2.18-obsolete-enums",
                "typemap-native",
                "no-extra-dir"
            ],
            "converter": {},
            "prefix": "spvReflect",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m64",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/submodules/SPIRV-Reflect"
                ],
                "traverse": [
                    "build/submodules/SPIRV-Reflect/spirv_reflect.h"
                ],
                "classes": {
                    "spirv_reflect.h": "[Core]Reflect"
                }
            },
            "exclude": [
                "SPV_REVISION",
                "SPV_VERSION",
                "ShaderModule"
            ],
            "rename": {
                "SpvReflectDescriptorSet": "ReflectDescriptorSet",
                "SpvReflectShaderModule": "ReflectShaderModule",
                "__AnonymousEnum_spirv_reflect_L261_C1": "Constants",
                "__AnonymousEnum_spirv_reflect_L266_C1": "Constants",
                "__AnonymousEnum_spirv_reflect_L281_C1": "Constants",
                "__AnonymousEnum_spirv_reflect_L286_C1": "Constants"
            },
            "bakery": {
                "profileNames": [
                    "spirv_reflect"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/SPIRV/Silk.NET.SPIRV.Reflect",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.SPIRV.Reflect",
            "extensionsNamespace": "Silk.NET.SPIRV.Reflect.Extensions",
            "nameContainer": {
                "linux-x64": "libspirv-reflect.so",
                "win-x64": "spirv-reflect.dll",
                "win-x86": "spirv-reflect.dll",
                "osx-x64": "libspirv-reflect.dylib",
                "android": "libspirv-reflect.so",
                "className": "SPIRVReflectLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "SpvReflectTypeDescription::Traits": "Traits",
                    "SpvReflectShaderModule::Internal": "Internal",
                    "SpvReflectNumericTraits::Scalar": "Scalar",
                    "SpvReflectNumericTraits::Vector": "Vector",
                    "SpvReflectNumericTraits::Matrix": "Matrix",
                    "SpvReflectEntryPoint::LocalSize": "LocalSize",
                    "SpvSourceLanguage_": "Silk.NET.SPIRV.SourceLanguage",
                    "SpvDim_": "Silk.NET.SPIRV.Dim",
                    "SpvExecutionMode_": "Silk.NET.SPIRV.ExecutionMode",
                    "SpvExecutionModel_": "Silk.NET.SPIRV.ExecutionModel",
                    "SpvImageFormat_": "Silk.NET.SPIRV.ImageFormat",
                    "SpvOp_": "Silk.NET.SPIRV.Op",
                    "SpvBuiltIn_": "Silk.NET.SPIRV.BuiltIn",
                    "SpvStorageClass_": "Silk.NET.SPIRV.StorageClass",
                    "SpvCapability_": "Silk.NET.SPIRV.Capability"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.dxTypeMap": "build/dx_typemap.json"
                }
            ]
        },
        {
            "profileName": "SPIRVCross",
            "sources": [
                "build/submodules/SPIRV-Cross/spirv_cross_c.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "spirv-cross",
            "controlDescriptors": [
                "convert-windows-only",
                "no-pre-2.18-obsolete-enums",
                "typemap-native",
                "no-extra-dir"
            ],
            "converter": {},
            "prefix": "spvc_",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m64",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/submodules/SPIRV-Cross"
                ],
                "traverse": [
                    "build/submodules/SPIRV-Cross/spirv_cross_c.h"
                ],
                "classes": {
                    "spirv_cross_c.h": "[Core]Cross"
                }
            },
            "exclude": [],
            "rename": {
                "spvc_compiler_options_s": "CompilerOptions",
                "spvc_compiler_s": "Compiler",
                "spvc_constant_s": "Constant",
                "spvc_context_s": "Context",
                "spvc_parsed_ir_s": "ParsedIr",
                "spvc_resources_s": "Resources",
                "spvc_set_s": "Set",
                "spvc_type_s": "CrossType"
            },
            "bakery": {
                "profileNames": [
                    "spirv_cross_c"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/SPIRV/Silk.NET.SPIRV.Cross",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.SPIRV.Cross",
            "extensionsNamespace": "Silk.NET.SPIRV.Cross.Extensions",
            "nameContainer": {
                "linux-x64": "libspirv-cross.so",
                "win-x64": "spirv-cross.dll",
                "win-x86": "spirv-cross.dll",
                "osx-x64": "libspirv-cross.dylib",
                "android": "libspirv-cross.so",
                "className": "SPIRVCrossLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "SpvSourceLanguage_": "Silk.NET.SPIRV.SourceLanguage",
                    "SpvDim_": "Silk.NET.SPIRV.Dim",
                    "SpvExecutionMode_": "Silk.NET.SPIRV.ExecutionMode",
                    "SpvExecutionModel_": "Silk.NET.SPIRV.ExecutionModel",
                    "SpvImageFormat_": "Silk.NET.SPIRV.ImageFormat",
                    "SpvOp_": "Silk.NET.SPIRV.Op",
                    "SpvBuiltIn_": "Silk.NET.SPIRV.BuiltIn",
                    "SpvStorageClass_": "Silk.NET.SPIRV.StorageClass",
                    "SpvCapability_": "Silk.NET.SPIRV.Capability",
                    "SpvDecoration_": "Silk.NET.SPIRV.Decoration",
                    "SpvAccessQualifier_": "Silk.NET.SPIRV.AccessQualifier"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.dxTypeMap": "build/dx_typemap.json"
                }
            ]
        },
        {
            "profileName": "shaderc",
            "sources": [
                "build/submodules/shaderc/libshaderc/include/shaderc/shaderc.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "shaderc",
            "controlDescriptors": [
                "convert-windows-only",
                "no-pre-2.18-obsolete-enums",
                "typemap-native",
                "no-extra-dir"
            ],
            "converter": {},
            "prefix": "shaderc_",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m64",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/submodules/shaderc/libshaderc/include"
                ],
                "traverse": [
                    "build/submodules/shaderc/libshaderc/include/shaderc/shaderc.h",
                    "build/submodules/shaderc/libshaderc/include/shaderc/env.h",
                    "build/submodules/shaderc/libshaderc/include/shaderc/status.h"
                ],
                "classes": {
                    "shaderc.h": "[Core]Shaderc",
                    "env.h": "[Core]Shaderc"
                }
            },
            "exclude": [],
            "rename": {},
            "bakery": {
                "profileNames": [
                    "shaderc"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/SPIRV/Silk.NET.Shaderc",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Shaderc",
            "extensionsNamespace": "Silk.NET.Shaderc.Extensions",
            "nameContainer": {
                "linux-x64": "libshaderc_shared.so",
                "win-x64": "shaderc_shared.dll",
                "win-x86": "shaderc_shared.dll",
                "osx-x64": "libshaderc_shared.dylib",
                "android": "libshaderc_shared.so",
                "className": "ShadercLibraryNameContainer"
            },
            "typeMaps": [
                {},
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.dxTypeMap": "build/dx_typemap.json"
                }
            ]
        },
        {
            "profileName": "WGL",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/main/xml/wgl.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "wgl",
            "controlDescriptors": [
                "allow-redefinitions"
            ],
            "converter": {
                "reader": "gl",
                "constructor": "gl",
                "className": "WGL"
            },
            "prefix": "wgl",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "wgl"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenGL",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.WGL",
            "extensionsNamespace": "Silk.NET.WGL.Extensions",
            "typeMaps": [
                {
                    "$include.glTypeMap": "build/gl_typemap.json",
                    "LPGLYPHMETRICSFLOAT": "GlyphMetricsFloat*",
                    "PIXELFORMATDESCRIPTOR": "PixelFormatDescriptor",
                    "LAYERPLANEDESCRIPTOR": "LayerPlaneDescriptor",
                    "HENHMETAFILE": "nint",
                    "unsignedlong": "uint",
                    "HPVIDEODEV": "nint",
                    "HVIDEOOUTPUTDEVICENV": "nint",
                    "HVIDEOINPUTDEVICENV": "nint",
                    "INT": "int",
                    "HGPUNV": "nint",
                    "PGPU_DEVICE": "GpuDevice*",
                    "unsignedint": "uint"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.khronosTypeMap": "build/khronos_typemap.json"
                }
            ]
        }
    ]
}
